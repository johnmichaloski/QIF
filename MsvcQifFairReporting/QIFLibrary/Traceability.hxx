// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef TRACEABILITY_HXX
#define TRACEABILITY_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xsd
{
  namespace qif2
  {
    class InspectionProgramType;
    class InspectionSoftwareItemsType;
    class EnvironmentType;
    class EnvironmentsType;
    class InspectionTraceabilityType;
    class PreInspectionTraceabilityType;
    class ProductTraceabilityType;
    class ActualProductTraceabilityType;
    class ProcessParameterType;
    class ManufacturingProcessTraceabilityType;
    class ManufacturingProcessTraceabilitiesType;
    class ErrorsType;
    class PartialInspectionType;
    class TimeDescriptionEnumType;
    class TimeDescriptionType;
    class InspectionModeEnumType;
    class InspectionScopeEnumType;
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "../qiflibrary/intermediatespmi.hxx"

namespace xsd
{
  namespace qif2
  {
    class InspectionProgramType: public ::xml_schema::type
    {
      public:
      // File
      //
      typedef ::xsd::qif2::FileType File_type;
      typedef ::xsd::cxx::tree::traits< File_type, char > File_traits;

      const File_type&
      File () const;

      File_type&
      File ();

      void
      File (const File_type& x);

      void
      File (::std::auto_ptr< File_type > p);

      // Description
      //
      typedef ::xml_schema::string Description_type;
      typedef ::xsd::cxx::tree::optional< Description_type > Description_optional;
      typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

      const Description_optional&
      Description () const;

      Description_optional&
      Description ();

      void
      Description (const Description_type& x);

      void
      Description (const Description_optional& x);

      void
      Description (::std::auto_ptr< Description_type > p);

      // FormalStandard
      //
      typedef ::xsd::qif2::FormalStandardType FormalStandard_type;
      typedef ::xsd::cxx::tree::traits< FormalStandard_type, char > FormalStandard_traits;

      const FormalStandard_type&
      FormalStandard () const;

      FormalStandard_type&
      FormalStandard ();

      void
      FormalStandard (const FormalStandard_type& x);

      void
      FormalStandard (::std::auto_ptr< FormalStandard_type > p);

      // Author
      //
      typedef ::xsd::qif2::EmployeeType Author_type;
      typedef ::xsd::cxx::tree::traits< Author_type, char > Author_traits;

      const Author_type&
      Author () const;

      Author_type&
      Author ();

      void
      Author (const Author_type& x);

      void
      Author (::std::auto_ptr< Author_type > p);

      // Constructors.
      //
      InspectionProgramType (const File_type&,
                             const FormalStandard_type&,
                             const Author_type&);

      InspectionProgramType (::std::auto_ptr< File_type >,
                             ::std::auto_ptr< FormalStandard_type >,
                             ::std::auto_ptr< Author_type >);

      InspectionProgramType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      InspectionProgramType (const InspectionProgramType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual InspectionProgramType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      InspectionProgramType&
      operator= (const InspectionProgramType& x);

      virtual 
      ~InspectionProgramType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< File_type > File_;
      Description_optional Description_;
      ::xsd::cxx::tree::one< FormalStandard_type > FormalStandard_;
      ::xsd::cxx::tree::one< Author_type > Author_;
    };

    class InspectionSoftwareItemsType: public ::xml_schema::type
    {
      public:
      // InspectionProgramGenerationSoftware
      //
      typedef ::xsd::qif2::SoftwareType InspectionProgramGenerationSoftware_type;
      typedef ::xsd::cxx::tree::sequence< InspectionProgramGenerationSoftware_type > InspectionProgramGenerationSoftware_sequence;
      typedef InspectionProgramGenerationSoftware_sequence::iterator InspectionProgramGenerationSoftware_iterator;
      typedef InspectionProgramGenerationSoftware_sequence::const_iterator InspectionProgramGenerationSoftware_const_iterator;
      typedef ::xsd::cxx::tree::traits< InspectionProgramGenerationSoftware_type, char > InspectionProgramGenerationSoftware_traits;

      const InspectionProgramGenerationSoftware_sequence&
      InspectionProgramGenerationSoftware () const;

      InspectionProgramGenerationSoftware_sequence&
      InspectionProgramGenerationSoftware ();

      void
      InspectionProgramGenerationSoftware (const InspectionProgramGenerationSoftware_sequence& s);

      // InspectionProgramExecutionSoftware
      //
      typedef ::xsd::qif2::SoftwareType InspectionProgramExecutionSoftware_type;
      typedef ::xsd::cxx::tree::sequence< InspectionProgramExecutionSoftware_type > InspectionProgramExecutionSoftware_sequence;
      typedef InspectionProgramExecutionSoftware_sequence::iterator InspectionProgramExecutionSoftware_iterator;
      typedef InspectionProgramExecutionSoftware_sequence::const_iterator InspectionProgramExecutionSoftware_const_iterator;
      typedef ::xsd::cxx::tree::traits< InspectionProgramExecutionSoftware_type, char > InspectionProgramExecutionSoftware_traits;

      const InspectionProgramExecutionSoftware_sequence&
      InspectionProgramExecutionSoftware () const;

      InspectionProgramExecutionSoftware_sequence&
      InspectionProgramExecutionSoftware ();

      void
      InspectionProgramExecutionSoftware (const InspectionProgramExecutionSoftware_sequence& s);

      // AnalysisSoftware
      //
      typedef ::xsd::qif2::SoftwareType AnalysisSoftware_type;
      typedef ::xsd::cxx::tree::sequence< AnalysisSoftware_type > AnalysisSoftware_sequence;
      typedef AnalysisSoftware_sequence::iterator AnalysisSoftware_iterator;
      typedef AnalysisSoftware_sequence::const_iterator AnalysisSoftware_const_iterator;
      typedef ::xsd::cxx::tree::traits< AnalysisSoftware_type, char > AnalysisSoftware_traits;

      const AnalysisSoftware_sequence&
      AnalysisSoftware () const;

      AnalysisSoftware_sequence&
      AnalysisSoftware ();

      void
      AnalysisSoftware (const AnalysisSoftware_sequence& s);

      // CADSoftware
      //
      typedef ::xsd::qif2::SoftwareType CADSoftware_type;
      typedef ::xsd::cxx::tree::sequence< CADSoftware_type > CADSoftware_sequence;
      typedef CADSoftware_sequence::iterator CADSoftware_iterator;
      typedef CADSoftware_sequence::const_iterator CADSoftware_const_iterator;
      typedef ::xsd::cxx::tree::traits< CADSoftware_type, char > CADSoftware_traits;

      const CADSoftware_sequence&
      CADSoftware () const;

      CADSoftware_sequence&
      CADSoftware ();

      void
      CADSoftware (const CADSoftware_sequence& s);

      // DMESoftware
      //
      typedef ::xsd::qif2::SoftwareType DMESoftware_type;
      typedef ::xsd::cxx::tree::sequence< DMESoftware_type > DMESoftware_sequence;
      typedef DMESoftware_sequence::iterator DMESoftware_iterator;
      typedef DMESoftware_sequence::const_iterator DMESoftware_const_iterator;
      typedef ::xsd::cxx::tree::traits< DMESoftware_type, char > DMESoftware_traits;

      const DMESoftware_sequence&
      DMESoftware () const;

      DMESoftware_sequence&
      DMESoftware ();

      void
      DMESoftware (const DMESoftware_sequence& s);

      // Constructors.
      //
      InspectionSoftwareItemsType ();

      InspectionSoftwareItemsType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      InspectionSoftwareItemsType (const InspectionSoftwareItemsType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual InspectionSoftwareItemsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      InspectionSoftwareItemsType&
      operator= (const InspectionSoftwareItemsType& x);

      virtual 
      ~InspectionSoftwareItemsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      InspectionProgramGenerationSoftware_sequence InspectionProgramGenerationSoftware_;
      InspectionProgramExecutionSoftware_sequence InspectionProgramExecutionSoftware_;
      AnalysisSoftware_sequence AnalysisSoftware_;
      CADSoftware_sequence CADSoftware_;
      DMESoftware_sequence DMESoftware_;
    };

    class EnvironmentType: public ::xml_schema::type
    {
      public:
      // Attributes
      //
      typedef ::xsd::qif2::AttributesType Attributes_type;
      typedef ::xsd::cxx::tree::optional< Attributes_type > Attributes_optional;
      typedef ::xsd::cxx::tree::traits< Attributes_type, char > Attributes_traits;

      const Attributes_optional&
      Attributes () const;

      Attributes_optional&
      Attributes ();

      void
      Attributes (const Attributes_type& x);

      void
      Attributes (const Attributes_optional& x);

      void
      Attributes (::std::auto_ptr< Attributes_type > p);

      // ObjectTemperature
      //
      typedef ::xsd::qif2::ActualTemperatureValueType ObjectTemperature_type;
      typedef ::xsd::cxx::tree::optional< ObjectTemperature_type > ObjectTemperature_optional;
      typedef ::xsd::cxx::tree::traits< ObjectTemperature_type, char > ObjectTemperature_traits;

      const ObjectTemperature_optional&
      ObjectTemperature () const;

      ObjectTemperature_optional&
      ObjectTemperature ();

      void
      ObjectTemperature (const ObjectTemperature_type& x);

      void
      ObjectTemperature (const ObjectTemperature_optional& x);

      void
      ObjectTemperature (::std::auto_ptr< ObjectTemperature_type > p);

      // AmbientTemperature
      //
      typedef ::xsd::qif2::ActualTemperatureValueType AmbientTemperature_type;
      typedef ::xsd::cxx::tree::optional< AmbientTemperature_type > AmbientTemperature_optional;
      typedef ::xsd::cxx::tree::traits< AmbientTemperature_type, char > AmbientTemperature_traits;

      const AmbientTemperature_optional&
      AmbientTemperature () const;

      AmbientTemperature_optional&
      AmbientTemperature ();

      void
      AmbientTemperature (const AmbientTemperature_type& x);

      void
      AmbientTemperature (const AmbientTemperature_optional& x);

      void
      AmbientTemperature (::std::auto_ptr< AmbientTemperature_type > p);

      // RelativeHumidity
      //
      typedef ::xsd::qif2::ActualDecimalType RelativeHumidity_type;
      typedef ::xsd::cxx::tree::optional< RelativeHumidity_type > RelativeHumidity_optional;
      typedef ::xsd::cxx::tree::traits< RelativeHumidity_type, char > RelativeHumidity_traits;

      const RelativeHumidity_optional&
      RelativeHumidity () const;

      RelativeHumidity_optional&
      RelativeHumidity ();

      void
      RelativeHumidity (const RelativeHumidity_type& x);

      void
      RelativeHumidity (const RelativeHumidity_optional& x);

      void
      RelativeHumidity (::std::auto_ptr< RelativeHumidity_type > p);

      // DateAndTime
      //
      typedef ::xml_schema::date_time DateAndTime_type;
      typedef ::xsd::cxx::tree::traits< DateAndTime_type, char > DateAndTime_traits;

      const DateAndTime_type&
      DateAndTime () const;

      DateAndTime_type&
      DateAndTime ();

      void
      DateAndTime (const DateAndTime_type& x);

      void
      DateAndTime (::std::auto_ptr< DateAndTime_type > p);

      // TimeDescription
      //
      typedef ::xsd::qif2::TimeDescriptionType TimeDescription_type;
      typedef ::xsd::cxx::tree::optional< TimeDescription_type > TimeDescription_optional;
      typedef ::xsd::cxx::tree::traits< TimeDescription_type, char > TimeDescription_traits;

      const TimeDescription_optional&
      TimeDescription () const;

      TimeDescription_optional&
      TimeDescription ();

      void
      TimeDescription (const TimeDescription_type& x);

      void
      TimeDescription (const TimeDescription_optional& x);

      void
      TimeDescription (::std::auto_ptr< TimeDescription_type > p);

      // Constructors.
      //
      EnvironmentType (const DateAndTime_type&);

      EnvironmentType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      EnvironmentType (const EnvironmentType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual EnvironmentType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EnvironmentType&
      operator= (const EnvironmentType& x);

      virtual 
      ~EnvironmentType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Attributes_optional Attributes_;
      ObjectTemperature_optional ObjectTemperature_;
      AmbientTemperature_optional AmbientTemperature_;
      RelativeHumidity_optional RelativeHumidity_;
      ::xsd::cxx::tree::one< DateAndTime_type > DateAndTime_;
      TimeDescription_optional TimeDescription_;
    };

    class EnvironmentsType: public ::xml_schema::type
    {
      public:
      // Environment
      //
      typedef ::xsd::qif2::EnvironmentType Environment_type;
      typedef ::xsd::cxx::tree::sequence< Environment_type > Environment_sequence;
      typedef Environment_sequence::iterator Environment_iterator;
      typedef Environment_sequence::const_iterator Environment_const_iterator;
      typedef ::xsd::cxx::tree::traits< Environment_type, char > Environment_traits;

      const Environment_sequence&
      Environment () const;

      Environment_sequence&
      Environment ();

      void
      Environment (const Environment_sequence& s);

      // Constructors.
      //
      EnvironmentsType ();

      EnvironmentsType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      EnvironmentsType (const EnvironmentsType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual EnvironmentsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EnvironmentsType&
      operator= (const EnvironmentsType& x);

      virtual 
      ~EnvironmentsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Environment_sequence Environment_;
    };

    class InspectionTraceabilityType: public ::xml_schema::type
    {
      public:
      // InspectingOrganization
      //
      typedef ::xsd::qif2::OrganizationType InspectingOrganization_type;
      typedef ::xsd::cxx::tree::optional< InspectingOrganization_type > InspectingOrganization_optional;
      typedef ::xsd::cxx::tree::traits< InspectingOrganization_type, char > InspectingOrganization_traits;

      const InspectingOrganization_optional&
      InspectingOrganization () const;

      InspectingOrganization_optional&
      InspectingOrganization ();

      void
      InspectingOrganization (const InspectingOrganization_type& x);

      void
      InspectingOrganization (const InspectingOrganization_optional& x);

      void
      InspectingOrganization (::std::auto_ptr< InspectingOrganization_type > p);

      // CustomerOrganization
      //
      typedef ::xsd::qif2::CustomerOrganizationType CustomerOrganization_type;
      typedef ::xsd::cxx::tree::optional< CustomerOrganization_type > CustomerOrganization_optional;
      typedef ::xsd::cxx::tree::traits< CustomerOrganization_type, char > CustomerOrganization_traits;

      const CustomerOrganization_optional&
      CustomerOrganization () const;

      CustomerOrganization_optional&
      CustomerOrganization ();

      void
      CustomerOrganization (const CustomerOrganization_type& x);

      void
      CustomerOrganization (const CustomerOrganization_optional& x);

      void
      CustomerOrganization (::std::auto_ptr< CustomerOrganization_type > p);

      // SupplierCode
      //
      typedef ::xml_schema::string SupplierCode_type;
      typedef ::xsd::cxx::tree::optional< SupplierCode_type > SupplierCode_optional;
      typedef ::xsd::cxx::tree::traits< SupplierCode_type, char > SupplierCode_traits;

      const SupplierCode_optional&
      SupplierCode () const;

      SupplierCode_optional&
      SupplierCode ();

      void
      SupplierCode (const SupplierCode_type& x);

      void
      SupplierCode (const SupplierCode_optional& x);

      void
      SupplierCode (::std::auto_ptr< SupplierCode_type > p);

      // PurchaseOrderNumber
      //
      typedef ::xml_schema::string PurchaseOrderNumber_type;
      typedef ::xsd::cxx::tree::optional< PurchaseOrderNumber_type > PurchaseOrderNumber_optional;
      typedef ::xsd::cxx::tree::traits< PurchaseOrderNumber_type, char > PurchaseOrderNumber_traits;

      const PurchaseOrderNumber_optional&
      PurchaseOrderNumber () const;

      PurchaseOrderNumber_optional&
      PurchaseOrderNumber ();

      void
      PurchaseOrderNumber (const PurchaseOrderNumber_type& x);

      void
      PurchaseOrderNumber (const PurchaseOrderNumber_optional& x);

      void
      PurchaseOrderNumber (::std::auto_ptr< PurchaseOrderNumber_type > p);

      // OrderNumber
      //
      typedef ::xml_schema::string OrderNumber_type;
      typedef ::xsd::cxx::tree::optional< OrderNumber_type > OrderNumber_optional;
      typedef ::xsd::cxx::tree::traits< OrderNumber_type, char > OrderNumber_traits;

      const OrderNumber_optional&
      OrderNumber () const;

      OrderNumber_optional&
      OrderNumber ();

      void
      OrderNumber (const OrderNumber_type& x);

      void
      OrderNumber (const OrderNumber_optional& x);

      void
      OrderNumber (::std::auto_ptr< OrderNumber_type > p);

      // ReportNumber
      //
      typedef ::xml_schema::string ReportNumber_type;
      typedef ::xsd::cxx::tree::optional< ReportNumber_type > ReportNumber_optional;
      typedef ::xsd::cxx::tree::traits< ReportNumber_type, char > ReportNumber_traits;

      const ReportNumber_optional&
      ReportNumber () const;

      ReportNumber_optional&
      ReportNumber ();

      void
      ReportNumber (const ReportNumber_type& x);

      void
      ReportNumber (const ReportNumber_optional& x);

      void
      ReportNumber (::std::auto_ptr< ReportNumber_type > p);

      // InspectionScope
      //
      typedef ::xsd::qif2::InspectionScopeEnumType InspectionScope_type;
      typedef ::xsd::cxx::tree::optional< InspectionScope_type > InspectionScope_optional;
      typedef ::xsd::cxx::tree::traits< InspectionScope_type, char > InspectionScope_traits;

      const InspectionScope_optional&
      InspectionScope () const;

      InspectionScope_optional&
      InspectionScope ();

      void
      InspectionScope (const InspectionScope_type& x);

      void
      InspectionScope (const InspectionScope_optional& x);

      void
      InspectionScope (::std::auto_ptr< InspectionScope_type > p);

      // InspectionMode
      //
      typedef ::xsd::qif2::InspectionModeEnumType InspectionMode_type;
      typedef ::xsd::cxx::tree::optional< InspectionMode_type > InspectionMode_optional;
      typedef ::xsd::cxx::tree::traits< InspectionMode_type, char > InspectionMode_traits;

      const InspectionMode_optional&
      InspectionMode () const;

      InspectionMode_optional&
      InspectionMode ();

      void
      InspectionMode (const InspectionMode_type& x);

      void
      InspectionMode (const InspectionMode_optional& x);

      void
      InspectionMode (::std::auto_ptr< InspectionMode_type > p);

      // PartialInspection
      //
      typedef ::xsd::qif2::PartialInspectionType PartialInspection_type;
      typedef ::xsd::cxx::tree::optional< PartialInspection_type > PartialInspection_optional;
      typedef ::xsd::cxx::tree::traits< PartialInspection_type, char > PartialInspection_traits;

      const PartialInspection_optional&
      PartialInspection () const;

      PartialInspection_optional&
      PartialInspection ();

      void
      PartialInspection (const PartialInspection_type& x);

      void
      PartialInspection (const PartialInspection_optional& x);

      void
      PartialInspection (::std::auto_ptr< PartialInspection_type > p);

      // NotableEvents
      //
      typedef ::xsd::qif2::NotableEventsType NotableEvents_type;
      typedef ::xsd::cxx::tree::optional< NotableEvents_type > NotableEvents_optional;
      typedef ::xsd::cxx::tree::traits< NotableEvents_type, char > NotableEvents_traits;

      const NotableEvents_optional&
      NotableEvents () const;

      NotableEvents_optional&
      NotableEvents ();

      void
      NotableEvents (const NotableEvents_type& x);

      void
      NotableEvents (const NotableEvents_optional& x);

      void
      NotableEvents (::std::auto_ptr< NotableEvents_type > p);

      // NotedEvents
      //
      typedef ::xsd::qif2::NotedEventsType NotedEvents_type;
      typedef ::xsd::cxx::tree::optional< NotedEvents_type > NotedEvents_optional;
      typedef ::xsd::cxx::tree::traits< NotedEvents_type, char > NotedEvents_traits;

      const NotedEvents_optional&
      NotedEvents () const;

      NotedEvents_optional&
      NotedEvents ();

      void
      NotedEvents (const NotedEvents_type& x);

      void
      NotedEvents (const NotedEvents_optional& x);

      void
      NotedEvents (::std::auto_ptr< NotedEvents_type > p);

      // InspectionStart
      //
      typedef ::xml_schema::date_time InspectionStart_type;
      typedef ::xsd::cxx::tree::optional< InspectionStart_type > InspectionStart_optional;
      typedef ::xsd::cxx::tree::traits< InspectionStart_type, char > InspectionStart_traits;

      const InspectionStart_optional&
      InspectionStart () const;

      InspectionStart_optional&
      InspectionStart ();

      void
      InspectionStart (const InspectionStart_type& x);

      void
      InspectionStart (const InspectionStart_optional& x);

      void
      InspectionStart (::std::auto_ptr< InspectionStart_type > p);

      // InspectionEnd
      //
      typedef ::xml_schema::date_time InspectionEnd_type;
      typedef ::xsd::cxx::tree::optional< InspectionEnd_type > InspectionEnd_optional;
      typedef ::xsd::cxx::tree::traits< InspectionEnd_type, char > InspectionEnd_traits;

      const InspectionEnd_optional&
      InspectionEnd () const;

      InspectionEnd_optional&
      InspectionEnd ();

      void
      InspectionEnd (const InspectionEnd_type& x);

      void
      InspectionEnd (const InspectionEnd_optional& x);

      void
      InspectionEnd (::std::auto_ptr< InspectionEnd_type > p);

      // InspectionSoftwareItems
      //
      typedef ::xsd::qif2::InspectionSoftwareItemsType InspectionSoftwareItems_type;
      typedef ::xsd::cxx::tree::optional< InspectionSoftwareItems_type > InspectionSoftwareItems_optional;
      typedef ::xsd::cxx::tree::traits< InspectionSoftwareItems_type, char > InspectionSoftwareItems_traits;

      const InspectionSoftwareItems_optional&
      InspectionSoftwareItems () const;

      InspectionSoftwareItems_optional&
      InspectionSoftwareItems ();

      void
      InspectionSoftwareItems (const InspectionSoftwareItems_type& x);

      void
      InspectionSoftwareItems (const InspectionSoftwareItems_optional& x);

      void
      InspectionSoftwareItems (::std::auto_ptr< InspectionSoftwareItems_type > p);

      // InspectionProgram
      //
      typedef ::xsd::qif2::InspectionProgramType InspectionProgram_type;
      typedef ::xsd::cxx::tree::optional< InspectionProgram_type > InspectionProgram_optional;
      typedef ::xsd::cxx::tree::traits< InspectionProgram_type, char > InspectionProgram_traits;

      const InspectionProgram_optional&
      InspectionProgram () const;

      InspectionProgram_optional&
      InspectionProgram ();

      void
      InspectionProgram (const InspectionProgram_type& x);

      void
      InspectionProgram (const InspectionProgram_optional& x);

      void
      InspectionProgram (::std::auto_ptr< InspectionProgram_type > p);

      // InspectionOperator
      //
      typedef ::xsd::qif2::EmployeeType InspectionOperator_type;
      typedef ::xsd::cxx::tree::optional< InspectionOperator_type > InspectionOperator_optional;
      typedef ::xsd::cxx::tree::traits< InspectionOperator_type, char > InspectionOperator_traits;

      const InspectionOperator_optional&
      InspectionOperator () const;

      InspectionOperator_optional&
      InspectionOperator ();

      void
      InspectionOperator (const InspectionOperator_type& x);

      void
      InspectionOperator (const InspectionOperator_optional& x);

      void
      InspectionOperator (::std::auto_ptr< InspectionOperator_type > p);

      // ReportPreparer
      //
      typedef ::xsd::qif2::EmployeeType ReportPreparer_type;
      typedef ::xsd::cxx::tree::optional< ReportPreparer_type > ReportPreparer_optional;
      typedef ::xsd::cxx::tree::traits< ReportPreparer_type, char > ReportPreparer_traits;

      const ReportPreparer_optional&
      ReportPreparer () const;

      ReportPreparer_optional&
      ReportPreparer ();

      void
      ReportPreparer (const ReportPreparer_type& x);

      void
      ReportPreparer (const ReportPreparer_optional& x);

      void
      ReportPreparer (::std::auto_ptr< ReportPreparer_type > p);

      // ReportPreparationDate
      //
      typedef ::xml_schema::date_time ReportPreparationDate_type;
      typedef ::xsd::cxx::tree::optional< ReportPreparationDate_type > ReportPreparationDate_optional;
      typedef ::xsd::cxx::tree::traits< ReportPreparationDate_type, char > ReportPreparationDate_traits;

      const ReportPreparationDate_optional&
      ReportPreparationDate () const;

      ReportPreparationDate_optional&
      ReportPreparationDate ();

      void
      ReportPreparationDate (const ReportPreparationDate_type& x);

      void
      ReportPreparationDate (const ReportPreparationDate_optional& x);

      void
      ReportPreparationDate (::std::auto_ptr< ReportPreparationDate_type > p);

      // ReportType
      //
      typedef ::xml_schema::token ReportType_type;
      typedef ::xsd::cxx::tree::optional< ReportType_type > ReportType_optional;
      typedef ::xsd::cxx::tree::traits< ReportType_type, char > ReportType_traits;

      const ReportType_optional&
      ReportType () const;

      ReportType_optional&
      ReportType ();

      void
      ReportType (const ReportType_type& x);

      void
      ReportType (const ReportType_optional& x);

      void
      ReportType (::std::auto_ptr< ReportType_type > p);

      // SecurityClassification
      //
      typedef ::xsd::qif2::SecurityClassificationType SecurityClassification_type;
      typedef ::xsd::cxx::tree::optional< SecurityClassification_type > SecurityClassification_optional;
      typedef ::xsd::cxx::tree::traits< SecurityClassification_type, char > SecurityClassification_traits;

      const SecurityClassification_optional&
      SecurityClassification () const;

      SecurityClassification_optional&
      SecurityClassification ();

      void
      SecurityClassification (const SecurityClassification_type& x);

      void
      SecurityClassification (const SecurityClassification_optional& x);

      void
      SecurityClassification (::std::auto_ptr< SecurityClassification_type > p);

      // PlantLocation
      //
      typedef ::xsd::qif2::LocationType PlantLocation_type;
      typedef ::xsd::cxx::tree::optional< PlantLocation_type > PlantLocation_optional;
      typedef ::xsd::cxx::tree::traits< PlantLocation_type, char > PlantLocation_traits;

      const PlantLocation_optional&
      PlantLocation () const;

      PlantLocation_optional&
      PlantLocation ();

      void
      PlantLocation (const PlantLocation_type& x);

      void
      PlantLocation (const PlantLocation_optional& x);

      void
      PlantLocation (::std::auto_ptr< PlantLocation_type > p);

      // ReferencedQIFPlanInstance
      //
      typedef ::xsd::qif2::QPIdFullReferenceType ReferencedQIFPlanInstance_type;
      typedef ::xsd::cxx::tree::optional< ReferencedQIFPlanInstance_type > ReferencedQIFPlanInstance_optional;
      typedef ::xsd::cxx::tree::traits< ReferencedQIFPlanInstance_type, char > ReferencedQIFPlanInstance_traits;

      const ReferencedQIFPlanInstance_optional&
      ReferencedQIFPlanInstance () const;

      ReferencedQIFPlanInstance_optional&
      ReferencedQIFPlanInstance ();

      void
      ReferencedQIFPlanInstance (const ReferencedQIFPlanInstance_type& x);

      void
      ReferencedQIFPlanInstance (const ReferencedQIFPlanInstance_optional& x);

      void
      ReferencedQIFPlanInstance (::std::auto_ptr< ReferencedQIFPlanInstance_type > p);

      // ReferencedQIFPlan
      //
      typedef ::xml_schema::nmtoken ReferencedQIFPlan_type;
      typedef ::xsd::cxx::tree::optional< ReferencedQIFPlan_type > ReferencedQIFPlan_optional;
      typedef ::xsd::cxx::tree::traits< ReferencedQIFPlan_type, char > ReferencedQIFPlan_traits;

      const ReferencedQIFPlan_optional&
      ReferencedQIFPlan () const;

      ReferencedQIFPlan_optional&
      ReferencedQIFPlan ();

      void
      ReferencedQIFPlan (const ReferencedQIFPlan_type& x);

      void
      ReferencedQIFPlan (const ReferencedQIFPlan_optional& x);

      void
      ReferencedQIFPlan (::std::auto_ptr< ReferencedQIFPlan_type > p);

      static const ReferencedQIFPlan_type&
      ReferencedQIFPlan_default_value ();

      // Errors
      //
      typedef ::xsd::qif2::ErrorsType Errors_type;
      typedef ::xsd::cxx::tree::optional< Errors_type > Errors_optional;
      typedef ::xsd::cxx::tree::traits< Errors_type, char > Errors_traits;

      const Errors_optional&
      Errors () const;

      Errors_optional&
      Errors ();

      void
      Errors (const Errors_type& x);

      void
      Errors (const Errors_optional& x);

      void
      Errors (::std::auto_ptr< Errors_type > p);

      // Constructors.
      //
      InspectionTraceabilityType ();

      InspectionTraceabilityType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      InspectionTraceabilityType (const InspectionTraceabilityType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual InspectionTraceabilityType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      InspectionTraceabilityType&
      operator= (const InspectionTraceabilityType& x);

      virtual 
      ~InspectionTraceabilityType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      InspectingOrganization_optional InspectingOrganization_;
      CustomerOrganization_optional CustomerOrganization_;
      SupplierCode_optional SupplierCode_;
      PurchaseOrderNumber_optional PurchaseOrderNumber_;
      OrderNumber_optional OrderNumber_;
      ReportNumber_optional ReportNumber_;
      InspectionScope_optional InspectionScope_;
      InspectionMode_optional InspectionMode_;
      PartialInspection_optional PartialInspection_;
      NotableEvents_optional NotableEvents_;
      NotedEvents_optional NotedEvents_;
      InspectionStart_optional InspectionStart_;
      InspectionEnd_optional InspectionEnd_;
      InspectionSoftwareItems_optional InspectionSoftwareItems_;
      InspectionProgram_optional InspectionProgram_;
      InspectionOperator_optional InspectionOperator_;
      ReportPreparer_optional ReportPreparer_;
      ReportPreparationDate_optional ReportPreparationDate_;
      ReportType_optional ReportType_;
      SecurityClassification_optional SecurityClassification_;
      PlantLocation_optional PlantLocation_;
      ReferencedQIFPlanInstance_optional ReferencedQIFPlanInstance_;
      ReferencedQIFPlan_optional ReferencedQIFPlan_;
      static const ReferencedQIFPlan_type ReferencedQIFPlan_default_value_;
      Errors_optional Errors_;
    };

    class PreInspectionTraceabilityType: public ::xml_schema::type
    {
      public:
      // InspectingOrganization
      //
      typedef ::xsd::qif2::OrganizationType InspectingOrganization_type;
      typedef ::xsd::cxx::tree::optional< InspectingOrganization_type > InspectingOrganization_optional;
      typedef ::xsd::cxx::tree::traits< InspectingOrganization_type, char > InspectingOrganization_traits;

      const InspectingOrganization_optional&
      InspectingOrganization () const;

      InspectingOrganization_optional&
      InspectingOrganization ();

      void
      InspectingOrganization (const InspectingOrganization_type& x);

      void
      InspectingOrganization (const InspectingOrganization_optional& x);

      void
      InspectingOrganization (::std::auto_ptr< InspectingOrganization_type > p);

      // CustomerOrganization
      //
      typedef ::xsd::qif2::CustomerOrganizationType CustomerOrganization_type;
      typedef ::xsd::cxx::tree::optional< CustomerOrganization_type > CustomerOrganization_optional;
      typedef ::xsd::cxx::tree::traits< CustomerOrganization_type, char > CustomerOrganization_traits;

      const CustomerOrganization_optional&
      CustomerOrganization () const;

      CustomerOrganization_optional&
      CustomerOrganization ();

      void
      CustomerOrganization (const CustomerOrganization_type& x);

      void
      CustomerOrganization (const CustomerOrganization_optional& x);

      void
      CustomerOrganization (::std::auto_ptr< CustomerOrganization_type > p);

      // SupplierCode
      //
      typedef ::xml_schema::string SupplierCode_type;
      typedef ::xsd::cxx::tree::optional< SupplierCode_type > SupplierCode_optional;
      typedef ::xsd::cxx::tree::traits< SupplierCode_type, char > SupplierCode_traits;

      const SupplierCode_optional&
      SupplierCode () const;

      SupplierCode_optional&
      SupplierCode ();

      void
      SupplierCode (const SupplierCode_type& x);

      void
      SupplierCode (const SupplierCode_optional& x);

      void
      SupplierCode (::std::auto_ptr< SupplierCode_type > p);

      // PurchaseOrderNumber
      //
      typedef ::xml_schema::string PurchaseOrderNumber_type;
      typedef ::xsd::cxx::tree::optional< PurchaseOrderNumber_type > PurchaseOrderNumber_optional;
      typedef ::xsd::cxx::tree::traits< PurchaseOrderNumber_type, char > PurchaseOrderNumber_traits;

      const PurchaseOrderNumber_optional&
      PurchaseOrderNumber () const;

      PurchaseOrderNumber_optional&
      PurchaseOrderNumber ();

      void
      PurchaseOrderNumber (const PurchaseOrderNumber_type& x);

      void
      PurchaseOrderNumber (const PurchaseOrderNumber_optional& x);

      void
      PurchaseOrderNumber (::std::auto_ptr< PurchaseOrderNumber_type > p);

      // OrderNumber
      //
      typedef ::xml_schema::string OrderNumber_type;
      typedef ::xsd::cxx::tree::optional< OrderNumber_type > OrderNumber_optional;
      typedef ::xsd::cxx::tree::traits< OrderNumber_type, char > OrderNumber_traits;

      const OrderNumber_optional&
      OrderNumber () const;

      OrderNumber_optional&
      OrderNumber ();

      void
      OrderNumber (const OrderNumber_type& x);

      void
      OrderNumber (const OrderNumber_optional& x);

      void
      OrderNumber (::std::auto_ptr< OrderNumber_type > p);

      // AsmPathIds
      //
      typedef ::xsd::qif2::ArrayReferenceType AsmPathIds_type;
      typedef ::xsd::cxx::tree::optional< AsmPathIds_type > AsmPathIds_optional;
      typedef ::xsd::cxx::tree::traits< AsmPathIds_type, char > AsmPathIds_traits;

      const AsmPathIds_optional&
      AsmPathIds () const;

      AsmPathIds_optional&
      AsmPathIds ();

      void
      AsmPathIds (const AsmPathIds_type& x);

      void
      AsmPathIds (const AsmPathIds_optional& x);

      void
      AsmPathIds (::std::auto_ptr< AsmPathIds_type > p);

      // ReportNumber
      //
      typedef ::xml_schema::string ReportNumber_type;
      typedef ::xsd::cxx::tree::optional< ReportNumber_type > ReportNumber_optional;
      typedef ::xsd::cxx::tree::traits< ReportNumber_type, char > ReportNumber_traits;

      const ReportNumber_optional&
      ReportNumber () const;

      ReportNumber_optional&
      ReportNumber ();

      void
      ReportNumber (const ReportNumber_type& x);

      void
      ReportNumber (const ReportNumber_optional& x);

      void
      ReportNumber (::std::auto_ptr< ReportNumber_type > p);

      // InspectionScope
      //
      typedef ::xsd::qif2::InspectionScopeEnumType InspectionScope_type;
      typedef ::xsd::cxx::tree::optional< InspectionScope_type > InspectionScope_optional;
      typedef ::xsd::cxx::tree::traits< InspectionScope_type, char > InspectionScope_traits;

      const InspectionScope_optional&
      InspectionScope () const;

      InspectionScope_optional&
      InspectionScope ();

      void
      InspectionScope (const InspectionScope_type& x);

      void
      InspectionScope (const InspectionScope_optional& x);

      void
      InspectionScope (::std::auto_ptr< InspectionScope_type > p);

      // InspectionMode
      //
      typedef ::xsd::qif2::InspectionModeEnumType InspectionMode_type;
      typedef ::xsd::cxx::tree::optional< InspectionMode_type > InspectionMode_optional;
      typedef ::xsd::cxx::tree::traits< InspectionMode_type, char > InspectionMode_traits;

      const InspectionMode_optional&
      InspectionMode () const;

      InspectionMode_optional&
      InspectionMode ();

      void
      InspectionMode (const InspectionMode_type& x);

      void
      InspectionMode (const InspectionMode_optional& x);

      void
      InspectionMode (::std::auto_ptr< InspectionMode_type > p);

      // PartialInspection
      //
      typedef ::xsd::qif2::PartialInspectionType PartialInspection_type;
      typedef ::xsd::cxx::tree::optional< PartialInspection_type > PartialInspection_optional;
      typedef ::xsd::cxx::tree::traits< PartialInspection_type, char > PartialInspection_traits;

      const PartialInspection_optional&
      PartialInspection () const;

      PartialInspection_optional&
      PartialInspection ();

      void
      PartialInspection (const PartialInspection_type& x);

      void
      PartialInspection (const PartialInspection_optional& x);

      void
      PartialInspection (::std::auto_ptr< PartialInspection_type > p);

      // NotableEvents
      //
      typedef ::xsd::qif2::NotableEventsType NotableEvents_type;
      typedef ::xsd::cxx::tree::optional< NotableEvents_type > NotableEvents_optional;
      typedef ::xsd::cxx::tree::traits< NotableEvents_type, char > NotableEvents_traits;

      const NotableEvents_optional&
      NotableEvents () const;

      NotableEvents_optional&
      NotableEvents ();

      void
      NotableEvents (const NotableEvents_type& x);

      void
      NotableEvents (const NotableEvents_optional& x);

      void
      NotableEvents (::std::auto_ptr< NotableEvents_type > p);

      // InspectionSoftwareItems
      //
      typedef ::xsd::qif2::InspectionSoftwareItemsType InspectionSoftwareItems_type;
      typedef ::xsd::cxx::tree::optional< InspectionSoftwareItems_type > InspectionSoftwareItems_optional;
      typedef ::xsd::cxx::tree::traits< InspectionSoftwareItems_type, char > InspectionSoftwareItems_traits;

      const InspectionSoftwareItems_optional&
      InspectionSoftwareItems () const;

      InspectionSoftwareItems_optional&
      InspectionSoftwareItems ();

      void
      InspectionSoftwareItems (const InspectionSoftwareItems_type& x);

      void
      InspectionSoftwareItems (const InspectionSoftwareItems_optional& x);

      void
      InspectionSoftwareItems (::std::auto_ptr< InspectionSoftwareItems_type > p);

      // InspectionProgram
      //
      typedef ::xsd::qif2::InspectionProgramType InspectionProgram_type;
      typedef ::xsd::cxx::tree::optional< InspectionProgram_type > InspectionProgram_optional;
      typedef ::xsd::cxx::tree::traits< InspectionProgram_type, char > InspectionProgram_traits;

      const InspectionProgram_optional&
      InspectionProgram () const;

      InspectionProgram_optional&
      InspectionProgram ();

      void
      InspectionProgram (const InspectionProgram_type& x);

      void
      InspectionProgram (const InspectionProgram_optional& x);

      void
      InspectionProgram (::std::auto_ptr< InspectionProgram_type > p);

      // SecurityClassification
      //
      typedef ::xsd::qif2::SecurityClassificationType SecurityClassification_type;
      typedef ::xsd::cxx::tree::optional< SecurityClassification_type > SecurityClassification_optional;
      typedef ::xsd::cxx::tree::traits< SecurityClassification_type, char > SecurityClassification_traits;

      const SecurityClassification_optional&
      SecurityClassification () const;

      SecurityClassification_optional&
      SecurityClassification ();

      void
      SecurityClassification (const SecurityClassification_type& x);

      void
      SecurityClassification (const SecurityClassification_optional& x);

      void
      SecurityClassification (::std::auto_ptr< SecurityClassification_type > p);

      // PlantLocation
      //
      typedef ::xsd::qif2::LocationType PlantLocation_type;
      typedef ::xsd::cxx::tree::optional< PlantLocation_type > PlantLocation_optional;
      typedef ::xsd::cxx::tree::traits< PlantLocation_type, char > PlantLocation_traits;

      const PlantLocation_optional&
      PlantLocation () const;

      PlantLocation_optional&
      PlantLocation ();

      void
      PlantLocation (const PlantLocation_type& x);

      void
      PlantLocation (const PlantLocation_optional& x);

      void
      PlantLocation (::std::auto_ptr< PlantLocation_type > p);

      // ReferencedQIFPlanInstance
      //
      typedef ::xsd::qif2::QPIdFullReferenceType ReferencedQIFPlanInstance_type;
      typedef ::xsd::cxx::tree::optional< ReferencedQIFPlanInstance_type > ReferencedQIFPlanInstance_optional;
      typedef ::xsd::cxx::tree::traits< ReferencedQIFPlanInstance_type, char > ReferencedQIFPlanInstance_traits;

      const ReferencedQIFPlanInstance_optional&
      ReferencedQIFPlanInstance () const;

      ReferencedQIFPlanInstance_optional&
      ReferencedQIFPlanInstance ();

      void
      ReferencedQIFPlanInstance (const ReferencedQIFPlanInstance_type& x);

      void
      ReferencedQIFPlanInstance (const ReferencedQIFPlanInstance_optional& x);

      void
      ReferencedQIFPlanInstance (::std::auto_ptr< ReferencedQIFPlanInstance_type > p);

      // ReferencedQIFPlan
      //
      typedef ::xml_schema::nmtoken ReferencedQIFPlan_type;
      typedef ::xsd::cxx::tree::optional< ReferencedQIFPlan_type > ReferencedQIFPlan_optional;
      typedef ::xsd::cxx::tree::traits< ReferencedQIFPlan_type, char > ReferencedQIFPlan_traits;

      const ReferencedQIFPlan_optional&
      ReferencedQIFPlan () const;

      ReferencedQIFPlan_optional&
      ReferencedQIFPlan ();

      void
      ReferencedQIFPlan (const ReferencedQIFPlan_type& x);

      void
      ReferencedQIFPlan (const ReferencedQIFPlan_optional& x);

      void
      ReferencedQIFPlan (::std::auto_ptr< ReferencedQIFPlan_type > p);

      static const ReferencedQIFPlan_type&
      ReferencedQIFPlan_default_value ();

      // FormalStandard
      //
      typedef ::xsd::qif2::FormalStandardType FormalStandard_type;
      typedef ::xsd::cxx::tree::traits< FormalStandard_type, char > FormalStandard_traits;

      const FormalStandard_type&
      FormalStandard () const;

      FormalStandard_type&
      FormalStandard ();

      void
      FormalStandard (const FormalStandard_type& x);

      void
      FormalStandard (::std::auto_ptr< FormalStandard_type > p);

      // Constructors.
      //
      PreInspectionTraceabilityType (const FormalStandard_type&);

      PreInspectionTraceabilityType (::std::auto_ptr< FormalStandard_type >);

      PreInspectionTraceabilityType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      PreInspectionTraceabilityType (const PreInspectionTraceabilityType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual PreInspectionTraceabilityType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PreInspectionTraceabilityType&
      operator= (const PreInspectionTraceabilityType& x);

      virtual 
      ~PreInspectionTraceabilityType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      InspectingOrganization_optional InspectingOrganization_;
      CustomerOrganization_optional CustomerOrganization_;
      SupplierCode_optional SupplierCode_;
      PurchaseOrderNumber_optional PurchaseOrderNumber_;
      OrderNumber_optional OrderNumber_;
      AsmPathIds_optional AsmPathIds_;
      ReportNumber_optional ReportNumber_;
      InspectionScope_optional InspectionScope_;
      InspectionMode_optional InspectionMode_;
      PartialInspection_optional PartialInspection_;
      NotableEvents_optional NotableEvents_;
      InspectionSoftwareItems_optional InspectionSoftwareItems_;
      InspectionProgram_optional InspectionProgram_;
      SecurityClassification_optional SecurityClassification_;
      PlantLocation_optional PlantLocation_;
      ReferencedQIFPlanInstance_optional ReferencedQIFPlanInstance_;
      ReferencedQIFPlan_optional ReferencedQIFPlan_;
      static const ReferencedQIFPlan_type ReferencedQIFPlan_default_value_;
      ::xsd::cxx::tree::one< FormalStandard_type > FormalStandard_;
    };

    class ProductTraceabilityType: public ::xml_schema::type
    {
      public:
      // ReportNumber
      //
      typedef ::xml_schema::string ReportNumber_type;
      typedef ::xsd::cxx::tree::optional< ReportNumber_type > ReportNumber_optional;
      typedef ::xsd::cxx::tree::traits< ReportNumber_type, char > ReportNumber_traits;

      const ReportNumber_optional&
      ReportNumber () const;

      ReportNumber_optional&
      ReportNumber ();

      void
      ReportNumber (const ReportNumber_type& x);

      void
      ReportNumber (const ReportNumber_optional& x);

      void
      ReportNumber (::std::auto_ptr< ReportNumber_type > p);

      // ManufacturingProcessId
      //
      typedef ::xsd::qif2::QIFReferenceFullType ManufacturingProcessId_type;
      typedef ::xsd::cxx::tree::optional< ManufacturingProcessId_type > ManufacturingProcessId_optional;
      typedef ::xsd::cxx::tree::traits< ManufacturingProcessId_type, char > ManufacturingProcessId_traits;

      const ManufacturingProcessId_optional&
      ManufacturingProcessId () const;

      ManufacturingProcessId_optional&
      ManufacturingProcessId ();

      void
      ManufacturingProcessId (const ManufacturingProcessId_type& x);

      void
      ManufacturingProcessId (const ManufacturingProcessId_optional& x);

      void
      ManufacturingProcessId (::std::auto_ptr< ManufacturingProcessId_type > p);

      // FixtureId
      //
      typedef ::xsd::qif2::QIFReferenceFullType FixtureId_type;
      typedef ::xsd::cxx::tree::optional< FixtureId_type > FixtureId_optional;
      typedef ::xsd::cxx::tree::traits< FixtureId_type, char > FixtureId_traits;

      const FixtureId_optional&
      FixtureId () const;

      FixtureId_optional&
      FixtureId ();

      void
      FixtureId (const FixtureId_type& x);

      void
      FixtureId (const FixtureId_optional& x);

      void
      FixtureId (::std::auto_ptr< FixtureId_type > p);

      // NotableEventIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType NotableEventIds_type;
      typedef ::xsd::cxx::tree::optional< NotableEventIds_type > NotableEventIds_optional;
      typedef ::xsd::cxx::tree::traits< NotableEventIds_type, char > NotableEventIds_traits;

      const NotableEventIds_optional&
      NotableEventIds () const;

      NotableEventIds_optional&
      NotableEventIds ();

      void
      NotableEventIds (const NotableEventIds_type& x);

      void
      NotableEventIds (const NotableEventIds_optional& x);

      void
      NotableEventIds (::std::auto_ptr< NotableEventIds_type > p);

      // InspectionSoftwareItems
      //
      typedef ::xsd::qif2::InspectionSoftwareItemsType InspectionSoftwareItems_type;
      typedef ::xsd::cxx::tree::optional< InspectionSoftwareItems_type > InspectionSoftwareItems_optional;
      typedef ::xsd::cxx::tree::traits< InspectionSoftwareItems_type, char > InspectionSoftwareItems_traits;

      const InspectionSoftwareItems_optional&
      InspectionSoftwareItems () const;

      InspectionSoftwareItems_optional&
      InspectionSoftwareItems ();

      void
      InspectionSoftwareItems (const InspectionSoftwareItems_type& x);

      void
      InspectionSoftwareItems (const InspectionSoftwareItems_optional& x);

      void
      InspectionSoftwareItems (::std::auto_ptr< InspectionSoftwareItems_type > p);

      // InspectionProgram
      //
      typedef ::xsd::qif2::InspectionProgramType InspectionProgram_type;
      typedef ::xsd::cxx::tree::optional< InspectionProgram_type > InspectionProgram_optional;
      typedef ::xsd::cxx::tree::traits< InspectionProgram_type, char > InspectionProgram_traits;

      const InspectionProgram_optional&
      InspectionProgram () const;

      InspectionProgram_optional&
      InspectionProgram ();

      void
      InspectionProgram (const InspectionProgram_type& x);

      void
      InspectionProgram (const InspectionProgram_optional& x);

      void
      InspectionProgram (::std::auto_ptr< InspectionProgram_type > p);

      // MeasurementDeviceIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType MeasurementDeviceIds_type;
      typedef ::xsd::cxx::tree::optional< MeasurementDeviceIds_type > MeasurementDeviceIds_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementDeviceIds_type, char > MeasurementDeviceIds_traits;

      const MeasurementDeviceIds_optional&
      MeasurementDeviceIds () const;

      MeasurementDeviceIds_optional&
      MeasurementDeviceIds ();

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_type& x);

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_optional& x);

      void
      MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > p);

      // Constructors.
      //
      ProductTraceabilityType ();

      ProductTraceabilityType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      ProductTraceabilityType (const ProductTraceabilityType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual ProductTraceabilityType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ProductTraceabilityType&
      operator= (const ProductTraceabilityType& x);

      virtual 
      ~ProductTraceabilityType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ReportNumber_optional ReportNumber_;
      ManufacturingProcessId_optional ManufacturingProcessId_;
      FixtureId_optional FixtureId_;
      NotableEventIds_optional NotableEventIds_;
      InspectionSoftwareItems_optional InspectionSoftwareItems_;
      InspectionProgram_optional InspectionProgram_;
      MeasurementDeviceIds_optional MeasurementDeviceIds_;
    };

    class ActualProductTraceabilityType: public ::xml_schema::type
    {
      public:
      // SampleNumber
      //
      typedef ::xml_schema::string SampleNumber_type;
      typedef ::xsd::cxx::tree::optional< SampleNumber_type > SampleNumber_optional;
      typedef ::xsd::cxx::tree::traits< SampleNumber_type, char > SampleNumber_traits;

      const SampleNumber_optional&
      SampleNumber () const;

      SampleNumber_optional&
      SampleNumber ();

      void
      SampleNumber (const SampleNumber_type& x);

      void
      SampleNumber (const SampleNumber_optional& x);

      void
      SampleNumber (::std::auto_ptr< SampleNumber_type > p);

      // LotNumber
      //
      typedef ::xml_schema::string LotNumber_type;
      typedef ::xsd::cxx::tree::optional< LotNumber_type > LotNumber_optional;
      typedef ::xsd::cxx::tree::traits< LotNumber_type, char > LotNumber_traits;

      const LotNumber_optional&
      LotNumber () const;

      LotNumber_optional&
      LotNumber ();

      void
      LotNumber (const LotNumber_type& x);

      void
      LotNumber (const LotNumber_optional& x);

      void
      LotNumber (::std::auto_ptr< LotNumber_type > p);

      // ReportNumber
      //
      typedef ::xml_schema::string ReportNumber_type;
      typedef ::xsd::cxx::tree::optional< ReportNumber_type > ReportNumber_optional;
      typedef ::xsd::cxx::tree::traits< ReportNumber_type, char > ReportNumber_traits;

      const ReportNumber_optional&
      ReportNumber () const;

      ReportNumber_optional&
      ReportNumber ();

      void
      ReportNumber (const ReportNumber_type& x);

      void
      ReportNumber (const ReportNumber_optional& x);

      void
      ReportNumber (::std::auto_ptr< ReportNumber_type > p);

      // ManufacturingProcessId
      //
      typedef ::xsd::qif2::QIFReferenceFullType ManufacturingProcessId_type;
      typedef ::xsd::cxx::tree::optional< ManufacturingProcessId_type > ManufacturingProcessId_optional;
      typedef ::xsd::cxx::tree::traits< ManufacturingProcessId_type, char > ManufacturingProcessId_traits;

      const ManufacturingProcessId_optional&
      ManufacturingProcessId () const;

      ManufacturingProcessId_optional&
      ManufacturingProcessId ();

      void
      ManufacturingProcessId (const ManufacturingProcessId_type& x);

      void
      ManufacturingProcessId (const ManufacturingProcessId_optional& x);

      void
      ManufacturingProcessId (::std::auto_ptr< ManufacturingProcessId_type > p);

      // FixtureId
      //
      typedef ::xsd::qif2::QIFReferenceFullType FixtureId_type;
      typedef ::xsd::cxx::tree::optional< FixtureId_type > FixtureId_optional;
      typedef ::xsd::cxx::tree::traits< FixtureId_type, char > FixtureId_traits;

      const FixtureId_optional&
      FixtureId () const;

      FixtureId_optional&
      FixtureId ();

      void
      FixtureId (const FixtureId_type& x);

      void
      FixtureId (const FixtureId_optional& x);

      void
      FixtureId (::std::auto_ptr< FixtureId_type > p);

      // NotableEventIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType NotableEventIds_type;
      typedef ::xsd::cxx::tree::optional< NotableEventIds_type > NotableEventIds_optional;
      typedef ::xsd::cxx::tree::traits< NotableEventIds_type, char > NotableEventIds_traits;

      const NotableEventIds_optional&
      NotableEventIds () const;

      NotableEventIds_optional&
      NotableEventIds ();

      void
      NotableEventIds (const NotableEventIds_type& x);

      void
      NotableEventIds (const NotableEventIds_optional& x);

      void
      NotableEventIds (::std::auto_ptr< NotableEventIds_type > p);

      // NotedEventIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType NotedEventIds_type;
      typedef ::xsd::cxx::tree::optional< NotedEventIds_type > NotedEventIds_optional;
      typedef ::xsd::cxx::tree::traits< NotedEventIds_type, char > NotedEventIds_traits;

      const NotedEventIds_optional&
      NotedEventIds () const;

      NotedEventIds_optional&
      NotedEventIds ();

      void
      NotedEventIds (const NotedEventIds_type& x);

      void
      NotedEventIds (const NotedEventIds_optional& x);

      void
      NotedEventIds (::std::auto_ptr< NotedEventIds_type > p);

      // InspectionStart
      //
      typedef ::xml_schema::date_time InspectionStart_type;
      typedef ::xsd::cxx::tree::optional< InspectionStart_type > InspectionStart_optional;
      typedef ::xsd::cxx::tree::traits< InspectionStart_type, char > InspectionStart_traits;

      const InspectionStart_optional&
      InspectionStart () const;

      InspectionStart_optional&
      InspectionStart ();

      void
      InspectionStart (const InspectionStart_type& x);

      void
      InspectionStart (const InspectionStart_optional& x);

      void
      InspectionStart (::std::auto_ptr< InspectionStart_type > p);

      // InspectionEnd
      //
      typedef ::xml_schema::date_time InspectionEnd_type;
      typedef ::xsd::cxx::tree::optional< InspectionEnd_type > InspectionEnd_optional;
      typedef ::xsd::cxx::tree::traits< InspectionEnd_type, char > InspectionEnd_traits;

      const InspectionEnd_optional&
      InspectionEnd () const;

      InspectionEnd_optional&
      InspectionEnd ();

      void
      InspectionEnd (const InspectionEnd_type& x);

      void
      InspectionEnd (const InspectionEnd_optional& x);

      void
      InspectionEnd (::std::auto_ptr< InspectionEnd_type > p);

      // InspectionSoftwareItems
      //
      typedef ::xsd::qif2::InspectionSoftwareItemsType InspectionSoftwareItems_type;
      typedef ::xsd::cxx::tree::optional< InspectionSoftwareItems_type > InspectionSoftwareItems_optional;
      typedef ::xsd::cxx::tree::traits< InspectionSoftwareItems_type, char > InspectionSoftwareItems_traits;

      const InspectionSoftwareItems_optional&
      InspectionSoftwareItems () const;

      InspectionSoftwareItems_optional&
      InspectionSoftwareItems ();

      void
      InspectionSoftwareItems (const InspectionSoftwareItems_type& x);

      void
      InspectionSoftwareItems (const InspectionSoftwareItems_optional& x);

      void
      InspectionSoftwareItems (::std::auto_ptr< InspectionSoftwareItems_type > p);

      // InspectionProgram
      //
      typedef ::xsd::qif2::InspectionProgramType InspectionProgram_type;
      typedef ::xsd::cxx::tree::optional< InspectionProgram_type > InspectionProgram_optional;
      typedef ::xsd::cxx::tree::traits< InspectionProgram_type, char > InspectionProgram_traits;

      const InspectionProgram_optional&
      InspectionProgram () const;

      InspectionProgram_optional&
      InspectionProgram ();

      void
      InspectionProgram (const InspectionProgram_type& x);

      void
      InspectionProgram (const InspectionProgram_optional& x);

      void
      InspectionProgram (::std::auto_ptr< InspectionProgram_type > p);

      // InspectionOperator
      //
      typedef ::xsd::qif2::EmployeeType InspectionOperator_type;
      typedef ::xsd::cxx::tree::optional< InspectionOperator_type > InspectionOperator_optional;
      typedef ::xsd::cxx::tree::traits< InspectionOperator_type, char > InspectionOperator_traits;

      const InspectionOperator_optional&
      InspectionOperator () const;

      InspectionOperator_optional&
      InspectionOperator ();

      void
      InspectionOperator (const InspectionOperator_type& x);

      void
      InspectionOperator (const InspectionOperator_optional& x);

      void
      InspectionOperator (::std::auto_ptr< InspectionOperator_type > p);

      // MeasurementDeviceIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType MeasurementDeviceIds_type;
      typedef ::xsd::cxx::tree::optional< MeasurementDeviceIds_type > MeasurementDeviceIds_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementDeviceIds_type, char > MeasurementDeviceIds_traits;

      const MeasurementDeviceIds_optional&
      MeasurementDeviceIds () const;

      MeasurementDeviceIds_optional&
      MeasurementDeviceIds ();

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_type& x);

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_optional& x);

      void
      MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > p);

      // ProductEnvironments
      //
      typedef ::xsd::qif2::EnvironmentsType ProductEnvironments_type;
      typedef ::xsd::cxx::tree::optional< ProductEnvironments_type > ProductEnvironments_optional;
      typedef ::xsd::cxx::tree::traits< ProductEnvironments_type, char > ProductEnvironments_traits;

      const ProductEnvironments_optional&
      ProductEnvironments () const;

      ProductEnvironments_optional&
      ProductEnvironments ();

      void
      ProductEnvironments (const ProductEnvironments_type& x);

      void
      ProductEnvironments (const ProductEnvironments_optional& x);

      void
      ProductEnvironments (::std::auto_ptr< ProductEnvironments_type > p);

      // Errors
      //
      typedef ::xsd::qif2::ErrorsType Errors_type;
      typedef ::xsd::cxx::tree::optional< Errors_type > Errors_optional;
      typedef ::xsd::cxx::tree::traits< Errors_type, char > Errors_traits;

      const Errors_optional&
      Errors () const;

      Errors_optional&
      Errors ();

      void
      Errors (const Errors_type& x);

      void
      Errors (const Errors_optional& x);

      void
      Errors (::std::auto_ptr< Errors_type > p);

      // Constructors.
      //
      ActualProductTraceabilityType ();

      ActualProductTraceabilityType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      ActualProductTraceabilityType (const ActualProductTraceabilityType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual ActualProductTraceabilityType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ActualProductTraceabilityType&
      operator= (const ActualProductTraceabilityType& x);

      virtual 
      ~ActualProductTraceabilityType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      SampleNumber_optional SampleNumber_;
      LotNumber_optional LotNumber_;
      ReportNumber_optional ReportNumber_;
      ManufacturingProcessId_optional ManufacturingProcessId_;
      FixtureId_optional FixtureId_;
      NotableEventIds_optional NotableEventIds_;
      NotedEventIds_optional NotedEventIds_;
      InspectionStart_optional InspectionStart_;
      InspectionEnd_optional InspectionEnd_;
      InspectionSoftwareItems_optional InspectionSoftwareItems_;
      InspectionProgram_optional InspectionProgram_;
      InspectionOperator_optional InspectionOperator_;
      MeasurementDeviceIds_optional MeasurementDeviceIds_;
      ProductEnvironments_optional ProductEnvironments_;
      Errors_optional Errors_;
    };

    class ProcessParameterType: public ::xml_schema::type
    {
      public:
      // ParameterType
      //
      typedef ::xml_schema::string ParameterType_type;
      typedef ::xsd::cxx::tree::traits< ParameterType_type, char > ParameterType_traits;

      const ParameterType_type&
      ParameterType () const;

      ParameterType_type&
      ParameterType ();

      void
      ParameterType (const ParameterType_type& x);

      void
      ParameterType (::std::auto_ptr< ParameterType_type > p);

      // ParameterValue
      //
      typedef ::xml_schema::string ParameterValue_type;
      typedef ::xsd::cxx::tree::traits< ParameterValue_type, char > ParameterValue_traits;

      const ParameterValue_type&
      ParameterValue () const;

      ParameterValue_type&
      ParameterValue ();

      void
      ParameterValue (const ParameterValue_type& x);

      void
      ParameterValue (::std::auto_ptr< ParameterValue_type > p);

      // Constructors.
      //
      ProcessParameterType (const ParameterType_type&,
                            const ParameterValue_type&);

      ProcessParameterType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      ProcessParameterType (const ProcessParameterType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual ProcessParameterType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ProcessParameterType&
      operator= (const ProcessParameterType& x);

      virtual 
      ~ProcessParameterType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ParameterType_type > ParameterType_;
      ::xsd::cxx::tree::one< ParameterValue_type > ParameterValue_;
    };

    class ManufacturingProcessTraceabilityType: public ::xml_schema::type
    {
      public:
      // Attributes
      //
      typedef ::xsd::qif2::AttributesType Attributes_type;
      typedef ::xsd::cxx::tree::optional< Attributes_type > Attributes_optional;
      typedef ::xsd::cxx::tree::traits< Attributes_type, char > Attributes_traits;

      const Attributes_optional&
      Attributes () const;

      Attributes_optional&
      Attributes ();

      void
      Attributes (const Attributes_type& x);

      void
      Attributes (const Attributes_optional& x);

      void
      Attributes (::std::auto_ptr< Attributes_type > p);

      // Description
      //
      typedef ::xml_schema::string Description_type;
      typedef ::xsd::cxx::tree::optional< Description_type > Description_optional;
      typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

      const Description_optional&
      Description () const;

      Description_optional&
      Description ();

      void
      Description (const Description_type& x);

      void
      Description (const Description_optional& x);

      void
      Description (::std::auto_ptr< Description_type > p);

      // Job
      //
      typedef ::xml_schema::string Job_type;
      typedef ::xsd::cxx::tree::optional< Job_type > Job_optional;
      typedef ::xsd::cxx::tree::traits< Job_type, char > Job_traits;

      const Job_optional&
      Job () const;

      Job_optional&
      Job ();

      void
      Job (const Job_type& x);

      void
      Job (const Job_optional& x);

      void
      Job (::std::auto_ptr< Job_type > p);

      // Revision
      //
      typedef ::xml_schema::string Revision_type;
      typedef ::xsd::cxx::tree::optional< Revision_type > Revision_optional;
      typedef ::xsd::cxx::tree::traits< Revision_type, char > Revision_traits;

      const Revision_optional&
      Revision () const;

      Revision_optional&
      Revision ();

      void
      Revision (const Revision_type& x);

      void
      Revision (const Revision_optional& x);

      void
      Revision (::std::auto_ptr< Revision_type > p);

      // PreviousOperationId
      //
      typedef ::xsd::qif2::QIFReferenceFullType PreviousOperationId_type;
      typedef ::xsd::cxx::tree::optional< PreviousOperationId_type > PreviousOperationId_optional;
      typedef ::xsd::cxx::tree::traits< PreviousOperationId_type, char > PreviousOperationId_traits;

      const PreviousOperationId_optional&
      PreviousOperationId () const;

      PreviousOperationId_optional&
      PreviousOperationId ();

      void
      PreviousOperationId (const PreviousOperationId_type& x);

      void
      PreviousOperationId (const PreviousOperationId_optional& x);

      void
      PreviousOperationId (::std::auto_ptr< PreviousOperationId_type > p);

      // Path
      //
      typedef ::xml_schema::string Path_type;
      typedef ::xsd::cxx::tree::optional< Path_type > Path_optional;
      typedef ::xsd::cxx::tree::traits< Path_type, char > Path_traits;

      const Path_optional&
      Path () const;

      Path_optional&
      Path ();

      void
      Path (const Path_type& x);

      void
      Path (const Path_optional& x);

      void
      Path (::std::auto_ptr< Path_type > p);

      // MachineManufacturerName
      //
      typedef ::xml_schema::string MachineManufacturerName_type;
      typedef ::xsd::cxx::tree::optional< MachineManufacturerName_type > MachineManufacturerName_optional;
      typedef ::xsd::cxx::tree::traits< MachineManufacturerName_type, char > MachineManufacturerName_traits;

      const MachineManufacturerName_optional&
      MachineManufacturerName () const;

      MachineManufacturerName_optional&
      MachineManufacturerName ();

      void
      MachineManufacturerName (const MachineManufacturerName_type& x);

      void
      MachineManufacturerName (const MachineManufacturerName_optional& x);

      void
      MachineManufacturerName (::std::auto_ptr< MachineManufacturerName_type > p);

      // MachineIdentifier
      //
      typedef ::xml_schema::string MachineIdentifier_type;
      typedef ::xsd::cxx::tree::optional< MachineIdentifier_type > MachineIdentifier_optional;
      typedef ::xsd::cxx::tree::traits< MachineIdentifier_type, char > MachineIdentifier_traits;

      const MachineIdentifier_optional&
      MachineIdentifier () const;

      MachineIdentifier_optional&
      MachineIdentifier ();

      void
      MachineIdentifier (const MachineIdentifier_type& x);

      void
      MachineIdentifier (const MachineIdentifier_optional& x);

      void
      MachineIdentifier (::std::auto_ptr< MachineIdentifier_type > p);

      // OperatorIdentifier
      //
      typedef ::xml_schema::string OperatorIdentifier_type;
      typedef ::xsd::cxx::tree::optional< OperatorIdentifier_type > OperatorIdentifier_optional;
      typedef ::xsd::cxx::tree::traits< OperatorIdentifier_type, char > OperatorIdentifier_traits;

      const OperatorIdentifier_optional&
      OperatorIdentifier () const;

      OperatorIdentifier_optional&
      OperatorIdentifier ();

      void
      OperatorIdentifier (const OperatorIdentifier_type& x);

      void
      OperatorIdentifier (const OperatorIdentifier_optional& x);

      void
      OperatorIdentifier (::std::auto_ptr< OperatorIdentifier_type > p);

      // Shift
      //
      typedef ::xml_schema::string Shift_type;
      typedef ::xsd::cxx::tree::optional< Shift_type > Shift_optional;
      typedef ::xsd::cxx::tree::traits< Shift_type, char > Shift_traits;

      const Shift_optional&
      Shift () const;

      Shift_optional&
      Shift ();

      void
      Shift (const Shift_type& x);

      void
      Shift (const Shift_optional& x);

      void
      Shift (::std::auto_ptr< Shift_type > p);

      // Department
      //
      typedef ::xml_schema::string Department_type;
      typedef ::xsd::cxx::tree::optional< Department_type > Department_optional;
      typedef ::xsd::cxx::tree::traits< Department_type, char > Department_traits;

      const Department_optional&
      Department () const;

      Department_optional&
      Department ();

      void
      Department (const Department_type& x);

      void
      Department (const Department_optional& x);

      void
      Department (::std::auto_ptr< Department_type > p);

      // ResponsibilityIdentifier
      //
      typedef ::xml_schema::string ResponsibilityIdentifier_type;
      typedef ::xsd::cxx::tree::optional< ResponsibilityIdentifier_type > ResponsibilityIdentifier_optional;
      typedef ::xsd::cxx::tree::traits< ResponsibilityIdentifier_type, char > ResponsibilityIdentifier_traits;

      const ResponsibilityIdentifier_optional&
      ResponsibilityIdentifier () const;

      ResponsibilityIdentifier_optional&
      ResponsibilityIdentifier ();

      void
      ResponsibilityIdentifier (const ResponsibilityIdentifier_type& x);

      void
      ResponsibilityIdentifier (const ResponsibilityIdentifier_optional& x);

      void
      ResponsibilityIdentifier (::std::auto_ptr< ResponsibilityIdentifier_type > p);

      // PlantSector
      //
      typedef ::xml_schema::string PlantSector_type;
      typedef ::xsd::cxx::tree::optional< PlantSector_type > PlantSector_optional;
      typedef ::xsd::cxx::tree::traits< PlantSector_type, char > PlantSector_traits;

      const PlantSector_optional&
      PlantSector () const;

      PlantSector_optional&
      PlantSector ();

      void
      PlantSector (const PlantSector_type& x);

      void
      PlantSector (const PlantSector_optional& x);

      void
      PlantSector (::std::auto_ptr< PlantSector_type > p);

      // ProcessParameter
      //
      typedef ::xsd::qif2::ProcessParameterType ProcessParameter_type;
      typedef ::xsd::cxx::tree::sequence< ProcessParameter_type > ProcessParameter_sequence;
      typedef ProcessParameter_sequence::iterator ProcessParameter_iterator;
      typedef ProcessParameter_sequence::const_iterator ProcessParameter_const_iterator;
      typedef ::xsd::cxx::tree::traits< ProcessParameter_type, char > ProcessParameter_traits;

      const ProcessParameter_sequence&
      ProcessParameter () const;

      ProcessParameter_sequence&
      ProcessParameter ();

      void
      ProcessParameter (const ProcessParameter_sequence& s);

      // AssociatedTraceabilityId
      //
      typedef ::xsd::qif2::QIFReferenceFullType AssociatedTraceabilityId_type;
      typedef ::xsd::cxx::tree::optional< AssociatedTraceabilityId_type > AssociatedTraceabilityId_optional;
      typedef ::xsd::cxx::tree::traits< AssociatedTraceabilityId_type, char > AssociatedTraceabilityId_traits;

      const AssociatedTraceabilityId_optional&
      AssociatedTraceabilityId () const;

      AssociatedTraceabilityId_optional&
      AssociatedTraceabilityId ();

      void
      AssociatedTraceabilityId (const AssociatedTraceabilityId_type& x);

      void
      AssociatedTraceabilityId (const AssociatedTraceabilityId_optional& x);

      void
      AssociatedTraceabilityId (::std::auto_ptr< AssociatedTraceabilityId_type > p);

      // id
      //
      typedef ::xsd::qif2::QIFIdType id_type;
      typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

      const id_type&
      id () const;

      id_type&
      id ();

      void
      id (const id_type& x);

      void
      id (::std::auto_ptr< id_type > p);

      // Constructors.
      //
      ManufacturingProcessTraceabilityType (const id_type&);

      ManufacturingProcessTraceabilityType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      ManufacturingProcessTraceabilityType (const ManufacturingProcessTraceabilityType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual ManufacturingProcessTraceabilityType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ManufacturingProcessTraceabilityType&
      operator= (const ManufacturingProcessTraceabilityType& x);

      virtual 
      ~ManufacturingProcessTraceabilityType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Attributes_optional Attributes_;
      Description_optional Description_;
      Job_optional Job_;
      Revision_optional Revision_;
      PreviousOperationId_optional PreviousOperationId_;
      Path_optional Path_;
      MachineManufacturerName_optional MachineManufacturerName_;
      MachineIdentifier_optional MachineIdentifier_;
      OperatorIdentifier_optional OperatorIdentifier_;
      Shift_optional Shift_;
      Department_optional Department_;
      ResponsibilityIdentifier_optional ResponsibilityIdentifier_;
      PlantSector_optional PlantSector_;
      ProcessParameter_sequence ProcessParameter_;
      AssociatedTraceabilityId_optional AssociatedTraceabilityId_;
      ::xsd::cxx::tree::one< id_type > id_;
    };

    class ManufacturingProcessTraceabilitiesType: public ::xml_schema::type
    {
      public:
      // ManufacturingProcessTraceability
      //
      typedef ::xsd::qif2::ManufacturingProcessTraceabilityType ManufacturingProcessTraceability_type;
      typedef ::xsd::cxx::tree::sequence< ManufacturingProcessTraceability_type > ManufacturingProcessTraceability_sequence;
      typedef ManufacturingProcessTraceability_sequence::iterator ManufacturingProcessTraceability_iterator;
      typedef ManufacturingProcessTraceability_sequence::const_iterator ManufacturingProcessTraceability_const_iterator;
      typedef ::xsd::cxx::tree::traits< ManufacturingProcessTraceability_type, char > ManufacturingProcessTraceability_traits;

      const ManufacturingProcessTraceability_sequence&
      ManufacturingProcessTraceability () const;

      ManufacturingProcessTraceability_sequence&
      ManufacturingProcessTraceability ();

      void
      ManufacturingProcessTraceability (const ManufacturingProcessTraceability_sequence& s);

      // Constructors.
      //
      ManufacturingProcessTraceabilitiesType ();

      ManufacturingProcessTraceabilitiesType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      ManufacturingProcessTraceabilitiesType (const ManufacturingProcessTraceabilitiesType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual ManufacturingProcessTraceabilitiesType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ManufacturingProcessTraceabilitiesType&
      operator= (const ManufacturingProcessTraceabilitiesType& x);

      virtual 
      ~ManufacturingProcessTraceabilitiesType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ManufacturingProcessTraceability_sequence ManufacturingProcessTraceability_;
    };

    class ErrorsType: public ::xml_schema::type
    {
      public:
      // Error
      //
      typedef ::xml_schema::string Error_type;
      typedef ::xsd::cxx::tree::sequence< Error_type > Error_sequence;
      typedef Error_sequence::iterator Error_iterator;
      typedef Error_sequence::const_iterator Error_const_iterator;
      typedef ::xsd::cxx::tree::traits< Error_type, char > Error_traits;

      const Error_sequence&
      Error () const;

      Error_sequence&
      Error ();

      void
      Error (const Error_sequence& s);

      // Constructors.
      //
      ErrorsType ();

      ErrorsType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      ErrorsType (const ErrorsType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual ErrorsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ErrorsType&
      operator= (const ErrorsType& x);

      virtual 
      ~ErrorsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Error_sequence Error_;
    };

    class PartialInspectionType: public ::xml_schema::type
    {
      public:
      // BaselineProductNumber
      //
      typedef ::xml_schema::string BaselineProductNumber_type;
      typedef ::xsd::cxx::tree::traits< BaselineProductNumber_type, char > BaselineProductNumber_traits;

      const BaselineProductNumber_type&
      BaselineProductNumber () const;

      BaselineProductNumber_type&
      BaselineProductNumber ();

      void
      BaselineProductNumber (const BaselineProductNumber_type& x);

      void
      BaselineProductNumber (::std::auto_ptr< BaselineProductNumber_type > p);

      // BaselineProductVersion
      //
      typedef ::xml_schema::string BaselineProductVersion_type;
      typedef ::xsd::cxx::tree::optional< BaselineProductVersion_type > BaselineProductVersion_optional;
      typedef ::xsd::cxx::tree::traits< BaselineProductVersion_type, char > BaselineProductVersion_traits;

      const BaselineProductVersion_optional&
      BaselineProductVersion () const;

      BaselineProductVersion_optional&
      BaselineProductVersion ();

      void
      BaselineProductVersion (const BaselineProductVersion_type& x);

      void
      BaselineProductVersion (const BaselineProductVersion_optional& x);

      void
      BaselineProductVersion (::std::auto_ptr< BaselineProductVersion_type > p);

      // ReasonForPartialInspection
      //
      typedef ::xml_schema::string ReasonForPartialInspection_type;
      typedef ::xsd::cxx::tree::traits< ReasonForPartialInspection_type, char > ReasonForPartialInspection_traits;

      const ReasonForPartialInspection_type&
      ReasonForPartialInspection () const;

      ReasonForPartialInspection_type&
      ReasonForPartialInspection ();

      void
      ReasonForPartialInspection (const ReasonForPartialInspection_type& x);

      void
      ReasonForPartialInspection (::std::auto_ptr< ReasonForPartialInspection_type > p);

      // Constructors.
      //
      PartialInspectionType (const BaselineProductNumber_type&,
                             const ReasonForPartialInspection_type&);

      PartialInspectionType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      PartialInspectionType (const PartialInspectionType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual PartialInspectionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PartialInspectionType&
      operator= (const PartialInspectionType& x);

      virtual 
      ~PartialInspectionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaselineProductNumber_type > BaselineProductNumber_;
      BaselineProductVersion_optional BaselineProductVersion_;
      ::xsd::cxx::tree::one< ReasonForPartialInspection_type > ReasonForPartialInspection_;
    };

    class TimeDescriptionEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        INSPECTION_START,
        INSPECTION_END,
        INTERMEDIATE
      };

      TimeDescriptionEnumType (value v);

      TimeDescriptionEnumType (const char* v);

      TimeDescriptionEnumType (const ::std::string& v);

      TimeDescriptionEnumType (const ::xml_schema::nmtoken& v);

      TimeDescriptionEnumType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      TimeDescriptionEnumType (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      TimeDescriptionEnumType (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      TimeDescriptionEnumType (const TimeDescriptionEnumType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual TimeDescriptionEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TimeDescriptionEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_TimeDescriptionEnumType_convert ();
      }

      protected:
      value
      _xsd_TimeDescriptionEnumType_convert () const;

      public:
      static const char* const _xsd_TimeDescriptionEnumType_literals_[3];
      static const value _xsd_TimeDescriptionEnumType_indexes_[3];
    };

    class TimeDescriptionType: public ::xml_schema::type
    {
      public:
      // TimeDescriptionEnum
      //
      typedef ::xsd::qif2::TimeDescriptionEnumType TimeDescriptionEnum_type;
      typedef ::xsd::cxx::tree::optional< TimeDescriptionEnum_type > TimeDescriptionEnum_optional;
      typedef ::xsd::cxx::tree::traits< TimeDescriptionEnum_type, char > TimeDescriptionEnum_traits;

      const TimeDescriptionEnum_optional&
      TimeDescriptionEnum () const;

      TimeDescriptionEnum_optional&
      TimeDescriptionEnum ();

      void
      TimeDescriptionEnum (const TimeDescriptionEnum_type& x);

      void
      TimeDescriptionEnum (const TimeDescriptionEnum_optional& x);

      void
      TimeDescriptionEnum (::std::auto_ptr< TimeDescriptionEnum_type > p);

      // OtherTimeDescription
      //
      typedef ::xml_schema::string OtherTimeDescription_type;
      typedef ::xsd::cxx::tree::optional< OtherTimeDescription_type > OtherTimeDescription_optional;
      typedef ::xsd::cxx::tree::traits< OtherTimeDescription_type, char > OtherTimeDescription_traits;

      const OtherTimeDescription_optional&
      OtherTimeDescription () const;

      OtherTimeDescription_optional&
      OtherTimeDescription ();

      void
      OtherTimeDescription (const OtherTimeDescription_type& x);

      void
      OtherTimeDescription (const OtherTimeDescription_optional& x);

      void
      OtherTimeDescription (::std::auto_ptr< OtherTimeDescription_type > p);

      // Constructors.
      //
      TimeDescriptionType ();

      TimeDescriptionType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      TimeDescriptionType (const TimeDescriptionType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual TimeDescriptionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TimeDescriptionType&
      operator= (const TimeDescriptionType& x);

      virtual 
      ~TimeDescriptionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      TimeDescriptionEnum_optional TimeDescriptionEnum_;
      OtherTimeDescription_optional OtherTimeDescription_;
    };

    class InspectionModeEnumType: public ::xml_schema::string
    {
      public:
      enum value
      {
        FAI_Full,
        FAI_Partial,
        cxx_100Percent,
        APQP,
        KPC,
        PPAP
      };

      InspectionModeEnumType (value v);

      InspectionModeEnumType (const char* v);

      InspectionModeEnumType (const ::std::string& v);

      InspectionModeEnumType (const ::xml_schema::string& v);

      InspectionModeEnumType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      InspectionModeEnumType (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      InspectionModeEnumType (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      InspectionModeEnumType (const InspectionModeEnumType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual InspectionModeEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      InspectionModeEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_InspectionModeEnumType_convert ();
      }

      protected:
      value
      _xsd_InspectionModeEnumType_convert () const;

      public:
      static const char* const _xsd_InspectionModeEnumType_literals_[6];
      static const value _xsd_InspectionModeEnumType_indexes_[6];
    };

    class InspectionScopeEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        DETAIL,
        ASSEMBLY
      };

      InspectionScopeEnumType (value v);

      InspectionScopeEnumType (const char* v);

      InspectionScopeEnumType (const ::std::string& v);

      InspectionScopeEnumType (const ::xml_schema::nmtoken& v);

      InspectionScopeEnumType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      InspectionScopeEnumType (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      InspectionScopeEnumType (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      InspectionScopeEnumType (const InspectionScopeEnumType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual InspectionScopeEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      InspectionScopeEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_InspectionScopeEnumType_convert ();
      }

      protected:
      value
      _xsd_InspectionScopeEnumType_convert () const;

      public:
      static const char* const _xsd_InspectionScopeEnumType_literals_[2];
      static const value _xsd_InspectionScopeEnumType_indexes_[2];
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xsd
{
  namespace qif2
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (const ::std::string& uri,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (::std::istream& is,
                                        const ::std::string& id,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (::xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (::xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (::xercesc::InputSource& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xsd
{
  namespace qif2
  {
    void
    operator<< (::xercesc::DOMElement&, const InspectionProgramType&);

    void
    operator<< (::xercesc::DOMElement&, const InspectionSoftwareItemsType&);

    void
    operator<< (::xercesc::DOMElement&, const EnvironmentType&);

    void
    operator<< (::xercesc::DOMElement&, const EnvironmentsType&);

    void
    operator<< (::xercesc::DOMElement&, const InspectionTraceabilityType&);

    void
    operator<< (::xercesc::DOMElement&, const PreInspectionTraceabilityType&);

    void
    operator<< (::xercesc::DOMElement&, const ProductTraceabilityType&);

    void
    operator<< (::xercesc::DOMElement&, const ActualProductTraceabilityType&);

    void
    operator<< (::xercesc::DOMElement&, const ProcessParameterType&);

    void
    operator<< (::xercesc::DOMElement&, const ManufacturingProcessTraceabilityType&);

    void
    operator<< (::xercesc::DOMElement&, const ManufacturingProcessTraceabilitiesType&);

    // Serialize to std::ostream.
    //

    void
    ManufacturingProcessTraceabilities (::std::ostream& os,
                                        const ::xsd::qif2::ManufacturingProcessTraceabilitiesType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    ManufacturingProcessTraceabilities (::std::ostream& os,
                                        const ::xsd::qif2::ManufacturingProcessTraceabilitiesType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    ManufacturingProcessTraceabilities (::std::ostream& os,
                                        const ::xsd::qif2::ManufacturingProcessTraceabilitiesType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ManufacturingProcessTraceabilities (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::ManufacturingProcessTraceabilitiesType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    ManufacturingProcessTraceabilities (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::ManufacturingProcessTraceabilitiesType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    ManufacturingProcessTraceabilities (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::ManufacturingProcessTraceabilitiesType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ManufacturingProcessTraceabilities (::xercesc::DOMDocument& d,
                                        const ::xsd::qif2::ManufacturingProcessTraceabilitiesType& x,
                                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ManufacturingProcessTraceabilities (const ::xsd::qif2::ManufacturingProcessTraceabilitiesType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ErrorsType&);

    void
    operator<< (::xercesc::DOMElement&, const PartialInspectionType&);

    void
    operator<< (::xercesc::DOMElement&, const TimeDescriptionEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const TimeDescriptionEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const TimeDescriptionEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const TimeDescriptionType&);

    void
    operator<< (::xercesc::DOMElement&, const InspectionModeEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const InspectionModeEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const InspectionModeEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const InspectionScopeEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const InspectionScopeEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const InspectionScopeEnumType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // TRACEABILITY_HXX

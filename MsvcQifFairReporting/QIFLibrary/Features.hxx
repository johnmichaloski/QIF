// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef FEATURES_HXX
#define FEATURES_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xsd
{
  namespace qif2
  {
    class FeatureBaseType;
    class FeatureItemBaseType;
    class FeatureDefinitionBaseType;
    class PointListNominalType;
    class FeatureNominalBaseType;
    class PointListActualType;
    class FeatureActualBaseType;
    class SetFeatureType;
    class MeasuredFeatureType;
    class ConstructionMethodBaseType;
    class PointRangeType;
    class PointIndexType;
    class BaseFeaturePointSetType;
    class BaseFeaturePointListType;
    class TransformationReferenceType;
    class ArcConstructionMethodType;
    class ArcBestFitType;
    class ArcRecompType;
    class ArcProjectionType;
    class ArcCopyType;
    class ArcCastType;
    class ArcTransformType;
    class ArcFromScanType;
    class ArcExtractType;
    class ArcCheckedType;
    class ArcCheckedFeatureType;
    class ArcActualDeterminationType;
    class ArcFeatureItemType;
    class ArcFeatureDefinitionType;
    class ArcFeatureNominalType;
    class ArcFeatureActualType;
    class CircleConstructionMethodType;
    class CircleBestFitType;
    class CircleRecompType;
    class CircleIntersectionType;
    class CircleProjectionType;
    class CircleCopyType;
    class CircleCastType;
    class CircleTangentType;
    class CircleTangentThroughType;
    class CircleTransformType;
    class CircleFromConeType;
    class CircleFromScanType;
    class CircleCheckedType;
    class CircleCheckedFeatureType;
    class CircleActualDeterminationType;
    class CircleFeatureItemType;
    class CircleFeatureDefinitionType;
    class CircleFeatureNominalType;
    class CircleFeatureActualType;
    class ConeConstructionMethodType;
    class ConeBestFitType;
    class ConeRecompType;
    class ConeCopyType;
    class ConeCastType;
    class ConeTransformType;
    class ConeFromScanType;
    class ConeCheckedType;
    class ConeCheckedFeatureType;
    class ConeActualDeterminationType;
    class ConeFeatureItemType;
    class ConeFeatureDefinitionType;
    class ConeFeatureNominalType;
    class ConeFeatureActualType;
    class ConicalSegmentConstructionMethodType;
    class ConicalSegmentBestFitType;
    class ConicalSegmentRecompType;
    class ConicalSegmentCopyType;
    class ConicalSegmentCastType;
    class ConicalSegmentTransformType;
    class ConicalSegmentCheckedType;
    class ConicalSegmentCheckedFeatureType;
    class ConicalSegmentActualDeterminationType;
    class ConicalSegmentFeatureItemType;
    class ConicalSegmentFeatureDefinitionType;
    class ConicalSegmentFeatureNominalType;
    class ConicalSegmentFeatureActualType;
    class CuboidConstructionMethodType;
    class CuboidBestFitType;
    class CuboidRecompType;
    class CuboidCopyType;
    class CuboidCastType;
    class CuboidTransformType;
    class CuboidCheckedType;
    class CuboidCheckedFeatureType;
    class CuboidActualDeterminationType;
    class CuboidFeatureItemType;
    class CuboidFeatureDefinitionType;
    class CuboidFeatureNominalType;
    class CuboidFeatureActualType;
    class CylinderConstructionMethodType;
    class CylinderBestFitType;
    class CylinderRecompType;
    class CylinderCopyType;
    class CylinderCastType;
    class CylinderTransformType;
    class CylinderFromScanType;
    class CylinderCheckedType;
    class CylinderCheckedFeatureType;
    class CylinderActualDeterminationType;
    class CylinderFeatureItemType;
    class CylinderFeatureDefinitionType;
    class CylinderFeatureNominalType;
    class CylinderFeatureActualType;
    class CylindricalSegmentConstructionMethodType;
    class CylindricalSegmentBestFitType;
    class CylindricalSegmentRecompType;
    class CylindricalSegmentCopyType;
    class CylindricalSegmentCastType;
    class CylindricalSegmentTransformType;
    class CylindricalSegmentCheckedType;
    class CylindricalSegmentCheckedFeatureType;
    class CylindricalSegmentActualDeterminationType;
    class CylindricalSegmentFeatureItemType;
    class CylindricalSegmentFeatureDefinitionType;
    class CylindricalSegmentFeatureNominalType;
    class CylindricalSegmentFeatureActualType;
    class EdgePointConstructionMethodType;
    class EdgePointCopyType;
    class EdgePointCastType;
    class EdgePointTransformType;
    class EdgePointFromScanType;
    class EdgePointCheckedType;
    class EdgePointCheckedFeatureType;
    class EdgePointActualDeterminationType;
    class EdgePointFeatureItemType;
    class EdgePointFeatureDefinitionType;
    class EdgePointFeatureNominalType;
    class EdgePointFeatureActualType;
    class EllipseConstructionMethodType;
    class EllipseBestFitType;
    class EllipseRecompType;
    class EllipseProjectionType;
    class EllipseIntersectionType;
    class EllipseCopyType;
    class EllipseCastType;
    class EllipseTransformType;
    class EllipseFromScanType;
    class EllipseCheckedType;
    class EllipseCheckedFeatureType;
    class EllipseActualDeterminationType;
    class EllipseFeatureItemType;
    class EllipseFeatureDefinitionType;
    class EllipseFeatureNominalType;
    class EllipseFeatureActualType;
    class ElongatedCylinderConstructionMethodType;
    class ElongatedCylinderBestFitType;
    class ElongatedCylinderRecompType;
    class ElongatedCylinderCopyType;
    class ElongatedCylinderCastType;
    class ElongatedCylinderTransformType;
    class ElongatedCylinderCheckedType;
    class ElongatedCylinderCheckedFeatureType;
    class ElongatedCylinderActualDeterminationType;
    class ElongatedCylinderFeatureItemType;
    class ElongatedCylinderFeatureDefinitionType;
    class ElongatedCylinderFeatureNominalType;
    class ElongatedCylinderFeatureActualType;
    class ExtrudedCrossSectionConstructionMethodType;
    class ExtrudedCrossSectionBestFitType;
    class ExtrudedCrossSectionRecompType;
    class ExtrudedCrossSectionCopyType;
    class ExtrudedCrossSectionCastType;
    class ExtrudedCrossSectionTransformType;
    class ExtrudedCrossSectionCheckedType;
    class ExtrudedCrossSectionCheckedFeatureType;
    class ExtrudedCrossSectionActualDeterminationType;
    class ExtrudedCrossSectionFeatureItemType;
    class ExtrudedCrossSectionFeatureDefinitionType;
    class ExtrudedCrossSectionFeatureNominalType;
    class ExtrudedCrossSectionFeatureActualType;
    class GenericFeatureItemType;
    class GenericFeatureDefinitionType;
    class GenericFeatureNominalType;
    class GenericFeatureActualType;
    class LineConstructionMethodType;
    class LineBestFitType;
    class LineRecompType;
    class LineMidlineType;
    class LineIntersectionType;
    class LineProjectionType;
    class LinePerpendicularType;
    class LineParallelType;
    class LineCopyType;
    class LineCastType;
    class LineTangentThroughType;
    class LineTransformType;
    class LineFromScanType;
    class LineExtractType;
    class LineCheckedType;
    class LineCheckedFeatureType;
    class LineActualDeterminationType;
    class LineFeatureItemType;
    class LineFeatureDefinitionType;
    class LineFeatureNominalType;
    class LineFeatureActualType;
    class OppositeLinesConstructionMethodType;
    class OppositeLinesBestFitType;
    class OppositeLinesRecompType;
    class OppositeLinesProjectionType;
    class OppositeLinesCopyType;
    class OppositeLinesCastType;
    class OppositeLinesTransformType;
    class OppositeLinesFromScanType;
    class OppositeLinesCheckedType;
    class OppositeLinesCheckedFeatureType;
    class OppositeLinesActualDeterminationType;
    class OppositeLinesFeatureItemType;
    class OppositeLinesFeatureDefinitionType;
    class OppositeLinesFeatureNominalType;
    class OppositeLinesFeatureActualType;
    class OppositePlanesConstructionMethodType;
    class OppositePlanesBestFitType;
    class OppositePlanesRecompType;
    class OppositePlanesCopyType;
    class OppositePlanesCastType;
    class OppositePlanesTransformType;
    class OppositePlanesFromScanType;
    class OppositePlanesCheckedType;
    class OppositePlanesCheckedFeatureType;
    class OppositePlanesActualDeterminationType;
    class OppositePlanesFeatureItemType;
    class OppositePlanesFeatureDefinitionType;
    class OppositePlanesFeatureNominalType;
    class OppositePlanesFeatureActualType;
    class PlaneConstructionMethodType;
    class PlaneBestFitType;
    class PlaneRecompType;
    class PlaneMidplaneType;
    class PlaneOffsetType;
    class PlanePerpendicularType;
    class PlaneParallelType;
    class PlaneCopyType;
    class PlaneCastType;
    class PlaneTangentThroughType;
    class PlaneTransformType;
    class PlaneExtractType;
    class PlaneCheckedType;
    class PlaneCheckedFeatureType;
    class PlaneActualDeterminationType;
    class PlaneFeatureItemType;
    class PlaneFeatureDefinitionType;
    class PlaneFeatureNominalType;
    class PlaneFeatureActualType;
    class PointDefinedCurveConstructionMethodType;
    class PointDefinedCurveBestFitType;
    class PointDefinedCurveRecompType;
    class PointDefinedCurveCopyType;
    class PointDefinedCurveTransformType;
    class PointDefinedCurveFromScanType;
    class PointDefinedCurveExtractType;
    class PointDefinedCurveCheckedType;
    class PointDefinedCurveCheckedFeatureType;
    class PointDefinedCurveActualDeterminationType;
    class PointDefinedCurveFeatureItemType;
    class PointDefinedCurveFeatureDefinitionType;
    class PointDefinedCurveFeatureNominalType;
    class TargetPointsActualType;
    class PointDefinedCurveFeatureActualType;
    class PointDefinedSurfaceConstructionMethodType;
    class PointDefinedSurfaceBestFitType;
    class PointDefinedSurfaceRecompType;
    class PointDefinedSurfaceCopyType;
    class PointDefinedSurfaceTransformType;
    class PointDefinedSurfaceExtractType;
    class PointDefinedSurfaceCheckedType;
    class PointDefinedSurfaceCheckedFeatureType;
    class PointDefinedSurfaceActualDeterminationType;
    class PointDefinedSurfaceFeatureItemType;
    class PointDefinedSurfaceFeatureDefinitionType;
    class TargetPointsNominalType;
    class PointDefinedSurfaceFeatureNominalType;
    class PointDefinedSurfaceFeatureActualType;
    class PointConstructionMethodType;
    class PointFeatureIntersectionType;
    class PointFeaturePierceType;
    class PointFeatureProjectionType;
    class PointFeatureFromConeType;
    class PointFeatureCopyType;
    class PointFeatureTransformType;
    class PointFeatureFromScanType;
    class PointFeatureCenterOfGravityType;
    class PointFeatureMidPointType;
    class PointFeatureCastType;
    class PointFeatureMovePointType;
    class PointFeatureMovePointVectorType;
    class PointFeatureMovePointAxisType;
    class PointFeatureExtremeType;
    class PointCheckedType;
    class PointCheckedFeatureType;
    class PointActualDeterminationType;
    class PointFeatureItemType;
    class PointFeatureDefinitionType;
    class PointFeatureNominalType;
    class PointFeatureActualType;
    class SphereConstructionMethodType;
    class SphereBestFitType;
    class SphereRecompType;
    class SphereCopyType;
    class SphereCastType;
    class SphereTransformType;
    class SphereFromScanType;
    class SphereCheckedType;
    class SphereCheckedFeatureType;
    class SphereActualDeterminationType;
    class SphereFeatureItemType;
    class SphereFeatureDefinitionType;
    class SphereFeatureNominalType;
    class SphereFeatureActualType;
    class SphericalSegmentConstructionMethodType;
    class SphericalSegmentBestFitType;
    class SphericalSegmentRecompType;
    class SphericalSegmentCopyType;
    class SphericalSegmentCastType;
    class SphericalSegmentTransformType;
    class SphericalSegmentCheckedType;
    class SphericalSegmentCheckedFeatureType;
    class SphericalSegmentActualDeterminationType;
    class SphericalSegmentFeatureItemType;
    class SphericalSegmentFeatureDefinitionType;
    class SphericalSegmentFeatureNominalType;
    class SphericalSegmentFeatureActualType;
    class SurfaceOfRevolutionConstructionMethodType;
    class SurfaceOfRevolutionBestFitType;
    class SurfaceOfRevolutionRecompType;
    class SurfaceOfRevolutionCopyType;
    class SurfaceOfRevolutionCastType;
    class SurfaceOfRevolutionTransformType;
    class SurfaceOfRevolutionCheckedType;
    class SurfaceOfRevolutionCheckedFeatureType;
    class SurfaceOfRevolutionActualDeterminationType;
    class SurfaceOfRevolutionFeatureItemType;
    class SurfaceOfRevolutionFeatureDefinitionType;
    class SurfaceOfRevolutionFeatureNominalType;
    class SurfaceOfRevolutionFeatureActualType;
    class ThreadedFeatureConstructionMethodType;
    class ThreadedFeatureBestFitType;
    class ThreadedFeatureRecompType;
    class ThreadedFeatureCopyType;
    class ThreadedFeatureCastType;
    class ThreadedFeatureTransformType;
    class ThreadedFeatureFromCylinderType;
    class ThreadedFeatureCheckedType;
    class ThreadedFeatureCheckedFeatureType;
    class ThreadedFeatureActualDeterminationType;
    class ThreadedFeatureItemType;
    class ThreadedFeatureDefinitionType;
    class ThreadedFeatureNominalType;
    class ThreadedFeatureActualType;
    class ToroidalSegmentConstructionMethodType;
    class ToroidalSegmentBestFitType;
    class ToroidalSegmentRecompType;
    class ToroidalSegmentCopyType;
    class ToroidalSegmentCastType;
    class ToroidalSegmentTransformType;
    class ToroidalSegmentCheckedType;
    class ToroidalSegmentCheckedFeatureType;
    class ToroidalSegmentActualDeterminationType;
    class ToroidalSegmentFeatureItemType;
    class ToroidalSegmentFeatureDefinitionType;
    class ToroidalSegmentFeatureNominalType;
    class ToroidalSegmentFeatureActualType;
    class TorusConstructionMethodType;
    class TorusBestFitType;
    class TorusRecompType;
    class TorusCopyType;
    class TorusCastType;
    class TorusTransformType;
    class TorusFromScanType;
    class TorusCheckedType;
    class TorusCheckedFeatureType;
    class TorusActualDeterminationType;
    class TorusFeatureItemType;
    class TorusFeatureDefinitionType;
    class TorusFeatureNominalType;
    class TorusFeatureActualType;
    class CompositeFeatureItemBaseType;
    class CompositeFeatureDefinitionBaseType;
    class CompositeFeatureNominalBaseType;
    class CompositeFeatureActualBaseType;
    class CompoundFeatureItemType;
    class CompoundFeatureDefinitionType;
    class CompoundFeatureNominalType;
    class CompoundFeatureActualType;
    class PatternFeatureItemType;
    class PatternFeatureDefinitionType;
    class PatternFeatureNominalType;
    class PatternFeatureActualType;
    class ProfileGroupFeatureItemType;
    class ProfileGroupFeatureDefinitionType;
    class ProfileGroupFeatureNominalType;
    class ProfileGroupFeatureActualType;
    class RunoutGroupFeatureItemType;
    class RunoutGroupFeatureDefinitionType;
    class RunoutGroupFeatureNominalType;
    class RunoutGroupFeatureActualType;
    class FeatureAspectsListsType;
    class MeasuredFeaturesType;
    class FeatureDefinitionsType;
    class FeatureNominalsType;
    class FeatureItemsType;
    class FeatureActualsType;
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "../qiflibrary/intermediatespmi.hxx"

namespace xsd
{
  namespace qif2
  {
    class FeatureBaseType: public ::xml_schema::type
    {
      public:
      // Attributes
      //
      typedef ::xsd::qif2::AttributesType Attributes_type;
      typedef ::xsd::cxx::tree::optional< Attributes_type > Attributes_optional;
      typedef ::xsd::cxx::tree::traits< Attributes_type, char > Attributes_traits;

      const Attributes_optional&
      Attributes () const;

      Attributes_optional&
      Attributes ();

      void
      Attributes (const Attributes_type& x);

      void
      Attributes (const Attributes_optional& x);

      void
      Attributes (::std::auto_ptr< Attributes_type > p);

      // id
      //
      typedef ::xsd::qif2::QIFIdType id_type;
      typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

      const id_type&
      id () const;

      id_type&
      id ();

      void
      id (const id_type& x);

      void
      id (::std::auto_ptr< id_type > p);

      // Constructors.
      //
      FeatureBaseType (const id_type&);

      FeatureBaseType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      FeatureBaseType (const FeatureBaseType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual FeatureBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FeatureBaseType&
      operator= (const FeatureBaseType& x);

      virtual 
      ~FeatureBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Attributes_optional Attributes_;
      ::xsd::cxx::tree::one< id_type > id_;
    };

    class FeatureItemBaseType: public ::xsd::qif2::FeatureBaseType
    {
      public:
      // FeatureNominalId
      //
      typedef ::xsd::qif2::QIFReferenceFullType FeatureNominalId_type;
      typedef ::xsd::cxx::tree::optional< FeatureNominalId_type > FeatureNominalId_optional;
      typedef ::xsd::cxx::tree::traits< FeatureNominalId_type, char > FeatureNominalId_traits;

      const FeatureNominalId_optional&
      FeatureNominalId () const;

      FeatureNominalId_optional&
      FeatureNominalId ();

      void
      FeatureNominalId (const FeatureNominalId_type& x);

      void
      FeatureNominalId (const FeatureNominalId_optional& x);

      void
      FeatureNominalId (::std::auto_ptr< FeatureNominalId_type > p);

      // ParentFeatureItemId
      //
      typedef ::xsd::qif2::QIFReferenceFullType ParentFeatureItemId_type;
      typedef ::xsd::cxx::tree::optional< ParentFeatureItemId_type > ParentFeatureItemId_optional;
      typedef ::xsd::cxx::tree::traits< ParentFeatureItemId_type, char > ParentFeatureItemId_traits;

      const ParentFeatureItemId_optional&
      ParentFeatureItemId () const;

      ParentFeatureItemId_optional&
      ParentFeatureItemId ();

      void
      ParentFeatureItemId (const ParentFeatureItemId_type& x);

      void
      ParentFeatureItemId (const ParentFeatureItemId_optional& x);

      void
      ParentFeatureItemId (::std::auto_ptr< ParentFeatureItemId_type > p);

      // FeatureName
      //
      typedef ::xml_schema::token FeatureName_type;
      typedef ::xsd::cxx::tree::traits< FeatureName_type, char > FeatureName_traits;

      const FeatureName_type&
      FeatureName () const;

      FeatureName_type&
      FeatureName ();

      void
      FeatureName (const FeatureName_type& x);

      void
      FeatureName (::std::auto_ptr< FeatureName_type > p);

      // QPId
      //
      typedef ::xsd::qif2::QPIdType QPId_type;
      typedef ::xsd::cxx::tree::optional< QPId_type > QPId_optional;
      typedef ::xsd::cxx::tree::traits< QPId_type, char > QPId_traits;

      const QPId_optional&
      QPId () const;

      QPId_optional&
      QPId ();

      void
      QPId (const QPId_type& x);

      void
      QPId (const QPId_optional& x);

      void
      QPId (::std::auto_ptr< QPId_type > p);

      // NotableEventIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType NotableEventIds_type;
      typedef ::xsd::cxx::tree::optional< NotableEventIds_type > NotableEventIds_optional;
      typedef ::xsd::cxx::tree::traits< NotableEventIds_type, char > NotableEventIds_traits;

      const NotableEventIds_optional&
      NotableEventIds () const;

      NotableEventIds_optional&
      NotableEventIds ();

      void
      NotableEventIds (const NotableEventIds_type& x);

      void
      NotableEventIds (const NotableEventIds_optional& x);

      void
      NotableEventIds (::std::auto_ptr< NotableEventIds_type > p);

      // CoordinateSystemId
      //
      typedef ::xsd::qif2::QIFReferenceFullType CoordinateSystemId_type;
      typedef ::xsd::cxx::tree::optional< CoordinateSystemId_type > CoordinateSystemId_optional;
      typedef ::xsd::cxx::tree::traits< CoordinateSystemId_type, char > CoordinateSystemId_traits;

      const CoordinateSystemId_optional&
      CoordinateSystemId () const;

      CoordinateSystemId_optional&
      CoordinateSystemId ();

      void
      CoordinateSystemId (const CoordinateSystemId_type& x);

      void
      CoordinateSystemId (const CoordinateSystemId_optional& x);

      void
      CoordinateSystemId (::std::auto_ptr< CoordinateSystemId_type > p);

      // Constructors.
      //
      FeatureItemBaseType (const id_type&,
                           const FeatureName_type&);

      FeatureItemBaseType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      FeatureItemBaseType (const FeatureItemBaseType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual FeatureItemBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FeatureItemBaseType&
      operator= (const FeatureItemBaseType& x);

      virtual 
      ~FeatureItemBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      FeatureNominalId_optional FeatureNominalId_;
      ParentFeatureItemId_optional ParentFeatureItemId_;
      ::xsd::cxx::tree::one< FeatureName_type > FeatureName_;
      QPId_optional QPId_;
      NotableEventIds_optional NotableEventIds_;
      CoordinateSystemId_optional CoordinateSystemId_;
    };

    class FeatureDefinitionBaseType: public ::xsd::qif2::FeatureBaseType
    {
      public:
      // Constructors.
      //
      FeatureDefinitionBaseType (const id_type&);

      FeatureDefinitionBaseType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      FeatureDefinitionBaseType (const FeatureDefinitionBaseType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual FeatureDefinitionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~FeatureDefinitionBaseType ();
    };

    class PointListNominalType: public ::xml_schema::type
    {
      public:
      // MeasurePoint
      //
      typedef ::xsd::qif2::MeasurePointNominalType MeasurePoint_type;
      typedef ::xsd::cxx::tree::sequence< MeasurePoint_type > MeasurePoint_sequence;
      typedef MeasurePoint_sequence::iterator MeasurePoint_iterator;
      typedef MeasurePoint_sequence::const_iterator MeasurePoint_const_iterator;
      typedef ::xsd::cxx::tree::traits< MeasurePoint_type, char > MeasurePoint_traits;

      const MeasurePoint_sequence&
      MeasurePoint () const;

      MeasurePoint_sequence&
      MeasurePoint ();

      void
      MeasurePoint (const MeasurePoint_sequence& s);

      // linearUnit
      //
      typedef ::xml_schema::token linearUnit_type;
      typedef ::xsd::cxx::tree::optional< linearUnit_type > linearUnit_optional;
      typedef ::xsd::cxx::tree::traits< linearUnit_type, char > linearUnit_traits;

      const linearUnit_optional&
      linearUnit () const;

      linearUnit_optional&
      linearUnit ();

      void
      linearUnit (const linearUnit_type& x);

      void
      linearUnit (const linearUnit_optional& x);

      void
      linearUnit (::std::auto_ptr< linearUnit_type > p);

      // decimalPlaces
      //
      typedef ::xml_schema::non_negative_integer decimalPlaces_type;
      typedef ::xsd::cxx::tree::optional< decimalPlaces_type > decimalPlaces_optional;
      typedef ::xsd::cxx::tree::traits< decimalPlaces_type, char > decimalPlaces_traits;

      const decimalPlaces_optional&
      decimalPlaces () const;

      decimalPlaces_optional&
      decimalPlaces ();

      void
      decimalPlaces (const decimalPlaces_type& x);

      void
      decimalPlaces (const decimalPlaces_optional& x);

      // significantFigures
      //
      typedef ::xml_schema::non_negative_integer significantFigures_type;
      typedef ::xsd::cxx::tree::optional< significantFigures_type > significantFigures_optional;
      typedef ::xsd::cxx::tree::traits< significantFigures_type, char > significantFigures_traits;

      const significantFigures_optional&
      significantFigures () const;

      significantFigures_optional&
      significantFigures ();

      void
      significantFigures (const significantFigures_type& x);

      void
      significantFigures (const significantFigures_optional& x);

      // validity
      //
      typedef ::xsd::qif2::ValidityEnumType validity_type;
      typedef ::xsd::cxx::tree::optional< validity_type > validity_optional;
      typedef ::xsd::cxx::tree::traits< validity_type, char > validity_traits;

      const validity_optional&
      validity () const;

      validity_optional&
      validity ();

      void
      validity (const validity_type& x);

      void
      validity (const validity_optional& x);

      void
      validity (::std::auto_ptr< validity_type > p);

      // xDecimalPlaces
      //
      typedef ::xml_schema::non_negative_integer xDecimalPlaces_type;
      typedef ::xsd::cxx::tree::optional< xDecimalPlaces_type > xDecimalPlaces_optional;
      typedef ::xsd::cxx::tree::traits< xDecimalPlaces_type, char > xDecimalPlaces_traits;

      const xDecimalPlaces_optional&
      xDecimalPlaces () const;

      xDecimalPlaces_optional&
      xDecimalPlaces ();

      void
      xDecimalPlaces (const xDecimalPlaces_type& x);

      void
      xDecimalPlaces (const xDecimalPlaces_optional& x);

      // xSignificantFigures
      //
      typedef ::xml_schema::non_negative_integer xSignificantFigures_type;
      typedef ::xsd::cxx::tree::optional< xSignificantFigures_type > xSignificantFigures_optional;
      typedef ::xsd::cxx::tree::traits< xSignificantFigures_type, char > xSignificantFigures_traits;

      const xSignificantFigures_optional&
      xSignificantFigures () const;

      xSignificantFigures_optional&
      xSignificantFigures ();

      void
      xSignificantFigures (const xSignificantFigures_type& x);

      void
      xSignificantFigures (const xSignificantFigures_optional& x);

      // xValidity
      //
      typedef ::xsd::qif2::ValidityEnumType xValidity_type;
      typedef ::xsd::cxx::tree::optional< xValidity_type > xValidity_optional;
      typedef ::xsd::cxx::tree::traits< xValidity_type, char > xValidity_traits;

      const xValidity_optional&
      xValidity () const;

      xValidity_optional&
      xValidity ();

      void
      xValidity (const xValidity_type& x);

      void
      xValidity (const xValidity_optional& x);

      void
      xValidity (::std::auto_ptr< xValidity_type > p);

      // yDecimalPlaces
      //
      typedef ::xml_schema::non_negative_integer yDecimalPlaces_type;
      typedef ::xsd::cxx::tree::optional< yDecimalPlaces_type > yDecimalPlaces_optional;
      typedef ::xsd::cxx::tree::traits< yDecimalPlaces_type, char > yDecimalPlaces_traits;

      const yDecimalPlaces_optional&
      yDecimalPlaces () const;

      yDecimalPlaces_optional&
      yDecimalPlaces ();

      void
      yDecimalPlaces (const yDecimalPlaces_type& x);

      void
      yDecimalPlaces (const yDecimalPlaces_optional& x);

      // ySignificantFigures
      //
      typedef ::xml_schema::non_negative_integer ySignificantFigures_type;
      typedef ::xsd::cxx::tree::optional< ySignificantFigures_type > ySignificantFigures_optional;
      typedef ::xsd::cxx::tree::traits< ySignificantFigures_type, char > ySignificantFigures_traits;

      const ySignificantFigures_optional&
      ySignificantFigures () const;

      ySignificantFigures_optional&
      ySignificantFigures ();

      void
      ySignificantFigures (const ySignificantFigures_type& x);

      void
      ySignificantFigures (const ySignificantFigures_optional& x);

      // yValidity
      //
      typedef ::xsd::qif2::ValidityEnumType yValidity_type;
      typedef ::xsd::cxx::tree::optional< yValidity_type > yValidity_optional;
      typedef ::xsd::cxx::tree::traits< yValidity_type, char > yValidity_traits;

      const yValidity_optional&
      yValidity () const;

      yValidity_optional&
      yValidity ();

      void
      yValidity (const yValidity_type& x);

      void
      yValidity (const yValidity_optional& x);

      void
      yValidity (::std::auto_ptr< yValidity_type > p);

      // zDecimalPlaces
      //
      typedef ::xml_schema::non_negative_integer zDecimalPlaces_type;
      typedef ::xsd::cxx::tree::optional< zDecimalPlaces_type > zDecimalPlaces_optional;
      typedef ::xsd::cxx::tree::traits< zDecimalPlaces_type, char > zDecimalPlaces_traits;

      const zDecimalPlaces_optional&
      zDecimalPlaces () const;

      zDecimalPlaces_optional&
      zDecimalPlaces ();

      void
      zDecimalPlaces (const zDecimalPlaces_type& x);

      void
      zDecimalPlaces (const zDecimalPlaces_optional& x);

      // zSignificantFigures
      //
      typedef ::xml_schema::non_negative_integer zSignificantFigures_type;
      typedef ::xsd::cxx::tree::optional< zSignificantFigures_type > zSignificantFigures_optional;
      typedef ::xsd::cxx::tree::traits< zSignificantFigures_type, char > zSignificantFigures_traits;

      const zSignificantFigures_optional&
      zSignificantFigures () const;

      zSignificantFigures_optional&
      zSignificantFigures ();

      void
      zSignificantFigures (const zSignificantFigures_type& x);

      void
      zSignificantFigures (const zSignificantFigures_optional& x);

      // zValidity
      //
      typedef ::xsd::qif2::ValidityEnumType zValidity_type;
      typedef ::xsd::cxx::tree::optional< zValidity_type > zValidity_optional;
      typedef ::xsd::cxx::tree::traits< zValidity_type, char > zValidity_traits;

      const zValidity_optional&
      zValidity () const;

      zValidity_optional&
      zValidity ();

      void
      zValidity (const zValidity_type& x);

      void
      zValidity (const zValidity_optional& x);

      void
      zValidity (::std::auto_ptr< zValidity_type > p);

      // Constructors.
      //
      PointListNominalType ();

      PointListNominalType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      PointListNominalType (const PointListNominalType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual PointListNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointListNominalType&
      operator= (const PointListNominalType& x);

      virtual 
      ~PointListNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      MeasurePoint_sequence MeasurePoint_;
      linearUnit_optional linearUnit_;
      decimalPlaces_optional decimalPlaces_;
      significantFigures_optional significantFigures_;
      validity_optional validity_;
      xDecimalPlaces_optional xDecimalPlaces_;
      xSignificantFigures_optional xSignificantFigures_;
      xValidity_optional xValidity_;
      yDecimalPlaces_optional yDecimalPlaces_;
      ySignificantFigures_optional ySignificantFigures_;
      yValidity_optional yValidity_;
      zDecimalPlaces_optional zDecimalPlaces_;
      zSignificantFigures_optional zSignificantFigures_;
      zValidity_optional zValidity_;
    };

    class FeatureNominalBaseType: public ::xsd::qif2::FeatureBaseType
    {
      public:
      // Name
      //
      typedef ::xml_schema::token Name_type;
      typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
      typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

      const Name_optional&
      Name () const;

      Name_optional&
      Name ();

      void
      Name (const Name_type& x);

      void
      Name (const Name_optional& x);

      void
      Name (::std::auto_ptr< Name_type > p);

      // PointList
      //
      typedef ::xsd::qif2::PointListNominalType PointList_type;
      typedef ::xsd::cxx::tree::optional< PointList_type > PointList_optional;
      typedef ::xsd::cxx::tree::traits< PointList_type, char > PointList_traits;

      const PointList_optional&
      PointList () const;

      PointList_optional&
      PointList ();

      void
      PointList (const PointList_type& x);

      void
      PointList (const PointList_optional& x);

      void
      PointList (::std::auto_ptr< PointList_type > p);

      // FeatureDefinitionId
      //
      typedef ::xsd::qif2::QIFReferenceType FeatureDefinitionId_type;
      typedef ::xsd::cxx::tree::traits< FeatureDefinitionId_type, char > FeatureDefinitionId_traits;

      const FeatureDefinitionId_type&
      FeatureDefinitionId () const;

      FeatureDefinitionId_type&
      FeatureDefinitionId ();

      void
      FeatureDefinitionId (const FeatureDefinitionId_type& x);

      void
      FeatureDefinitionId (::std::auto_ptr< FeatureDefinitionId_type > p);

      // EntityInternalIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType EntityInternalIds_type;
      typedef ::xsd::cxx::tree::optional< EntityInternalIds_type > EntityInternalIds_optional;
      typedef ::xsd::cxx::tree::traits< EntityInternalIds_type, char > EntityInternalIds_traits;

      const EntityInternalIds_optional&
      EntityInternalIds () const;

      EntityInternalIds_optional&
      EntityInternalIds ();

      void
      EntityInternalIds (const EntityInternalIds_type& x);

      void
      EntityInternalIds (const EntityInternalIds_optional& x);

      void
      EntityInternalIds (::std::auto_ptr< EntityInternalIds_type > p);

      // EntityExternalIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType EntityExternalIds_type;
      typedef ::xsd::cxx::tree::optional< EntityExternalIds_type > EntityExternalIds_optional;
      typedef ::xsd::cxx::tree::traits< EntityExternalIds_type, char > EntityExternalIds_traits;

      const EntityExternalIds_optional&
      EntityExternalIds () const;

      EntityExternalIds_optional&
      EntityExternalIds ();

      void
      EntityExternalIds (const EntityExternalIds_type& x);

      void
      EntityExternalIds (const EntityExternalIds_optional& x);

      void
      EntityExternalIds (::std::auto_ptr< EntityExternalIds_type > p);

      // Constructors.
      //
      FeatureNominalBaseType (const id_type&,
                              const FeatureDefinitionId_type&);

      FeatureNominalBaseType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      FeatureNominalBaseType (const FeatureNominalBaseType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual FeatureNominalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FeatureNominalBaseType&
      operator= (const FeatureNominalBaseType& x);

      virtual 
      ~FeatureNominalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Name_optional Name_;
      PointList_optional PointList_;
      ::xsd::cxx::tree::one< FeatureDefinitionId_type > FeatureDefinitionId_;
      EntityInternalIds_optional EntityInternalIds_;
      EntityExternalIds_optional EntityExternalIds_;
    };

    class PointListActualType: public ::xml_schema::type
    {
      public:
      // MeasurePoint
      //
      typedef ::xsd::qif2::MeasurePointActualType MeasurePoint_type;
      typedef ::xsd::cxx::tree::sequence< MeasurePoint_type > MeasurePoint_sequence;
      typedef MeasurePoint_sequence::iterator MeasurePoint_iterator;
      typedef MeasurePoint_sequence::const_iterator MeasurePoint_const_iterator;
      typedef ::xsd::cxx::tree::traits< MeasurePoint_type, char > MeasurePoint_traits;

      const MeasurePoint_sequence&
      MeasurePoint () const;

      MeasurePoint_sequence&
      MeasurePoint ();

      void
      MeasurePoint (const MeasurePoint_sequence& s);

      // linearUnit
      //
      typedef ::xml_schema::token linearUnit_type;
      typedef ::xsd::cxx::tree::optional< linearUnit_type > linearUnit_optional;
      typedef ::xsd::cxx::tree::traits< linearUnit_type, char > linearUnit_traits;

      const linearUnit_optional&
      linearUnit () const;

      linearUnit_optional&
      linearUnit ();

      void
      linearUnit (const linearUnit_type& x);

      void
      linearUnit (const linearUnit_optional& x);

      void
      linearUnit (::std::auto_ptr< linearUnit_type > p);

      // decimalPlaces
      //
      typedef ::xml_schema::non_negative_integer decimalPlaces_type;
      typedef ::xsd::cxx::tree::optional< decimalPlaces_type > decimalPlaces_optional;
      typedef ::xsd::cxx::tree::traits< decimalPlaces_type, char > decimalPlaces_traits;

      const decimalPlaces_optional&
      decimalPlaces () const;

      decimalPlaces_optional&
      decimalPlaces ();

      void
      decimalPlaces (const decimalPlaces_type& x);

      void
      decimalPlaces (const decimalPlaces_optional& x);

      // significantFigures
      //
      typedef ::xml_schema::non_negative_integer significantFigures_type;
      typedef ::xsd::cxx::tree::optional< significantFigures_type > significantFigures_optional;
      typedef ::xsd::cxx::tree::traits< significantFigures_type, char > significantFigures_traits;

      const significantFigures_optional&
      significantFigures () const;

      significantFigures_optional&
      significantFigures ();

      void
      significantFigures (const significantFigures_type& x);

      void
      significantFigures (const significantFigures_optional& x);

      // validity
      //
      typedef ::xsd::qif2::ValidityEnumType validity_type;
      typedef ::xsd::cxx::tree::optional< validity_type > validity_optional;
      typedef ::xsd::cxx::tree::traits< validity_type, char > validity_traits;

      const validity_optional&
      validity () const;

      validity_optional&
      validity ();

      void
      validity (const validity_type& x);

      void
      validity (const validity_optional& x);

      void
      validity (::std::auto_ptr< validity_type > p);

      // xDecimalPlaces
      //
      typedef ::xml_schema::non_negative_integer xDecimalPlaces_type;
      typedef ::xsd::cxx::tree::optional< xDecimalPlaces_type > xDecimalPlaces_optional;
      typedef ::xsd::cxx::tree::traits< xDecimalPlaces_type, char > xDecimalPlaces_traits;

      const xDecimalPlaces_optional&
      xDecimalPlaces () const;

      xDecimalPlaces_optional&
      xDecimalPlaces ();

      void
      xDecimalPlaces (const xDecimalPlaces_type& x);

      void
      xDecimalPlaces (const xDecimalPlaces_optional& x);

      // xSignificantFigures
      //
      typedef ::xml_schema::non_negative_integer xSignificantFigures_type;
      typedef ::xsd::cxx::tree::optional< xSignificantFigures_type > xSignificantFigures_optional;
      typedef ::xsd::cxx::tree::traits< xSignificantFigures_type, char > xSignificantFigures_traits;

      const xSignificantFigures_optional&
      xSignificantFigures () const;

      xSignificantFigures_optional&
      xSignificantFigures ();

      void
      xSignificantFigures (const xSignificantFigures_type& x);

      void
      xSignificantFigures (const xSignificantFigures_optional& x);

      // xValidity
      //
      typedef ::xsd::qif2::ValidityEnumType xValidity_type;
      typedef ::xsd::cxx::tree::optional< xValidity_type > xValidity_optional;
      typedef ::xsd::cxx::tree::traits< xValidity_type, char > xValidity_traits;

      const xValidity_optional&
      xValidity () const;

      xValidity_optional&
      xValidity ();

      void
      xValidity (const xValidity_type& x);

      void
      xValidity (const xValidity_optional& x);

      void
      xValidity (::std::auto_ptr< xValidity_type > p);

      // yDecimalPlaces
      //
      typedef ::xml_schema::non_negative_integer yDecimalPlaces_type;
      typedef ::xsd::cxx::tree::optional< yDecimalPlaces_type > yDecimalPlaces_optional;
      typedef ::xsd::cxx::tree::traits< yDecimalPlaces_type, char > yDecimalPlaces_traits;

      const yDecimalPlaces_optional&
      yDecimalPlaces () const;

      yDecimalPlaces_optional&
      yDecimalPlaces ();

      void
      yDecimalPlaces (const yDecimalPlaces_type& x);

      void
      yDecimalPlaces (const yDecimalPlaces_optional& x);

      // ySignificantFigures
      //
      typedef ::xml_schema::non_negative_integer ySignificantFigures_type;
      typedef ::xsd::cxx::tree::optional< ySignificantFigures_type > ySignificantFigures_optional;
      typedef ::xsd::cxx::tree::traits< ySignificantFigures_type, char > ySignificantFigures_traits;

      const ySignificantFigures_optional&
      ySignificantFigures () const;

      ySignificantFigures_optional&
      ySignificantFigures ();

      void
      ySignificantFigures (const ySignificantFigures_type& x);

      void
      ySignificantFigures (const ySignificantFigures_optional& x);

      // yValidity
      //
      typedef ::xsd::qif2::ValidityEnumType yValidity_type;
      typedef ::xsd::cxx::tree::optional< yValidity_type > yValidity_optional;
      typedef ::xsd::cxx::tree::traits< yValidity_type, char > yValidity_traits;

      const yValidity_optional&
      yValidity () const;

      yValidity_optional&
      yValidity ();

      void
      yValidity (const yValidity_type& x);

      void
      yValidity (const yValidity_optional& x);

      void
      yValidity (::std::auto_ptr< yValidity_type > p);

      // zDecimalPlaces
      //
      typedef ::xml_schema::non_negative_integer zDecimalPlaces_type;
      typedef ::xsd::cxx::tree::optional< zDecimalPlaces_type > zDecimalPlaces_optional;
      typedef ::xsd::cxx::tree::traits< zDecimalPlaces_type, char > zDecimalPlaces_traits;

      const zDecimalPlaces_optional&
      zDecimalPlaces () const;

      zDecimalPlaces_optional&
      zDecimalPlaces ();

      void
      zDecimalPlaces (const zDecimalPlaces_type& x);

      void
      zDecimalPlaces (const zDecimalPlaces_optional& x);

      // zSignificantFigures
      //
      typedef ::xml_schema::non_negative_integer zSignificantFigures_type;
      typedef ::xsd::cxx::tree::optional< zSignificantFigures_type > zSignificantFigures_optional;
      typedef ::xsd::cxx::tree::traits< zSignificantFigures_type, char > zSignificantFigures_traits;

      const zSignificantFigures_optional&
      zSignificantFigures () const;

      zSignificantFigures_optional&
      zSignificantFigures ();

      void
      zSignificantFigures (const zSignificantFigures_type& x);

      void
      zSignificantFigures (const zSignificantFigures_optional& x);

      // zValidity
      //
      typedef ::xsd::qif2::ValidityEnumType zValidity_type;
      typedef ::xsd::cxx::tree::optional< zValidity_type > zValidity_optional;
      typedef ::xsd::cxx::tree::traits< zValidity_type, char > zValidity_traits;

      const zValidity_optional&
      zValidity () const;

      zValidity_optional&
      zValidity ();

      void
      zValidity (const zValidity_type& x);

      void
      zValidity (const zValidity_optional& x);

      void
      zValidity (::std::auto_ptr< zValidity_type > p);

      // combinedUncertainty
      //
      typedef ::xml_schema::decimal combinedUncertainty_type;
      typedef ::xsd::cxx::tree::optional< combinedUncertainty_type > combinedUncertainty_optional;
      typedef ::xsd::cxx::tree::traits< combinedUncertainty_type, char, ::xsd::cxx::tree::schema_type::decimal > combinedUncertainty_traits;

      const combinedUncertainty_optional&
      combinedUncertainty () const;

      combinedUncertainty_optional&
      combinedUncertainty ();

      void
      combinedUncertainty (const combinedUncertainty_type& x);

      void
      combinedUncertainty (const combinedUncertainty_optional& x);

      // meanError
      //
      typedef ::xml_schema::decimal meanError_type;
      typedef ::xsd::cxx::tree::optional< meanError_type > meanError_optional;
      typedef ::xsd::cxx::tree::traits< meanError_type, char, ::xsd::cxx::tree::schema_type::decimal > meanError_traits;

      const meanError_optional&
      meanError () const;

      meanError_optional&
      meanError ();

      void
      meanError (const meanError_type& x);

      void
      meanError (const meanError_optional& x);

      // xCombinedUncertainty
      //
      typedef ::xml_schema::decimal xCombinedUncertainty_type;
      typedef ::xsd::cxx::tree::optional< xCombinedUncertainty_type > xCombinedUncertainty_optional;
      typedef ::xsd::cxx::tree::traits< xCombinedUncertainty_type, char, ::xsd::cxx::tree::schema_type::decimal > xCombinedUncertainty_traits;

      const xCombinedUncertainty_optional&
      xCombinedUncertainty () const;

      xCombinedUncertainty_optional&
      xCombinedUncertainty ();

      void
      xCombinedUncertainty (const xCombinedUncertainty_type& x);

      void
      xCombinedUncertainty (const xCombinedUncertainty_optional& x);

      // xMeanError
      //
      typedef ::xml_schema::decimal xMeanError_type;
      typedef ::xsd::cxx::tree::optional< xMeanError_type > xMeanError_optional;
      typedef ::xsd::cxx::tree::traits< xMeanError_type, char, ::xsd::cxx::tree::schema_type::decimal > xMeanError_traits;

      const xMeanError_optional&
      xMeanError () const;

      xMeanError_optional&
      xMeanError ();

      void
      xMeanError (const xMeanError_type& x);

      void
      xMeanError (const xMeanError_optional& x);

      // yCombinedUncertainty
      //
      typedef ::xml_schema::decimal yCombinedUncertainty_type;
      typedef ::xsd::cxx::tree::optional< yCombinedUncertainty_type > yCombinedUncertainty_optional;
      typedef ::xsd::cxx::tree::traits< yCombinedUncertainty_type, char, ::xsd::cxx::tree::schema_type::decimal > yCombinedUncertainty_traits;

      const yCombinedUncertainty_optional&
      yCombinedUncertainty () const;

      yCombinedUncertainty_optional&
      yCombinedUncertainty ();

      void
      yCombinedUncertainty (const yCombinedUncertainty_type& x);

      void
      yCombinedUncertainty (const yCombinedUncertainty_optional& x);

      // yMeanError
      //
      typedef ::xml_schema::decimal yMeanError_type;
      typedef ::xsd::cxx::tree::optional< yMeanError_type > yMeanError_optional;
      typedef ::xsd::cxx::tree::traits< yMeanError_type, char, ::xsd::cxx::tree::schema_type::decimal > yMeanError_traits;

      const yMeanError_optional&
      yMeanError () const;

      yMeanError_optional&
      yMeanError ();

      void
      yMeanError (const yMeanError_type& x);

      void
      yMeanError (const yMeanError_optional& x);

      // zCombinedUncertainty
      //
      typedef ::xml_schema::decimal zCombinedUncertainty_type;
      typedef ::xsd::cxx::tree::optional< zCombinedUncertainty_type > zCombinedUncertainty_optional;
      typedef ::xsd::cxx::tree::traits< zCombinedUncertainty_type, char, ::xsd::cxx::tree::schema_type::decimal > zCombinedUncertainty_traits;

      const zCombinedUncertainty_optional&
      zCombinedUncertainty () const;

      zCombinedUncertainty_optional&
      zCombinedUncertainty ();

      void
      zCombinedUncertainty (const zCombinedUncertainty_type& x);

      void
      zCombinedUncertainty (const zCombinedUncertainty_optional& x);

      // zMeanError
      //
      typedef ::xml_schema::decimal zMeanError_type;
      typedef ::xsd::cxx::tree::optional< zMeanError_type > zMeanError_optional;
      typedef ::xsd::cxx::tree::traits< zMeanError_type, char, ::xsd::cxx::tree::schema_type::decimal > zMeanError_traits;

      const zMeanError_optional&
      zMeanError () const;

      zMeanError_optional&
      zMeanError ();

      void
      zMeanError (const zMeanError_type& x);

      void
      zMeanError (const zMeanError_optional& x);

      // Constructors.
      //
      PointListActualType ();

      PointListActualType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      PointListActualType (const PointListActualType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual PointListActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointListActualType&
      operator= (const PointListActualType& x);

      virtual 
      ~PointListActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      MeasurePoint_sequence MeasurePoint_;
      linearUnit_optional linearUnit_;
      decimalPlaces_optional decimalPlaces_;
      significantFigures_optional significantFigures_;
      validity_optional validity_;
      xDecimalPlaces_optional xDecimalPlaces_;
      xSignificantFigures_optional xSignificantFigures_;
      xValidity_optional xValidity_;
      yDecimalPlaces_optional yDecimalPlaces_;
      ySignificantFigures_optional ySignificantFigures_;
      yValidity_optional yValidity_;
      zDecimalPlaces_optional zDecimalPlaces_;
      zSignificantFigures_optional zSignificantFigures_;
      zValidity_optional zValidity_;
      combinedUncertainty_optional combinedUncertainty_;
      meanError_optional meanError_;
      xCombinedUncertainty_optional xCombinedUncertainty_;
      xMeanError_optional xMeanError_;
      yCombinedUncertainty_optional yCombinedUncertainty_;
      yMeanError_optional yMeanError_;
      zCombinedUncertainty_optional zCombinedUncertainty_;
      zMeanError_optional zMeanError_;
    };

    class FeatureActualBaseType: public ::xsd::qif2::FeatureBaseType
    {
      public:
      // PointList
      //
      typedef ::xsd::qif2::PointListActualType PointList_type;
      typedef ::xsd::cxx::tree::optional< PointList_type > PointList_optional;
      typedef ::xsd::cxx::tree::traits< PointList_type, char > PointList_traits;

      const PointList_optional&
      PointList () const;

      PointList_optional&
      PointList ();

      void
      PointList (const PointList_type& x);

      void
      PointList (const PointList_optional& x);

      void
      PointList (::std::auto_ptr< PointList_type > p);

      // FeatureItemId
      //
      typedef ::xsd::qif2::QIFReferenceFullType FeatureItemId_type;
      typedef ::xsd::cxx::tree::traits< FeatureItemId_type, char > FeatureItemId_traits;

      const FeatureItemId_type&
      FeatureItemId () const;

      FeatureItemId_type&
      FeatureItemId ();

      void
      FeatureItemId (const FeatureItemId_type& x);

      void
      FeatureItemId (::std::auto_ptr< FeatureItemId_type > p);

      // ActualComponentId
      //
      typedef ::xsd::qif2::QIFReferenceFullType ActualComponentId_type;
      typedef ::xsd::cxx::tree::optional< ActualComponentId_type > ActualComponentId_optional;
      typedef ::xsd::cxx::tree::traits< ActualComponentId_type, char > ActualComponentId_traits;

      const ActualComponentId_optional&
      ActualComponentId () const;

      ActualComponentId_optional&
      ActualComponentId ();

      void
      ActualComponentId (const ActualComponentId_type& x);

      void
      ActualComponentId (const ActualComponentId_optional& x);

      void
      ActualComponentId (::std::auto_ptr< ActualComponentId_type > p);

      // ManufacturingProcessId
      //
      typedef ::xsd::qif2::QIFReferenceFullType ManufacturingProcessId_type;
      typedef ::xsd::cxx::tree::optional< ManufacturingProcessId_type > ManufacturingProcessId_optional;
      typedef ::xsd::cxx::tree::traits< ManufacturingProcessId_type, char > ManufacturingProcessId_traits;

      const ManufacturingProcessId_optional&
      ManufacturingProcessId () const;

      ManufacturingProcessId_optional&
      ManufacturingProcessId ();

      void
      ManufacturingProcessId (const ManufacturingProcessId_type& x);

      void
      ManufacturingProcessId (const ManufacturingProcessId_optional& x);

      void
      ManufacturingProcessId (::std::auto_ptr< ManufacturingProcessId_type > p);

      // MeasurementDeviceIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType MeasurementDeviceIds_type;
      typedef ::xsd::cxx::tree::optional< MeasurementDeviceIds_type > MeasurementDeviceIds_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementDeviceIds_type, char > MeasurementDeviceIds_traits;

      const MeasurementDeviceIds_optional&
      MeasurementDeviceIds () const;

      MeasurementDeviceIds_optional&
      MeasurementDeviceIds ();

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_type& x);

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_optional& x);

      void
      MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > p);

      // NotedEventIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType NotedEventIds_type;
      typedef ::xsd::cxx::tree::optional< NotedEventIds_type > NotedEventIds_optional;
      typedef ::xsd::cxx::tree::traits< NotedEventIds_type, char > NotedEventIds_traits;

      const NotedEventIds_optional&
      NotedEventIds () const;

      NotedEventIds_optional&
      NotedEventIds ();

      void
      NotedEventIds (const NotedEventIds_type& x);

      void
      NotedEventIds (const NotedEventIds_optional& x);

      void
      NotedEventIds (::std::auto_ptr< NotedEventIds_type > p);

      // Constructors.
      //
      FeatureActualBaseType (const id_type&,
                             const FeatureItemId_type&);

      FeatureActualBaseType (const id_type&,
                             ::std::auto_ptr< FeatureItemId_type >);

      FeatureActualBaseType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      FeatureActualBaseType (const FeatureActualBaseType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual FeatureActualBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FeatureActualBaseType&
      operator= (const FeatureActualBaseType& x);

      virtual 
      ~FeatureActualBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      PointList_optional PointList_;
      ::xsd::cxx::tree::one< FeatureItemId_type > FeatureItemId_;
      ActualComponentId_optional ActualComponentId_;
      ManufacturingProcessId_optional ManufacturingProcessId_;
      MeasurementDeviceIds_optional MeasurementDeviceIds_;
      NotedEventIds_optional NotedEventIds_;
    };

    class SetFeatureType: public ::xml_schema::type
    {
      public:
      // Constructors.
      //
      SetFeatureType ();

      SetFeatureType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      SetFeatureType (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      SetFeatureType (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      SetFeatureType (const SetFeatureType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual SetFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SetFeatureType ();
    };

    class MeasuredFeatureType: public ::xml_schema::type
    {
      public:
      // PointList
      //
      typedef ::xsd::qif2::PointListNominalType PointList_type;
      typedef ::xsd::cxx::tree::optional< PointList_type > PointList_optional;
      typedef ::xsd::cxx::tree::traits< PointList_type, char > PointList_traits;

      const PointList_optional&
      PointList () const;

      PointList_optional&
      PointList ();

      void
      PointList (const PointList_type& x);

      void
      PointList (const PointList_optional& x);

      void
      PointList (::std::auto_ptr< PointList_type > p);

      // Constructors.
      //
      MeasuredFeatureType ();

      MeasuredFeatureType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      MeasuredFeatureType (const MeasuredFeatureType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual MeasuredFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      MeasuredFeatureType&
      operator= (const MeasuredFeatureType& x);

      virtual 
      ~MeasuredFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      PointList_optional PointList_;
    };

    class ConstructionMethodBaseType: public ::xml_schema::type
    {
      public:
      // NominalsCalculated
      //
      typedef ::xml_schema::boolean NominalsCalculated_type;
      typedef ::xsd::cxx::tree::optional< NominalsCalculated_type > NominalsCalculated_optional;
      typedef ::xsd::cxx::tree::traits< NominalsCalculated_type, char > NominalsCalculated_traits;

      const NominalsCalculated_optional&
      NominalsCalculated () const;

      NominalsCalculated_optional&
      NominalsCalculated ();

      void
      NominalsCalculated (const NominalsCalculated_type& x);

      void
      NominalsCalculated (const NominalsCalculated_optional& x);

      // Constructors.
      //
      ConstructionMethodBaseType ();

      ConstructionMethodBaseType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      ConstructionMethodBaseType (const ConstructionMethodBaseType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual ConstructionMethodBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConstructionMethodBaseType&
      operator= (const ConstructionMethodBaseType& x);

      virtual 
      ~ConstructionMethodBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      NominalsCalculated_optional NominalsCalculated_;
    };

    class PointRangeType: public ::xml_schema::type
    {
      public:
      // Start
      //
      typedef ::xml_schema::positive_integer Start_type;
      typedef ::xsd::cxx::tree::traits< Start_type, char > Start_traits;

      const Start_type&
      Start () const;

      Start_type&
      Start ();

      void
      Start (const Start_type& x);

      // Stop
      //
      typedef ::xml_schema::positive_integer Stop_type;
      typedef ::xsd::cxx::tree::traits< Stop_type, char > Stop_traits;

      const Stop_type&
      Stop () const;

      Stop_type&
      Stop ();

      void
      Stop (const Stop_type& x);

      // Constructors.
      //
      PointRangeType (const Start_type&,
                      const Stop_type&);

      PointRangeType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      PointRangeType (const PointRangeType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual PointRangeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointRangeType&
      operator= (const PointRangeType& x);

      virtual 
      ~PointRangeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Start_type > Start_;
      ::xsd::cxx::tree::one< Stop_type > Stop_;
    };

    class PointIndexType: public ::xml_schema::type
    {
      public:
      // Single
      //
      typedef ::xml_schema::positive_integer Single_type;
      typedef ::xsd::cxx::tree::optional< Single_type > Single_optional;
      typedef ::xsd::cxx::tree::traits< Single_type, char > Single_traits;

      const Single_optional&
      Single () const;

      Single_optional&
      Single ();

      void
      Single (const Single_type& x);

      void
      Single (const Single_optional& x);

      // Range
      //
      typedef ::xsd::qif2::PointRangeType Range_type;
      typedef ::xsd::cxx::tree::optional< Range_type > Range_optional;
      typedef ::xsd::cxx::tree::traits< Range_type, char > Range_traits;

      const Range_optional&
      Range () const;

      Range_optional&
      Range ();

      void
      Range (const Range_type& x);

      void
      Range (const Range_optional& x);

      void
      Range (::std::auto_ptr< Range_type > p);

      // All
      //
      typedef ::xml_schema::token All_type;
      typedef ::xsd::cxx::tree::optional< All_type > All_optional;
      typedef ::xsd::cxx::tree::traits< All_type, char > All_traits;

      const All_optional&
      All () const;

      All_optional&
      All ();

      void
      All (const All_type& x);

      void
      All (const All_optional& x);

      void
      All (::std::auto_ptr< All_type > p);

      static const All_type&
      All_default_value ();

      // Constructors.
      //
      PointIndexType ();

      PointIndexType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      PointIndexType (const PointIndexType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual PointIndexType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointIndexType&
      operator= (const PointIndexType& x);

      virtual 
      ~PointIndexType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Single_optional Single_;
      Range_optional Range_;
      All_optional All_;
      static const All_type All_default_value_;
    };

    class BaseFeaturePointSetType: public ::xml_schema::type
    {
      public:
      // FeatureItemId
      //
      typedef ::xsd::qif2::QIFReferenceFullType FeatureItemId_type;
      typedef ::xsd::cxx::tree::traits< FeatureItemId_type, char > FeatureItemId_traits;

      const FeatureItemId_type&
      FeatureItemId () const;

      FeatureItemId_type&
      FeatureItemId ();

      void
      FeatureItemId (const FeatureItemId_type& x);

      void
      FeatureItemId (::std::auto_ptr< FeatureItemId_type > p);

      // PointIndex
      //
      typedef ::xsd::qif2::PointIndexType PointIndex_type;
      typedef ::xsd::cxx::tree::traits< PointIndex_type, char > PointIndex_traits;

      const PointIndex_type&
      PointIndex () const;

      PointIndex_type&
      PointIndex ();

      void
      PointIndex (const PointIndex_type& x);

      void
      PointIndex (::std::auto_ptr< PointIndex_type > p);

      // ReferencedComponent
      //
      typedef ::xsd::qif2::ReferencedComponentEnumType ReferencedComponent_type;
      typedef ::xsd::cxx::tree::traits< ReferencedComponent_type, char > ReferencedComponent_traits;

      const ReferencedComponent_type&
      ReferencedComponent () const;

      ReferencedComponent_type&
      ReferencedComponent ();

      void
      ReferencedComponent (const ReferencedComponent_type& x);

      void
      ReferencedComponent (::std::auto_ptr< ReferencedComponent_type > p);

      // SequenceNumber
      //
      typedef ::xml_schema::positive_integer SequenceNumber_type;
      typedef ::xsd::cxx::tree::traits< SequenceNumber_type, char > SequenceNumber_traits;

      const SequenceNumber_type&
      SequenceNumber () const;

      SequenceNumber_type&
      SequenceNumber ();

      void
      SequenceNumber (const SequenceNumber_type& x);

      // Constructors.
      //
      BaseFeaturePointSetType (const FeatureItemId_type&,
                               const PointIndex_type&,
                               const ReferencedComponent_type&,
                               const SequenceNumber_type&);

      BaseFeaturePointSetType (::std::auto_ptr< FeatureItemId_type >,
                               ::std::auto_ptr< PointIndex_type >,
                               const ReferencedComponent_type&,
                               const SequenceNumber_type&);

      BaseFeaturePointSetType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      BaseFeaturePointSetType (const BaseFeaturePointSetType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual BaseFeaturePointSetType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      BaseFeaturePointSetType&
      operator= (const BaseFeaturePointSetType& x);

      virtual 
      ~BaseFeaturePointSetType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< FeatureItemId_type > FeatureItemId_;
      ::xsd::cxx::tree::one< PointIndex_type > PointIndex_;
      ::xsd::cxx::tree::one< ReferencedComponent_type > ReferencedComponent_;
      ::xsd::cxx::tree::one< SequenceNumber_type > SequenceNumber_;
    };

    class BaseFeaturePointListType: public ::xml_schema::type
    {
      public:
      // BaseFeaturePointSet
      //
      typedef ::xsd::qif2::BaseFeaturePointSetType BaseFeaturePointSet_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeaturePointSet_type > BaseFeaturePointSet_sequence;
      typedef BaseFeaturePointSet_sequence::iterator BaseFeaturePointSet_iterator;
      typedef BaseFeaturePointSet_sequence::const_iterator BaseFeaturePointSet_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointSet_type, char > BaseFeaturePointSet_traits;

      const BaseFeaturePointSet_sequence&
      BaseFeaturePointSet () const;

      BaseFeaturePointSet_sequence&
      BaseFeaturePointSet ();

      void
      BaseFeaturePointSet (const BaseFeaturePointSet_sequence& s);

      // Constructors.
      //
      BaseFeaturePointListType ();

      BaseFeaturePointListType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      BaseFeaturePointListType (const BaseFeaturePointListType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual BaseFeaturePointListType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      BaseFeaturePointListType&
      operator= (const BaseFeaturePointListType& x);

      virtual 
      ~BaseFeaturePointListType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeaturePointSet_sequence BaseFeaturePointSet_;
    };

    class TransformationReferenceType: public ::xml_schema::type
    {
      public:
      // ReferencedComponent
      //
      typedef ::xsd::qif2::ReferencedComponentEnumType ReferencedComponent_type;
      typedef ::xsd::cxx::tree::traits< ReferencedComponent_type, char > ReferencedComponent_traits;

      const ReferencedComponent_type&
      ReferencedComponent () const;

      ReferencedComponent_type&
      ReferencedComponent ();

      void
      ReferencedComponent (const ReferencedComponent_type& x);

      void
      ReferencedComponent (::std::auto_ptr< ReferencedComponent_type > p);

      // CoordinateSystemId
      //
      typedef ::xsd::qif2::QIFReferenceFullType CoordinateSystemId_type;
      typedef ::xsd::cxx::tree::traits< CoordinateSystemId_type, char > CoordinateSystemId_traits;

      const CoordinateSystemId_type&
      CoordinateSystemId () const;

      CoordinateSystemId_type&
      CoordinateSystemId ();

      void
      CoordinateSystemId (const CoordinateSystemId_type& x);

      void
      CoordinateSystemId (::std::auto_ptr< CoordinateSystemId_type > p);

      // SequenceNumber
      //
      typedef ::xml_schema::positive_integer SequenceNumber_type;
      typedef ::xsd::cxx::tree::traits< SequenceNumber_type, char > SequenceNumber_traits;

      const SequenceNumber_type&
      SequenceNumber () const;

      SequenceNumber_type&
      SequenceNumber ();

      void
      SequenceNumber (const SequenceNumber_type& x);

      // Constructors.
      //
      TransformationReferenceType (const ReferencedComponent_type&,
                                   const CoordinateSystemId_type&,
                                   const SequenceNumber_type&);

      TransformationReferenceType (const ReferencedComponent_type&,
                                   ::std::auto_ptr< CoordinateSystemId_type >,
                                   const SequenceNumber_type&);

      TransformationReferenceType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      TransformationReferenceType (const TransformationReferenceType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual TransformationReferenceType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TransformationReferenceType&
      operator= (const TransformationReferenceType& x);

      virtual 
      ~TransformationReferenceType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ReferencedComponent_type > ReferencedComponent_;
      ::xsd::cxx::tree::one< CoordinateSystemId_type > CoordinateSystemId_;
      ::xsd::cxx::tree::one< SequenceNumber_type > SequenceNumber_;
    };

    class ArcConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::ArcBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::ArcRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Projection
      //
      typedef ::xsd::qif2::ArcProjectionType Projection_type;
      typedef ::xsd::cxx::tree::optional< Projection_type > Projection_optional;
      typedef ::xsd::cxx::tree::traits< Projection_type, char > Projection_traits;

      const Projection_optional&
      Projection () const;

      Projection_optional&
      Projection ();

      void
      Projection (const Projection_type& x);

      void
      Projection (const Projection_optional& x);

      void
      Projection (::std::auto_ptr< Projection_type > p);

      // Copy
      //
      typedef ::xsd::qif2::ArcCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::ArcCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // Transform
      //
      typedef ::xsd::qif2::ArcTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // FromScan
      //
      typedef ::xsd::qif2::ArcFromScanType FromScan_type;
      typedef ::xsd::cxx::tree::optional< FromScan_type > FromScan_optional;
      typedef ::xsd::cxx::tree::traits< FromScan_type, char > FromScan_traits;

      const FromScan_optional&
      FromScan () const;

      FromScan_optional&
      FromScan ();

      void
      FromScan (const FromScan_type& x);

      void
      FromScan (const FromScan_optional& x);

      void
      FromScan (::std::auto_ptr< FromScan_type > p);

      // Extract
      //
      typedef ::xsd::qif2::ArcExtractType Extract_type;
      typedef ::xsd::cxx::tree::optional< Extract_type > Extract_optional;
      typedef ::xsd::cxx::tree::traits< Extract_type, char > Extract_traits;

      const Extract_optional&
      Extract () const;

      Extract_optional&
      Extract ();

      void
      Extract (const Extract_type& x);

      void
      Extract (const Extract_optional& x);

      void
      Extract (::std::auto_ptr< Extract_type > p);

      // Constructors.
      //
      ArcConstructionMethodType ();

      ArcConstructionMethodType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      ArcConstructionMethodType (const ArcConstructionMethodType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual ArcConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ArcConstructionMethodType&
      operator= (const ArcConstructionMethodType& x);

      virtual 
      ~ArcConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Projection_optional Projection_;
      Copy_optional Copy_;
      Cast_optional Cast_;
      Transform_optional Transform_;
      FromScan_optional FromScan_;
      Extract_optional Extract_;
    };

    class ArcBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      ArcBestFitType ();

      ArcBestFitType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      ArcBestFitType (const ArcBestFitType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual ArcBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ArcBestFitType&
      operator= (const ArcBestFitType& x);

      virtual 
      ~ArcBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class ArcRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      ArcRecompType (const BaseFeaturePointList_type&);

      ArcRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      ArcRecompType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      ArcRecompType (const ArcRecompType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual ArcRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ArcRecompType&
      operator= (const ArcRecompType& x);

      virtual 
      ~ArcRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class ArcProjectionType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // ProjectionArc
      //
      typedef ::xsd::qif2::BaseFeatureType ProjectionArc_type;
      typedef ::xsd::cxx::tree::traits< ProjectionArc_type, char > ProjectionArc_traits;

      const ProjectionArc_type&
      ProjectionArc () const;

      ProjectionArc_type&
      ProjectionArc ();

      void
      ProjectionArc (const ProjectionArc_type& x);

      void
      ProjectionArc (::std::auto_ptr< ProjectionArc_type > p);

      // ProjectionPlane
      //
      typedef ::xsd::qif2::BaseFeatureType ProjectionPlane_type;
      typedef ::xsd::cxx::tree::traits< ProjectionPlane_type, char > ProjectionPlane_traits;

      const ProjectionPlane_type&
      ProjectionPlane () const;

      ProjectionPlane_type&
      ProjectionPlane ();

      void
      ProjectionPlane (const ProjectionPlane_type& x);

      void
      ProjectionPlane (::std::auto_ptr< ProjectionPlane_type > p);

      // Constructors.
      //
      ArcProjectionType (const ProjectionArc_type&,
                         const ProjectionPlane_type&);

      ArcProjectionType (::std::auto_ptr< ProjectionArc_type >,
                         ::std::auto_ptr< ProjectionPlane_type >);

      ArcProjectionType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      ArcProjectionType (const ArcProjectionType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual ArcProjectionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ArcProjectionType&
      operator= (const ArcProjectionType& x);

      virtual 
      ~ArcProjectionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ProjectionArc_type > ProjectionArc_;
      ::xsd::cxx::tree::one< ProjectionPlane_type > ProjectionPlane_;
    };

    class ArcCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseArc
      //
      typedef ::xsd::qif2::BaseFeatureType BaseArc_type;
      typedef ::xsd::cxx::tree::traits< BaseArc_type, char > BaseArc_traits;

      const BaseArc_type&
      BaseArc () const;

      BaseArc_type&
      BaseArc ();

      void
      BaseArc (const BaseArc_type& x);

      void
      BaseArc (::std::auto_ptr< BaseArc_type > p);

      // Constructors.
      //
      ArcCopyType (const BaseArc_type&);

      ArcCopyType (::std::auto_ptr< BaseArc_type >);

      ArcCopyType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      ArcCopyType (const ArcCopyType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual ArcCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ArcCopyType&
      operator= (const ArcCopyType& x);

      virtual 
      ~ArcCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseArc_type > BaseArc_;
    };

    class ArcCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      ArcCastType (const BaseFeature_type&);

      ArcCastType (::std::auto_ptr< BaseFeature_type >);

      ArcCastType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      ArcCastType (const ArcCastType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual ArcCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ArcCastType&
      operator= (const ArcCastType& x);

      virtual 
      ~ArcCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class ArcTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseArc
      //
      typedef ::xsd::qif2::BaseFeatureType BaseArc_type;
      typedef ::xsd::cxx::tree::traits< BaseArc_type, char > BaseArc_traits;

      const BaseArc_type&
      BaseArc () const;

      BaseArc_type&
      BaseArc ();

      void
      BaseArc (const BaseArc_type& x);

      void
      BaseArc (::std::auto_ptr< BaseArc_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      ArcTransformType (const BaseArc_type&,
                        const Transformation_type&);

      ArcTransformType (::std::auto_ptr< BaseArc_type >,
                        ::std::auto_ptr< Transformation_type >);

      ArcTransformType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      ArcTransformType (const ArcTransformType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual ArcTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ArcTransformType&
      operator= (const ArcTransformType& x);

      virtual 
      ~ArcTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseArc_type > BaseArc_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class ArcFromScanType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // SurfaceFeature
      //
      typedef ::xsd::qif2::BaseFeatureType SurfaceFeature_type;
      typedef ::xsd::cxx::tree::traits< SurfaceFeature_type, char > SurfaceFeature_traits;

      const SurfaceFeature_type&
      SurfaceFeature () const;

      SurfaceFeature_type&
      SurfaceFeature ();

      void
      SurfaceFeature (const SurfaceFeature_type& x);

      void
      SurfaceFeature (::std::auto_ptr< SurfaceFeature_type > p);

      // SearchRadius
      //
      typedef ::xsd::qif2::LinearValueType SearchRadius_type;
      typedef ::xsd::cxx::tree::traits< SearchRadius_type, char > SearchRadius_traits;

      const SearchRadius_type&
      SearchRadius () const;

      SearchRadius_type&
      SearchRadius ();

      void
      SearchRadius (const SearchRadius_type& x);

      void
      SearchRadius (::std::auto_ptr< SearchRadius_type > p);

      // Depth
      //
      typedef ::xsd::qif2::LinearValueType Depth_type;
      typedef ::xsd::cxx::tree::traits< Depth_type, char > Depth_traits;

      const Depth_type&
      Depth () const;

      Depth_type&
      Depth ();

      void
      Depth (const Depth_type& x);

      void
      Depth (::std::auto_ptr< Depth_type > p);

      // Constructors.
      //
      ArcFromScanType (const SurfaceFeature_type&,
                       const SearchRadius_type&,
                       const Depth_type&);

      ArcFromScanType (::std::auto_ptr< SurfaceFeature_type >,
                       ::std::auto_ptr< SearchRadius_type >,
                       ::std::auto_ptr< Depth_type >);

      ArcFromScanType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      ArcFromScanType (const ArcFromScanType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual ArcFromScanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ArcFromScanType&
      operator= (const ArcFromScanType& x);

      virtual 
      ~ArcFromScanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SurfaceFeature_type > SurfaceFeature_;
      ::xsd::cxx::tree::one< SearchRadius_type > SearchRadius_;
      ::xsd::cxx::tree::one< Depth_type > Depth_;
    };

    class ArcExtractType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // CurveFeature
      //
      typedef ::xsd::qif2::BaseFeatureType CurveFeature_type;
      typedef ::xsd::cxx::tree::traits< CurveFeature_type, char > CurveFeature_traits;

      const CurveFeature_type&
      CurveFeature () const;

      CurveFeature_type&
      CurveFeature ();

      void
      CurveFeature (const CurveFeature_type& x);

      void
      CurveFeature (::std::auto_ptr< CurveFeature_type > p);

      // Constructors.
      //
      ArcExtractType (const CurveFeature_type&);

      ArcExtractType (::std::auto_ptr< CurveFeature_type >);

      ArcExtractType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      ArcExtractType (const ArcExtractType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual ArcExtractType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ArcExtractType&
      operator= (const ArcExtractType& x);

      virtual 
      ~ArcExtractType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< CurveFeature_type > CurveFeature_;
    };

    class ArcCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::ArcConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      ArcCheckedType ();

      ArcCheckedType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      ArcCheckedType (const ArcCheckedType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual ArcCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ArcCheckedType&
      operator= (const ArcCheckedType& x);

      virtual 
      ~ArcCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class ArcCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::ArcCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      ArcCheckedFeatureType ();

      ArcCheckedFeatureType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      ArcCheckedFeatureType (const ArcCheckedFeatureType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual ArcCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ArcCheckedFeatureType&
      operator= (const ArcCheckedFeatureType& x);

      virtual 
      ~ArcCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class ArcActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::ArcCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      ArcActualDeterminationType ();

      ArcActualDeterminationType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      ArcActualDeterminationType (const ArcActualDeterminationType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual ArcActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ArcActualDeterminationType&
      operator= (const ArcActualDeterminationType& x);

      virtual 
      ~ArcActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class ArcFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::ArcActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::NonFeatureOfSizeSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      ArcFeatureItemType (const id_type&,
                          const FeatureName_type&,
                          const DeterminationMode_type&);

      ArcFeatureItemType (const id_type&,
                          const FeatureName_type&,
                          ::std::auto_ptr< DeterminationMode_type >);

      ArcFeatureItemType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      ArcFeatureItemType (const ArcFeatureItemType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual ArcFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ArcFeatureItemType&
      operator= (const ArcFeatureItemType& x);

      virtual 
      ~ArcFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class ArcFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // InternalExternal
      //
      typedef ::xsd::qif2::InternalExternalEnumType InternalExternal_type;
      typedef ::xsd::cxx::tree::traits< InternalExternal_type, char > InternalExternal_traits;

      const InternalExternal_type&
      InternalExternal () const;

      InternalExternal_type&
      InternalExternal ();

      void
      InternalExternal (const InternalExternal_type& x);

      void
      InternalExternal (::std::auto_ptr< InternalExternal_type > p);

      // Radius
      //
      typedef ::xsd::qif2::LinearValueType Radius_type;
      typedef ::xsd::cxx::tree::traits< Radius_type, char > Radius_traits;

      const Radius_type&
      Radius () const;

      Radius_type&
      Radius ();

      void
      Radius (const Radius_type& x);

      void
      Radius (::std::auto_ptr< Radius_type > p);

      // Constructors.
      //
      ArcFeatureDefinitionType (const id_type&,
                                const InternalExternal_type&,
                                const Radius_type&);

      ArcFeatureDefinitionType (const id_type&,
                                const InternalExternal_type&,
                                ::std::auto_ptr< Radius_type >);

      ArcFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      ArcFeatureDefinitionType (const ArcFeatureDefinitionType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual ArcFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ArcFeatureDefinitionType&
      operator= (const ArcFeatureDefinitionType& x);

      virtual 
      ~ArcFeatureDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< InternalExternal_type > InternalExternal_;
      ::xsd::cxx::tree::one< Radius_type > Radius_;
    };

    class ArcFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::PointType Location_type;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_type&
      Location () const;

      Location_type&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // Sweep
      //
      typedef ::xsd::qif2::SweepType Sweep_type;
      typedef ::xsd::cxx::tree::traits< Sweep_type, char > Sweep_traits;

      const Sweep_type&
      Sweep () const;

      Sweep_type&
      Sweep ();

      void
      Sweep (const Sweep_type& x);

      void
      Sweep (::std::auto_ptr< Sweep_type > p);

      // Normal
      //
      typedef ::xsd::qif2::UnitVectorType Normal_type;
      typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

      const Normal_type&
      Normal () const;

      Normal_type&
      Normal ();

      void
      Normal (const Normal_type& x);

      void
      Normal (::std::auto_ptr< Normal_type > p);

      // Constructors.
      //
      ArcFeatureNominalType (const id_type&,
                             const FeatureDefinitionId_type&,
                             const Location_type&,
                             const Sweep_type&,
                             const Normal_type&);

      ArcFeatureNominalType (const id_type&,
                             const FeatureDefinitionId_type&,
                             ::std::auto_ptr< Location_type >,
                             ::std::auto_ptr< Sweep_type >,
                             ::std::auto_ptr< Normal_type >);

      ArcFeatureNominalType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      ArcFeatureNominalType (const ArcFeatureNominalType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual ArcFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ArcFeatureNominalType&
      operator= (const ArcFeatureNominalType& x);

      virtual 
      ~ArcFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Location_type > Location_;
      ::xsd::cxx::tree::one< Sweep_type > Sweep_;
      ::xsd::cxx::tree::one< Normal_type > Normal_;
    };

    class ArcFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::ActualPointType Location_type;
      typedef ::xsd::cxx::tree::optional< Location_type > Location_optional;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_optional&
      Location () const;

      Location_optional&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (const Location_optional& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // Normal
      //
      typedef ::xsd::qif2::ActualUnitVectorType Normal_type;
      typedef ::xsd::cxx::tree::optional< Normal_type > Normal_optional;
      typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

      const Normal_optional&
      Normal () const;

      Normal_optional&
      Normal ();

      void
      Normal (const Normal_type& x);

      void
      Normal (const Normal_optional& x);

      void
      Normal (::std::auto_ptr< Normal_type > p);

      // Radius
      //
      typedef ::xsd::qif2::ActualLinearValueType Radius_type;
      typedef ::xsd::cxx::tree::optional< Radius_type > Radius_optional;
      typedef ::xsd::cxx::tree::traits< Radius_type, char > Radius_traits;

      const Radius_optional&
      Radius () const;

      Radius_optional&
      Radius ();

      void
      Radius (const Radius_type& x);

      void
      Radius (const Radius_optional& x);

      void
      Radius (::std::auto_ptr< Radius_type > p);

      // RadiusMin
      //
      typedef ::xsd::qif2::ActualLinearValueType RadiusMin_type;
      typedef ::xsd::cxx::tree::optional< RadiusMin_type > RadiusMin_optional;
      typedef ::xsd::cxx::tree::traits< RadiusMin_type, char > RadiusMin_traits;

      const RadiusMin_optional&
      RadiusMin () const;

      RadiusMin_optional&
      RadiusMin ();

      void
      RadiusMin (const RadiusMin_type& x);

      void
      RadiusMin (const RadiusMin_optional& x);

      void
      RadiusMin (::std::auto_ptr< RadiusMin_type > p);

      // RadiusMax
      //
      typedef ::xsd::qif2::ActualLinearValueType RadiusMax_type;
      typedef ::xsd::cxx::tree::optional< RadiusMax_type > RadiusMax_optional;
      typedef ::xsd::cxx::tree::traits< RadiusMax_type, char > RadiusMax_traits;

      const RadiusMax_optional&
      RadiusMax () const;

      RadiusMax_optional&
      RadiusMax ();

      void
      RadiusMax (const RadiusMax_type& x);

      void
      RadiusMax (const RadiusMax_optional& x);

      void
      RadiusMax (::std::auto_ptr< RadiusMax_type > p);

      // Sweep
      //
      typedef ::xsd::qif2::SweepType Sweep_type;
      typedef ::xsd::cxx::tree::optional< Sweep_type > Sweep_optional;
      typedef ::xsd::cxx::tree::traits< Sweep_type, char > Sweep_traits;

      const Sweep_optional&
      Sweep () const;

      Sweep_optional&
      Sweep ();

      void
      Sweep (const Sweep_type& x);

      void
      Sweep (const Sweep_optional& x);

      void
      Sweep (::std::auto_ptr< Sweep_type > p);

      // Form
      //
      typedef ::xsd::qif2::ActualLinearValueType Form_type;
      typedef ::xsd::cxx::tree::optional< Form_type > Form_optional;
      typedef ::xsd::cxx::tree::traits< Form_type, char > Form_traits;

      const Form_optional&
      Form () const;

      Form_optional&
      Form ();

      void
      Form (const Form_type& x);

      void
      Form (const Form_optional& x);

      void
      Form (::std::auto_ptr< Form_type > p);

      // Constructors.
      //
      ArcFeatureActualType (const id_type&,
                            const FeatureItemId_type&);

      ArcFeatureActualType (const id_type&,
                            ::std::auto_ptr< FeatureItemId_type >);

      ArcFeatureActualType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      ArcFeatureActualType (const ArcFeatureActualType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual ArcFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ArcFeatureActualType&
      operator= (const ArcFeatureActualType& x);

      virtual 
      ~ArcFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Location_optional Location_;
      Normal_optional Normal_;
      Radius_optional Radius_;
      RadiusMin_optional RadiusMin_;
      RadiusMax_optional RadiusMax_;
      Sweep_optional Sweep_;
      Form_optional Form_;
    };

    class CircleConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::CircleBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::CircleRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Intersection
      //
      typedef ::xsd::qif2::CircleIntersectionType Intersection_type;
      typedef ::xsd::cxx::tree::optional< Intersection_type > Intersection_optional;
      typedef ::xsd::cxx::tree::traits< Intersection_type, char > Intersection_traits;

      const Intersection_optional&
      Intersection () const;

      Intersection_optional&
      Intersection ();

      void
      Intersection (const Intersection_type& x);

      void
      Intersection (const Intersection_optional& x);

      void
      Intersection (::std::auto_ptr< Intersection_type > p);

      // Projection
      //
      typedef ::xsd::qif2::CircleProjectionType Projection_type;
      typedef ::xsd::cxx::tree::optional< Projection_type > Projection_optional;
      typedef ::xsd::cxx::tree::traits< Projection_type, char > Projection_traits;

      const Projection_optional&
      Projection () const;

      Projection_optional&
      Projection ();

      void
      Projection (const Projection_type& x);

      void
      Projection (const Projection_optional& x);

      void
      Projection (::std::auto_ptr< Projection_type > p);

      // Copy
      //
      typedef ::xsd::qif2::CircleCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::CircleCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // Tangent
      //
      typedef ::xsd::qif2::CircleTangentType Tangent_type;
      typedef ::xsd::cxx::tree::optional< Tangent_type > Tangent_optional;
      typedef ::xsd::cxx::tree::traits< Tangent_type, char > Tangent_traits;

      const Tangent_optional&
      Tangent () const;

      Tangent_optional&
      Tangent ();

      void
      Tangent (const Tangent_type& x);

      void
      Tangent (const Tangent_optional& x);

      void
      Tangent (::std::auto_ptr< Tangent_type > p);

      // TangentThrough
      //
      typedef ::xsd::qif2::CircleTangentThroughType TangentThrough_type;
      typedef ::xsd::cxx::tree::optional< TangentThrough_type > TangentThrough_optional;
      typedef ::xsd::cxx::tree::traits< TangentThrough_type, char > TangentThrough_traits;

      const TangentThrough_optional&
      TangentThrough () const;

      TangentThrough_optional&
      TangentThrough ();

      void
      TangentThrough (const TangentThrough_type& x);

      void
      TangentThrough (const TangentThrough_optional& x);

      void
      TangentThrough (::std::auto_ptr< TangentThrough_type > p);

      // Transform
      //
      typedef ::xsd::qif2::CircleTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // FromCone
      //
      typedef ::xsd::qif2::CircleFromConeType FromCone_type;
      typedef ::xsd::cxx::tree::optional< FromCone_type > FromCone_optional;
      typedef ::xsd::cxx::tree::traits< FromCone_type, char > FromCone_traits;

      const FromCone_optional&
      FromCone () const;

      FromCone_optional&
      FromCone ();

      void
      FromCone (const FromCone_type& x);

      void
      FromCone (const FromCone_optional& x);

      void
      FromCone (::std::auto_ptr< FromCone_type > p);

      // FromScan
      //
      typedef ::xsd::qif2::CircleFromScanType FromScan_type;
      typedef ::xsd::cxx::tree::optional< FromScan_type > FromScan_optional;
      typedef ::xsd::cxx::tree::traits< FromScan_type, char > FromScan_traits;

      const FromScan_optional&
      FromScan () const;

      FromScan_optional&
      FromScan ();

      void
      FromScan (const FromScan_type& x);

      void
      FromScan (const FromScan_optional& x);

      void
      FromScan (::std::auto_ptr< FromScan_type > p);

      // Constructors.
      //
      CircleConstructionMethodType ();

      CircleConstructionMethodType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      CircleConstructionMethodType (const CircleConstructionMethodType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual CircleConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircleConstructionMethodType&
      operator= (const CircleConstructionMethodType& x);

      virtual 
      ~CircleConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Intersection_optional Intersection_;
      Projection_optional Projection_;
      Copy_optional Copy_;
      Cast_optional Cast_;
      Tangent_optional Tangent_;
      TangentThrough_optional TangentThrough_;
      Transform_optional Transform_;
      FromCone_optional FromCone_;
      FromScan_optional FromScan_;
    };

    class CircleBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      CircleBestFitType ();

      CircleBestFitType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      CircleBestFitType (const CircleBestFitType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual CircleBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircleBestFitType&
      operator= (const CircleBestFitType& x);

      virtual 
      ~CircleBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class CircleRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      CircleRecompType (const BaseFeaturePointList_type&);

      CircleRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      CircleRecompType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      CircleRecompType (const CircleRecompType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual CircleRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircleRecompType&
      operator= (const CircleRecompType& x);

      virtual 
      ~CircleRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class CircleIntersectionType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // IntersectionPlane
      //
      typedef ::xsd::qif2::BaseFeatureType IntersectionPlane_type;
      typedef ::xsd::cxx::tree::traits< IntersectionPlane_type, char > IntersectionPlane_traits;

      const IntersectionPlane_type&
      IntersectionPlane () const;

      IntersectionPlane_type&
      IntersectionPlane ();

      void
      IntersectionPlane (const IntersectionPlane_type& x);

      void
      IntersectionPlane (::std::auto_ptr< IntersectionPlane_type > p);

      // IntersectionFeature
      //
      typedef ::xsd::qif2::BaseFeatureType IntersectionFeature_type;
      typedef ::xsd::cxx::tree::traits< IntersectionFeature_type, char > IntersectionFeature_traits;

      const IntersectionFeature_type&
      IntersectionFeature () const;

      IntersectionFeature_type&
      IntersectionFeature ();

      void
      IntersectionFeature (const IntersectionFeature_type& x);

      void
      IntersectionFeature (::std::auto_ptr< IntersectionFeature_type > p);

      // Constructors.
      //
      CircleIntersectionType (const IntersectionPlane_type&,
                              const IntersectionFeature_type&);

      CircleIntersectionType (::std::auto_ptr< IntersectionPlane_type >,
                              ::std::auto_ptr< IntersectionFeature_type >);

      CircleIntersectionType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      CircleIntersectionType (const CircleIntersectionType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual CircleIntersectionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircleIntersectionType&
      operator= (const CircleIntersectionType& x);

      virtual 
      ~CircleIntersectionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< IntersectionPlane_type > IntersectionPlane_;
      ::xsd::cxx::tree::one< IntersectionFeature_type > IntersectionFeature_;
    };

    class CircleProjectionType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // ProjectionCircle
      //
      typedef ::xsd::qif2::BaseFeatureType ProjectionCircle_type;
      typedef ::xsd::cxx::tree::traits< ProjectionCircle_type, char > ProjectionCircle_traits;

      const ProjectionCircle_type&
      ProjectionCircle () const;

      ProjectionCircle_type&
      ProjectionCircle ();

      void
      ProjectionCircle (const ProjectionCircle_type& x);

      void
      ProjectionCircle (::std::auto_ptr< ProjectionCircle_type > p);

      // ProjectionPlane
      //
      typedef ::xsd::qif2::BaseFeatureType ProjectionPlane_type;
      typedef ::xsd::cxx::tree::traits< ProjectionPlane_type, char > ProjectionPlane_traits;

      const ProjectionPlane_type&
      ProjectionPlane () const;

      ProjectionPlane_type&
      ProjectionPlane ();

      void
      ProjectionPlane (const ProjectionPlane_type& x);

      void
      ProjectionPlane (::std::auto_ptr< ProjectionPlane_type > p);

      // Constructors.
      //
      CircleProjectionType (const ProjectionCircle_type&,
                            const ProjectionPlane_type&);

      CircleProjectionType (::std::auto_ptr< ProjectionCircle_type >,
                            ::std::auto_ptr< ProjectionPlane_type >);

      CircleProjectionType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      CircleProjectionType (const CircleProjectionType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual CircleProjectionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircleProjectionType&
      operator= (const CircleProjectionType& x);

      virtual 
      ~CircleProjectionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ProjectionCircle_type > ProjectionCircle_;
      ::xsd::cxx::tree::one< ProjectionPlane_type > ProjectionPlane_;
    };

    class CircleCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseCircle
      //
      typedef ::xsd::qif2::BaseFeatureType BaseCircle_type;
      typedef ::xsd::cxx::tree::traits< BaseCircle_type, char > BaseCircle_traits;

      const BaseCircle_type&
      BaseCircle () const;

      BaseCircle_type&
      BaseCircle ();

      void
      BaseCircle (const BaseCircle_type& x);

      void
      BaseCircle (::std::auto_ptr< BaseCircle_type > p);

      // Constructors.
      //
      CircleCopyType (const BaseCircle_type&);

      CircleCopyType (::std::auto_ptr< BaseCircle_type >);

      CircleCopyType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      CircleCopyType (const CircleCopyType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual CircleCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircleCopyType&
      operator= (const CircleCopyType& x);

      virtual 
      ~CircleCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseCircle_type > BaseCircle_;
    };

    class CircleCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      CircleCastType (const BaseFeature_type&);

      CircleCastType (::std::auto_ptr< BaseFeature_type >);

      CircleCastType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      CircleCastType (const CircleCastType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual CircleCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircleCastType&
      operator= (const CircleCastType& x);

      virtual 
      ~CircleCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class CircleTangentType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // TangentFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType TangentFeature_type;
      typedef ::xsd::cxx::tree::sequence< TangentFeature_type > TangentFeature_sequence;
      typedef TangentFeature_sequence::iterator TangentFeature_iterator;
      typedef TangentFeature_sequence::const_iterator TangentFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< TangentFeature_type, char > TangentFeature_traits;

      const TangentFeature_sequence&
      TangentFeature () const;

      TangentFeature_sequence&
      TangentFeature ();

      void
      TangentFeature (const TangentFeature_sequence& s);

      // Constructors.
      //
      CircleTangentType ();

      CircleTangentType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      CircleTangentType (const CircleTangentType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual CircleTangentType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircleTangentType&
      operator= (const CircleTangentType& x);

      virtual 
      ~CircleTangentType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      TangentFeature_sequence TangentFeature_;
    };

    class CircleTangentThroughType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // TangentFeature
      //
      typedef ::xsd::qif2::BaseFeatureType TangentFeature_type;
      typedef ::xsd::cxx::tree::traits< TangentFeature_type, char > TangentFeature_traits;

      const TangentFeature_type&
      TangentFeature () const;

      TangentFeature_type&
      TangentFeature ();

      void
      TangentFeature (const TangentFeature_type& x);

      void
      TangentFeature (::std::auto_ptr< TangentFeature_type > p);

      // PointFeature
      //
      typedef ::xsd::qif2::BaseFeatureType PointFeature_type;
      typedef ::xsd::cxx::tree::traits< PointFeature_type, char > PointFeature_traits;

      const PointFeature_type&
      PointFeature () const;

      PointFeature_type&
      PointFeature ();

      void
      PointFeature (const PointFeature_type& x);

      void
      PointFeature (::std::auto_ptr< PointFeature_type > p);

      // Constructors.
      //
      CircleTangentThroughType (const TangentFeature_type&,
                                const PointFeature_type&);

      CircleTangentThroughType (::std::auto_ptr< TangentFeature_type >,
                                ::std::auto_ptr< PointFeature_type >);

      CircleTangentThroughType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      CircleTangentThroughType (const CircleTangentThroughType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual CircleTangentThroughType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircleTangentThroughType&
      operator= (const CircleTangentThroughType& x);

      virtual 
      ~CircleTangentThroughType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< TangentFeature_type > TangentFeature_;
      ::xsd::cxx::tree::one< PointFeature_type > PointFeature_;
    };

    class CircleTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseCircle
      //
      typedef ::xsd::qif2::BaseFeatureType BaseCircle_type;
      typedef ::xsd::cxx::tree::traits< BaseCircle_type, char > BaseCircle_traits;

      const BaseCircle_type&
      BaseCircle () const;

      BaseCircle_type&
      BaseCircle ();

      void
      BaseCircle (const BaseCircle_type& x);

      void
      BaseCircle (::std::auto_ptr< BaseCircle_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      CircleTransformType (const BaseCircle_type&,
                           const Transformation_type&);

      CircleTransformType (::std::auto_ptr< BaseCircle_type >,
                           ::std::auto_ptr< Transformation_type >);

      CircleTransformType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      CircleTransformType (const CircleTransformType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual CircleTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircleTransformType&
      operator= (const CircleTransformType& x);

      virtual 
      ~CircleTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseCircle_type > BaseCircle_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class CircleFromConeType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // Diameter
      //
      typedef ::xsd::qif2::LinearValueType Diameter_type;
      typedef ::xsd::cxx::tree::optional< Diameter_type > Diameter_optional;
      typedef ::xsd::cxx::tree::traits< Diameter_type, char > Diameter_traits;

      const Diameter_optional&
      Diameter () const;

      Diameter_optional&
      Diameter ();

      void
      Diameter (const Diameter_type& x);

      void
      Diameter (const Diameter_optional& x);

      void
      Diameter (::std::auto_ptr< Diameter_type > p);

      // Distance
      //
      typedef ::xsd::qif2::LinearValueType Distance_type;
      typedef ::xsd::cxx::tree::optional< Distance_type > Distance_optional;
      typedef ::xsd::cxx::tree::traits< Distance_type, char > Distance_traits;

      const Distance_optional&
      Distance () const;

      Distance_optional&
      Distance ();

      void
      Distance (const Distance_type& x);

      void
      Distance (const Distance_optional& x);

      void
      Distance (::std::auto_ptr< Distance_type > p);

      // Constructors.
      //
      CircleFromConeType ();

      CircleFromConeType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      CircleFromConeType (const CircleFromConeType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual CircleFromConeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircleFromConeType&
      operator= (const CircleFromConeType& x);

      virtual 
      ~CircleFromConeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Diameter_optional Diameter_;
      Distance_optional Distance_;
    };

    class CircleFromScanType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // SurfaceFeature
      //
      typedef ::xsd::qif2::BaseFeatureType SurfaceFeature_type;
      typedef ::xsd::cxx::tree::traits< SurfaceFeature_type, char > SurfaceFeature_traits;

      const SurfaceFeature_type&
      SurfaceFeature () const;

      SurfaceFeature_type&
      SurfaceFeature ();

      void
      SurfaceFeature (const SurfaceFeature_type& x);

      void
      SurfaceFeature (::std::auto_ptr< SurfaceFeature_type > p);

      // SearchRadius
      //
      typedef ::xsd::qif2::LinearValueType SearchRadius_type;
      typedef ::xsd::cxx::tree::traits< SearchRadius_type, char > SearchRadius_traits;

      const SearchRadius_type&
      SearchRadius () const;

      SearchRadius_type&
      SearchRadius ();

      void
      SearchRadius (const SearchRadius_type& x);

      void
      SearchRadius (::std::auto_ptr< SearchRadius_type > p);

      // Depth
      //
      typedef ::xsd::qif2::LinearValueType Depth_type;
      typedef ::xsd::cxx::tree::traits< Depth_type, char > Depth_traits;

      const Depth_type&
      Depth () const;

      Depth_type&
      Depth ();

      void
      Depth (const Depth_type& x);

      void
      Depth (::std::auto_ptr< Depth_type > p);

      // Constructors.
      //
      CircleFromScanType (const SurfaceFeature_type&,
                          const SearchRadius_type&,
                          const Depth_type&);

      CircleFromScanType (::std::auto_ptr< SurfaceFeature_type >,
                          ::std::auto_ptr< SearchRadius_type >,
                          ::std::auto_ptr< Depth_type >);

      CircleFromScanType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      CircleFromScanType (const CircleFromScanType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual CircleFromScanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircleFromScanType&
      operator= (const CircleFromScanType& x);

      virtual 
      ~CircleFromScanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SurfaceFeature_type > SurfaceFeature_;
      ::xsd::cxx::tree::one< SearchRadius_type > SearchRadius_;
      ::xsd::cxx::tree::one< Depth_type > Depth_;
    };

    class CircleCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::CircleConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      CircleCheckedType ();

      CircleCheckedType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      CircleCheckedType (const CircleCheckedType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual CircleCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircleCheckedType&
      operator= (const CircleCheckedType& x);

      virtual 
      ~CircleCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class CircleCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::CircleCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      CircleCheckedFeatureType ();

      CircleCheckedFeatureType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      CircleCheckedFeatureType (const CircleCheckedFeatureType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual CircleCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircleCheckedFeatureType&
      operator= (const CircleCheckedFeatureType& x);

      virtual 
      ~CircleCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class CircleActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::CircleCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      CircleActualDeterminationType ();

      CircleActualDeterminationType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      CircleActualDeterminationType (const CircleActualDeterminationType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual CircleActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircleActualDeterminationType&
      operator= (const CircleActualDeterminationType& x);

      virtual 
      ~CircleActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class CircleFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::CircleActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::FeatureOfSizeSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      CircleFeatureItemType (const id_type&,
                             const FeatureName_type&,
                             const DeterminationMode_type&);

      CircleFeatureItemType (const id_type&,
                             const FeatureName_type&,
                             ::std::auto_ptr< DeterminationMode_type >);

      CircleFeatureItemType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      CircleFeatureItemType (const CircleFeatureItemType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual CircleFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircleFeatureItemType&
      operator= (const CircleFeatureItemType& x);

      virtual 
      ~CircleFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class CircleFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // InternalExternal
      //
      typedef ::xsd::qif2::InternalExternalEnumType InternalExternal_type;
      typedef ::xsd::cxx::tree::traits< InternalExternal_type, char > InternalExternal_traits;

      const InternalExternal_type&
      InternalExternal () const;

      InternalExternal_type&
      InternalExternal ();

      void
      InternalExternal (const InternalExternal_type& x);

      void
      InternalExternal (::std::auto_ptr< InternalExternal_type > p);

      // Diameter
      //
      typedef ::xsd::qif2::LinearValueType Diameter_type;
      typedef ::xsd::cxx::tree::traits< Diameter_type, char > Diameter_traits;

      const Diameter_type&
      Diameter () const;

      Diameter_type&
      Diameter ();

      void
      Diameter (const Diameter_type& x);

      void
      Diameter (::std::auto_ptr< Diameter_type > p);

      // Constructors.
      //
      CircleFeatureDefinitionType (const id_type&,
                                   const InternalExternal_type&,
                                   const Diameter_type&);

      CircleFeatureDefinitionType (const id_type&,
                                   const InternalExternal_type&,
                                   ::std::auto_ptr< Diameter_type >);

      CircleFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      CircleFeatureDefinitionType (const CircleFeatureDefinitionType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual CircleFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircleFeatureDefinitionType&
      operator= (const CircleFeatureDefinitionType& x);

      virtual 
      ~CircleFeatureDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< InternalExternal_type > InternalExternal_;
      ::xsd::cxx::tree::one< Diameter_type > Diameter_;
    };

    class CircleFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::PointType Location_type;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_type&
      Location () const;

      Location_type&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // Normal
      //
      typedef ::xsd::qif2::UnitVectorType Normal_type;
      typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

      const Normal_type&
      Normal () const;

      Normal_type&
      Normal ();

      void
      Normal (const Normal_type& x);

      void
      Normal (::std::auto_ptr< Normal_type > p);

      // Constructors.
      //
      CircleFeatureNominalType (const id_type&,
                                const FeatureDefinitionId_type&,
                                const Location_type&,
                                const Normal_type&);

      CircleFeatureNominalType (const id_type&,
                                const FeatureDefinitionId_type&,
                                ::std::auto_ptr< Location_type >,
                                ::std::auto_ptr< Normal_type >);

      CircleFeatureNominalType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      CircleFeatureNominalType (const CircleFeatureNominalType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual CircleFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircleFeatureNominalType&
      operator= (const CircleFeatureNominalType& x);

      virtual 
      ~CircleFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Location_type > Location_;
      ::xsd::cxx::tree::one< Normal_type > Normal_;
    };

    class CircleFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::ActualPointType Location_type;
      typedef ::xsd::cxx::tree::optional< Location_type > Location_optional;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_optional&
      Location () const;

      Location_optional&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (const Location_optional& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // Normal
      //
      typedef ::xsd::qif2::ActualUnitVectorType Normal_type;
      typedef ::xsd::cxx::tree::optional< Normal_type > Normal_optional;
      typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

      const Normal_optional&
      Normal () const;

      Normal_optional&
      Normal ();

      void
      Normal (const Normal_type& x);

      void
      Normal (const Normal_optional& x);

      void
      Normal (::std::auto_ptr< Normal_type > p);

      // Diameter
      //
      typedef ::xsd::qif2::ActualLinearValueType Diameter_type;
      typedef ::xsd::cxx::tree::optional< Diameter_type > Diameter_optional;
      typedef ::xsd::cxx::tree::traits< Diameter_type, char > Diameter_traits;

      const Diameter_optional&
      Diameter () const;

      Diameter_optional&
      Diameter ();

      void
      Diameter (const Diameter_type& x);

      void
      Diameter (const Diameter_optional& x);

      void
      Diameter (::std::auto_ptr< Diameter_type > p);

      // DiameterMin
      //
      typedef ::xsd::qif2::ActualLinearValueType DiameterMin_type;
      typedef ::xsd::cxx::tree::optional< DiameterMin_type > DiameterMin_optional;
      typedef ::xsd::cxx::tree::traits< DiameterMin_type, char > DiameterMin_traits;

      const DiameterMin_optional&
      DiameterMin () const;

      DiameterMin_optional&
      DiameterMin ();

      void
      DiameterMin (const DiameterMin_type& x);

      void
      DiameterMin (const DiameterMin_optional& x);

      void
      DiameterMin (::std::auto_ptr< DiameterMin_type > p);

      // DiameterMax
      //
      typedef ::xsd::qif2::ActualLinearValueType DiameterMax_type;
      typedef ::xsd::cxx::tree::optional< DiameterMax_type > DiameterMax_optional;
      typedef ::xsd::cxx::tree::traits< DiameterMax_type, char > DiameterMax_traits;

      const DiameterMax_optional&
      DiameterMax () const;

      DiameterMax_optional&
      DiameterMax ();

      void
      DiameterMax (const DiameterMax_type& x);

      void
      DiameterMax (const DiameterMax_optional& x);

      void
      DiameterMax (::std::auto_ptr< DiameterMax_type > p);

      // Form
      //
      typedef ::xsd::qif2::ActualLinearValueType Form_type;
      typedef ::xsd::cxx::tree::optional< Form_type > Form_optional;
      typedef ::xsd::cxx::tree::traits< Form_type, char > Form_traits;

      const Form_optional&
      Form () const;

      Form_optional&
      Form ();

      void
      Form (const Form_type& x);

      void
      Form (const Form_optional& x);

      void
      Form (::std::auto_ptr< Form_type > p);

      // Constructors.
      //
      CircleFeatureActualType (const id_type&,
                               const FeatureItemId_type&);

      CircleFeatureActualType (const id_type&,
                               ::std::auto_ptr< FeatureItemId_type >);

      CircleFeatureActualType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      CircleFeatureActualType (const CircleFeatureActualType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual CircleFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircleFeatureActualType&
      operator= (const CircleFeatureActualType& x);

      virtual 
      ~CircleFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Location_optional Location_;
      Normal_optional Normal_;
      Diameter_optional Diameter_;
      DiameterMin_optional DiameterMin_;
      DiameterMax_optional DiameterMax_;
      Form_optional Form_;
    };

    class ConeConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::ConeBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::ConeRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Copy
      //
      typedef ::xsd::qif2::ConeCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::ConeCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // Transform
      //
      typedef ::xsd::qif2::ConeTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // FromScan
      //
      typedef ::xsd::qif2::ConeFromScanType FromScan_type;
      typedef ::xsd::cxx::tree::optional< FromScan_type > FromScan_optional;
      typedef ::xsd::cxx::tree::traits< FromScan_type, char > FromScan_traits;

      const FromScan_optional&
      FromScan () const;

      FromScan_optional&
      FromScan ();

      void
      FromScan (const FromScan_type& x);

      void
      FromScan (const FromScan_optional& x);

      void
      FromScan (::std::auto_ptr< FromScan_type > p);

      // Constructors.
      //
      ConeConstructionMethodType ();

      ConeConstructionMethodType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      ConeConstructionMethodType (const ConeConstructionMethodType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual ConeConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConeConstructionMethodType&
      operator= (const ConeConstructionMethodType& x);

      virtual 
      ~ConeConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Copy_optional Copy_;
      Cast_optional Cast_;
      Transform_optional Transform_;
      FromScan_optional FromScan_;
    };

    class ConeBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      ConeBestFitType ();

      ConeBestFitType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      ConeBestFitType (const ConeBestFitType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual ConeBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConeBestFitType&
      operator= (const ConeBestFitType& x);

      virtual 
      ~ConeBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class ConeRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      ConeRecompType (const BaseFeaturePointList_type&);

      ConeRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      ConeRecompType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      ConeRecompType (const ConeRecompType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual ConeRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConeRecompType&
      operator= (const ConeRecompType& x);

      virtual 
      ~ConeRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class ConeCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseCone
      //
      typedef ::xsd::qif2::BaseFeatureType BaseCone_type;
      typedef ::xsd::cxx::tree::traits< BaseCone_type, char > BaseCone_traits;

      const BaseCone_type&
      BaseCone () const;

      BaseCone_type&
      BaseCone ();

      void
      BaseCone (const BaseCone_type& x);

      void
      BaseCone (::std::auto_ptr< BaseCone_type > p);

      // Constructors.
      //
      ConeCopyType (const BaseCone_type&);

      ConeCopyType (::std::auto_ptr< BaseCone_type >);

      ConeCopyType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      ConeCopyType (const ConeCopyType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual ConeCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConeCopyType&
      operator= (const ConeCopyType& x);

      virtual 
      ~ConeCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseCone_type > BaseCone_;
    };

    class ConeCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      ConeCastType (const BaseFeature_type&);

      ConeCastType (::std::auto_ptr< BaseFeature_type >);

      ConeCastType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      ConeCastType (const ConeCastType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual ConeCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConeCastType&
      operator= (const ConeCastType& x);

      virtual 
      ~ConeCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class ConeTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseCone
      //
      typedef ::xsd::qif2::BaseFeatureType BaseCone_type;
      typedef ::xsd::cxx::tree::traits< BaseCone_type, char > BaseCone_traits;

      const BaseCone_type&
      BaseCone () const;

      BaseCone_type&
      BaseCone ();

      void
      BaseCone (const BaseCone_type& x);

      void
      BaseCone (::std::auto_ptr< BaseCone_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      ConeTransformType (const BaseCone_type&,
                         const Transformation_type&);

      ConeTransformType (::std::auto_ptr< BaseCone_type >,
                         ::std::auto_ptr< Transformation_type >);

      ConeTransformType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      ConeTransformType (const ConeTransformType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual ConeTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConeTransformType&
      operator= (const ConeTransformType& x);

      virtual 
      ~ConeTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseCone_type > BaseCone_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class ConeFromScanType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // SurfaceFeature
      //
      typedef ::xsd::qif2::BaseFeatureType SurfaceFeature_type;
      typedef ::xsd::cxx::tree::traits< SurfaceFeature_type, char > SurfaceFeature_traits;

      const SurfaceFeature_type&
      SurfaceFeature () const;

      SurfaceFeature_type&
      SurfaceFeature ();

      void
      SurfaceFeature (const SurfaceFeature_type& x);

      void
      SurfaceFeature (::std::auto_ptr< SurfaceFeature_type > p);

      // SearchRadius
      //
      typedef ::xsd::qif2::LinearValueType SearchRadius_type;
      typedef ::xsd::cxx::tree::traits< SearchRadius_type, char > SearchRadius_traits;

      const SearchRadius_type&
      SearchRadius () const;

      SearchRadius_type&
      SearchRadius ();

      void
      SearchRadius (const SearchRadius_type& x);

      void
      SearchRadius (::std::auto_ptr< SearchRadius_type > p);

      // Constructors.
      //
      ConeFromScanType (const SurfaceFeature_type&,
                        const SearchRadius_type&);

      ConeFromScanType (::std::auto_ptr< SurfaceFeature_type >,
                        ::std::auto_ptr< SearchRadius_type >);

      ConeFromScanType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      ConeFromScanType (const ConeFromScanType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual ConeFromScanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConeFromScanType&
      operator= (const ConeFromScanType& x);

      virtual 
      ~ConeFromScanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SurfaceFeature_type > SurfaceFeature_;
      ::xsd::cxx::tree::one< SearchRadius_type > SearchRadius_;
    };

    class ConeCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::ConeConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      ConeCheckedType ();

      ConeCheckedType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      ConeCheckedType (const ConeCheckedType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual ConeCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConeCheckedType&
      operator= (const ConeCheckedType& x);

      virtual 
      ~ConeCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class ConeCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::ConeCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      ConeCheckedFeatureType ();

      ConeCheckedFeatureType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      ConeCheckedFeatureType (const ConeCheckedFeatureType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual ConeCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConeCheckedFeatureType&
      operator= (const ConeCheckedFeatureType& x);

      virtual 
      ~ConeCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class ConeActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::ConeCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      ConeActualDeterminationType ();

      ConeActualDeterminationType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      ConeActualDeterminationType (const ConeActualDeterminationType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual ConeActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConeActualDeterminationType&
      operator= (const ConeActualDeterminationType& x);

      virtual 
      ~ConeActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class ConeFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::ConeActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::FeatureOfSizeSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      ConeFeatureItemType (const id_type&,
                           const FeatureName_type&,
                           const DeterminationMode_type&);

      ConeFeatureItemType (const id_type&,
                           const FeatureName_type&,
                           ::std::auto_ptr< DeterminationMode_type >);

      ConeFeatureItemType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      ConeFeatureItemType (const ConeFeatureItemType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual ConeFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConeFeatureItemType&
      operator= (const ConeFeatureItemType& x);

      virtual 
      ~ConeFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class ConeFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // InternalExternal
      //
      typedef ::xsd::qif2::InternalExternalEnumType InternalExternal_type;
      typedef ::xsd::cxx::tree::traits< InternalExternal_type, char > InternalExternal_traits;

      const InternalExternal_type&
      InternalExternal () const;

      InternalExternal_type&
      InternalExternal ();

      void
      InternalExternal (const InternalExternal_type& x);

      void
      InternalExternal (::std::auto_ptr< InternalExternal_type > p);

      // Diameter
      //
      typedef ::xsd::qif2::LinearValueType Diameter_type;
      typedef ::xsd::cxx::tree::traits< Diameter_type, char > Diameter_traits;

      const Diameter_type&
      Diameter () const;

      Diameter_type&
      Diameter ();

      void
      Diameter (const Diameter_type& x);

      void
      Diameter (::std::auto_ptr< Diameter_type > p);

      // HalfAngle
      //
      typedef ::xsd::qif2::AngularValueType HalfAngle_type;
      typedef ::xsd::cxx::tree::optional< HalfAngle_type > HalfAngle_optional;
      typedef ::xsd::cxx::tree::traits< HalfAngle_type, char > HalfAngle_traits;

      const HalfAngle_optional&
      HalfAngle () const;

      HalfAngle_optional&
      HalfAngle ();

      void
      HalfAngle (const HalfAngle_type& x);

      void
      HalfAngle (const HalfAngle_optional& x);

      void
      HalfAngle (::std::auto_ptr< HalfAngle_type > p);

      // FullAngle
      //
      typedef ::xsd::qif2::AngularValueType FullAngle_type;
      typedef ::xsd::cxx::tree::optional< FullAngle_type > FullAngle_optional;
      typedef ::xsd::cxx::tree::traits< FullAngle_type, char > FullAngle_traits;

      const FullAngle_optional&
      FullAngle () const;

      FullAngle_optional&
      FullAngle ();

      void
      FullAngle (const FullAngle_type& x);

      void
      FullAngle (const FullAngle_optional& x);

      void
      FullAngle (::std::auto_ptr< FullAngle_type > p);

      // LargeEndDistance
      //
      typedef ::xsd::qif2::LinearValueType LargeEndDistance_type;
      typedef ::xsd::cxx::tree::optional< LargeEndDistance_type > LargeEndDistance_optional;
      typedef ::xsd::cxx::tree::traits< LargeEndDistance_type, char > LargeEndDistance_traits;

      const LargeEndDistance_optional&
      LargeEndDistance () const;

      LargeEndDistance_optional&
      LargeEndDistance ();

      void
      LargeEndDistance (const LargeEndDistance_type& x);

      void
      LargeEndDistance (const LargeEndDistance_optional& x);

      void
      LargeEndDistance (::std::auto_ptr< LargeEndDistance_type > p);

      // SmallEndDistance
      //
      typedef ::xsd::qif2::LinearValueType SmallEndDistance_type;
      typedef ::xsd::cxx::tree::optional< SmallEndDistance_type > SmallEndDistance_optional;
      typedef ::xsd::cxx::tree::traits< SmallEndDistance_type, char > SmallEndDistance_traits;

      const SmallEndDistance_optional&
      SmallEndDistance () const;

      SmallEndDistance_optional&
      SmallEndDistance ();

      void
      SmallEndDistance (const SmallEndDistance_type& x);

      void
      SmallEndDistance (const SmallEndDistance_optional& x);

      void
      SmallEndDistance (::std::auto_ptr< SmallEndDistance_type > p);

      // Constructors.
      //
      ConeFeatureDefinitionType (const id_type&,
                                 const InternalExternal_type&,
                                 const Diameter_type&);

      ConeFeatureDefinitionType (const id_type&,
                                 const InternalExternal_type&,
                                 ::std::auto_ptr< Diameter_type >);

      ConeFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      ConeFeatureDefinitionType (const ConeFeatureDefinitionType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual ConeFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConeFeatureDefinitionType&
      operator= (const ConeFeatureDefinitionType& x);

      virtual 
      ~ConeFeatureDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< InternalExternal_type > InternalExternal_;
      ::xsd::cxx::tree::one< Diameter_type > Diameter_;
      HalfAngle_optional HalfAngle_;
      FullAngle_optional FullAngle_;
      LargeEndDistance_optional LargeEndDistance_;
      SmallEndDistance_optional SmallEndDistance_;
    };

    class ConeFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // Axis
      //
      typedef ::xsd::qif2::AxisType Axis_type;
      typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

      const Axis_type&
      Axis () const;

      Axis_type&
      Axis ();

      void
      Axis (const Axis_type& x);

      void
      Axis (::std::auto_ptr< Axis_type > p);

      // Sweep
      //
      typedef ::xsd::qif2::SweepType Sweep_type;
      typedef ::xsd::cxx::tree::optional< Sweep_type > Sweep_optional;
      typedef ::xsd::cxx::tree::traits< Sweep_type, char > Sweep_traits;

      const Sweep_optional&
      Sweep () const;

      Sweep_optional&
      Sweep ();

      void
      Sweep (const Sweep_type& x);

      void
      Sweep (const Sweep_optional& x);

      void
      Sweep (::std::auto_ptr< Sweep_type > p);

      // Constructors.
      //
      ConeFeatureNominalType (const id_type&,
                              const FeatureDefinitionId_type&,
                              const Axis_type&);

      ConeFeatureNominalType (const id_type&,
                              const FeatureDefinitionId_type&,
                              ::std::auto_ptr< Axis_type >);

      ConeFeatureNominalType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      ConeFeatureNominalType (const ConeFeatureNominalType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual ConeFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConeFeatureNominalType&
      operator= (const ConeFeatureNominalType& x);

      virtual 
      ~ConeFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Axis_type > Axis_;
      Sweep_optional Sweep_;
    };

    class ConeFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Axis
      //
      typedef ::xsd::qif2::ActualAxisType Axis_type;
      typedef ::xsd::cxx::tree::optional< Axis_type > Axis_optional;
      typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

      const Axis_optional&
      Axis () const;

      Axis_optional&
      Axis ();

      void
      Axis (const Axis_type& x);

      void
      Axis (const Axis_optional& x);

      void
      Axis (::std::auto_ptr< Axis_type > p);

      // Diameter
      //
      typedef ::xsd::qif2::ActualLinearValueType Diameter_type;
      typedef ::xsd::cxx::tree::optional< Diameter_type > Diameter_optional;
      typedef ::xsd::cxx::tree::traits< Diameter_type, char > Diameter_traits;

      const Diameter_optional&
      Diameter () const;

      Diameter_optional&
      Diameter ();

      void
      Diameter (const Diameter_type& x);

      void
      Diameter (const Diameter_optional& x);

      void
      Diameter (::std::auto_ptr< Diameter_type > p);

      // DiameterMin
      //
      typedef ::xsd::qif2::ActualLinearValueType DiameterMin_type;
      typedef ::xsd::cxx::tree::optional< DiameterMin_type > DiameterMin_optional;
      typedef ::xsd::cxx::tree::traits< DiameterMin_type, char > DiameterMin_traits;

      const DiameterMin_optional&
      DiameterMin () const;

      DiameterMin_optional&
      DiameterMin ();

      void
      DiameterMin (const DiameterMin_type& x);

      void
      DiameterMin (const DiameterMin_optional& x);

      void
      DiameterMin (::std::auto_ptr< DiameterMin_type > p);

      // DiameterMax
      //
      typedef ::xsd::qif2::ActualLinearValueType DiameterMax_type;
      typedef ::xsd::cxx::tree::optional< DiameterMax_type > DiameterMax_optional;
      typedef ::xsd::cxx::tree::traits< DiameterMax_type, char > DiameterMax_traits;

      const DiameterMax_optional&
      DiameterMax () const;

      DiameterMax_optional&
      DiameterMax ();

      void
      DiameterMax (const DiameterMax_type& x);

      void
      DiameterMax (const DiameterMax_optional& x);

      void
      DiameterMax (::std::auto_ptr< DiameterMax_type > p);

      // HalfAngle
      //
      typedef ::xsd::qif2::ActualAngularValueType HalfAngle_type;
      typedef ::xsd::cxx::tree::optional< HalfAngle_type > HalfAngle_optional;
      typedef ::xsd::cxx::tree::traits< HalfAngle_type, char > HalfAngle_traits;

      const HalfAngle_optional&
      HalfAngle () const;

      HalfAngle_optional&
      HalfAngle ();

      void
      HalfAngle (const HalfAngle_type& x);

      void
      HalfAngle (const HalfAngle_optional& x);

      void
      HalfAngle (::std::auto_ptr< HalfAngle_type > p);

      // FullAngle
      //
      typedef ::xsd::qif2::ActualAngularValueType FullAngle_type;
      typedef ::xsd::cxx::tree::optional< FullAngle_type > FullAngle_optional;
      typedef ::xsd::cxx::tree::traits< FullAngle_type, char > FullAngle_traits;

      const FullAngle_optional&
      FullAngle () const;

      FullAngle_optional&
      FullAngle ();

      void
      FullAngle (const FullAngle_type& x);

      void
      FullAngle (const FullAngle_optional& x);

      void
      FullAngle (::std::auto_ptr< FullAngle_type > p);

      // SmallEndDistance
      //
      typedef ::xsd::qif2::ActualLinearValueType SmallEndDistance_type;
      typedef ::xsd::cxx::tree::optional< SmallEndDistance_type > SmallEndDistance_optional;
      typedef ::xsd::cxx::tree::traits< SmallEndDistance_type, char > SmallEndDistance_traits;

      const SmallEndDistance_optional&
      SmallEndDistance () const;

      SmallEndDistance_optional&
      SmallEndDistance ();

      void
      SmallEndDistance (const SmallEndDistance_type& x);

      void
      SmallEndDistance (const SmallEndDistance_optional& x);

      void
      SmallEndDistance (::std::auto_ptr< SmallEndDistance_type > p);

      // LargeEndDistance
      //
      typedef ::xsd::qif2::ActualLinearValueType LargeEndDistance_type;
      typedef ::xsd::cxx::tree::optional< LargeEndDistance_type > LargeEndDistance_optional;
      typedef ::xsd::cxx::tree::traits< LargeEndDistance_type, char > LargeEndDistance_traits;

      const LargeEndDistance_optional&
      LargeEndDistance () const;

      LargeEndDistance_optional&
      LargeEndDistance ();

      void
      LargeEndDistance (const LargeEndDistance_type& x);

      void
      LargeEndDistance (const LargeEndDistance_optional& x);

      void
      LargeEndDistance (::std::auto_ptr< LargeEndDistance_type > p);

      // Sweep
      //
      typedef ::xsd::qif2::SweepType Sweep_type;
      typedef ::xsd::cxx::tree::optional< Sweep_type > Sweep_optional;
      typedef ::xsd::cxx::tree::traits< Sweep_type, char > Sweep_traits;

      const Sweep_optional&
      Sweep () const;

      Sweep_optional&
      Sweep ();

      void
      Sweep (const Sweep_type& x);

      void
      Sweep (const Sweep_optional& x);

      void
      Sweep (::std::auto_ptr< Sweep_type > p);

      // Form
      //
      typedef ::xsd::qif2::ActualLinearValueType Form_type;
      typedef ::xsd::cxx::tree::optional< Form_type > Form_optional;
      typedef ::xsd::cxx::tree::traits< Form_type, char > Form_traits;

      const Form_optional&
      Form () const;

      Form_optional&
      Form ();

      void
      Form (const Form_type& x);

      void
      Form (const Form_optional& x);

      void
      Form (::std::auto_ptr< Form_type > p);

      // Constructors.
      //
      ConeFeatureActualType (const id_type&,
                             const FeatureItemId_type&);

      ConeFeatureActualType (const id_type&,
                             ::std::auto_ptr< FeatureItemId_type >);

      ConeFeatureActualType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      ConeFeatureActualType (const ConeFeatureActualType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual ConeFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConeFeatureActualType&
      operator= (const ConeFeatureActualType& x);

      virtual 
      ~ConeFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Axis_optional Axis_;
      Diameter_optional Diameter_;
      DiameterMin_optional DiameterMin_;
      DiameterMax_optional DiameterMax_;
      HalfAngle_optional HalfAngle_;
      FullAngle_optional FullAngle_;
      SmallEndDistance_optional SmallEndDistance_;
      LargeEndDistance_optional LargeEndDistance_;
      Sweep_optional Sweep_;
      Form_optional Form_;
    };

    class ConicalSegmentConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::ConicalSegmentBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::ConicalSegmentRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Copy
      //
      typedef ::xsd::qif2::ConicalSegmentCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::ConicalSegmentCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // Transform
      //
      typedef ::xsd::qif2::ConicalSegmentTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // Constructors.
      //
      ConicalSegmentConstructionMethodType ();

      ConicalSegmentConstructionMethodType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      ConicalSegmentConstructionMethodType (const ConicalSegmentConstructionMethodType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual ConicalSegmentConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConicalSegmentConstructionMethodType&
      operator= (const ConicalSegmentConstructionMethodType& x);

      virtual 
      ~ConicalSegmentConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Copy_optional Copy_;
      Cast_optional Cast_;
      Transform_optional Transform_;
    };

    class ConicalSegmentBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      ConicalSegmentBestFitType ();

      ConicalSegmentBestFitType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      ConicalSegmentBestFitType (const ConicalSegmentBestFitType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual ConicalSegmentBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConicalSegmentBestFitType&
      operator= (const ConicalSegmentBestFitType& x);

      virtual 
      ~ConicalSegmentBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class ConicalSegmentRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      ConicalSegmentRecompType (const BaseFeaturePointList_type&);

      ConicalSegmentRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      ConicalSegmentRecompType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      ConicalSegmentRecompType (const ConicalSegmentRecompType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual ConicalSegmentRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConicalSegmentRecompType&
      operator= (const ConicalSegmentRecompType& x);

      virtual 
      ~ConicalSegmentRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class ConicalSegmentCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseConicalSegment
      //
      typedef ::xsd::qif2::BaseFeatureType BaseConicalSegment_type;
      typedef ::xsd::cxx::tree::traits< BaseConicalSegment_type, char > BaseConicalSegment_traits;

      const BaseConicalSegment_type&
      BaseConicalSegment () const;

      BaseConicalSegment_type&
      BaseConicalSegment ();

      void
      BaseConicalSegment (const BaseConicalSegment_type& x);

      void
      BaseConicalSegment (::std::auto_ptr< BaseConicalSegment_type > p);

      // Constructors.
      //
      ConicalSegmentCopyType (const BaseConicalSegment_type&);

      ConicalSegmentCopyType (::std::auto_ptr< BaseConicalSegment_type >);

      ConicalSegmentCopyType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      ConicalSegmentCopyType (const ConicalSegmentCopyType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual ConicalSegmentCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConicalSegmentCopyType&
      operator= (const ConicalSegmentCopyType& x);

      virtual 
      ~ConicalSegmentCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseConicalSegment_type > BaseConicalSegment_;
    };

    class ConicalSegmentCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      ConicalSegmentCastType (const BaseFeature_type&);

      ConicalSegmentCastType (::std::auto_ptr< BaseFeature_type >);

      ConicalSegmentCastType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      ConicalSegmentCastType (const ConicalSegmentCastType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual ConicalSegmentCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConicalSegmentCastType&
      operator= (const ConicalSegmentCastType& x);

      virtual 
      ~ConicalSegmentCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class ConicalSegmentTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseConicalSegment
      //
      typedef ::xsd::qif2::BaseFeatureType BaseConicalSegment_type;
      typedef ::xsd::cxx::tree::traits< BaseConicalSegment_type, char > BaseConicalSegment_traits;

      const BaseConicalSegment_type&
      BaseConicalSegment () const;

      BaseConicalSegment_type&
      BaseConicalSegment ();

      void
      BaseConicalSegment (const BaseConicalSegment_type& x);

      void
      BaseConicalSegment (::std::auto_ptr< BaseConicalSegment_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      ConicalSegmentTransformType (const BaseConicalSegment_type&,
                                   const Transformation_type&);

      ConicalSegmentTransformType (::std::auto_ptr< BaseConicalSegment_type >,
                                   ::std::auto_ptr< Transformation_type >);

      ConicalSegmentTransformType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      ConicalSegmentTransformType (const ConicalSegmentTransformType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual ConicalSegmentTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConicalSegmentTransformType&
      operator= (const ConicalSegmentTransformType& x);

      virtual 
      ~ConicalSegmentTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseConicalSegment_type > BaseConicalSegment_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class ConicalSegmentCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::ConicalSegmentConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      ConicalSegmentCheckedType ();

      ConicalSegmentCheckedType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      ConicalSegmentCheckedType (const ConicalSegmentCheckedType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual ConicalSegmentCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConicalSegmentCheckedType&
      operator= (const ConicalSegmentCheckedType& x);

      virtual 
      ~ConicalSegmentCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class ConicalSegmentCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::ConicalSegmentCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      ConicalSegmentCheckedFeatureType ();

      ConicalSegmentCheckedFeatureType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      ConicalSegmentCheckedFeatureType (const ConicalSegmentCheckedFeatureType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual ConicalSegmentCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConicalSegmentCheckedFeatureType&
      operator= (const ConicalSegmentCheckedFeatureType& x);

      virtual 
      ~ConicalSegmentCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class ConicalSegmentActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::ConicalSegmentCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      ConicalSegmentActualDeterminationType ();

      ConicalSegmentActualDeterminationType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      ConicalSegmentActualDeterminationType (const ConicalSegmentActualDeterminationType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual ConicalSegmentActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConicalSegmentActualDeterminationType&
      operator= (const ConicalSegmentActualDeterminationType& x);

      virtual 
      ~ConicalSegmentActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class ConicalSegmentFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::ConicalSegmentActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::NonFeatureOfSizeSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      ConicalSegmentFeatureItemType (const id_type&,
                                     const FeatureName_type&,
                                     const DeterminationMode_type&);

      ConicalSegmentFeatureItemType (const id_type&,
                                     const FeatureName_type&,
                                     ::std::auto_ptr< DeterminationMode_type >);

      ConicalSegmentFeatureItemType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      ConicalSegmentFeatureItemType (const ConicalSegmentFeatureItemType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual ConicalSegmentFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConicalSegmentFeatureItemType&
      operator= (const ConicalSegmentFeatureItemType& x);

      virtual 
      ~ConicalSegmentFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class ConicalSegmentFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // InternalExternal
      //
      typedef ::xsd::qif2::InternalExternalEnumType InternalExternal_type;
      typedef ::xsd::cxx::tree::traits< InternalExternal_type, char > InternalExternal_traits;

      const InternalExternal_type&
      InternalExternal () const;

      InternalExternal_type&
      InternalExternal ();

      void
      InternalExternal (const InternalExternal_type& x);

      void
      InternalExternal (::std::auto_ptr< InternalExternal_type > p);

      // Diameter
      //
      typedef ::xsd::qif2::LinearValueType Diameter_type;
      typedef ::xsd::cxx::tree::traits< Diameter_type, char > Diameter_traits;

      const Diameter_type&
      Diameter () const;

      Diameter_type&
      Diameter ();

      void
      Diameter (const Diameter_type& x);

      void
      Diameter (::std::auto_ptr< Diameter_type > p);

      // HalfAngle
      //
      typedef ::xsd::qif2::AngularValueType HalfAngle_type;
      typedef ::xsd::cxx::tree::optional< HalfAngle_type > HalfAngle_optional;
      typedef ::xsd::cxx::tree::traits< HalfAngle_type, char > HalfAngle_traits;

      const HalfAngle_optional&
      HalfAngle () const;

      HalfAngle_optional&
      HalfAngle ();

      void
      HalfAngle (const HalfAngle_type& x);

      void
      HalfAngle (const HalfAngle_optional& x);

      void
      HalfAngle (::std::auto_ptr< HalfAngle_type > p);

      // FullAngle
      //
      typedef ::xsd::qif2::AngularValueType FullAngle_type;
      typedef ::xsd::cxx::tree::optional< FullAngle_type > FullAngle_optional;
      typedef ::xsd::cxx::tree::traits< FullAngle_type, char > FullAngle_traits;

      const FullAngle_optional&
      FullAngle () const;

      FullAngle_optional&
      FullAngle ();

      void
      FullAngle (const FullAngle_type& x);

      void
      FullAngle (const FullAngle_optional& x);

      void
      FullAngle (::std::auto_ptr< FullAngle_type > p);

      // LargeEndDistance
      //
      typedef ::xsd::qif2::LinearValueType LargeEndDistance_type;
      typedef ::xsd::cxx::tree::optional< LargeEndDistance_type > LargeEndDistance_optional;
      typedef ::xsd::cxx::tree::traits< LargeEndDistance_type, char > LargeEndDistance_traits;

      const LargeEndDistance_optional&
      LargeEndDistance () const;

      LargeEndDistance_optional&
      LargeEndDistance ();

      void
      LargeEndDistance (const LargeEndDistance_type& x);

      void
      LargeEndDistance (const LargeEndDistance_optional& x);

      void
      LargeEndDistance (::std::auto_ptr< LargeEndDistance_type > p);

      // SmallEndDistance
      //
      typedef ::xsd::qif2::LinearValueType SmallEndDistance_type;
      typedef ::xsd::cxx::tree::optional< SmallEndDistance_type > SmallEndDistance_optional;
      typedef ::xsd::cxx::tree::traits< SmallEndDistance_type, char > SmallEndDistance_traits;

      const SmallEndDistance_optional&
      SmallEndDistance () const;

      SmallEndDistance_optional&
      SmallEndDistance ();

      void
      SmallEndDistance (const SmallEndDistance_type& x);

      void
      SmallEndDistance (const SmallEndDistance_optional& x);

      void
      SmallEndDistance (::std::auto_ptr< SmallEndDistance_type > p);

      // Constructors.
      //
      ConicalSegmentFeatureDefinitionType (const id_type&,
                                           const InternalExternal_type&,
                                           const Diameter_type&);

      ConicalSegmentFeatureDefinitionType (const id_type&,
                                           const InternalExternal_type&,
                                           ::std::auto_ptr< Diameter_type >);

      ConicalSegmentFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      ConicalSegmentFeatureDefinitionType (const ConicalSegmentFeatureDefinitionType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual ConicalSegmentFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConicalSegmentFeatureDefinitionType&
      operator= (const ConicalSegmentFeatureDefinitionType& x);

      virtual 
      ~ConicalSegmentFeatureDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< InternalExternal_type > InternalExternal_;
      ::xsd::cxx::tree::one< Diameter_type > Diameter_;
      HalfAngle_optional HalfAngle_;
      FullAngle_optional FullAngle_;
      LargeEndDistance_optional LargeEndDistance_;
      SmallEndDistance_optional SmallEndDistance_;
    };

    class ConicalSegmentFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // Axis
      //
      typedef ::xsd::qif2::AxisType Axis_type;
      typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

      const Axis_type&
      Axis () const;

      Axis_type&
      Axis ();

      void
      Axis (const Axis_type& x);

      void
      Axis (::std::auto_ptr< Axis_type > p);

      // Sweep
      //
      typedef ::xsd::qif2::SweepType Sweep_type;
      typedef ::xsd::cxx::tree::traits< Sweep_type, char > Sweep_traits;

      const Sweep_type&
      Sweep () const;

      Sweep_type&
      Sweep ();

      void
      Sweep (const Sweep_type& x);

      void
      Sweep (::std::auto_ptr< Sweep_type > p);

      // Constructors.
      //
      ConicalSegmentFeatureNominalType (const id_type&,
                                        const FeatureDefinitionId_type&,
                                        const Axis_type&,
                                        const Sweep_type&);

      ConicalSegmentFeatureNominalType (const id_type&,
                                        const FeatureDefinitionId_type&,
                                        ::std::auto_ptr< Axis_type >,
                                        ::std::auto_ptr< Sweep_type >);

      ConicalSegmentFeatureNominalType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      ConicalSegmentFeatureNominalType (const ConicalSegmentFeatureNominalType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual ConicalSegmentFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConicalSegmentFeatureNominalType&
      operator= (const ConicalSegmentFeatureNominalType& x);

      virtual 
      ~ConicalSegmentFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Axis_type > Axis_;
      ::xsd::cxx::tree::one< Sweep_type > Sweep_;
    };

    class ConicalSegmentFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Axis
      //
      typedef ::xsd::qif2::ActualAxisType Axis_type;
      typedef ::xsd::cxx::tree::optional< Axis_type > Axis_optional;
      typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

      const Axis_optional&
      Axis () const;

      Axis_optional&
      Axis ();

      void
      Axis (const Axis_type& x);

      void
      Axis (const Axis_optional& x);

      void
      Axis (::std::auto_ptr< Axis_type > p);

      // Diameter
      //
      typedef ::xsd::qif2::ActualLinearValueType Diameter_type;
      typedef ::xsd::cxx::tree::optional< Diameter_type > Diameter_optional;
      typedef ::xsd::cxx::tree::traits< Diameter_type, char > Diameter_traits;

      const Diameter_optional&
      Diameter () const;

      Diameter_optional&
      Diameter ();

      void
      Diameter (const Diameter_type& x);

      void
      Diameter (const Diameter_optional& x);

      void
      Diameter (::std::auto_ptr< Diameter_type > p);

      // DiameterMin
      //
      typedef ::xsd::qif2::ActualLinearValueType DiameterMin_type;
      typedef ::xsd::cxx::tree::optional< DiameterMin_type > DiameterMin_optional;
      typedef ::xsd::cxx::tree::traits< DiameterMin_type, char > DiameterMin_traits;

      const DiameterMin_optional&
      DiameterMin () const;

      DiameterMin_optional&
      DiameterMin ();

      void
      DiameterMin (const DiameterMin_type& x);

      void
      DiameterMin (const DiameterMin_optional& x);

      void
      DiameterMin (::std::auto_ptr< DiameterMin_type > p);

      // DiameterMax
      //
      typedef ::xsd::qif2::ActualLinearValueType DiameterMax_type;
      typedef ::xsd::cxx::tree::optional< DiameterMax_type > DiameterMax_optional;
      typedef ::xsd::cxx::tree::traits< DiameterMax_type, char > DiameterMax_traits;

      const DiameterMax_optional&
      DiameterMax () const;

      DiameterMax_optional&
      DiameterMax ();

      void
      DiameterMax (const DiameterMax_type& x);

      void
      DiameterMax (const DiameterMax_optional& x);

      void
      DiameterMax (::std::auto_ptr< DiameterMax_type > p);

      // HalfAngle
      //
      typedef ::xsd::qif2::ActualAngularValueType HalfAngle_type;
      typedef ::xsd::cxx::tree::optional< HalfAngle_type > HalfAngle_optional;
      typedef ::xsd::cxx::tree::traits< HalfAngle_type, char > HalfAngle_traits;

      const HalfAngle_optional&
      HalfAngle () const;

      HalfAngle_optional&
      HalfAngle ();

      void
      HalfAngle (const HalfAngle_type& x);

      void
      HalfAngle (const HalfAngle_optional& x);

      void
      HalfAngle (::std::auto_ptr< HalfAngle_type > p);

      // FullAngle
      //
      typedef ::xsd::qif2::ActualAngularValueType FullAngle_type;
      typedef ::xsd::cxx::tree::optional< FullAngle_type > FullAngle_optional;
      typedef ::xsd::cxx::tree::traits< FullAngle_type, char > FullAngle_traits;

      const FullAngle_optional&
      FullAngle () const;

      FullAngle_optional&
      FullAngle ();

      void
      FullAngle (const FullAngle_type& x);

      void
      FullAngle (const FullAngle_optional& x);

      void
      FullAngle (::std::auto_ptr< FullAngle_type > p);

      // SmallEndDistance
      //
      typedef ::xsd::qif2::ActualLinearValueType SmallEndDistance_type;
      typedef ::xsd::cxx::tree::optional< SmallEndDistance_type > SmallEndDistance_optional;
      typedef ::xsd::cxx::tree::traits< SmallEndDistance_type, char > SmallEndDistance_traits;

      const SmallEndDistance_optional&
      SmallEndDistance () const;

      SmallEndDistance_optional&
      SmallEndDistance ();

      void
      SmallEndDistance (const SmallEndDistance_type& x);

      void
      SmallEndDistance (const SmallEndDistance_optional& x);

      void
      SmallEndDistance (::std::auto_ptr< SmallEndDistance_type > p);

      // LargeEndDistance
      //
      typedef ::xsd::qif2::ActualLinearValueType LargeEndDistance_type;
      typedef ::xsd::cxx::tree::optional< LargeEndDistance_type > LargeEndDistance_optional;
      typedef ::xsd::cxx::tree::traits< LargeEndDistance_type, char > LargeEndDistance_traits;

      const LargeEndDistance_optional&
      LargeEndDistance () const;

      LargeEndDistance_optional&
      LargeEndDistance ();

      void
      LargeEndDistance (const LargeEndDistance_type& x);

      void
      LargeEndDistance (const LargeEndDistance_optional& x);

      void
      LargeEndDistance (::std::auto_ptr< LargeEndDistance_type > p);

      // Sweep
      //
      typedef ::xsd::qif2::SweepType Sweep_type;
      typedef ::xsd::cxx::tree::optional< Sweep_type > Sweep_optional;
      typedef ::xsd::cxx::tree::traits< Sweep_type, char > Sweep_traits;

      const Sweep_optional&
      Sweep () const;

      Sweep_optional&
      Sweep ();

      void
      Sweep (const Sweep_type& x);

      void
      Sweep (const Sweep_optional& x);

      void
      Sweep (::std::auto_ptr< Sweep_type > p);

      // Form
      //
      typedef ::xsd::qif2::ActualLinearValueType Form_type;
      typedef ::xsd::cxx::tree::optional< Form_type > Form_optional;
      typedef ::xsd::cxx::tree::traits< Form_type, char > Form_traits;

      const Form_optional&
      Form () const;

      Form_optional&
      Form ();

      void
      Form (const Form_type& x);

      void
      Form (const Form_optional& x);

      void
      Form (::std::auto_ptr< Form_type > p);

      // Constructors.
      //
      ConicalSegmentFeatureActualType (const id_type&,
                                       const FeatureItemId_type&);

      ConicalSegmentFeatureActualType (const id_type&,
                                       ::std::auto_ptr< FeatureItemId_type >);

      ConicalSegmentFeatureActualType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      ConicalSegmentFeatureActualType (const ConicalSegmentFeatureActualType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual ConicalSegmentFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConicalSegmentFeatureActualType&
      operator= (const ConicalSegmentFeatureActualType& x);

      virtual 
      ~ConicalSegmentFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Axis_optional Axis_;
      Diameter_optional Diameter_;
      DiameterMin_optional DiameterMin_;
      DiameterMax_optional DiameterMax_;
      HalfAngle_optional HalfAngle_;
      FullAngle_optional FullAngle_;
      SmallEndDistance_optional SmallEndDistance_;
      LargeEndDistance_optional LargeEndDistance_;
      Sweep_optional Sweep_;
      Form_optional Form_;
    };

    class CuboidConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::CuboidBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::CuboidRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Copy
      //
      typedef ::xsd::qif2::CuboidCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::CuboidCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // Transform
      //
      typedef ::xsd::qif2::CuboidTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // Constructors.
      //
      CuboidConstructionMethodType ();

      CuboidConstructionMethodType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      CuboidConstructionMethodType (const CuboidConstructionMethodType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual CuboidConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CuboidConstructionMethodType&
      operator= (const CuboidConstructionMethodType& x);

      virtual 
      ~CuboidConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Copy_optional Copy_;
      Cast_optional Cast_;
      Transform_optional Transform_;
    };

    class CuboidBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      CuboidBestFitType ();

      CuboidBestFitType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      CuboidBestFitType (const CuboidBestFitType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual CuboidBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CuboidBestFitType&
      operator= (const CuboidBestFitType& x);

      virtual 
      ~CuboidBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class CuboidRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      CuboidRecompType (const BaseFeaturePointList_type&);

      CuboidRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      CuboidRecompType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      CuboidRecompType (const CuboidRecompType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual CuboidRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CuboidRecompType&
      operator= (const CuboidRecompType& x);

      virtual 
      ~CuboidRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class CuboidCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseCuboid
      //
      typedef ::xsd::qif2::BaseFeatureType BaseCuboid_type;
      typedef ::xsd::cxx::tree::traits< BaseCuboid_type, char > BaseCuboid_traits;

      const BaseCuboid_type&
      BaseCuboid () const;

      BaseCuboid_type&
      BaseCuboid ();

      void
      BaseCuboid (const BaseCuboid_type& x);

      void
      BaseCuboid (::std::auto_ptr< BaseCuboid_type > p);

      // Constructors.
      //
      CuboidCopyType (const BaseCuboid_type&);

      CuboidCopyType (::std::auto_ptr< BaseCuboid_type >);

      CuboidCopyType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      CuboidCopyType (const CuboidCopyType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual CuboidCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CuboidCopyType&
      operator= (const CuboidCopyType& x);

      virtual 
      ~CuboidCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseCuboid_type > BaseCuboid_;
    };

    class CuboidCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      CuboidCastType (const BaseFeature_type&);

      CuboidCastType (::std::auto_ptr< BaseFeature_type >);

      CuboidCastType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      CuboidCastType (const CuboidCastType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual CuboidCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CuboidCastType&
      operator= (const CuboidCastType& x);

      virtual 
      ~CuboidCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class CuboidTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseCuboid
      //
      typedef ::xsd::qif2::BaseFeatureType BaseCuboid_type;
      typedef ::xsd::cxx::tree::traits< BaseCuboid_type, char > BaseCuboid_traits;

      const BaseCuboid_type&
      BaseCuboid () const;

      BaseCuboid_type&
      BaseCuboid ();

      void
      BaseCuboid (const BaseCuboid_type& x);

      void
      BaseCuboid (::std::auto_ptr< BaseCuboid_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      CuboidTransformType (const BaseCuboid_type&,
                           const Transformation_type&);

      CuboidTransformType (::std::auto_ptr< BaseCuboid_type >,
                           ::std::auto_ptr< Transformation_type >);

      CuboidTransformType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      CuboidTransformType (const CuboidTransformType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual CuboidTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CuboidTransformType&
      operator= (const CuboidTransformType& x);

      virtual 
      ~CuboidTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseCuboid_type > BaseCuboid_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class CuboidCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::CuboidConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      CuboidCheckedType ();

      CuboidCheckedType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      CuboidCheckedType (const CuboidCheckedType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual CuboidCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CuboidCheckedType&
      operator= (const CuboidCheckedType& x);

      virtual 
      ~CuboidCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class CuboidCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::CuboidCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      CuboidCheckedFeatureType ();

      CuboidCheckedFeatureType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      CuboidCheckedFeatureType (const CuboidCheckedFeatureType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual CuboidCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CuboidCheckedFeatureType&
      operator= (const CuboidCheckedFeatureType& x);

      virtual 
      ~CuboidCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class CuboidActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::CuboidCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      CuboidActualDeterminationType ();

      CuboidActualDeterminationType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      CuboidActualDeterminationType (const CuboidActualDeterminationType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual CuboidActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CuboidActualDeterminationType&
      operator= (const CuboidActualDeterminationType& x);

      virtual 
      ~CuboidActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class CuboidFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::CuboidActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::FeatureOfSizeSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      CuboidFeatureItemType (const id_type&,
                             const FeatureName_type&,
                             const DeterminationMode_type&);

      CuboidFeatureItemType (const id_type&,
                             const FeatureName_type&,
                             ::std::auto_ptr< DeterminationMode_type >);

      CuboidFeatureItemType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      CuboidFeatureItemType (const CuboidFeatureItemType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual CuboidFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CuboidFeatureItemType&
      operator= (const CuboidFeatureItemType& x);

      virtual 
      ~CuboidFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class CuboidFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // InternalExternal
      //
      typedef ::xsd::qif2::InternalExternalEnumType InternalExternal_type;
      typedef ::xsd::cxx::tree::traits< InternalExternal_type, char > InternalExternal_traits;

      const InternalExternal_type&
      InternalExternal () const;

      InternalExternal_type&
      InternalExternal ();

      void
      InternalExternal (const InternalExternal_type& x);

      void
      InternalExternal (::std::auto_ptr< InternalExternal_type > p);

      // Length
      //
      typedef ::xsd::qif2::LinearValueType Length_type;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_type&
      Length () const;

      Length_type&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // Width
      //
      typedef ::xsd::qif2::LinearValueType Width_type;
      typedef ::xsd::cxx::tree::traits< Width_type, char > Width_traits;

      const Width_type&
      Width () const;

      Width_type&
      Width ();

      void
      Width (const Width_type& x);

      void
      Width (::std::auto_ptr< Width_type > p);

      // Height
      //
      typedef ::xsd::qif2::LinearValueType Height_type;
      typedef ::xsd::cxx::tree::traits< Height_type, char > Height_traits;

      const Height_type&
      Height () const;

      Height_type&
      Height ();

      void
      Height (const Height_type& x);

      void
      Height (::std::auto_ptr< Height_type > p);

      // Constructors.
      //
      CuboidFeatureDefinitionType (const id_type&,
                                   const InternalExternal_type&,
                                   const Length_type&,
                                   const Width_type&,
                                   const Height_type&);

      CuboidFeatureDefinitionType (const id_type&,
                                   const InternalExternal_type&,
                                   ::std::auto_ptr< Length_type >,
                                   ::std::auto_ptr< Width_type >,
                                   ::std::auto_ptr< Height_type >);

      CuboidFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      CuboidFeatureDefinitionType (const CuboidFeatureDefinitionType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual CuboidFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CuboidFeatureDefinitionType&
      operator= (const CuboidFeatureDefinitionType& x);

      virtual 
      ~CuboidFeatureDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< InternalExternal_type > InternalExternal_;
      ::xsd::cxx::tree::one< Length_type > Length_;
      ::xsd::cxx::tree::one< Width_type > Width_;
      ::xsd::cxx::tree::one< Height_type > Height_;
    };

    class CuboidFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::PointType Location_type;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_type&
      Location () const;

      Location_type&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // LengthVector
      //
      typedef ::xsd::qif2::UnitVectorType LengthVector_type;
      typedef ::xsd::cxx::tree::traits< LengthVector_type, char > LengthVector_traits;

      const LengthVector_type&
      LengthVector () const;

      LengthVector_type&
      LengthVector ();

      void
      LengthVector (const LengthVector_type& x);

      void
      LengthVector (::std::auto_ptr< LengthVector_type > p);

      // HeightVector
      //
      typedef ::xsd::qif2::UnitVectorType HeightVector_type;
      typedef ::xsd::cxx::tree::traits< HeightVector_type, char > HeightVector_traits;

      const HeightVector_type&
      HeightVector () const;

      HeightVector_type&
      HeightVector ();

      void
      HeightVector (const HeightVector_type& x);

      void
      HeightVector (::std::auto_ptr< HeightVector_type > p);

      // Constructors.
      //
      CuboidFeatureNominalType (const id_type&,
                                const FeatureDefinitionId_type&,
                                const Location_type&,
                                const LengthVector_type&,
                                const HeightVector_type&);

      CuboidFeatureNominalType (const id_type&,
                                const FeatureDefinitionId_type&,
                                ::std::auto_ptr< Location_type >,
                                ::std::auto_ptr< LengthVector_type >,
                                ::std::auto_ptr< HeightVector_type >);

      CuboidFeatureNominalType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      CuboidFeatureNominalType (const CuboidFeatureNominalType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual CuboidFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CuboidFeatureNominalType&
      operator= (const CuboidFeatureNominalType& x);

      virtual 
      ~CuboidFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Location_type > Location_;
      ::xsd::cxx::tree::one< LengthVector_type > LengthVector_;
      ::xsd::cxx::tree::one< HeightVector_type > HeightVector_;
    };

    class CuboidFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::ActualPointType Location_type;
      typedef ::xsd::cxx::tree::optional< Location_type > Location_optional;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_optional&
      Location () const;

      Location_optional&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (const Location_optional& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // Length
      //
      typedef ::xsd::qif2::ActualLinearValueType Length_type;
      typedef ::xsd::cxx::tree::optional< Length_type > Length_optional;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_optional&
      Length () const;

      Length_optional&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (const Length_optional& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // LengthMax
      //
      typedef ::xsd::qif2::ActualLinearValueType LengthMax_type;
      typedef ::xsd::cxx::tree::optional< LengthMax_type > LengthMax_optional;
      typedef ::xsd::cxx::tree::traits< LengthMax_type, char > LengthMax_traits;

      const LengthMax_optional&
      LengthMax () const;

      LengthMax_optional&
      LengthMax ();

      void
      LengthMax (const LengthMax_type& x);

      void
      LengthMax (const LengthMax_optional& x);

      void
      LengthMax (::std::auto_ptr< LengthMax_type > p);

      // LengthMin
      //
      typedef ::xsd::qif2::ActualLinearValueType LengthMin_type;
      typedef ::xsd::cxx::tree::optional< LengthMin_type > LengthMin_optional;
      typedef ::xsd::cxx::tree::traits< LengthMin_type, char > LengthMin_traits;

      const LengthMin_optional&
      LengthMin () const;

      LengthMin_optional&
      LengthMin ();

      void
      LengthMin (const LengthMin_type& x);

      void
      LengthMin (const LengthMin_optional& x);

      void
      LengthMin (::std::auto_ptr< LengthMin_type > p);

      // LengthVector
      //
      typedef ::xsd::qif2::ActualUnitVectorType LengthVector_type;
      typedef ::xsd::cxx::tree::optional< LengthVector_type > LengthVector_optional;
      typedef ::xsd::cxx::tree::traits< LengthVector_type, char > LengthVector_traits;

      const LengthVector_optional&
      LengthVector () const;

      LengthVector_optional&
      LengthVector ();

      void
      LengthVector (const LengthVector_type& x);

      void
      LengthVector (const LengthVector_optional& x);

      void
      LengthVector (::std::auto_ptr< LengthVector_type > p);

      // Width
      //
      typedef ::xsd::qif2::ActualLinearValueType Width_type;
      typedef ::xsd::cxx::tree::optional< Width_type > Width_optional;
      typedef ::xsd::cxx::tree::traits< Width_type, char > Width_traits;

      const Width_optional&
      Width () const;

      Width_optional&
      Width ();

      void
      Width (const Width_type& x);

      void
      Width (const Width_optional& x);

      void
      Width (::std::auto_ptr< Width_type > p);

      // WidthMax
      //
      typedef ::xsd::qif2::ActualLinearValueType WidthMax_type;
      typedef ::xsd::cxx::tree::optional< WidthMax_type > WidthMax_optional;
      typedef ::xsd::cxx::tree::traits< WidthMax_type, char > WidthMax_traits;

      const WidthMax_optional&
      WidthMax () const;

      WidthMax_optional&
      WidthMax ();

      void
      WidthMax (const WidthMax_type& x);

      void
      WidthMax (const WidthMax_optional& x);

      void
      WidthMax (::std::auto_ptr< WidthMax_type > p);

      // WidthMin
      //
      typedef ::xsd::qif2::ActualLinearValueType WidthMin_type;
      typedef ::xsd::cxx::tree::optional< WidthMin_type > WidthMin_optional;
      typedef ::xsd::cxx::tree::traits< WidthMin_type, char > WidthMin_traits;

      const WidthMin_optional&
      WidthMin () const;

      WidthMin_optional&
      WidthMin ();

      void
      WidthMin (const WidthMin_type& x);

      void
      WidthMin (const WidthMin_optional& x);

      void
      WidthMin (::std::auto_ptr< WidthMin_type > p);

      // Height
      //
      typedef ::xsd::qif2::ActualLinearValueType Height_type;
      typedef ::xsd::cxx::tree::optional< Height_type > Height_optional;
      typedef ::xsd::cxx::tree::traits< Height_type, char > Height_traits;

      const Height_optional&
      Height () const;

      Height_optional&
      Height ();

      void
      Height (const Height_type& x);

      void
      Height (const Height_optional& x);

      void
      Height (::std::auto_ptr< Height_type > p);

      // HeightMax
      //
      typedef ::xsd::qif2::ActualLinearValueType HeightMax_type;
      typedef ::xsd::cxx::tree::optional< HeightMax_type > HeightMax_optional;
      typedef ::xsd::cxx::tree::traits< HeightMax_type, char > HeightMax_traits;

      const HeightMax_optional&
      HeightMax () const;

      HeightMax_optional&
      HeightMax ();

      void
      HeightMax (const HeightMax_type& x);

      void
      HeightMax (const HeightMax_optional& x);

      void
      HeightMax (::std::auto_ptr< HeightMax_type > p);

      // HeightMin
      //
      typedef ::xsd::qif2::ActualLinearValueType HeightMin_type;
      typedef ::xsd::cxx::tree::optional< HeightMin_type > HeightMin_optional;
      typedef ::xsd::cxx::tree::traits< HeightMin_type, char > HeightMin_traits;

      const HeightMin_optional&
      HeightMin () const;

      HeightMin_optional&
      HeightMin ();

      void
      HeightMin (const HeightMin_type& x);

      void
      HeightMin (const HeightMin_optional& x);

      void
      HeightMin (::std::auto_ptr< HeightMin_type > p);

      // HeightVector
      //
      typedef ::xsd::qif2::ActualUnitVectorType HeightVector_type;
      typedef ::xsd::cxx::tree::optional< HeightVector_type > HeightVector_optional;
      typedef ::xsd::cxx::tree::traits< HeightVector_type, char > HeightVector_traits;

      const HeightVector_optional&
      HeightVector () const;

      HeightVector_optional&
      HeightVector ();

      void
      HeightVector (const HeightVector_type& x);

      void
      HeightVector (const HeightVector_optional& x);

      void
      HeightVector (::std::auto_ptr< HeightVector_type > p);

      // Form
      //
      typedef ::xsd::qif2::ActualLinearValueType Form_type;
      typedef ::xsd::cxx::tree::optional< Form_type > Form_optional;
      typedef ::xsd::cxx::tree::traits< Form_type, char > Form_traits;

      const Form_optional&
      Form () const;

      Form_optional&
      Form ();

      void
      Form (const Form_type& x);

      void
      Form (const Form_optional& x);

      void
      Form (::std::auto_ptr< Form_type > p);

      // Constructors.
      //
      CuboidFeatureActualType (const id_type&,
                               const FeatureItemId_type&);

      CuboidFeatureActualType (const id_type&,
                               ::std::auto_ptr< FeatureItemId_type >);

      CuboidFeatureActualType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      CuboidFeatureActualType (const CuboidFeatureActualType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual CuboidFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CuboidFeatureActualType&
      operator= (const CuboidFeatureActualType& x);

      virtual 
      ~CuboidFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Location_optional Location_;
      Length_optional Length_;
      LengthMax_optional LengthMax_;
      LengthMin_optional LengthMin_;
      LengthVector_optional LengthVector_;
      Width_optional Width_;
      WidthMax_optional WidthMax_;
      WidthMin_optional WidthMin_;
      Height_optional Height_;
      HeightMax_optional HeightMax_;
      HeightMin_optional HeightMin_;
      HeightVector_optional HeightVector_;
      Form_optional Form_;
    };

    class CylinderConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::CylinderBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::CylinderRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Copy
      //
      typedef ::xsd::qif2::CylinderCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::CylinderCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // Transform
      //
      typedef ::xsd::qif2::CylinderTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // FromScan
      //
      typedef ::xsd::qif2::CylinderFromScanType FromScan_type;
      typedef ::xsd::cxx::tree::optional< FromScan_type > FromScan_optional;
      typedef ::xsd::cxx::tree::traits< FromScan_type, char > FromScan_traits;

      const FromScan_optional&
      FromScan () const;

      FromScan_optional&
      FromScan ();

      void
      FromScan (const FromScan_type& x);

      void
      FromScan (const FromScan_optional& x);

      void
      FromScan (::std::auto_ptr< FromScan_type > p);

      // Constructors.
      //
      CylinderConstructionMethodType ();

      CylinderConstructionMethodType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      CylinderConstructionMethodType (const CylinderConstructionMethodType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual CylinderConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylinderConstructionMethodType&
      operator= (const CylinderConstructionMethodType& x);

      virtual 
      ~CylinderConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Copy_optional Copy_;
      Cast_optional Cast_;
      Transform_optional Transform_;
      FromScan_optional FromScan_;
    };

    class CylinderBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      CylinderBestFitType ();

      CylinderBestFitType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      CylinderBestFitType (const CylinderBestFitType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual CylinderBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylinderBestFitType&
      operator= (const CylinderBestFitType& x);

      virtual 
      ~CylinderBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class CylinderRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      CylinderRecompType (const BaseFeaturePointList_type&);

      CylinderRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      CylinderRecompType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      CylinderRecompType (const CylinderRecompType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual CylinderRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylinderRecompType&
      operator= (const CylinderRecompType& x);

      virtual 
      ~CylinderRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class CylinderCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseCylinder
      //
      typedef ::xsd::qif2::BaseFeatureType BaseCylinder_type;
      typedef ::xsd::cxx::tree::traits< BaseCylinder_type, char > BaseCylinder_traits;

      const BaseCylinder_type&
      BaseCylinder () const;

      BaseCylinder_type&
      BaseCylinder ();

      void
      BaseCylinder (const BaseCylinder_type& x);

      void
      BaseCylinder (::std::auto_ptr< BaseCylinder_type > p);

      // Constructors.
      //
      CylinderCopyType (const BaseCylinder_type&);

      CylinderCopyType (::std::auto_ptr< BaseCylinder_type >);

      CylinderCopyType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      CylinderCopyType (const CylinderCopyType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual CylinderCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylinderCopyType&
      operator= (const CylinderCopyType& x);

      virtual 
      ~CylinderCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseCylinder_type > BaseCylinder_;
    };

    class CylinderCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      CylinderCastType (const BaseFeature_type&);

      CylinderCastType (::std::auto_ptr< BaseFeature_type >);

      CylinderCastType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      CylinderCastType (const CylinderCastType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual CylinderCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylinderCastType&
      operator= (const CylinderCastType& x);

      virtual 
      ~CylinderCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class CylinderTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseCylinder
      //
      typedef ::xsd::qif2::BaseFeatureType BaseCylinder_type;
      typedef ::xsd::cxx::tree::traits< BaseCylinder_type, char > BaseCylinder_traits;

      const BaseCylinder_type&
      BaseCylinder () const;

      BaseCylinder_type&
      BaseCylinder ();

      void
      BaseCylinder (const BaseCylinder_type& x);

      void
      BaseCylinder (::std::auto_ptr< BaseCylinder_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      CylinderTransformType (const BaseCylinder_type&,
                             const Transformation_type&);

      CylinderTransformType (::std::auto_ptr< BaseCylinder_type >,
                             ::std::auto_ptr< Transformation_type >);

      CylinderTransformType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      CylinderTransformType (const CylinderTransformType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual CylinderTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylinderTransformType&
      operator= (const CylinderTransformType& x);

      virtual 
      ~CylinderTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseCylinder_type > BaseCylinder_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class CylinderFromScanType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // SurfaceFeature
      //
      typedef ::xsd::qif2::BaseFeatureType SurfaceFeature_type;
      typedef ::xsd::cxx::tree::traits< SurfaceFeature_type, char > SurfaceFeature_traits;

      const SurfaceFeature_type&
      SurfaceFeature () const;

      SurfaceFeature_type&
      SurfaceFeature ();

      void
      SurfaceFeature (const SurfaceFeature_type& x);

      void
      SurfaceFeature (::std::auto_ptr< SurfaceFeature_type > p);

      // SearchRadius
      //
      typedef ::xsd::qif2::LinearValueType SearchRadius_type;
      typedef ::xsd::cxx::tree::traits< SearchRadius_type, char > SearchRadius_traits;

      const SearchRadius_type&
      SearchRadius () const;

      SearchRadius_type&
      SearchRadius ();

      void
      SearchRadius (const SearchRadius_type& x);

      void
      SearchRadius (::std::auto_ptr< SearchRadius_type > p);

      // Constructors.
      //
      CylinderFromScanType (const SurfaceFeature_type&,
                            const SearchRadius_type&);

      CylinderFromScanType (::std::auto_ptr< SurfaceFeature_type >,
                            ::std::auto_ptr< SearchRadius_type >);

      CylinderFromScanType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      CylinderFromScanType (const CylinderFromScanType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual CylinderFromScanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylinderFromScanType&
      operator= (const CylinderFromScanType& x);

      virtual 
      ~CylinderFromScanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SurfaceFeature_type > SurfaceFeature_;
      ::xsd::cxx::tree::one< SearchRadius_type > SearchRadius_;
    };

    class CylinderCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::CylinderConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      CylinderCheckedType ();

      CylinderCheckedType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      CylinderCheckedType (const CylinderCheckedType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual CylinderCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylinderCheckedType&
      operator= (const CylinderCheckedType& x);

      virtual 
      ~CylinderCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class CylinderCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::CylinderCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      CylinderCheckedFeatureType ();

      CylinderCheckedFeatureType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      CylinderCheckedFeatureType (const CylinderCheckedFeatureType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual CylinderCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylinderCheckedFeatureType&
      operator= (const CylinderCheckedFeatureType& x);

      virtual 
      ~CylinderCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class CylinderActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::CylinderCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      CylinderActualDeterminationType ();

      CylinderActualDeterminationType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      CylinderActualDeterminationType (const CylinderActualDeterminationType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual CylinderActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylinderActualDeterminationType&
      operator= (const CylinderActualDeterminationType& x);

      virtual 
      ~CylinderActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class CylinderFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::CylinderActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::FeatureOfSizeSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      CylinderFeatureItemType (const id_type&,
                               const FeatureName_type&,
                               const DeterminationMode_type&);

      CylinderFeatureItemType (const id_type&,
                               const FeatureName_type&,
                               ::std::auto_ptr< DeterminationMode_type >);

      CylinderFeatureItemType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      CylinderFeatureItemType (const CylinderFeatureItemType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual CylinderFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylinderFeatureItemType&
      operator= (const CylinderFeatureItemType& x);

      virtual 
      ~CylinderFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class CylinderFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // InternalExternal
      //
      typedef ::xsd::qif2::InternalExternalEnumType InternalExternal_type;
      typedef ::xsd::cxx::tree::traits< InternalExternal_type, char > InternalExternal_traits;

      const InternalExternal_type&
      InternalExternal () const;

      InternalExternal_type&
      InternalExternal ();

      void
      InternalExternal (const InternalExternal_type& x);

      void
      InternalExternal (::std::auto_ptr< InternalExternal_type > p);

      // Diameter
      //
      typedef ::xsd::qif2::LinearValueType Diameter_type;
      typedef ::xsd::cxx::tree::traits< Diameter_type, char > Diameter_traits;

      const Diameter_type&
      Diameter () const;

      Diameter_type&
      Diameter ();

      void
      Diameter (const Diameter_type& x);

      void
      Diameter (::std::auto_ptr< Diameter_type > p);

      // Length
      //
      typedef ::xsd::qif2::LinearValueType Length_type;
      typedef ::xsd::cxx::tree::optional< Length_type > Length_optional;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_optional&
      Length () const;

      Length_optional&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (const Length_optional& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // Bottom
      //
      typedef ::xsd::qif2::BottomType Bottom_type;
      typedef ::xsd::cxx::tree::optional< Bottom_type > Bottom_optional;
      typedef ::xsd::cxx::tree::traits< Bottom_type, char > Bottom_traits;

      const Bottom_optional&
      Bottom () const;

      Bottom_optional&
      Bottom ();

      void
      Bottom (const Bottom_type& x);

      void
      Bottom (const Bottom_optional& x);

      void
      Bottom (::std::auto_ptr< Bottom_type > p);

      // Constructors.
      //
      CylinderFeatureDefinitionType (const id_type&,
                                     const InternalExternal_type&,
                                     const Diameter_type&);

      CylinderFeatureDefinitionType (const id_type&,
                                     const InternalExternal_type&,
                                     ::std::auto_ptr< Diameter_type >);

      CylinderFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      CylinderFeatureDefinitionType (const CylinderFeatureDefinitionType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual CylinderFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylinderFeatureDefinitionType&
      operator= (const CylinderFeatureDefinitionType& x);

      virtual 
      ~CylinderFeatureDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< InternalExternal_type > InternalExternal_;
      ::xsd::cxx::tree::one< Diameter_type > Diameter_;
      Length_optional Length_;
      Bottom_optional Bottom_;
    };

    class CylinderFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // Axis
      //
      typedef ::xsd::qif2::AxisType Axis_type;
      typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

      const Axis_type&
      Axis () const;

      Axis_type&
      Axis ();

      void
      Axis (const Axis_type& x);

      void
      Axis (::std::auto_ptr< Axis_type > p);

      // Sweep
      //
      typedef ::xsd::qif2::SweepType Sweep_type;
      typedef ::xsd::cxx::tree::optional< Sweep_type > Sweep_optional;
      typedef ::xsd::cxx::tree::traits< Sweep_type, char > Sweep_traits;

      const Sweep_optional&
      Sweep () const;

      Sweep_optional&
      Sweep ();

      void
      Sweep (const Sweep_type& x);

      void
      Sweep (const Sweep_optional& x);

      void
      Sweep (::std::auto_ptr< Sweep_type > p);

      // Constructors.
      //
      CylinderFeatureNominalType (const id_type&,
                                  const FeatureDefinitionId_type&,
                                  const Axis_type&);

      CylinderFeatureNominalType (const id_type&,
                                  const FeatureDefinitionId_type&,
                                  ::std::auto_ptr< Axis_type >);

      CylinderFeatureNominalType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      CylinderFeatureNominalType (const CylinderFeatureNominalType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual CylinderFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylinderFeatureNominalType&
      operator= (const CylinderFeatureNominalType& x);

      virtual 
      ~CylinderFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Axis_type > Axis_;
      Sweep_optional Sweep_;
    };

    class CylinderFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Axis
      //
      typedef ::xsd::qif2::ActualAxisType Axis_type;
      typedef ::xsd::cxx::tree::optional< Axis_type > Axis_optional;
      typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

      const Axis_optional&
      Axis () const;

      Axis_optional&
      Axis ();

      void
      Axis (const Axis_type& x);

      void
      Axis (const Axis_optional& x);

      void
      Axis (::std::auto_ptr< Axis_type > p);

      // Diameter
      //
      typedef ::xsd::qif2::ActualLinearValueType Diameter_type;
      typedef ::xsd::cxx::tree::optional< Diameter_type > Diameter_optional;
      typedef ::xsd::cxx::tree::traits< Diameter_type, char > Diameter_traits;

      const Diameter_optional&
      Diameter () const;

      Diameter_optional&
      Diameter ();

      void
      Diameter (const Diameter_type& x);

      void
      Diameter (const Diameter_optional& x);

      void
      Diameter (::std::auto_ptr< Diameter_type > p);

      // Length
      //
      typedef ::xsd::qif2::ActualLinearValueType Length_type;
      typedef ::xsd::cxx::tree::optional< Length_type > Length_optional;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_optional&
      Length () const;

      Length_optional&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (const Length_optional& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // DiameterMin
      //
      typedef ::xsd::qif2::ActualLinearValueType DiameterMin_type;
      typedef ::xsd::cxx::tree::optional< DiameterMin_type > DiameterMin_optional;
      typedef ::xsd::cxx::tree::traits< DiameterMin_type, char > DiameterMin_traits;

      const DiameterMin_optional&
      DiameterMin () const;

      DiameterMin_optional&
      DiameterMin ();

      void
      DiameterMin (const DiameterMin_type& x);

      void
      DiameterMin (const DiameterMin_optional& x);

      void
      DiameterMin (::std::auto_ptr< DiameterMin_type > p);

      // DiameterMax
      //
      typedef ::xsd::qif2::ActualLinearValueType DiameterMax_type;
      typedef ::xsd::cxx::tree::optional< DiameterMax_type > DiameterMax_optional;
      typedef ::xsd::cxx::tree::traits< DiameterMax_type, char > DiameterMax_traits;

      const DiameterMax_optional&
      DiameterMax () const;

      DiameterMax_optional&
      DiameterMax ();

      void
      DiameterMax (const DiameterMax_type& x);

      void
      DiameterMax (const DiameterMax_optional& x);

      void
      DiameterMax (::std::auto_ptr< DiameterMax_type > p);

      // Sweep
      //
      typedef ::xsd::qif2::SweepType Sweep_type;
      typedef ::xsd::cxx::tree::optional< Sweep_type > Sweep_optional;
      typedef ::xsd::cxx::tree::traits< Sweep_type, char > Sweep_traits;

      const Sweep_optional&
      Sweep () const;

      Sweep_optional&
      Sweep ();

      void
      Sweep (const Sweep_type& x);

      void
      Sweep (const Sweep_optional& x);

      void
      Sweep (::std::auto_ptr< Sweep_type > p);

      // Form
      //
      typedef ::xsd::qif2::ActualLinearValueType Form_type;
      typedef ::xsd::cxx::tree::optional< Form_type > Form_optional;
      typedef ::xsd::cxx::tree::traits< Form_type, char > Form_traits;

      const Form_optional&
      Form () const;

      Form_optional&
      Form ();

      void
      Form (const Form_type& x);

      void
      Form (const Form_optional& x);

      void
      Form (::std::auto_ptr< Form_type > p);

      // Constructors.
      //
      CylinderFeatureActualType (const id_type&,
                                 const FeatureItemId_type&);

      CylinderFeatureActualType (const id_type&,
                                 ::std::auto_ptr< FeatureItemId_type >);

      CylinderFeatureActualType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      CylinderFeatureActualType (const CylinderFeatureActualType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual CylinderFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylinderFeatureActualType&
      operator= (const CylinderFeatureActualType& x);

      virtual 
      ~CylinderFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Axis_optional Axis_;
      Diameter_optional Diameter_;
      Length_optional Length_;
      DiameterMin_optional DiameterMin_;
      DiameterMax_optional DiameterMax_;
      Sweep_optional Sweep_;
      Form_optional Form_;
    };

    class CylindricalSegmentConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::CylindricalSegmentBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::CylindricalSegmentRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Copy
      //
      typedef ::xsd::qif2::CylindricalSegmentCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::CylindricalSegmentCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // Transform
      //
      typedef ::xsd::qif2::CylindricalSegmentTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // Constructors.
      //
      CylindricalSegmentConstructionMethodType ();

      CylindricalSegmentConstructionMethodType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      CylindricalSegmentConstructionMethodType (const CylindricalSegmentConstructionMethodType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual CylindricalSegmentConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylindricalSegmentConstructionMethodType&
      operator= (const CylindricalSegmentConstructionMethodType& x);

      virtual 
      ~CylindricalSegmentConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Copy_optional Copy_;
      Cast_optional Cast_;
      Transform_optional Transform_;
    };

    class CylindricalSegmentBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      CylindricalSegmentBestFitType ();

      CylindricalSegmentBestFitType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      CylindricalSegmentBestFitType (const CylindricalSegmentBestFitType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual CylindricalSegmentBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylindricalSegmentBestFitType&
      operator= (const CylindricalSegmentBestFitType& x);

      virtual 
      ~CylindricalSegmentBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class CylindricalSegmentRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      CylindricalSegmentRecompType (const BaseFeaturePointList_type&);

      CylindricalSegmentRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      CylindricalSegmentRecompType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      CylindricalSegmentRecompType (const CylindricalSegmentRecompType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual CylindricalSegmentRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylindricalSegmentRecompType&
      operator= (const CylindricalSegmentRecompType& x);

      virtual 
      ~CylindricalSegmentRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class CylindricalSegmentCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseCylindricalSegment
      //
      typedef ::xsd::qif2::BaseFeatureType BaseCylindricalSegment_type;
      typedef ::xsd::cxx::tree::traits< BaseCylindricalSegment_type, char > BaseCylindricalSegment_traits;

      const BaseCylindricalSegment_type&
      BaseCylindricalSegment () const;

      BaseCylindricalSegment_type&
      BaseCylindricalSegment ();

      void
      BaseCylindricalSegment (const BaseCylindricalSegment_type& x);

      void
      BaseCylindricalSegment (::std::auto_ptr< BaseCylindricalSegment_type > p);

      // Constructors.
      //
      CylindricalSegmentCopyType (const BaseCylindricalSegment_type&);

      CylindricalSegmentCopyType (::std::auto_ptr< BaseCylindricalSegment_type >);

      CylindricalSegmentCopyType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      CylindricalSegmentCopyType (const CylindricalSegmentCopyType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual CylindricalSegmentCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylindricalSegmentCopyType&
      operator= (const CylindricalSegmentCopyType& x);

      virtual 
      ~CylindricalSegmentCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseCylindricalSegment_type > BaseCylindricalSegment_;
    };

    class CylindricalSegmentCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      CylindricalSegmentCastType (const BaseFeature_type&);

      CylindricalSegmentCastType (::std::auto_ptr< BaseFeature_type >);

      CylindricalSegmentCastType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      CylindricalSegmentCastType (const CylindricalSegmentCastType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual CylindricalSegmentCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylindricalSegmentCastType&
      operator= (const CylindricalSegmentCastType& x);

      virtual 
      ~CylindricalSegmentCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class CylindricalSegmentTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseCylindricalSegment
      //
      typedef ::xsd::qif2::BaseFeatureType BaseCylindricalSegment_type;
      typedef ::xsd::cxx::tree::traits< BaseCylindricalSegment_type, char > BaseCylindricalSegment_traits;

      const BaseCylindricalSegment_type&
      BaseCylindricalSegment () const;

      BaseCylindricalSegment_type&
      BaseCylindricalSegment ();

      void
      BaseCylindricalSegment (const BaseCylindricalSegment_type& x);

      void
      BaseCylindricalSegment (::std::auto_ptr< BaseCylindricalSegment_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      CylindricalSegmentTransformType (const BaseCylindricalSegment_type&,
                                       const Transformation_type&);

      CylindricalSegmentTransformType (::std::auto_ptr< BaseCylindricalSegment_type >,
                                       ::std::auto_ptr< Transformation_type >);

      CylindricalSegmentTransformType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      CylindricalSegmentTransformType (const CylindricalSegmentTransformType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual CylindricalSegmentTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylindricalSegmentTransformType&
      operator= (const CylindricalSegmentTransformType& x);

      virtual 
      ~CylindricalSegmentTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseCylindricalSegment_type > BaseCylindricalSegment_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class CylindricalSegmentCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::CylindricalSegmentConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      CylindricalSegmentCheckedType ();

      CylindricalSegmentCheckedType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      CylindricalSegmentCheckedType (const CylindricalSegmentCheckedType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual CylindricalSegmentCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylindricalSegmentCheckedType&
      operator= (const CylindricalSegmentCheckedType& x);

      virtual 
      ~CylindricalSegmentCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class CylindricalSegmentCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::CylindricalSegmentCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      CylindricalSegmentCheckedFeatureType ();

      CylindricalSegmentCheckedFeatureType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      CylindricalSegmentCheckedFeatureType (const CylindricalSegmentCheckedFeatureType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual CylindricalSegmentCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylindricalSegmentCheckedFeatureType&
      operator= (const CylindricalSegmentCheckedFeatureType& x);

      virtual 
      ~CylindricalSegmentCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class CylindricalSegmentActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::CylindricalSegmentCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      CylindricalSegmentActualDeterminationType ();

      CylindricalSegmentActualDeterminationType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      CylindricalSegmentActualDeterminationType (const CylindricalSegmentActualDeterminationType& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      virtual CylindricalSegmentActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylindricalSegmentActualDeterminationType&
      operator= (const CylindricalSegmentActualDeterminationType& x);

      virtual 
      ~CylindricalSegmentActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class CylindricalSegmentFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::CylindricalSegmentActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::NonFeatureOfSizeSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      CylindricalSegmentFeatureItemType (const id_type&,
                                         const FeatureName_type&,
                                         const DeterminationMode_type&);

      CylindricalSegmentFeatureItemType (const id_type&,
                                         const FeatureName_type&,
                                         ::std::auto_ptr< DeterminationMode_type >);

      CylindricalSegmentFeatureItemType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      CylindricalSegmentFeatureItemType (const CylindricalSegmentFeatureItemType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual CylindricalSegmentFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylindricalSegmentFeatureItemType&
      operator= (const CylindricalSegmentFeatureItemType& x);

      virtual 
      ~CylindricalSegmentFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class CylindricalSegmentFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // InternalExternal
      //
      typedef ::xsd::qif2::InternalExternalEnumType InternalExternal_type;
      typedef ::xsd::cxx::tree::traits< InternalExternal_type, char > InternalExternal_traits;

      const InternalExternal_type&
      InternalExternal () const;

      InternalExternal_type&
      InternalExternal ();

      void
      InternalExternal (const InternalExternal_type& x);

      void
      InternalExternal (::std::auto_ptr< InternalExternal_type > p);

      // Diameter
      //
      typedef ::xsd::qif2::LinearValueType Diameter_type;
      typedef ::xsd::cxx::tree::traits< Diameter_type, char > Diameter_traits;

      const Diameter_type&
      Diameter () const;

      Diameter_type&
      Diameter ();

      void
      Diameter (const Diameter_type& x);

      void
      Diameter (::std::auto_ptr< Diameter_type > p);

      // Length
      //
      typedef ::xsd::qif2::LinearValueType Length_type;
      typedef ::xsd::cxx::tree::optional< Length_type > Length_optional;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_optional&
      Length () const;

      Length_optional&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (const Length_optional& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // Bottom
      //
      typedef ::xsd::qif2::BottomType Bottom_type;
      typedef ::xsd::cxx::tree::optional< Bottom_type > Bottom_optional;
      typedef ::xsd::cxx::tree::traits< Bottom_type, char > Bottom_traits;

      const Bottom_optional&
      Bottom () const;

      Bottom_optional&
      Bottom ();

      void
      Bottom (const Bottom_type& x);

      void
      Bottom (const Bottom_optional& x);

      void
      Bottom (::std::auto_ptr< Bottom_type > p);

      // Constructors.
      //
      CylindricalSegmentFeatureDefinitionType (const id_type&,
                                               const InternalExternal_type&,
                                               const Diameter_type&);

      CylindricalSegmentFeatureDefinitionType (const id_type&,
                                               const InternalExternal_type&,
                                               ::std::auto_ptr< Diameter_type >);

      CylindricalSegmentFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      CylindricalSegmentFeatureDefinitionType (const CylindricalSegmentFeatureDefinitionType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual CylindricalSegmentFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylindricalSegmentFeatureDefinitionType&
      operator= (const CylindricalSegmentFeatureDefinitionType& x);

      virtual 
      ~CylindricalSegmentFeatureDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< InternalExternal_type > InternalExternal_;
      ::xsd::cxx::tree::one< Diameter_type > Diameter_;
      Length_optional Length_;
      Bottom_optional Bottom_;
    };

    class CylindricalSegmentFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // Axis
      //
      typedef ::xsd::qif2::AxisType Axis_type;
      typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

      const Axis_type&
      Axis () const;

      Axis_type&
      Axis ();

      void
      Axis (const Axis_type& x);

      void
      Axis (::std::auto_ptr< Axis_type > p);

      // Sweep
      //
      typedef ::xsd::qif2::SweepType Sweep_type;
      typedef ::xsd::cxx::tree::traits< Sweep_type, char > Sweep_traits;

      const Sweep_type&
      Sweep () const;

      Sweep_type&
      Sweep ();

      void
      Sweep (const Sweep_type& x);

      void
      Sweep (::std::auto_ptr< Sweep_type > p);

      // Constructors.
      //
      CylindricalSegmentFeatureNominalType (const id_type&,
                                            const FeatureDefinitionId_type&,
                                            const Axis_type&,
                                            const Sweep_type&);

      CylindricalSegmentFeatureNominalType (const id_type&,
                                            const FeatureDefinitionId_type&,
                                            ::std::auto_ptr< Axis_type >,
                                            ::std::auto_ptr< Sweep_type >);

      CylindricalSegmentFeatureNominalType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      CylindricalSegmentFeatureNominalType (const CylindricalSegmentFeatureNominalType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual CylindricalSegmentFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylindricalSegmentFeatureNominalType&
      operator= (const CylindricalSegmentFeatureNominalType& x);

      virtual 
      ~CylindricalSegmentFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Axis_type > Axis_;
      ::xsd::cxx::tree::one< Sweep_type > Sweep_;
    };

    class CylindricalSegmentFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Axis
      //
      typedef ::xsd::qif2::ActualAxisType Axis_type;
      typedef ::xsd::cxx::tree::optional< Axis_type > Axis_optional;
      typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

      const Axis_optional&
      Axis () const;

      Axis_optional&
      Axis ();

      void
      Axis (const Axis_type& x);

      void
      Axis (const Axis_optional& x);

      void
      Axis (::std::auto_ptr< Axis_type > p);

      // Diameter
      //
      typedef ::xsd::qif2::ActualLinearValueType Diameter_type;
      typedef ::xsd::cxx::tree::optional< Diameter_type > Diameter_optional;
      typedef ::xsd::cxx::tree::traits< Diameter_type, char > Diameter_traits;

      const Diameter_optional&
      Diameter () const;

      Diameter_optional&
      Diameter ();

      void
      Diameter (const Diameter_type& x);

      void
      Diameter (const Diameter_optional& x);

      void
      Diameter (::std::auto_ptr< Diameter_type > p);

      // Length
      //
      typedef ::xsd::qif2::ActualLinearValueType Length_type;
      typedef ::xsd::cxx::tree::optional< Length_type > Length_optional;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_optional&
      Length () const;

      Length_optional&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (const Length_optional& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // DiameterMin
      //
      typedef ::xsd::qif2::ActualLinearValueType DiameterMin_type;
      typedef ::xsd::cxx::tree::optional< DiameterMin_type > DiameterMin_optional;
      typedef ::xsd::cxx::tree::traits< DiameterMin_type, char > DiameterMin_traits;

      const DiameterMin_optional&
      DiameterMin () const;

      DiameterMin_optional&
      DiameterMin ();

      void
      DiameterMin (const DiameterMin_type& x);

      void
      DiameterMin (const DiameterMin_optional& x);

      void
      DiameterMin (::std::auto_ptr< DiameterMin_type > p);

      // DiameterMax
      //
      typedef ::xsd::qif2::ActualLinearValueType DiameterMax_type;
      typedef ::xsd::cxx::tree::optional< DiameterMax_type > DiameterMax_optional;
      typedef ::xsd::cxx::tree::traits< DiameterMax_type, char > DiameterMax_traits;

      const DiameterMax_optional&
      DiameterMax () const;

      DiameterMax_optional&
      DiameterMax ();

      void
      DiameterMax (const DiameterMax_type& x);

      void
      DiameterMax (const DiameterMax_optional& x);

      void
      DiameterMax (::std::auto_ptr< DiameterMax_type > p);

      // Sweep
      //
      typedef ::xsd::qif2::SweepType Sweep_type;
      typedef ::xsd::cxx::tree::optional< Sweep_type > Sweep_optional;
      typedef ::xsd::cxx::tree::traits< Sweep_type, char > Sweep_traits;

      const Sweep_optional&
      Sweep () const;

      Sweep_optional&
      Sweep ();

      void
      Sweep (const Sweep_type& x);

      void
      Sweep (const Sweep_optional& x);

      void
      Sweep (::std::auto_ptr< Sweep_type > p);

      // Form
      //
      typedef ::xsd::qif2::ActualLinearValueType Form_type;
      typedef ::xsd::cxx::tree::optional< Form_type > Form_optional;
      typedef ::xsd::cxx::tree::traits< Form_type, char > Form_traits;

      const Form_optional&
      Form () const;

      Form_optional&
      Form ();

      void
      Form (const Form_type& x);

      void
      Form (const Form_optional& x);

      void
      Form (::std::auto_ptr< Form_type > p);

      // Constructors.
      //
      CylindricalSegmentFeatureActualType (const id_type&,
                                           const FeatureItemId_type&);

      CylindricalSegmentFeatureActualType (const id_type&,
                                           ::std::auto_ptr< FeatureItemId_type >);

      CylindricalSegmentFeatureActualType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      CylindricalSegmentFeatureActualType (const CylindricalSegmentFeatureActualType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual CylindricalSegmentFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylindricalSegmentFeatureActualType&
      operator= (const CylindricalSegmentFeatureActualType& x);

      virtual 
      ~CylindricalSegmentFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Axis_optional Axis_;
      Diameter_optional Diameter_;
      Length_optional Length_;
      DiameterMin_optional DiameterMin_;
      DiameterMax_optional DiameterMax_;
      Sweep_optional Sweep_;
      Form_optional Form_;
    };

    class EdgePointConstructionMethodType: public ::xml_schema::type
    {
      public:
      // Copy
      //
      typedef ::xsd::qif2::EdgePointCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::EdgePointCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // Transform
      //
      typedef ::xsd::qif2::EdgePointTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // FromScan
      //
      typedef ::xsd::qif2::EdgePointFromScanType FromScan_type;
      typedef ::xsd::cxx::tree::optional< FromScan_type > FromScan_optional;
      typedef ::xsd::cxx::tree::traits< FromScan_type, char > FromScan_traits;

      const FromScan_optional&
      FromScan () const;

      FromScan_optional&
      FromScan ();

      void
      FromScan (const FromScan_type& x);

      void
      FromScan (const FromScan_optional& x);

      void
      FromScan (::std::auto_ptr< FromScan_type > p);

      // Constructors.
      //
      EdgePointConstructionMethodType ();

      EdgePointConstructionMethodType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      EdgePointConstructionMethodType (const EdgePointConstructionMethodType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual EdgePointConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EdgePointConstructionMethodType&
      operator= (const EdgePointConstructionMethodType& x);

      virtual 
      ~EdgePointConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Copy_optional Copy_;
      Cast_optional Cast_;
      Transform_optional Transform_;
      FromScan_optional FromScan_;
    };

    class EdgePointCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseEdgePoint
      //
      typedef ::xsd::qif2::BaseFeatureType BaseEdgePoint_type;
      typedef ::xsd::cxx::tree::traits< BaseEdgePoint_type, char > BaseEdgePoint_traits;

      const BaseEdgePoint_type&
      BaseEdgePoint () const;

      BaseEdgePoint_type&
      BaseEdgePoint ();

      void
      BaseEdgePoint (const BaseEdgePoint_type& x);

      void
      BaseEdgePoint (::std::auto_ptr< BaseEdgePoint_type > p);

      // Constructors.
      //
      EdgePointCopyType (const BaseEdgePoint_type&);

      EdgePointCopyType (::std::auto_ptr< BaseEdgePoint_type >);

      EdgePointCopyType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      EdgePointCopyType (const EdgePointCopyType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual EdgePointCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EdgePointCopyType&
      operator= (const EdgePointCopyType& x);

      virtual 
      ~EdgePointCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseEdgePoint_type > BaseEdgePoint_;
    };

    class EdgePointCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      EdgePointCastType (const BaseFeature_type&);

      EdgePointCastType (::std::auto_ptr< BaseFeature_type >);

      EdgePointCastType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      EdgePointCastType (const EdgePointCastType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual EdgePointCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EdgePointCastType&
      operator= (const EdgePointCastType& x);

      virtual 
      ~EdgePointCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class EdgePointTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseEdgePoint
      //
      typedef ::xsd::qif2::BaseFeatureType BaseEdgePoint_type;
      typedef ::xsd::cxx::tree::traits< BaseEdgePoint_type, char > BaseEdgePoint_traits;

      const BaseEdgePoint_type&
      BaseEdgePoint () const;

      BaseEdgePoint_type&
      BaseEdgePoint ();

      void
      BaseEdgePoint (const BaseEdgePoint_type& x);

      void
      BaseEdgePoint (::std::auto_ptr< BaseEdgePoint_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      EdgePointTransformType (const BaseEdgePoint_type&,
                              const Transformation_type&);

      EdgePointTransformType (::std::auto_ptr< BaseEdgePoint_type >,
                              ::std::auto_ptr< Transformation_type >);

      EdgePointTransformType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      EdgePointTransformType (const EdgePointTransformType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual EdgePointTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EdgePointTransformType&
      operator= (const EdgePointTransformType& x);

      virtual 
      ~EdgePointTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseEdgePoint_type > BaseEdgePoint_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class EdgePointFromScanType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // SurfaceFeature
      //
      typedef ::xsd::qif2::BaseFeatureType SurfaceFeature_type;
      typedef ::xsd::cxx::tree::traits< SurfaceFeature_type, char > SurfaceFeature_traits;

      const SurfaceFeature_type&
      SurfaceFeature () const;

      SurfaceFeature_type&
      SurfaceFeature ();

      void
      SurfaceFeature (const SurfaceFeature_type& x);

      void
      SurfaceFeature (::std::auto_ptr< SurfaceFeature_type > p);

      // SearchRadius
      //
      typedef ::xsd::qif2::LinearValueType SearchRadius_type;
      typedef ::xsd::cxx::tree::traits< SearchRadius_type, char > SearchRadius_traits;

      const SearchRadius_type&
      SearchRadius () const;

      SearchRadius_type&
      SearchRadius ();

      void
      SearchRadius (const SearchRadius_type& x);

      void
      SearchRadius (::std::auto_ptr< SearchRadius_type > p);

      // PatchRadius
      //
      typedef ::xsd::qif2::LinearValueType PatchRadius_type;
      typedef ::xsd::cxx::tree::traits< PatchRadius_type, char > PatchRadius_traits;

      const PatchRadius_type&
      PatchRadius () const;

      PatchRadius_type&
      PatchRadius ();

      void
      PatchRadius (const PatchRadius_type& x);

      void
      PatchRadius (::std::auto_ptr< PatchRadius_type > p);

      // Distance
      //
      typedef ::xsd::qif2::LinearValueType Distance_type;
      typedef ::xsd::cxx::tree::traits< Distance_type, char > Distance_traits;

      const Distance_type&
      Distance () const;

      Distance_type&
      Distance ();

      void
      Distance (const Distance_type& x);

      void
      Distance (::std::auto_ptr< Distance_type > p);

      // Depth
      //
      typedef ::xsd::qif2::LinearValueType Depth_type;
      typedef ::xsd::cxx::tree::traits< Depth_type, char > Depth_traits;

      const Depth_type&
      Depth () const;

      Depth_type&
      Depth ();

      void
      Depth (const Depth_type& x);

      void
      Depth (::std::auto_ptr< Depth_type > p);

      // RetrievalMethod
      //
      typedef ::xsd::qif2::RetrievalMethodEnumType RetrievalMethod_type;
      typedef ::xsd::cxx::tree::traits< RetrievalMethod_type, char > RetrievalMethod_traits;

      const RetrievalMethod_type&
      RetrievalMethod () const;

      RetrievalMethod_type&
      RetrievalMethod ();

      void
      RetrievalMethod (const RetrievalMethod_type& x);

      void
      RetrievalMethod (::std::auto_ptr< RetrievalMethod_type > p);

      // Constructors.
      //
      EdgePointFromScanType (const SurfaceFeature_type&,
                             const SearchRadius_type&,
                             const PatchRadius_type&,
                             const Distance_type&,
                             const Depth_type&,
                             const RetrievalMethod_type&);

      EdgePointFromScanType (::std::auto_ptr< SurfaceFeature_type >,
                             ::std::auto_ptr< SearchRadius_type >,
                             ::std::auto_ptr< PatchRadius_type >,
                             ::std::auto_ptr< Distance_type >,
                             ::std::auto_ptr< Depth_type >,
                             const RetrievalMethod_type&);

      EdgePointFromScanType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      EdgePointFromScanType (const EdgePointFromScanType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual EdgePointFromScanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EdgePointFromScanType&
      operator= (const EdgePointFromScanType& x);

      virtual 
      ~EdgePointFromScanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SurfaceFeature_type > SurfaceFeature_;
      ::xsd::cxx::tree::one< SearchRadius_type > SearchRadius_;
      ::xsd::cxx::tree::one< PatchRadius_type > PatchRadius_;
      ::xsd::cxx::tree::one< Distance_type > Distance_;
      ::xsd::cxx::tree::one< Depth_type > Depth_;
      ::xsd::cxx::tree::one< RetrievalMethod_type > RetrievalMethod_;
    };

    class EdgePointCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::EdgePointConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      EdgePointCheckedType ();

      EdgePointCheckedType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      EdgePointCheckedType (const EdgePointCheckedType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual EdgePointCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EdgePointCheckedType&
      operator= (const EdgePointCheckedType& x);

      virtual 
      ~EdgePointCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class EdgePointCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::EdgePointCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      EdgePointCheckedFeatureType ();

      EdgePointCheckedFeatureType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      EdgePointCheckedFeatureType (const EdgePointCheckedFeatureType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual EdgePointCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EdgePointCheckedFeatureType&
      operator= (const EdgePointCheckedFeatureType& x);

      virtual 
      ~EdgePointCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class EdgePointActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::EdgePointCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      EdgePointActualDeterminationType ();

      EdgePointActualDeterminationType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      EdgePointActualDeterminationType (const EdgePointActualDeterminationType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual EdgePointActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EdgePointActualDeterminationType&
      operator= (const EdgePointActualDeterminationType& x);

      virtual 
      ~EdgePointActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class EdgePointFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::EdgePointActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // Constructors.
      //
      EdgePointFeatureItemType (const id_type&,
                                const FeatureName_type&,
                                const DeterminationMode_type&);

      EdgePointFeatureItemType (const id_type&,
                                const FeatureName_type&,
                                ::std::auto_ptr< DeterminationMode_type >);

      EdgePointFeatureItemType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      EdgePointFeatureItemType (const EdgePointFeatureItemType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual EdgePointFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EdgePointFeatureItemType&
      operator= (const EdgePointFeatureItemType& x);

      virtual 
      ~EdgePointFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
    };

    class EdgePointFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // InternalExternal
      //
      typedef ::xsd::qif2::InternalExternalEnumType InternalExternal_type;
      typedef ::xsd::cxx::tree::traits< InternalExternal_type, char > InternalExternal_traits;

      const InternalExternal_type&
      InternalExternal () const;

      InternalExternal_type&
      InternalExternal ();

      void
      InternalExternal (const InternalExternal_type& x);

      void
      InternalExternal (::std::auto_ptr< InternalExternal_type > p);

      // Constructors.
      //
      EdgePointFeatureDefinitionType (const id_type&,
                                      const InternalExternal_type&);

      EdgePointFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      EdgePointFeatureDefinitionType (const EdgePointFeatureDefinitionType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual EdgePointFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EdgePointFeatureDefinitionType&
      operator= (const EdgePointFeatureDefinitionType& x);

      virtual 
      ~EdgePointFeatureDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< InternalExternal_type > InternalExternal_;
    };

    class EdgePointFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::PointType Location_type;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_type&
      Location () const;

      Location_type&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // Normal
      //
      typedef ::xsd::qif2::UnitVectorType Normal_type;
      typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

      const Normal_type&
      Normal () const;

      Normal_type&
      Normal ();

      void
      Normal (const Normal_type& x);

      void
      Normal (::std::auto_ptr< Normal_type > p);

      // AdjacentNormal
      //
      typedef ::xsd::qif2::UnitVectorType AdjacentNormal_type;
      typedef ::xsd::cxx::tree::optional< AdjacentNormal_type > AdjacentNormal_optional;
      typedef ::xsd::cxx::tree::traits< AdjacentNormal_type, char > AdjacentNormal_traits;

      const AdjacentNormal_optional&
      AdjacentNormal () const;

      AdjacentNormal_optional&
      AdjacentNormal ();

      void
      AdjacentNormal (const AdjacentNormal_type& x);

      void
      AdjacentNormal (const AdjacentNormal_optional& x);

      void
      AdjacentNormal (::std::auto_ptr< AdjacentNormal_type > p);

      // Constructors.
      //
      EdgePointFeatureNominalType (const id_type&,
                                   const FeatureDefinitionId_type&,
                                   const Location_type&,
                                   const Normal_type&);

      EdgePointFeatureNominalType (const id_type&,
                                   const FeatureDefinitionId_type&,
                                   ::std::auto_ptr< Location_type >,
                                   ::std::auto_ptr< Normal_type >);

      EdgePointFeatureNominalType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      EdgePointFeatureNominalType (const EdgePointFeatureNominalType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual EdgePointFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EdgePointFeatureNominalType&
      operator= (const EdgePointFeatureNominalType& x);

      virtual 
      ~EdgePointFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Location_type > Location_;
      ::xsd::cxx::tree::one< Normal_type > Normal_;
      AdjacentNormal_optional AdjacentNormal_;
    };

    class EdgePointFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::ActualPointType Location_type;
      typedef ::xsd::cxx::tree::optional< Location_type > Location_optional;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_optional&
      Location () const;

      Location_optional&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (const Location_optional& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // Normal
      //
      typedef ::xsd::qif2::ActualUnitVectorType Normal_type;
      typedef ::xsd::cxx::tree::optional< Normal_type > Normal_optional;
      typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

      const Normal_optional&
      Normal () const;

      Normal_optional&
      Normal ();

      void
      Normal (const Normal_type& x);

      void
      Normal (const Normal_optional& x);

      void
      Normal (::std::auto_ptr< Normal_type > p);

      // AdjacentNormal
      //
      typedef ::xsd::qif2::ActualUnitVectorType AdjacentNormal_type;
      typedef ::xsd::cxx::tree::optional< AdjacentNormal_type > AdjacentNormal_optional;
      typedef ::xsd::cxx::tree::traits< AdjacentNormal_type, char > AdjacentNormal_traits;

      const AdjacentNormal_optional&
      AdjacentNormal () const;

      AdjacentNormal_optional&
      AdjacentNormal ();

      void
      AdjacentNormal (const AdjacentNormal_type& x);

      void
      AdjacentNormal (const AdjacentNormal_optional& x);

      void
      AdjacentNormal (::std::auto_ptr< AdjacentNormal_type > p);

      // Constructors.
      //
      EdgePointFeatureActualType (const id_type&,
                                  const FeatureItemId_type&);

      EdgePointFeatureActualType (const id_type&,
                                  ::std::auto_ptr< FeatureItemId_type >);

      EdgePointFeatureActualType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      EdgePointFeatureActualType (const EdgePointFeatureActualType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual EdgePointFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EdgePointFeatureActualType&
      operator= (const EdgePointFeatureActualType& x);

      virtual 
      ~EdgePointFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Location_optional Location_;
      Normal_optional Normal_;
      AdjacentNormal_optional AdjacentNormal_;
    };

    class EllipseConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::EllipseBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::EllipseRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Intersection
      //
      typedef ::xsd::qif2::EllipseIntersectionType Intersection_type;
      typedef ::xsd::cxx::tree::optional< Intersection_type > Intersection_optional;
      typedef ::xsd::cxx::tree::traits< Intersection_type, char > Intersection_traits;

      const Intersection_optional&
      Intersection () const;

      Intersection_optional&
      Intersection ();

      void
      Intersection (const Intersection_type& x);

      void
      Intersection (const Intersection_optional& x);

      void
      Intersection (::std::auto_ptr< Intersection_type > p);

      // Projection
      //
      typedef ::xsd::qif2::EllipseProjectionType Projection_type;
      typedef ::xsd::cxx::tree::optional< Projection_type > Projection_optional;
      typedef ::xsd::cxx::tree::traits< Projection_type, char > Projection_traits;

      const Projection_optional&
      Projection () const;

      Projection_optional&
      Projection ();

      void
      Projection (const Projection_type& x);

      void
      Projection (const Projection_optional& x);

      void
      Projection (::std::auto_ptr< Projection_type > p);

      // Copy
      //
      typedef ::xsd::qif2::EllipseCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::EllipseCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // Transform
      //
      typedef ::xsd::qif2::EllipseTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // FromScan
      //
      typedef ::xsd::qif2::EllipseFromScanType FromScan_type;
      typedef ::xsd::cxx::tree::optional< FromScan_type > FromScan_optional;
      typedef ::xsd::cxx::tree::traits< FromScan_type, char > FromScan_traits;

      const FromScan_optional&
      FromScan () const;

      FromScan_optional&
      FromScan ();

      void
      FromScan (const FromScan_type& x);

      void
      FromScan (const FromScan_optional& x);

      void
      FromScan (::std::auto_ptr< FromScan_type > p);

      // Constructors.
      //
      EllipseConstructionMethodType ();

      EllipseConstructionMethodType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      EllipseConstructionMethodType (const EllipseConstructionMethodType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual EllipseConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EllipseConstructionMethodType&
      operator= (const EllipseConstructionMethodType& x);

      virtual 
      ~EllipseConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Intersection_optional Intersection_;
      Projection_optional Projection_;
      Copy_optional Copy_;
      Cast_optional Cast_;
      Transform_optional Transform_;
      FromScan_optional FromScan_;
    };

    class EllipseBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      EllipseBestFitType ();

      EllipseBestFitType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      EllipseBestFitType (const EllipseBestFitType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual EllipseBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EllipseBestFitType&
      operator= (const EllipseBestFitType& x);

      virtual 
      ~EllipseBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class EllipseRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      EllipseRecompType (const BaseFeaturePointList_type&);

      EllipseRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      EllipseRecompType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      EllipseRecompType (const EllipseRecompType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual EllipseRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EllipseRecompType&
      operator= (const EllipseRecompType& x);

      virtual 
      ~EllipseRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class EllipseProjectionType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // ProjectionFeature
      //
      typedef ::xsd::qif2::BaseFeatureType ProjectionFeature_type;
      typedef ::xsd::cxx::tree::traits< ProjectionFeature_type, char > ProjectionFeature_traits;

      const ProjectionFeature_type&
      ProjectionFeature () const;

      ProjectionFeature_type&
      ProjectionFeature ();

      void
      ProjectionFeature (const ProjectionFeature_type& x);

      void
      ProjectionFeature (::std::auto_ptr< ProjectionFeature_type > p);

      // ProjectionPlane
      //
      typedef ::xsd::qif2::BaseFeatureType ProjectionPlane_type;
      typedef ::xsd::cxx::tree::traits< ProjectionPlane_type, char > ProjectionPlane_traits;

      const ProjectionPlane_type&
      ProjectionPlane () const;

      ProjectionPlane_type&
      ProjectionPlane ();

      void
      ProjectionPlane (const ProjectionPlane_type& x);

      void
      ProjectionPlane (::std::auto_ptr< ProjectionPlane_type > p);

      // Constructors.
      //
      EllipseProjectionType (const ProjectionFeature_type&,
                             const ProjectionPlane_type&);

      EllipseProjectionType (::std::auto_ptr< ProjectionFeature_type >,
                             ::std::auto_ptr< ProjectionPlane_type >);

      EllipseProjectionType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      EllipseProjectionType (const EllipseProjectionType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual EllipseProjectionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EllipseProjectionType&
      operator= (const EllipseProjectionType& x);

      virtual 
      ~EllipseProjectionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ProjectionFeature_type > ProjectionFeature_;
      ::xsd::cxx::tree::one< ProjectionPlane_type > ProjectionPlane_;
    };

    class EllipseIntersectionType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // IntersectionPlane
      //
      typedef ::xsd::qif2::BaseFeatureType IntersectionPlane_type;
      typedef ::xsd::cxx::tree::traits< IntersectionPlane_type, char > IntersectionPlane_traits;

      const IntersectionPlane_type&
      IntersectionPlane () const;

      IntersectionPlane_type&
      IntersectionPlane ();

      void
      IntersectionPlane (const IntersectionPlane_type& x);

      void
      IntersectionPlane (::std::auto_ptr< IntersectionPlane_type > p);

      // IntersectionFeature
      //
      typedef ::xsd::qif2::BaseFeatureType IntersectionFeature_type;
      typedef ::xsd::cxx::tree::traits< IntersectionFeature_type, char > IntersectionFeature_traits;

      const IntersectionFeature_type&
      IntersectionFeature () const;

      IntersectionFeature_type&
      IntersectionFeature ();

      void
      IntersectionFeature (const IntersectionFeature_type& x);

      void
      IntersectionFeature (::std::auto_ptr< IntersectionFeature_type > p);

      // Constructors.
      //
      EllipseIntersectionType (const IntersectionPlane_type&,
                               const IntersectionFeature_type&);

      EllipseIntersectionType (::std::auto_ptr< IntersectionPlane_type >,
                               ::std::auto_ptr< IntersectionFeature_type >);

      EllipseIntersectionType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      EllipseIntersectionType (const EllipseIntersectionType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual EllipseIntersectionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EllipseIntersectionType&
      operator= (const EllipseIntersectionType& x);

      virtual 
      ~EllipseIntersectionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< IntersectionPlane_type > IntersectionPlane_;
      ::xsd::cxx::tree::one< IntersectionFeature_type > IntersectionFeature_;
    };

    class EllipseCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseEllipse
      //
      typedef ::xsd::qif2::BaseFeatureType BaseEllipse_type;
      typedef ::xsd::cxx::tree::traits< BaseEllipse_type, char > BaseEllipse_traits;

      const BaseEllipse_type&
      BaseEllipse () const;

      BaseEllipse_type&
      BaseEllipse ();

      void
      BaseEllipse (const BaseEllipse_type& x);

      void
      BaseEllipse (::std::auto_ptr< BaseEllipse_type > p);

      // Constructors.
      //
      EllipseCopyType (const BaseEllipse_type&);

      EllipseCopyType (::std::auto_ptr< BaseEllipse_type >);

      EllipseCopyType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      EllipseCopyType (const EllipseCopyType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual EllipseCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EllipseCopyType&
      operator= (const EllipseCopyType& x);

      virtual 
      ~EllipseCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseEllipse_type > BaseEllipse_;
    };

    class EllipseCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      EllipseCastType (const BaseFeature_type&);

      EllipseCastType (::std::auto_ptr< BaseFeature_type >);

      EllipseCastType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      EllipseCastType (const EllipseCastType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual EllipseCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EllipseCastType&
      operator= (const EllipseCastType& x);

      virtual 
      ~EllipseCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class EllipseTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseEllipse
      //
      typedef ::xsd::qif2::BaseFeatureType BaseEllipse_type;
      typedef ::xsd::cxx::tree::traits< BaseEllipse_type, char > BaseEllipse_traits;

      const BaseEllipse_type&
      BaseEllipse () const;

      BaseEllipse_type&
      BaseEllipse ();

      void
      BaseEllipse (const BaseEllipse_type& x);

      void
      BaseEllipse (::std::auto_ptr< BaseEllipse_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      EllipseTransformType (const BaseEllipse_type&,
                            const Transformation_type&);

      EllipseTransformType (::std::auto_ptr< BaseEllipse_type >,
                            ::std::auto_ptr< Transformation_type >);

      EllipseTransformType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      EllipseTransformType (const EllipseTransformType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual EllipseTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EllipseTransformType&
      operator= (const EllipseTransformType& x);

      virtual 
      ~EllipseTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseEllipse_type > BaseEllipse_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class EllipseFromScanType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // SurfaceFeature
      //
      typedef ::xsd::qif2::BaseFeatureType SurfaceFeature_type;
      typedef ::xsd::cxx::tree::traits< SurfaceFeature_type, char > SurfaceFeature_traits;

      const SurfaceFeature_type&
      SurfaceFeature () const;

      SurfaceFeature_type&
      SurfaceFeature ();

      void
      SurfaceFeature (const SurfaceFeature_type& x);

      void
      SurfaceFeature (::std::auto_ptr< SurfaceFeature_type > p);

      // SearchRadius
      //
      typedef ::xsd::qif2::LinearValueType SearchRadius_type;
      typedef ::xsd::cxx::tree::traits< SearchRadius_type, char > SearchRadius_traits;

      const SearchRadius_type&
      SearchRadius () const;

      SearchRadius_type&
      SearchRadius ();

      void
      SearchRadius (const SearchRadius_type& x);

      void
      SearchRadius (::std::auto_ptr< SearchRadius_type > p);

      // Depth
      //
      typedef ::xsd::qif2::LinearValueType Depth_type;
      typedef ::xsd::cxx::tree::traits< Depth_type, char > Depth_traits;

      const Depth_type&
      Depth () const;

      Depth_type&
      Depth ();

      void
      Depth (const Depth_type& x);

      void
      Depth (::std::auto_ptr< Depth_type > p);

      // Constructors.
      //
      EllipseFromScanType (const SurfaceFeature_type&,
                           const SearchRadius_type&,
                           const Depth_type&);

      EllipseFromScanType (::std::auto_ptr< SurfaceFeature_type >,
                           ::std::auto_ptr< SearchRadius_type >,
                           ::std::auto_ptr< Depth_type >);

      EllipseFromScanType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      EllipseFromScanType (const EllipseFromScanType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual EllipseFromScanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EllipseFromScanType&
      operator= (const EllipseFromScanType& x);

      virtual 
      ~EllipseFromScanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SurfaceFeature_type > SurfaceFeature_;
      ::xsd::cxx::tree::one< SearchRadius_type > SearchRadius_;
      ::xsd::cxx::tree::one< Depth_type > Depth_;
    };

    class EllipseCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::EllipseConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      EllipseCheckedType ();

      EllipseCheckedType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      EllipseCheckedType (const EllipseCheckedType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual EllipseCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EllipseCheckedType&
      operator= (const EllipseCheckedType& x);

      virtual 
      ~EllipseCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class EllipseCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::EllipseCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      EllipseCheckedFeatureType ();

      EllipseCheckedFeatureType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      EllipseCheckedFeatureType (const EllipseCheckedFeatureType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual EllipseCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EllipseCheckedFeatureType&
      operator= (const EllipseCheckedFeatureType& x);

      virtual 
      ~EllipseCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class EllipseActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::EllipseCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      EllipseActualDeterminationType ();

      EllipseActualDeterminationType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      EllipseActualDeterminationType (const EllipseActualDeterminationType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual EllipseActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EllipseActualDeterminationType&
      operator= (const EllipseActualDeterminationType& x);

      virtual 
      ~EllipseActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class EllipseFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::EllipseActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::FeatureOfSizeSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      EllipseFeatureItemType (const id_type&,
                              const FeatureName_type&,
                              const DeterminationMode_type&);

      EllipseFeatureItemType (const id_type&,
                              const FeatureName_type&,
                              ::std::auto_ptr< DeterminationMode_type >);

      EllipseFeatureItemType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      EllipseFeatureItemType (const EllipseFeatureItemType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual EllipseFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EllipseFeatureItemType&
      operator= (const EllipseFeatureItemType& x);

      virtual 
      ~EllipseFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class EllipseFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // InternalExternal
      //
      typedef ::xsd::qif2::InternalExternalEnumType InternalExternal_type;
      typedef ::xsd::cxx::tree::traits< InternalExternal_type, char > InternalExternal_traits;

      const InternalExternal_type&
      InternalExternal () const;

      InternalExternal_type&
      InternalExternal ();

      void
      InternalExternal (const InternalExternal_type& x);

      void
      InternalExternal (::std::auto_ptr< InternalExternal_type > p);

      // MajorDiameter
      //
      typedef ::xsd::qif2::LinearValueType MajorDiameter_type;
      typedef ::xsd::cxx::tree::traits< MajorDiameter_type, char > MajorDiameter_traits;

      const MajorDiameter_type&
      MajorDiameter () const;

      MajorDiameter_type&
      MajorDiameter ();

      void
      MajorDiameter (const MajorDiameter_type& x);

      void
      MajorDiameter (::std::auto_ptr< MajorDiameter_type > p);

      // MinorDiameter
      //
      typedef ::xsd::qif2::LinearValueType MinorDiameter_type;
      typedef ::xsd::cxx::tree::traits< MinorDiameter_type, char > MinorDiameter_traits;

      const MinorDiameter_type&
      MinorDiameter () const;

      MinorDiameter_type&
      MinorDiameter ();

      void
      MinorDiameter (const MinorDiameter_type& x);

      void
      MinorDiameter (::std::auto_ptr< MinorDiameter_type > p);

      // Constructors.
      //
      EllipseFeatureDefinitionType (const id_type&,
                                    const InternalExternal_type&,
                                    const MajorDiameter_type&,
                                    const MinorDiameter_type&);

      EllipseFeatureDefinitionType (const id_type&,
                                    const InternalExternal_type&,
                                    ::std::auto_ptr< MajorDiameter_type >,
                                    ::std::auto_ptr< MinorDiameter_type >);

      EllipseFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      EllipseFeatureDefinitionType (const EllipseFeatureDefinitionType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual EllipseFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EllipseFeatureDefinitionType&
      operator= (const EllipseFeatureDefinitionType& x);

      virtual 
      ~EllipseFeatureDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< InternalExternal_type > InternalExternal_;
      ::xsd::cxx::tree::one< MajorDiameter_type > MajorDiameter_;
      ::xsd::cxx::tree::one< MinorDiameter_type > MinorDiameter_;
    };

    class EllipseFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // Axis
      //
      typedef ::xsd::qif2::AxisType Axis_type;
      typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

      const Axis_type&
      Axis () const;

      Axis_type&
      Axis ();

      void
      Axis (const Axis_type& x);

      void
      Axis (::std::auto_ptr< Axis_type > p);

      // Normal
      //
      typedef ::xsd::qif2::UnitVectorType Normal_type;
      typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

      const Normal_type&
      Normal () const;

      Normal_type&
      Normal ();

      void
      Normal (const Normal_type& x);

      void
      Normal (::std::auto_ptr< Normal_type > p);

      // Constructors.
      //
      EllipseFeatureNominalType (const id_type&,
                                 const FeatureDefinitionId_type&,
                                 const Axis_type&,
                                 const Normal_type&);

      EllipseFeatureNominalType (const id_type&,
                                 const FeatureDefinitionId_type&,
                                 ::std::auto_ptr< Axis_type >,
                                 ::std::auto_ptr< Normal_type >);

      EllipseFeatureNominalType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      EllipseFeatureNominalType (const EllipseFeatureNominalType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual EllipseFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EllipseFeatureNominalType&
      operator= (const EllipseFeatureNominalType& x);

      virtual 
      ~EllipseFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Axis_type > Axis_;
      ::xsd::cxx::tree::one< Normal_type > Normal_;
    };

    class EllipseFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Axis
      //
      typedef ::xsd::qif2::ActualAxisType Axis_type;
      typedef ::xsd::cxx::tree::optional< Axis_type > Axis_optional;
      typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

      const Axis_optional&
      Axis () const;

      Axis_optional&
      Axis ();

      void
      Axis (const Axis_type& x);

      void
      Axis (const Axis_optional& x);

      void
      Axis (::std::auto_ptr< Axis_type > p);

      // Normal
      //
      typedef ::xsd::qif2::ActualUnitVectorType Normal_type;
      typedef ::xsd::cxx::tree::optional< Normal_type > Normal_optional;
      typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

      const Normal_optional&
      Normal () const;

      Normal_optional&
      Normal ();

      void
      Normal (const Normal_type& x);

      void
      Normal (const Normal_optional& x);

      void
      Normal (::std::auto_ptr< Normal_type > p);

      // MajorDiameter
      //
      typedef ::xsd::qif2::ActualLinearValueType MajorDiameter_type;
      typedef ::xsd::cxx::tree::optional< MajorDiameter_type > MajorDiameter_optional;
      typedef ::xsd::cxx::tree::traits< MajorDiameter_type, char > MajorDiameter_traits;

      const MajorDiameter_optional&
      MajorDiameter () const;

      MajorDiameter_optional&
      MajorDiameter ();

      void
      MajorDiameter (const MajorDiameter_type& x);

      void
      MajorDiameter (const MajorDiameter_optional& x);

      void
      MajorDiameter (::std::auto_ptr< MajorDiameter_type > p);

      // MinorDiameter
      //
      typedef ::xsd::qif2::ActualLinearValueType MinorDiameter_type;
      typedef ::xsd::cxx::tree::optional< MinorDiameter_type > MinorDiameter_optional;
      typedef ::xsd::cxx::tree::traits< MinorDiameter_type, char > MinorDiameter_traits;

      const MinorDiameter_optional&
      MinorDiameter () const;

      MinorDiameter_optional&
      MinorDiameter ();

      void
      MinorDiameter (const MinorDiameter_type& x);

      void
      MinorDiameter (const MinorDiameter_optional& x);

      void
      MinorDiameter (::std::auto_ptr< MinorDiameter_type > p);

      // Form
      //
      typedef ::xsd::qif2::ActualLinearValueType Form_type;
      typedef ::xsd::cxx::tree::optional< Form_type > Form_optional;
      typedef ::xsd::cxx::tree::traits< Form_type, char > Form_traits;

      const Form_optional&
      Form () const;

      Form_optional&
      Form ();

      void
      Form (const Form_type& x);

      void
      Form (const Form_optional& x);

      void
      Form (::std::auto_ptr< Form_type > p);

      // Constructors.
      //
      EllipseFeatureActualType (const id_type&,
                                const FeatureItemId_type&);

      EllipseFeatureActualType (const id_type&,
                                ::std::auto_ptr< FeatureItemId_type >);

      EllipseFeatureActualType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      EllipseFeatureActualType (const EllipseFeatureActualType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual EllipseFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EllipseFeatureActualType&
      operator= (const EllipseFeatureActualType& x);

      virtual 
      ~EllipseFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Axis_optional Axis_;
      Normal_optional Normal_;
      MajorDiameter_optional MajorDiameter_;
      MinorDiameter_optional MinorDiameter_;
      Form_optional Form_;
    };

    class ElongatedCylinderConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::ElongatedCylinderBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::ElongatedCylinderRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Copy
      //
      typedef ::xsd::qif2::ElongatedCylinderCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::ElongatedCylinderCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // Transform
      //
      typedef ::xsd::qif2::ElongatedCylinderTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // Constructors.
      //
      ElongatedCylinderConstructionMethodType ();

      ElongatedCylinderConstructionMethodType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      ElongatedCylinderConstructionMethodType (const ElongatedCylinderConstructionMethodType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual ElongatedCylinderConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ElongatedCylinderConstructionMethodType&
      operator= (const ElongatedCylinderConstructionMethodType& x);

      virtual 
      ~ElongatedCylinderConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Copy_optional Copy_;
      Cast_optional Cast_;
      Transform_optional Transform_;
    };

    class ElongatedCylinderBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      ElongatedCylinderBestFitType ();

      ElongatedCylinderBestFitType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      ElongatedCylinderBestFitType (const ElongatedCylinderBestFitType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual ElongatedCylinderBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ElongatedCylinderBestFitType&
      operator= (const ElongatedCylinderBestFitType& x);

      virtual 
      ~ElongatedCylinderBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class ElongatedCylinderRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      ElongatedCylinderRecompType (const BaseFeaturePointList_type&);

      ElongatedCylinderRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      ElongatedCylinderRecompType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      ElongatedCylinderRecompType (const ElongatedCylinderRecompType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual ElongatedCylinderRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ElongatedCylinderRecompType&
      operator= (const ElongatedCylinderRecompType& x);

      virtual 
      ~ElongatedCylinderRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class ElongatedCylinderCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseElongatedCylinder
      //
      typedef ::xsd::qif2::BaseFeatureType BaseElongatedCylinder_type;
      typedef ::xsd::cxx::tree::traits< BaseElongatedCylinder_type, char > BaseElongatedCylinder_traits;

      const BaseElongatedCylinder_type&
      BaseElongatedCylinder () const;

      BaseElongatedCylinder_type&
      BaseElongatedCylinder ();

      void
      BaseElongatedCylinder (const BaseElongatedCylinder_type& x);

      void
      BaseElongatedCylinder (::std::auto_ptr< BaseElongatedCylinder_type > p);

      // Constructors.
      //
      ElongatedCylinderCopyType (const BaseElongatedCylinder_type&);

      ElongatedCylinderCopyType (::std::auto_ptr< BaseElongatedCylinder_type >);

      ElongatedCylinderCopyType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      ElongatedCylinderCopyType (const ElongatedCylinderCopyType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual ElongatedCylinderCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ElongatedCylinderCopyType&
      operator= (const ElongatedCylinderCopyType& x);

      virtual 
      ~ElongatedCylinderCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseElongatedCylinder_type > BaseElongatedCylinder_;
    };

    class ElongatedCylinderCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      ElongatedCylinderCastType (const BaseFeature_type&);

      ElongatedCylinderCastType (::std::auto_ptr< BaseFeature_type >);

      ElongatedCylinderCastType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      ElongatedCylinderCastType (const ElongatedCylinderCastType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual ElongatedCylinderCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ElongatedCylinderCastType&
      operator= (const ElongatedCylinderCastType& x);

      virtual 
      ~ElongatedCylinderCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class ElongatedCylinderTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseElongatedCylinder
      //
      typedef ::xsd::qif2::BaseFeatureType BaseElongatedCylinder_type;
      typedef ::xsd::cxx::tree::traits< BaseElongatedCylinder_type, char > BaseElongatedCylinder_traits;

      const BaseElongatedCylinder_type&
      BaseElongatedCylinder () const;

      BaseElongatedCylinder_type&
      BaseElongatedCylinder ();

      void
      BaseElongatedCylinder (const BaseElongatedCylinder_type& x);

      void
      BaseElongatedCylinder (::std::auto_ptr< BaseElongatedCylinder_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      ElongatedCylinderTransformType (const BaseElongatedCylinder_type&,
                                      const Transformation_type&);

      ElongatedCylinderTransformType (::std::auto_ptr< BaseElongatedCylinder_type >,
                                      ::std::auto_ptr< Transformation_type >);

      ElongatedCylinderTransformType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      ElongatedCylinderTransformType (const ElongatedCylinderTransformType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual ElongatedCylinderTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ElongatedCylinderTransformType&
      operator= (const ElongatedCylinderTransformType& x);

      virtual 
      ~ElongatedCylinderTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseElongatedCylinder_type > BaseElongatedCylinder_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class ElongatedCylinderCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::ElongatedCylinderConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      ElongatedCylinderCheckedType ();

      ElongatedCylinderCheckedType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      ElongatedCylinderCheckedType (const ElongatedCylinderCheckedType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual ElongatedCylinderCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ElongatedCylinderCheckedType&
      operator= (const ElongatedCylinderCheckedType& x);

      virtual 
      ~ElongatedCylinderCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class ElongatedCylinderCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::ElongatedCylinderCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      ElongatedCylinderCheckedFeatureType ();

      ElongatedCylinderCheckedFeatureType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      ElongatedCylinderCheckedFeatureType (const ElongatedCylinderCheckedFeatureType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual ElongatedCylinderCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ElongatedCylinderCheckedFeatureType&
      operator= (const ElongatedCylinderCheckedFeatureType& x);

      virtual 
      ~ElongatedCylinderCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class ElongatedCylinderActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::ElongatedCylinderCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      ElongatedCylinderActualDeterminationType ();

      ElongatedCylinderActualDeterminationType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      ElongatedCylinderActualDeterminationType (const ElongatedCylinderActualDeterminationType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual ElongatedCylinderActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ElongatedCylinderActualDeterminationType&
      operator= (const ElongatedCylinderActualDeterminationType& x);

      virtual 
      ~ElongatedCylinderActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class ElongatedCylinderFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::ElongatedCylinderActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::FeatureOfSizeSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      ElongatedCylinderFeatureItemType (const id_type&,
                                        const FeatureName_type&,
                                        const DeterminationMode_type&);

      ElongatedCylinderFeatureItemType (const id_type&,
                                        const FeatureName_type&,
                                        ::std::auto_ptr< DeterminationMode_type >);

      ElongatedCylinderFeatureItemType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      ElongatedCylinderFeatureItemType (const ElongatedCylinderFeatureItemType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual ElongatedCylinderFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ElongatedCylinderFeatureItemType&
      operator= (const ElongatedCylinderFeatureItemType& x);

      virtual 
      ~ElongatedCylinderFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class ElongatedCylinderFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // InternalExternal
      //
      typedef ::xsd::qif2::InternalExternalEnumType InternalExternal_type;
      typedef ::xsd::cxx::tree::traits< InternalExternal_type, char > InternalExternal_traits;

      const InternalExternal_type&
      InternalExternal () const;

      InternalExternal_type&
      InternalExternal ();

      void
      InternalExternal (const InternalExternal_type& x);

      void
      InternalExternal (::std::auto_ptr< InternalExternal_type > p);

      // Diameter
      //
      typedef ::xsd::qif2::LinearValueType Diameter_type;
      typedef ::xsd::cxx::tree::traits< Diameter_type, char > Diameter_traits;

      const Diameter_type&
      Diameter () const;

      Diameter_type&
      Diameter ();

      void
      Diameter (const Diameter_type& x);

      void
      Diameter (::std::auto_ptr< Diameter_type > p);

      // Length
      //
      typedef ::xsd::qif2::LinearValueType Length_type;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_type&
      Length () const;

      Length_type&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // Width
      //
      typedef ::xsd::qif2::LinearValueType Width_type;
      typedef ::xsd::cxx::tree::optional< Width_type > Width_optional;
      typedef ::xsd::cxx::tree::traits< Width_type, char > Width_traits;

      const Width_optional&
      Width () const;

      Width_optional&
      Width ();

      void
      Width (const Width_type& x);

      void
      Width (const Width_optional& x);

      void
      Width (::std::auto_ptr< Width_type > p);

      // Depth
      //
      typedef ::xsd::qif2::LinearValueType Depth_type;
      typedef ::xsd::cxx::tree::optional< Depth_type > Depth_optional;
      typedef ::xsd::cxx::tree::traits< Depth_type, char > Depth_traits;

      const Depth_optional&
      Depth () const;

      Depth_optional&
      Depth ();

      void
      Depth (const Depth_type& x);

      void
      Depth (const Depth_optional& x);

      void
      Depth (::std::auto_ptr< Depth_type > p);

      // Constructors.
      //
      ElongatedCylinderFeatureDefinitionType (const id_type&,
                                              const InternalExternal_type&,
                                              const Diameter_type&,
                                              const Length_type&);

      ElongatedCylinderFeatureDefinitionType (const id_type&,
                                              const InternalExternal_type&,
                                              ::std::auto_ptr< Diameter_type >,
                                              ::std::auto_ptr< Length_type >);

      ElongatedCylinderFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      ElongatedCylinderFeatureDefinitionType (const ElongatedCylinderFeatureDefinitionType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual ElongatedCylinderFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ElongatedCylinderFeatureDefinitionType&
      operator= (const ElongatedCylinderFeatureDefinitionType& x);

      virtual 
      ~ElongatedCylinderFeatureDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< InternalExternal_type > InternalExternal_;
      ::xsd::cxx::tree::one< Diameter_type > Diameter_;
      ::xsd::cxx::tree::one< Length_type > Length_;
      Width_optional Width_;
      Depth_optional Depth_;
    };

    class ElongatedCylinderFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // CenterPlane
      //
      typedef ::xsd::qif2::PlaneType CenterPlane_type;
      typedef ::xsd::cxx::tree::traits< CenterPlane_type, char > CenterPlane_traits;

      const CenterPlane_type&
      CenterPlane () const;

      CenterPlane_type&
      CenterPlane ();

      void
      CenterPlane (const CenterPlane_type& x);

      void
      CenterPlane (::std::auto_ptr< CenterPlane_type > p);

      // DepthVector
      //
      typedef ::xsd::qif2::UnitVectorType DepthVector_type;
      typedef ::xsd::cxx::tree::traits< DepthVector_type, char > DepthVector_traits;

      const DepthVector_type&
      DepthVector () const;

      DepthVector_type&
      DepthVector ();

      void
      DepthVector (const DepthVector_type& x);

      void
      DepthVector (::std::auto_ptr< DepthVector_type > p);

      // Constructors.
      //
      ElongatedCylinderFeatureNominalType (const id_type&,
                                           const FeatureDefinitionId_type&,
                                           const CenterPlane_type&,
                                           const DepthVector_type&);

      ElongatedCylinderFeatureNominalType (const id_type&,
                                           const FeatureDefinitionId_type&,
                                           ::std::auto_ptr< CenterPlane_type >,
                                           ::std::auto_ptr< DepthVector_type >);

      ElongatedCylinderFeatureNominalType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      ElongatedCylinderFeatureNominalType (const ElongatedCylinderFeatureNominalType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual ElongatedCylinderFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ElongatedCylinderFeatureNominalType&
      operator= (const ElongatedCylinderFeatureNominalType& x);

      virtual 
      ~ElongatedCylinderFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< CenterPlane_type > CenterPlane_;
      ::xsd::cxx::tree::one< DepthVector_type > DepthVector_;
    };

    class ElongatedCylinderFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Diameter
      //
      typedef ::xsd::qif2::ActualLinearValueType Diameter_type;
      typedef ::xsd::cxx::tree::optional< Diameter_type > Diameter_optional;
      typedef ::xsd::cxx::tree::traits< Diameter_type, char > Diameter_traits;

      const Diameter_optional&
      Diameter () const;

      Diameter_optional&
      Diameter ();

      void
      Diameter (const Diameter_type& x);

      void
      Diameter (const Diameter_optional& x);

      void
      Diameter (::std::auto_ptr< Diameter_type > p);

      // DiameterMin
      //
      typedef ::xsd::qif2::ActualLinearValueType DiameterMin_type;
      typedef ::xsd::cxx::tree::optional< DiameterMin_type > DiameterMin_optional;
      typedef ::xsd::cxx::tree::traits< DiameterMin_type, char > DiameterMin_traits;

      const DiameterMin_optional&
      DiameterMin () const;

      DiameterMin_optional&
      DiameterMin ();

      void
      DiameterMin (const DiameterMin_type& x);

      void
      DiameterMin (const DiameterMin_optional& x);

      void
      DiameterMin (::std::auto_ptr< DiameterMin_type > p);

      // DiameterMax
      //
      typedef ::xsd::qif2::ActualLinearValueType DiameterMax_type;
      typedef ::xsd::cxx::tree::optional< DiameterMax_type > DiameterMax_optional;
      typedef ::xsd::cxx::tree::traits< DiameterMax_type, char > DiameterMax_traits;

      const DiameterMax_optional&
      DiameterMax () const;

      DiameterMax_optional&
      DiameterMax ();

      void
      DiameterMax (const DiameterMax_type& x);

      void
      DiameterMax (const DiameterMax_optional& x);

      void
      DiameterMax (::std::auto_ptr< DiameterMax_type > p);

      // CenterPlane
      //
      typedef ::xsd::qif2::ActualPlaneType CenterPlane_type;
      typedef ::xsd::cxx::tree::optional< CenterPlane_type > CenterPlane_optional;
      typedef ::xsd::cxx::tree::traits< CenterPlane_type, char > CenterPlane_traits;

      const CenterPlane_optional&
      CenterPlane () const;

      CenterPlane_optional&
      CenterPlane ();

      void
      CenterPlane (const CenterPlane_type& x);

      void
      CenterPlane (const CenterPlane_optional& x);

      void
      CenterPlane (::std::auto_ptr< CenterPlane_type > p);

      // Length
      //
      typedef ::xsd::qif2::ActualLinearValueType Length_type;
      typedef ::xsd::cxx::tree::optional< Length_type > Length_optional;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_optional&
      Length () const;

      Length_optional&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (const Length_optional& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // LengthMax
      //
      typedef ::xsd::qif2::ActualLinearValueType LengthMax_type;
      typedef ::xsd::cxx::tree::optional< LengthMax_type > LengthMax_optional;
      typedef ::xsd::cxx::tree::traits< LengthMax_type, char > LengthMax_traits;

      const LengthMax_optional&
      LengthMax () const;

      LengthMax_optional&
      LengthMax ();

      void
      LengthMax (const LengthMax_type& x);

      void
      LengthMax (const LengthMax_optional& x);

      void
      LengthMax (::std::auto_ptr< LengthMax_type > p);

      // LengthMin
      //
      typedef ::xsd::qif2::ActualLinearValueType LengthMin_type;
      typedef ::xsd::cxx::tree::optional< LengthMin_type > LengthMin_optional;
      typedef ::xsd::cxx::tree::traits< LengthMin_type, char > LengthMin_traits;

      const LengthMin_optional&
      LengthMin () const;

      LengthMin_optional&
      LengthMin ();

      void
      LengthMin (const LengthMin_type& x);

      void
      LengthMin (const LengthMin_optional& x);

      void
      LengthMin (::std::auto_ptr< LengthMin_type > p);

      // Width
      //
      typedef ::xsd::qif2::ActualLinearValueType Width_type;
      typedef ::xsd::cxx::tree::optional< Width_type > Width_optional;
      typedef ::xsd::cxx::tree::traits< Width_type, char > Width_traits;

      const Width_optional&
      Width () const;

      Width_optional&
      Width ();

      void
      Width (const Width_type& x);

      void
      Width (const Width_optional& x);

      void
      Width (::std::auto_ptr< Width_type > p);

      // WidthMax
      //
      typedef ::xsd::qif2::ActualLinearValueType WidthMax_type;
      typedef ::xsd::cxx::tree::optional< WidthMax_type > WidthMax_optional;
      typedef ::xsd::cxx::tree::traits< WidthMax_type, char > WidthMax_traits;

      const WidthMax_optional&
      WidthMax () const;

      WidthMax_optional&
      WidthMax ();

      void
      WidthMax (const WidthMax_type& x);

      void
      WidthMax (const WidthMax_optional& x);

      void
      WidthMax (::std::auto_ptr< WidthMax_type > p);

      // WidthMin
      //
      typedef ::xsd::qif2::ActualLinearValueType WidthMin_type;
      typedef ::xsd::cxx::tree::optional< WidthMin_type > WidthMin_optional;
      typedef ::xsd::cxx::tree::traits< WidthMin_type, char > WidthMin_traits;

      const WidthMin_optional&
      WidthMin () const;

      WidthMin_optional&
      WidthMin ();

      void
      WidthMin (const WidthMin_type& x);

      void
      WidthMin (const WidthMin_optional& x);

      void
      WidthMin (::std::auto_ptr< WidthMin_type > p);

      // Depth
      //
      typedef ::xsd::qif2::ActualLinearValueType Depth_type;
      typedef ::xsd::cxx::tree::optional< Depth_type > Depth_optional;
      typedef ::xsd::cxx::tree::traits< Depth_type, char > Depth_traits;

      const Depth_optional&
      Depth () const;

      Depth_optional&
      Depth ();

      void
      Depth (const Depth_type& x);

      void
      Depth (const Depth_optional& x);

      void
      Depth (::std::auto_ptr< Depth_type > p);

      // DepthMax
      //
      typedef ::xsd::qif2::ActualLinearValueType DepthMax_type;
      typedef ::xsd::cxx::tree::optional< DepthMax_type > DepthMax_optional;
      typedef ::xsd::cxx::tree::traits< DepthMax_type, char > DepthMax_traits;

      const DepthMax_optional&
      DepthMax () const;

      DepthMax_optional&
      DepthMax ();

      void
      DepthMax (const DepthMax_type& x);

      void
      DepthMax (const DepthMax_optional& x);

      void
      DepthMax (::std::auto_ptr< DepthMax_type > p);

      // DepthMin
      //
      typedef ::xsd::qif2::ActualLinearValueType DepthMin_type;
      typedef ::xsd::cxx::tree::optional< DepthMin_type > DepthMin_optional;
      typedef ::xsd::cxx::tree::traits< DepthMin_type, char > DepthMin_traits;

      const DepthMin_optional&
      DepthMin () const;

      DepthMin_optional&
      DepthMin ();

      void
      DepthMin (const DepthMin_type& x);

      void
      DepthMin (const DepthMin_optional& x);

      void
      DepthMin (::std::auto_ptr< DepthMin_type > p);

      // DepthVector
      //
      typedef ::xsd::qif2::ActualUnitVectorType DepthVector_type;
      typedef ::xsd::cxx::tree::optional< DepthVector_type > DepthVector_optional;
      typedef ::xsd::cxx::tree::traits< DepthVector_type, char > DepthVector_traits;

      const DepthVector_optional&
      DepthVector () const;

      DepthVector_optional&
      DepthVector ();

      void
      DepthVector (const DepthVector_type& x);

      void
      DepthVector (const DepthVector_optional& x);

      void
      DepthVector (::std::auto_ptr< DepthVector_type > p);

      // Form
      //
      typedef ::xsd::qif2::ActualLinearValueType Form_type;
      typedef ::xsd::cxx::tree::optional< Form_type > Form_optional;
      typedef ::xsd::cxx::tree::traits< Form_type, char > Form_traits;

      const Form_optional&
      Form () const;

      Form_optional&
      Form ();

      void
      Form (const Form_type& x);

      void
      Form (const Form_optional& x);

      void
      Form (::std::auto_ptr< Form_type > p);

      // Constructors.
      //
      ElongatedCylinderFeatureActualType (const id_type&,
                                          const FeatureItemId_type&);

      ElongatedCylinderFeatureActualType (const id_type&,
                                          ::std::auto_ptr< FeatureItemId_type >);

      ElongatedCylinderFeatureActualType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      ElongatedCylinderFeatureActualType (const ElongatedCylinderFeatureActualType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual ElongatedCylinderFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ElongatedCylinderFeatureActualType&
      operator= (const ElongatedCylinderFeatureActualType& x);

      virtual 
      ~ElongatedCylinderFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Diameter_optional Diameter_;
      DiameterMin_optional DiameterMin_;
      DiameterMax_optional DiameterMax_;
      CenterPlane_optional CenterPlane_;
      Length_optional Length_;
      LengthMax_optional LengthMax_;
      LengthMin_optional LengthMin_;
      Width_optional Width_;
      WidthMax_optional WidthMax_;
      WidthMin_optional WidthMin_;
      Depth_optional Depth_;
      DepthMax_optional DepthMax_;
      DepthMin_optional DepthMin_;
      DepthVector_optional DepthVector_;
      Form_optional Form_;
    };

    class ExtrudedCrossSectionConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::ExtrudedCrossSectionBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::ExtrudedCrossSectionRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Copy
      //
      typedef ::xsd::qif2::ExtrudedCrossSectionCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::ExtrudedCrossSectionCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // Transform
      //
      typedef ::xsd::qif2::ExtrudedCrossSectionTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // Constructors.
      //
      ExtrudedCrossSectionConstructionMethodType ();

      ExtrudedCrossSectionConstructionMethodType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      ExtrudedCrossSectionConstructionMethodType (const ExtrudedCrossSectionConstructionMethodType& x,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      virtual ExtrudedCrossSectionConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ExtrudedCrossSectionConstructionMethodType&
      operator= (const ExtrudedCrossSectionConstructionMethodType& x);

      virtual 
      ~ExtrudedCrossSectionConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Copy_optional Copy_;
      Cast_optional Cast_;
      Transform_optional Transform_;
    };

    class ExtrudedCrossSectionBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      ExtrudedCrossSectionBestFitType ();

      ExtrudedCrossSectionBestFitType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      ExtrudedCrossSectionBestFitType (const ExtrudedCrossSectionBestFitType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual ExtrudedCrossSectionBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ExtrudedCrossSectionBestFitType&
      operator= (const ExtrudedCrossSectionBestFitType& x);

      virtual 
      ~ExtrudedCrossSectionBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class ExtrudedCrossSectionRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      ExtrudedCrossSectionRecompType (const BaseFeaturePointList_type&);

      ExtrudedCrossSectionRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      ExtrudedCrossSectionRecompType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      ExtrudedCrossSectionRecompType (const ExtrudedCrossSectionRecompType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual ExtrudedCrossSectionRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ExtrudedCrossSectionRecompType&
      operator= (const ExtrudedCrossSectionRecompType& x);

      virtual 
      ~ExtrudedCrossSectionRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class ExtrudedCrossSectionCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseExtrudedCrossSection
      //
      typedef ::xsd::qif2::BaseFeatureType BaseExtrudedCrossSection_type;
      typedef ::xsd::cxx::tree::traits< BaseExtrudedCrossSection_type, char > BaseExtrudedCrossSection_traits;

      const BaseExtrudedCrossSection_type&
      BaseExtrudedCrossSection () const;

      BaseExtrudedCrossSection_type&
      BaseExtrudedCrossSection ();

      void
      BaseExtrudedCrossSection (const BaseExtrudedCrossSection_type& x);

      void
      BaseExtrudedCrossSection (::std::auto_ptr< BaseExtrudedCrossSection_type > p);

      // Constructors.
      //
      ExtrudedCrossSectionCopyType (const BaseExtrudedCrossSection_type&);

      ExtrudedCrossSectionCopyType (::std::auto_ptr< BaseExtrudedCrossSection_type >);

      ExtrudedCrossSectionCopyType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      ExtrudedCrossSectionCopyType (const ExtrudedCrossSectionCopyType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual ExtrudedCrossSectionCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ExtrudedCrossSectionCopyType&
      operator= (const ExtrudedCrossSectionCopyType& x);

      virtual 
      ~ExtrudedCrossSectionCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseExtrudedCrossSection_type > BaseExtrudedCrossSection_;
    };

    class ExtrudedCrossSectionCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      ExtrudedCrossSectionCastType (const BaseFeature_type&);

      ExtrudedCrossSectionCastType (::std::auto_ptr< BaseFeature_type >);

      ExtrudedCrossSectionCastType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      ExtrudedCrossSectionCastType (const ExtrudedCrossSectionCastType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual ExtrudedCrossSectionCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ExtrudedCrossSectionCastType&
      operator= (const ExtrudedCrossSectionCastType& x);

      virtual 
      ~ExtrudedCrossSectionCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class ExtrudedCrossSectionTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseExtrudedCrossSection
      //
      typedef ::xsd::qif2::BaseFeatureType BaseExtrudedCrossSection_type;
      typedef ::xsd::cxx::tree::traits< BaseExtrudedCrossSection_type, char > BaseExtrudedCrossSection_traits;

      const BaseExtrudedCrossSection_type&
      BaseExtrudedCrossSection () const;

      BaseExtrudedCrossSection_type&
      BaseExtrudedCrossSection ();

      void
      BaseExtrudedCrossSection (const BaseExtrudedCrossSection_type& x);

      void
      BaseExtrudedCrossSection (::std::auto_ptr< BaseExtrudedCrossSection_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      ExtrudedCrossSectionTransformType (const BaseExtrudedCrossSection_type&,
                                         const Transformation_type&);

      ExtrudedCrossSectionTransformType (::std::auto_ptr< BaseExtrudedCrossSection_type >,
                                         ::std::auto_ptr< Transformation_type >);

      ExtrudedCrossSectionTransformType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      ExtrudedCrossSectionTransformType (const ExtrudedCrossSectionTransformType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual ExtrudedCrossSectionTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ExtrudedCrossSectionTransformType&
      operator= (const ExtrudedCrossSectionTransformType& x);

      virtual 
      ~ExtrudedCrossSectionTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseExtrudedCrossSection_type > BaseExtrudedCrossSection_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class ExtrudedCrossSectionCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::ExtrudedCrossSectionConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      ExtrudedCrossSectionCheckedType ();

      ExtrudedCrossSectionCheckedType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      ExtrudedCrossSectionCheckedType (const ExtrudedCrossSectionCheckedType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual ExtrudedCrossSectionCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ExtrudedCrossSectionCheckedType&
      operator= (const ExtrudedCrossSectionCheckedType& x);

      virtual 
      ~ExtrudedCrossSectionCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class ExtrudedCrossSectionCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::ExtrudedCrossSectionCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      ExtrudedCrossSectionCheckedFeatureType ();

      ExtrudedCrossSectionCheckedFeatureType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      ExtrudedCrossSectionCheckedFeatureType (const ExtrudedCrossSectionCheckedFeatureType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual ExtrudedCrossSectionCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ExtrudedCrossSectionCheckedFeatureType&
      operator= (const ExtrudedCrossSectionCheckedFeatureType& x);

      virtual 
      ~ExtrudedCrossSectionCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class ExtrudedCrossSectionActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::ExtrudedCrossSectionCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      ExtrudedCrossSectionActualDeterminationType ();

      ExtrudedCrossSectionActualDeterminationType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      ExtrudedCrossSectionActualDeterminationType (const ExtrudedCrossSectionActualDeterminationType& x,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      virtual ExtrudedCrossSectionActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ExtrudedCrossSectionActualDeterminationType&
      operator= (const ExtrudedCrossSectionActualDeterminationType& x);

      virtual 
      ~ExtrudedCrossSectionActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class ExtrudedCrossSectionFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::ExtrudedCrossSectionActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::CurveSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      ExtrudedCrossSectionFeatureItemType (const id_type&,
                                           const FeatureName_type&,
                                           const DeterminationMode_type&);

      ExtrudedCrossSectionFeatureItemType (const id_type&,
                                           const FeatureName_type&,
                                           ::std::auto_ptr< DeterminationMode_type >);

      ExtrudedCrossSectionFeatureItemType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      ExtrudedCrossSectionFeatureItemType (const ExtrudedCrossSectionFeatureItemType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual ExtrudedCrossSectionFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ExtrudedCrossSectionFeatureItemType&
      operator= (const ExtrudedCrossSectionFeatureItemType& x);

      virtual 
      ~ExtrudedCrossSectionFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class ExtrudedCrossSectionFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // InternalExternal
      //
      typedef ::xsd::qif2::InternalExternalEnumType InternalExternal_type;
      typedef ::xsd::cxx::tree::traits< InternalExternal_type, char > InternalExternal_traits;

      const InternalExternal_type&
      InternalExternal () const;

      InternalExternal_type&
      InternalExternal ();

      void
      InternalExternal (const InternalExternal_type& x);

      void
      InternalExternal (::std::auto_ptr< InternalExternal_type > p);

      // Length
      //
      typedef ::xsd::qif2::LinearValueType Length_type;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_type&
      Length () const;

      Length_type&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // Constructors.
      //
      ExtrudedCrossSectionFeatureDefinitionType (const id_type&,
                                                 const InternalExternal_type&,
                                                 const Length_type&);

      ExtrudedCrossSectionFeatureDefinitionType (const id_type&,
                                                 const InternalExternal_type&,
                                                 ::std::auto_ptr< Length_type >);

      ExtrudedCrossSectionFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      ExtrudedCrossSectionFeatureDefinitionType (const ExtrudedCrossSectionFeatureDefinitionType& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      virtual ExtrudedCrossSectionFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ExtrudedCrossSectionFeatureDefinitionType&
      operator= (const ExtrudedCrossSectionFeatureDefinitionType& x);

      virtual 
      ~ExtrudedCrossSectionFeatureDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< InternalExternal_type > InternalExternal_;
      ::xsd::cxx::tree::one< Length_type > Length_;
    };

    class ExtrudedCrossSectionFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // Direction
      //
      typedef ::xsd::qif2::UnitVectorType Direction_type;
      typedef ::xsd::cxx::tree::traits< Direction_type, char > Direction_traits;

      const Direction_type&
      Direction () const;

      Direction_type&
      Direction ();

      void
      Direction (const Direction_type& x);

      void
      Direction (::std::auto_ptr< Direction_type > p);

      // CrossSectionReferenceFeatureId
      //
      typedef ::xsd::qif2::QIFReferenceFullType CrossSectionReferenceFeatureId_type;
      typedef ::xsd::cxx::tree::traits< CrossSectionReferenceFeatureId_type, char > CrossSectionReferenceFeatureId_traits;

      const CrossSectionReferenceFeatureId_type&
      CrossSectionReferenceFeatureId () const;

      CrossSectionReferenceFeatureId_type&
      CrossSectionReferenceFeatureId ();

      void
      CrossSectionReferenceFeatureId (const CrossSectionReferenceFeatureId_type& x);

      void
      CrossSectionReferenceFeatureId (::std::auto_ptr< CrossSectionReferenceFeatureId_type > p);

      // Constructors.
      //
      ExtrudedCrossSectionFeatureNominalType (const id_type&,
                                              const FeatureDefinitionId_type&,
                                              const Direction_type&,
                                              const CrossSectionReferenceFeatureId_type&);

      ExtrudedCrossSectionFeatureNominalType (const id_type&,
                                              const FeatureDefinitionId_type&,
                                              ::std::auto_ptr< Direction_type >,
                                              ::std::auto_ptr< CrossSectionReferenceFeatureId_type >);

      ExtrudedCrossSectionFeatureNominalType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      ExtrudedCrossSectionFeatureNominalType (const ExtrudedCrossSectionFeatureNominalType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual ExtrudedCrossSectionFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ExtrudedCrossSectionFeatureNominalType&
      operator= (const ExtrudedCrossSectionFeatureNominalType& x);

      virtual 
      ~ExtrudedCrossSectionFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Direction_type > Direction_;
      ::xsd::cxx::tree::one< CrossSectionReferenceFeatureId_type > CrossSectionReferenceFeatureId_;
    };

    class ExtrudedCrossSectionFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Direction
      //
      typedef ::xsd::qif2::ActualUnitVectorType Direction_type;
      typedef ::xsd::cxx::tree::optional< Direction_type > Direction_optional;
      typedef ::xsd::cxx::tree::traits< Direction_type, char > Direction_traits;

      const Direction_optional&
      Direction () const;

      Direction_optional&
      Direction ();

      void
      Direction (const Direction_type& x);

      void
      Direction (const Direction_optional& x);

      void
      Direction (::std::auto_ptr< Direction_type > p);

      // Length
      //
      typedef ::xsd::qif2::ActualLinearValueType Length_type;
      typedef ::xsd::cxx::tree::optional< Length_type > Length_optional;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_optional&
      Length () const;

      Length_optional&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (const Length_optional& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // Form
      //
      typedef ::xsd::qif2::ActualLinearValueType Form_type;
      typedef ::xsd::cxx::tree::optional< Form_type > Form_optional;
      typedef ::xsd::cxx::tree::traits< Form_type, char > Form_traits;

      const Form_optional&
      Form () const;

      Form_optional&
      Form ();

      void
      Form (const Form_type& x);

      void
      Form (const Form_optional& x);

      void
      Form (::std::auto_ptr< Form_type > p);

      // Constructors.
      //
      ExtrudedCrossSectionFeatureActualType (const id_type&,
                                             const FeatureItemId_type&);

      ExtrudedCrossSectionFeatureActualType (const id_type&,
                                             ::std::auto_ptr< FeatureItemId_type >);

      ExtrudedCrossSectionFeatureActualType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      ExtrudedCrossSectionFeatureActualType (const ExtrudedCrossSectionFeatureActualType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual ExtrudedCrossSectionFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ExtrudedCrossSectionFeatureActualType&
      operator= (const ExtrudedCrossSectionFeatureActualType& x);

      virtual 
      ~ExtrudedCrossSectionFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Direction_optional Direction_;
      Length_optional Length_;
      Form_optional Form_;
    };

    class GenericFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // Constructors.
      //
      GenericFeatureItemType (const id_type&,
                              const FeatureName_type&);

      GenericFeatureItemType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      GenericFeatureItemType (const GenericFeatureItemType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual GenericFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~GenericFeatureItemType ();
    };

    class GenericFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // Constructors.
      //
      GenericFeatureDefinitionType (const id_type&);

      GenericFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      GenericFeatureDefinitionType (const GenericFeatureDefinitionType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual GenericFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~GenericFeatureDefinitionType ();
    };

    class GenericFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::PointType Location_type;
      typedef ::xsd::cxx::tree::optional< Location_type > Location_optional;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_optional&
      Location () const;

      Location_optional&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (const Location_optional& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // ReferenceFeatureNominalId
      //
      typedef ::xsd::qif2::QIFReferenceFullType ReferenceFeatureNominalId_type;
      typedef ::xsd::cxx::tree::sequence< ReferenceFeatureNominalId_type > ReferenceFeatureNominalId_sequence;
      typedef ReferenceFeatureNominalId_sequence::iterator ReferenceFeatureNominalId_iterator;
      typedef ReferenceFeatureNominalId_sequence::const_iterator ReferenceFeatureNominalId_const_iterator;
      typedef ::xsd::cxx::tree::traits< ReferenceFeatureNominalId_type, char > ReferenceFeatureNominalId_traits;

      const ReferenceFeatureNominalId_sequence&
      ReferenceFeatureNominalId () const;

      ReferenceFeatureNominalId_sequence&
      ReferenceFeatureNominalId ();

      void
      ReferenceFeatureNominalId (const ReferenceFeatureNominalId_sequence& s);

      // Constructors.
      //
      GenericFeatureNominalType (const id_type&,
                                 const FeatureDefinitionId_type&);

      GenericFeatureNominalType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      GenericFeatureNominalType (const GenericFeatureNominalType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual GenericFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      GenericFeatureNominalType&
      operator= (const GenericFeatureNominalType& x);

      virtual 
      ~GenericFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Location_optional Location_;
      ReferenceFeatureNominalId_sequence ReferenceFeatureNominalId_;
    };

    class GenericFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Constructors.
      //
      GenericFeatureActualType (const id_type&,
                                const FeatureItemId_type&);

      GenericFeatureActualType (const id_type&,
                                ::std::auto_ptr< FeatureItemId_type >);

      GenericFeatureActualType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      GenericFeatureActualType (const GenericFeatureActualType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual GenericFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~GenericFeatureActualType ();
    };

    class LineConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::LineBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::LineRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Midline
      //
      typedef ::xsd::qif2::LineMidlineType Midline_type;
      typedef ::xsd::cxx::tree::optional< Midline_type > Midline_optional;
      typedef ::xsd::cxx::tree::traits< Midline_type, char > Midline_traits;

      const Midline_optional&
      Midline () const;

      Midline_optional&
      Midline ();

      void
      Midline (const Midline_type& x);

      void
      Midline (const Midline_optional& x);

      void
      Midline (::std::auto_ptr< Midline_type > p);

      // Intersection
      //
      typedef ::xsd::qif2::LineIntersectionType Intersection_type;
      typedef ::xsd::cxx::tree::optional< Intersection_type > Intersection_optional;
      typedef ::xsd::cxx::tree::traits< Intersection_type, char > Intersection_traits;

      const Intersection_optional&
      Intersection () const;

      Intersection_optional&
      Intersection ();

      void
      Intersection (const Intersection_type& x);

      void
      Intersection (const Intersection_optional& x);

      void
      Intersection (::std::auto_ptr< Intersection_type > p);

      // Projection
      //
      typedef ::xsd::qif2::LineProjectionType Projection_type;
      typedef ::xsd::cxx::tree::optional< Projection_type > Projection_optional;
      typedef ::xsd::cxx::tree::traits< Projection_type, char > Projection_traits;

      const Projection_optional&
      Projection () const;

      Projection_optional&
      Projection ();

      void
      Projection (const Projection_type& x);

      void
      Projection (const Projection_optional& x);

      void
      Projection (::std::auto_ptr< Projection_type > p);

      // Perpendicular
      //
      typedef ::xsd::qif2::LinePerpendicularType Perpendicular_type;
      typedef ::xsd::cxx::tree::optional< Perpendicular_type > Perpendicular_optional;
      typedef ::xsd::cxx::tree::traits< Perpendicular_type, char > Perpendicular_traits;

      const Perpendicular_optional&
      Perpendicular () const;

      Perpendicular_optional&
      Perpendicular ();

      void
      Perpendicular (const Perpendicular_type& x);

      void
      Perpendicular (const Perpendicular_optional& x);

      void
      Perpendicular (::std::auto_ptr< Perpendicular_type > p);

      // Parallel
      //
      typedef ::xsd::qif2::LineParallelType Parallel_type;
      typedef ::xsd::cxx::tree::optional< Parallel_type > Parallel_optional;
      typedef ::xsd::cxx::tree::traits< Parallel_type, char > Parallel_traits;

      const Parallel_optional&
      Parallel () const;

      Parallel_optional&
      Parallel ();

      void
      Parallel (const Parallel_type& x);

      void
      Parallel (const Parallel_optional& x);

      void
      Parallel (::std::auto_ptr< Parallel_type > p);

      // Copy
      //
      typedef ::xsd::qif2::LineCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::LineCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // TangentThrough
      //
      typedef ::xsd::qif2::LineTangentThroughType TangentThrough_type;
      typedef ::xsd::cxx::tree::optional< TangentThrough_type > TangentThrough_optional;
      typedef ::xsd::cxx::tree::traits< TangentThrough_type, char > TangentThrough_traits;

      const TangentThrough_optional&
      TangentThrough () const;

      TangentThrough_optional&
      TangentThrough ();

      void
      TangentThrough (const TangentThrough_type& x);

      void
      TangentThrough (const TangentThrough_optional& x);

      void
      TangentThrough (::std::auto_ptr< TangentThrough_type > p);

      // Transform
      //
      typedef ::xsd::qif2::LineTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // Extract
      //
      typedef ::xsd::qif2::LineExtractType Extract_type;
      typedef ::xsd::cxx::tree::optional< Extract_type > Extract_optional;
      typedef ::xsd::cxx::tree::traits< Extract_type, char > Extract_traits;

      const Extract_optional&
      Extract () const;

      Extract_optional&
      Extract ();

      void
      Extract (const Extract_type& x);

      void
      Extract (const Extract_optional& x);

      void
      Extract (::std::auto_ptr< Extract_type > p);

      // FromScan
      //
      typedef ::xsd::qif2::LineFromScanType FromScan_type;
      typedef ::xsd::cxx::tree::optional< FromScan_type > FromScan_optional;
      typedef ::xsd::cxx::tree::traits< FromScan_type, char > FromScan_traits;

      const FromScan_optional&
      FromScan () const;

      FromScan_optional&
      FromScan ();

      void
      FromScan (const FromScan_type& x);

      void
      FromScan (const FromScan_optional& x);

      void
      FromScan (::std::auto_ptr< FromScan_type > p);

      // Constructors.
      //
      LineConstructionMethodType ();

      LineConstructionMethodType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      LineConstructionMethodType (const LineConstructionMethodType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual LineConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineConstructionMethodType&
      operator= (const LineConstructionMethodType& x);

      virtual 
      ~LineConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Midline_optional Midline_;
      Intersection_optional Intersection_;
      Projection_optional Projection_;
      Perpendicular_optional Perpendicular_;
      Parallel_optional Parallel_;
      Copy_optional Copy_;
      Cast_optional Cast_;
      TangentThrough_optional TangentThrough_;
      Transform_optional Transform_;
      Extract_optional Extract_;
      FromScan_optional FromScan_;
    };

    class LineBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      LineBestFitType ();

      LineBestFitType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      LineBestFitType (const LineBestFitType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual LineBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineBestFitType&
      operator= (const LineBestFitType& x);

      virtual 
      ~LineBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class LineRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      LineRecompType (const BaseFeaturePointList_type&);

      LineRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      LineRecompType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      LineRecompType (const LineRecompType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual LineRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineRecompType&
      operator= (const LineRecompType& x);

      virtual 
      ~LineRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class LineMidlineType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseLine
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseLine_type;
      typedef ::xsd::cxx::tree::sequence< BaseLine_type > BaseLine_sequence;
      typedef BaseLine_sequence::iterator BaseLine_iterator;
      typedef BaseLine_sequence::const_iterator BaseLine_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseLine_type, char > BaseLine_traits;

      const BaseLine_sequence&
      BaseLine () const;

      BaseLine_sequence&
      BaseLine ();

      void
      BaseLine (const BaseLine_sequence& s);

      // Constructors.
      //
      LineMidlineType ();

      LineMidlineType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      LineMidlineType (const LineMidlineType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual LineMidlineType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineMidlineType&
      operator= (const LineMidlineType& x);

      virtual 
      ~LineMidlineType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseLine_sequence BaseLine_;
    };

    class LineIntersectionType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BasePlane
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BasePlane_type;
      typedef ::xsd::cxx::tree::sequence< BasePlane_type > BasePlane_sequence;
      typedef BasePlane_sequence::iterator BasePlane_iterator;
      typedef BasePlane_sequence::const_iterator BasePlane_const_iterator;
      typedef ::xsd::cxx::tree::traits< BasePlane_type, char > BasePlane_traits;

      const BasePlane_sequence&
      BasePlane () const;

      BasePlane_sequence&
      BasePlane ();

      void
      BasePlane (const BasePlane_sequence& s);

      // Constructors.
      //
      LineIntersectionType ();

      LineIntersectionType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      LineIntersectionType (const LineIntersectionType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual LineIntersectionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineIntersectionType&
      operator= (const LineIntersectionType& x);

      virtual 
      ~LineIntersectionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BasePlane_sequence BasePlane_;
    };

    class LineProjectionType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // ProjectionPlane
      //
      typedef ::xsd::qif2::BaseFeatureType ProjectionPlane_type;
      typedef ::xsd::cxx::tree::traits< ProjectionPlane_type, char > ProjectionPlane_traits;

      const ProjectionPlane_type&
      ProjectionPlane () const;

      ProjectionPlane_type&
      ProjectionPlane ();

      void
      ProjectionPlane (const ProjectionPlane_type& x);

      void
      ProjectionPlane (::std::auto_ptr< ProjectionPlane_type > p);

      // ProjectionLine
      //
      typedef ::xsd::qif2::BaseFeatureType ProjectionLine_type;
      typedef ::xsd::cxx::tree::traits< ProjectionLine_type, char > ProjectionLine_traits;

      const ProjectionLine_type&
      ProjectionLine () const;

      ProjectionLine_type&
      ProjectionLine ();

      void
      ProjectionLine (const ProjectionLine_type& x);

      void
      ProjectionLine (::std::auto_ptr< ProjectionLine_type > p);

      // Constructors.
      //
      LineProjectionType (const ProjectionPlane_type&,
                          const ProjectionLine_type&);

      LineProjectionType (::std::auto_ptr< ProjectionPlane_type >,
                          ::std::auto_ptr< ProjectionLine_type >);

      LineProjectionType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      LineProjectionType (const LineProjectionType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual LineProjectionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineProjectionType&
      operator= (const LineProjectionType& x);

      virtual 
      ~LineProjectionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ProjectionPlane_type > ProjectionPlane_;
      ::xsd::cxx::tree::one< ProjectionLine_type > ProjectionLine_;
    };

    class LinePerpendicularType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // PerpendicularFeature
      //
      typedef ::xsd::qif2::BaseFeatureType PerpendicularFeature_type;
      typedef ::xsd::cxx::tree::traits< PerpendicularFeature_type, char > PerpendicularFeature_traits;

      const PerpendicularFeature_type&
      PerpendicularFeature () const;

      PerpendicularFeature_type&
      PerpendicularFeature ();

      void
      PerpendicularFeature (const PerpendicularFeature_type& x);

      void
      PerpendicularFeature (::std::auto_ptr< PerpendicularFeature_type > p);

      // PointFeature
      //
      typedef ::xsd::qif2::BaseFeatureType PointFeature_type;
      typedef ::xsd::cxx::tree::traits< PointFeature_type, char > PointFeature_traits;

      const PointFeature_type&
      PointFeature () const;

      PointFeature_type&
      PointFeature ();

      void
      PointFeature (const PointFeature_type& x);

      void
      PointFeature (::std::auto_ptr< PointFeature_type > p);

      // Constructors.
      //
      LinePerpendicularType (const PerpendicularFeature_type&,
                             const PointFeature_type&);

      LinePerpendicularType (::std::auto_ptr< PerpendicularFeature_type >,
                             ::std::auto_ptr< PointFeature_type >);

      LinePerpendicularType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      LinePerpendicularType (const LinePerpendicularType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual LinePerpendicularType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LinePerpendicularType&
      operator= (const LinePerpendicularType& x);

      virtual 
      ~LinePerpendicularType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< PerpendicularFeature_type > PerpendicularFeature_;
      ::xsd::cxx::tree::one< PointFeature_type > PointFeature_;
    };

    class LineParallelType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // ParallelFeature
      //
      typedef ::xsd::qif2::BaseFeatureType ParallelFeature_type;
      typedef ::xsd::cxx::tree::traits< ParallelFeature_type, char > ParallelFeature_traits;

      const ParallelFeature_type&
      ParallelFeature () const;

      ParallelFeature_type&
      ParallelFeature ();

      void
      ParallelFeature (const ParallelFeature_type& x);

      void
      ParallelFeature (::std::auto_ptr< ParallelFeature_type > p);

      // PointFeature
      //
      typedef ::xsd::qif2::BaseFeatureType PointFeature_type;
      typedef ::xsd::cxx::tree::traits< PointFeature_type, char > PointFeature_traits;

      const PointFeature_type&
      PointFeature () const;

      PointFeature_type&
      PointFeature ();

      void
      PointFeature (const PointFeature_type& x);

      void
      PointFeature (::std::auto_ptr< PointFeature_type > p);

      // Constructors.
      //
      LineParallelType (const ParallelFeature_type&,
                        const PointFeature_type&);

      LineParallelType (::std::auto_ptr< ParallelFeature_type >,
                        ::std::auto_ptr< PointFeature_type >);

      LineParallelType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      LineParallelType (const LineParallelType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual LineParallelType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineParallelType&
      operator= (const LineParallelType& x);

      virtual 
      ~LineParallelType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ParallelFeature_type > ParallelFeature_;
      ::xsd::cxx::tree::one< PointFeature_type > PointFeature_;
    };

    class LineCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseLine
      //
      typedef ::xsd::qif2::BaseFeatureType BaseLine_type;
      typedef ::xsd::cxx::tree::traits< BaseLine_type, char > BaseLine_traits;

      const BaseLine_type&
      BaseLine () const;

      BaseLine_type&
      BaseLine ();

      void
      BaseLine (const BaseLine_type& x);

      void
      BaseLine (::std::auto_ptr< BaseLine_type > p);

      // Constructors.
      //
      LineCopyType (const BaseLine_type&);

      LineCopyType (::std::auto_ptr< BaseLine_type >);

      LineCopyType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      LineCopyType (const LineCopyType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual LineCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineCopyType&
      operator= (const LineCopyType& x);

      virtual 
      ~LineCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseLine_type > BaseLine_;
    };

    class LineCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      LineCastType (const BaseFeature_type&);

      LineCastType (::std::auto_ptr< BaseFeature_type >);

      LineCastType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      LineCastType (const LineCastType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual LineCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineCastType&
      operator= (const LineCastType& x);

      virtual 
      ~LineCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class LineTangentThroughType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // TangentFeature
      //
      typedef ::xsd::qif2::BaseFeatureType TangentFeature_type;
      typedef ::xsd::cxx::tree::traits< TangentFeature_type, char > TangentFeature_traits;

      const TangentFeature_type&
      TangentFeature () const;

      TangentFeature_type&
      TangentFeature ();

      void
      TangentFeature (const TangentFeature_type& x);

      void
      TangentFeature (::std::auto_ptr< TangentFeature_type > p);

      // PointFeature
      //
      typedef ::xsd::qif2::BaseFeatureType PointFeature_type;
      typedef ::xsd::cxx::tree::traits< PointFeature_type, char > PointFeature_traits;

      const PointFeature_type&
      PointFeature () const;

      PointFeature_type&
      PointFeature ();

      void
      PointFeature (const PointFeature_type& x);

      void
      PointFeature (::std::auto_ptr< PointFeature_type > p);

      // Constructors.
      //
      LineTangentThroughType (const TangentFeature_type&,
                              const PointFeature_type&);

      LineTangentThroughType (::std::auto_ptr< TangentFeature_type >,
                              ::std::auto_ptr< PointFeature_type >);

      LineTangentThroughType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      LineTangentThroughType (const LineTangentThroughType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual LineTangentThroughType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineTangentThroughType&
      operator= (const LineTangentThroughType& x);

      virtual 
      ~LineTangentThroughType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< TangentFeature_type > TangentFeature_;
      ::xsd::cxx::tree::one< PointFeature_type > PointFeature_;
    };

    class LineTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseLine
      //
      typedef ::xsd::qif2::BaseFeatureType BaseLine_type;
      typedef ::xsd::cxx::tree::traits< BaseLine_type, char > BaseLine_traits;

      const BaseLine_type&
      BaseLine () const;

      BaseLine_type&
      BaseLine ();

      void
      BaseLine (const BaseLine_type& x);

      void
      BaseLine (::std::auto_ptr< BaseLine_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      LineTransformType (const BaseLine_type&,
                         const Transformation_type&);

      LineTransformType (::std::auto_ptr< BaseLine_type >,
                         ::std::auto_ptr< Transformation_type >);

      LineTransformType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      LineTransformType (const LineTransformType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual LineTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineTransformType&
      operator= (const LineTransformType& x);

      virtual 
      ~LineTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseLine_type > BaseLine_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class LineFromScanType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // SurfaceFeature
      //
      typedef ::xsd::qif2::BaseFeatureType SurfaceFeature_type;
      typedef ::xsd::cxx::tree::traits< SurfaceFeature_type, char > SurfaceFeature_traits;

      const SurfaceFeature_type&
      SurfaceFeature () const;

      SurfaceFeature_type&
      SurfaceFeature ();

      void
      SurfaceFeature (const SurfaceFeature_type& x);

      void
      SurfaceFeature (::std::auto_ptr< SurfaceFeature_type > p);

      // SearchRadius
      //
      typedef ::xsd::qif2::LinearValueType SearchRadius_type;
      typedef ::xsd::cxx::tree::traits< SearchRadius_type, char > SearchRadius_traits;

      const SearchRadius_type&
      SearchRadius () const;

      SearchRadius_type&
      SearchRadius ();

      void
      SearchRadius (const SearchRadius_type& x);

      void
      SearchRadius (::std::auto_ptr< SearchRadius_type > p);

      // Constructors.
      //
      LineFromScanType (const SurfaceFeature_type&,
                        const SearchRadius_type&);

      LineFromScanType (::std::auto_ptr< SurfaceFeature_type >,
                        ::std::auto_ptr< SearchRadius_type >);

      LineFromScanType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      LineFromScanType (const LineFromScanType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual LineFromScanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineFromScanType&
      operator= (const LineFromScanType& x);

      virtual 
      ~LineFromScanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SurfaceFeature_type > SurfaceFeature_;
      ::xsd::cxx::tree::one< SearchRadius_type > SearchRadius_;
    };

    class LineExtractType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // CurveFeature
      //
      typedef ::xsd::qif2::BaseFeatureType CurveFeature_type;
      typedef ::xsd::cxx::tree::traits< CurveFeature_type, char > CurveFeature_traits;

      const CurveFeature_type&
      CurveFeature () const;

      CurveFeature_type&
      CurveFeature ();

      void
      CurveFeature (const CurveFeature_type& x);

      void
      CurveFeature (::std::auto_ptr< CurveFeature_type > p);

      // Constructors.
      //
      LineExtractType (const CurveFeature_type&);

      LineExtractType (::std::auto_ptr< CurveFeature_type >);

      LineExtractType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      LineExtractType (const LineExtractType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual LineExtractType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineExtractType&
      operator= (const LineExtractType& x);

      virtual 
      ~LineExtractType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< CurveFeature_type > CurveFeature_;
    };

    class LineCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::LineConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      LineCheckedType ();

      LineCheckedType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      LineCheckedType (const LineCheckedType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual LineCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineCheckedType&
      operator= (const LineCheckedType& x);

      virtual 
      ~LineCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class LineCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::LineCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      LineCheckedFeatureType ();

      LineCheckedFeatureType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      LineCheckedFeatureType (const LineCheckedFeatureType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual LineCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineCheckedFeatureType&
      operator= (const LineCheckedFeatureType& x);

      virtual 
      ~LineCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class LineActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::LineCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      LineActualDeterminationType ();

      LineActualDeterminationType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      LineActualDeterminationType (const LineActualDeterminationType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual LineActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineActualDeterminationType&
      operator= (const LineActualDeterminationType& x);

      virtual 
      ~LineActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class LineFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::LineActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::NonFeatureOfSizeSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      LineFeatureItemType (const id_type&,
                           const FeatureName_type&,
                           const DeterminationMode_type&);

      LineFeatureItemType (const id_type&,
                           const FeatureName_type&,
                           ::std::auto_ptr< DeterminationMode_type >);

      LineFeatureItemType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      LineFeatureItemType (const LineFeatureItemType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual LineFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineFeatureItemType&
      operator= (const LineFeatureItemType& x);

      virtual 
      ~LineFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class LineFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // Constructors.
      //
      LineFeatureDefinitionType (const id_type&);

      LineFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      LineFeatureDefinitionType (const LineFeatureDefinitionType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual LineFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~LineFeatureDefinitionType ();
    };

    class LineFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::PointType Location_type;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_type&
      Location () const;

      Location_type&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // Direction
      //
      typedef ::xsd::qif2::UnitVectorType Direction_type;
      typedef ::xsd::cxx::tree::traits< Direction_type, char > Direction_traits;

      const Direction_type&
      Direction () const;

      Direction_type&
      Direction ();

      void
      Direction (const Direction_type& x);

      void
      Direction (::std::auto_ptr< Direction_type > p);

      // Length
      //
      typedef ::xsd::qif2::LinearValueType Length_type;
      typedef ::xsd::cxx::tree::optional< Length_type > Length_optional;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_optional&
      Length () const;

      Length_optional&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (const Length_optional& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // Normal
      //
      typedef ::xsd::qif2::UnitVectorType Normal_type;
      typedef ::xsd::cxx::tree::optional< Normal_type > Normal_optional;
      typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

      const Normal_optional&
      Normal () const;

      Normal_optional&
      Normal ();

      void
      Normal (const Normal_type& x);

      void
      Normal (const Normal_optional& x);

      void
      Normal (::std::auto_ptr< Normal_type > p);

      // Constructors.
      //
      LineFeatureNominalType (const id_type&,
                              const FeatureDefinitionId_type&,
                              const Location_type&,
                              const Direction_type&);

      LineFeatureNominalType (const id_type&,
                              const FeatureDefinitionId_type&,
                              ::std::auto_ptr< Location_type >,
                              ::std::auto_ptr< Direction_type >);

      LineFeatureNominalType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      LineFeatureNominalType (const LineFeatureNominalType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual LineFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineFeatureNominalType&
      operator= (const LineFeatureNominalType& x);

      virtual 
      ~LineFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Location_type > Location_;
      ::xsd::cxx::tree::one< Direction_type > Direction_;
      Length_optional Length_;
      Normal_optional Normal_;
    };

    class LineFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::ActualPointType Location_type;
      typedef ::xsd::cxx::tree::optional< Location_type > Location_optional;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_optional&
      Location () const;

      Location_optional&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (const Location_optional& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // Direction
      //
      typedef ::xsd::qif2::ActualUnitVectorType Direction_type;
      typedef ::xsd::cxx::tree::optional< Direction_type > Direction_optional;
      typedef ::xsd::cxx::tree::traits< Direction_type, char > Direction_traits;

      const Direction_optional&
      Direction () const;

      Direction_optional&
      Direction ();

      void
      Direction (const Direction_type& x);

      void
      Direction (const Direction_optional& x);

      void
      Direction (::std::auto_ptr< Direction_type > p);

      // Length
      //
      typedef ::xsd::qif2::ActualLinearValueType Length_type;
      typedef ::xsd::cxx::tree::optional< Length_type > Length_optional;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_optional&
      Length () const;

      Length_optional&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (const Length_optional& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // Normal
      //
      typedef ::xsd::qif2::ActualUnitVectorType Normal_type;
      typedef ::xsd::cxx::tree::optional< Normal_type > Normal_optional;
      typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

      const Normal_optional&
      Normal () const;

      Normal_optional&
      Normal ();

      void
      Normal (const Normal_type& x);

      void
      Normal (const Normal_optional& x);

      void
      Normal (::std::auto_ptr< Normal_type > p);

      // Form
      //
      typedef ::xsd::qif2::ActualLinearValueType Form_type;
      typedef ::xsd::cxx::tree::optional< Form_type > Form_optional;
      typedef ::xsd::cxx::tree::traits< Form_type, char > Form_traits;

      const Form_optional&
      Form () const;

      Form_optional&
      Form ();

      void
      Form (const Form_type& x);

      void
      Form (const Form_optional& x);

      void
      Form (::std::auto_ptr< Form_type > p);

      // Constructors.
      //
      LineFeatureActualType (const id_type&,
                             const FeatureItemId_type&);

      LineFeatureActualType (const id_type&,
                             ::std::auto_ptr< FeatureItemId_type >);

      LineFeatureActualType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      LineFeatureActualType (const LineFeatureActualType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual LineFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineFeatureActualType&
      operator= (const LineFeatureActualType& x);

      virtual 
      ~LineFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Location_optional Location_;
      Direction_optional Direction_;
      Length_optional Length_;
      Normal_optional Normal_;
      Form_optional Form_;
    };

    class OppositeLinesConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::OppositeLinesBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::OppositeLinesRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Projection
      //
      typedef ::xsd::qif2::OppositeLinesProjectionType Projection_type;
      typedef ::xsd::cxx::tree::optional< Projection_type > Projection_optional;
      typedef ::xsd::cxx::tree::traits< Projection_type, char > Projection_traits;

      const Projection_optional&
      Projection () const;

      Projection_optional&
      Projection ();

      void
      Projection (const Projection_type& x);

      void
      Projection (const Projection_optional& x);

      void
      Projection (::std::auto_ptr< Projection_type > p);

      // Copy
      //
      typedef ::xsd::qif2::OppositeLinesCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::OppositeLinesCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // Transform
      //
      typedef ::xsd::qif2::OppositeLinesTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // FromScan
      //
      typedef ::xsd::qif2::OppositeLinesFromScanType FromScan_type;
      typedef ::xsd::cxx::tree::optional< FromScan_type > FromScan_optional;
      typedef ::xsd::cxx::tree::traits< FromScan_type, char > FromScan_traits;

      const FromScan_optional&
      FromScan () const;

      FromScan_optional&
      FromScan ();

      void
      FromScan (const FromScan_type& x);

      void
      FromScan (const FromScan_optional& x);

      void
      FromScan (::std::auto_ptr< FromScan_type > p);

      // Constructors.
      //
      OppositeLinesConstructionMethodType ();

      OppositeLinesConstructionMethodType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      OppositeLinesConstructionMethodType (const OppositeLinesConstructionMethodType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual OppositeLinesConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositeLinesConstructionMethodType&
      operator= (const OppositeLinesConstructionMethodType& x);

      virtual 
      ~OppositeLinesConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Projection_optional Projection_;
      Copy_optional Copy_;
      Cast_optional Cast_;
      Transform_optional Transform_;
      FromScan_optional FromScan_;
    };

    class OppositeLinesBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      OppositeLinesBestFitType ();

      OppositeLinesBestFitType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      OppositeLinesBestFitType (const OppositeLinesBestFitType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual OppositeLinesBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositeLinesBestFitType&
      operator= (const OppositeLinesBestFitType& x);

      virtual 
      ~OppositeLinesBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class OppositeLinesRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      OppositeLinesRecompType (const BaseFeaturePointList_type&);

      OppositeLinesRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      OppositeLinesRecompType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      OppositeLinesRecompType (const OppositeLinesRecompType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual OppositeLinesRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositeLinesRecompType&
      operator= (const OppositeLinesRecompType& x);

      virtual 
      ~OppositeLinesRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class OppositeLinesProjectionType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // ProjectionPlane
      //
      typedef ::xsd::qif2::BaseFeatureType ProjectionPlane_type;
      typedef ::xsd::cxx::tree::traits< ProjectionPlane_type, char > ProjectionPlane_traits;

      const ProjectionPlane_type&
      ProjectionPlane () const;

      ProjectionPlane_type&
      ProjectionPlane ();

      void
      ProjectionPlane (const ProjectionPlane_type& x);

      void
      ProjectionPlane (::std::auto_ptr< ProjectionPlane_type > p);

      // ProjectionOppositeLines
      //
      typedef ::xsd::qif2::BaseFeatureType ProjectionOppositeLines_type;
      typedef ::xsd::cxx::tree::traits< ProjectionOppositeLines_type, char > ProjectionOppositeLines_traits;

      const ProjectionOppositeLines_type&
      ProjectionOppositeLines () const;

      ProjectionOppositeLines_type&
      ProjectionOppositeLines ();

      void
      ProjectionOppositeLines (const ProjectionOppositeLines_type& x);

      void
      ProjectionOppositeLines (::std::auto_ptr< ProjectionOppositeLines_type > p);

      // Constructors.
      //
      OppositeLinesProjectionType (const ProjectionPlane_type&,
                                   const ProjectionOppositeLines_type&);

      OppositeLinesProjectionType (::std::auto_ptr< ProjectionPlane_type >,
                                   ::std::auto_ptr< ProjectionOppositeLines_type >);

      OppositeLinesProjectionType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      OppositeLinesProjectionType (const OppositeLinesProjectionType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual OppositeLinesProjectionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositeLinesProjectionType&
      operator= (const OppositeLinesProjectionType& x);

      virtual 
      ~OppositeLinesProjectionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ProjectionPlane_type > ProjectionPlane_;
      ::xsd::cxx::tree::one< ProjectionOppositeLines_type > ProjectionOppositeLines_;
    };

    class OppositeLinesCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseOppositeLines
      //
      typedef ::xsd::qif2::BaseFeatureType BaseOppositeLines_type;
      typedef ::xsd::cxx::tree::traits< BaseOppositeLines_type, char > BaseOppositeLines_traits;

      const BaseOppositeLines_type&
      BaseOppositeLines () const;

      BaseOppositeLines_type&
      BaseOppositeLines ();

      void
      BaseOppositeLines (const BaseOppositeLines_type& x);

      void
      BaseOppositeLines (::std::auto_ptr< BaseOppositeLines_type > p);

      // Constructors.
      //
      OppositeLinesCopyType (const BaseOppositeLines_type&);

      OppositeLinesCopyType (::std::auto_ptr< BaseOppositeLines_type >);

      OppositeLinesCopyType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      OppositeLinesCopyType (const OppositeLinesCopyType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual OppositeLinesCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositeLinesCopyType&
      operator= (const OppositeLinesCopyType& x);

      virtual 
      ~OppositeLinesCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseOppositeLines_type > BaseOppositeLines_;
    };

    class OppositeLinesCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      OppositeLinesCastType (const BaseFeature_type&);

      OppositeLinesCastType (::std::auto_ptr< BaseFeature_type >);

      OppositeLinesCastType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      OppositeLinesCastType (const OppositeLinesCastType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual OppositeLinesCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositeLinesCastType&
      operator= (const OppositeLinesCastType& x);

      virtual 
      ~OppositeLinesCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class OppositeLinesTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseOppositeLines
      //
      typedef ::xsd::qif2::BaseFeatureType BaseOppositeLines_type;
      typedef ::xsd::cxx::tree::traits< BaseOppositeLines_type, char > BaseOppositeLines_traits;

      const BaseOppositeLines_type&
      BaseOppositeLines () const;

      BaseOppositeLines_type&
      BaseOppositeLines ();

      void
      BaseOppositeLines (const BaseOppositeLines_type& x);

      void
      BaseOppositeLines (::std::auto_ptr< BaseOppositeLines_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      OppositeLinesTransformType (const BaseOppositeLines_type&,
                                  const Transformation_type&);

      OppositeLinesTransformType (::std::auto_ptr< BaseOppositeLines_type >,
                                  ::std::auto_ptr< Transformation_type >);

      OppositeLinesTransformType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      OppositeLinesTransformType (const OppositeLinesTransformType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual OppositeLinesTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositeLinesTransformType&
      operator= (const OppositeLinesTransformType& x);

      virtual 
      ~OppositeLinesTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseOppositeLines_type > BaseOppositeLines_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class OppositeLinesFromScanType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // SurfaceFeature
      //
      typedef ::xsd::qif2::BaseFeatureType SurfaceFeature_type;
      typedef ::xsd::cxx::tree::traits< SurfaceFeature_type, char > SurfaceFeature_traits;

      const SurfaceFeature_type&
      SurfaceFeature () const;

      SurfaceFeature_type&
      SurfaceFeature ();

      void
      SurfaceFeature (const SurfaceFeature_type& x);

      void
      SurfaceFeature (::std::auto_ptr< SurfaceFeature_type > p);

      // SearchRadius
      //
      typedef ::xsd::qif2::LinearValueType SearchRadius_type;
      typedef ::xsd::cxx::tree::traits< SearchRadius_type, char > SearchRadius_traits;

      const SearchRadius_type&
      SearchRadius () const;

      SearchRadius_type&
      SearchRadius ();

      void
      SearchRadius (const SearchRadius_type& x);

      void
      SearchRadius (::std::auto_ptr< SearchRadius_type > p);

      // Depth
      //
      typedef ::xsd::qif2::LinearValueType Depth_type;
      typedef ::xsd::cxx::tree::traits< Depth_type, char > Depth_traits;

      const Depth_type&
      Depth () const;

      Depth_type&
      Depth ();

      void
      Depth (const Depth_type& x);

      void
      Depth (::std::auto_ptr< Depth_type > p);

      // Constructors.
      //
      OppositeLinesFromScanType (const SurfaceFeature_type&,
                                 const SearchRadius_type&,
                                 const Depth_type&);

      OppositeLinesFromScanType (::std::auto_ptr< SurfaceFeature_type >,
                                 ::std::auto_ptr< SearchRadius_type >,
                                 ::std::auto_ptr< Depth_type >);

      OppositeLinesFromScanType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      OppositeLinesFromScanType (const OppositeLinesFromScanType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual OppositeLinesFromScanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositeLinesFromScanType&
      operator= (const OppositeLinesFromScanType& x);

      virtual 
      ~OppositeLinesFromScanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SurfaceFeature_type > SurfaceFeature_;
      ::xsd::cxx::tree::one< SearchRadius_type > SearchRadius_;
      ::xsd::cxx::tree::one< Depth_type > Depth_;
    };

    class OppositeLinesCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::OppositeLinesConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      OppositeLinesCheckedType ();

      OppositeLinesCheckedType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      OppositeLinesCheckedType (const OppositeLinesCheckedType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual OppositeLinesCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositeLinesCheckedType&
      operator= (const OppositeLinesCheckedType& x);

      virtual 
      ~OppositeLinesCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class OppositeLinesCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::OppositeLinesCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      OppositeLinesCheckedFeatureType ();

      OppositeLinesCheckedFeatureType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      OppositeLinesCheckedFeatureType (const OppositeLinesCheckedFeatureType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual OppositeLinesCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositeLinesCheckedFeatureType&
      operator= (const OppositeLinesCheckedFeatureType& x);

      virtual 
      ~OppositeLinesCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class OppositeLinesActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::OppositeLinesCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      OppositeLinesActualDeterminationType ();

      OppositeLinesActualDeterminationType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      OppositeLinesActualDeterminationType (const OppositeLinesActualDeterminationType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual OppositeLinesActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositeLinesActualDeterminationType&
      operator= (const OppositeLinesActualDeterminationType& x);

      virtual 
      ~OppositeLinesActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class OppositeLinesFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::OppositeLinesActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::FeatureOfSizeSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      OppositeLinesFeatureItemType (const id_type&,
                                    const FeatureName_type&,
                                    const DeterminationMode_type&);

      OppositeLinesFeatureItemType (const id_type&,
                                    const FeatureName_type&,
                                    ::std::auto_ptr< DeterminationMode_type >);

      OppositeLinesFeatureItemType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      OppositeLinesFeatureItemType (const OppositeLinesFeatureItemType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual OppositeLinesFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositeLinesFeatureItemType&
      operator= (const OppositeLinesFeatureItemType& x);

      virtual 
      ~OppositeLinesFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class OppositeLinesFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // InternalExternal
      //
      typedef ::xsd::qif2::InternalExternalEnumType InternalExternal_type;
      typedef ::xsd::cxx::tree::traits< InternalExternal_type, char > InternalExternal_traits;

      const InternalExternal_type&
      InternalExternal () const;

      InternalExternal_type&
      InternalExternal ();

      void
      InternalExternal (const InternalExternal_type& x);

      void
      InternalExternal (::std::auto_ptr< InternalExternal_type > p);

      // Width
      //
      typedef ::xsd::qif2::LinearValueType Width_type;
      typedef ::xsd::cxx::tree::traits< Width_type, char > Width_traits;

      const Width_type&
      Width () const;

      Width_type&
      Width ();

      void
      Width (const Width_type& x);

      void
      Width (::std::auto_ptr< Width_type > p);

      // Length
      //
      typedef ::xsd::qif2::LinearValueType Length_type;
      typedef ::xsd::cxx::tree::optional< Length_type > Length_optional;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_optional&
      Length () const;

      Length_optional&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (const Length_optional& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // EndType
      //
      typedef ::xsd::qif2::SlotEndType EndType_type;
      typedef ::xsd::cxx::tree::traits< EndType_type, char > EndType_traits;

      const EndType_type&
      EndType () const;

      EndType_type&
      EndType ();

      void
      EndType (const EndType_type& x);

      void
      EndType (::std::auto_ptr< EndType_type > p);

      // TaperAngle
      //
      typedef ::xsd::qif2::AngularValueType TaperAngle_type;
      typedef ::xsd::cxx::tree::optional< TaperAngle_type > TaperAngle_optional;
      typedef ::xsd::cxx::tree::traits< TaperAngle_type, char > TaperAngle_traits;

      const TaperAngle_optional&
      TaperAngle () const;

      TaperAngle_optional&
      TaperAngle ();

      void
      TaperAngle (const TaperAngle_type& x);

      void
      TaperAngle (const TaperAngle_optional& x);

      void
      TaperAngle (::std::auto_ptr< TaperAngle_type > p);

      // SingleOpenEnd
      //
      typedef ::xml_schema::boolean SingleOpenEnd_type;
      typedef ::xsd::cxx::tree::optional< SingleOpenEnd_type > SingleOpenEnd_optional;
      typedef ::xsd::cxx::tree::traits< SingleOpenEnd_type, char > SingleOpenEnd_traits;

      const SingleOpenEnd_optional&
      SingleOpenEnd () const;

      SingleOpenEnd_optional&
      SingleOpenEnd ();

      void
      SingleOpenEnd (const SingleOpenEnd_type& x);

      void
      SingleOpenEnd (const SingleOpenEnd_optional& x);

      // EndRadius1
      //
      typedef ::xsd::qif2::EndRadiusType EndRadius1_type;
      typedef ::xsd::cxx::tree::optional< EndRadius1_type > EndRadius1_optional;
      typedef ::xsd::cxx::tree::traits< EndRadius1_type, char > EndRadius1_traits;

      const EndRadius1_optional&
      EndRadius1 () const;

      EndRadius1_optional&
      EndRadius1 ();

      void
      EndRadius1 (const EndRadius1_type& x);

      void
      EndRadius1 (const EndRadius1_optional& x);

      void
      EndRadius1 (::std::auto_ptr< EndRadius1_type > p);

      // EndRadius2
      //
      typedef ::xsd::qif2::EndRadiusType EndRadius2_type;
      typedef ::xsd::cxx::tree::optional< EndRadius2_type > EndRadius2_optional;
      typedef ::xsd::cxx::tree::traits< EndRadius2_type, char > EndRadius2_traits;

      const EndRadius2_optional&
      EndRadius2 () const;

      EndRadius2_optional&
      EndRadius2 ();

      void
      EndRadius2 (const EndRadius2_type& x);

      void
      EndRadius2 (const EndRadius2_optional& x);

      void
      EndRadius2 (::std::auto_ptr< EndRadius2_type > p);

      // Constructors.
      //
      OppositeLinesFeatureDefinitionType (const id_type&,
                                          const InternalExternal_type&,
                                          const Width_type&,
                                          const EndType_type&);

      OppositeLinesFeatureDefinitionType (const id_type&,
                                          const InternalExternal_type&,
                                          ::std::auto_ptr< Width_type >,
                                          ::std::auto_ptr< EndType_type >);

      OppositeLinesFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      OppositeLinesFeatureDefinitionType (const OppositeLinesFeatureDefinitionType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual OppositeLinesFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositeLinesFeatureDefinitionType&
      operator= (const OppositeLinesFeatureDefinitionType& x);

      virtual 
      ~OppositeLinesFeatureDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< InternalExternal_type > InternalExternal_;
      ::xsd::cxx::tree::one< Width_type > Width_;
      Length_optional Length_;
      ::xsd::cxx::tree::one< EndType_type > EndType_;
      TaperAngle_optional TaperAngle_;
      SingleOpenEnd_optional SingleOpenEnd_;
      EndRadius1_optional EndRadius1_;
      EndRadius2_optional EndRadius2_;
    };

    class OppositeLinesFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // CenterLine
      //
      typedef ::xsd::qif2::PointAndVectorType CenterLine_type;
      typedef ::xsd::cxx::tree::traits< CenterLine_type, char > CenterLine_traits;

      const CenterLine_type&
      CenterLine () const;

      CenterLine_type&
      CenterLine ();

      void
      CenterLine (const CenterLine_type& x);

      void
      CenterLine (::std::auto_ptr< CenterLine_type > p);

      // Normal
      //
      typedef ::xsd::qif2::UnitVectorType Normal_type;
      typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

      const Normal_type&
      Normal () const;

      Normal_type&
      Normal ();

      void
      Normal (const Normal_type& x);

      void
      Normal (::std::auto_ptr< Normal_type > p);

      // Constructors.
      //
      OppositeLinesFeatureNominalType (const id_type&,
                                       const FeatureDefinitionId_type&,
                                       const CenterLine_type&,
                                       const Normal_type&);

      OppositeLinesFeatureNominalType (const id_type&,
                                       const FeatureDefinitionId_type&,
                                       ::std::auto_ptr< CenterLine_type >,
                                       ::std::auto_ptr< Normal_type >);

      OppositeLinesFeatureNominalType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      OppositeLinesFeatureNominalType (const OppositeLinesFeatureNominalType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual OppositeLinesFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositeLinesFeatureNominalType&
      operator= (const OppositeLinesFeatureNominalType& x);

      virtual 
      ~OppositeLinesFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< CenterLine_type > CenterLine_;
      ::xsd::cxx::tree::one< Normal_type > Normal_;
    };

    class OppositeLinesFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // CenterLine
      //
      typedef ::xsd::qif2::ActualPointAndVectorType CenterLine_type;
      typedef ::xsd::cxx::tree::optional< CenterLine_type > CenterLine_optional;
      typedef ::xsd::cxx::tree::traits< CenterLine_type, char > CenterLine_traits;

      const CenterLine_optional&
      CenterLine () const;

      CenterLine_optional&
      CenterLine ();

      void
      CenterLine (const CenterLine_type& x);

      void
      CenterLine (const CenterLine_optional& x);

      void
      CenterLine (::std::auto_ptr< CenterLine_type > p);

      // Normal
      //
      typedef ::xsd::qif2::ActualUnitVectorType Normal_type;
      typedef ::xsd::cxx::tree::optional< Normal_type > Normal_optional;
      typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

      const Normal_optional&
      Normal () const;

      Normal_optional&
      Normal ();

      void
      Normal (const Normal_type& x);

      void
      Normal (const Normal_optional& x);

      void
      Normal (::std::auto_ptr< Normal_type > p);

      // Width
      //
      typedef ::xsd::qif2::ActualLinearValueType Width_type;
      typedef ::xsd::cxx::tree::optional< Width_type > Width_optional;
      typedef ::xsd::cxx::tree::traits< Width_type, char > Width_traits;

      const Width_optional&
      Width () const;

      Width_optional&
      Width ();

      void
      Width (const Width_type& x);

      void
      Width (const Width_optional& x);

      void
      Width (::std::auto_ptr< Width_type > p);

      // WidthMin
      //
      typedef ::xsd::qif2::ActualLinearValueType WidthMin_type;
      typedef ::xsd::cxx::tree::optional< WidthMin_type > WidthMin_optional;
      typedef ::xsd::cxx::tree::traits< WidthMin_type, char > WidthMin_traits;

      const WidthMin_optional&
      WidthMin () const;

      WidthMin_optional&
      WidthMin ();

      void
      WidthMin (const WidthMin_type& x);

      void
      WidthMin (const WidthMin_optional& x);

      void
      WidthMin (::std::auto_ptr< WidthMin_type > p);

      // WidthMax
      //
      typedef ::xsd::qif2::ActualLinearValueType WidthMax_type;
      typedef ::xsd::cxx::tree::optional< WidthMax_type > WidthMax_optional;
      typedef ::xsd::cxx::tree::traits< WidthMax_type, char > WidthMax_traits;

      const WidthMax_optional&
      WidthMax () const;

      WidthMax_optional&
      WidthMax ();

      void
      WidthMax (const WidthMax_type& x);

      void
      WidthMax (const WidthMax_optional& x);

      void
      WidthMax (::std::auto_ptr< WidthMax_type > p);

      // Length
      //
      typedef ::xsd::qif2::ActualLinearValueType Length_type;
      typedef ::xsd::cxx::tree::optional< Length_type > Length_optional;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_optional&
      Length () const;

      Length_optional&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (const Length_optional& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // LengthMin
      //
      typedef ::xsd::qif2::ActualLinearValueType LengthMin_type;
      typedef ::xsd::cxx::tree::optional< LengthMin_type > LengthMin_optional;
      typedef ::xsd::cxx::tree::traits< LengthMin_type, char > LengthMin_traits;

      const LengthMin_optional&
      LengthMin () const;

      LengthMin_optional&
      LengthMin ();

      void
      LengthMin (const LengthMin_type& x);

      void
      LengthMin (const LengthMin_optional& x);

      void
      LengthMin (::std::auto_ptr< LengthMin_type > p);

      // LengthMax
      //
      typedef ::xsd::qif2::ActualLinearValueType LengthMax_type;
      typedef ::xsd::cxx::tree::optional< LengthMax_type > LengthMax_optional;
      typedef ::xsd::cxx::tree::traits< LengthMax_type, char > LengthMax_traits;

      const LengthMax_optional&
      LengthMax () const;

      LengthMax_optional&
      LengthMax ();

      void
      LengthMax (const LengthMax_type& x);

      void
      LengthMax (const LengthMax_optional& x);

      void
      LengthMax (::std::auto_ptr< LengthMax_type > p);

      // TaperAngle
      //
      typedef ::xsd::qif2::ActualAngularValueType TaperAngle_type;
      typedef ::xsd::cxx::tree::optional< TaperAngle_type > TaperAngle_optional;
      typedef ::xsd::cxx::tree::traits< TaperAngle_type, char > TaperAngle_traits;

      const TaperAngle_optional&
      TaperAngle () const;

      TaperAngle_optional&
      TaperAngle ();

      void
      TaperAngle (const TaperAngle_type& x);

      void
      TaperAngle (const TaperAngle_optional& x);

      void
      TaperAngle (::std::auto_ptr< TaperAngle_type > p);

      // EndRadius1
      //
      typedef ::xsd::qif2::ActualEndRadiusType EndRadius1_type;
      typedef ::xsd::cxx::tree::optional< EndRadius1_type > EndRadius1_optional;
      typedef ::xsd::cxx::tree::traits< EndRadius1_type, char > EndRadius1_traits;

      const EndRadius1_optional&
      EndRadius1 () const;

      EndRadius1_optional&
      EndRadius1 ();

      void
      EndRadius1 (const EndRadius1_type& x);

      void
      EndRadius1 (const EndRadius1_optional& x);

      void
      EndRadius1 (::std::auto_ptr< EndRadius1_type > p);

      // EndRadius2
      //
      typedef ::xsd::qif2::ActualEndRadiusType EndRadius2_type;
      typedef ::xsd::cxx::tree::optional< EndRadius2_type > EndRadius2_optional;
      typedef ::xsd::cxx::tree::traits< EndRadius2_type, char > EndRadius2_traits;

      const EndRadius2_optional&
      EndRadius2 () const;

      EndRadius2_optional&
      EndRadius2 ();

      void
      EndRadius2 (const EndRadius2_type& x);

      void
      EndRadius2 (const EndRadius2_optional& x);

      void
      EndRadius2 (::std::auto_ptr< EndRadius2_type > p);

      // Form
      //
      typedef ::xsd::qif2::ActualLinearValueType Form_type;
      typedef ::xsd::cxx::tree::optional< Form_type > Form_optional;
      typedef ::xsd::cxx::tree::traits< Form_type, char > Form_traits;

      const Form_optional&
      Form () const;

      Form_optional&
      Form ();

      void
      Form (const Form_type& x);

      void
      Form (const Form_optional& x);

      void
      Form (::std::auto_ptr< Form_type > p);

      // Constructors.
      //
      OppositeLinesFeatureActualType (const id_type&,
                                      const FeatureItemId_type&);

      OppositeLinesFeatureActualType (const id_type&,
                                      ::std::auto_ptr< FeatureItemId_type >);

      OppositeLinesFeatureActualType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      OppositeLinesFeatureActualType (const OppositeLinesFeatureActualType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual OppositeLinesFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositeLinesFeatureActualType&
      operator= (const OppositeLinesFeatureActualType& x);

      virtual 
      ~OppositeLinesFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CenterLine_optional CenterLine_;
      Normal_optional Normal_;
      Width_optional Width_;
      WidthMin_optional WidthMin_;
      WidthMax_optional WidthMax_;
      Length_optional Length_;
      LengthMin_optional LengthMin_;
      LengthMax_optional LengthMax_;
      TaperAngle_optional TaperAngle_;
      EndRadius1_optional EndRadius1_;
      EndRadius2_optional EndRadius2_;
      Form_optional Form_;
    };

    class OppositePlanesConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::OppositePlanesBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::OppositePlanesRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Copy
      //
      typedef ::xsd::qif2::OppositePlanesCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::OppositePlanesCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // Transform
      //
      typedef ::xsd::qif2::OppositePlanesTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // FromScan
      //
      typedef ::xsd::qif2::OppositePlanesFromScanType FromScan_type;
      typedef ::xsd::cxx::tree::optional< FromScan_type > FromScan_optional;
      typedef ::xsd::cxx::tree::traits< FromScan_type, char > FromScan_traits;

      const FromScan_optional&
      FromScan () const;

      FromScan_optional&
      FromScan ();

      void
      FromScan (const FromScan_type& x);

      void
      FromScan (const FromScan_optional& x);

      void
      FromScan (::std::auto_ptr< FromScan_type > p);

      // Constructors.
      //
      OppositePlanesConstructionMethodType ();

      OppositePlanesConstructionMethodType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      OppositePlanesConstructionMethodType (const OppositePlanesConstructionMethodType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual OppositePlanesConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositePlanesConstructionMethodType&
      operator= (const OppositePlanesConstructionMethodType& x);

      virtual 
      ~OppositePlanesConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Copy_optional Copy_;
      Cast_optional Cast_;
      Transform_optional Transform_;
      FromScan_optional FromScan_;
    };

    class OppositePlanesBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      OppositePlanesBestFitType ();

      OppositePlanesBestFitType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      OppositePlanesBestFitType (const OppositePlanesBestFitType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual OppositePlanesBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositePlanesBestFitType&
      operator= (const OppositePlanesBestFitType& x);

      virtual 
      ~OppositePlanesBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class OppositePlanesRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      OppositePlanesRecompType (const BaseFeaturePointList_type&);

      OppositePlanesRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      OppositePlanesRecompType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      OppositePlanesRecompType (const OppositePlanesRecompType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual OppositePlanesRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositePlanesRecompType&
      operator= (const OppositePlanesRecompType& x);

      virtual 
      ~OppositePlanesRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class OppositePlanesCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseOppositePlanes
      //
      typedef ::xsd::qif2::BaseFeatureType BaseOppositePlanes_type;
      typedef ::xsd::cxx::tree::traits< BaseOppositePlanes_type, char > BaseOppositePlanes_traits;

      const BaseOppositePlanes_type&
      BaseOppositePlanes () const;

      BaseOppositePlanes_type&
      BaseOppositePlanes ();

      void
      BaseOppositePlanes (const BaseOppositePlanes_type& x);

      void
      BaseOppositePlanes (::std::auto_ptr< BaseOppositePlanes_type > p);

      // Constructors.
      //
      OppositePlanesCopyType (const BaseOppositePlanes_type&);

      OppositePlanesCopyType (::std::auto_ptr< BaseOppositePlanes_type >);

      OppositePlanesCopyType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      OppositePlanesCopyType (const OppositePlanesCopyType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual OppositePlanesCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositePlanesCopyType&
      operator= (const OppositePlanesCopyType& x);

      virtual 
      ~OppositePlanesCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseOppositePlanes_type > BaseOppositePlanes_;
    };

    class OppositePlanesCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      OppositePlanesCastType (const BaseFeature_type&);

      OppositePlanesCastType (::std::auto_ptr< BaseFeature_type >);

      OppositePlanesCastType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      OppositePlanesCastType (const OppositePlanesCastType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual OppositePlanesCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositePlanesCastType&
      operator= (const OppositePlanesCastType& x);

      virtual 
      ~OppositePlanesCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class OppositePlanesTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseOppositePlanes
      //
      typedef ::xsd::qif2::BaseFeatureType BaseOppositePlanes_type;
      typedef ::xsd::cxx::tree::traits< BaseOppositePlanes_type, char > BaseOppositePlanes_traits;

      const BaseOppositePlanes_type&
      BaseOppositePlanes () const;

      BaseOppositePlanes_type&
      BaseOppositePlanes ();

      void
      BaseOppositePlanes (const BaseOppositePlanes_type& x);

      void
      BaseOppositePlanes (::std::auto_ptr< BaseOppositePlanes_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      OppositePlanesTransformType (const BaseOppositePlanes_type&,
                                   const Transformation_type&);

      OppositePlanesTransformType (::std::auto_ptr< BaseOppositePlanes_type >,
                                   ::std::auto_ptr< Transformation_type >);

      OppositePlanesTransformType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      OppositePlanesTransformType (const OppositePlanesTransformType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual OppositePlanesTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositePlanesTransformType&
      operator= (const OppositePlanesTransformType& x);

      virtual 
      ~OppositePlanesTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseOppositePlanes_type > BaseOppositePlanes_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class OppositePlanesFromScanType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // SurfaceFeature
      //
      typedef ::xsd::qif2::BaseFeatureType SurfaceFeature_type;
      typedef ::xsd::cxx::tree::traits< SurfaceFeature_type, char > SurfaceFeature_traits;

      const SurfaceFeature_type&
      SurfaceFeature () const;

      SurfaceFeature_type&
      SurfaceFeature ();

      void
      SurfaceFeature (const SurfaceFeature_type& x);

      void
      SurfaceFeature (::std::auto_ptr< SurfaceFeature_type > p);

      // SearchRadius
      //
      typedef ::xsd::qif2::LinearValueType SearchRadius_type;
      typedef ::xsd::cxx::tree::traits< SearchRadius_type, char > SearchRadius_traits;

      const SearchRadius_type&
      SearchRadius () const;

      SearchRadius_type&
      SearchRadius ();

      void
      SearchRadius (const SearchRadius_type& x);

      void
      SearchRadius (::std::auto_ptr< SearchRadius_type > p);

      // Constructors.
      //
      OppositePlanesFromScanType (const SurfaceFeature_type&,
                                  const SearchRadius_type&);

      OppositePlanesFromScanType (::std::auto_ptr< SurfaceFeature_type >,
                                  ::std::auto_ptr< SearchRadius_type >);

      OppositePlanesFromScanType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      OppositePlanesFromScanType (const OppositePlanesFromScanType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual OppositePlanesFromScanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositePlanesFromScanType&
      operator= (const OppositePlanesFromScanType& x);

      virtual 
      ~OppositePlanesFromScanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SurfaceFeature_type > SurfaceFeature_;
      ::xsd::cxx::tree::one< SearchRadius_type > SearchRadius_;
    };

    class OppositePlanesCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::OppositePlanesConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      OppositePlanesCheckedType ();

      OppositePlanesCheckedType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      OppositePlanesCheckedType (const OppositePlanesCheckedType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual OppositePlanesCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositePlanesCheckedType&
      operator= (const OppositePlanesCheckedType& x);

      virtual 
      ~OppositePlanesCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class OppositePlanesCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::OppositePlanesCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      OppositePlanesCheckedFeatureType ();

      OppositePlanesCheckedFeatureType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      OppositePlanesCheckedFeatureType (const OppositePlanesCheckedFeatureType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual OppositePlanesCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositePlanesCheckedFeatureType&
      operator= (const OppositePlanesCheckedFeatureType& x);

      virtual 
      ~OppositePlanesCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class OppositePlanesActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::OppositePlanesCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      OppositePlanesActualDeterminationType ();

      OppositePlanesActualDeterminationType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      OppositePlanesActualDeterminationType (const OppositePlanesActualDeterminationType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual OppositePlanesActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositePlanesActualDeterminationType&
      operator= (const OppositePlanesActualDeterminationType& x);

      virtual 
      ~OppositePlanesActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class OppositePlanesFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::OppositePlanesActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::FeatureOfSizeSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      OppositePlanesFeatureItemType (const id_type&,
                                     const FeatureName_type&,
                                     const DeterminationMode_type&);

      OppositePlanesFeatureItemType (const id_type&,
                                     const FeatureName_type&,
                                     ::std::auto_ptr< DeterminationMode_type >);

      OppositePlanesFeatureItemType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      OppositePlanesFeatureItemType (const OppositePlanesFeatureItemType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual OppositePlanesFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositePlanesFeatureItemType&
      operator= (const OppositePlanesFeatureItemType& x);

      virtual 
      ~OppositePlanesFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class OppositePlanesFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // InternalExternal
      //
      typedef ::xsd::qif2::InternalExternalEnumType InternalExternal_type;
      typedef ::xsd::cxx::tree::traits< InternalExternal_type, char > InternalExternal_traits;

      const InternalExternal_type&
      InternalExternal () const;

      InternalExternal_type&
      InternalExternal ();

      void
      InternalExternal (const InternalExternal_type& x);

      void
      InternalExternal (::std::auto_ptr< InternalExternal_type > p);

      // Width
      //
      typedef ::xsd::qif2::LinearValueType Width_type;
      typedef ::xsd::cxx::tree::traits< Width_type, char > Width_traits;

      const Width_type&
      Width () const;

      Width_type&
      Width ();

      void
      Width (const Width_type& x);

      void
      Width (::std::auto_ptr< Width_type > p);

      // Length
      //
      typedef ::xsd::qif2::LinearValueType Length_type;
      typedef ::xsd::cxx::tree::optional< Length_type > Length_optional;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_optional&
      Length () const;

      Length_optional&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (const Length_optional& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // EndType
      //
      typedef ::xsd::qif2::SlotEndType EndType_type;
      typedef ::xsd::cxx::tree::traits< EndType_type, char > EndType_traits;

      const EndType_type&
      EndType () const;

      EndType_type&
      EndType ();

      void
      EndType (const EndType_type& x);

      void
      EndType (::std::auto_ptr< EndType_type > p);

      // Depth
      //
      typedef ::xsd::qif2::LinearValueType Depth_type;
      typedef ::xsd::cxx::tree::optional< Depth_type > Depth_optional;
      typedef ::xsd::cxx::tree::traits< Depth_type, char > Depth_traits;

      const Depth_optional&
      Depth () const;

      Depth_optional&
      Depth ();

      void
      Depth (const Depth_type& x);

      void
      Depth (const Depth_optional& x);

      void
      Depth (::std::auto_ptr< Depth_type > p);

      // Bottom
      //
      typedef ::xsd::qif2::BottomType Bottom_type;
      typedef ::xsd::cxx::tree::optional< Bottom_type > Bottom_optional;
      typedef ::xsd::cxx::tree::traits< Bottom_type, char > Bottom_traits;

      const Bottom_optional&
      Bottom () const;

      Bottom_optional&
      Bottom ();

      void
      Bottom (const Bottom_type& x);

      void
      Bottom (const Bottom_optional& x);

      void
      Bottom (::std::auto_ptr< Bottom_type > p);

      // SingleOpenEnd
      //
      typedef ::xml_schema::boolean SingleOpenEnd_type;
      typedef ::xsd::cxx::tree::optional< SingleOpenEnd_type > SingleOpenEnd_optional;
      typedef ::xsd::cxx::tree::traits< SingleOpenEnd_type, char > SingleOpenEnd_traits;

      const SingleOpenEnd_optional&
      SingleOpenEnd () const;

      SingleOpenEnd_optional&
      SingleOpenEnd ();

      void
      SingleOpenEnd (const SingleOpenEnd_type& x);

      void
      SingleOpenEnd (const SingleOpenEnd_optional& x);

      // EndRadius1
      //
      typedef ::xsd::qif2::EndRadiusType EndRadius1_type;
      typedef ::xsd::cxx::tree::optional< EndRadius1_type > EndRadius1_optional;
      typedef ::xsd::cxx::tree::traits< EndRadius1_type, char > EndRadius1_traits;

      const EndRadius1_optional&
      EndRadius1 () const;

      EndRadius1_optional&
      EndRadius1 ();

      void
      EndRadius1 (const EndRadius1_type& x);

      void
      EndRadius1 (const EndRadius1_optional& x);

      void
      EndRadius1 (::std::auto_ptr< EndRadius1_type > p);

      // EndRadius2
      //
      typedef ::xsd::qif2::EndRadiusType EndRadius2_type;
      typedef ::xsd::cxx::tree::optional< EndRadius2_type > EndRadius2_optional;
      typedef ::xsd::cxx::tree::traits< EndRadius2_type, char > EndRadius2_traits;

      const EndRadius2_optional&
      EndRadius2 () const;

      EndRadius2_optional&
      EndRadius2 ();

      void
      EndRadius2 (const EndRadius2_type& x);

      void
      EndRadius2 (const EndRadius2_optional& x);

      void
      EndRadius2 (::std::auto_ptr< EndRadius2_type > p);

      // TaperAngle
      //
      typedef ::xsd::qif2::AngularValueType TaperAngle_type;
      typedef ::xsd::cxx::tree::optional< TaperAngle_type > TaperAngle_optional;
      typedef ::xsd::cxx::tree::traits< TaperAngle_type, char > TaperAngle_traits;

      const TaperAngle_optional&
      TaperAngle () const;

      TaperAngle_optional&
      TaperAngle ();

      void
      TaperAngle (const TaperAngle_type& x);

      void
      TaperAngle (const TaperAngle_optional& x);

      void
      TaperAngle (::std::auto_ptr< TaperAngle_type > p);

      // DraftAngle
      //
      typedef ::xsd::qif2::AngularValueType DraftAngle_type;
      typedef ::xsd::cxx::tree::optional< DraftAngle_type > DraftAngle_optional;
      typedef ::xsd::cxx::tree::traits< DraftAngle_type, char > DraftAngle_traits;

      const DraftAngle_optional&
      DraftAngle () const;

      DraftAngle_optional&
      DraftAngle ();

      void
      DraftAngle (const DraftAngle_type& x);

      void
      DraftAngle (const DraftAngle_optional& x);

      void
      DraftAngle (::std::auto_ptr< DraftAngle_type > p);

      // Constructors.
      //
      OppositePlanesFeatureDefinitionType (const id_type&,
                                           const InternalExternal_type&,
                                           const Width_type&,
                                           const EndType_type&);

      OppositePlanesFeatureDefinitionType (const id_type&,
                                           const InternalExternal_type&,
                                           ::std::auto_ptr< Width_type >,
                                           ::std::auto_ptr< EndType_type >);

      OppositePlanesFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      OppositePlanesFeatureDefinitionType (const OppositePlanesFeatureDefinitionType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual OppositePlanesFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositePlanesFeatureDefinitionType&
      operator= (const OppositePlanesFeatureDefinitionType& x);

      virtual 
      ~OppositePlanesFeatureDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< InternalExternal_type > InternalExternal_;
      ::xsd::cxx::tree::one< Width_type > Width_;
      Length_optional Length_;
      ::xsd::cxx::tree::one< EndType_type > EndType_;
      Depth_optional Depth_;
      Bottom_optional Bottom_;
      SingleOpenEnd_optional SingleOpenEnd_;
      EndRadius1_optional EndRadius1_;
      EndRadius2_optional EndRadius2_;
      TaperAngle_optional TaperAngle_;
      DraftAngle_optional DraftAngle_;
    };

    class OppositePlanesFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // CenterPlane
      //
      typedef ::xsd::qif2::PlaneType CenterPlane_type;
      typedef ::xsd::cxx::tree::traits< CenterPlane_type, char > CenterPlane_traits;

      const CenterPlane_type&
      CenterPlane () const;

      CenterPlane_type&
      CenterPlane ();

      void
      CenterPlane (const CenterPlane_type& x);

      void
      CenterPlane (::std::auto_ptr< CenterPlane_type > p);

      // LengthVector
      //
      typedef ::xsd::qif2::UnitVectorType LengthVector_type;
      typedef ::xsd::cxx::tree::optional< LengthVector_type > LengthVector_optional;
      typedef ::xsd::cxx::tree::traits< LengthVector_type, char > LengthVector_traits;

      const LengthVector_optional&
      LengthVector () const;

      LengthVector_optional&
      LengthVector ();

      void
      LengthVector (const LengthVector_type& x);

      void
      LengthVector (const LengthVector_optional& x);

      void
      LengthVector (::std::auto_ptr< LengthVector_type > p);

      // DepthVector
      //
      typedef ::xsd::qif2::UnitVectorType DepthVector_type;
      typedef ::xsd::cxx::tree::optional< DepthVector_type > DepthVector_optional;
      typedef ::xsd::cxx::tree::traits< DepthVector_type, char > DepthVector_traits;

      const DepthVector_optional&
      DepthVector () const;

      DepthVector_optional&
      DepthVector ();

      void
      DepthVector (const DepthVector_type& x);

      void
      DepthVector (const DepthVector_optional& x);

      void
      DepthVector (::std::auto_ptr< DepthVector_type > p);

      // DraftVector
      //
      typedef ::xsd::qif2::UnitVectorType DraftVector_type;
      typedef ::xsd::cxx::tree::optional< DraftVector_type > DraftVector_optional;
      typedef ::xsd::cxx::tree::traits< DraftVector_type, char > DraftVector_traits;

      const DraftVector_optional&
      DraftVector () const;

      DraftVector_optional&
      DraftVector ();

      void
      DraftVector (const DraftVector_type& x);

      void
      DraftVector (const DraftVector_optional& x);

      void
      DraftVector (::std::auto_ptr< DraftVector_type > p);

      // Constructors.
      //
      OppositePlanesFeatureNominalType (const id_type&,
                                        const FeatureDefinitionId_type&,
                                        const CenterPlane_type&);

      OppositePlanesFeatureNominalType (const id_type&,
                                        const FeatureDefinitionId_type&,
                                        ::std::auto_ptr< CenterPlane_type >);

      OppositePlanesFeatureNominalType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      OppositePlanesFeatureNominalType (const OppositePlanesFeatureNominalType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual OppositePlanesFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositePlanesFeatureNominalType&
      operator= (const OppositePlanesFeatureNominalType& x);

      virtual 
      ~OppositePlanesFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< CenterPlane_type > CenterPlane_;
      LengthVector_optional LengthVector_;
      DepthVector_optional DepthVector_;
      DraftVector_optional DraftVector_;
    };

    class OppositePlanesFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // CenterPlane
      //
      typedef ::xsd::qif2::ActualPlaneType CenterPlane_type;
      typedef ::xsd::cxx::tree::optional< CenterPlane_type > CenterPlane_optional;
      typedef ::xsd::cxx::tree::traits< CenterPlane_type, char > CenterPlane_traits;

      const CenterPlane_optional&
      CenterPlane () const;

      CenterPlane_optional&
      CenterPlane ();

      void
      CenterPlane (const CenterPlane_type& x);

      void
      CenterPlane (const CenterPlane_optional& x);

      void
      CenterPlane (::std::auto_ptr< CenterPlane_type > p);

      // LengthVector
      //
      typedef ::xsd::qif2::ActualUnitVectorType LengthVector_type;
      typedef ::xsd::cxx::tree::optional< LengthVector_type > LengthVector_optional;
      typedef ::xsd::cxx::tree::traits< LengthVector_type, char > LengthVector_traits;

      const LengthVector_optional&
      LengthVector () const;

      LengthVector_optional&
      LengthVector ();

      void
      LengthVector (const LengthVector_type& x);

      void
      LengthVector (const LengthVector_optional& x);

      void
      LengthVector (::std::auto_ptr< LengthVector_type > p);

      // DepthVector
      //
      typedef ::xsd::qif2::ActualUnitVectorType DepthVector_type;
      typedef ::xsd::cxx::tree::optional< DepthVector_type > DepthVector_optional;
      typedef ::xsd::cxx::tree::traits< DepthVector_type, char > DepthVector_traits;

      const DepthVector_optional&
      DepthVector () const;

      DepthVector_optional&
      DepthVector ();

      void
      DepthVector (const DepthVector_type& x);

      void
      DepthVector (const DepthVector_optional& x);

      void
      DepthVector (::std::auto_ptr< DepthVector_type > p);

      // Width
      //
      typedef ::xsd::qif2::ActualLinearValueType Width_type;
      typedef ::xsd::cxx::tree::optional< Width_type > Width_optional;
      typedef ::xsd::cxx::tree::traits< Width_type, char > Width_traits;

      const Width_optional&
      Width () const;

      Width_optional&
      Width ();

      void
      Width (const Width_type& x);

      void
      Width (const Width_optional& x);

      void
      Width (::std::auto_ptr< Width_type > p);

      // WidthMin
      //
      typedef ::xsd::qif2::ActualLinearValueType WidthMin_type;
      typedef ::xsd::cxx::tree::optional< WidthMin_type > WidthMin_optional;
      typedef ::xsd::cxx::tree::traits< WidthMin_type, char > WidthMin_traits;

      const WidthMin_optional&
      WidthMin () const;

      WidthMin_optional&
      WidthMin ();

      void
      WidthMin (const WidthMin_type& x);

      void
      WidthMin (const WidthMin_optional& x);

      void
      WidthMin (::std::auto_ptr< WidthMin_type > p);

      // WidthMax
      //
      typedef ::xsd::qif2::ActualLinearValueType WidthMax_type;
      typedef ::xsd::cxx::tree::optional< WidthMax_type > WidthMax_optional;
      typedef ::xsd::cxx::tree::traits< WidthMax_type, char > WidthMax_traits;

      const WidthMax_optional&
      WidthMax () const;

      WidthMax_optional&
      WidthMax ();

      void
      WidthMax (const WidthMax_type& x);

      void
      WidthMax (const WidthMax_optional& x);

      void
      WidthMax (::std::auto_ptr< WidthMax_type > p);

      // Length
      //
      typedef ::xsd::qif2::ActualLinearValueType Length_type;
      typedef ::xsd::cxx::tree::optional< Length_type > Length_optional;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_optional&
      Length () const;

      Length_optional&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (const Length_optional& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // LengthMin
      //
      typedef ::xsd::qif2::ActualLinearValueType LengthMin_type;
      typedef ::xsd::cxx::tree::optional< LengthMin_type > LengthMin_optional;
      typedef ::xsd::cxx::tree::traits< LengthMin_type, char > LengthMin_traits;

      const LengthMin_optional&
      LengthMin () const;

      LengthMin_optional&
      LengthMin ();

      void
      LengthMin (const LengthMin_type& x);

      void
      LengthMin (const LengthMin_optional& x);

      void
      LengthMin (::std::auto_ptr< LengthMin_type > p);

      // LengthMax
      //
      typedef ::xsd::qif2::ActualLinearValueType LengthMax_type;
      typedef ::xsd::cxx::tree::optional< LengthMax_type > LengthMax_optional;
      typedef ::xsd::cxx::tree::traits< LengthMax_type, char > LengthMax_traits;

      const LengthMax_optional&
      LengthMax () const;

      LengthMax_optional&
      LengthMax ();

      void
      LengthMax (const LengthMax_type& x);

      void
      LengthMax (const LengthMax_optional& x);

      void
      LengthMax (::std::auto_ptr< LengthMax_type > p);

      // Depth
      //
      typedef ::xsd::qif2::ActualLinearValueType Depth_type;
      typedef ::xsd::cxx::tree::optional< Depth_type > Depth_optional;
      typedef ::xsd::cxx::tree::traits< Depth_type, char > Depth_traits;

      const Depth_optional&
      Depth () const;

      Depth_optional&
      Depth ();

      void
      Depth (const Depth_type& x);

      void
      Depth (const Depth_optional& x);

      void
      Depth (::std::auto_ptr< Depth_type > p);

      // TaperAngle
      //
      typedef ::xsd::qif2::ActualAngularValueType TaperAngle_type;
      typedef ::xsd::cxx::tree::optional< TaperAngle_type > TaperAngle_optional;
      typedef ::xsd::cxx::tree::traits< TaperAngle_type, char > TaperAngle_traits;

      const TaperAngle_optional&
      TaperAngle () const;

      TaperAngle_optional&
      TaperAngle ();

      void
      TaperAngle (const TaperAngle_type& x);

      void
      TaperAngle (const TaperAngle_optional& x);

      void
      TaperAngle (::std::auto_ptr< TaperAngle_type > p);

      // DraftAngle
      //
      typedef ::xsd::qif2::ActualAngularValueType DraftAngle_type;
      typedef ::xsd::cxx::tree::optional< DraftAngle_type > DraftAngle_optional;
      typedef ::xsd::cxx::tree::traits< DraftAngle_type, char > DraftAngle_traits;

      const DraftAngle_optional&
      DraftAngle () const;

      DraftAngle_optional&
      DraftAngle ();

      void
      DraftAngle (const DraftAngle_type& x);

      void
      DraftAngle (const DraftAngle_optional& x);

      void
      DraftAngle (::std::auto_ptr< DraftAngle_type > p);

      // EndRadius1
      //
      typedef ::xsd::qif2::ActualEndRadiusType EndRadius1_type;
      typedef ::xsd::cxx::tree::optional< EndRadius1_type > EndRadius1_optional;
      typedef ::xsd::cxx::tree::traits< EndRadius1_type, char > EndRadius1_traits;

      const EndRadius1_optional&
      EndRadius1 () const;

      EndRadius1_optional&
      EndRadius1 ();

      void
      EndRadius1 (const EndRadius1_type& x);

      void
      EndRadius1 (const EndRadius1_optional& x);

      void
      EndRadius1 (::std::auto_ptr< EndRadius1_type > p);

      // EndRadius2
      //
      typedef ::xsd::qif2::ActualEndRadiusType EndRadius2_type;
      typedef ::xsd::cxx::tree::optional< EndRadius2_type > EndRadius2_optional;
      typedef ::xsd::cxx::tree::traits< EndRadius2_type, char > EndRadius2_traits;

      const EndRadius2_optional&
      EndRadius2 () const;

      EndRadius2_optional&
      EndRadius2 ();

      void
      EndRadius2 (const EndRadius2_type& x);

      void
      EndRadius2 (const EndRadius2_optional& x);

      void
      EndRadius2 (::std::auto_ptr< EndRadius2_type > p);

      // Form
      //
      typedef ::xsd::qif2::ActualLinearValueType Form_type;
      typedef ::xsd::cxx::tree::optional< Form_type > Form_optional;
      typedef ::xsd::cxx::tree::traits< Form_type, char > Form_traits;

      const Form_optional&
      Form () const;

      Form_optional&
      Form ();

      void
      Form (const Form_type& x);

      void
      Form (const Form_optional& x);

      void
      Form (::std::auto_ptr< Form_type > p);

      // Constructors.
      //
      OppositePlanesFeatureActualType (const id_type&,
                                       const FeatureItemId_type&);

      OppositePlanesFeatureActualType (const id_type&,
                                       ::std::auto_ptr< FeatureItemId_type >);

      OppositePlanesFeatureActualType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      OppositePlanesFeatureActualType (const OppositePlanesFeatureActualType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual OppositePlanesFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OppositePlanesFeatureActualType&
      operator= (const OppositePlanesFeatureActualType& x);

      virtual 
      ~OppositePlanesFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CenterPlane_optional CenterPlane_;
      LengthVector_optional LengthVector_;
      DepthVector_optional DepthVector_;
      Width_optional Width_;
      WidthMin_optional WidthMin_;
      WidthMax_optional WidthMax_;
      Length_optional Length_;
      LengthMin_optional LengthMin_;
      LengthMax_optional LengthMax_;
      Depth_optional Depth_;
      TaperAngle_optional TaperAngle_;
      DraftAngle_optional DraftAngle_;
      EndRadius1_optional EndRadius1_;
      EndRadius2_optional EndRadius2_;
      Form_optional Form_;
    };

    class PlaneConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::PlaneBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::PlaneRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Midplane
      //
      typedef ::xsd::qif2::PlaneMidplaneType Midplane_type;
      typedef ::xsd::cxx::tree::optional< Midplane_type > Midplane_optional;
      typedef ::xsd::cxx::tree::traits< Midplane_type, char > Midplane_traits;

      const Midplane_optional&
      Midplane () const;

      Midplane_optional&
      Midplane ();

      void
      Midplane (const Midplane_type& x);

      void
      Midplane (const Midplane_optional& x);

      void
      Midplane (::std::auto_ptr< Midplane_type > p);

      // Offset
      //
      typedef ::xsd::qif2::PlaneOffsetType Offset_type;
      typedef ::xsd::cxx::tree::optional< Offset_type > Offset_optional;
      typedef ::xsd::cxx::tree::traits< Offset_type, char > Offset_traits;

      const Offset_optional&
      Offset () const;

      Offset_optional&
      Offset ();

      void
      Offset (const Offset_type& x);

      void
      Offset (const Offset_optional& x);

      void
      Offset (::std::auto_ptr< Offset_type > p);

      // Perpendicular
      //
      typedef ::xsd::qif2::PlanePerpendicularType Perpendicular_type;
      typedef ::xsd::cxx::tree::optional< Perpendicular_type > Perpendicular_optional;
      typedef ::xsd::cxx::tree::traits< Perpendicular_type, char > Perpendicular_traits;

      const Perpendicular_optional&
      Perpendicular () const;

      Perpendicular_optional&
      Perpendicular ();

      void
      Perpendicular (const Perpendicular_type& x);

      void
      Perpendicular (const Perpendicular_optional& x);

      void
      Perpendicular (::std::auto_ptr< Perpendicular_type > p);

      // Parallel
      //
      typedef ::xsd::qif2::PlaneParallelType Parallel_type;
      typedef ::xsd::cxx::tree::optional< Parallel_type > Parallel_optional;
      typedef ::xsd::cxx::tree::traits< Parallel_type, char > Parallel_traits;

      const Parallel_optional&
      Parallel () const;

      Parallel_optional&
      Parallel ();

      void
      Parallel (const Parallel_type& x);

      void
      Parallel (const Parallel_optional& x);

      void
      Parallel (::std::auto_ptr< Parallel_type > p);

      // Copy
      //
      typedef ::xsd::qif2::PlaneCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::PlaneCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // TangentThrough
      //
      typedef ::xsd::qif2::PlaneTangentThroughType TangentThrough_type;
      typedef ::xsd::cxx::tree::optional< TangentThrough_type > TangentThrough_optional;
      typedef ::xsd::cxx::tree::traits< TangentThrough_type, char > TangentThrough_traits;

      const TangentThrough_optional&
      TangentThrough () const;

      TangentThrough_optional&
      TangentThrough ();

      void
      TangentThrough (const TangentThrough_type& x);

      void
      TangentThrough (const TangentThrough_optional& x);

      void
      TangentThrough (::std::auto_ptr< TangentThrough_type > p);

      // Transform
      //
      typedef ::xsd::qif2::PlaneTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // Extract
      //
      typedef ::xsd::qif2::PlaneExtractType Extract_type;
      typedef ::xsd::cxx::tree::optional< Extract_type > Extract_optional;
      typedef ::xsd::cxx::tree::traits< Extract_type, char > Extract_traits;

      const Extract_optional&
      Extract () const;

      Extract_optional&
      Extract ();

      void
      Extract (const Extract_type& x);

      void
      Extract (const Extract_optional& x);

      void
      Extract (::std::auto_ptr< Extract_type > p);

      // Constructors.
      //
      PlaneConstructionMethodType ();

      PlaneConstructionMethodType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      PlaneConstructionMethodType (const PlaneConstructionMethodType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual PlaneConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PlaneConstructionMethodType&
      operator= (const PlaneConstructionMethodType& x);

      virtual 
      ~PlaneConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Midplane_optional Midplane_;
      Offset_optional Offset_;
      Perpendicular_optional Perpendicular_;
      Parallel_optional Parallel_;
      Copy_optional Copy_;
      Cast_optional Cast_;
      TangentThrough_optional TangentThrough_;
      Transform_optional Transform_;
      Extract_optional Extract_;
    };

    class PlaneBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      PlaneBestFitType ();

      PlaneBestFitType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      PlaneBestFitType (const PlaneBestFitType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual PlaneBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PlaneBestFitType&
      operator= (const PlaneBestFitType& x);

      virtual 
      ~PlaneBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class PlaneRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      PlaneRecompType (const BaseFeaturePointList_type&);

      PlaneRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      PlaneRecompType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      PlaneRecompType (const PlaneRecompType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual PlaneRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PlaneRecompType&
      operator= (const PlaneRecompType& x);

      virtual 
      ~PlaneRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class PlaneMidplaneType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BasePlane
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BasePlane_type;
      typedef ::xsd::cxx::tree::sequence< BasePlane_type > BasePlane_sequence;
      typedef BasePlane_sequence::iterator BasePlane_iterator;
      typedef BasePlane_sequence::const_iterator BasePlane_const_iterator;
      typedef ::xsd::cxx::tree::traits< BasePlane_type, char > BasePlane_traits;

      const BasePlane_sequence&
      BasePlane () const;

      BasePlane_sequence&
      BasePlane ();

      void
      BasePlane (const BasePlane_sequence& s);

      // Constructors.
      //
      PlaneMidplaneType ();

      PlaneMidplaneType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      PlaneMidplaneType (const PlaneMidplaneType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual PlaneMidplaneType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PlaneMidplaneType&
      operator= (const PlaneMidplaneType& x);

      virtual 
      ~PlaneMidplaneType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BasePlane_sequence BasePlane_;
    };

    class PlaneOffsetType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BasePlane
      //
      typedef ::xsd::qif2::BaseFeatureType BasePlane_type;
      typedef ::xsd::cxx::tree::traits< BasePlane_type, char > BasePlane_traits;

      const BasePlane_type&
      BasePlane () const;

      BasePlane_type&
      BasePlane ();

      void
      BasePlane (const BasePlane_type& x);

      void
      BasePlane (::std::auto_ptr< BasePlane_type > p);

      // Offset
      //
      typedef ::xsd::qif2::LinearValueType Offset_type;
      typedef ::xsd::cxx::tree::traits< Offset_type, char > Offset_traits;

      const Offset_type&
      Offset () const;

      Offset_type&
      Offset ();

      void
      Offset (const Offset_type& x);

      void
      Offset (::std::auto_ptr< Offset_type > p);

      // Constructors.
      //
      PlaneOffsetType (const BasePlane_type&,
                       const Offset_type&);

      PlaneOffsetType (::std::auto_ptr< BasePlane_type >,
                       ::std::auto_ptr< Offset_type >);

      PlaneOffsetType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      PlaneOffsetType (const PlaneOffsetType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual PlaneOffsetType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PlaneOffsetType&
      operator= (const PlaneOffsetType& x);

      virtual 
      ~PlaneOffsetType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BasePlane_type > BasePlane_;
      ::xsd::cxx::tree::one< Offset_type > Offset_;
    };

    class PlanePerpendicularType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // PerpendicularFeature
      //
      typedef ::xsd::qif2::BaseFeatureType PerpendicularFeature_type;
      typedef ::xsd::cxx::tree::traits< PerpendicularFeature_type, char > PerpendicularFeature_traits;

      const PerpendicularFeature_type&
      PerpendicularFeature () const;

      PerpendicularFeature_type&
      PerpendicularFeature ();

      void
      PerpendicularFeature (const PerpendicularFeature_type& x);

      void
      PerpendicularFeature (::std::auto_ptr< PerpendicularFeature_type > p);

      // PointFeature
      //
      typedef ::xsd::qif2::BaseFeatureType PointFeature_type;
      typedef ::xsd::cxx::tree::traits< PointFeature_type, char > PointFeature_traits;

      const PointFeature_type&
      PointFeature () const;

      PointFeature_type&
      PointFeature ();

      void
      PointFeature (const PointFeature_type& x);

      void
      PointFeature (::std::auto_ptr< PointFeature_type > p);

      // Constructors.
      //
      PlanePerpendicularType (const PerpendicularFeature_type&,
                              const PointFeature_type&);

      PlanePerpendicularType (::std::auto_ptr< PerpendicularFeature_type >,
                              ::std::auto_ptr< PointFeature_type >);

      PlanePerpendicularType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      PlanePerpendicularType (const PlanePerpendicularType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual PlanePerpendicularType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PlanePerpendicularType&
      operator= (const PlanePerpendicularType& x);

      virtual 
      ~PlanePerpendicularType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< PerpendicularFeature_type > PerpendicularFeature_;
      ::xsd::cxx::tree::one< PointFeature_type > PointFeature_;
    };

    class PlaneParallelType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // ParallelFeature
      //
      typedef ::xsd::qif2::BaseFeatureType ParallelFeature_type;
      typedef ::xsd::cxx::tree::traits< ParallelFeature_type, char > ParallelFeature_traits;

      const ParallelFeature_type&
      ParallelFeature () const;

      ParallelFeature_type&
      ParallelFeature ();

      void
      ParallelFeature (const ParallelFeature_type& x);

      void
      ParallelFeature (::std::auto_ptr< ParallelFeature_type > p);

      // PointFeature
      //
      typedef ::xsd::qif2::BaseFeatureType PointFeature_type;
      typedef ::xsd::cxx::tree::traits< PointFeature_type, char > PointFeature_traits;

      const PointFeature_type&
      PointFeature () const;

      PointFeature_type&
      PointFeature ();

      void
      PointFeature (const PointFeature_type& x);

      void
      PointFeature (::std::auto_ptr< PointFeature_type > p);

      // Constructors.
      //
      PlaneParallelType (const ParallelFeature_type&,
                         const PointFeature_type&);

      PlaneParallelType (::std::auto_ptr< ParallelFeature_type >,
                         ::std::auto_ptr< PointFeature_type >);

      PlaneParallelType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      PlaneParallelType (const PlaneParallelType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual PlaneParallelType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PlaneParallelType&
      operator= (const PlaneParallelType& x);

      virtual 
      ~PlaneParallelType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ParallelFeature_type > ParallelFeature_;
      ::xsd::cxx::tree::one< PointFeature_type > PointFeature_;
    };

    class PlaneCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BasePlane
      //
      typedef ::xsd::qif2::BaseFeatureType BasePlane_type;
      typedef ::xsd::cxx::tree::traits< BasePlane_type, char > BasePlane_traits;

      const BasePlane_type&
      BasePlane () const;

      BasePlane_type&
      BasePlane ();

      void
      BasePlane (const BasePlane_type& x);

      void
      BasePlane (::std::auto_ptr< BasePlane_type > p);

      // Constructors.
      //
      PlaneCopyType (const BasePlane_type&);

      PlaneCopyType (::std::auto_ptr< BasePlane_type >);

      PlaneCopyType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      PlaneCopyType (const PlaneCopyType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual PlaneCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PlaneCopyType&
      operator= (const PlaneCopyType& x);

      virtual 
      ~PlaneCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BasePlane_type > BasePlane_;
    };

    class PlaneCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      PlaneCastType (const BaseFeature_type&);

      PlaneCastType (::std::auto_ptr< BaseFeature_type >);

      PlaneCastType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      PlaneCastType (const PlaneCastType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual PlaneCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PlaneCastType&
      operator= (const PlaneCastType& x);

      virtual 
      ~PlaneCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class PlaneTangentThroughType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // TangentFeature
      //
      typedef ::xsd::qif2::BaseFeatureType TangentFeature_type;
      typedef ::xsd::cxx::tree::traits< TangentFeature_type, char > TangentFeature_traits;

      const TangentFeature_type&
      TangentFeature () const;

      TangentFeature_type&
      TangentFeature ();

      void
      TangentFeature (const TangentFeature_type& x);

      void
      TangentFeature (::std::auto_ptr< TangentFeature_type > p);

      // PointFeature
      //
      typedef ::xsd::qif2::BaseFeatureType PointFeature_type;
      typedef ::xsd::cxx::tree::traits< PointFeature_type, char > PointFeature_traits;

      const PointFeature_type&
      PointFeature () const;

      PointFeature_type&
      PointFeature ();

      void
      PointFeature (const PointFeature_type& x);

      void
      PointFeature (::std::auto_ptr< PointFeature_type > p);

      // Constructors.
      //
      PlaneTangentThroughType (const TangentFeature_type&,
                               const PointFeature_type&);

      PlaneTangentThroughType (::std::auto_ptr< TangentFeature_type >,
                               ::std::auto_ptr< PointFeature_type >);

      PlaneTangentThroughType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      PlaneTangentThroughType (const PlaneTangentThroughType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual PlaneTangentThroughType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PlaneTangentThroughType&
      operator= (const PlaneTangentThroughType& x);

      virtual 
      ~PlaneTangentThroughType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< TangentFeature_type > TangentFeature_;
      ::xsd::cxx::tree::one< PointFeature_type > PointFeature_;
    };

    class PlaneTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BasePlane
      //
      typedef ::xsd::qif2::BaseFeatureType BasePlane_type;
      typedef ::xsd::cxx::tree::traits< BasePlane_type, char > BasePlane_traits;

      const BasePlane_type&
      BasePlane () const;

      BasePlane_type&
      BasePlane ();

      void
      BasePlane (const BasePlane_type& x);

      void
      BasePlane (::std::auto_ptr< BasePlane_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      PlaneTransformType (const BasePlane_type&,
                          const Transformation_type&);

      PlaneTransformType (::std::auto_ptr< BasePlane_type >,
                          ::std::auto_ptr< Transformation_type >);

      PlaneTransformType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      PlaneTransformType (const PlaneTransformType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual PlaneTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PlaneTransformType&
      operator= (const PlaneTransformType& x);

      virtual 
      ~PlaneTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BasePlane_type > BasePlane_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class PlaneExtractType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // SurfaceFeature
      //
      typedef ::xsd::qif2::BaseFeatureType SurfaceFeature_type;
      typedef ::xsd::cxx::tree::traits< SurfaceFeature_type, char > SurfaceFeature_traits;

      const SurfaceFeature_type&
      SurfaceFeature () const;

      SurfaceFeature_type&
      SurfaceFeature ();

      void
      SurfaceFeature (const SurfaceFeature_type& x);

      void
      SurfaceFeature (::std::auto_ptr< SurfaceFeature_type > p);

      // Constructors.
      //
      PlaneExtractType (const SurfaceFeature_type&);

      PlaneExtractType (::std::auto_ptr< SurfaceFeature_type >);

      PlaneExtractType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      PlaneExtractType (const PlaneExtractType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual PlaneExtractType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PlaneExtractType&
      operator= (const PlaneExtractType& x);

      virtual 
      ~PlaneExtractType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SurfaceFeature_type > SurfaceFeature_;
    };

    class PlaneCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::PlaneConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      PlaneCheckedType ();

      PlaneCheckedType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      PlaneCheckedType (const PlaneCheckedType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual PlaneCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PlaneCheckedType&
      operator= (const PlaneCheckedType& x);

      virtual 
      ~PlaneCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class PlaneCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::PlaneCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      PlaneCheckedFeatureType ();

      PlaneCheckedFeatureType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      PlaneCheckedFeatureType (const PlaneCheckedFeatureType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual PlaneCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PlaneCheckedFeatureType&
      operator= (const PlaneCheckedFeatureType& x);

      virtual 
      ~PlaneCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class PlaneActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::PlaneCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      PlaneActualDeterminationType ();

      PlaneActualDeterminationType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      PlaneActualDeterminationType (const PlaneActualDeterminationType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual PlaneActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PlaneActualDeterminationType&
      operator= (const PlaneActualDeterminationType& x);

      virtual 
      ~PlaneActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class PlaneFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::PlaneActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::NonFeatureOfSizeSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      PlaneFeatureItemType (const id_type&,
                            const FeatureName_type&,
                            const DeterminationMode_type&);

      PlaneFeatureItemType (const id_type&,
                            const FeatureName_type&,
                            ::std::auto_ptr< DeterminationMode_type >);

      PlaneFeatureItemType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      PlaneFeatureItemType (const PlaneFeatureItemType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual PlaneFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PlaneFeatureItemType&
      operator= (const PlaneFeatureItemType& x);

      virtual 
      ~PlaneFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class PlaneFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // Constructors.
      //
      PlaneFeatureDefinitionType (const id_type&);

      PlaneFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      PlaneFeatureDefinitionType (const PlaneFeatureDefinitionType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual PlaneFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PlaneFeatureDefinitionType ();
    };

    class PlaneFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::PointType Location_type;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_type&
      Location () const;

      Location_type&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // Normal
      //
      typedef ::xsd::qif2::UnitVectorType Normal_type;
      typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

      const Normal_type&
      Normal () const;

      Normal_type&
      Normal ();

      void
      Normal (const Normal_type& x);

      void
      Normal (::std::auto_ptr< Normal_type > p);

      // PolyLine
      //
      typedef ::xsd::qif2::PolyLineType PolyLine_type;
      typedef ::xsd::cxx::tree::optional< PolyLine_type > PolyLine_optional;
      typedef ::xsd::cxx::tree::traits< PolyLine_type, char > PolyLine_traits;

      const PolyLine_optional&
      PolyLine () const;

      PolyLine_optional&
      PolyLine ();

      void
      PolyLine (const PolyLine_type& x);

      void
      PolyLine (const PolyLine_optional& x);

      void
      PolyLine (::std::auto_ptr< PolyLine_type > p);

      // Constructors.
      //
      PlaneFeatureNominalType (const id_type&,
                               const FeatureDefinitionId_type&,
                               const Location_type&,
                               const Normal_type&);

      PlaneFeatureNominalType (const id_type&,
                               const FeatureDefinitionId_type&,
                               ::std::auto_ptr< Location_type >,
                               ::std::auto_ptr< Normal_type >);

      PlaneFeatureNominalType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      PlaneFeatureNominalType (const PlaneFeatureNominalType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual PlaneFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PlaneFeatureNominalType&
      operator= (const PlaneFeatureNominalType& x);

      virtual 
      ~PlaneFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Location_type > Location_;
      ::xsd::cxx::tree::one< Normal_type > Normal_;
      PolyLine_optional PolyLine_;
    };

    class PlaneFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::ActualPointType Location_type;
      typedef ::xsd::cxx::tree::optional< Location_type > Location_optional;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_optional&
      Location () const;

      Location_optional&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (const Location_optional& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // Normal
      //
      typedef ::xsd::qif2::ActualUnitVectorType Normal_type;
      typedef ::xsd::cxx::tree::optional< Normal_type > Normal_optional;
      typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

      const Normal_optional&
      Normal () const;

      Normal_optional&
      Normal ();

      void
      Normal (const Normal_type& x);

      void
      Normal (const Normal_optional& x);

      void
      Normal (::std::auto_ptr< Normal_type > p);

      // PolyLine
      //
      typedef ::xsd::qif2::PolyLineType PolyLine_type;
      typedef ::xsd::cxx::tree::optional< PolyLine_type > PolyLine_optional;
      typedef ::xsd::cxx::tree::traits< PolyLine_type, char > PolyLine_traits;

      const PolyLine_optional&
      PolyLine () const;

      PolyLine_optional&
      PolyLine ();

      void
      PolyLine (const PolyLine_type& x);

      void
      PolyLine (const PolyLine_optional& x);

      void
      PolyLine (::std::auto_ptr< PolyLine_type > p);

      // Form
      //
      typedef ::xsd::qif2::ActualLinearValueType Form_type;
      typedef ::xsd::cxx::tree::optional< Form_type > Form_optional;
      typedef ::xsd::cxx::tree::traits< Form_type, char > Form_traits;

      const Form_optional&
      Form () const;

      Form_optional&
      Form ();

      void
      Form (const Form_type& x);

      void
      Form (const Form_optional& x);

      void
      Form (::std::auto_ptr< Form_type > p);

      // Constructors.
      //
      PlaneFeatureActualType (const id_type&,
                              const FeatureItemId_type&);

      PlaneFeatureActualType (const id_type&,
                              ::std::auto_ptr< FeatureItemId_type >);

      PlaneFeatureActualType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      PlaneFeatureActualType (const PlaneFeatureActualType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual PlaneFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PlaneFeatureActualType&
      operator= (const PlaneFeatureActualType& x);

      virtual 
      ~PlaneFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Location_optional Location_;
      Normal_optional Normal_;
      PolyLine_optional PolyLine_;
      Form_optional Form_;
    };

    class PointDefinedCurveConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::PointDefinedCurveBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::PointDefinedCurveRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Copy
      //
      typedef ::xsd::qif2::PointDefinedCurveCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Transform
      //
      typedef ::xsd::qif2::PointDefinedCurveTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // FromScan
      //
      typedef ::xsd::qif2::PointDefinedCurveFromScanType FromScan_type;
      typedef ::xsd::cxx::tree::optional< FromScan_type > FromScan_optional;
      typedef ::xsd::cxx::tree::traits< FromScan_type, char > FromScan_traits;

      const FromScan_optional&
      FromScan () const;

      FromScan_optional&
      FromScan ();

      void
      FromScan (const FromScan_type& x);

      void
      FromScan (const FromScan_optional& x);

      void
      FromScan (::std::auto_ptr< FromScan_type > p);

      // Extract
      //
      typedef ::xsd::qif2::PointDefinedCurveExtractType Extract_type;
      typedef ::xsd::cxx::tree::optional< Extract_type > Extract_optional;
      typedef ::xsd::cxx::tree::traits< Extract_type, char > Extract_traits;

      const Extract_optional&
      Extract () const;

      Extract_optional&
      Extract ();

      void
      Extract (const Extract_type& x);

      void
      Extract (const Extract_optional& x);

      void
      Extract (::std::auto_ptr< Extract_type > p);

      // Constructors.
      //
      PointDefinedCurveConstructionMethodType ();

      PointDefinedCurveConstructionMethodType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      PointDefinedCurveConstructionMethodType (const PointDefinedCurveConstructionMethodType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual PointDefinedCurveConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedCurveConstructionMethodType&
      operator= (const PointDefinedCurveConstructionMethodType& x);

      virtual 
      ~PointDefinedCurveConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Copy_optional Copy_;
      Transform_optional Transform_;
      FromScan_optional FromScan_;
      Extract_optional Extract_;
    };

    class PointDefinedCurveBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      PointDefinedCurveBestFitType ();

      PointDefinedCurveBestFitType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      PointDefinedCurveBestFitType (const PointDefinedCurveBestFitType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual PointDefinedCurveBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedCurveBestFitType&
      operator= (const PointDefinedCurveBestFitType& x);

      virtual 
      ~PointDefinedCurveBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class PointDefinedCurveRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      PointDefinedCurveRecompType (const BaseFeaturePointList_type&);

      PointDefinedCurveRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      PointDefinedCurveRecompType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      PointDefinedCurveRecompType (const PointDefinedCurveRecompType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual PointDefinedCurveRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedCurveRecompType&
      operator= (const PointDefinedCurveRecompType& x);

      virtual 
      ~PointDefinedCurveRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class PointDefinedCurveCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BasePointDefinedCurve
      //
      typedef ::xsd::qif2::BaseFeatureType BasePointDefinedCurve_type;
      typedef ::xsd::cxx::tree::traits< BasePointDefinedCurve_type, char > BasePointDefinedCurve_traits;

      const BasePointDefinedCurve_type&
      BasePointDefinedCurve () const;

      BasePointDefinedCurve_type&
      BasePointDefinedCurve ();

      void
      BasePointDefinedCurve (const BasePointDefinedCurve_type& x);

      void
      BasePointDefinedCurve (::std::auto_ptr< BasePointDefinedCurve_type > p);

      // Constructors.
      //
      PointDefinedCurveCopyType (const BasePointDefinedCurve_type&);

      PointDefinedCurveCopyType (::std::auto_ptr< BasePointDefinedCurve_type >);

      PointDefinedCurveCopyType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      PointDefinedCurveCopyType (const PointDefinedCurveCopyType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual PointDefinedCurveCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedCurveCopyType&
      operator= (const PointDefinedCurveCopyType& x);

      virtual 
      ~PointDefinedCurveCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BasePointDefinedCurve_type > BasePointDefinedCurve_;
    };

    class PointDefinedCurveTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BasePointDefinedCurve
      //
      typedef ::xsd::qif2::BaseFeatureType BasePointDefinedCurve_type;
      typedef ::xsd::cxx::tree::traits< BasePointDefinedCurve_type, char > BasePointDefinedCurve_traits;

      const BasePointDefinedCurve_type&
      BasePointDefinedCurve () const;

      BasePointDefinedCurve_type&
      BasePointDefinedCurve ();

      void
      BasePointDefinedCurve (const BasePointDefinedCurve_type& x);

      void
      BasePointDefinedCurve (::std::auto_ptr< BasePointDefinedCurve_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      PointDefinedCurveTransformType (const BasePointDefinedCurve_type&,
                                      const Transformation_type&);

      PointDefinedCurveTransformType (::std::auto_ptr< BasePointDefinedCurve_type >,
                                      ::std::auto_ptr< Transformation_type >);

      PointDefinedCurveTransformType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      PointDefinedCurveTransformType (const PointDefinedCurveTransformType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual PointDefinedCurveTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedCurveTransformType&
      operator= (const PointDefinedCurveTransformType& x);

      virtual 
      ~PointDefinedCurveTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BasePointDefinedCurve_type > BasePointDefinedCurve_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class PointDefinedCurveFromScanType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // SurfaceFeature
      //
      typedef ::xsd::qif2::BaseFeatureType SurfaceFeature_type;
      typedef ::xsd::cxx::tree::traits< SurfaceFeature_type, char > SurfaceFeature_traits;

      const SurfaceFeature_type&
      SurfaceFeature () const;

      SurfaceFeature_type&
      SurfaceFeature ();

      void
      SurfaceFeature (const SurfaceFeature_type& x);

      void
      SurfaceFeature (::std::auto_ptr< SurfaceFeature_type > p);

      // SearchRadius
      //
      typedef ::xsd::qif2::LinearValueType SearchRadius_type;
      typedef ::xsd::cxx::tree::traits< SearchRadius_type, char > SearchRadius_traits;

      const SearchRadius_type&
      SearchRadius () const;

      SearchRadius_type&
      SearchRadius ();

      void
      SearchRadius (const SearchRadius_type& x);

      void
      SearchRadius (::std::auto_ptr< SearchRadius_type > p);

      // Constructors.
      //
      PointDefinedCurveFromScanType (const SurfaceFeature_type&,
                                     const SearchRadius_type&);

      PointDefinedCurveFromScanType (::std::auto_ptr< SurfaceFeature_type >,
                                     ::std::auto_ptr< SearchRadius_type >);

      PointDefinedCurveFromScanType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      PointDefinedCurveFromScanType (const PointDefinedCurveFromScanType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual PointDefinedCurveFromScanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedCurveFromScanType&
      operator= (const PointDefinedCurveFromScanType& x);

      virtual 
      ~PointDefinedCurveFromScanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SurfaceFeature_type > SurfaceFeature_;
      ::xsd::cxx::tree::one< SearchRadius_type > SearchRadius_;
    };

    class PointDefinedCurveExtractType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // CurveFeature
      //
      typedef ::xsd::qif2::BaseFeatureType CurveFeature_type;
      typedef ::xsd::cxx::tree::traits< CurveFeature_type, char > CurveFeature_traits;

      const CurveFeature_type&
      CurveFeature () const;

      CurveFeature_type&
      CurveFeature ();

      void
      CurveFeature (const CurveFeature_type& x);

      void
      CurveFeature (::std::auto_ptr< CurveFeature_type > p);

      // Constructors.
      //
      PointDefinedCurveExtractType (const CurveFeature_type&);

      PointDefinedCurveExtractType (::std::auto_ptr< CurveFeature_type >);

      PointDefinedCurveExtractType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      PointDefinedCurveExtractType (const PointDefinedCurveExtractType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual PointDefinedCurveExtractType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedCurveExtractType&
      operator= (const PointDefinedCurveExtractType& x);

      virtual 
      ~PointDefinedCurveExtractType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< CurveFeature_type > CurveFeature_;
    };

    class PointDefinedCurveCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::PointDefinedCurveConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      PointDefinedCurveCheckedType ();

      PointDefinedCurveCheckedType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      PointDefinedCurveCheckedType (const PointDefinedCurveCheckedType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual PointDefinedCurveCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedCurveCheckedType&
      operator= (const PointDefinedCurveCheckedType& x);

      virtual 
      ~PointDefinedCurveCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class PointDefinedCurveCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::PointDefinedCurveCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      PointDefinedCurveCheckedFeatureType ();

      PointDefinedCurveCheckedFeatureType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      PointDefinedCurveCheckedFeatureType (const PointDefinedCurveCheckedFeatureType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual PointDefinedCurveCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedCurveCheckedFeatureType&
      operator= (const PointDefinedCurveCheckedFeatureType& x);

      virtual 
      ~PointDefinedCurveCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class PointDefinedCurveActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::PointDefinedCurveCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      PointDefinedCurveActualDeterminationType ();

      PointDefinedCurveActualDeterminationType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      PointDefinedCurveActualDeterminationType (const PointDefinedCurveActualDeterminationType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual PointDefinedCurveActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedCurveActualDeterminationType&
      operator= (const PointDefinedCurveActualDeterminationType& x);

      virtual 
      ~PointDefinedCurveActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class PointDefinedCurveFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::PointDefinedCurveActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::CurveSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      PointDefinedCurveFeatureItemType (const id_type&,
                                        const FeatureName_type&,
                                        const DeterminationMode_type&);

      PointDefinedCurveFeatureItemType (const id_type&,
                                        const FeatureName_type&,
                                        ::std::auto_ptr< DeterminationMode_type >);

      PointDefinedCurveFeatureItemType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      PointDefinedCurveFeatureItemType (const PointDefinedCurveFeatureItemType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual PointDefinedCurveFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedCurveFeatureItemType&
      operator= (const PointDefinedCurveFeatureItemType& x);

      virtual 
      ~PointDefinedCurveFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class PointDefinedCurveFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // Constructors.
      //
      PointDefinedCurveFeatureDefinitionType (const id_type&);

      PointDefinedCurveFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      PointDefinedCurveFeatureDefinitionType (const PointDefinedCurveFeatureDefinitionType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual PointDefinedCurveFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PointDefinedCurveFeatureDefinitionType ();
    };

    class PointDefinedCurveFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // DefiningPoints
      //
      typedef ::xsd::qif2::TargetPointsNominalType DefiningPoints_type;
      typedef ::xsd::cxx::tree::traits< DefiningPoints_type, char > DefiningPoints_traits;

      const DefiningPoints_type&
      DefiningPoints () const;

      DefiningPoints_type&
      DefiningPoints ();

      void
      DefiningPoints (const DefiningPoints_type& x);

      void
      DefiningPoints (::std::auto_ptr< DefiningPoints_type > p);

      // Plane
      //
      typedef ::xsd::qif2::PlaneType Plane_type;
      typedef ::xsd::cxx::tree::optional< Plane_type > Plane_optional;
      typedef ::xsd::cxx::tree::traits< Plane_type, char > Plane_traits;

      const Plane_optional&
      Plane () const;

      Plane_optional&
      Plane ();

      void
      Plane (const Plane_type& x);

      void
      Plane (const Plane_optional& x);

      void
      Plane (::std::auto_ptr< Plane_type > p);

      // Constructors.
      //
      PointDefinedCurveFeatureNominalType (const id_type&,
                                           const FeatureDefinitionId_type&,
                                           const DefiningPoints_type&);

      PointDefinedCurveFeatureNominalType (const id_type&,
                                           const FeatureDefinitionId_type&,
                                           ::std::auto_ptr< DefiningPoints_type >);

      PointDefinedCurveFeatureNominalType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      PointDefinedCurveFeatureNominalType (const PointDefinedCurveFeatureNominalType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual PointDefinedCurveFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedCurveFeatureNominalType&
      operator= (const PointDefinedCurveFeatureNominalType& x);

      virtual 
      ~PointDefinedCurveFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DefiningPoints_type > DefiningPoints_;
      Plane_optional Plane_;
    };

    class TargetPointsActualType: public ::xml_schema::type
    {
      public:
      // TargetPoint
      //
      typedef ::xsd::qif2::TargetPointActualType TargetPoint_type;
      typedef ::xsd::cxx::tree::sequence< TargetPoint_type > TargetPoint_sequence;
      typedef TargetPoint_sequence::iterator TargetPoint_iterator;
      typedef TargetPoint_sequence::const_iterator TargetPoint_const_iterator;
      typedef ::xsd::cxx::tree::traits< TargetPoint_type, char > TargetPoint_traits;

      const TargetPoint_sequence&
      TargetPoint () const;

      TargetPoint_sequence&
      TargetPoint ();

      void
      TargetPoint (const TargetPoint_sequence& s);

      // linearUnit
      //
      typedef ::xml_schema::token linearUnit_type;
      typedef ::xsd::cxx::tree::optional< linearUnit_type > linearUnit_optional;
      typedef ::xsd::cxx::tree::traits< linearUnit_type, char > linearUnit_traits;

      const linearUnit_optional&
      linearUnit () const;

      linearUnit_optional&
      linearUnit ();

      void
      linearUnit (const linearUnit_type& x);

      void
      linearUnit (const linearUnit_optional& x);

      void
      linearUnit (::std::auto_ptr< linearUnit_type > p);

      // decimalPlaces
      //
      typedef ::xml_schema::non_negative_integer decimalPlaces_type;
      typedef ::xsd::cxx::tree::optional< decimalPlaces_type > decimalPlaces_optional;
      typedef ::xsd::cxx::tree::traits< decimalPlaces_type, char > decimalPlaces_traits;

      const decimalPlaces_optional&
      decimalPlaces () const;

      decimalPlaces_optional&
      decimalPlaces ();

      void
      decimalPlaces (const decimalPlaces_type& x);

      void
      decimalPlaces (const decimalPlaces_optional& x);

      // significantFigures
      //
      typedef ::xml_schema::non_negative_integer significantFigures_type;
      typedef ::xsd::cxx::tree::optional< significantFigures_type > significantFigures_optional;
      typedef ::xsd::cxx::tree::traits< significantFigures_type, char > significantFigures_traits;

      const significantFigures_optional&
      significantFigures () const;

      significantFigures_optional&
      significantFigures ();

      void
      significantFigures (const significantFigures_type& x);

      void
      significantFigures (const significantFigures_optional& x);

      // validity
      //
      typedef ::xsd::qif2::ValidityEnumType validity_type;
      typedef ::xsd::cxx::tree::optional< validity_type > validity_optional;
      typedef ::xsd::cxx::tree::traits< validity_type, char > validity_traits;

      const validity_optional&
      validity () const;

      validity_optional&
      validity ();

      void
      validity (const validity_type& x);

      void
      validity (const validity_optional& x);

      void
      validity (::std::auto_ptr< validity_type > p);

      // xDecimalPlaces
      //
      typedef ::xml_schema::non_negative_integer xDecimalPlaces_type;
      typedef ::xsd::cxx::tree::optional< xDecimalPlaces_type > xDecimalPlaces_optional;
      typedef ::xsd::cxx::tree::traits< xDecimalPlaces_type, char > xDecimalPlaces_traits;

      const xDecimalPlaces_optional&
      xDecimalPlaces () const;

      xDecimalPlaces_optional&
      xDecimalPlaces ();

      void
      xDecimalPlaces (const xDecimalPlaces_type& x);

      void
      xDecimalPlaces (const xDecimalPlaces_optional& x);

      // xSignificantFigures
      //
      typedef ::xml_schema::non_negative_integer xSignificantFigures_type;
      typedef ::xsd::cxx::tree::optional< xSignificantFigures_type > xSignificantFigures_optional;
      typedef ::xsd::cxx::tree::traits< xSignificantFigures_type, char > xSignificantFigures_traits;

      const xSignificantFigures_optional&
      xSignificantFigures () const;

      xSignificantFigures_optional&
      xSignificantFigures ();

      void
      xSignificantFigures (const xSignificantFigures_type& x);

      void
      xSignificantFigures (const xSignificantFigures_optional& x);

      // xValidity
      //
      typedef ::xsd::qif2::ValidityEnumType xValidity_type;
      typedef ::xsd::cxx::tree::optional< xValidity_type > xValidity_optional;
      typedef ::xsd::cxx::tree::traits< xValidity_type, char > xValidity_traits;

      const xValidity_optional&
      xValidity () const;

      xValidity_optional&
      xValidity ();

      void
      xValidity (const xValidity_type& x);

      void
      xValidity (const xValidity_optional& x);

      void
      xValidity (::std::auto_ptr< xValidity_type > p);

      // yDecimalPlaces
      //
      typedef ::xml_schema::non_negative_integer yDecimalPlaces_type;
      typedef ::xsd::cxx::tree::optional< yDecimalPlaces_type > yDecimalPlaces_optional;
      typedef ::xsd::cxx::tree::traits< yDecimalPlaces_type, char > yDecimalPlaces_traits;

      const yDecimalPlaces_optional&
      yDecimalPlaces () const;

      yDecimalPlaces_optional&
      yDecimalPlaces ();

      void
      yDecimalPlaces (const yDecimalPlaces_type& x);

      void
      yDecimalPlaces (const yDecimalPlaces_optional& x);

      // ySignificantFigures
      //
      typedef ::xml_schema::non_negative_integer ySignificantFigures_type;
      typedef ::xsd::cxx::tree::optional< ySignificantFigures_type > ySignificantFigures_optional;
      typedef ::xsd::cxx::tree::traits< ySignificantFigures_type, char > ySignificantFigures_traits;

      const ySignificantFigures_optional&
      ySignificantFigures () const;

      ySignificantFigures_optional&
      ySignificantFigures ();

      void
      ySignificantFigures (const ySignificantFigures_type& x);

      void
      ySignificantFigures (const ySignificantFigures_optional& x);

      // yValidity
      //
      typedef ::xsd::qif2::ValidityEnumType yValidity_type;
      typedef ::xsd::cxx::tree::optional< yValidity_type > yValidity_optional;
      typedef ::xsd::cxx::tree::traits< yValidity_type, char > yValidity_traits;

      const yValidity_optional&
      yValidity () const;

      yValidity_optional&
      yValidity ();

      void
      yValidity (const yValidity_type& x);

      void
      yValidity (const yValidity_optional& x);

      void
      yValidity (::std::auto_ptr< yValidity_type > p);

      // zDecimalPlaces
      //
      typedef ::xml_schema::non_negative_integer zDecimalPlaces_type;
      typedef ::xsd::cxx::tree::optional< zDecimalPlaces_type > zDecimalPlaces_optional;
      typedef ::xsd::cxx::tree::traits< zDecimalPlaces_type, char > zDecimalPlaces_traits;

      const zDecimalPlaces_optional&
      zDecimalPlaces () const;

      zDecimalPlaces_optional&
      zDecimalPlaces ();

      void
      zDecimalPlaces (const zDecimalPlaces_type& x);

      void
      zDecimalPlaces (const zDecimalPlaces_optional& x);

      // zSignificantFigures
      //
      typedef ::xml_schema::non_negative_integer zSignificantFigures_type;
      typedef ::xsd::cxx::tree::optional< zSignificantFigures_type > zSignificantFigures_optional;
      typedef ::xsd::cxx::tree::traits< zSignificantFigures_type, char > zSignificantFigures_traits;

      const zSignificantFigures_optional&
      zSignificantFigures () const;

      zSignificantFigures_optional&
      zSignificantFigures ();

      void
      zSignificantFigures (const zSignificantFigures_type& x);

      void
      zSignificantFigures (const zSignificantFigures_optional& x);

      // zValidity
      //
      typedef ::xsd::qif2::ValidityEnumType zValidity_type;
      typedef ::xsd::cxx::tree::optional< zValidity_type > zValidity_optional;
      typedef ::xsd::cxx::tree::traits< zValidity_type, char > zValidity_traits;

      const zValidity_optional&
      zValidity () const;

      zValidity_optional&
      zValidity ();

      void
      zValidity (const zValidity_type& x);

      void
      zValidity (const zValidity_optional& x);

      void
      zValidity (::std::auto_ptr< zValidity_type > p);

      // combinedUncertainty
      //
      typedef ::xml_schema::decimal combinedUncertainty_type;
      typedef ::xsd::cxx::tree::optional< combinedUncertainty_type > combinedUncertainty_optional;
      typedef ::xsd::cxx::tree::traits< combinedUncertainty_type, char, ::xsd::cxx::tree::schema_type::decimal > combinedUncertainty_traits;

      const combinedUncertainty_optional&
      combinedUncertainty () const;

      combinedUncertainty_optional&
      combinedUncertainty ();

      void
      combinedUncertainty (const combinedUncertainty_type& x);

      void
      combinedUncertainty (const combinedUncertainty_optional& x);

      // meanError
      //
      typedef ::xml_schema::decimal meanError_type;
      typedef ::xsd::cxx::tree::optional< meanError_type > meanError_optional;
      typedef ::xsd::cxx::tree::traits< meanError_type, char, ::xsd::cxx::tree::schema_type::decimal > meanError_traits;

      const meanError_optional&
      meanError () const;

      meanError_optional&
      meanError ();

      void
      meanError (const meanError_type& x);

      void
      meanError (const meanError_optional& x);

      // xCombinedUncertainty
      //
      typedef ::xml_schema::decimal xCombinedUncertainty_type;
      typedef ::xsd::cxx::tree::optional< xCombinedUncertainty_type > xCombinedUncertainty_optional;
      typedef ::xsd::cxx::tree::traits< xCombinedUncertainty_type, char, ::xsd::cxx::tree::schema_type::decimal > xCombinedUncertainty_traits;

      const xCombinedUncertainty_optional&
      xCombinedUncertainty () const;

      xCombinedUncertainty_optional&
      xCombinedUncertainty ();

      void
      xCombinedUncertainty (const xCombinedUncertainty_type& x);

      void
      xCombinedUncertainty (const xCombinedUncertainty_optional& x);

      // xMeanError
      //
      typedef ::xml_schema::decimal xMeanError_type;
      typedef ::xsd::cxx::tree::optional< xMeanError_type > xMeanError_optional;
      typedef ::xsd::cxx::tree::traits< xMeanError_type, char, ::xsd::cxx::tree::schema_type::decimal > xMeanError_traits;

      const xMeanError_optional&
      xMeanError () const;

      xMeanError_optional&
      xMeanError ();

      void
      xMeanError (const xMeanError_type& x);

      void
      xMeanError (const xMeanError_optional& x);

      // yCombinedUncertainty
      //
      typedef ::xml_schema::decimal yCombinedUncertainty_type;
      typedef ::xsd::cxx::tree::optional< yCombinedUncertainty_type > yCombinedUncertainty_optional;
      typedef ::xsd::cxx::tree::traits< yCombinedUncertainty_type, char, ::xsd::cxx::tree::schema_type::decimal > yCombinedUncertainty_traits;

      const yCombinedUncertainty_optional&
      yCombinedUncertainty () const;

      yCombinedUncertainty_optional&
      yCombinedUncertainty ();

      void
      yCombinedUncertainty (const yCombinedUncertainty_type& x);

      void
      yCombinedUncertainty (const yCombinedUncertainty_optional& x);

      // yMeanError
      //
      typedef ::xml_schema::decimal yMeanError_type;
      typedef ::xsd::cxx::tree::optional< yMeanError_type > yMeanError_optional;
      typedef ::xsd::cxx::tree::traits< yMeanError_type, char, ::xsd::cxx::tree::schema_type::decimal > yMeanError_traits;

      const yMeanError_optional&
      yMeanError () const;

      yMeanError_optional&
      yMeanError ();

      void
      yMeanError (const yMeanError_type& x);

      void
      yMeanError (const yMeanError_optional& x);

      // zCombinedUncertainty
      //
      typedef ::xml_schema::decimal zCombinedUncertainty_type;
      typedef ::xsd::cxx::tree::optional< zCombinedUncertainty_type > zCombinedUncertainty_optional;
      typedef ::xsd::cxx::tree::traits< zCombinedUncertainty_type, char, ::xsd::cxx::tree::schema_type::decimal > zCombinedUncertainty_traits;

      const zCombinedUncertainty_optional&
      zCombinedUncertainty () const;

      zCombinedUncertainty_optional&
      zCombinedUncertainty ();

      void
      zCombinedUncertainty (const zCombinedUncertainty_type& x);

      void
      zCombinedUncertainty (const zCombinedUncertainty_optional& x);

      // zMeanError
      //
      typedef ::xml_schema::decimal zMeanError_type;
      typedef ::xsd::cxx::tree::optional< zMeanError_type > zMeanError_optional;
      typedef ::xsd::cxx::tree::traits< zMeanError_type, char, ::xsd::cxx::tree::schema_type::decimal > zMeanError_traits;

      const zMeanError_optional&
      zMeanError () const;

      zMeanError_optional&
      zMeanError ();

      void
      zMeanError (const zMeanError_type& x);

      void
      zMeanError (const zMeanError_optional& x);

      // Constructors.
      //
      TargetPointsActualType ();

      TargetPointsActualType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      TargetPointsActualType (const TargetPointsActualType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual TargetPointsActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TargetPointsActualType&
      operator= (const TargetPointsActualType& x);

      virtual 
      ~TargetPointsActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      TargetPoint_sequence TargetPoint_;
      linearUnit_optional linearUnit_;
      decimalPlaces_optional decimalPlaces_;
      significantFigures_optional significantFigures_;
      validity_optional validity_;
      xDecimalPlaces_optional xDecimalPlaces_;
      xSignificantFigures_optional xSignificantFigures_;
      xValidity_optional xValidity_;
      yDecimalPlaces_optional yDecimalPlaces_;
      ySignificantFigures_optional ySignificantFigures_;
      yValidity_optional yValidity_;
      zDecimalPlaces_optional zDecimalPlaces_;
      zSignificantFigures_optional zSignificantFigures_;
      zValidity_optional zValidity_;
      combinedUncertainty_optional combinedUncertainty_;
      meanError_optional meanError_;
      xCombinedUncertainty_optional xCombinedUncertainty_;
      xMeanError_optional xMeanError_;
      yCombinedUncertainty_optional yCombinedUncertainty_;
      yMeanError_optional yMeanError_;
      zCombinedUncertainty_optional zCombinedUncertainty_;
      zMeanError_optional zMeanError_;
    };

    class PointDefinedCurveFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // DefiningPoints
      //
      typedef ::xsd::qif2::TargetPointsActualType DefiningPoints_type;
      typedef ::xsd::cxx::tree::optional< DefiningPoints_type > DefiningPoints_optional;
      typedef ::xsd::cxx::tree::traits< DefiningPoints_type, char > DefiningPoints_traits;

      const DefiningPoints_optional&
      DefiningPoints () const;

      DefiningPoints_optional&
      DefiningPoints ();

      void
      DefiningPoints (const DefiningPoints_type& x);

      void
      DefiningPoints (const DefiningPoints_optional& x);

      void
      DefiningPoints (::std::auto_ptr< DefiningPoints_type > p);

      // Plane
      //
      typedef ::xsd::qif2::ActualPlaneType Plane_type;
      typedef ::xsd::cxx::tree::optional< Plane_type > Plane_optional;
      typedef ::xsd::cxx::tree::traits< Plane_type, char > Plane_traits;

      const Plane_optional&
      Plane () const;

      Plane_optional&
      Plane ();

      void
      Plane (const Plane_type& x);

      void
      Plane (const Plane_optional& x);

      void
      Plane (::std::auto_ptr< Plane_type > p);

      // Form
      //
      typedef ::xsd::qif2::ActualLinearValueType Form_type;
      typedef ::xsd::cxx::tree::optional< Form_type > Form_optional;
      typedef ::xsd::cxx::tree::traits< Form_type, char > Form_traits;

      const Form_optional&
      Form () const;

      Form_optional&
      Form ();

      void
      Form (const Form_type& x);

      void
      Form (const Form_optional& x);

      void
      Form (::std::auto_ptr< Form_type > p);

      // Constructors.
      //
      PointDefinedCurveFeatureActualType (const id_type&,
                                          const FeatureItemId_type&);

      PointDefinedCurveFeatureActualType (const id_type&,
                                          ::std::auto_ptr< FeatureItemId_type >);

      PointDefinedCurveFeatureActualType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      PointDefinedCurveFeatureActualType (const PointDefinedCurveFeatureActualType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual PointDefinedCurveFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedCurveFeatureActualType&
      operator= (const PointDefinedCurveFeatureActualType& x);

      virtual 
      ~PointDefinedCurveFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      DefiningPoints_optional DefiningPoints_;
      Plane_optional Plane_;
      Form_optional Form_;
    };

    class PointDefinedSurfaceConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::PointDefinedSurfaceBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::PointDefinedSurfaceRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Copy
      //
      typedef ::xsd::qif2::PointDefinedSurfaceCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Transform
      //
      typedef ::xsd::qif2::PointDefinedSurfaceTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // Extract
      //
      typedef ::xsd::qif2::PointDefinedSurfaceExtractType Extract_type;
      typedef ::xsd::cxx::tree::optional< Extract_type > Extract_optional;
      typedef ::xsd::cxx::tree::traits< Extract_type, char > Extract_traits;

      const Extract_optional&
      Extract () const;

      Extract_optional&
      Extract ();

      void
      Extract (const Extract_type& x);

      void
      Extract (const Extract_optional& x);

      void
      Extract (::std::auto_ptr< Extract_type > p);

      // Constructors.
      //
      PointDefinedSurfaceConstructionMethodType ();

      PointDefinedSurfaceConstructionMethodType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      PointDefinedSurfaceConstructionMethodType (const PointDefinedSurfaceConstructionMethodType& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      virtual PointDefinedSurfaceConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedSurfaceConstructionMethodType&
      operator= (const PointDefinedSurfaceConstructionMethodType& x);

      virtual 
      ~PointDefinedSurfaceConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Copy_optional Copy_;
      Transform_optional Transform_;
      Extract_optional Extract_;
    };

    class PointDefinedSurfaceBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      PointDefinedSurfaceBestFitType ();

      PointDefinedSurfaceBestFitType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      PointDefinedSurfaceBestFitType (const PointDefinedSurfaceBestFitType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual PointDefinedSurfaceBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedSurfaceBestFitType&
      operator= (const PointDefinedSurfaceBestFitType& x);

      virtual 
      ~PointDefinedSurfaceBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class PointDefinedSurfaceRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      PointDefinedSurfaceRecompType (const BaseFeaturePointList_type&);

      PointDefinedSurfaceRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      PointDefinedSurfaceRecompType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      PointDefinedSurfaceRecompType (const PointDefinedSurfaceRecompType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual PointDefinedSurfaceRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedSurfaceRecompType&
      operator= (const PointDefinedSurfaceRecompType& x);

      virtual 
      ~PointDefinedSurfaceRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class PointDefinedSurfaceCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BasePointDefinedSurface
      //
      typedef ::xsd::qif2::BaseFeatureType BasePointDefinedSurface_type;
      typedef ::xsd::cxx::tree::traits< BasePointDefinedSurface_type, char > BasePointDefinedSurface_traits;

      const BasePointDefinedSurface_type&
      BasePointDefinedSurface () const;

      BasePointDefinedSurface_type&
      BasePointDefinedSurface ();

      void
      BasePointDefinedSurface (const BasePointDefinedSurface_type& x);

      void
      BasePointDefinedSurface (::std::auto_ptr< BasePointDefinedSurface_type > p);

      // Constructors.
      //
      PointDefinedSurfaceCopyType (const BasePointDefinedSurface_type&);

      PointDefinedSurfaceCopyType (::std::auto_ptr< BasePointDefinedSurface_type >);

      PointDefinedSurfaceCopyType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      PointDefinedSurfaceCopyType (const PointDefinedSurfaceCopyType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual PointDefinedSurfaceCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedSurfaceCopyType&
      operator= (const PointDefinedSurfaceCopyType& x);

      virtual 
      ~PointDefinedSurfaceCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BasePointDefinedSurface_type > BasePointDefinedSurface_;
    };

    class PointDefinedSurfaceTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BasePointDefinedSurface
      //
      typedef ::xsd::qif2::BaseFeatureType BasePointDefinedSurface_type;
      typedef ::xsd::cxx::tree::traits< BasePointDefinedSurface_type, char > BasePointDefinedSurface_traits;

      const BasePointDefinedSurface_type&
      BasePointDefinedSurface () const;

      BasePointDefinedSurface_type&
      BasePointDefinedSurface ();

      void
      BasePointDefinedSurface (const BasePointDefinedSurface_type& x);

      void
      BasePointDefinedSurface (::std::auto_ptr< BasePointDefinedSurface_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      PointDefinedSurfaceTransformType (const BasePointDefinedSurface_type&,
                                        const Transformation_type&);

      PointDefinedSurfaceTransformType (::std::auto_ptr< BasePointDefinedSurface_type >,
                                        ::std::auto_ptr< Transformation_type >);

      PointDefinedSurfaceTransformType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      PointDefinedSurfaceTransformType (const PointDefinedSurfaceTransformType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual PointDefinedSurfaceTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedSurfaceTransformType&
      operator= (const PointDefinedSurfaceTransformType& x);

      virtual 
      ~PointDefinedSurfaceTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BasePointDefinedSurface_type > BasePointDefinedSurface_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class PointDefinedSurfaceExtractType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // SurfaceFeature
      //
      typedef ::xsd::qif2::BaseFeatureType SurfaceFeature_type;
      typedef ::xsd::cxx::tree::traits< SurfaceFeature_type, char > SurfaceFeature_traits;

      const SurfaceFeature_type&
      SurfaceFeature () const;

      SurfaceFeature_type&
      SurfaceFeature ();

      void
      SurfaceFeature (const SurfaceFeature_type& x);

      void
      SurfaceFeature (::std::auto_ptr< SurfaceFeature_type > p);

      // Constructors.
      //
      PointDefinedSurfaceExtractType (const SurfaceFeature_type&);

      PointDefinedSurfaceExtractType (::std::auto_ptr< SurfaceFeature_type >);

      PointDefinedSurfaceExtractType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      PointDefinedSurfaceExtractType (const PointDefinedSurfaceExtractType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual PointDefinedSurfaceExtractType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedSurfaceExtractType&
      operator= (const PointDefinedSurfaceExtractType& x);

      virtual 
      ~PointDefinedSurfaceExtractType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SurfaceFeature_type > SurfaceFeature_;
    };

    class PointDefinedSurfaceCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::PointDefinedSurfaceConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      PointDefinedSurfaceCheckedType ();

      PointDefinedSurfaceCheckedType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      PointDefinedSurfaceCheckedType (const PointDefinedSurfaceCheckedType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual PointDefinedSurfaceCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedSurfaceCheckedType&
      operator= (const PointDefinedSurfaceCheckedType& x);

      virtual 
      ~PointDefinedSurfaceCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class PointDefinedSurfaceCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::PointDefinedSurfaceCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      PointDefinedSurfaceCheckedFeatureType ();

      PointDefinedSurfaceCheckedFeatureType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      PointDefinedSurfaceCheckedFeatureType (const PointDefinedSurfaceCheckedFeatureType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual PointDefinedSurfaceCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedSurfaceCheckedFeatureType&
      operator= (const PointDefinedSurfaceCheckedFeatureType& x);

      virtual 
      ~PointDefinedSurfaceCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class PointDefinedSurfaceActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::PointDefinedSurfaceCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      PointDefinedSurfaceActualDeterminationType ();

      PointDefinedSurfaceActualDeterminationType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      PointDefinedSurfaceActualDeterminationType (const PointDefinedSurfaceActualDeterminationType& x,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      virtual PointDefinedSurfaceActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedSurfaceActualDeterminationType&
      operator= (const PointDefinedSurfaceActualDeterminationType& x);

      virtual 
      ~PointDefinedSurfaceActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class PointDefinedSurfaceFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::PointDefinedSurfaceActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::SurfaceSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      PointDefinedSurfaceFeatureItemType (const id_type&,
                                          const FeatureName_type&,
                                          const DeterminationMode_type&);

      PointDefinedSurfaceFeatureItemType (const id_type&,
                                          const FeatureName_type&,
                                          ::std::auto_ptr< DeterminationMode_type >);

      PointDefinedSurfaceFeatureItemType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      PointDefinedSurfaceFeatureItemType (const PointDefinedSurfaceFeatureItemType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual PointDefinedSurfaceFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedSurfaceFeatureItemType&
      operator= (const PointDefinedSurfaceFeatureItemType& x);

      virtual 
      ~PointDefinedSurfaceFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class PointDefinedSurfaceFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // Constructors.
      //
      PointDefinedSurfaceFeatureDefinitionType (const id_type&);

      PointDefinedSurfaceFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      PointDefinedSurfaceFeatureDefinitionType (const PointDefinedSurfaceFeatureDefinitionType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual PointDefinedSurfaceFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PointDefinedSurfaceFeatureDefinitionType ();
    };

    class TargetPointsNominalType: public ::xml_schema::type
    {
      public:
      // TargetPoint
      //
      typedef ::xsd::qif2::TargetPointNominalType TargetPoint_type;
      typedef ::xsd::cxx::tree::sequence< TargetPoint_type > TargetPoint_sequence;
      typedef TargetPoint_sequence::iterator TargetPoint_iterator;
      typedef TargetPoint_sequence::const_iterator TargetPoint_const_iterator;
      typedef ::xsd::cxx::tree::traits< TargetPoint_type, char > TargetPoint_traits;

      const TargetPoint_sequence&
      TargetPoint () const;

      TargetPoint_sequence&
      TargetPoint ();

      void
      TargetPoint (const TargetPoint_sequence& s);

      // linearUnit
      //
      typedef ::xml_schema::token linearUnit_type;
      typedef ::xsd::cxx::tree::optional< linearUnit_type > linearUnit_optional;
      typedef ::xsd::cxx::tree::traits< linearUnit_type, char > linearUnit_traits;

      const linearUnit_optional&
      linearUnit () const;

      linearUnit_optional&
      linearUnit ();

      void
      linearUnit (const linearUnit_type& x);

      void
      linearUnit (const linearUnit_optional& x);

      void
      linearUnit (::std::auto_ptr< linearUnit_type > p);

      // decimalPlaces
      //
      typedef ::xml_schema::non_negative_integer decimalPlaces_type;
      typedef ::xsd::cxx::tree::optional< decimalPlaces_type > decimalPlaces_optional;
      typedef ::xsd::cxx::tree::traits< decimalPlaces_type, char > decimalPlaces_traits;

      const decimalPlaces_optional&
      decimalPlaces () const;

      decimalPlaces_optional&
      decimalPlaces ();

      void
      decimalPlaces (const decimalPlaces_type& x);

      void
      decimalPlaces (const decimalPlaces_optional& x);

      // significantFigures
      //
      typedef ::xml_schema::non_negative_integer significantFigures_type;
      typedef ::xsd::cxx::tree::optional< significantFigures_type > significantFigures_optional;
      typedef ::xsd::cxx::tree::traits< significantFigures_type, char > significantFigures_traits;

      const significantFigures_optional&
      significantFigures () const;

      significantFigures_optional&
      significantFigures ();

      void
      significantFigures (const significantFigures_type& x);

      void
      significantFigures (const significantFigures_optional& x);

      // validity
      //
      typedef ::xsd::qif2::ValidityEnumType validity_type;
      typedef ::xsd::cxx::tree::optional< validity_type > validity_optional;
      typedef ::xsd::cxx::tree::traits< validity_type, char > validity_traits;

      const validity_optional&
      validity () const;

      validity_optional&
      validity ();

      void
      validity (const validity_type& x);

      void
      validity (const validity_optional& x);

      void
      validity (::std::auto_ptr< validity_type > p);

      // xDecimalPlaces
      //
      typedef ::xml_schema::non_negative_integer xDecimalPlaces_type;
      typedef ::xsd::cxx::tree::optional< xDecimalPlaces_type > xDecimalPlaces_optional;
      typedef ::xsd::cxx::tree::traits< xDecimalPlaces_type, char > xDecimalPlaces_traits;

      const xDecimalPlaces_optional&
      xDecimalPlaces () const;

      xDecimalPlaces_optional&
      xDecimalPlaces ();

      void
      xDecimalPlaces (const xDecimalPlaces_type& x);

      void
      xDecimalPlaces (const xDecimalPlaces_optional& x);

      // xSignificantFigures
      //
      typedef ::xml_schema::non_negative_integer xSignificantFigures_type;
      typedef ::xsd::cxx::tree::optional< xSignificantFigures_type > xSignificantFigures_optional;
      typedef ::xsd::cxx::tree::traits< xSignificantFigures_type, char > xSignificantFigures_traits;

      const xSignificantFigures_optional&
      xSignificantFigures () const;

      xSignificantFigures_optional&
      xSignificantFigures ();

      void
      xSignificantFigures (const xSignificantFigures_type& x);

      void
      xSignificantFigures (const xSignificantFigures_optional& x);

      // xValidity
      //
      typedef ::xsd::qif2::ValidityEnumType xValidity_type;
      typedef ::xsd::cxx::tree::optional< xValidity_type > xValidity_optional;
      typedef ::xsd::cxx::tree::traits< xValidity_type, char > xValidity_traits;

      const xValidity_optional&
      xValidity () const;

      xValidity_optional&
      xValidity ();

      void
      xValidity (const xValidity_type& x);

      void
      xValidity (const xValidity_optional& x);

      void
      xValidity (::std::auto_ptr< xValidity_type > p);

      // yDecimalPlaces
      //
      typedef ::xml_schema::non_negative_integer yDecimalPlaces_type;
      typedef ::xsd::cxx::tree::optional< yDecimalPlaces_type > yDecimalPlaces_optional;
      typedef ::xsd::cxx::tree::traits< yDecimalPlaces_type, char > yDecimalPlaces_traits;

      const yDecimalPlaces_optional&
      yDecimalPlaces () const;

      yDecimalPlaces_optional&
      yDecimalPlaces ();

      void
      yDecimalPlaces (const yDecimalPlaces_type& x);

      void
      yDecimalPlaces (const yDecimalPlaces_optional& x);

      // ySignificantFigures
      //
      typedef ::xml_schema::non_negative_integer ySignificantFigures_type;
      typedef ::xsd::cxx::tree::optional< ySignificantFigures_type > ySignificantFigures_optional;
      typedef ::xsd::cxx::tree::traits< ySignificantFigures_type, char > ySignificantFigures_traits;

      const ySignificantFigures_optional&
      ySignificantFigures () const;

      ySignificantFigures_optional&
      ySignificantFigures ();

      void
      ySignificantFigures (const ySignificantFigures_type& x);

      void
      ySignificantFigures (const ySignificantFigures_optional& x);

      // yValidity
      //
      typedef ::xsd::qif2::ValidityEnumType yValidity_type;
      typedef ::xsd::cxx::tree::optional< yValidity_type > yValidity_optional;
      typedef ::xsd::cxx::tree::traits< yValidity_type, char > yValidity_traits;

      const yValidity_optional&
      yValidity () const;

      yValidity_optional&
      yValidity ();

      void
      yValidity (const yValidity_type& x);

      void
      yValidity (const yValidity_optional& x);

      void
      yValidity (::std::auto_ptr< yValidity_type > p);

      // zDecimalPlaces
      //
      typedef ::xml_schema::non_negative_integer zDecimalPlaces_type;
      typedef ::xsd::cxx::tree::optional< zDecimalPlaces_type > zDecimalPlaces_optional;
      typedef ::xsd::cxx::tree::traits< zDecimalPlaces_type, char > zDecimalPlaces_traits;

      const zDecimalPlaces_optional&
      zDecimalPlaces () const;

      zDecimalPlaces_optional&
      zDecimalPlaces ();

      void
      zDecimalPlaces (const zDecimalPlaces_type& x);

      void
      zDecimalPlaces (const zDecimalPlaces_optional& x);

      // zSignificantFigures
      //
      typedef ::xml_schema::non_negative_integer zSignificantFigures_type;
      typedef ::xsd::cxx::tree::optional< zSignificantFigures_type > zSignificantFigures_optional;
      typedef ::xsd::cxx::tree::traits< zSignificantFigures_type, char > zSignificantFigures_traits;

      const zSignificantFigures_optional&
      zSignificantFigures () const;

      zSignificantFigures_optional&
      zSignificantFigures ();

      void
      zSignificantFigures (const zSignificantFigures_type& x);

      void
      zSignificantFigures (const zSignificantFigures_optional& x);

      // zValidity
      //
      typedef ::xsd::qif2::ValidityEnumType zValidity_type;
      typedef ::xsd::cxx::tree::optional< zValidity_type > zValidity_optional;
      typedef ::xsd::cxx::tree::traits< zValidity_type, char > zValidity_traits;

      const zValidity_optional&
      zValidity () const;

      zValidity_optional&
      zValidity ();

      void
      zValidity (const zValidity_type& x);

      void
      zValidity (const zValidity_optional& x);

      void
      zValidity (::std::auto_ptr< zValidity_type > p);

      // Constructors.
      //
      TargetPointsNominalType ();

      TargetPointsNominalType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      TargetPointsNominalType (const TargetPointsNominalType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual TargetPointsNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TargetPointsNominalType&
      operator= (const TargetPointsNominalType& x);

      virtual 
      ~TargetPointsNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      TargetPoint_sequence TargetPoint_;
      linearUnit_optional linearUnit_;
      decimalPlaces_optional decimalPlaces_;
      significantFigures_optional significantFigures_;
      validity_optional validity_;
      xDecimalPlaces_optional xDecimalPlaces_;
      xSignificantFigures_optional xSignificantFigures_;
      xValidity_optional xValidity_;
      yDecimalPlaces_optional yDecimalPlaces_;
      ySignificantFigures_optional ySignificantFigures_;
      yValidity_optional yValidity_;
      zDecimalPlaces_optional zDecimalPlaces_;
      zSignificantFigures_optional zSignificantFigures_;
      zValidity_optional zValidity_;
    };

    class PointDefinedSurfaceFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // DefiningPoints
      //
      typedef ::xsd::qif2::TargetPointsNominalType DefiningPoints_type;
      typedef ::xsd::cxx::tree::traits< DefiningPoints_type, char > DefiningPoints_traits;

      const DefiningPoints_type&
      DefiningPoints () const;

      DefiningPoints_type&
      DefiningPoints ();

      void
      DefiningPoints (const DefiningPoints_type& x);

      void
      DefiningPoints (::std::auto_ptr< DefiningPoints_type > p);

      // Constructors.
      //
      PointDefinedSurfaceFeatureNominalType (const id_type&,
                                             const FeatureDefinitionId_type&,
                                             const DefiningPoints_type&);

      PointDefinedSurfaceFeatureNominalType (const id_type&,
                                             const FeatureDefinitionId_type&,
                                             ::std::auto_ptr< DefiningPoints_type >);

      PointDefinedSurfaceFeatureNominalType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      PointDefinedSurfaceFeatureNominalType (const PointDefinedSurfaceFeatureNominalType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual PointDefinedSurfaceFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedSurfaceFeatureNominalType&
      operator= (const PointDefinedSurfaceFeatureNominalType& x);

      virtual 
      ~PointDefinedSurfaceFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DefiningPoints_type > DefiningPoints_;
    };

    class PointDefinedSurfaceFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // DefiningPoints
      //
      typedef ::xsd::qif2::TargetPointsActualType DefiningPoints_type;
      typedef ::xsd::cxx::tree::optional< DefiningPoints_type > DefiningPoints_optional;
      typedef ::xsd::cxx::tree::traits< DefiningPoints_type, char > DefiningPoints_traits;

      const DefiningPoints_optional&
      DefiningPoints () const;

      DefiningPoints_optional&
      DefiningPoints ();

      void
      DefiningPoints (const DefiningPoints_type& x);

      void
      DefiningPoints (const DefiningPoints_optional& x);

      void
      DefiningPoints (::std::auto_ptr< DefiningPoints_type > p);

      // Form
      //
      typedef ::xsd::qif2::ActualLinearValueType Form_type;
      typedef ::xsd::cxx::tree::optional< Form_type > Form_optional;
      typedef ::xsd::cxx::tree::traits< Form_type, char > Form_traits;

      const Form_optional&
      Form () const;

      Form_optional&
      Form ();

      void
      Form (const Form_type& x);

      void
      Form (const Form_optional& x);

      void
      Form (::std::auto_ptr< Form_type > p);

      // Constructors.
      //
      PointDefinedSurfaceFeatureActualType (const id_type&,
                                            const FeatureItemId_type&);

      PointDefinedSurfaceFeatureActualType (const id_type&,
                                            ::std::auto_ptr< FeatureItemId_type >);

      PointDefinedSurfaceFeatureActualType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      PointDefinedSurfaceFeatureActualType (const PointDefinedSurfaceFeatureActualType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual PointDefinedSurfaceFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedSurfaceFeatureActualType&
      operator= (const PointDefinedSurfaceFeatureActualType& x);

      virtual 
      ~PointDefinedSurfaceFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      DefiningPoints_optional DefiningPoints_;
      Form_optional Form_;
    };

    class PointConstructionMethodType: public ::xml_schema::type
    {
      public:
      // Intersection
      //
      typedef ::xsd::qif2::PointFeatureIntersectionType Intersection_type;
      typedef ::xsd::cxx::tree::optional< Intersection_type > Intersection_optional;
      typedef ::xsd::cxx::tree::traits< Intersection_type, char > Intersection_traits;

      const Intersection_optional&
      Intersection () const;

      Intersection_optional&
      Intersection ();

      void
      Intersection (const Intersection_type& x);

      void
      Intersection (const Intersection_optional& x);

      void
      Intersection (::std::auto_ptr< Intersection_type > p);

      // Projection
      //
      typedef ::xsd::qif2::PointFeatureProjectionType Projection_type;
      typedef ::xsd::cxx::tree::optional< Projection_type > Projection_optional;
      typedef ::xsd::cxx::tree::traits< Projection_type, char > Projection_traits;

      const Projection_optional&
      Projection () const;

      Projection_optional&
      Projection ();

      void
      Projection (const Projection_type& x);

      void
      Projection (const Projection_optional& x);

      void
      Projection (::std::auto_ptr< Projection_type > p);

      // Copy
      //
      typedef ::xsd::qif2::PointFeatureCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::PointFeatureCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // Transform
      //
      typedef ::xsd::qif2::PointFeatureTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // FromCone
      //
      typedef ::xsd::qif2::PointFeatureFromConeType FromCone_type;
      typedef ::xsd::cxx::tree::optional< FromCone_type > FromCone_optional;
      typedef ::xsd::cxx::tree::traits< FromCone_type, char > FromCone_traits;

      const FromCone_optional&
      FromCone () const;

      FromCone_optional&
      FromCone ();

      void
      FromCone (const FromCone_type& x);

      void
      FromCone (const FromCone_optional& x);

      void
      FromCone (::std::auto_ptr< FromCone_type > p);

      // FromScan
      //
      typedef ::xsd::qif2::PointFeatureFromScanType FromScan_type;
      typedef ::xsd::cxx::tree::optional< FromScan_type > FromScan_optional;
      typedef ::xsd::cxx::tree::traits< FromScan_type, char > FromScan_traits;

      const FromScan_optional&
      FromScan () const;

      FromScan_optional&
      FromScan ();

      void
      FromScan (const FromScan_type& x);

      void
      FromScan (const FromScan_optional& x);

      void
      FromScan (::std::auto_ptr< FromScan_type > p);

      // CenterOfGravity
      //
      typedef ::xsd::qif2::PointFeatureCenterOfGravityType CenterOfGravity_type;
      typedef ::xsd::cxx::tree::optional< CenterOfGravity_type > CenterOfGravity_optional;
      typedef ::xsd::cxx::tree::traits< CenterOfGravity_type, char > CenterOfGravity_traits;

      const CenterOfGravity_optional&
      CenterOfGravity () const;

      CenterOfGravity_optional&
      CenterOfGravity ();

      void
      CenterOfGravity (const CenterOfGravity_type& x);

      void
      CenterOfGravity (const CenterOfGravity_optional& x);

      void
      CenterOfGravity (::std::auto_ptr< CenterOfGravity_type > p);

      // Pierce
      //
      typedef ::xsd::qif2::PointFeaturePierceType Pierce_type;
      typedef ::xsd::cxx::tree::optional< Pierce_type > Pierce_optional;
      typedef ::xsd::cxx::tree::traits< Pierce_type, char > Pierce_traits;

      const Pierce_optional&
      Pierce () const;

      Pierce_optional&
      Pierce ();

      void
      Pierce (const Pierce_type& x);

      void
      Pierce (const Pierce_optional& x);

      void
      Pierce (::std::auto_ptr< Pierce_type > p);

      // MidPoint
      //
      typedef ::xsd::qif2::PointFeatureMidPointType MidPoint_type;
      typedef ::xsd::cxx::tree::optional< MidPoint_type > MidPoint_optional;
      typedef ::xsd::cxx::tree::traits< MidPoint_type, char > MidPoint_traits;

      const MidPoint_optional&
      MidPoint () const;

      MidPoint_optional&
      MidPoint ();

      void
      MidPoint (const MidPoint_type& x);

      void
      MidPoint (const MidPoint_optional& x);

      void
      MidPoint (::std::auto_ptr< MidPoint_type > p);

      // MovePoint
      //
      typedef ::xsd::qif2::PointFeatureMovePointType MovePoint_type;
      typedef ::xsd::cxx::tree::optional< MovePoint_type > MovePoint_optional;
      typedef ::xsd::cxx::tree::traits< MovePoint_type, char > MovePoint_traits;

      const MovePoint_optional&
      MovePoint () const;

      MovePoint_optional&
      MovePoint ();

      void
      MovePoint (const MovePoint_type& x);

      void
      MovePoint (const MovePoint_optional& x);

      void
      MovePoint (::std::auto_ptr< MovePoint_type > p);

      // MovePointVector
      //
      typedef ::xsd::qif2::PointFeatureMovePointVectorType MovePointVector_type;
      typedef ::xsd::cxx::tree::optional< MovePointVector_type > MovePointVector_optional;
      typedef ::xsd::cxx::tree::traits< MovePointVector_type, char > MovePointVector_traits;

      const MovePointVector_optional&
      MovePointVector () const;

      MovePointVector_optional&
      MovePointVector ();

      void
      MovePointVector (const MovePointVector_type& x);

      void
      MovePointVector (const MovePointVector_optional& x);

      void
      MovePointVector (::std::auto_ptr< MovePointVector_type > p);

      // MovePointAxis
      //
      typedef ::xsd::qif2::PointFeatureMovePointAxisType MovePointAxis_type;
      typedef ::xsd::cxx::tree::optional< MovePointAxis_type > MovePointAxis_optional;
      typedef ::xsd::cxx::tree::traits< MovePointAxis_type, char > MovePointAxis_traits;

      const MovePointAxis_optional&
      MovePointAxis () const;

      MovePointAxis_optional&
      MovePointAxis ();

      void
      MovePointAxis (const MovePointAxis_type& x);

      void
      MovePointAxis (const MovePointAxis_optional& x);

      void
      MovePointAxis (::std::auto_ptr< MovePointAxis_type > p);

      // Extreme
      //
      typedef ::xsd::qif2::PointFeatureExtremeType Extreme_type;
      typedef ::xsd::cxx::tree::optional< Extreme_type > Extreme_optional;
      typedef ::xsd::cxx::tree::traits< Extreme_type, char > Extreme_traits;

      const Extreme_optional&
      Extreme () const;

      Extreme_optional&
      Extreme ();

      void
      Extreme (const Extreme_type& x);

      void
      Extreme (const Extreme_optional& x);

      void
      Extreme (::std::auto_ptr< Extreme_type > p);

      // Constructors.
      //
      PointConstructionMethodType ();

      PointConstructionMethodType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      PointConstructionMethodType (const PointConstructionMethodType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual PointConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointConstructionMethodType&
      operator= (const PointConstructionMethodType& x);

      virtual 
      ~PointConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Intersection_optional Intersection_;
      Projection_optional Projection_;
      Copy_optional Copy_;
      Cast_optional Cast_;
      Transform_optional Transform_;
      FromCone_optional FromCone_;
      FromScan_optional FromScan_;
      CenterOfGravity_optional CenterOfGravity_;
      Pierce_optional Pierce_;
      MidPoint_optional MidPoint_;
      MovePoint_optional MovePoint_;
      MovePointVector_optional MovePointVector_;
      MovePointAxis_optional MovePointAxis_;
      Extreme_optional Extreme_;
    };

    class PointFeatureIntersectionType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // IntersectionFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType IntersectionFeature_type;
      typedef ::xsd::cxx::tree::sequence< IntersectionFeature_type > IntersectionFeature_sequence;
      typedef IntersectionFeature_sequence::iterator IntersectionFeature_iterator;
      typedef IntersectionFeature_sequence::const_iterator IntersectionFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< IntersectionFeature_type, char > IntersectionFeature_traits;

      const IntersectionFeature_sequence&
      IntersectionFeature () const;

      IntersectionFeature_sequence&
      IntersectionFeature ();

      void
      IntersectionFeature (const IntersectionFeature_sequence& s);

      // Constructors.
      //
      PointFeatureIntersectionType ();

      PointFeatureIntersectionType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      PointFeatureIntersectionType (const PointFeatureIntersectionType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual PointFeatureIntersectionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointFeatureIntersectionType&
      operator= (const PointFeatureIntersectionType& x);

      virtual 
      ~PointFeatureIntersectionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      IntersectionFeature_sequence IntersectionFeature_;
    };

    class PointFeaturePierceType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // SurfaceFeature
      //
      typedef ::xsd::qif2::BaseFeatureType SurfaceFeature_type;
      typedef ::xsd::cxx::tree::traits< SurfaceFeature_type, char > SurfaceFeature_traits;

      const SurfaceFeature_type&
      SurfaceFeature () const;

      SurfaceFeature_type&
      SurfaceFeature ();

      void
      SurfaceFeature (const SurfaceFeature_type& x);

      void
      SurfaceFeature (::std::auto_ptr< SurfaceFeature_type > p);

      // CurveFeature
      //
      typedef ::xsd::qif2::BaseFeatureType CurveFeature_type;
      typedef ::xsd::cxx::tree::traits< CurveFeature_type, char > CurveFeature_traits;

      const CurveFeature_type&
      CurveFeature () const;

      CurveFeature_type&
      CurveFeature ();

      void
      CurveFeature (const CurveFeature_type& x);

      void
      CurveFeature (::std::auto_ptr< CurveFeature_type > p);

      // Constructors.
      //
      PointFeaturePierceType (const SurfaceFeature_type&,
                              const CurveFeature_type&);

      PointFeaturePierceType (::std::auto_ptr< SurfaceFeature_type >,
                              ::std::auto_ptr< CurveFeature_type >);

      PointFeaturePierceType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      PointFeaturePierceType (const PointFeaturePierceType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual PointFeaturePierceType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointFeaturePierceType&
      operator= (const PointFeaturePierceType& x);

      virtual 
      ~PointFeaturePierceType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SurfaceFeature_type > SurfaceFeature_;
      ::xsd::cxx::tree::one< CurveFeature_type > CurveFeature_;
    };

    class PointFeatureProjectionType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // ProjectionPlane
      //
      typedef ::xsd::qif2::BaseFeatureType ProjectionPlane_type;
      typedef ::xsd::cxx::tree::traits< ProjectionPlane_type, char > ProjectionPlane_traits;

      const ProjectionPlane_type&
      ProjectionPlane () const;

      ProjectionPlane_type&
      ProjectionPlane ();

      void
      ProjectionPlane (const ProjectionPlane_type& x);

      void
      ProjectionPlane (::std::auto_ptr< ProjectionPlane_type > p);

      // ProjectionFeature
      //
      typedef ::xsd::qif2::BaseFeatureType ProjectionFeature_type;
      typedef ::xsd::cxx::tree::traits< ProjectionFeature_type, char > ProjectionFeature_traits;

      const ProjectionFeature_type&
      ProjectionFeature () const;

      ProjectionFeature_type&
      ProjectionFeature ();

      void
      ProjectionFeature (const ProjectionFeature_type& x);

      void
      ProjectionFeature (::std::auto_ptr< ProjectionFeature_type > p);

      // Constructors.
      //
      PointFeatureProjectionType (const ProjectionPlane_type&,
                                  const ProjectionFeature_type&);

      PointFeatureProjectionType (::std::auto_ptr< ProjectionPlane_type >,
                                  ::std::auto_ptr< ProjectionFeature_type >);

      PointFeatureProjectionType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      PointFeatureProjectionType (const PointFeatureProjectionType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual PointFeatureProjectionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointFeatureProjectionType&
      operator= (const PointFeatureProjectionType& x);

      virtual 
      ~PointFeatureProjectionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ProjectionPlane_type > ProjectionPlane_;
      ::xsd::cxx::tree::one< ProjectionFeature_type > ProjectionFeature_;
    };

    class PointFeatureFromConeType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseCone
      //
      typedef ::xsd::qif2::BaseFeatureType BaseCone_type;
      typedef ::xsd::cxx::tree::traits< BaseCone_type, char > BaseCone_traits;

      const BaseCone_type&
      BaseCone () const;

      BaseCone_type&
      BaseCone ();

      void
      BaseCone (const BaseCone_type& x);

      void
      BaseCone (::std::auto_ptr< BaseCone_type > p);

      // Constructors.
      //
      PointFeatureFromConeType (const BaseCone_type&);

      PointFeatureFromConeType (::std::auto_ptr< BaseCone_type >);

      PointFeatureFromConeType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      PointFeatureFromConeType (const PointFeatureFromConeType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual PointFeatureFromConeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointFeatureFromConeType&
      operator= (const PointFeatureFromConeType& x);

      virtual 
      ~PointFeatureFromConeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseCone_type > BaseCone_;
    };

    class PointFeatureCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BasePointFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BasePointFeature_type;
      typedef ::xsd::cxx::tree::traits< BasePointFeature_type, char > BasePointFeature_traits;

      const BasePointFeature_type&
      BasePointFeature () const;

      BasePointFeature_type&
      BasePointFeature ();

      void
      BasePointFeature (const BasePointFeature_type& x);

      void
      BasePointFeature (::std::auto_ptr< BasePointFeature_type > p);

      // Constructors.
      //
      PointFeatureCopyType (const BasePointFeature_type&);

      PointFeatureCopyType (::std::auto_ptr< BasePointFeature_type >);

      PointFeatureCopyType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      PointFeatureCopyType (const PointFeatureCopyType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual PointFeatureCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointFeatureCopyType&
      operator= (const PointFeatureCopyType& x);

      virtual 
      ~PointFeatureCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BasePointFeature_type > BasePointFeature_;
    };

    class PointFeatureTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BasePointFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BasePointFeature_type;
      typedef ::xsd::cxx::tree::traits< BasePointFeature_type, char > BasePointFeature_traits;

      const BasePointFeature_type&
      BasePointFeature () const;

      BasePointFeature_type&
      BasePointFeature ();

      void
      BasePointFeature (const BasePointFeature_type& x);

      void
      BasePointFeature (::std::auto_ptr< BasePointFeature_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      PointFeatureTransformType (const BasePointFeature_type&,
                                 const Transformation_type&);

      PointFeatureTransformType (::std::auto_ptr< BasePointFeature_type >,
                                 ::std::auto_ptr< Transformation_type >);

      PointFeatureTransformType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      PointFeatureTransformType (const PointFeatureTransformType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual PointFeatureTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointFeatureTransformType&
      operator= (const PointFeatureTransformType& x);

      virtual 
      ~PointFeatureTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BasePointFeature_type > BasePointFeature_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class PointFeatureFromScanType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // SurfaceFeature
      //
      typedef ::xsd::qif2::BaseFeatureType SurfaceFeature_type;
      typedef ::xsd::cxx::tree::traits< SurfaceFeature_type, char > SurfaceFeature_traits;

      const SurfaceFeature_type&
      SurfaceFeature () const;

      SurfaceFeature_type&
      SurfaceFeature ();

      void
      SurfaceFeature (const SurfaceFeature_type& x);

      void
      SurfaceFeature (::std::auto_ptr< SurfaceFeature_type > p);

      // SearchRadius
      //
      typedef ::xsd::qif2::LinearValueType SearchRadius_type;
      typedef ::xsd::cxx::tree::traits< SearchRadius_type, char > SearchRadius_traits;

      const SearchRadius_type&
      SearchRadius () const;

      SearchRadius_type&
      SearchRadius ();

      void
      SearchRadius (const SearchRadius_type& x);

      void
      SearchRadius (::std::auto_ptr< SearchRadius_type > p);

      // RetrievalMethod
      //
      typedef ::xsd::qif2::RetrievalMethodEnumType RetrievalMethod_type;
      typedef ::xsd::cxx::tree::traits< RetrievalMethod_type, char > RetrievalMethod_traits;

      const RetrievalMethod_type&
      RetrievalMethod () const;

      RetrievalMethod_type&
      RetrievalMethod ();

      void
      RetrievalMethod (const RetrievalMethod_type& x);

      void
      RetrievalMethod (::std::auto_ptr< RetrievalMethod_type > p);

      // Constructors.
      //
      PointFeatureFromScanType (const SurfaceFeature_type&,
                                const SearchRadius_type&,
                                const RetrievalMethod_type&);

      PointFeatureFromScanType (::std::auto_ptr< SurfaceFeature_type >,
                                ::std::auto_ptr< SearchRadius_type >,
                                const RetrievalMethod_type&);

      PointFeatureFromScanType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      PointFeatureFromScanType (const PointFeatureFromScanType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual PointFeatureFromScanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointFeatureFromScanType&
      operator= (const PointFeatureFromScanType& x);

      virtual 
      ~PointFeatureFromScanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SurfaceFeature_type > SurfaceFeature_;
      ::xsd::cxx::tree::one< SearchRadius_type > SearchRadius_;
      ::xsd::cxx::tree::one< RetrievalMethod_type > RetrievalMethod_;
    };

    class PointFeatureCenterOfGravityType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      PointFeatureCenterOfGravityType ();

      PointFeatureCenterOfGravityType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      PointFeatureCenterOfGravityType (const PointFeatureCenterOfGravityType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual PointFeatureCenterOfGravityType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointFeatureCenterOfGravityType&
      operator= (const PointFeatureCenterOfGravityType& x);

      virtual 
      ~PointFeatureCenterOfGravityType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class PointFeatureMidPointType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      PointFeatureMidPointType ();

      PointFeatureMidPointType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      PointFeatureMidPointType (const PointFeatureMidPointType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual PointFeatureMidPointType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointFeatureMidPointType&
      operator= (const PointFeatureMidPointType& x);

      virtual 
      ~PointFeatureMidPointType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class PointFeatureCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      PointFeatureCastType (const BaseFeature_type&);

      PointFeatureCastType (::std::auto_ptr< BaseFeature_type >);

      PointFeatureCastType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      PointFeatureCastType (const PointFeatureCastType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual PointFeatureCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointFeatureCastType&
      operator= (const PointFeatureCastType& x);

      virtual 
      ~PointFeatureCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class PointFeatureMovePointType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Offset
      //
      typedef ::xsd::qif2::VectorType Offset_type;
      typedef ::xsd::cxx::tree::optional< Offset_type > Offset_optional;
      typedef ::xsd::cxx::tree::traits< Offset_type, char > Offset_traits;

      const Offset_optional&
      Offset () const;

      Offset_optional&
      Offset ();

      void
      Offset (const Offset_type& x);

      void
      Offset (const Offset_optional& x);

      void
      Offset (::std::auto_ptr< Offset_type > p);

      // DirectionalOffset
      //
      typedef ::xsd::qif2::DirectionalOffsetType DirectionalOffset_type;
      typedef ::xsd::cxx::tree::optional< DirectionalOffset_type > DirectionalOffset_optional;
      typedef ::xsd::cxx::tree::traits< DirectionalOffset_type, char > DirectionalOffset_traits;

      const DirectionalOffset_optional&
      DirectionalOffset () const;

      DirectionalOffset_optional&
      DirectionalOffset ();

      void
      DirectionalOffset (const DirectionalOffset_type& x);

      void
      DirectionalOffset (const DirectionalOffset_optional& x);

      void
      DirectionalOffset (::std::auto_ptr< DirectionalOffset_type > p);

      // Constructors.
      //
      PointFeatureMovePointType (const BaseFeature_type&);

      PointFeatureMovePointType (::std::auto_ptr< BaseFeature_type >);

      PointFeatureMovePointType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      PointFeatureMovePointType (const PointFeatureMovePointType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual PointFeatureMovePointType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointFeatureMovePointType&
      operator= (const PointFeatureMovePointType& x);

      virtual 
      ~PointFeatureMovePointType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
      Offset_optional Offset_;
      DirectionalOffset_optional DirectionalOffset_;
    };

    class PointFeatureMovePointVectorType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Distance
      //
      typedef ::xsd::qif2::LinearValueType Distance_type;
      typedef ::xsd::cxx::tree::traits< Distance_type, char > Distance_traits;

      const Distance_type&
      Distance () const;

      Distance_type&
      Distance ();

      void
      Distance (const Distance_type& x);

      void
      Distance (::std::auto_ptr< Distance_type > p);

      // Vector
      //
      typedef ::xsd::qif2::UnitVectorType Vector_type;
      typedef ::xsd::cxx::tree::traits< Vector_type, char > Vector_traits;

      const Vector_type&
      Vector () const;

      Vector_type&
      Vector ();

      void
      Vector (const Vector_type& x);

      void
      Vector (::std::auto_ptr< Vector_type > p);

      // Constructors.
      //
      PointFeatureMovePointVectorType (const BaseFeature_type&,
                                       const Distance_type&,
                                       const Vector_type&);

      PointFeatureMovePointVectorType (::std::auto_ptr< BaseFeature_type >,
                                       ::std::auto_ptr< Distance_type >,
                                       ::std::auto_ptr< Vector_type >);

      PointFeatureMovePointVectorType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      PointFeatureMovePointVectorType (const PointFeatureMovePointVectorType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual PointFeatureMovePointVectorType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointFeatureMovePointVectorType&
      operator= (const PointFeatureMovePointVectorType& x);

      virtual 
      ~PointFeatureMovePointVectorType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
      ::xsd::cxx::tree::one< Distance_type > Distance_;
      ::xsd::cxx::tree::one< Vector_type > Vector_;
    };

    class PointFeatureMovePointAxisType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseLocationFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseLocationFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseLocationFeature_type, char > BaseLocationFeature_traits;

      const BaseLocationFeature_type&
      BaseLocationFeature () const;

      BaseLocationFeature_type&
      BaseLocationFeature ();

      void
      BaseLocationFeature (const BaseLocationFeature_type& x);

      void
      BaseLocationFeature (::std::auto_ptr< BaseLocationFeature_type > p);

      // Distance
      //
      typedef ::xsd::qif2::LinearValueType Distance_type;
      typedef ::xsd::cxx::tree::traits< Distance_type, char > Distance_traits;

      const Distance_type&
      Distance () const;

      Distance_type&
      Distance ();

      void
      Distance (const Distance_type& x);

      void
      Distance (::std::auto_ptr< Distance_type > p);

      // BaseAxisFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseAxisFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseAxisFeature_type, char > BaseAxisFeature_traits;

      const BaseAxisFeature_type&
      BaseAxisFeature () const;

      BaseAxisFeature_type&
      BaseAxisFeature ();

      void
      BaseAxisFeature (const BaseAxisFeature_type& x);

      void
      BaseAxisFeature (::std::auto_ptr< BaseAxisFeature_type > p);

      // Constructors.
      //
      PointFeatureMovePointAxisType (const BaseLocationFeature_type&,
                                     const Distance_type&,
                                     const BaseAxisFeature_type&);

      PointFeatureMovePointAxisType (::std::auto_ptr< BaseLocationFeature_type >,
                                     ::std::auto_ptr< Distance_type >,
                                     ::std::auto_ptr< BaseAxisFeature_type >);

      PointFeatureMovePointAxisType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      PointFeatureMovePointAxisType (const PointFeatureMovePointAxisType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual PointFeatureMovePointAxisType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointFeatureMovePointAxisType&
      operator= (const PointFeatureMovePointAxisType& x);

      virtual 
      ~PointFeatureMovePointAxisType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseLocationFeature_type > BaseLocationFeature_;
      ::xsd::cxx::tree::one< Distance_type > Distance_;
      ::xsd::cxx::tree::one< BaseAxisFeature_type > BaseAxisFeature_;
    };

    class PointFeatureExtremeType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Minimum
      //
      typedef ::xml_schema::boolean Minimum_type;
      typedef ::xsd::cxx::tree::traits< Minimum_type, char > Minimum_traits;

      const Minimum_type&
      Minimum () const;

      Minimum_type&
      Minimum ();

      void
      Minimum (const Minimum_type& x);

      static Minimum_type
      Minimum_default_value ();

      // BaseAxisFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseAxisFeature_type;
      typedef ::xsd::cxx::tree::optional< BaseAxisFeature_type > BaseAxisFeature_optional;
      typedef ::xsd::cxx::tree::traits< BaseAxisFeature_type, char > BaseAxisFeature_traits;

      const BaseAxisFeature_optional&
      BaseAxisFeature () const;

      BaseAxisFeature_optional&
      BaseAxisFeature ();

      void
      BaseAxisFeature (const BaseAxisFeature_type& x);

      void
      BaseAxisFeature (const BaseAxisFeature_optional& x);

      void
      BaseAxisFeature (::std::auto_ptr< BaseAxisFeature_type > p);

      // Vector
      //
      typedef ::xsd::qif2::UnitVectorType Vector_type;
      typedef ::xsd::cxx::tree::optional< Vector_type > Vector_optional;
      typedef ::xsd::cxx::tree::traits< Vector_type, char > Vector_traits;

      const Vector_optional&
      Vector () const;

      Vector_optional&
      Vector ();

      void
      Vector (const Vector_type& x);

      void
      Vector (const Vector_optional& x);

      void
      Vector (::std::auto_ptr< Vector_type > p);

      // Radial
      //
      typedef ::xml_schema::token Radial_type;
      typedef ::xsd::cxx::tree::optional< Radial_type > Radial_optional;
      typedef ::xsd::cxx::tree::traits< Radial_type, char > Radial_traits;

      const Radial_optional&
      Radial () const;

      Radial_optional&
      Radial ();

      void
      Radial (const Radial_type& x);

      void
      Radial (const Radial_optional& x);

      void
      Radial (::std::auto_ptr< Radial_type > p);

      static const Radial_type&
      Radial_default_value ();

      // Xaxis
      //
      typedef ::xml_schema::token Xaxis_type;
      typedef ::xsd::cxx::tree::optional< Xaxis_type > Xaxis_optional;
      typedef ::xsd::cxx::tree::traits< Xaxis_type, char > Xaxis_traits;

      const Xaxis_optional&
      Xaxis () const;

      Xaxis_optional&
      Xaxis ();

      void
      Xaxis (const Xaxis_type& x);

      void
      Xaxis (const Xaxis_optional& x);

      void
      Xaxis (::std::auto_ptr< Xaxis_type > p);

      static const Xaxis_type&
      Xaxis_default_value ();

      // Yaxis
      //
      typedef ::xml_schema::token Yaxis_type;
      typedef ::xsd::cxx::tree::optional< Yaxis_type > Yaxis_optional;
      typedef ::xsd::cxx::tree::traits< Yaxis_type, char > Yaxis_traits;

      const Yaxis_optional&
      Yaxis () const;

      Yaxis_optional&
      Yaxis ();

      void
      Yaxis (const Yaxis_type& x);

      void
      Yaxis (const Yaxis_optional& x);

      void
      Yaxis (::std::auto_ptr< Yaxis_type > p);

      static const Yaxis_type&
      Yaxis_default_value ();

      // Zaxis
      //
      typedef ::xml_schema::token Zaxis_type;
      typedef ::xsd::cxx::tree::optional< Zaxis_type > Zaxis_optional;
      typedef ::xsd::cxx::tree::traits< Zaxis_type, char > Zaxis_traits;

      const Zaxis_optional&
      Zaxis () const;

      Zaxis_optional&
      Zaxis ();

      void
      Zaxis (const Zaxis_type& x);

      void
      Zaxis (const Zaxis_optional& x);

      void
      Zaxis (::std::auto_ptr< Zaxis_type > p);

      static const Zaxis_type&
      Zaxis_default_value ();

      // Constructors.
      //
      PointFeatureExtremeType (const BaseFeature_type&,
                               const Minimum_type&);

      PointFeatureExtremeType (::std::auto_ptr< BaseFeature_type >,
                               const Minimum_type&);

      PointFeatureExtremeType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      PointFeatureExtremeType (const PointFeatureExtremeType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual PointFeatureExtremeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointFeatureExtremeType&
      operator= (const PointFeatureExtremeType& x);

      virtual 
      ~PointFeatureExtremeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
      ::xsd::cxx::tree::one< Minimum_type > Minimum_;
      BaseAxisFeature_optional BaseAxisFeature_;
      Vector_optional Vector_;
      Radial_optional Radial_;
      static const Radial_type Radial_default_value_;
      Xaxis_optional Xaxis_;
      static const Xaxis_type Xaxis_default_value_;
      Yaxis_optional Yaxis_;
      static const Yaxis_type Yaxis_default_value_;
      Zaxis_optional Zaxis_;
      static const Zaxis_type Zaxis_default_value_;
    };

    class PointCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::PointConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      PointCheckedType ();

      PointCheckedType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      PointCheckedType (const PointCheckedType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual PointCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointCheckedType&
      operator= (const PointCheckedType& x);

      virtual 
      ~PointCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class PointCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::PointCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      PointCheckedFeatureType ();

      PointCheckedFeatureType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      PointCheckedFeatureType (const PointCheckedFeatureType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual PointCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointCheckedFeatureType&
      operator= (const PointCheckedFeatureType& x);

      virtual 
      ~PointCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class PointActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::PointCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      PointActualDeterminationType ();

      PointActualDeterminationType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      PointActualDeterminationType (const PointActualDeterminationType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual PointActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointActualDeterminationType&
      operator= (const PointActualDeterminationType& x);

      virtual 
      ~PointActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class PointFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::PointActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // Constructors.
      //
      PointFeatureItemType (const id_type&,
                            const FeatureName_type&,
                            const DeterminationMode_type&);

      PointFeatureItemType (const id_type&,
                            const FeatureName_type&,
                            ::std::auto_ptr< DeterminationMode_type >);

      PointFeatureItemType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      PointFeatureItemType (const PointFeatureItemType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual PointFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointFeatureItemType&
      operator= (const PointFeatureItemType& x);

      virtual 
      ~PointFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
    };

    class PointFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // Constructors.
      //
      PointFeatureDefinitionType (const id_type&);

      PointFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      PointFeatureDefinitionType (const PointFeatureDefinitionType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual PointFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PointFeatureDefinitionType ();
    };

    class PointFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::PointType Location_type;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_type&
      Location () const;

      Location_type&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // Normal
      //
      typedef ::xsd::qif2::UnitVectorType Normal_type;
      typedef ::xsd::cxx::tree::optional< Normal_type > Normal_optional;
      typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

      const Normal_optional&
      Normal () const;

      Normal_optional&
      Normal ();

      void
      Normal (const Normal_type& x);

      void
      Normal (const Normal_optional& x);

      void
      Normal (::std::auto_ptr< Normal_type > p);

      // Constructors.
      //
      PointFeatureNominalType (const id_type&,
                               const FeatureDefinitionId_type&,
                               const Location_type&);

      PointFeatureNominalType (const id_type&,
                               const FeatureDefinitionId_type&,
                               ::std::auto_ptr< Location_type >);

      PointFeatureNominalType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      PointFeatureNominalType (const PointFeatureNominalType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual PointFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointFeatureNominalType&
      operator= (const PointFeatureNominalType& x);

      virtual 
      ~PointFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Location_type > Location_;
      Normal_optional Normal_;
    };

    class PointFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::ActualPointType Location_type;
      typedef ::xsd::cxx::tree::optional< Location_type > Location_optional;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_optional&
      Location () const;

      Location_optional&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (const Location_optional& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // Normal
      //
      typedef ::xsd::qif2::ActualUnitVectorType Normal_type;
      typedef ::xsd::cxx::tree::optional< Normal_type > Normal_optional;
      typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

      const Normal_optional&
      Normal () const;

      Normal_optional&
      Normal ();

      void
      Normal (const Normal_type& x);

      void
      Normal (const Normal_optional& x);

      void
      Normal (::std::auto_ptr< Normal_type > p);

      // Constructors.
      //
      PointFeatureActualType (const id_type&,
                              const FeatureItemId_type&);

      PointFeatureActualType (const id_type&,
                              ::std::auto_ptr< FeatureItemId_type >);

      PointFeatureActualType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      PointFeatureActualType (const PointFeatureActualType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual PointFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointFeatureActualType&
      operator= (const PointFeatureActualType& x);

      virtual 
      ~PointFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Location_optional Location_;
      Normal_optional Normal_;
    };

    class SphereConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::SphereBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::SphereRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Copy
      //
      typedef ::xsd::qif2::SphereCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::SphereCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // Transform
      //
      typedef ::xsd::qif2::SphereTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // FromScan
      //
      typedef ::xsd::qif2::SphereFromScanType FromScan_type;
      typedef ::xsd::cxx::tree::optional< FromScan_type > FromScan_optional;
      typedef ::xsd::cxx::tree::traits< FromScan_type, char > FromScan_traits;

      const FromScan_optional&
      FromScan () const;

      FromScan_optional&
      FromScan ();

      void
      FromScan (const FromScan_type& x);

      void
      FromScan (const FromScan_optional& x);

      void
      FromScan (::std::auto_ptr< FromScan_type > p);

      // Constructors.
      //
      SphereConstructionMethodType ();

      SphereConstructionMethodType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      SphereConstructionMethodType (const SphereConstructionMethodType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual SphereConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphereConstructionMethodType&
      operator= (const SphereConstructionMethodType& x);

      virtual 
      ~SphereConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Copy_optional Copy_;
      Cast_optional Cast_;
      Transform_optional Transform_;
      FromScan_optional FromScan_;
    };

    class SphereBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      SphereBestFitType ();

      SphereBestFitType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      SphereBestFitType (const SphereBestFitType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual SphereBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphereBestFitType&
      operator= (const SphereBestFitType& x);

      virtual 
      ~SphereBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class SphereRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      SphereRecompType (const BaseFeaturePointList_type&);

      SphereRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      SphereRecompType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      SphereRecompType (const SphereRecompType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual SphereRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphereRecompType&
      operator= (const SphereRecompType& x);

      virtual 
      ~SphereRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class SphereCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseSphere
      //
      typedef ::xsd::qif2::BaseFeatureType BaseSphere_type;
      typedef ::xsd::cxx::tree::traits< BaseSphere_type, char > BaseSphere_traits;

      const BaseSphere_type&
      BaseSphere () const;

      BaseSphere_type&
      BaseSphere ();

      void
      BaseSphere (const BaseSphere_type& x);

      void
      BaseSphere (::std::auto_ptr< BaseSphere_type > p);

      // Constructors.
      //
      SphereCopyType (const BaseSphere_type&);

      SphereCopyType (::std::auto_ptr< BaseSphere_type >);

      SphereCopyType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      SphereCopyType (const SphereCopyType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual SphereCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphereCopyType&
      operator= (const SphereCopyType& x);

      virtual 
      ~SphereCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseSphere_type > BaseSphere_;
    };

    class SphereCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      SphereCastType (const BaseFeature_type&);

      SphereCastType (::std::auto_ptr< BaseFeature_type >);

      SphereCastType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      SphereCastType (const SphereCastType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual SphereCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphereCastType&
      operator= (const SphereCastType& x);

      virtual 
      ~SphereCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class SphereTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseSphere
      //
      typedef ::xsd::qif2::BaseFeatureType BaseSphere_type;
      typedef ::xsd::cxx::tree::traits< BaseSphere_type, char > BaseSphere_traits;

      const BaseSphere_type&
      BaseSphere () const;

      BaseSphere_type&
      BaseSphere ();

      void
      BaseSphere (const BaseSphere_type& x);

      void
      BaseSphere (::std::auto_ptr< BaseSphere_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      SphereTransformType (const BaseSphere_type&,
                           const Transformation_type&);

      SphereTransformType (::std::auto_ptr< BaseSphere_type >,
                           ::std::auto_ptr< Transformation_type >);

      SphereTransformType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      SphereTransformType (const SphereTransformType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual SphereTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphereTransformType&
      operator= (const SphereTransformType& x);

      virtual 
      ~SphereTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseSphere_type > BaseSphere_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class SphereFromScanType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // SurfaceFeature
      //
      typedef ::xsd::qif2::BaseFeatureType SurfaceFeature_type;
      typedef ::xsd::cxx::tree::traits< SurfaceFeature_type, char > SurfaceFeature_traits;

      const SurfaceFeature_type&
      SurfaceFeature () const;

      SurfaceFeature_type&
      SurfaceFeature ();

      void
      SurfaceFeature (const SurfaceFeature_type& x);

      void
      SurfaceFeature (::std::auto_ptr< SurfaceFeature_type > p);

      // SearchRadius
      //
      typedef ::xsd::qif2::LinearValueType SearchRadius_type;
      typedef ::xsd::cxx::tree::traits< SearchRadius_type, char > SearchRadius_traits;

      const SearchRadius_type&
      SearchRadius () const;

      SearchRadius_type&
      SearchRadius ();

      void
      SearchRadius (const SearchRadius_type& x);

      void
      SearchRadius (::std::auto_ptr< SearchRadius_type > p);

      // Vector
      //
      typedef ::xsd::qif2::UnitVectorType Vector_type;
      typedef ::xsd::cxx::tree::optional< Vector_type > Vector_optional;
      typedef ::xsd::cxx::tree::traits< Vector_type, char > Vector_traits;

      const Vector_optional&
      Vector () const;

      Vector_optional&
      Vector ();

      void
      Vector (const Vector_type& x);

      void
      Vector (const Vector_optional& x);

      void
      Vector (::std::auto_ptr< Vector_type > p);

      // Constructors.
      //
      SphereFromScanType (const SurfaceFeature_type&,
                          const SearchRadius_type&);

      SphereFromScanType (::std::auto_ptr< SurfaceFeature_type >,
                          ::std::auto_ptr< SearchRadius_type >);

      SphereFromScanType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      SphereFromScanType (const SphereFromScanType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual SphereFromScanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphereFromScanType&
      operator= (const SphereFromScanType& x);

      virtual 
      ~SphereFromScanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SurfaceFeature_type > SurfaceFeature_;
      ::xsd::cxx::tree::one< SearchRadius_type > SearchRadius_;
      Vector_optional Vector_;
    };

    class SphereCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::SphereConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      SphereCheckedType ();

      SphereCheckedType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      SphereCheckedType (const SphereCheckedType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual SphereCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphereCheckedType&
      operator= (const SphereCheckedType& x);

      virtual 
      ~SphereCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class SphereCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::SphereCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      SphereCheckedFeatureType ();

      SphereCheckedFeatureType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      SphereCheckedFeatureType (const SphereCheckedFeatureType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual SphereCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphereCheckedFeatureType&
      operator= (const SphereCheckedFeatureType& x);

      virtual 
      ~SphereCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class SphereActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::SphereCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      SphereActualDeterminationType ();

      SphereActualDeterminationType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      SphereActualDeterminationType (const SphereActualDeterminationType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual SphereActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphereActualDeterminationType&
      operator= (const SphereActualDeterminationType& x);

      virtual 
      ~SphereActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class SphereFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::SphereActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::FeatureOfSizeSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      SphereFeatureItemType (const id_type&,
                             const FeatureName_type&,
                             const DeterminationMode_type&);

      SphereFeatureItemType (const id_type&,
                             const FeatureName_type&,
                             ::std::auto_ptr< DeterminationMode_type >);

      SphereFeatureItemType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      SphereFeatureItemType (const SphereFeatureItemType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual SphereFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphereFeatureItemType&
      operator= (const SphereFeatureItemType& x);

      virtual 
      ~SphereFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class SphereFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // InternalExternal
      //
      typedef ::xsd::qif2::InternalExternalEnumType InternalExternal_type;
      typedef ::xsd::cxx::tree::traits< InternalExternal_type, char > InternalExternal_traits;

      const InternalExternal_type&
      InternalExternal () const;

      InternalExternal_type&
      InternalExternal ();

      void
      InternalExternal (const InternalExternal_type& x);

      void
      InternalExternal (::std::auto_ptr< InternalExternal_type > p);

      // Diameter
      //
      typedef ::xsd::qif2::LinearValueType Diameter_type;
      typedef ::xsd::cxx::tree::traits< Diameter_type, char > Diameter_traits;

      const Diameter_type&
      Diameter () const;

      Diameter_type&
      Diameter ();

      void
      Diameter (const Diameter_type& x);

      void
      Diameter (::std::auto_ptr< Diameter_type > p);

      // Constructors.
      //
      SphereFeatureDefinitionType (const id_type&,
                                   const InternalExternal_type&,
                                   const Diameter_type&);

      SphereFeatureDefinitionType (const id_type&,
                                   const InternalExternal_type&,
                                   ::std::auto_ptr< Diameter_type >);

      SphereFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      SphereFeatureDefinitionType (const SphereFeatureDefinitionType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual SphereFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphereFeatureDefinitionType&
      operator= (const SphereFeatureDefinitionType& x);

      virtual 
      ~SphereFeatureDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< InternalExternal_type > InternalExternal_;
      ::xsd::cxx::tree::one< Diameter_type > Diameter_;
    };

    class SphereFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::PointType Location_type;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_type&
      Location () const;

      Location_type&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // LatitudeLongitudeSweep
      //
      typedef ::xsd::qif2::OrientedLatitudeLongitudeSweepType LatitudeLongitudeSweep_type;
      typedef ::xsd::cxx::tree::optional< LatitudeLongitudeSweep_type > LatitudeLongitudeSweep_optional;
      typedef ::xsd::cxx::tree::traits< LatitudeLongitudeSweep_type, char > LatitudeLongitudeSweep_traits;

      const LatitudeLongitudeSweep_optional&
      LatitudeLongitudeSweep () const;

      LatitudeLongitudeSweep_optional&
      LatitudeLongitudeSweep ();

      void
      LatitudeLongitudeSweep (const LatitudeLongitudeSweep_type& x);

      void
      LatitudeLongitudeSweep (const LatitudeLongitudeSweep_optional& x);

      void
      LatitudeLongitudeSweep (::std::auto_ptr< LatitudeLongitudeSweep_type > p);

      // Constructors.
      //
      SphereFeatureNominalType (const id_type&,
                                const FeatureDefinitionId_type&,
                                const Location_type&);

      SphereFeatureNominalType (const id_type&,
                                const FeatureDefinitionId_type&,
                                ::std::auto_ptr< Location_type >);

      SphereFeatureNominalType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      SphereFeatureNominalType (const SphereFeatureNominalType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual SphereFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphereFeatureNominalType&
      operator= (const SphereFeatureNominalType& x);

      virtual 
      ~SphereFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Location_type > Location_;
      LatitudeLongitudeSweep_optional LatitudeLongitudeSweep_;
    };

    class SphereFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::ActualPointType Location_type;
      typedef ::xsd::cxx::tree::optional< Location_type > Location_optional;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_optional&
      Location () const;

      Location_optional&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (const Location_optional& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // Diameter
      //
      typedef ::xsd::qif2::ActualLinearValueType Diameter_type;
      typedef ::xsd::cxx::tree::optional< Diameter_type > Diameter_optional;
      typedef ::xsd::cxx::tree::traits< Diameter_type, char > Diameter_traits;

      const Diameter_optional&
      Diameter () const;

      Diameter_optional&
      Diameter ();

      void
      Diameter (const Diameter_type& x);

      void
      Diameter (const Diameter_optional& x);

      void
      Diameter (::std::auto_ptr< Diameter_type > p);

      // DiameterMin
      //
      typedef ::xsd::qif2::ActualLinearValueType DiameterMin_type;
      typedef ::xsd::cxx::tree::optional< DiameterMin_type > DiameterMin_optional;
      typedef ::xsd::cxx::tree::traits< DiameterMin_type, char > DiameterMin_traits;

      const DiameterMin_optional&
      DiameterMin () const;

      DiameterMin_optional&
      DiameterMin ();

      void
      DiameterMin (const DiameterMin_type& x);

      void
      DiameterMin (const DiameterMin_optional& x);

      void
      DiameterMin (::std::auto_ptr< DiameterMin_type > p);

      // DiameterMax
      //
      typedef ::xsd::qif2::ActualLinearValueType DiameterMax_type;
      typedef ::xsd::cxx::tree::optional< DiameterMax_type > DiameterMax_optional;
      typedef ::xsd::cxx::tree::traits< DiameterMax_type, char > DiameterMax_traits;

      const DiameterMax_optional&
      DiameterMax () const;

      DiameterMax_optional&
      DiameterMax ();

      void
      DiameterMax (const DiameterMax_type& x);

      void
      DiameterMax (const DiameterMax_optional& x);

      void
      DiameterMax (::std::auto_ptr< DiameterMax_type > p);

      // LatitudeLongitudeSweep
      //
      typedef ::xsd::qif2::OrientedLatitudeLongitudeSweepType LatitudeLongitudeSweep_type;
      typedef ::xsd::cxx::tree::optional< LatitudeLongitudeSweep_type > LatitudeLongitudeSweep_optional;
      typedef ::xsd::cxx::tree::traits< LatitudeLongitudeSweep_type, char > LatitudeLongitudeSweep_traits;

      const LatitudeLongitudeSweep_optional&
      LatitudeLongitudeSweep () const;

      LatitudeLongitudeSweep_optional&
      LatitudeLongitudeSweep ();

      void
      LatitudeLongitudeSweep (const LatitudeLongitudeSweep_type& x);

      void
      LatitudeLongitudeSweep (const LatitudeLongitudeSweep_optional& x);

      void
      LatitudeLongitudeSweep (::std::auto_ptr< LatitudeLongitudeSweep_type > p);

      // Form
      //
      typedef ::xsd::qif2::ActualLinearValueType Form_type;
      typedef ::xsd::cxx::tree::optional< Form_type > Form_optional;
      typedef ::xsd::cxx::tree::traits< Form_type, char > Form_traits;

      const Form_optional&
      Form () const;

      Form_optional&
      Form ();

      void
      Form (const Form_type& x);

      void
      Form (const Form_optional& x);

      void
      Form (::std::auto_ptr< Form_type > p);

      // Constructors.
      //
      SphereFeatureActualType (const id_type&,
                               const FeatureItemId_type&);

      SphereFeatureActualType (const id_type&,
                               ::std::auto_ptr< FeatureItemId_type >);

      SphereFeatureActualType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      SphereFeatureActualType (const SphereFeatureActualType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual SphereFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphereFeatureActualType&
      operator= (const SphereFeatureActualType& x);

      virtual 
      ~SphereFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Location_optional Location_;
      Diameter_optional Diameter_;
      DiameterMin_optional DiameterMin_;
      DiameterMax_optional DiameterMax_;
      LatitudeLongitudeSweep_optional LatitudeLongitudeSweep_;
      Form_optional Form_;
    };

    class SphericalSegmentConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::SphericalSegmentBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::SphericalSegmentRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Copy
      //
      typedef ::xsd::qif2::SphericalSegmentCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::SphericalSegmentCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // Transform
      //
      typedef ::xsd::qif2::SphericalSegmentTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // Constructors.
      //
      SphericalSegmentConstructionMethodType ();

      SphericalSegmentConstructionMethodType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      SphericalSegmentConstructionMethodType (const SphericalSegmentConstructionMethodType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual SphericalSegmentConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphericalSegmentConstructionMethodType&
      operator= (const SphericalSegmentConstructionMethodType& x);

      virtual 
      ~SphericalSegmentConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Copy_optional Copy_;
      Cast_optional Cast_;
      Transform_optional Transform_;
    };

    class SphericalSegmentBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      SphericalSegmentBestFitType ();

      SphericalSegmentBestFitType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      SphericalSegmentBestFitType (const SphericalSegmentBestFitType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual SphericalSegmentBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphericalSegmentBestFitType&
      operator= (const SphericalSegmentBestFitType& x);

      virtual 
      ~SphericalSegmentBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class SphericalSegmentRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      SphericalSegmentRecompType (const BaseFeaturePointList_type&);

      SphericalSegmentRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      SphericalSegmentRecompType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      SphericalSegmentRecompType (const SphericalSegmentRecompType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual SphericalSegmentRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphericalSegmentRecompType&
      operator= (const SphericalSegmentRecompType& x);

      virtual 
      ~SphericalSegmentRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class SphericalSegmentCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseSphericalSegment
      //
      typedef ::xsd::qif2::BaseFeatureType BaseSphericalSegment_type;
      typedef ::xsd::cxx::tree::traits< BaseSphericalSegment_type, char > BaseSphericalSegment_traits;

      const BaseSphericalSegment_type&
      BaseSphericalSegment () const;

      BaseSphericalSegment_type&
      BaseSphericalSegment ();

      void
      BaseSphericalSegment (const BaseSphericalSegment_type& x);

      void
      BaseSphericalSegment (::std::auto_ptr< BaseSphericalSegment_type > p);

      // Constructors.
      //
      SphericalSegmentCopyType (const BaseSphericalSegment_type&);

      SphericalSegmentCopyType (::std::auto_ptr< BaseSphericalSegment_type >);

      SphericalSegmentCopyType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      SphericalSegmentCopyType (const SphericalSegmentCopyType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual SphericalSegmentCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphericalSegmentCopyType&
      operator= (const SphericalSegmentCopyType& x);

      virtual 
      ~SphericalSegmentCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseSphericalSegment_type > BaseSphericalSegment_;
    };

    class SphericalSegmentCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      SphericalSegmentCastType (const BaseFeature_type&);

      SphericalSegmentCastType (::std::auto_ptr< BaseFeature_type >);

      SphericalSegmentCastType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      SphericalSegmentCastType (const SphericalSegmentCastType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual SphericalSegmentCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphericalSegmentCastType&
      operator= (const SphericalSegmentCastType& x);

      virtual 
      ~SphericalSegmentCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class SphericalSegmentTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseSphericalSegment
      //
      typedef ::xsd::qif2::BaseFeatureType BaseSphericalSegment_type;
      typedef ::xsd::cxx::tree::traits< BaseSphericalSegment_type, char > BaseSphericalSegment_traits;

      const BaseSphericalSegment_type&
      BaseSphericalSegment () const;

      BaseSphericalSegment_type&
      BaseSphericalSegment ();

      void
      BaseSphericalSegment (const BaseSphericalSegment_type& x);

      void
      BaseSphericalSegment (::std::auto_ptr< BaseSphericalSegment_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      SphericalSegmentTransformType (const BaseSphericalSegment_type&,
                                     const Transformation_type&);

      SphericalSegmentTransformType (::std::auto_ptr< BaseSphericalSegment_type >,
                                     ::std::auto_ptr< Transformation_type >);

      SphericalSegmentTransformType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      SphericalSegmentTransformType (const SphericalSegmentTransformType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual SphericalSegmentTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphericalSegmentTransformType&
      operator= (const SphericalSegmentTransformType& x);

      virtual 
      ~SphericalSegmentTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseSphericalSegment_type > BaseSphericalSegment_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class SphericalSegmentCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::SphericalSegmentConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      SphericalSegmentCheckedType ();

      SphericalSegmentCheckedType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      SphericalSegmentCheckedType (const SphericalSegmentCheckedType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual SphericalSegmentCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphericalSegmentCheckedType&
      operator= (const SphericalSegmentCheckedType& x);

      virtual 
      ~SphericalSegmentCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class SphericalSegmentCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::SphericalSegmentCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      SphericalSegmentCheckedFeatureType ();

      SphericalSegmentCheckedFeatureType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      SphericalSegmentCheckedFeatureType (const SphericalSegmentCheckedFeatureType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual SphericalSegmentCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphericalSegmentCheckedFeatureType&
      operator= (const SphericalSegmentCheckedFeatureType& x);

      virtual 
      ~SphericalSegmentCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class SphericalSegmentActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::SphericalSegmentCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      SphericalSegmentActualDeterminationType ();

      SphericalSegmentActualDeterminationType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      SphericalSegmentActualDeterminationType (const SphericalSegmentActualDeterminationType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual SphericalSegmentActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphericalSegmentActualDeterminationType&
      operator= (const SphericalSegmentActualDeterminationType& x);

      virtual 
      ~SphericalSegmentActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class SphericalSegmentFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::SphericalSegmentActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::NonFeatureOfSizeSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      SphericalSegmentFeatureItemType (const id_type&,
                                       const FeatureName_type&,
                                       const DeterminationMode_type&);

      SphericalSegmentFeatureItemType (const id_type&,
                                       const FeatureName_type&,
                                       ::std::auto_ptr< DeterminationMode_type >);

      SphericalSegmentFeatureItemType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      SphericalSegmentFeatureItemType (const SphericalSegmentFeatureItemType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual SphericalSegmentFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphericalSegmentFeatureItemType&
      operator= (const SphericalSegmentFeatureItemType& x);

      virtual 
      ~SphericalSegmentFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class SphericalSegmentFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // InternalExternal
      //
      typedef ::xsd::qif2::InternalExternalEnumType InternalExternal_type;
      typedef ::xsd::cxx::tree::traits< InternalExternal_type, char > InternalExternal_traits;

      const InternalExternal_type&
      InternalExternal () const;

      InternalExternal_type&
      InternalExternal ();

      void
      InternalExternal (const InternalExternal_type& x);

      void
      InternalExternal (::std::auto_ptr< InternalExternal_type > p);

      // Diameter
      //
      typedef ::xsd::qif2::LinearValueType Diameter_type;
      typedef ::xsd::cxx::tree::traits< Diameter_type, char > Diameter_traits;

      const Diameter_type&
      Diameter () const;

      Diameter_type&
      Diameter ();

      void
      Diameter (const Diameter_type& x);

      void
      Diameter (::std::auto_ptr< Diameter_type > p);

      // Constructors.
      //
      SphericalSegmentFeatureDefinitionType (const id_type&,
                                             const InternalExternal_type&,
                                             const Diameter_type&);

      SphericalSegmentFeatureDefinitionType (const id_type&,
                                             const InternalExternal_type&,
                                             ::std::auto_ptr< Diameter_type >);

      SphericalSegmentFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      SphericalSegmentFeatureDefinitionType (const SphericalSegmentFeatureDefinitionType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual SphericalSegmentFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphericalSegmentFeatureDefinitionType&
      operator= (const SphericalSegmentFeatureDefinitionType& x);

      virtual 
      ~SphericalSegmentFeatureDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< InternalExternal_type > InternalExternal_;
      ::xsd::cxx::tree::one< Diameter_type > Diameter_;
    };

    class SphericalSegmentFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::PointType Location_type;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_type&
      Location () const;

      Location_type&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // LatitudeLongitudeSweep
      //
      typedef ::xsd::qif2::OrientedLatitudeLongitudeSweepType LatitudeLongitudeSweep_type;
      typedef ::xsd::cxx::tree::traits< LatitudeLongitudeSweep_type, char > LatitudeLongitudeSweep_traits;

      const LatitudeLongitudeSweep_type&
      LatitudeLongitudeSweep () const;

      LatitudeLongitudeSweep_type&
      LatitudeLongitudeSweep ();

      void
      LatitudeLongitudeSweep (const LatitudeLongitudeSweep_type& x);

      void
      LatitudeLongitudeSweep (::std::auto_ptr< LatitudeLongitudeSweep_type > p);

      // Constructors.
      //
      SphericalSegmentFeatureNominalType (const id_type&,
                                          const FeatureDefinitionId_type&,
                                          const Location_type&,
                                          const LatitudeLongitudeSweep_type&);

      SphericalSegmentFeatureNominalType (const id_type&,
                                          const FeatureDefinitionId_type&,
                                          ::std::auto_ptr< Location_type >,
                                          ::std::auto_ptr< LatitudeLongitudeSweep_type >);

      SphericalSegmentFeatureNominalType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      SphericalSegmentFeatureNominalType (const SphericalSegmentFeatureNominalType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual SphericalSegmentFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphericalSegmentFeatureNominalType&
      operator= (const SphericalSegmentFeatureNominalType& x);

      virtual 
      ~SphericalSegmentFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Location_type > Location_;
      ::xsd::cxx::tree::one< LatitudeLongitudeSweep_type > LatitudeLongitudeSweep_;
    };

    class SphericalSegmentFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::ActualPointType Location_type;
      typedef ::xsd::cxx::tree::optional< Location_type > Location_optional;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_optional&
      Location () const;

      Location_optional&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (const Location_optional& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // Diameter
      //
      typedef ::xsd::qif2::ActualLinearValueType Diameter_type;
      typedef ::xsd::cxx::tree::optional< Diameter_type > Diameter_optional;
      typedef ::xsd::cxx::tree::traits< Diameter_type, char > Diameter_traits;

      const Diameter_optional&
      Diameter () const;

      Diameter_optional&
      Diameter ();

      void
      Diameter (const Diameter_type& x);

      void
      Diameter (const Diameter_optional& x);

      void
      Diameter (::std::auto_ptr< Diameter_type > p);

      // DiameterMin
      //
      typedef ::xsd::qif2::ActualLinearValueType DiameterMin_type;
      typedef ::xsd::cxx::tree::optional< DiameterMin_type > DiameterMin_optional;
      typedef ::xsd::cxx::tree::traits< DiameterMin_type, char > DiameterMin_traits;

      const DiameterMin_optional&
      DiameterMin () const;

      DiameterMin_optional&
      DiameterMin ();

      void
      DiameterMin (const DiameterMin_type& x);

      void
      DiameterMin (const DiameterMin_optional& x);

      void
      DiameterMin (::std::auto_ptr< DiameterMin_type > p);

      // DiameterMax
      //
      typedef ::xsd::qif2::ActualLinearValueType DiameterMax_type;
      typedef ::xsd::cxx::tree::optional< DiameterMax_type > DiameterMax_optional;
      typedef ::xsd::cxx::tree::traits< DiameterMax_type, char > DiameterMax_traits;

      const DiameterMax_optional&
      DiameterMax () const;

      DiameterMax_optional&
      DiameterMax ();

      void
      DiameterMax (const DiameterMax_type& x);

      void
      DiameterMax (const DiameterMax_optional& x);

      void
      DiameterMax (::std::auto_ptr< DiameterMax_type > p);

      // LatitudeLongitudeSweep
      //
      typedef ::xsd::qif2::OrientedLatitudeLongitudeSweepType LatitudeLongitudeSweep_type;
      typedef ::xsd::cxx::tree::optional< LatitudeLongitudeSweep_type > LatitudeLongitudeSweep_optional;
      typedef ::xsd::cxx::tree::traits< LatitudeLongitudeSweep_type, char > LatitudeLongitudeSweep_traits;

      const LatitudeLongitudeSweep_optional&
      LatitudeLongitudeSweep () const;

      LatitudeLongitudeSweep_optional&
      LatitudeLongitudeSweep ();

      void
      LatitudeLongitudeSweep (const LatitudeLongitudeSweep_type& x);

      void
      LatitudeLongitudeSweep (const LatitudeLongitudeSweep_optional& x);

      void
      LatitudeLongitudeSweep (::std::auto_ptr< LatitudeLongitudeSweep_type > p);

      // Form
      //
      typedef ::xsd::qif2::ActualLinearValueType Form_type;
      typedef ::xsd::cxx::tree::optional< Form_type > Form_optional;
      typedef ::xsd::cxx::tree::traits< Form_type, char > Form_traits;

      const Form_optional&
      Form () const;

      Form_optional&
      Form ();

      void
      Form (const Form_type& x);

      void
      Form (const Form_optional& x);

      void
      Form (::std::auto_ptr< Form_type > p);

      // Constructors.
      //
      SphericalSegmentFeatureActualType (const id_type&,
                                         const FeatureItemId_type&);

      SphericalSegmentFeatureActualType (const id_type&,
                                         ::std::auto_ptr< FeatureItemId_type >);

      SphericalSegmentFeatureActualType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      SphericalSegmentFeatureActualType (const SphericalSegmentFeatureActualType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual SphericalSegmentFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphericalSegmentFeatureActualType&
      operator= (const SphericalSegmentFeatureActualType& x);

      virtual 
      ~SphericalSegmentFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Location_optional Location_;
      Diameter_optional Diameter_;
      DiameterMin_optional DiameterMin_;
      DiameterMax_optional DiameterMax_;
      LatitudeLongitudeSweep_optional LatitudeLongitudeSweep_;
      Form_optional Form_;
    };

    class SurfaceOfRevolutionConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::SurfaceOfRevolutionBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::SurfaceOfRevolutionRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Copy
      //
      typedef ::xsd::qif2::SurfaceOfRevolutionCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::SurfaceOfRevolutionCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // Transform
      //
      typedef ::xsd::qif2::SurfaceOfRevolutionTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // Constructors.
      //
      SurfaceOfRevolutionConstructionMethodType ();

      SurfaceOfRevolutionConstructionMethodType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      SurfaceOfRevolutionConstructionMethodType (const SurfaceOfRevolutionConstructionMethodType& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      virtual SurfaceOfRevolutionConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SurfaceOfRevolutionConstructionMethodType&
      operator= (const SurfaceOfRevolutionConstructionMethodType& x);

      virtual 
      ~SurfaceOfRevolutionConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Copy_optional Copy_;
      Cast_optional Cast_;
      Transform_optional Transform_;
    };

    class SurfaceOfRevolutionBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      SurfaceOfRevolutionBestFitType ();

      SurfaceOfRevolutionBestFitType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      SurfaceOfRevolutionBestFitType (const SurfaceOfRevolutionBestFitType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual SurfaceOfRevolutionBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SurfaceOfRevolutionBestFitType&
      operator= (const SurfaceOfRevolutionBestFitType& x);

      virtual 
      ~SurfaceOfRevolutionBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class SurfaceOfRevolutionRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      SurfaceOfRevolutionRecompType (const BaseFeaturePointList_type&);

      SurfaceOfRevolutionRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      SurfaceOfRevolutionRecompType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      SurfaceOfRevolutionRecompType (const SurfaceOfRevolutionRecompType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual SurfaceOfRevolutionRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SurfaceOfRevolutionRecompType&
      operator= (const SurfaceOfRevolutionRecompType& x);

      virtual 
      ~SurfaceOfRevolutionRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class SurfaceOfRevolutionCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseSurfaceOfRevolution
      //
      typedef ::xsd::qif2::BaseFeatureType BaseSurfaceOfRevolution_type;
      typedef ::xsd::cxx::tree::traits< BaseSurfaceOfRevolution_type, char > BaseSurfaceOfRevolution_traits;

      const BaseSurfaceOfRevolution_type&
      BaseSurfaceOfRevolution () const;

      BaseSurfaceOfRevolution_type&
      BaseSurfaceOfRevolution ();

      void
      BaseSurfaceOfRevolution (const BaseSurfaceOfRevolution_type& x);

      void
      BaseSurfaceOfRevolution (::std::auto_ptr< BaseSurfaceOfRevolution_type > p);

      // Constructors.
      //
      SurfaceOfRevolutionCopyType (const BaseSurfaceOfRevolution_type&);

      SurfaceOfRevolutionCopyType (::std::auto_ptr< BaseSurfaceOfRevolution_type >);

      SurfaceOfRevolutionCopyType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      SurfaceOfRevolutionCopyType (const SurfaceOfRevolutionCopyType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual SurfaceOfRevolutionCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SurfaceOfRevolutionCopyType&
      operator= (const SurfaceOfRevolutionCopyType& x);

      virtual 
      ~SurfaceOfRevolutionCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseSurfaceOfRevolution_type > BaseSurfaceOfRevolution_;
    };

    class SurfaceOfRevolutionCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      SurfaceOfRevolutionCastType (const BaseFeature_type&);

      SurfaceOfRevolutionCastType (::std::auto_ptr< BaseFeature_type >);

      SurfaceOfRevolutionCastType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      SurfaceOfRevolutionCastType (const SurfaceOfRevolutionCastType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual SurfaceOfRevolutionCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SurfaceOfRevolutionCastType&
      operator= (const SurfaceOfRevolutionCastType& x);

      virtual 
      ~SurfaceOfRevolutionCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class SurfaceOfRevolutionTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseSurfaceOfRevolution
      //
      typedef ::xsd::qif2::BaseFeatureType BaseSurfaceOfRevolution_type;
      typedef ::xsd::cxx::tree::traits< BaseSurfaceOfRevolution_type, char > BaseSurfaceOfRevolution_traits;

      const BaseSurfaceOfRevolution_type&
      BaseSurfaceOfRevolution () const;

      BaseSurfaceOfRevolution_type&
      BaseSurfaceOfRevolution ();

      void
      BaseSurfaceOfRevolution (const BaseSurfaceOfRevolution_type& x);

      void
      BaseSurfaceOfRevolution (::std::auto_ptr< BaseSurfaceOfRevolution_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      SurfaceOfRevolutionTransformType (const BaseSurfaceOfRevolution_type&,
                                        const Transformation_type&);

      SurfaceOfRevolutionTransformType (::std::auto_ptr< BaseSurfaceOfRevolution_type >,
                                        ::std::auto_ptr< Transformation_type >);

      SurfaceOfRevolutionTransformType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      SurfaceOfRevolutionTransformType (const SurfaceOfRevolutionTransformType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual SurfaceOfRevolutionTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SurfaceOfRevolutionTransformType&
      operator= (const SurfaceOfRevolutionTransformType& x);

      virtual 
      ~SurfaceOfRevolutionTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseSurfaceOfRevolution_type > BaseSurfaceOfRevolution_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class SurfaceOfRevolutionCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::SurfaceOfRevolutionConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      SurfaceOfRevolutionCheckedType ();

      SurfaceOfRevolutionCheckedType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      SurfaceOfRevolutionCheckedType (const SurfaceOfRevolutionCheckedType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual SurfaceOfRevolutionCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SurfaceOfRevolutionCheckedType&
      operator= (const SurfaceOfRevolutionCheckedType& x);

      virtual 
      ~SurfaceOfRevolutionCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class SurfaceOfRevolutionCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::SurfaceOfRevolutionCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      SurfaceOfRevolutionCheckedFeatureType ();

      SurfaceOfRevolutionCheckedFeatureType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      SurfaceOfRevolutionCheckedFeatureType (const SurfaceOfRevolutionCheckedFeatureType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual SurfaceOfRevolutionCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SurfaceOfRevolutionCheckedFeatureType&
      operator= (const SurfaceOfRevolutionCheckedFeatureType& x);

      virtual 
      ~SurfaceOfRevolutionCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class SurfaceOfRevolutionActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::SurfaceOfRevolutionCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      SurfaceOfRevolutionActualDeterminationType ();

      SurfaceOfRevolutionActualDeterminationType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      SurfaceOfRevolutionActualDeterminationType (const SurfaceOfRevolutionActualDeterminationType& x,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      virtual SurfaceOfRevolutionActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SurfaceOfRevolutionActualDeterminationType&
      operator= (const SurfaceOfRevolutionActualDeterminationType& x);

      virtual 
      ~SurfaceOfRevolutionActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class SurfaceOfRevolutionFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::SurfaceOfRevolutionActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::CurveSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      SurfaceOfRevolutionFeatureItemType (const id_type&,
                                          const FeatureName_type&,
                                          const DeterminationMode_type&);

      SurfaceOfRevolutionFeatureItemType (const id_type&,
                                          const FeatureName_type&,
                                          ::std::auto_ptr< DeterminationMode_type >);

      SurfaceOfRevolutionFeatureItemType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      SurfaceOfRevolutionFeatureItemType (const SurfaceOfRevolutionFeatureItemType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual SurfaceOfRevolutionFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SurfaceOfRevolutionFeatureItemType&
      operator= (const SurfaceOfRevolutionFeatureItemType& x);

      virtual 
      ~SurfaceOfRevolutionFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class SurfaceOfRevolutionFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // InternalExternal
      //
      typedef ::xsd::qif2::InternalExternalEnumType InternalExternal_type;
      typedef ::xsd::cxx::tree::traits< InternalExternal_type, char > InternalExternal_traits;

      const InternalExternal_type&
      InternalExternal () const;

      InternalExternal_type&
      InternalExternal ();

      void
      InternalExternal (const InternalExternal_type& x);

      void
      InternalExternal (::std::auto_ptr< InternalExternal_type > p);

      // Length
      //
      typedef ::xsd::qif2::LinearValueType Length_type;
      typedef ::xsd::cxx::tree::optional< Length_type > Length_optional;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_optional&
      Length () const;

      Length_optional&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (const Length_optional& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // Constructors.
      //
      SurfaceOfRevolutionFeatureDefinitionType (const id_type&,
                                                const InternalExternal_type&);

      SurfaceOfRevolutionFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      SurfaceOfRevolutionFeatureDefinitionType (const SurfaceOfRevolutionFeatureDefinitionType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual SurfaceOfRevolutionFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SurfaceOfRevolutionFeatureDefinitionType&
      operator= (const SurfaceOfRevolutionFeatureDefinitionType& x);

      virtual 
      ~SurfaceOfRevolutionFeatureDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< InternalExternal_type > InternalExternal_;
      Length_optional Length_;
    };

    class SurfaceOfRevolutionFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // Axis
      //
      typedef ::xsd::qif2::AxisType Axis_type;
      typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

      const Axis_type&
      Axis () const;

      Axis_type&
      Axis ();

      void
      Axis (const Axis_type& x);

      void
      Axis (::std::auto_ptr< Axis_type > p);

      // Sweep
      //
      typedef ::xsd::qif2::SweepType Sweep_type;
      typedef ::xsd::cxx::tree::optional< Sweep_type > Sweep_optional;
      typedef ::xsd::cxx::tree::traits< Sweep_type, char > Sweep_traits;

      const Sweep_optional&
      Sweep () const;

      Sweep_optional&
      Sweep ();

      void
      Sweep (const Sweep_type& x);

      void
      Sweep (const Sweep_optional& x);

      void
      Sweep (::std::auto_ptr< Sweep_type > p);

      // ReferenceFeatureNominalId
      //
      typedef ::xsd::qif2::QIFReferenceFullType ReferenceFeatureNominalId_type;
      typedef ::xsd::cxx::tree::traits< ReferenceFeatureNominalId_type, char > ReferenceFeatureNominalId_traits;

      const ReferenceFeatureNominalId_type&
      ReferenceFeatureNominalId () const;

      ReferenceFeatureNominalId_type&
      ReferenceFeatureNominalId ();

      void
      ReferenceFeatureNominalId (const ReferenceFeatureNominalId_type& x);

      void
      ReferenceFeatureNominalId (::std::auto_ptr< ReferenceFeatureNominalId_type > p);

      // Constructors.
      //
      SurfaceOfRevolutionFeatureNominalType (const id_type&,
                                             const FeatureDefinitionId_type&,
                                             const Axis_type&,
                                             const ReferenceFeatureNominalId_type&);

      SurfaceOfRevolutionFeatureNominalType (const id_type&,
                                             const FeatureDefinitionId_type&,
                                             ::std::auto_ptr< Axis_type >,
                                             ::std::auto_ptr< ReferenceFeatureNominalId_type >);

      SurfaceOfRevolutionFeatureNominalType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      SurfaceOfRevolutionFeatureNominalType (const SurfaceOfRevolutionFeatureNominalType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual SurfaceOfRevolutionFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SurfaceOfRevolutionFeatureNominalType&
      operator= (const SurfaceOfRevolutionFeatureNominalType& x);

      virtual 
      ~SurfaceOfRevolutionFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Axis_type > Axis_;
      Sweep_optional Sweep_;
      ::xsd::cxx::tree::one< ReferenceFeatureNominalId_type > ReferenceFeatureNominalId_;
    };

    class SurfaceOfRevolutionFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Axis
      //
      typedef ::xsd::qif2::ActualAxisType Axis_type;
      typedef ::xsd::cxx::tree::optional< Axis_type > Axis_optional;
      typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

      const Axis_optional&
      Axis () const;

      Axis_optional&
      Axis ();

      void
      Axis (const Axis_type& x);

      void
      Axis (const Axis_optional& x);

      void
      Axis (::std::auto_ptr< Axis_type > p);

      // Sweep
      //
      typedef ::xsd::qif2::SweepType Sweep_type;
      typedef ::xsd::cxx::tree::optional< Sweep_type > Sweep_optional;
      typedef ::xsd::cxx::tree::traits< Sweep_type, char > Sweep_traits;

      const Sweep_optional&
      Sweep () const;

      Sweep_optional&
      Sweep ();

      void
      Sweep (const Sweep_type& x);

      void
      Sweep (const Sweep_optional& x);

      void
      Sweep (::std::auto_ptr< Sweep_type > p);

      // Length
      //
      typedef ::xsd::qif2::ActualLinearValueType Length_type;
      typedef ::xsd::cxx::tree::optional< Length_type > Length_optional;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_optional&
      Length () const;

      Length_optional&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (const Length_optional& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // Form
      //
      typedef ::xsd::qif2::ActualLinearValueType Form_type;
      typedef ::xsd::cxx::tree::optional< Form_type > Form_optional;
      typedef ::xsd::cxx::tree::traits< Form_type, char > Form_traits;

      const Form_optional&
      Form () const;

      Form_optional&
      Form ();

      void
      Form (const Form_type& x);

      void
      Form (const Form_optional& x);

      void
      Form (::std::auto_ptr< Form_type > p);

      // Constructors.
      //
      SurfaceOfRevolutionFeatureActualType (const id_type&,
                                            const FeatureItemId_type&);

      SurfaceOfRevolutionFeatureActualType (const id_type&,
                                            ::std::auto_ptr< FeatureItemId_type >);

      SurfaceOfRevolutionFeatureActualType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      SurfaceOfRevolutionFeatureActualType (const SurfaceOfRevolutionFeatureActualType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual SurfaceOfRevolutionFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SurfaceOfRevolutionFeatureActualType&
      operator= (const SurfaceOfRevolutionFeatureActualType& x);

      virtual 
      ~SurfaceOfRevolutionFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Axis_optional Axis_;
      Sweep_optional Sweep_;
      Length_optional Length_;
      Form_optional Form_;
    };

    class ThreadedFeatureConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::ThreadedFeatureBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::ThreadedFeatureRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Copy
      //
      typedef ::xsd::qif2::ThreadedFeatureCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::ThreadedFeatureCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // Transform
      //
      typedef ::xsd::qif2::ThreadedFeatureTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // FromCylinder
      //
      typedef ::xsd::qif2::ThreadedFeatureFromCylinderType FromCylinder_type;
      typedef ::xsd::cxx::tree::optional< FromCylinder_type > FromCylinder_optional;
      typedef ::xsd::cxx::tree::traits< FromCylinder_type, char > FromCylinder_traits;

      const FromCylinder_optional&
      FromCylinder () const;

      FromCylinder_optional&
      FromCylinder ();

      void
      FromCylinder (const FromCylinder_type& x);

      void
      FromCylinder (const FromCylinder_optional& x);

      void
      FromCylinder (::std::auto_ptr< FromCylinder_type > p);

      // Constructors.
      //
      ThreadedFeatureConstructionMethodType ();

      ThreadedFeatureConstructionMethodType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      ThreadedFeatureConstructionMethodType (const ThreadedFeatureConstructionMethodType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual ThreadedFeatureConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ThreadedFeatureConstructionMethodType&
      operator= (const ThreadedFeatureConstructionMethodType& x);

      virtual 
      ~ThreadedFeatureConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Copy_optional Copy_;
      Cast_optional Cast_;
      Transform_optional Transform_;
      FromCylinder_optional FromCylinder_;
    };

    class ThreadedFeatureBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      ThreadedFeatureBestFitType ();

      ThreadedFeatureBestFitType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      ThreadedFeatureBestFitType (const ThreadedFeatureBestFitType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual ThreadedFeatureBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ThreadedFeatureBestFitType&
      operator= (const ThreadedFeatureBestFitType& x);

      virtual 
      ~ThreadedFeatureBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class ThreadedFeatureRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      ThreadedFeatureRecompType (const BaseFeaturePointList_type&);

      ThreadedFeatureRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      ThreadedFeatureRecompType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      ThreadedFeatureRecompType (const ThreadedFeatureRecompType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual ThreadedFeatureRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ThreadedFeatureRecompType&
      operator= (const ThreadedFeatureRecompType& x);

      virtual 
      ~ThreadedFeatureRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class ThreadedFeatureCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseThreadedFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseThreadedFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseThreadedFeature_type, char > BaseThreadedFeature_traits;

      const BaseThreadedFeature_type&
      BaseThreadedFeature () const;

      BaseThreadedFeature_type&
      BaseThreadedFeature ();

      void
      BaseThreadedFeature (const BaseThreadedFeature_type& x);

      void
      BaseThreadedFeature (::std::auto_ptr< BaseThreadedFeature_type > p);

      // Constructors.
      //
      ThreadedFeatureCopyType (const BaseThreadedFeature_type&);

      ThreadedFeatureCopyType (::std::auto_ptr< BaseThreadedFeature_type >);

      ThreadedFeatureCopyType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      ThreadedFeatureCopyType (const ThreadedFeatureCopyType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual ThreadedFeatureCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ThreadedFeatureCopyType&
      operator= (const ThreadedFeatureCopyType& x);

      virtual 
      ~ThreadedFeatureCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseThreadedFeature_type > BaseThreadedFeature_;
    };

    class ThreadedFeatureCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      ThreadedFeatureCastType (const BaseFeature_type&);

      ThreadedFeatureCastType (::std::auto_ptr< BaseFeature_type >);

      ThreadedFeatureCastType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      ThreadedFeatureCastType (const ThreadedFeatureCastType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual ThreadedFeatureCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ThreadedFeatureCastType&
      operator= (const ThreadedFeatureCastType& x);

      virtual 
      ~ThreadedFeatureCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class ThreadedFeatureTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseThreadedFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseThreadedFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseThreadedFeature_type, char > BaseThreadedFeature_traits;

      const BaseThreadedFeature_type&
      BaseThreadedFeature () const;

      BaseThreadedFeature_type&
      BaseThreadedFeature ();

      void
      BaseThreadedFeature (const BaseThreadedFeature_type& x);

      void
      BaseThreadedFeature (::std::auto_ptr< BaseThreadedFeature_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      ThreadedFeatureTransformType (const BaseThreadedFeature_type&,
                                    const Transformation_type&);

      ThreadedFeatureTransformType (::std::auto_ptr< BaseThreadedFeature_type >,
                                    ::std::auto_ptr< Transformation_type >);

      ThreadedFeatureTransformType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      ThreadedFeatureTransformType (const ThreadedFeatureTransformType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual ThreadedFeatureTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ThreadedFeatureTransformType&
      operator= (const ThreadedFeatureTransformType& x);

      virtual 
      ~ThreadedFeatureTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseThreadedFeature_type > BaseThreadedFeature_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class ThreadedFeatureFromCylinderType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseCylinder
      //
      typedef ::xsd::qif2::BaseFeatureType BaseCylinder_type;
      typedef ::xsd::cxx::tree::traits< BaseCylinder_type, char > BaseCylinder_traits;

      const BaseCylinder_type&
      BaseCylinder () const;

      BaseCylinder_type&
      BaseCylinder ();

      void
      BaseCylinder (const BaseCylinder_type& x);

      void
      BaseCylinder (::std::auto_ptr< BaseCylinder_type > p);

      // Offset
      //
      typedef ::xsd::qif2::LinearValueType Offset_type;
      typedef ::xsd::cxx::tree::optional< Offset_type > Offset_optional;
      typedef ::xsd::cxx::tree::traits< Offset_type, char > Offset_traits;

      const Offset_optional&
      Offset () const;

      Offset_optional&
      Offset ();

      void
      Offset (const Offset_type& x);

      void
      Offset (const Offset_optional& x);

      void
      Offset (::std::auto_ptr< Offset_type > p);

      // Constructors.
      //
      ThreadedFeatureFromCylinderType (const BaseCylinder_type&);

      ThreadedFeatureFromCylinderType (::std::auto_ptr< BaseCylinder_type >);

      ThreadedFeatureFromCylinderType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      ThreadedFeatureFromCylinderType (const ThreadedFeatureFromCylinderType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual ThreadedFeatureFromCylinderType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ThreadedFeatureFromCylinderType&
      operator= (const ThreadedFeatureFromCylinderType& x);

      virtual 
      ~ThreadedFeatureFromCylinderType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseCylinder_type > BaseCylinder_;
      Offset_optional Offset_;
    };

    class ThreadedFeatureCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::ThreadedFeatureConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      ThreadedFeatureCheckedType ();

      ThreadedFeatureCheckedType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      ThreadedFeatureCheckedType (const ThreadedFeatureCheckedType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual ThreadedFeatureCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ThreadedFeatureCheckedType&
      operator= (const ThreadedFeatureCheckedType& x);

      virtual 
      ~ThreadedFeatureCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class ThreadedFeatureCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::ThreadedFeatureCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      ThreadedFeatureCheckedFeatureType ();

      ThreadedFeatureCheckedFeatureType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      ThreadedFeatureCheckedFeatureType (const ThreadedFeatureCheckedFeatureType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual ThreadedFeatureCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ThreadedFeatureCheckedFeatureType&
      operator= (const ThreadedFeatureCheckedFeatureType& x);

      virtual 
      ~ThreadedFeatureCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class ThreadedFeatureActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::ThreadedFeatureCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      ThreadedFeatureActualDeterminationType ();

      ThreadedFeatureActualDeterminationType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      ThreadedFeatureActualDeterminationType (const ThreadedFeatureActualDeterminationType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual ThreadedFeatureActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ThreadedFeatureActualDeterminationType&
      operator= (const ThreadedFeatureActualDeterminationType& x);

      virtual 
      ~ThreadedFeatureActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class ThreadedFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::ThreadedFeatureActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::FeatureOfSizeSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      ThreadedFeatureItemType (const id_type&,
                               const FeatureName_type&,
                               const DeterminationMode_type&);

      ThreadedFeatureItemType (const id_type&,
                               const FeatureName_type&,
                               ::std::auto_ptr< DeterminationMode_type >);

      ThreadedFeatureItemType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      ThreadedFeatureItemType (const ThreadedFeatureItemType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual ThreadedFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ThreadedFeatureItemType&
      operator= (const ThreadedFeatureItemType& x);

      virtual 
      ~ThreadedFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class ThreadedFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // InternalExternal
      //
      typedef ::xsd::qif2::InternalExternalEnumType InternalExternal_type;
      typedef ::xsd::cxx::tree::traits< InternalExternal_type, char > InternalExternal_traits;

      const InternalExternal_type&
      InternalExternal () const;

      InternalExternal_type&
      InternalExternal ();

      void
      InternalExternal (const InternalExternal_type& x);

      void
      InternalExternal (::std::auto_ptr< InternalExternal_type > p);

      // ThreadSpecificationId
      //
      typedef ::xsd::qif2::QIFReferenceFullType ThreadSpecificationId_type;
      typedef ::xsd::cxx::tree::traits< ThreadSpecificationId_type, char > ThreadSpecificationId_traits;

      const ThreadSpecificationId_type&
      ThreadSpecificationId () const;

      ThreadSpecificationId_type&
      ThreadSpecificationId ();

      void
      ThreadSpecificationId (const ThreadSpecificationId_type& x);

      void
      ThreadSpecificationId (::std::auto_ptr< ThreadSpecificationId_type > p);

      // Length
      //
      typedef ::xsd::qif2::LinearValueType Length_type;
      typedef ::xsd::cxx::tree::optional< Length_type > Length_optional;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_optional&
      Length () const;

      Length_optional&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (const Length_optional& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // Bottom
      //
      typedef ::xsd::qif2::BottomType Bottom_type;
      typedef ::xsd::cxx::tree::optional< Bottom_type > Bottom_optional;
      typedef ::xsd::cxx::tree::traits< Bottom_type, char > Bottom_traits;

      const Bottom_optional&
      Bottom () const;

      Bottom_optional&
      Bottom ();

      void
      Bottom (const Bottom_type& x);

      void
      Bottom (const Bottom_optional& x);

      void
      Bottom (::std::auto_ptr< Bottom_type > p);

      // Constructors.
      //
      ThreadedFeatureDefinitionType (const id_type&,
                                     const InternalExternal_type&,
                                     const ThreadSpecificationId_type&);

      ThreadedFeatureDefinitionType (const id_type&,
                                     const InternalExternal_type&,
                                     ::std::auto_ptr< ThreadSpecificationId_type >);

      ThreadedFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      ThreadedFeatureDefinitionType (const ThreadedFeatureDefinitionType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual ThreadedFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ThreadedFeatureDefinitionType&
      operator= (const ThreadedFeatureDefinitionType& x);

      virtual 
      ~ThreadedFeatureDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< InternalExternal_type > InternalExternal_;
      ::xsd::cxx::tree::one< ThreadSpecificationId_type > ThreadSpecificationId_;
      Length_optional Length_;
      Bottom_optional Bottom_;
    };

    class ThreadedFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // Axis
      //
      typedef ::xsd::qif2::AxisType Axis_type;
      typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

      const Axis_type&
      Axis () const;

      Axis_type&
      Axis ();

      void
      Axis (const Axis_type& x);

      void
      Axis (::std::auto_ptr< Axis_type > p);

      // Constructors.
      //
      ThreadedFeatureNominalType (const id_type&,
                                  const FeatureDefinitionId_type&,
                                  const Axis_type&);

      ThreadedFeatureNominalType (const id_type&,
                                  const FeatureDefinitionId_type&,
                                  ::std::auto_ptr< Axis_type >);

      ThreadedFeatureNominalType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      ThreadedFeatureNominalType (const ThreadedFeatureNominalType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual ThreadedFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ThreadedFeatureNominalType&
      operator= (const ThreadedFeatureNominalType& x);

      virtual 
      ~ThreadedFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Axis_type > Axis_;
    };

    class ThreadedFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Axis
      //
      typedef ::xsd::qif2::ActualAxisType Axis_type;
      typedef ::xsd::cxx::tree::optional< Axis_type > Axis_optional;
      typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

      const Axis_optional&
      Axis () const;

      Axis_optional&
      Axis ();

      void
      Axis (const Axis_type& x);

      void
      Axis (const Axis_optional& x);

      void
      Axis (::std::auto_ptr< Axis_type > p);

      // PitchDiameter
      //
      typedef ::xsd::qif2::ActualLinearValueType PitchDiameter_type;
      typedef ::xsd::cxx::tree::optional< PitchDiameter_type > PitchDiameter_optional;
      typedef ::xsd::cxx::tree::traits< PitchDiameter_type, char > PitchDiameter_traits;

      const PitchDiameter_optional&
      PitchDiameter () const;

      PitchDiameter_optional&
      PitchDiameter ();

      void
      PitchDiameter (const PitchDiameter_type& x);

      void
      PitchDiameter (const PitchDiameter_optional& x);

      void
      PitchDiameter (::std::auto_ptr< PitchDiameter_type > p);

      // FunctionalSize
      //
      typedef ::xsd::qif2::ActualLinearValueType FunctionalSize_type;
      typedef ::xsd::cxx::tree::optional< FunctionalSize_type > FunctionalSize_optional;
      typedef ::xsd::cxx::tree::traits< FunctionalSize_type, char > FunctionalSize_traits;

      const FunctionalSize_optional&
      FunctionalSize () const;

      FunctionalSize_optional&
      FunctionalSize ();

      void
      FunctionalSize (const FunctionalSize_type& x);

      void
      FunctionalSize (const FunctionalSize_optional& x);

      void
      FunctionalSize (::std::auto_ptr< FunctionalSize_type > p);

      // Length
      //
      typedef ::xsd::qif2::ActualLinearValueType Length_type;
      typedef ::xsd::cxx::tree::optional< Length_type > Length_optional;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_optional&
      Length () const;

      Length_optional&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (const Length_optional& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // Constructors.
      //
      ThreadedFeatureActualType (const id_type&,
                                 const FeatureItemId_type&);

      ThreadedFeatureActualType (const id_type&,
                                 ::std::auto_ptr< FeatureItemId_type >);

      ThreadedFeatureActualType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      ThreadedFeatureActualType (const ThreadedFeatureActualType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual ThreadedFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ThreadedFeatureActualType&
      operator= (const ThreadedFeatureActualType& x);

      virtual 
      ~ThreadedFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Axis_optional Axis_;
      PitchDiameter_optional PitchDiameter_;
      FunctionalSize_optional FunctionalSize_;
      Length_optional Length_;
    };

    class ToroidalSegmentConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::ToroidalSegmentBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::ToroidalSegmentRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Copy
      //
      typedef ::xsd::qif2::ToroidalSegmentCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::ToroidalSegmentCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // Transform
      //
      typedef ::xsd::qif2::ToroidalSegmentTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // Constructors.
      //
      ToroidalSegmentConstructionMethodType ();

      ToroidalSegmentConstructionMethodType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      ToroidalSegmentConstructionMethodType (const ToroidalSegmentConstructionMethodType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual ToroidalSegmentConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ToroidalSegmentConstructionMethodType&
      operator= (const ToroidalSegmentConstructionMethodType& x);

      virtual 
      ~ToroidalSegmentConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Copy_optional Copy_;
      Cast_optional Cast_;
      Transform_optional Transform_;
    };

    class ToroidalSegmentBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      ToroidalSegmentBestFitType ();

      ToroidalSegmentBestFitType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      ToroidalSegmentBestFitType (const ToroidalSegmentBestFitType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual ToroidalSegmentBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ToroidalSegmentBestFitType&
      operator= (const ToroidalSegmentBestFitType& x);

      virtual 
      ~ToroidalSegmentBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class ToroidalSegmentRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      ToroidalSegmentRecompType (const BaseFeaturePointList_type&);

      ToroidalSegmentRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      ToroidalSegmentRecompType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      ToroidalSegmentRecompType (const ToroidalSegmentRecompType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual ToroidalSegmentRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ToroidalSegmentRecompType&
      operator= (const ToroidalSegmentRecompType& x);

      virtual 
      ~ToroidalSegmentRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class ToroidalSegmentCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseToroidalSegment
      //
      typedef ::xsd::qif2::BaseFeatureType BaseToroidalSegment_type;
      typedef ::xsd::cxx::tree::traits< BaseToroidalSegment_type, char > BaseToroidalSegment_traits;

      const BaseToroidalSegment_type&
      BaseToroidalSegment () const;

      BaseToroidalSegment_type&
      BaseToroidalSegment ();

      void
      BaseToroidalSegment (const BaseToroidalSegment_type& x);

      void
      BaseToroidalSegment (::std::auto_ptr< BaseToroidalSegment_type > p);

      // Constructors.
      //
      ToroidalSegmentCopyType (const BaseToroidalSegment_type&);

      ToroidalSegmentCopyType (::std::auto_ptr< BaseToroidalSegment_type >);

      ToroidalSegmentCopyType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      ToroidalSegmentCopyType (const ToroidalSegmentCopyType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual ToroidalSegmentCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ToroidalSegmentCopyType&
      operator= (const ToroidalSegmentCopyType& x);

      virtual 
      ~ToroidalSegmentCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseToroidalSegment_type > BaseToroidalSegment_;
    };

    class ToroidalSegmentCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      ToroidalSegmentCastType (const BaseFeature_type&);

      ToroidalSegmentCastType (::std::auto_ptr< BaseFeature_type >);

      ToroidalSegmentCastType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      ToroidalSegmentCastType (const ToroidalSegmentCastType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual ToroidalSegmentCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ToroidalSegmentCastType&
      operator= (const ToroidalSegmentCastType& x);

      virtual 
      ~ToroidalSegmentCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class ToroidalSegmentTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseToroidalSegment
      //
      typedef ::xsd::qif2::BaseFeatureType BaseToroidalSegment_type;
      typedef ::xsd::cxx::tree::traits< BaseToroidalSegment_type, char > BaseToroidalSegment_traits;

      const BaseToroidalSegment_type&
      BaseToroidalSegment () const;

      BaseToroidalSegment_type&
      BaseToroidalSegment ();

      void
      BaseToroidalSegment (const BaseToroidalSegment_type& x);

      void
      BaseToroidalSegment (::std::auto_ptr< BaseToroidalSegment_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      ToroidalSegmentTransformType (const BaseToroidalSegment_type&,
                                    const Transformation_type&);

      ToroidalSegmentTransformType (::std::auto_ptr< BaseToroidalSegment_type >,
                                    ::std::auto_ptr< Transformation_type >);

      ToroidalSegmentTransformType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      ToroidalSegmentTransformType (const ToroidalSegmentTransformType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual ToroidalSegmentTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ToroidalSegmentTransformType&
      operator= (const ToroidalSegmentTransformType& x);

      virtual 
      ~ToroidalSegmentTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseToroidalSegment_type > BaseToroidalSegment_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class ToroidalSegmentCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::ToroidalSegmentConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      ToroidalSegmentCheckedType ();

      ToroidalSegmentCheckedType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      ToroidalSegmentCheckedType (const ToroidalSegmentCheckedType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual ToroidalSegmentCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ToroidalSegmentCheckedType&
      operator= (const ToroidalSegmentCheckedType& x);

      virtual 
      ~ToroidalSegmentCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class ToroidalSegmentCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::ToroidalSegmentCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      ToroidalSegmentCheckedFeatureType ();

      ToroidalSegmentCheckedFeatureType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      ToroidalSegmentCheckedFeatureType (const ToroidalSegmentCheckedFeatureType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual ToroidalSegmentCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ToroidalSegmentCheckedFeatureType&
      operator= (const ToroidalSegmentCheckedFeatureType& x);

      virtual 
      ~ToroidalSegmentCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class ToroidalSegmentActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::ToroidalSegmentCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      ToroidalSegmentActualDeterminationType ();

      ToroidalSegmentActualDeterminationType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      ToroidalSegmentActualDeterminationType (const ToroidalSegmentActualDeterminationType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual ToroidalSegmentActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ToroidalSegmentActualDeterminationType&
      operator= (const ToroidalSegmentActualDeterminationType& x);

      virtual 
      ~ToroidalSegmentActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class ToroidalSegmentFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::ToroidalSegmentActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::NonFeatureOfSizeSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      ToroidalSegmentFeatureItemType (const id_type&,
                                      const FeatureName_type&,
                                      const DeterminationMode_type&);

      ToroidalSegmentFeatureItemType (const id_type&,
                                      const FeatureName_type&,
                                      ::std::auto_ptr< DeterminationMode_type >);

      ToroidalSegmentFeatureItemType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      ToroidalSegmentFeatureItemType (const ToroidalSegmentFeatureItemType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual ToroidalSegmentFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ToroidalSegmentFeatureItemType&
      operator= (const ToroidalSegmentFeatureItemType& x);

      virtual 
      ~ToroidalSegmentFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class ToroidalSegmentFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // InternalExternal
      //
      typedef ::xsd::qif2::InternalExternalEnumType InternalExternal_type;
      typedef ::xsd::cxx::tree::traits< InternalExternal_type, char > InternalExternal_traits;

      const InternalExternal_type&
      InternalExternal () const;

      InternalExternal_type&
      InternalExternal ();

      void
      InternalExternal (const InternalExternal_type& x);

      void
      InternalExternal (::std::auto_ptr< InternalExternal_type > p);

      // MinorDiameter
      //
      typedef ::xsd::qif2::LinearValueType MinorDiameter_type;
      typedef ::xsd::cxx::tree::traits< MinorDiameter_type, char > MinorDiameter_traits;

      const MinorDiameter_type&
      MinorDiameter () const;

      MinorDiameter_type&
      MinorDiameter ();

      void
      MinorDiameter (const MinorDiameter_type& x);

      void
      MinorDiameter (::std::auto_ptr< MinorDiameter_type > p);

      // MajorDiameter
      //
      typedef ::xsd::qif2::LinearValueType MajorDiameter_type;
      typedef ::xsd::cxx::tree::traits< MajorDiameter_type, char > MajorDiameter_traits;

      const MajorDiameter_type&
      MajorDiameter () const;

      MajorDiameter_type&
      MajorDiameter ();

      void
      MajorDiameter (const MajorDiameter_type& x);

      void
      MajorDiameter (::std::auto_ptr< MajorDiameter_type > p);

      // Constructors.
      //
      ToroidalSegmentFeatureDefinitionType (const id_type&,
                                            const InternalExternal_type&,
                                            const MinorDiameter_type&,
                                            const MajorDiameter_type&);

      ToroidalSegmentFeatureDefinitionType (const id_type&,
                                            const InternalExternal_type&,
                                            ::std::auto_ptr< MinorDiameter_type >,
                                            ::std::auto_ptr< MajorDiameter_type >);

      ToroidalSegmentFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      ToroidalSegmentFeatureDefinitionType (const ToroidalSegmentFeatureDefinitionType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual ToroidalSegmentFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ToroidalSegmentFeatureDefinitionType&
      operator= (const ToroidalSegmentFeatureDefinitionType& x);

      virtual 
      ~ToroidalSegmentFeatureDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< InternalExternal_type > InternalExternal_;
      ::xsd::cxx::tree::one< MinorDiameter_type > MinorDiameter_;
      ::xsd::cxx::tree::one< MajorDiameter_type > MajorDiameter_;
    };

    class ToroidalSegmentFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::PointType Location_type;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_type&
      Location () const;

      Location_type&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // AxisVector
      //
      typedef ::xsd::qif2::UnitVectorType AxisVector_type;
      typedef ::xsd::cxx::tree::traits< AxisVector_type, char > AxisVector_traits;

      const AxisVector_type&
      AxisVector () const;

      AxisVector_type&
      AxisVector ();

      void
      AxisVector (const AxisVector_type& x);

      void
      AxisVector (::std::auto_ptr< AxisVector_type > p);

      // LatitudeLongitudeSweep
      //
      typedef ::xsd::qif2::LatitudeLongitudeSweepType LatitudeLongitudeSweep_type;
      typedef ::xsd::cxx::tree::traits< LatitudeLongitudeSweep_type, char > LatitudeLongitudeSweep_traits;

      const LatitudeLongitudeSweep_type&
      LatitudeLongitudeSweep () const;

      LatitudeLongitudeSweep_type&
      LatitudeLongitudeSweep ();

      void
      LatitudeLongitudeSweep (const LatitudeLongitudeSweep_type& x);

      void
      LatitudeLongitudeSweep (::std::auto_ptr< LatitudeLongitudeSweep_type > p);

      // Constructors.
      //
      ToroidalSegmentFeatureNominalType (const id_type&,
                                         const FeatureDefinitionId_type&,
                                         const Location_type&,
                                         const AxisVector_type&,
                                         const LatitudeLongitudeSweep_type&);

      ToroidalSegmentFeatureNominalType (const id_type&,
                                         const FeatureDefinitionId_type&,
                                         ::std::auto_ptr< Location_type >,
                                         ::std::auto_ptr< AxisVector_type >,
                                         ::std::auto_ptr< LatitudeLongitudeSweep_type >);

      ToroidalSegmentFeatureNominalType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      ToroidalSegmentFeatureNominalType (const ToroidalSegmentFeatureNominalType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual ToroidalSegmentFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ToroidalSegmentFeatureNominalType&
      operator= (const ToroidalSegmentFeatureNominalType& x);

      virtual 
      ~ToroidalSegmentFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Location_type > Location_;
      ::xsd::cxx::tree::one< AxisVector_type > AxisVector_;
      ::xsd::cxx::tree::one< LatitudeLongitudeSweep_type > LatitudeLongitudeSweep_;
    };

    class ToroidalSegmentFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::ActualPointType Location_type;
      typedef ::xsd::cxx::tree::optional< Location_type > Location_optional;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_optional&
      Location () const;

      Location_optional&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (const Location_optional& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // AxisVector
      //
      typedef ::xsd::qif2::ActualUnitVectorType AxisVector_type;
      typedef ::xsd::cxx::tree::optional< AxisVector_type > AxisVector_optional;
      typedef ::xsd::cxx::tree::traits< AxisVector_type, char > AxisVector_traits;

      const AxisVector_optional&
      AxisVector () const;

      AxisVector_optional&
      AxisVector ();

      void
      AxisVector (const AxisVector_type& x);

      void
      AxisVector (const AxisVector_optional& x);

      void
      AxisVector (::std::auto_ptr< AxisVector_type > p);

      // MinorDiameter
      //
      typedef ::xsd::qif2::ActualLinearValueType MinorDiameter_type;
      typedef ::xsd::cxx::tree::optional< MinorDiameter_type > MinorDiameter_optional;
      typedef ::xsd::cxx::tree::traits< MinorDiameter_type, char > MinorDiameter_traits;

      const MinorDiameter_optional&
      MinorDiameter () const;

      MinorDiameter_optional&
      MinorDiameter ();

      void
      MinorDiameter (const MinorDiameter_type& x);

      void
      MinorDiameter (const MinorDiameter_optional& x);

      void
      MinorDiameter (::std::auto_ptr< MinorDiameter_type > p);

      // MajorDiameter
      //
      typedef ::xsd::qif2::ActualLinearValueType MajorDiameter_type;
      typedef ::xsd::cxx::tree::optional< MajorDiameter_type > MajorDiameter_optional;
      typedef ::xsd::cxx::tree::traits< MajorDiameter_type, char > MajorDiameter_traits;

      const MajorDiameter_optional&
      MajorDiameter () const;

      MajorDiameter_optional&
      MajorDiameter ();

      void
      MajorDiameter (const MajorDiameter_type& x);

      void
      MajorDiameter (const MajorDiameter_optional& x);

      void
      MajorDiameter (::std::auto_ptr< MajorDiameter_type > p);

      // LatitudeLongitudeSweep
      //
      typedef ::xsd::qif2::LatitudeLongitudeSweepType LatitudeLongitudeSweep_type;
      typedef ::xsd::cxx::tree::optional< LatitudeLongitudeSweep_type > LatitudeLongitudeSweep_optional;
      typedef ::xsd::cxx::tree::traits< LatitudeLongitudeSweep_type, char > LatitudeLongitudeSweep_traits;

      const LatitudeLongitudeSweep_optional&
      LatitudeLongitudeSweep () const;

      LatitudeLongitudeSweep_optional&
      LatitudeLongitudeSweep ();

      void
      LatitudeLongitudeSweep (const LatitudeLongitudeSweep_type& x);

      void
      LatitudeLongitudeSweep (const LatitudeLongitudeSweep_optional& x);

      void
      LatitudeLongitudeSweep (::std::auto_ptr< LatitudeLongitudeSweep_type > p);

      // Form
      //
      typedef ::xsd::qif2::ActualLinearValueType Form_type;
      typedef ::xsd::cxx::tree::optional< Form_type > Form_optional;
      typedef ::xsd::cxx::tree::traits< Form_type, char > Form_traits;

      const Form_optional&
      Form () const;

      Form_optional&
      Form ();

      void
      Form (const Form_type& x);

      void
      Form (const Form_optional& x);

      void
      Form (::std::auto_ptr< Form_type > p);

      // Constructors.
      //
      ToroidalSegmentFeatureActualType (const id_type&,
                                        const FeatureItemId_type&);

      ToroidalSegmentFeatureActualType (const id_type&,
                                        ::std::auto_ptr< FeatureItemId_type >);

      ToroidalSegmentFeatureActualType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      ToroidalSegmentFeatureActualType (const ToroidalSegmentFeatureActualType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual ToroidalSegmentFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ToroidalSegmentFeatureActualType&
      operator= (const ToroidalSegmentFeatureActualType& x);

      virtual 
      ~ToroidalSegmentFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Location_optional Location_;
      AxisVector_optional AxisVector_;
      MinorDiameter_optional MinorDiameter_;
      MajorDiameter_optional MajorDiameter_;
      LatitudeLongitudeSweep_optional LatitudeLongitudeSweep_;
      Form_optional Form_;
    };

    class TorusConstructionMethodType: public ::xml_schema::type
    {
      public:
      // BestFit
      //
      typedef ::xsd::qif2::TorusBestFitType BestFit_type;
      typedef ::xsd::cxx::tree::optional< BestFit_type > BestFit_optional;
      typedef ::xsd::cxx::tree::traits< BestFit_type, char > BestFit_traits;

      const BestFit_optional&
      BestFit () const;

      BestFit_optional&
      BestFit ();

      void
      BestFit (const BestFit_type& x);

      void
      BestFit (const BestFit_optional& x);

      void
      BestFit (::std::auto_ptr< BestFit_type > p);

      // Recompensated
      //
      typedef ::xsd::qif2::TorusRecompType Recompensated_type;
      typedef ::xsd::cxx::tree::optional< Recompensated_type > Recompensated_optional;
      typedef ::xsd::cxx::tree::traits< Recompensated_type, char > Recompensated_traits;

      const Recompensated_optional&
      Recompensated () const;

      Recompensated_optional&
      Recompensated ();

      void
      Recompensated (const Recompensated_type& x);

      void
      Recompensated (const Recompensated_optional& x);

      void
      Recompensated (::std::auto_ptr< Recompensated_type > p);

      // Copy
      //
      typedef ::xsd::qif2::TorusCopyType Copy_type;
      typedef ::xsd::cxx::tree::optional< Copy_type > Copy_optional;
      typedef ::xsd::cxx::tree::traits< Copy_type, char > Copy_traits;

      const Copy_optional&
      Copy () const;

      Copy_optional&
      Copy ();

      void
      Copy (const Copy_type& x);

      void
      Copy (const Copy_optional& x);

      void
      Copy (::std::auto_ptr< Copy_type > p);

      // Cast
      //
      typedef ::xsd::qif2::TorusCastType Cast_type;
      typedef ::xsd::cxx::tree::optional< Cast_type > Cast_optional;
      typedef ::xsd::cxx::tree::traits< Cast_type, char > Cast_traits;

      const Cast_optional&
      Cast () const;

      Cast_optional&
      Cast ();

      void
      Cast (const Cast_type& x);

      void
      Cast (const Cast_optional& x);

      void
      Cast (::std::auto_ptr< Cast_type > p);

      // Transform
      //
      typedef ::xsd::qif2::TorusTransformType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // FromScan
      //
      typedef ::xsd::qif2::TorusFromScanType FromScan_type;
      typedef ::xsd::cxx::tree::optional< FromScan_type > FromScan_optional;
      typedef ::xsd::cxx::tree::traits< FromScan_type, char > FromScan_traits;

      const FromScan_optional&
      FromScan () const;

      FromScan_optional&
      FromScan ();

      void
      FromScan (const FromScan_type& x);

      void
      FromScan (const FromScan_optional& x);

      void
      FromScan (::std::auto_ptr< FromScan_type > p);

      // Constructors.
      //
      TorusConstructionMethodType ();

      TorusConstructionMethodType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      TorusConstructionMethodType (const TorusConstructionMethodType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual TorusConstructionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TorusConstructionMethodType&
      operator= (const TorusConstructionMethodType& x);

      virtual 
      ~TorusConstructionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BestFit_optional BestFit_;
      Recompensated_optional Recompensated_;
      Copy_optional Copy_;
      Cast_optional Cast_;
      Transform_optional Transform_;
      FromScan_optional FromScan_;
    };

    class TorusBestFitType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::SequencedBaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::sequence< BaseFeature_type > BaseFeature_sequence;
      typedef BaseFeature_sequence::iterator BaseFeature_iterator;
      typedef BaseFeature_sequence::const_iterator BaseFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_sequence&
      BaseFeature () const;

      BaseFeature_sequence&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_sequence& s);

      // Constructors.
      //
      TorusBestFitType ();

      TorusBestFitType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      TorusBestFitType (const TorusBestFitType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual TorusBestFitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TorusBestFitType&
      operator= (const TorusBestFitType& x);

      virtual 
      ~TorusBestFitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BaseFeature_sequence BaseFeature_;
    };

    class TorusRecompType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeaturePointList
      //
      typedef ::xsd::qif2::BaseFeaturePointListType BaseFeaturePointList_type;
      typedef ::xsd::cxx::tree::traits< BaseFeaturePointList_type, char > BaseFeaturePointList_traits;

      const BaseFeaturePointList_type&
      BaseFeaturePointList () const;

      BaseFeaturePointList_type&
      BaseFeaturePointList ();

      void
      BaseFeaturePointList (const BaseFeaturePointList_type& x);

      void
      BaseFeaturePointList (::std::auto_ptr< BaseFeaturePointList_type > p);

      // Constructors.
      //
      TorusRecompType (const BaseFeaturePointList_type&);

      TorusRecompType (::std::auto_ptr< BaseFeaturePointList_type >);

      TorusRecompType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      TorusRecompType (const TorusRecompType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual TorusRecompType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TorusRecompType&
      operator= (const TorusRecompType& x);

      virtual 
      ~TorusRecompType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeaturePointList_type > BaseFeaturePointList_;
    };

    class TorusCopyType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseTorus
      //
      typedef ::xsd::qif2::BaseFeatureType BaseTorus_type;
      typedef ::xsd::cxx::tree::traits< BaseTorus_type, char > BaseTorus_traits;

      const BaseTorus_type&
      BaseTorus () const;

      BaseTorus_type&
      BaseTorus ();

      void
      BaseTorus (const BaseTorus_type& x);

      void
      BaseTorus (::std::auto_ptr< BaseTorus_type > p);

      // Constructors.
      //
      TorusCopyType (const BaseTorus_type&);

      TorusCopyType (::std::auto_ptr< BaseTorus_type >);

      TorusCopyType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      TorusCopyType (const TorusCopyType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual TorusCopyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TorusCopyType&
      operator= (const TorusCopyType& x);

      virtual 
      ~TorusCopyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseTorus_type > BaseTorus_;
    };

    class TorusCastType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseFeature
      //
      typedef ::xsd::qif2::BaseFeatureType BaseFeature_type;
      typedef ::xsd::cxx::tree::traits< BaseFeature_type, char > BaseFeature_traits;

      const BaseFeature_type&
      BaseFeature () const;

      BaseFeature_type&
      BaseFeature ();

      void
      BaseFeature (const BaseFeature_type& x);

      void
      BaseFeature (::std::auto_ptr< BaseFeature_type > p);

      // Constructors.
      //
      TorusCastType (const BaseFeature_type&);

      TorusCastType (::std::auto_ptr< BaseFeature_type >);

      TorusCastType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      TorusCastType (const TorusCastType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual TorusCastType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TorusCastType&
      operator= (const TorusCastType& x);

      virtual 
      ~TorusCastType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseFeature_type > BaseFeature_;
    };

    class TorusTransformType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // BaseTorus
      //
      typedef ::xsd::qif2::BaseFeatureType BaseTorus_type;
      typedef ::xsd::cxx::tree::traits< BaseTorus_type, char > BaseTorus_traits;

      const BaseTorus_type&
      BaseTorus () const;

      BaseTorus_type&
      BaseTorus ();

      void
      BaseTorus (const BaseTorus_type& x);

      void
      BaseTorus (::std::auto_ptr< BaseTorus_type > p);

      // Transformation
      //
      typedef ::xsd::qif2::TransformationReferenceType Transformation_type;
      typedef ::xsd::cxx::tree::traits< Transformation_type, char > Transformation_traits;

      const Transformation_type&
      Transformation () const;

      Transformation_type&
      Transformation ();

      void
      Transformation (const Transformation_type& x);

      void
      Transformation (::std::auto_ptr< Transformation_type > p);

      // Constructors.
      //
      TorusTransformType (const BaseTorus_type&,
                          const Transformation_type&);

      TorusTransformType (::std::auto_ptr< BaseTorus_type >,
                          ::std::auto_ptr< Transformation_type >);

      TorusTransformType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      TorusTransformType (const TorusTransformType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual TorusTransformType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TorusTransformType&
      operator= (const TorusTransformType& x);

      virtual 
      ~TorusTransformType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaseTorus_type > BaseTorus_;
      ::xsd::cxx::tree::one< Transformation_type > Transformation_;
    };

    class TorusFromScanType: public ::xsd::qif2::ConstructionMethodBaseType
    {
      public:
      // SurfaceFeature
      //
      typedef ::xsd::qif2::BaseFeatureType SurfaceFeature_type;
      typedef ::xsd::cxx::tree::traits< SurfaceFeature_type, char > SurfaceFeature_traits;

      const SurfaceFeature_type&
      SurfaceFeature () const;

      SurfaceFeature_type&
      SurfaceFeature ();

      void
      SurfaceFeature (const SurfaceFeature_type& x);

      void
      SurfaceFeature (::std::auto_ptr< SurfaceFeature_type > p);

      // SearchRadius
      //
      typedef ::xsd::qif2::LinearValueType SearchRadius_type;
      typedef ::xsd::cxx::tree::traits< SearchRadius_type, char > SearchRadius_traits;

      const SearchRadius_type&
      SearchRadius () const;

      SearchRadius_type&
      SearchRadius ();

      void
      SearchRadius (const SearchRadius_type& x);

      void
      SearchRadius (::std::auto_ptr< SearchRadius_type > p);

      // Constructors.
      //
      TorusFromScanType (const SurfaceFeature_type&,
                         const SearchRadius_type&);

      TorusFromScanType (::std::auto_ptr< SurfaceFeature_type >,
                         ::std::auto_ptr< SearchRadius_type >);

      TorusFromScanType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      TorusFromScanType (const TorusFromScanType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual TorusFromScanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TorusFromScanType&
      operator= (const TorusFromScanType& x);

      virtual 
      ~TorusFromScanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SurfaceFeature_type > SurfaceFeature_;
      ::xsd::cxx::tree::one< SearchRadius_type > SearchRadius_;
    };

    class TorusCheckedType: public ::xml_schema::type
    {
      public:
      // Measured
      //
      typedef ::xsd::qif2::MeasuredFeatureType Measured_type;
      typedef ::xsd::cxx::tree::optional< Measured_type > Measured_optional;
      typedef ::xsd::cxx::tree::traits< Measured_type, char > Measured_traits;

      const Measured_optional&
      Measured () const;

      Measured_optional&
      Measured ();

      void
      Measured (const Measured_type& x);

      void
      Measured (const Measured_optional& x);

      void
      Measured (::std::auto_ptr< Measured_type > p);

      // Constructed
      //
      typedef ::xsd::qif2::TorusConstructionMethodType Constructed_type;
      typedef ::xsd::cxx::tree::optional< Constructed_type > Constructed_optional;
      typedef ::xsd::cxx::tree::traits< Constructed_type, char > Constructed_traits;

      const Constructed_optional&
      Constructed () const;

      Constructed_optional&
      Constructed ();

      void
      Constructed (const Constructed_type& x);

      void
      Constructed (const Constructed_optional& x);

      void
      Constructed (::std::auto_ptr< Constructed_type > p);

      // Constructors.
      //
      TorusCheckedType ();

      TorusCheckedType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      TorusCheckedType (const TorusCheckedType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual TorusCheckedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TorusCheckedType&
      operator= (const TorusCheckedType& x);

      virtual 
      ~TorusCheckedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measured_optional Measured_;
      Constructed_optional Constructed_;
    };

    class TorusCheckedFeatureType: public ::xml_schema::type
    {
      public:
      // CheckDetails
      //
      typedef ::xsd::qif2::TorusCheckedType CheckDetails_type;
      typedef ::xsd::cxx::tree::optional< CheckDetails_type > CheckDetails_optional;
      typedef ::xsd::cxx::tree::traits< CheckDetails_type, char > CheckDetails_traits;

      const CheckDetails_optional&
      CheckDetails () const;

      CheckDetails_optional&
      CheckDetails ();

      void
      CheckDetails (const CheckDetails_type& x);

      void
      CheckDetails (const CheckDetails_optional& x);

      void
      CheckDetails (::std::auto_ptr< CheckDetails_type > p);

      // Constructors.
      //
      TorusCheckedFeatureType ();

      TorusCheckedFeatureType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      TorusCheckedFeatureType (const TorusCheckedFeatureType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual TorusCheckedFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TorusCheckedFeatureType&
      operator= (const TorusCheckedFeatureType& x);

      virtual 
      ~TorusCheckedFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CheckDetails_optional CheckDetails_;
    };

    class TorusActualDeterminationType: public ::xml_schema::type
    {
      public:
      // Checked
      //
      typedef ::xsd::qif2::TorusCheckedFeatureType Checked_type;
      typedef ::xsd::cxx::tree::optional< Checked_type > Checked_optional;
      typedef ::xsd::cxx::tree::traits< Checked_type, char > Checked_traits;

      const Checked_optional&
      Checked () const;

      Checked_optional&
      Checked ();

      void
      Checked (const Checked_type& x);

      void
      Checked (const Checked_optional& x);

      void
      Checked (::std::auto_ptr< Checked_type > p);

      // Set
      //
      typedef ::xsd::qif2::SetFeatureType Set_type;
      typedef ::xsd::cxx::tree::optional< Set_type > Set_optional;
      typedef ::xsd::cxx::tree::traits< Set_type, char > Set_traits;

      const Set_optional&
      Set () const;

      Set_optional&
      Set ();

      void
      Set (const Set_type& x);

      void
      Set (const Set_optional& x);

      void
      Set (::std::auto_ptr< Set_type > p);

      // Constructors.
      //
      TorusActualDeterminationType ();

      TorusActualDeterminationType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      TorusActualDeterminationType (const TorusActualDeterminationType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual TorusActualDeterminationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TorusActualDeterminationType&
      operator= (const TorusActualDeterminationType& x);

      virtual 
      ~TorusActualDeterminationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Checked_optional Checked_;
      Set_optional Set_;
    };

    class TorusFeatureItemType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // DeterminationMode
      //
      typedef ::xsd::qif2::TorusActualDeterminationType DeterminationMode_type;
      typedef ::xsd::cxx::tree::traits< DeterminationMode_type, char > DeterminationMode_traits;

      const DeterminationMode_type&
      DeterminationMode () const;

      DeterminationMode_type&
      DeterminationMode ();

      void
      DeterminationMode (const DeterminationMode_type& x);

      void
      DeterminationMode (::std::auto_ptr< DeterminationMode_type > p);

      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::FeatureOfSizeSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      TorusFeatureItemType (const id_type&,
                            const FeatureName_type&,
                            const DeterminationMode_type&);

      TorusFeatureItemType (const id_type&,
                            const FeatureName_type&,
                            ::std::auto_ptr< DeterminationMode_type >);

      TorusFeatureItemType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      TorusFeatureItemType (const TorusFeatureItemType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual TorusFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TorusFeatureItemType&
      operator= (const TorusFeatureItemType& x);

      virtual 
      ~TorusFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DeterminationMode_type > DeterminationMode_;
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class TorusFeatureDefinitionType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // InternalExternal
      //
      typedef ::xsd::qif2::InternalExternalEnumType InternalExternal_type;
      typedef ::xsd::cxx::tree::traits< InternalExternal_type, char > InternalExternal_traits;

      const InternalExternal_type&
      InternalExternal () const;

      InternalExternal_type&
      InternalExternal ();

      void
      InternalExternal (const InternalExternal_type& x);

      void
      InternalExternal (::std::auto_ptr< InternalExternal_type > p);

      // MinorDiameter
      //
      typedef ::xsd::qif2::LinearValueType MinorDiameter_type;
      typedef ::xsd::cxx::tree::traits< MinorDiameter_type, char > MinorDiameter_traits;

      const MinorDiameter_type&
      MinorDiameter () const;

      MinorDiameter_type&
      MinorDiameter ();

      void
      MinorDiameter (const MinorDiameter_type& x);

      void
      MinorDiameter (::std::auto_ptr< MinorDiameter_type > p);

      // MajorDiameter
      //
      typedef ::xsd::qif2::LinearValueType MajorDiameter_type;
      typedef ::xsd::cxx::tree::traits< MajorDiameter_type, char > MajorDiameter_traits;

      const MajorDiameter_type&
      MajorDiameter () const;

      MajorDiameter_type&
      MajorDiameter ();

      void
      MajorDiameter (const MajorDiameter_type& x);

      void
      MajorDiameter (::std::auto_ptr< MajorDiameter_type > p);

      // Constructors.
      //
      TorusFeatureDefinitionType (const id_type&,
                                  const InternalExternal_type&,
                                  const MinorDiameter_type&,
                                  const MajorDiameter_type&);

      TorusFeatureDefinitionType (const id_type&,
                                  const InternalExternal_type&,
                                  ::std::auto_ptr< MinorDiameter_type >,
                                  ::std::auto_ptr< MajorDiameter_type >);

      TorusFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      TorusFeatureDefinitionType (const TorusFeatureDefinitionType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual TorusFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TorusFeatureDefinitionType&
      operator= (const TorusFeatureDefinitionType& x);

      virtual 
      ~TorusFeatureDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< InternalExternal_type > InternalExternal_;
      ::xsd::cxx::tree::one< MinorDiameter_type > MinorDiameter_;
      ::xsd::cxx::tree::one< MajorDiameter_type > MajorDiameter_;
    };

    class TorusFeatureNominalType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::PointType Location_type;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_type&
      Location () const;

      Location_type&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // AxisVector
      //
      typedef ::xsd::qif2::UnitVectorType AxisVector_type;
      typedef ::xsd::cxx::tree::traits< AxisVector_type, char > AxisVector_traits;

      const AxisVector_type&
      AxisVector () const;

      AxisVector_type&
      AxisVector ();

      void
      AxisVector (const AxisVector_type& x);

      void
      AxisVector (::std::auto_ptr< AxisVector_type > p);

      // LatitudeLongitudeSweep
      //
      typedef ::xsd::qif2::LatitudeLongitudeSweepType LatitudeLongitudeSweep_type;
      typedef ::xsd::cxx::tree::optional< LatitudeLongitudeSweep_type > LatitudeLongitudeSweep_optional;
      typedef ::xsd::cxx::tree::traits< LatitudeLongitudeSweep_type, char > LatitudeLongitudeSweep_traits;

      const LatitudeLongitudeSweep_optional&
      LatitudeLongitudeSweep () const;

      LatitudeLongitudeSweep_optional&
      LatitudeLongitudeSweep ();

      void
      LatitudeLongitudeSweep (const LatitudeLongitudeSweep_type& x);

      void
      LatitudeLongitudeSweep (const LatitudeLongitudeSweep_optional& x);

      void
      LatitudeLongitudeSweep (::std::auto_ptr< LatitudeLongitudeSweep_type > p);

      // Constructors.
      //
      TorusFeatureNominalType (const id_type&,
                               const FeatureDefinitionId_type&,
                               const Location_type&,
                               const AxisVector_type&);

      TorusFeatureNominalType (const id_type&,
                               const FeatureDefinitionId_type&,
                               ::std::auto_ptr< Location_type >,
                               ::std::auto_ptr< AxisVector_type >);

      TorusFeatureNominalType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      TorusFeatureNominalType (const TorusFeatureNominalType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual TorusFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TorusFeatureNominalType&
      operator= (const TorusFeatureNominalType& x);

      virtual 
      ~TorusFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Location_type > Location_;
      ::xsd::cxx::tree::one< AxisVector_type > AxisVector_;
      LatitudeLongitudeSweep_optional LatitudeLongitudeSweep_;
    };

    class TorusFeatureActualType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::ActualPointType Location_type;
      typedef ::xsd::cxx::tree::optional< Location_type > Location_optional;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_optional&
      Location () const;

      Location_optional&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (const Location_optional& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // AxisVector
      //
      typedef ::xsd::qif2::ActualUnitVectorType AxisVector_type;
      typedef ::xsd::cxx::tree::optional< AxisVector_type > AxisVector_optional;
      typedef ::xsd::cxx::tree::traits< AxisVector_type, char > AxisVector_traits;

      const AxisVector_optional&
      AxisVector () const;

      AxisVector_optional&
      AxisVector ();

      void
      AxisVector (const AxisVector_type& x);

      void
      AxisVector (const AxisVector_optional& x);

      void
      AxisVector (::std::auto_ptr< AxisVector_type > p);

      // MinorDiameter
      //
      typedef ::xsd::qif2::ActualLinearValueType MinorDiameter_type;
      typedef ::xsd::cxx::tree::optional< MinorDiameter_type > MinorDiameter_optional;
      typedef ::xsd::cxx::tree::traits< MinorDiameter_type, char > MinorDiameter_traits;

      const MinorDiameter_optional&
      MinorDiameter () const;

      MinorDiameter_optional&
      MinorDiameter ();

      void
      MinorDiameter (const MinorDiameter_type& x);

      void
      MinorDiameter (const MinorDiameter_optional& x);

      void
      MinorDiameter (::std::auto_ptr< MinorDiameter_type > p);

      // MajorDiameter
      //
      typedef ::xsd::qif2::ActualLinearValueType MajorDiameter_type;
      typedef ::xsd::cxx::tree::optional< MajorDiameter_type > MajorDiameter_optional;
      typedef ::xsd::cxx::tree::traits< MajorDiameter_type, char > MajorDiameter_traits;

      const MajorDiameter_optional&
      MajorDiameter () const;

      MajorDiameter_optional&
      MajorDiameter ();

      void
      MajorDiameter (const MajorDiameter_type& x);

      void
      MajorDiameter (const MajorDiameter_optional& x);

      void
      MajorDiameter (::std::auto_ptr< MajorDiameter_type > p);

      // LatitudeLongitudeSweep
      //
      typedef ::xsd::qif2::LatitudeLongitudeSweepType LatitudeLongitudeSweep_type;
      typedef ::xsd::cxx::tree::optional< LatitudeLongitudeSweep_type > LatitudeLongitudeSweep_optional;
      typedef ::xsd::cxx::tree::traits< LatitudeLongitudeSweep_type, char > LatitudeLongitudeSweep_traits;

      const LatitudeLongitudeSweep_optional&
      LatitudeLongitudeSweep () const;

      LatitudeLongitudeSweep_optional&
      LatitudeLongitudeSweep ();

      void
      LatitudeLongitudeSweep (const LatitudeLongitudeSweep_type& x);

      void
      LatitudeLongitudeSweep (const LatitudeLongitudeSweep_optional& x);

      void
      LatitudeLongitudeSweep (::std::auto_ptr< LatitudeLongitudeSweep_type > p);

      // Form
      //
      typedef ::xsd::qif2::ActualLinearValueType Form_type;
      typedef ::xsd::cxx::tree::optional< Form_type > Form_optional;
      typedef ::xsd::cxx::tree::traits< Form_type, char > Form_traits;

      const Form_optional&
      Form () const;

      Form_optional&
      Form ();

      void
      Form (const Form_type& x);

      void
      Form (const Form_optional& x);

      void
      Form (::std::auto_ptr< Form_type > p);

      // Constructors.
      //
      TorusFeatureActualType (const id_type&,
                              const FeatureItemId_type&);

      TorusFeatureActualType (const id_type&,
                              ::std::auto_ptr< FeatureItemId_type >);

      TorusFeatureActualType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      TorusFeatureActualType (const TorusFeatureActualType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual TorusFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TorusFeatureActualType&
      operator= (const TorusFeatureActualType& x);

      virtual 
      ~TorusFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Location_optional Location_;
      AxisVector_optional AxisVector_;
      MinorDiameter_optional MinorDiameter_;
      MajorDiameter_optional MajorDiameter_;
      LatitudeLongitudeSweep_optional LatitudeLongitudeSweep_;
      Form_optional Form_;
    };

    class CompositeFeatureItemBaseType: public ::xsd::qif2::FeatureItemBaseType
    {
      public:
      // Constructors.
      //
      CompositeFeatureItemBaseType (const id_type&,
                                    const FeatureName_type&);

      CompositeFeatureItemBaseType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      CompositeFeatureItemBaseType (const CompositeFeatureItemBaseType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual CompositeFeatureItemBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CompositeFeatureItemBaseType ();
    };

    class CompositeFeatureDefinitionBaseType: public ::xsd::qif2::FeatureDefinitionBaseType
    {
      public:
      // Constructors.
      //
      CompositeFeatureDefinitionBaseType (const id_type&);

      CompositeFeatureDefinitionBaseType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      CompositeFeatureDefinitionBaseType (const CompositeFeatureDefinitionBaseType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual CompositeFeatureDefinitionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CompositeFeatureDefinitionBaseType ();
    };

    class CompositeFeatureNominalBaseType: public ::xsd::qif2::FeatureNominalBaseType
    {
      public:
      // FeatureNominalIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType FeatureNominalIds_type;
      typedef ::xsd::cxx::tree::traits< FeatureNominalIds_type, char > FeatureNominalIds_traits;

      const FeatureNominalIds_type&
      FeatureNominalIds () const;

      FeatureNominalIds_type&
      FeatureNominalIds ();

      void
      FeatureNominalIds (const FeatureNominalIds_type& x);

      void
      FeatureNominalIds (::std::auto_ptr< FeatureNominalIds_type > p);

      // Constructors.
      //
      CompositeFeatureNominalBaseType (const id_type&,
                                       const FeatureDefinitionId_type&,
                                       const FeatureNominalIds_type&);

      CompositeFeatureNominalBaseType (const id_type&,
                                       const FeatureDefinitionId_type&,
                                       ::std::auto_ptr< FeatureNominalIds_type >);

      CompositeFeatureNominalBaseType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      CompositeFeatureNominalBaseType (const CompositeFeatureNominalBaseType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual CompositeFeatureNominalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CompositeFeatureNominalBaseType&
      operator= (const CompositeFeatureNominalBaseType& x);

      virtual 
      ~CompositeFeatureNominalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< FeatureNominalIds_type > FeatureNominalIds_;
    };

    class CompositeFeatureActualBaseType: public ::xsd::qif2::FeatureActualBaseType
    {
      public:
      // Constructors.
      //
      CompositeFeatureActualBaseType (const id_type&,
                                      const FeatureItemId_type&);

      CompositeFeatureActualBaseType (const id_type&,
                                      ::std::auto_ptr< FeatureItemId_type >);

      CompositeFeatureActualBaseType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      CompositeFeatureActualBaseType (const CompositeFeatureActualBaseType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual CompositeFeatureActualBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CompositeFeatureActualBaseType ();
    };

    class CompoundFeatureItemType: public ::xsd::qif2::CompositeFeatureItemBaseType
    {
      public:
      // SubstituteFeatureAlgorithm
      //
      typedef ::xsd::qif2::FeatureOfSizeSubstituteFeatureAlgorithmType SubstituteFeatureAlgorithm_type;
      typedef ::xsd::cxx::tree::optional< SubstituteFeatureAlgorithm_type > SubstituteFeatureAlgorithm_optional;
      typedef ::xsd::cxx::tree::traits< SubstituteFeatureAlgorithm_type, char > SubstituteFeatureAlgorithm_traits;

      const SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm () const;

      SubstituteFeatureAlgorithm_optional&
      SubstituteFeatureAlgorithm ();

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x);

      void
      SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x);

      void
      SubstituteFeatureAlgorithm (::std::auto_ptr< SubstituteFeatureAlgorithm_type > p);

      // Constructors.
      //
      CompoundFeatureItemType (const id_type&,
                               const FeatureName_type&);

      CompoundFeatureItemType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      CompoundFeatureItemType (const CompoundFeatureItemType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual CompoundFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CompoundFeatureItemType&
      operator= (const CompoundFeatureItemType& x);

      virtual 
      ~CompoundFeatureItemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      SubstituteFeatureAlgorithm_optional SubstituteFeatureAlgorithm_;
    };

    class CompoundFeatureDefinitionType: public ::xsd::qif2::CompositeFeatureDefinitionBaseType
    {
      public:
      // Constructors.
      //
      CompoundFeatureDefinitionType (const id_type&);

      CompoundFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      CompoundFeatureDefinitionType (const CompoundFeatureDefinitionType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual CompoundFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CompoundFeatureDefinitionType ();
    };

    class CompoundFeatureNominalType: public ::xsd::qif2::CompositeFeatureNominalBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::PointType Location_type;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_type&
      Location () const;

      Location_type&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // Direction
      //
      typedef ::xsd::qif2::UnitVectorType Direction_type;
      typedef ::xsd::cxx::tree::traits< Direction_type, char > Direction_traits;

      const Direction_type&
      Direction () const;

      Direction_type&
      Direction ();

      void
      Direction (const Direction_type& x);

      void
      Direction (::std::auto_ptr< Direction_type > p);

      // CompoundFeatureForm
      //
      typedef ::xsd::qif2::CompoundFeatureGeometryEnumType CompoundFeatureForm_type;
      typedef ::xsd::cxx::tree::traits< CompoundFeatureForm_type, char > CompoundFeatureForm_traits;

      const CompoundFeatureForm_type&
      CompoundFeatureForm () const;

      CompoundFeatureForm_type&
      CompoundFeatureForm ();

      void
      CompoundFeatureForm (const CompoundFeatureForm_type& x);

      void
      CompoundFeatureForm (::std::auto_ptr< CompoundFeatureForm_type > p);

      // Constructors.
      //
      CompoundFeatureNominalType (const id_type&,
                                  const FeatureDefinitionId_type&,
                                  const FeatureNominalIds_type&,
                                  const Location_type&,
                                  const Direction_type&,
                                  const CompoundFeatureForm_type&);

      CompoundFeatureNominalType (const id_type&,
                                  const FeatureDefinitionId_type&,
                                  ::std::auto_ptr< FeatureNominalIds_type >,
                                  ::std::auto_ptr< Location_type >,
                                  ::std::auto_ptr< Direction_type >,
                                  const CompoundFeatureForm_type&);

      CompoundFeatureNominalType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      CompoundFeatureNominalType (const CompoundFeatureNominalType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual CompoundFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CompoundFeatureNominalType&
      operator= (const CompoundFeatureNominalType& x);

      virtual 
      ~CompoundFeatureNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Location_type > Location_;
      ::xsd::cxx::tree::one< Direction_type > Direction_;
      ::xsd::cxx::tree::one< CompoundFeatureForm_type > CompoundFeatureForm_;
    };

    class CompoundFeatureActualType: public ::xsd::qif2::CompositeFeatureActualBaseType
    {
      public:
      // Location
      //
      typedef ::xsd::qif2::ActualPointType Location_type;
      typedef ::xsd::cxx::tree::optional< Location_type > Location_optional;
      typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

      const Location_optional&
      Location () const;

      Location_optional&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (const Location_optional& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // Direction
      //
      typedef ::xsd::qif2::ActualUnitVectorType Direction_type;
      typedef ::xsd::cxx::tree::optional< Direction_type > Direction_optional;
      typedef ::xsd::cxx::tree::traits< Direction_type, char > Direction_traits;

      const Direction_optional&
      Direction () const;

      Direction_optional&
      Direction ();

      void
      Direction (const Direction_type& x);

      void
      Direction (const Direction_optional& x);

      void
      Direction (::std::auto_ptr< Direction_type > p);

      // Constructors.
      //
      CompoundFeatureActualType (const id_type&,
                                 const FeatureItemId_type&);

      CompoundFeatureActualType (const id_type&,
                                 ::std::auto_ptr< FeatureItemId_type >);

      CompoundFeatureActualType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      CompoundFeatureActualType (const CompoundFeatureActualType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual CompoundFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CompoundFeatureActualType&
      operator= (const CompoundFeatureActualType& x);

      virtual 
      ~CompoundFeatureActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Location_optional Location_;
      Direction_optional Direction_;
    };

    class PatternFeatureItemType: public ::xsd::qif2::CompositeFeatureItemBaseType
    {
      public:
      // Constructors.
      //
      PatternFeatureItemType (const id_type&,
                              const FeatureName_type&);

      PatternFeatureItemType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      PatternFeatureItemType (const PatternFeatureItemType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual PatternFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PatternFeatureItemType ();
    };

    class PatternFeatureDefinitionType: public ::xsd::qif2::CompositeFeatureDefinitionBaseType
    {
      public:
      // Constructors.
      //
      PatternFeatureDefinitionType (const id_type&);

      PatternFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      PatternFeatureDefinitionType (const PatternFeatureDefinitionType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual PatternFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PatternFeatureDefinitionType ();
    };

    class PatternFeatureNominalType: public ::xsd::qif2::CompositeFeatureNominalBaseType
    {
      public:
      // Constructors.
      //
      PatternFeatureNominalType (const id_type&,
                                 const FeatureDefinitionId_type&,
                                 const FeatureNominalIds_type&);

      PatternFeatureNominalType (const id_type&,
                                 const FeatureDefinitionId_type&,
                                 ::std::auto_ptr< FeatureNominalIds_type >);

      PatternFeatureNominalType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      PatternFeatureNominalType (const PatternFeatureNominalType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual PatternFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PatternFeatureNominalType ();
    };

    class PatternFeatureActualType: public ::xsd::qif2::CompositeFeatureActualBaseType
    {
      public:
      // Constructors.
      //
      PatternFeatureActualType (const id_type&,
                                const FeatureItemId_type&);

      PatternFeatureActualType (const id_type&,
                                ::std::auto_ptr< FeatureItemId_type >);

      PatternFeatureActualType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      PatternFeatureActualType (const PatternFeatureActualType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual PatternFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PatternFeatureActualType ();
    };

    class ProfileGroupFeatureItemType: public ::xsd::qif2::CompositeFeatureItemBaseType
    {
      public:
      // Constructors.
      //
      ProfileGroupFeatureItemType (const id_type&,
                                   const FeatureName_type&);

      ProfileGroupFeatureItemType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      ProfileGroupFeatureItemType (const ProfileGroupFeatureItemType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual ProfileGroupFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ProfileGroupFeatureItemType ();
    };

    class ProfileGroupFeatureDefinitionType: public ::xsd::qif2::CompositeFeatureDefinitionBaseType
    {
      public:
      // Constructors.
      //
      ProfileGroupFeatureDefinitionType (const id_type&);

      ProfileGroupFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      ProfileGroupFeatureDefinitionType (const ProfileGroupFeatureDefinitionType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual ProfileGroupFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ProfileGroupFeatureDefinitionType ();
    };

    class ProfileGroupFeatureNominalType: public ::xsd::qif2::CompositeFeatureNominalBaseType
    {
      public:
      // Constructors.
      //
      ProfileGroupFeatureNominalType (const id_type&,
                                      const FeatureDefinitionId_type&,
                                      const FeatureNominalIds_type&);

      ProfileGroupFeatureNominalType (const id_type&,
                                      const FeatureDefinitionId_type&,
                                      ::std::auto_ptr< FeatureNominalIds_type >);

      ProfileGroupFeatureNominalType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      ProfileGroupFeatureNominalType (const ProfileGroupFeatureNominalType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual ProfileGroupFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ProfileGroupFeatureNominalType ();
    };

    class ProfileGroupFeatureActualType: public ::xsd::qif2::CompositeFeatureActualBaseType
    {
      public:
      // Constructors.
      //
      ProfileGroupFeatureActualType (const id_type&,
                                     const FeatureItemId_type&);

      ProfileGroupFeatureActualType (const id_type&,
                                     ::std::auto_ptr< FeatureItemId_type >);

      ProfileGroupFeatureActualType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      ProfileGroupFeatureActualType (const ProfileGroupFeatureActualType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual ProfileGroupFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ProfileGroupFeatureActualType ();
    };

    class RunoutGroupFeatureItemType: public ::xsd::qif2::CompositeFeatureItemBaseType
    {
      public:
      // Constructors.
      //
      RunoutGroupFeatureItemType (const id_type&,
                                  const FeatureName_type&);

      RunoutGroupFeatureItemType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      RunoutGroupFeatureItemType (const RunoutGroupFeatureItemType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual RunoutGroupFeatureItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~RunoutGroupFeatureItemType ();
    };

    class RunoutGroupFeatureDefinitionType: public ::xsd::qif2::CompositeFeatureDefinitionBaseType
    {
      public:
      // Constructors.
      //
      RunoutGroupFeatureDefinitionType (const id_type&);

      RunoutGroupFeatureDefinitionType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      RunoutGroupFeatureDefinitionType (const RunoutGroupFeatureDefinitionType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual RunoutGroupFeatureDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~RunoutGroupFeatureDefinitionType ();
    };

    class RunoutGroupFeatureNominalType: public ::xsd::qif2::CompositeFeatureNominalBaseType
    {
      public:
      // Constructors.
      //
      RunoutGroupFeatureNominalType (const id_type&,
                                     const FeatureDefinitionId_type&,
                                     const FeatureNominalIds_type&);

      RunoutGroupFeatureNominalType (const id_type&,
                                     const FeatureDefinitionId_type&,
                                     ::std::auto_ptr< FeatureNominalIds_type >);

      RunoutGroupFeatureNominalType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      RunoutGroupFeatureNominalType (const RunoutGroupFeatureNominalType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual RunoutGroupFeatureNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~RunoutGroupFeatureNominalType ();
    };

    class RunoutGroupFeatureActualType: public ::xsd::qif2::CompositeFeatureActualBaseType
    {
      public:
      // Constructors.
      //
      RunoutGroupFeatureActualType (const id_type&,
                                    const FeatureItemId_type&);

      RunoutGroupFeatureActualType (const id_type&,
                                    ::std::auto_ptr< FeatureItemId_type >);

      RunoutGroupFeatureActualType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      RunoutGroupFeatureActualType (const RunoutGroupFeatureActualType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual RunoutGroupFeatureActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~RunoutGroupFeatureActualType ();
    };

    class FeatureAspectsListsType: public ::xml_schema::type
    {
      public:
      // FeatureDefinitions
      //
      typedef ::xsd::qif2::FeatureDefinitionsType FeatureDefinitions_type;
      typedef ::xsd::cxx::tree::optional< FeatureDefinitions_type > FeatureDefinitions_optional;
      typedef ::xsd::cxx::tree::traits< FeatureDefinitions_type, char > FeatureDefinitions_traits;

      const FeatureDefinitions_optional&
      FeatureDefinitions () const;

      FeatureDefinitions_optional&
      FeatureDefinitions ();

      void
      FeatureDefinitions (const FeatureDefinitions_type& x);

      void
      FeatureDefinitions (const FeatureDefinitions_optional& x);

      void
      FeatureDefinitions (::std::auto_ptr< FeatureDefinitions_type > p);

      // FeatureNominals
      //
      typedef ::xsd::qif2::FeatureNominalsType FeatureNominals_type;
      typedef ::xsd::cxx::tree::optional< FeatureNominals_type > FeatureNominals_optional;
      typedef ::xsd::cxx::tree::traits< FeatureNominals_type, char > FeatureNominals_traits;

      const FeatureNominals_optional&
      FeatureNominals () const;

      FeatureNominals_optional&
      FeatureNominals ();

      void
      FeatureNominals (const FeatureNominals_type& x);

      void
      FeatureNominals (const FeatureNominals_optional& x);

      void
      FeatureNominals (::std::auto_ptr< FeatureNominals_type > p);

      // FeatureItems
      //
      typedef ::xsd::qif2::FeatureItemsType FeatureItems_type;
      typedef ::xsd::cxx::tree::optional< FeatureItems_type > FeatureItems_optional;
      typedef ::xsd::cxx::tree::traits< FeatureItems_type, char > FeatureItems_traits;

      const FeatureItems_optional&
      FeatureItems () const;

      FeatureItems_optional&
      FeatureItems ();

      void
      FeatureItems (const FeatureItems_type& x);

      void
      FeatureItems (const FeatureItems_optional& x);

      void
      FeatureItems (::std::auto_ptr< FeatureItems_type > p);

      // Constructors.
      //
      FeatureAspectsListsType ();

      FeatureAspectsListsType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      FeatureAspectsListsType (const FeatureAspectsListsType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual FeatureAspectsListsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FeatureAspectsListsType&
      operator= (const FeatureAspectsListsType& x);

      virtual 
      ~FeatureAspectsListsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      FeatureDefinitions_optional FeatureDefinitions_;
      FeatureNominals_optional FeatureNominals_;
      FeatureItems_optional FeatureItems_;
    };

    class MeasuredFeaturesType: public ::xml_schema::type
    {
      public:
      // FeatureActuals
      //
      typedef ::xsd::qif2::FeatureActualsType FeatureActuals_type;
      typedef ::xsd::cxx::tree::traits< FeatureActuals_type, char > FeatureActuals_traits;

      const FeatureActuals_type&
      FeatureActuals () const;

      FeatureActuals_type&
      FeatureActuals ();

      void
      FeatureActuals (const FeatureActuals_type& x);

      void
      FeatureActuals (::std::auto_ptr< FeatureActuals_type > p);

      // Constructors.
      //
      MeasuredFeaturesType (const FeatureActuals_type&);

      MeasuredFeaturesType (::std::auto_ptr< FeatureActuals_type >);

      MeasuredFeaturesType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      MeasuredFeaturesType (const MeasuredFeaturesType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual MeasuredFeaturesType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      MeasuredFeaturesType&
      operator= (const MeasuredFeaturesType& x);

      virtual 
      ~MeasuredFeaturesType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< FeatureActuals_type > FeatureActuals_;
    };

    class FeatureDefinitionsType: public ::xml_schema::type
    {
      public:
      // FeatureDefinition
      //
      typedef ::xsd::qif2::FeatureDefinitionBaseType FeatureDefinition_type;
      typedef ::xsd::cxx::tree::sequence< FeatureDefinition_type > FeatureDefinition_sequence;
      typedef FeatureDefinition_sequence::iterator FeatureDefinition_iterator;
      typedef FeatureDefinition_sequence::const_iterator FeatureDefinition_const_iterator;
      typedef ::xsd::cxx::tree::traits< FeatureDefinition_type, char > FeatureDefinition_traits;

      const FeatureDefinition_sequence&
      FeatureDefinition () const;

      FeatureDefinition_sequence&
      FeatureDefinition ();

      void
      FeatureDefinition (const FeatureDefinition_sequence& s);

      // Constructors.
      //
      FeatureDefinitionsType ();

      FeatureDefinitionsType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      FeatureDefinitionsType (const FeatureDefinitionsType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual FeatureDefinitionsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FeatureDefinitionsType&
      operator= (const FeatureDefinitionsType& x);

      virtual 
      ~FeatureDefinitionsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      FeatureDefinition_sequence FeatureDefinition_;
    };

    class FeatureNominalsType: public ::xml_schema::type
    {
      public:
      // FeatureNominal
      //
      typedef ::xsd::qif2::FeatureNominalBaseType FeatureNominal_type;
      typedef ::xsd::cxx::tree::sequence< FeatureNominal_type > FeatureNominal_sequence;
      typedef FeatureNominal_sequence::iterator FeatureNominal_iterator;
      typedef FeatureNominal_sequence::const_iterator FeatureNominal_const_iterator;
      typedef ::xsd::cxx::tree::traits< FeatureNominal_type, char > FeatureNominal_traits;

      const FeatureNominal_sequence&
      FeatureNominal () const;

      FeatureNominal_sequence&
      FeatureNominal ();

      void
      FeatureNominal (const FeatureNominal_sequence& s);

      // Constructors.
      //
      FeatureNominalsType ();

      FeatureNominalsType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      FeatureNominalsType (const FeatureNominalsType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual FeatureNominalsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FeatureNominalsType&
      operator= (const FeatureNominalsType& x);

      virtual 
      ~FeatureNominalsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      FeatureNominal_sequence FeatureNominal_;
    };

    class FeatureItemsType: public ::xml_schema::type
    {
      public:
      // FeatureItem
      //
      typedef ::xsd::qif2::FeatureItemBaseType FeatureItem_type;
      typedef ::xsd::cxx::tree::sequence< FeatureItem_type > FeatureItem_sequence;
      typedef FeatureItem_sequence::iterator FeatureItem_iterator;
      typedef FeatureItem_sequence::const_iterator FeatureItem_const_iterator;
      typedef ::xsd::cxx::tree::traits< FeatureItem_type, char > FeatureItem_traits;

      const FeatureItem_sequence&
      FeatureItem () const;

      FeatureItem_sequence&
      FeatureItem ();

      void
      FeatureItem (const FeatureItem_sequence& s);

      // Constructors.
      //
      FeatureItemsType ();

      FeatureItemsType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      FeatureItemsType (const FeatureItemsType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual FeatureItemsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FeatureItemsType&
      operator= (const FeatureItemsType& x);

      virtual 
      ~FeatureItemsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      FeatureItem_sequence FeatureItem_;
    };

    class FeatureActualsType: public ::xml_schema::type
    {
      public:
      // FeatureActual
      //
      typedef ::xsd::qif2::FeatureActualBaseType FeatureActual_type;
      typedef ::xsd::cxx::tree::sequence< FeatureActual_type > FeatureActual_sequence;
      typedef FeatureActual_sequence::iterator FeatureActual_iterator;
      typedef FeatureActual_sequence::const_iterator FeatureActual_const_iterator;
      typedef ::xsd::cxx::tree::traits< FeatureActual_type, char > FeatureActual_traits;

      const FeatureActual_sequence&
      FeatureActual () const;

      FeatureActual_sequence&
      FeatureActual ();

      void
      FeatureActual (const FeatureActual_sequence& s);

      // Constructors.
      //
      FeatureActualsType ();

      FeatureActualsType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      FeatureActualsType (const FeatureActualsType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual FeatureActualsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FeatureActualsType&
      operator= (const FeatureActualsType& x);

      virtual 
      ~FeatureActualsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      FeatureActual_sequence FeatureActual_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xsd
{
  namespace qif2
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureAspectsListsType >
    Features (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureAspectsListsType >
    Features (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureAspectsListsType >
    Features (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureAspectsListsType >
    Features (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureAspectsListsType >
    Features (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureAspectsListsType >
    Features (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureAspectsListsType >
    Features (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureAspectsListsType >
    Features (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureAspectsListsType >
    Features (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureAspectsListsType >
    Features (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureAspectsListsType >
    Features (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureAspectsListsType >
    Features (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureAspectsListsType >
    Features (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureAspectsListsType >
    Features (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasuredFeaturesType >
    MeasuredFeatures (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasuredFeaturesType >
    MeasuredFeatures (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasuredFeaturesType >
    MeasuredFeatures (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasuredFeaturesType >
    MeasuredFeatures (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasuredFeaturesType >
    MeasuredFeatures (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasuredFeaturesType >
    MeasuredFeatures (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasuredFeaturesType >
    MeasuredFeatures (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasuredFeaturesType >
    MeasuredFeatures (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasuredFeaturesType >
    MeasuredFeatures (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasuredFeaturesType >
    MeasuredFeatures (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasuredFeaturesType >
    MeasuredFeatures (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasuredFeaturesType >
    MeasuredFeatures (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasuredFeaturesType >
    MeasuredFeatures (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasuredFeaturesType >
    MeasuredFeatures (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureDefinitionBaseType >
    FeatureDefinition (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureDefinitionBaseType >
    FeatureDefinition (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureDefinitionBaseType >
    FeatureDefinition (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureDefinitionBaseType >
    FeatureDefinition (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureDefinitionBaseType >
    FeatureDefinition (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureDefinitionBaseType >
    FeatureDefinition (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureDefinitionBaseType >
    FeatureDefinition (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureDefinitionBaseType >
    FeatureDefinition (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureDefinitionBaseType >
    FeatureDefinition (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureDefinitionBaseType >
    FeatureDefinition (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureDefinitionBaseType >
    FeatureDefinition (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureDefinitionBaseType >
    FeatureDefinition (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureDefinitionBaseType >
    FeatureDefinition (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureDefinitionBaseType >
    FeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureDefinitionType >
    ArcFeatureDefinition (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureDefinitionType >
    ArcFeatureDefinition (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureDefinitionType >
    ArcFeatureDefinition (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureDefinitionType >
    ArcFeatureDefinition (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureDefinitionType >
    ArcFeatureDefinition (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureDefinitionType >
    ArcFeatureDefinition (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureDefinitionType >
    ArcFeatureDefinition (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureDefinitionType >
    ArcFeatureDefinition (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureDefinitionType >
    ArcFeatureDefinition (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureDefinitionType >
    ArcFeatureDefinition (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureDefinitionType >
    ArcFeatureDefinition (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureDefinitionType >
    ArcFeatureDefinition (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureDefinitionType >
    ArcFeatureDefinition (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureDefinitionType >
    ArcFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureDefinitionType >
    GenericFeatureDefinition (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureDefinitionType >
    GenericFeatureDefinition (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureDefinitionType >
    GenericFeatureDefinition (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureDefinitionType >
    GenericFeatureDefinition (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureDefinitionType >
    GenericFeatureDefinition (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureDefinitionType >
    GenericFeatureDefinition (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureDefinitionType >
    GenericFeatureDefinition (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureDefinitionType >
    GenericFeatureDefinition (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureDefinitionType >
    GenericFeatureDefinition (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureDefinitionType >
    GenericFeatureDefinition (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureDefinitionType >
    GenericFeatureDefinition (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureDefinitionType >
    GenericFeatureDefinition (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureDefinitionType >
    GenericFeatureDefinition (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureDefinitionType >
    GenericFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureDefinitionType >
    CircleFeatureDefinition (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureDefinitionType >
    CircleFeatureDefinition (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureDefinitionType >
    CircleFeatureDefinition (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureDefinitionType >
    CircleFeatureDefinition (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureDefinitionType >
    CircleFeatureDefinition (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureDefinitionType >
    CircleFeatureDefinition (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureDefinitionType >
    CircleFeatureDefinition (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureDefinitionType >
    CircleFeatureDefinition (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureDefinitionType >
    CircleFeatureDefinition (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureDefinitionType >
    CircleFeatureDefinition (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureDefinitionType >
    CircleFeatureDefinition (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureDefinitionType >
    CircleFeatureDefinition (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureDefinitionType >
    CircleFeatureDefinition (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureDefinitionType >
    CircleFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureDefinitionType >
    CompoundFeatureDefinition (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureDefinitionType >
    CompoundFeatureDefinition (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureDefinitionType >
    CompoundFeatureDefinition (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureDefinitionType >
    CompoundFeatureDefinition (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureDefinitionType >
    CompoundFeatureDefinition (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureDefinitionType >
    CompoundFeatureDefinition (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureDefinitionType >
    CompoundFeatureDefinition (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureDefinitionType >
    CompoundFeatureDefinition (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureDefinitionType >
    CompoundFeatureDefinition (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureDefinitionType >
    CompoundFeatureDefinition (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureDefinitionType >
    CompoundFeatureDefinition (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureDefinitionType >
    CompoundFeatureDefinition (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureDefinitionType >
    CompoundFeatureDefinition (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureDefinitionType >
    CompoundFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureDefinitionType >
    ConeFeatureDefinition (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureDefinitionType >
    ConeFeatureDefinition (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureDefinitionType >
    ConeFeatureDefinition (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureDefinitionType >
    ConeFeatureDefinition (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureDefinitionType >
    ConeFeatureDefinition (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureDefinitionType >
    ConeFeatureDefinition (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureDefinitionType >
    ConeFeatureDefinition (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureDefinitionType >
    ConeFeatureDefinition (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureDefinitionType >
    ConeFeatureDefinition (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureDefinitionType >
    ConeFeatureDefinition (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureDefinitionType >
    ConeFeatureDefinition (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureDefinitionType >
    ConeFeatureDefinition (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureDefinitionType >
    ConeFeatureDefinition (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureDefinitionType >
    ConeFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureDefinitionType >
    ConicalSegmentFeatureDefinition (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureDefinitionType >
    ConicalSegmentFeatureDefinition (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureDefinitionType >
    ConicalSegmentFeatureDefinition (const ::std::string& uri,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureDefinitionType >
    ConicalSegmentFeatureDefinition (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureDefinitionType >
    ConicalSegmentFeatureDefinition (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureDefinitionType >
    ConicalSegmentFeatureDefinition (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureDefinitionType >
    ConicalSegmentFeatureDefinition (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureDefinitionType >
    ConicalSegmentFeatureDefinition (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureDefinitionType >
    ConicalSegmentFeatureDefinition (::std::istream& is,
                                     const ::std::string& id,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureDefinitionType >
    ConicalSegmentFeatureDefinition (::xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureDefinitionType >
    ConicalSegmentFeatureDefinition (::xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureDefinitionType >
    ConicalSegmentFeatureDefinition (::xercesc::InputSource& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureDefinitionType >
    ConicalSegmentFeatureDefinition (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureDefinitionType >
    ConicalSegmentFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureDefinitionType >
    CuboidFeatureDefinition (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureDefinitionType >
    CuboidFeatureDefinition (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureDefinitionType >
    CuboidFeatureDefinition (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureDefinitionType >
    CuboidFeatureDefinition (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureDefinitionType >
    CuboidFeatureDefinition (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureDefinitionType >
    CuboidFeatureDefinition (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureDefinitionType >
    CuboidFeatureDefinition (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureDefinitionType >
    CuboidFeatureDefinition (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureDefinitionType >
    CuboidFeatureDefinition (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureDefinitionType >
    CuboidFeatureDefinition (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureDefinitionType >
    CuboidFeatureDefinition (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureDefinitionType >
    CuboidFeatureDefinition (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureDefinitionType >
    CuboidFeatureDefinition (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureDefinitionType >
    CuboidFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureDefinitionType >
    CylinderFeatureDefinition (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureDefinitionType >
    CylinderFeatureDefinition (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureDefinitionType >
    CylinderFeatureDefinition (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureDefinitionType >
    CylinderFeatureDefinition (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureDefinitionType >
    CylinderFeatureDefinition (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureDefinitionType >
    CylinderFeatureDefinition (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureDefinitionType >
    CylinderFeatureDefinition (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureDefinitionType >
    CylinderFeatureDefinition (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureDefinitionType >
    CylinderFeatureDefinition (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureDefinitionType >
    CylinderFeatureDefinition (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureDefinitionType >
    CylinderFeatureDefinition (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureDefinitionType >
    CylinderFeatureDefinition (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureDefinitionType >
    CylinderFeatureDefinition (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureDefinitionType >
    CylinderFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureDefinitionType >
    CylindricalSegmentFeatureDefinition (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureDefinitionType >
    CylindricalSegmentFeatureDefinition (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureDefinitionType >
    CylindricalSegmentFeatureDefinition (const ::std::string& uri,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureDefinitionType >
    CylindricalSegmentFeatureDefinition (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureDefinitionType >
    CylindricalSegmentFeatureDefinition (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureDefinitionType >
    CylindricalSegmentFeatureDefinition (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureDefinitionType >
    CylindricalSegmentFeatureDefinition (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureDefinitionType >
    CylindricalSegmentFeatureDefinition (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureDefinitionType >
    CylindricalSegmentFeatureDefinition (::std::istream& is,
                                         const ::std::string& id,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureDefinitionType >
    CylindricalSegmentFeatureDefinition (::xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureDefinitionType >
    CylindricalSegmentFeatureDefinition (::xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureDefinitionType >
    CylindricalSegmentFeatureDefinition (::xercesc::InputSource& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureDefinitionType >
    CylindricalSegmentFeatureDefinition (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureDefinitionType >
    CylindricalSegmentFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureDefinitionType >
    EdgePointFeatureDefinition (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureDefinitionType >
    EdgePointFeatureDefinition (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureDefinitionType >
    EdgePointFeatureDefinition (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureDefinitionType >
    EdgePointFeatureDefinition (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureDefinitionType >
    EdgePointFeatureDefinition (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureDefinitionType >
    EdgePointFeatureDefinition (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureDefinitionType >
    EdgePointFeatureDefinition (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureDefinitionType >
    EdgePointFeatureDefinition (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureDefinitionType >
    EdgePointFeatureDefinition (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureDefinitionType >
    EdgePointFeatureDefinition (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureDefinitionType >
    EdgePointFeatureDefinition (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureDefinitionType >
    EdgePointFeatureDefinition (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureDefinitionType >
    EdgePointFeatureDefinition (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureDefinitionType >
    EdgePointFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureDefinitionType >
    EllipseFeatureDefinition (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureDefinitionType >
    EllipseFeatureDefinition (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureDefinitionType >
    EllipseFeatureDefinition (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureDefinitionType >
    EllipseFeatureDefinition (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureDefinitionType >
    EllipseFeatureDefinition (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureDefinitionType >
    EllipseFeatureDefinition (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureDefinitionType >
    EllipseFeatureDefinition (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureDefinitionType >
    EllipseFeatureDefinition (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureDefinitionType >
    EllipseFeatureDefinition (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureDefinitionType >
    EllipseFeatureDefinition (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureDefinitionType >
    EllipseFeatureDefinition (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureDefinitionType >
    EllipseFeatureDefinition (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureDefinitionType >
    EllipseFeatureDefinition (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureDefinitionType >
    EllipseFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureDefinitionType >
    ElongatedCylinderFeatureDefinition (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureDefinitionType >
    ElongatedCylinderFeatureDefinition (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureDefinitionType >
    ElongatedCylinderFeatureDefinition (const ::std::string& uri,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureDefinitionType >
    ElongatedCylinderFeatureDefinition (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureDefinitionType >
    ElongatedCylinderFeatureDefinition (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureDefinitionType >
    ElongatedCylinderFeatureDefinition (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureDefinitionType >
    ElongatedCylinderFeatureDefinition (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureDefinitionType >
    ElongatedCylinderFeatureDefinition (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureDefinitionType >
    ElongatedCylinderFeatureDefinition (::std::istream& is,
                                        const ::std::string& id,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureDefinitionType >
    ElongatedCylinderFeatureDefinition (::xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureDefinitionType >
    ElongatedCylinderFeatureDefinition (::xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureDefinitionType >
    ElongatedCylinderFeatureDefinition (::xercesc::InputSource& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureDefinitionType >
    ElongatedCylinderFeatureDefinition (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureDefinitionType >
    ElongatedCylinderFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType >
    ExtrudedCrossSectionFeatureDefinition (const ::std::string& uri,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType >
    ExtrudedCrossSectionFeatureDefinition (const ::std::string& uri,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType >
    ExtrudedCrossSectionFeatureDefinition (const ::std::string& uri,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType >
    ExtrudedCrossSectionFeatureDefinition (::std::istream& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType >
    ExtrudedCrossSectionFeatureDefinition (::std::istream& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType >
    ExtrudedCrossSectionFeatureDefinition (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType >
    ExtrudedCrossSectionFeatureDefinition (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType >
    ExtrudedCrossSectionFeatureDefinition (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType >
    ExtrudedCrossSectionFeatureDefinition (::std::istream& is,
                                           const ::std::string& id,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType >
    ExtrudedCrossSectionFeatureDefinition (::xercesc::InputSource& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType >
    ExtrudedCrossSectionFeatureDefinition (::xercesc::InputSource& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType >
    ExtrudedCrossSectionFeatureDefinition (::xercesc::InputSource& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType >
    ExtrudedCrossSectionFeatureDefinition (const ::xercesc::DOMDocument& d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType >
    ExtrudedCrossSectionFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LineFeatureDefinitionType >
    LineFeatureDefinition (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureDefinitionType >
    LineFeatureDefinition (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureDefinitionType >
    LineFeatureDefinition (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LineFeatureDefinitionType >
    LineFeatureDefinition (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureDefinitionType >
    LineFeatureDefinition (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureDefinitionType >
    LineFeatureDefinition (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureDefinitionType >
    LineFeatureDefinition (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureDefinitionType >
    LineFeatureDefinition (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureDefinitionType >
    LineFeatureDefinition (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LineFeatureDefinitionType >
    LineFeatureDefinition (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureDefinitionType >
    LineFeatureDefinition (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureDefinitionType >
    LineFeatureDefinition (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LineFeatureDefinitionType >
    LineFeatureDefinition (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureDefinitionType >
    LineFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureDefinitionType >
    OppositeLinesFeatureDefinition (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureDefinitionType >
    OppositeLinesFeatureDefinition (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureDefinitionType >
    OppositeLinesFeatureDefinition (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureDefinitionType >
    OppositeLinesFeatureDefinition (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureDefinitionType >
    OppositeLinesFeatureDefinition (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureDefinitionType >
    OppositeLinesFeatureDefinition (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureDefinitionType >
    OppositeLinesFeatureDefinition (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureDefinitionType >
    OppositeLinesFeatureDefinition (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureDefinitionType >
    OppositeLinesFeatureDefinition (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureDefinitionType >
    OppositeLinesFeatureDefinition (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureDefinitionType >
    OppositeLinesFeatureDefinition (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureDefinitionType >
    OppositeLinesFeatureDefinition (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureDefinitionType >
    OppositeLinesFeatureDefinition (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureDefinitionType >
    OppositeLinesFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureDefinitionType >
    OppositePlanesFeatureDefinition (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureDefinitionType >
    OppositePlanesFeatureDefinition (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureDefinitionType >
    OppositePlanesFeatureDefinition (const ::std::string& uri,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureDefinitionType >
    OppositePlanesFeatureDefinition (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureDefinitionType >
    OppositePlanesFeatureDefinition (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureDefinitionType >
    OppositePlanesFeatureDefinition (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureDefinitionType >
    OppositePlanesFeatureDefinition (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureDefinitionType >
    OppositePlanesFeatureDefinition (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureDefinitionType >
    OppositePlanesFeatureDefinition (::std::istream& is,
                                     const ::std::string& id,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureDefinitionType >
    OppositePlanesFeatureDefinition (::xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureDefinitionType >
    OppositePlanesFeatureDefinition (::xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureDefinitionType >
    OppositePlanesFeatureDefinition (::xercesc::InputSource& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureDefinitionType >
    OppositePlanesFeatureDefinition (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureDefinitionType >
    OppositePlanesFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureDefinitionType >
    PatternFeatureDefinition (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureDefinitionType >
    PatternFeatureDefinition (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureDefinitionType >
    PatternFeatureDefinition (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureDefinitionType >
    PatternFeatureDefinition (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureDefinitionType >
    PatternFeatureDefinition (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureDefinitionType >
    PatternFeatureDefinition (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureDefinitionType >
    PatternFeatureDefinition (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureDefinitionType >
    PatternFeatureDefinition (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureDefinitionType >
    PatternFeatureDefinition (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureDefinitionType >
    PatternFeatureDefinition (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureDefinitionType >
    PatternFeatureDefinition (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureDefinitionType >
    PatternFeatureDefinition (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureDefinitionType >
    PatternFeatureDefinition (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureDefinitionType >
    PatternFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureDefinitionType >
    PlaneFeatureDefinition (const ::std::string& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureDefinitionType >
    PlaneFeatureDefinition (const ::std::string& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureDefinitionType >
    PlaneFeatureDefinition (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureDefinitionType >
    PlaneFeatureDefinition (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureDefinitionType >
    PlaneFeatureDefinition (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureDefinitionType >
    PlaneFeatureDefinition (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureDefinitionType >
    PlaneFeatureDefinition (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureDefinitionType >
    PlaneFeatureDefinition (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureDefinitionType >
    PlaneFeatureDefinition (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureDefinitionType >
    PlaneFeatureDefinition (::xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureDefinitionType >
    PlaneFeatureDefinition (::xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureDefinitionType >
    PlaneFeatureDefinition (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureDefinitionType >
    PlaneFeatureDefinition (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureDefinitionType >
    PlaneFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureDefinitionType >
    PointDefinedCurveFeatureDefinition (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureDefinitionType >
    PointDefinedCurveFeatureDefinition (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureDefinitionType >
    PointDefinedCurveFeatureDefinition (const ::std::string& uri,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureDefinitionType >
    PointDefinedCurveFeatureDefinition (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureDefinitionType >
    PointDefinedCurveFeatureDefinition (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureDefinitionType >
    PointDefinedCurveFeatureDefinition (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureDefinitionType >
    PointDefinedCurveFeatureDefinition (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureDefinitionType >
    PointDefinedCurveFeatureDefinition (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureDefinitionType >
    PointDefinedCurveFeatureDefinition (::std::istream& is,
                                        const ::std::string& id,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureDefinitionType >
    PointDefinedCurveFeatureDefinition (::xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureDefinitionType >
    PointDefinedCurveFeatureDefinition (::xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureDefinitionType >
    PointDefinedCurveFeatureDefinition (::xercesc::InputSource& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureDefinitionType >
    PointDefinedCurveFeatureDefinition (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureDefinitionType >
    PointDefinedCurveFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType >
    PointDefinedSurfaceFeatureDefinition (const ::std::string& uri,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType >
    PointDefinedSurfaceFeatureDefinition (const ::std::string& uri,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType >
    PointDefinedSurfaceFeatureDefinition (const ::std::string& uri,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType >
    PointDefinedSurfaceFeatureDefinition (::std::istream& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType >
    PointDefinedSurfaceFeatureDefinition (::std::istream& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType >
    PointDefinedSurfaceFeatureDefinition (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType >
    PointDefinedSurfaceFeatureDefinition (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType >
    PointDefinedSurfaceFeatureDefinition (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType >
    PointDefinedSurfaceFeatureDefinition (::std::istream& is,
                                          const ::std::string& id,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType >
    PointDefinedSurfaceFeatureDefinition (::xercesc::InputSource& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType >
    PointDefinedSurfaceFeatureDefinition (::xercesc::InputSource& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType >
    PointDefinedSurfaceFeatureDefinition (::xercesc::InputSource& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType >
    PointDefinedSurfaceFeatureDefinition (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType >
    PointDefinedSurfaceFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PointFeatureDefinitionType >
    PointFeatureDefinition (const ::std::string& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureDefinitionType >
    PointFeatureDefinition (const ::std::string& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureDefinitionType >
    PointFeatureDefinition (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PointFeatureDefinitionType >
    PointFeatureDefinition (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureDefinitionType >
    PointFeatureDefinition (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureDefinitionType >
    PointFeatureDefinition (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureDefinitionType >
    PointFeatureDefinition (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureDefinitionType >
    PointFeatureDefinition (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureDefinitionType >
    PointFeatureDefinition (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PointFeatureDefinitionType >
    PointFeatureDefinition (::xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureDefinitionType >
    PointFeatureDefinition (::xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureDefinitionType >
    PointFeatureDefinition (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PointFeatureDefinitionType >
    PointFeatureDefinition (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureDefinitionType >
    PointFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureDefinitionType >
    ProfileGroupFeatureDefinition (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureDefinitionType >
    ProfileGroupFeatureDefinition (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureDefinitionType >
    ProfileGroupFeatureDefinition (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureDefinitionType >
    ProfileGroupFeatureDefinition (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureDefinitionType >
    ProfileGroupFeatureDefinition (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureDefinitionType >
    ProfileGroupFeatureDefinition (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureDefinitionType >
    ProfileGroupFeatureDefinition (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureDefinitionType >
    ProfileGroupFeatureDefinition (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureDefinitionType >
    ProfileGroupFeatureDefinition (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureDefinitionType >
    ProfileGroupFeatureDefinition (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureDefinitionType >
    ProfileGroupFeatureDefinition (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureDefinitionType >
    ProfileGroupFeatureDefinition (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureDefinitionType >
    ProfileGroupFeatureDefinition (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureDefinitionType >
    ProfileGroupFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureDefinitionType >
    RunoutGroupFeatureDefinition (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureDefinitionType >
    RunoutGroupFeatureDefinition (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureDefinitionType >
    RunoutGroupFeatureDefinition (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureDefinitionType >
    RunoutGroupFeatureDefinition (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureDefinitionType >
    RunoutGroupFeatureDefinition (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureDefinitionType >
    RunoutGroupFeatureDefinition (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureDefinitionType >
    RunoutGroupFeatureDefinition (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureDefinitionType >
    RunoutGroupFeatureDefinition (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureDefinitionType >
    RunoutGroupFeatureDefinition (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureDefinitionType >
    RunoutGroupFeatureDefinition (::xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureDefinitionType >
    RunoutGroupFeatureDefinition (::xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureDefinitionType >
    RunoutGroupFeatureDefinition (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureDefinitionType >
    RunoutGroupFeatureDefinition (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureDefinitionType >
    RunoutGroupFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureDefinitionType >
    SphereFeatureDefinition (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureDefinitionType >
    SphereFeatureDefinition (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureDefinitionType >
    SphereFeatureDefinition (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureDefinitionType >
    SphereFeatureDefinition (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureDefinitionType >
    SphereFeatureDefinition (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureDefinitionType >
    SphereFeatureDefinition (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureDefinitionType >
    SphereFeatureDefinition (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureDefinitionType >
    SphereFeatureDefinition (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureDefinitionType >
    SphereFeatureDefinition (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureDefinitionType >
    SphereFeatureDefinition (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureDefinitionType >
    SphereFeatureDefinition (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureDefinitionType >
    SphereFeatureDefinition (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureDefinitionType >
    SphereFeatureDefinition (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureDefinitionType >
    SphereFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureDefinitionType >
    SphericalSegmentFeatureDefinition (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureDefinitionType >
    SphericalSegmentFeatureDefinition (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureDefinitionType >
    SphericalSegmentFeatureDefinition (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureDefinitionType >
    SphericalSegmentFeatureDefinition (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureDefinitionType >
    SphericalSegmentFeatureDefinition (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureDefinitionType >
    SphericalSegmentFeatureDefinition (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureDefinitionType >
    SphericalSegmentFeatureDefinition (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureDefinitionType >
    SphericalSegmentFeatureDefinition (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureDefinitionType >
    SphericalSegmentFeatureDefinition (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureDefinitionType >
    SphericalSegmentFeatureDefinition (::xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureDefinitionType >
    SphericalSegmentFeatureDefinition (::xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureDefinitionType >
    SphericalSegmentFeatureDefinition (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureDefinitionType >
    SphericalSegmentFeatureDefinition (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureDefinitionType >
    SphericalSegmentFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType >
    SurfaceOfRevolutionFeatureDefinition (const ::std::string& uri,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType >
    SurfaceOfRevolutionFeatureDefinition (const ::std::string& uri,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType >
    SurfaceOfRevolutionFeatureDefinition (const ::std::string& uri,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType >
    SurfaceOfRevolutionFeatureDefinition (::std::istream& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType >
    SurfaceOfRevolutionFeatureDefinition (::std::istream& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType >
    SurfaceOfRevolutionFeatureDefinition (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType >
    SurfaceOfRevolutionFeatureDefinition (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType >
    SurfaceOfRevolutionFeatureDefinition (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType >
    SurfaceOfRevolutionFeatureDefinition (::std::istream& is,
                                          const ::std::string& id,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType >
    SurfaceOfRevolutionFeatureDefinition (::xercesc::InputSource& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType >
    SurfaceOfRevolutionFeatureDefinition (::xercesc::InputSource& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType >
    SurfaceOfRevolutionFeatureDefinition (::xercesc::InputSource& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType >
    SurfaceOfRevolutionFeatureDefinition (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType >
    SurfaceOfRevolutionFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureDefinitionType >
    ThreadedFeatureDefinition (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureDefinitionType >
    ThreadedFeatureDefinition (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureDefinitionType >
    ThreadedFeatureDefinition (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureDefinitionType >
    ThreadedFeatureDefinition (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureDefinitionType >
    ThreadedFeatureDefinition (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureDefinitionType >
    ThreadedFeatureDefinition (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureDefinitionType >
    ThreadedFeatureDefinition (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureDefinitionType >
    ThreadedFeatureDefinition (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureDefinitionType >
    ThreadedFeatureDefinition (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureDefinitionType >
    ThreadedFeatureDefinition (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureDefinitionType >
    ThreadedFeatureDefinition (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureDefinitionType >
    ThreadedFeatureDefinition (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureDefinitionType >
    ThreadedFeatureDefinition (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureDefinitionType >
    ThreadedFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureDefinitionType >
    ToroidalSegmentFeatureDefinition (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureDefinitionType >
    ToroidalSegmentFeatureDefinition (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureDefinitionType >
    ToroidalSegmentFeatureDefinition (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureDefinitionType >
    ToroidalSegmentFeatureDefinition (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureDefinitionType >
    ToroidalSegmentFeatureDefinition (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureDefinitionType >
    ToroidalSegmentFeatureDefinition (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureDefinitionType >
    ToroidalSegmentFeatureDefinition (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureDefinitionType >
    ToroidalSegmentFeatureDefinition (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureDefinitionType >
    ToroidalSegmentFeatureDefinition (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureDefinitionType >
    ToroidalSegmentFeatureDefinition (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureDefinitionType >
    ToroidalSegmentFeatureDefinition (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureDefinitionType >
    ToroidalSegmentFeatureDefinition (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureDefinitionType >
    ToroidalSegmentFeatureDefinition (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureDefinitionType >
    ToroidalSegmentFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureDefinitionType >
    TorusFeatureDefinition (const ::std::string& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureDefinitionType >
    TorusFeatureDefinition (const ::std::string& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureDefinitionType >
    TorusFeatureDefinition (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureDefinitionType >
    TorusFeatureDefinition (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureDefinitionType >
    TorusFeatureDefinition (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureDefinitionType >
    TorusFeatureDefinition (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureDefinitionType >
    TorusFeatureDefinition (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureDefinitionType >
    TorusFeatureDefinition (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureDefinitionType >
    TorusFeatureDefinition (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureDefinitionType >
    TorusFeatureDefinition (::xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureDefinitionType >
    TorusFeatureDefinition (::xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureDefinitionType >
    TorusFeatureDefinition (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureDefinitionType >
    TorusFeatureDefinition (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureDefinitionType >
    TorusFeatureDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureNominalBaseType >
    FeatureNominal (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureNominalBaseType >
    FeatureNominal (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureNominalBaseType >
    FeatureNominal (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureNominalBaseType >
    FeatureNominal (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureNominalBaseType >
    FeatureNominal (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureNominalBaseType >
    FeatureNominal (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureNominalBaseType >
    FeatureNominal (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureNominalBaseType >
    FeatureNominal (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureNominalBaseType >
    FeatureNominal (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureNominalBaseType >
    FeatureNominal (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureNominalBaseType >
    FeatureNominal (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureNominalBaseType >
    FeatureNominal (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureNominalBaseType >
    FeatureNominal (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureNominalBaseType >
    FeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureNominalType >
    ArcFeatureNominal (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureNominalType >
    ArcFeatureNominal (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureNominalType >
    ArcFeatureNominal (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureNominalType >
    ArcFeatureNominal (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureNominalType >
    ArcFeatureNominal (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureNominalType >
    ArcFeatureNominal (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureNominalType >
    ArcFeatureNominal (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureNominalType >
    ArcFeatureNominal (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureNominalType >
    ArcFeatureNominal (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureNominalType >
    ArcFeatureNominal (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureNominalType >
    ArcFeatureNominal (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureNominalType >
    ArcFeatureNominal (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureNominalType >
    ArcFeatureNominal (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureNominalType >
    ArcFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureNominalType >
    GenericFeatureNominal (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureNominalType >
    GenericFeatureNominal (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureNominalType >
    GenericFeatureNominal (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureNominalType >
    GenericFeatureNominal (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureNominalType >
    GenericFeatureNominal (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureNominalType >
    GenericFeatureNominal (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureNominalType >
    GenericFeatureNominal (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureNominalType >
    GenericFeatureNominal (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureNominalType >
    GenericFeatureNominal (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureNominalType >
    GenericFeatureNominal (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureNominalType >
    GenericFeatureNominal (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureNominalType >
    GenericFeatureNominal (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureNominalType >
    GenericFeatureNominal (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureNominalType >
    GenericFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureNominalType >
    CircleFeatureNominal (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureNominalType >
    CircleFeatureNominal (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureNominalType >
    CircleFeatureNominal (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureNominalType >
    CircleFeatureNominal (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureNominalType >
    CircleFeatureNominal (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureNominalType >
    CircleFeatureNominal (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureNominalType >
    CircleFeatureNominal (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureNominalType >
    CircleFeatureNominal (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureNominalType >
    CircleFeatureNominal (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureNominalType >
    CircleFeatureNominal (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureNominalType >
    CircleFeatureNominal (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureNominalType >
    CircleFeatureNominal (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureNominalType >
    CircleFeatureNominal (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureNominalType >
    CircleFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureNominalType >
    CompoundFeatureNominal (const ::std::string& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureNominalType >
    CompoundFeatureNominal (const ::std::string& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureNominalType >
    CompoundFeatureNominal (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureNominalType >
    CompoundFeatureNominal (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureNominalType >
    CompoundFeatureNominal (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureNominalType >
    CompoundFeatureNominal (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureNominalType >
    CompoundFeatureNominal (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureNominalType >
    CompoundFeatureNominal (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureNominalType >
    CompoundFeatureNominal (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureNominalType >
    CompoundFeatureNominal (::xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureNominalType >
    CompoundFeatureNominal (::xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureNominalType >
    CompoundFeatureNominal (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureNominalType >
    CompoundFeatureNominal (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureNominalType >
    CompoundFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureNominalType >
    ConeFeatureNominal (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureNominalType >
    ConeFeatureNominal (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureNominalType >
    ConeFeatureNominal (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureNominalType >
    ConeFeatureNominal (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureNominalType >
    ConeFeatureNominal (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureNominalType >
    ConeFeatureNominal (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureNominalType >
    ConeFeatureNominal (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureNominalType >
    ConeFeatureNominal (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureNominalType >
    ConeFeatureNominal (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureNominalType >
    ConeFeatureNominal (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureNominalType >
    ConeFeatureNominal (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureNominalType >
    ConeFeatureNominal (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureNominalType >
    ConeFeatureNominal (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureNominalType >
    ConeFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureNominalType >
    ConicalSegmentFeatureNominal (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureNominalType >
    ConicalSegmentFeatureNominal (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureNominalType >
    ConicalSegmentFeatureNominal (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureNominalType >
    ConicalSegmentFeatureNominal (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureNominalType >
    ConicalSegmentFeatureNominal (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureNominalType >
    ConicalSegmentFeatureNominal (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureNominalType >
    ConicalSegmentFeatureNominal (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureNominalType >
    ConicalSegmentFeatureNominal (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureNominalType >
    ConicalSegmentFeatureNominal (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureNominalType >
    ConicalSegmentFeatureNominal (::xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureNominalType >
    ConicalSegmentFeatureNominal (::xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureNominalType >
    ConicalSegmentFeatureNominal (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureNominalType >
    ConicalSegmentFeatureNominal (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureNominalType >
    ConicalSegmentFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureNominalType >
    CuboidFeatureNominal (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureNominalType >
    CuboidFeatureNominal (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureNominalType >
    CuboidFeatureNominal (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureNominalType >
    CuboidFeatureNominal (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureNominalType >
    CuboidFeatureNominal (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureNominalType >
    CuboidFeatureNominal (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureNominalType >
    CuboidFeatureNominal (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureNominalType >
    CuboidFeatureNominal (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureNominalType >
    CuboidFeatureNominal (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureNominalType >
    CuboidFeatureNominal (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureNominalType >
    CuboidFeatureNominal (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureNominalType >
    CuboidFeatureNominal (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureNominalType >
    CuboidFeatureNominal (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureNominalType >
    CuboidFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureNominalType >
    CylinderFeatureNominal (const ::std::string& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureNominalType >
    CylinderFeatureNominal (const ::std::string& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureNominalType >
    CylinderFeatureNominal (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureNominalType >
    CylinderFeatureNominal (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureNominalType >
    CylinderFeatureNominal (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureNominalType >
    CylinderFeatureNominal (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureNominalType >
    CylinderFeatureNominal (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureNominalType >
    CylinderFeatureNominal (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureNominalType >
    CylinderFeatureNominal (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureNominalType >
    CylinderFeatureNominal (::xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureNominalType >
    CylinderFeatureNominal (::xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureNominalType >
    CylinderFeatureNominal (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureNominalType >
    CylinderFeatureNominal (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureNominalType >
    CylinderFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureNominalType >
    CylindricalSegmentFeatureNominal (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureNominalType >
    CylindricalSegmentFeatureNominal (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureNominalType >
    CylindricalSegmentFeatureNominal (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureNominalType >
    CylindricalSegmentFeatureNominal (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureNominalType >
    CylindricalSegmentFeatureNominal (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureNominalType >
    CylindricalSegmentFeatureNominal (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureNominalType >
    CylindricalSegmentFeatureNominal (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureNominalType >
    CylindricalSegmentFeatureNominal (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureNominalType >
    CylindricalSegmentFeatureNominal (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureNominalType >
    CylindricalSegmentFeatureNominal (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureNominalType >
    CylindricalSegmentFeatureNominal (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureNominalType >
    CylindricalSegmentFeatureNominal (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureNominalType >
    CylindricalSegmentFeatureNominal (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureNominalType >
    CylindricalSegmentFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureNominalType >
    EdgePointFeatureNominal (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureNominalType >
    EdgePointFeatureNominal (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureNominalType >
    EdgePointFeatureNominal (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureNominalType >
    EdgePointFeatureNominal (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureNominalType >
    EdgePointFeatureNominal (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureNominalType >
    EdgePointFeatureNominal (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureNominalType >
    EdgePointFeatureNominal (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureNominalType >
    EdgePointFeatureNominal (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureNominalType >
    EdgePointFeatureNominal (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureNominalType >
    EdgePointFeatureNominal (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureNominalType >
    EdgePointFeatureNominal (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureNominalType >
    EdgePointFeatureNominal (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureNominalType >
    EdgePointFeatureNominal (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureNominalType >
    EdgePointFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureNominalType >
    EllipseFeatureNominal (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureNominalType >
    EllipseFeatureNominal (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureNominalType >
    EllipseFeatureNominal (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureNominalType >
    EllipseFeatureNominal (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureNominalType >
    EllipseFeatureNominal (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureNominalType >
    EllipseFeatureNominal (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureNominalType >
    EllipseFeatureNominal (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureNominalType >
    EllipseFeatureNominal (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureNominalType >
    EllipseFeatureNominal (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureNominalType >
    EllipseFeatureNominal (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureNominalType >
    EllipseFeatureNominal (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureNominalType >
    EllipseFeatureNominal (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureNominalType >
    EllipseFeatureNominal (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureNominalType >
    EllipseFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureNominalType >
    ElongatedCylinderFeatureNominal (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureNominalType >
    ElongatedCylinderFeatureNominal (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureNominalType >
    ElongatedCylinderFeatureNominal (const ::std::string& uri,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureNominalType >
    ElongatedCylinderFeatureNominal (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureNominalType >
    ElongatedCylinderFeatureNominal (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureNominalType >
    ElongatedCylinderFeatureNominal (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureNominalType >
    ElongatedCylinderFeatureNominal (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureNominalType >
    ElongatedCylinderFeatureNominal (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureNominalType >
    ElongatedCylinderFeatureNominal (::std::istream& is,
                                     const ::std::string& id,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureNominalType >
    ElongatedCylinderFeatureNominal (::xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureNominalType >
    ElongatedCylinderFeatureNominal (::xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureNominalType >
    ElongatedCylinderFeatureNominal (::xercesc::InputSource& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureNominalType >
    ElongatedCylinderFeatureNominal (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureNominalType >
    ElongatedCylinderFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType >
    ExtrudedCrossSectionFeatureNominal (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType >
    ExtrudedCrossSectionFeatureNominal (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType >
    ExtrudedCrossSectionFeatureNominal (const ::std::string& uri,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType >
    ExtrudedCrossSectionFeatureNominal (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType >
    ExtrudedCrossSectionFeatureNominal (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType >
    ExtrudedCrossSectionFeatureNominal (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType >
    ExtrudedCrossSectionFeatureNominal (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType >
    ExtrudedCrossSectionFeatureNominal (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType >
    ExtrudedCrossSectionFeatureNominal (::std::istream& is,
                                        const ::std::string& id,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType >
    ExtrudedCrossSectionFeatureNominal (::xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType >
    ExtrudedCrossSectionFeatureNominal (::xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType >
    ExtrudedCrossSectionFeatureNominal (::xercesc::InputSource& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType >
    ExtrudedCrossSectionFeatureNominal (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType >
    ExtrudedCrossSectionFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LineFeatureNominalType >
    LineFeatureNominal (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureNominalType >
    LineFeatureNominal (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureNominalType >
    LineFeatureNominal (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LineFeatureNominalType >
    LineFeatureNominal (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureNominalType >
    LineFeatureNominal (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureNominalType >
    LineFeatureNominal (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureNominalType >
    LineFeatureNominal (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureNominalType >
    LineFeatureNominal (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureNominalType >
    LineFeatureNominal (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LineFeatureNominalType >
    LineFeatureNominal (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureNominalType >
    LineFeatureNominal (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureNominalType >
    LineFeatureNominal (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LineFeatureNominalType >
    LineFeatureNominal (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureNominalType >
    LineFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureNominalType >
    PatternFeatureNominal (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureNominalType >
    PatternFeatureNominal (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureNominalType >
    PatternFeatureNominal (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureNominalType >
    PatternFeatureNominal (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureNominalType >
    PatternFeatureNominal (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureNominalType >
    PatternFeatureNominal (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureNominalType >
    PatternFeatureNominal (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureNominalType >
    PatternFeatureNominal (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureNominalType >
    PatternFeatureNominal (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureNominalType >
    PatternFeatureNominal (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureNominalType >
    PatternFeatureNominal (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureNominalType >
    PatternFeatureNominal (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureNominalType >
    PatternFeatureNominal (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureNominalType >
    PatternFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureNominalType >
    PlaneFeatureNominal (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureNominalType >
    PlaneFeatureNominal (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureNominalType >
    PlaneFeatureNominal (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureNominalType >
    PlaneFeatureNominal (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureNominalType >
    PlaneFeatureNominal (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureNominalType >
    PlaneFeatureNominal (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureNominalType >
    PlaneFeatureNominal (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureNominalType >
    PlaneFeatureNominal (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureNominalType >
    PlaneFeatureNominal (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureNominalType >
    PlaneFeatureNominal (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureNominalType >
    PlaneFeatureNominal (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureNominalType >
    PlaneFeatureNominal (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureNominalType >
    PlaneFeatureNominal (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureNominalType >
    PlaneFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureNominalType >
    PointDefinedCurveFeatureNominal (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureNominalType >
    PointDefinedCurveFeatureNominal (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureNominalType >
    PointDefinedCurveFeatureNominal (const ::std::string& uri,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureNominalType >
    PointDefinedCurveFeatureNominal (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureNominalType >
    PointDefinedCurveFeatureNominal (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureNominalType >
    PointDefinedCurveFeatureNominal (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureNominalType >
    PointDefinedCurveFeatureNominal (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureNominalType >
    PointDefinedCurveFeatureNominal (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureNominalType >
    PointDefinedCurveFeatureNominal (::std::istream& is,
                                     const ::std::string& id,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureNominalType >
    PointDefinedCurveFeatureNominal (::xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureNominalType >
    PointDefinedCurveFeatureNominal (::xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureNominalType >
    PointDefinedCurveFeatureNominal (::xercesc::InputSource& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureNominalType >
    PointDefinedCurveFeatureNominal (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureNominalType >
    PointDefinedCurveFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureNominalType >
    PointDefinedSurfaceFeatureNominal (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureNominalType >
    PointDefinedSurfaceFeatureNominal (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureNominalType >
    PointDefinedSurfaceFeatureNominal (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureNominalType >
    PointDefinedSurfaceFeatureNominal (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureNominalType >
    PointDefinedSurfaceFeatureNominal (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureNominalType >
    PointDefinedSurfaceFeatureNominal (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureNominalType >
    PointDefinedSurfaceFeatureNominal (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureNominalType >
    PointDefinedSurfaceFeatureNominal (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureNominalType >
    PointDefinedSurfaceFeatureNominal (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureNominalType >
    PointDefinedSurfaceFeatureNominal (::xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureNominalType >
    PointDefinedSurfaceFeatureNominal (::xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureNominalType >
    PointDefinedSurfaceFeatureNominal (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureNominalType >
    PointDefinedSurfaceFeatureNominal (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureNominalType >
    PointDefinedSurfaceFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PointFeatureNominalType >
    PointFeatureNominal (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureNominalType >
    PointFeatureNominal (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureNominalType >
    PointFeatureNominal (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PointFeatureNominalType >
    PointFeatureNominal (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureNominalType >
    PointFeatureNominal (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureNominalType >
    PointFeatureNominal (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureNominalType >
    PointFeatureNominal (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureNominalType >
    PointFeatureNominal (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureNominalType >
    PointFeatureNominal (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PointFeatureNominalType >
    PointFeatureNominal (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureNominalType >
    PointFeatureNominal (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureNominalType >
    PointFeatureNominal (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PointFeatureNominalType >
    PointFeatureNominal (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureNominalType >
    PointFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureNominalType >
    OppositeLinesFeatureNominal (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureNominalType >
    OppositeLinesFeatureNominal (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureNominalType >
    OppositeLinesFeatureNominal (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureNominalType >
    OppositeLinesFeatureNominal (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureNominalType >
    OppositeLinesFeatureNominal (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureNominalType >
    OppositeLinesFeatureNominal (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureNominalType >
    OppositeLinesFeatureNominal (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureNominalType >
    OppositeLinesFeatureNominal (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureNominalType >
    OppositeLinesFeatureNominal (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureNominalType >
    OppositeLinesFeatureNominal (::xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureNominalType >
    OppositeLinesFeatureNominal (::xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureNominalType >
    OppositeLinesFeatureNominal (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureNominalType >
    OppositeLinesFeatureNominal (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureNominalType >
    OppositeLinesFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureNominalType >
    OppositePlanesFeatureNominal (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureNominalType >
    OppositePlanesFeatureNominal (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureNominalType >
    OppositePlanesFeatureNominal (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureNominalType >
    OppositePlanesFeatureNominal (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureNominalType >
    OppositePlanesFeatureNominal (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureNominalType >
    OppositePlanesFeatureNominal (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureNominalType >
    OppositePlanesFeatureNominal (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureNominalType >
    OppositePlanesFeatureNominal (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureNominalType >
    OppositePlanesFeatureNominal (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureNominalType >
    OppositePlanesFeatureNominal (::xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureNominalType >
    OppositePlanesFeatureNominal (::xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureNominalType >
    OppositePlanesFeatureNominal (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureNominalType >
    OppositePlanesFeatureNominal (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureNominalType >
    OppositePlanesFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureNominalType >
    ProfileGroupFeatureNominal (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureNominalType >
    ProfileGroupFeatureNominal (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureNominalType >
    ProfileGroupFeatureNominal (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureNominalType >
    ProfileGroupFeatureNominal (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureNominalType >
    ProfileGroupFeatureNominal (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureNominalType >
    ProfileGroupFeatureNominal (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureNominalType >
    ProfileGroupFeatureNominal (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureNominalType >
    ProfileGroupFeatureNominal (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureNominalType >
    ProfileGroupFeatureNominal (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureNominalType >
    ProfileGroupFeatureNominal (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureNominalType >
    ProfileGroupFeatureNominal (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureNominalType >
    ProfileGroupFeatureNominal (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureNominalType >
    ProfileGroupFeatureNominal (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureNominalType >
    ProfileGroupFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureNominalType >
    RunoutGroupFeatureNominal (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureNominalType >
    RunoutGroupFeatureNominal (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureNominalType >
    RunoutGroupFeatureNominal (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureNominalType >
    RunoutGroupFeatureNominal (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureNominalType >
    RunoutGroupFeatureNominal (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureNominalType >
    RunoutGroupFeatureNominal (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureNominalType >
    RunoutGroupFeatureNominal (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureNominalType >
    RunoutGroupFeatureNominal (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureNominalType >
    RunoutGroupFeatureNominal (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureNominalType >
    RunoutGroupFeatureNominal (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureNominalType >
    RunoutGroupFeatureNominal (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureNominalType >
    RunoutGroupFeatureNominal (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureNominalType >
    RunoutGroupFeatureNominal (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureNominalType >
    RunoutGroupFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureNominalType >
    SphereFeatureNominal (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureNominalType >
    SphereFeatureNominal (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureNominalType >
    SphereFeatureNominal (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureNominalType >
    SphereFeatureNominal (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureNominalType >
    SphereFeatureNominal (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureNominalType >
    SphereFeatureNominal (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureNominalType >
    SphereFeatureNominal (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureNominalType >
    SphereFeatureNominal (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureNominalType >
    SphereFeatureNominal (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureNominalType >
    SphereFeatureNominal (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureNominalType >
    SphereFeatureNominal (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureNominalType >
    SphereFeatureNominal (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureNominalType >
    SphereFeatureNominal (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureNominalType >
    SphereFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureNominalType >
    SphericalSegmentFeatureNominal (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureNominalType >
    SphericalSegmentFeatureNominal (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureNominalType >
    SphericalSegmentFeatureNominal (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureNominalType >
    SphericalSegmentFeatureNominal (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureNominalType >
    SphericalSegmentFeatureNominal (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureNominalType >
    SphericalSegmentFeatureNominal (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureNominalType >
    SphericalSegmentFeatureNominal (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureNominalType >
    SphericalSegmentFeatureNominal (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureNominalType >
    SphericalSegmentFeatureNominal (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureNominalType >
    SphericalSegmentFeatureNominal (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureNominalType >
    SphericalSegmentFeatureNominal (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureNominalType >
    SphericalSegmentFeatureNominal (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureNominalType >
    SphericalSegmentFeatureNominal (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureNominalType >
    SphericalSegmentFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType >
    SurfaceOfRevolutionFeatureNominal (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType >
    SurfaceOfRevolutionFeatureNominal (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType >
    SurfaceOfRevolutionFeatureNominal (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType >
    SurfaceOfRevolutionFeatureNominal (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType >
    SurfaceOfRevolutionFeatureNominal (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType >
    SurfaceOfRevolutionFeatureNominal (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType >
    SurfaceOfRevolutionFeatureNominal (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType >
    SurfaceOfRevolutionFeatureNominal (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType >
    SurfaceOfRevolutionFeatureNominal (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType >
    SurfaceOfRevolutionFeatureNominal (::xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType >
    SurfaceOfRevolutionFeatureNominal (::xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType >
    SurfaceOfRevolutionFeatureNominal (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType >
    SurfaceOfRevolutionFeatureNominal (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType >
    SurfaceOfRevolutionFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureNominalType >
    ThreadedFeatureNominal (const ::std::string& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureNominalType >
    ThreadedFeatureNominal (const ::std::string& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureNominalType >
    ThreadedFeatureNominal (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureNominalType >
    ThreadedFeatureNominal (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureNominalType >
    ThreadedFeatureNominal (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureNominalType >
    ThreadedFeatureNominal (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureNominalType >
    ThreadedFeatureNominal (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureNominalType >
    ThreadedFeatureNominal (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureNominalType >
    ThreadedFeatureNominal (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureNominalType >
    ThreadedFeatureNominal (::xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureNominalType >
    ThreadedFeatureNominal (::xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureNominalType >
    ThreadedFeatureNominal (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureNominalType >
    ThreadedFeatureNominal (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureNominalType >
    ThreadedFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureNominalType >
    ToroidalSegmentFeatureNominal (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureNominalType >
    ToroidalSegmentFeatureNominal (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureNominalType >
    ToroidalSegmentFeatureNominal (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureNominalType >
    ToroidalSegmentFeatureNominal (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureNominalType >
    ToroidalSegmentFeatureNominal (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureNominalType >
    ToroidalSegmentFeatureNominal (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureNominalType >
    ToroidalSegmentFeatureNominal (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureNominalType >
    ToroidalSegmentFeatureNominal (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureNominalType >
    ToroidalSegmentFeatureNominal (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureNominalType >
    ToroidalSegmentFeatureNominal (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureNominalType >
    ToroidalSegmentFeatureNominal (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureNominalType >
    ToroidalSegmentFeatureNominal (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureNominalType >
    ToroidalSegmentFeatureNominal (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureNominalType >
    ToroidalSegmentFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureNominalType >
    TorusFeatureNominal (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureNominalType >
    TorusFeatureNominal (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureNominalType >
    TorusFeatureNominal (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureNominalType >
    TorusFeatureNominal (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureNominalType >
    TorusFeatureNominal (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureNominalType >
    TorusFeatureNominal (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureNominalType >
    TorusFeatureNominal (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureNominalType >
    TorusFeatureNominal (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureNominalType >
    TorusFeatureNominal (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureNominalType >
    TorusFeatureNominal (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureNominalType >
    TorusFeatureNominal (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureNominalType >
    TorusFeatureNominal (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureNominalType >
    TorusFeatureNominal (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureNominalType >
    TorusFeatureNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureActualBaseType >
    FeatureActual (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureActualBaseType >
    FeatureActual (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureActualBaseType >
    FeatureActual (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureActualBaseType >
    FeatureActual (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureActualBaseType >
    FeatureActual (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureActualBaseType >
    FeatureActual (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureActualBaseType >
    FeatureActual (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureActualBaseType >
    FeatureActual (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureActualBaseType >
    FeatureActual (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureActualBaseType >
    FeatureActual (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureActualBaseType >
    FeatureActual (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureActualBaseType >
    FeatureActual (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureActualBaseType >
    FeatureActual (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureActualBaseType >
    FeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureActualType >
    ArcFeatureActual (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureActualType >
    ArcFeatureActual (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureActualType >
    ArcFeatureActual (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureActualType >
    ArcFeatureActual (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureActualType >
    ArcFeatureActual (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureActualType >
    ArcFeatureActual (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureActualType >
    ArcFeatureActual (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureActualType >
    ArcFeatureActual (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureActualType >
    ArcFeatureActual (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureActualType >
    ArcFeatureActual (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureActualType >
    ArcFeatureActual (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureActualType >
    ArcFeatureActual (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureActualType >
    ArcFeatureActual (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureActualType >
    ArcFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureActualType >
    GenericFeatureActual (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureActualType >
    GenericFeatureActual (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureActualType >
    GenericFeatureActual (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureActualType >
    GenericFeatureActual (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureActualType >
    GenericFeatureActual (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureActualType >
    GenericFeatureActual (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureActualType >
    GenericFeatureActual (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureActualType >
    GenericFeatureActual (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureActualType >
    GenericFeatureActual (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureActualType >
    GenericFeatureActual (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureActualType >
    GenericFeatureActual (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureActualType >
    GenericFeatureActual (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureActualType >
    GenericFeatureActual (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureActualType >
    GenericFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureActualType >
    CircleFeatureActual (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureActualType >
    CircleFeatureActual (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureActualType >
    CircleFeatureActual (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureActualType >
    CircleFeatureActual (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureActualType >
    CircleFeatureActual (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureActualType >
    CircleFeatureActual (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureActualType >
    CircleFeatureActual (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureActualType >
    CircleFeatureActual (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureActualType >
    CircleFeatureActual (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureActualType >
    CircleFeatureActual (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureActualType >
    CircleFeatureActual (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureActualType >
    CircleFeatureActual (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureActualType >
    CircleFeatureActual (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureActualType >
    CircleFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureActualType >
    CompoundFeatureActual (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureActualType >
    CompoundFeatureActual (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureActualType >
    CompoundFeatureActual (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureActualType >
    CompoundFeatureActual (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureActualType >
    CompoundFeatureActual (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureActualType >
    CompoundFeatureActual (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureActualType >
    CompoundFeatureActual (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureActualType >
    CompoundFeatureActual (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureActualType >
    CompoundFeatureActual (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureActualType >
    CompoundFeatureActual (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureActualType >
    CompoundFeatureActual (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureActualType >
    CompoundFeatureActual (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureActualType >
    CompoundFeatureActual (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureActualType >
    CompoundFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureActualType >
    ConeFeatureActual (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureActualType >
    ConeFeatureActual (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureActualType >
    ConeFeatureActual (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureActualType >
    ConeFeatureActual (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureActualType >
    ConeFeatureActual (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureActualType >
    ConeFeatureActual (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureActualType >
    ConeFeatureActual (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureActualType >
    ConeFeatureActual (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureActualType >
    ConeFeatureActual (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureActualType >
    ConeFeatureActual (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureActualType >
    ConeFeatureActual (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureActualType >
    ConeFeatureActual (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureActualType >
    ConeFeatureActual (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureActualType >
    ConeFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureActualType >
    ConicalSegmentFeatureActual (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureActualType >
    ConicalSegmentFeatureActual (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureActualType >
    ConicalSegmentFeatureActual (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureActualType >
    ConicalSegmentFeatureActual (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureActualType >
    ConicalSegmentFeatureActual (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureActualType >
    ConicalSegmentFeatureActual (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureActualType >
    ConicalSegmentFeatureActual (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureActualType >
    ConicalSegmentFeatureActual (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureActualType >
    ConicalSegmentFeatureActual (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureActualType >
    ConicalSegmentFeatureActual (::xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureActualType >
    ConicalSegmentFeatureActual (::xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureActualType >
    ConicalSegmentFeatureActual (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureActualType >
    ConicalSegmentFeatureActual (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureActualType >
    ConicalSegmentFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureActualType >
    CuboidFeatureActual (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureActualType >
    CuboidFeatureActual (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureActualType >
    CuboidFeatureActual (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureActualType >
    CuboidFeatureActual (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureActualType >
    CuboidFeatureActual (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureActualType >
    CuboidFeatureActual (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureActualType >
    CuboidFeatureActual (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureActualType >
    CuboidFeatureActual (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureActualType >
    CuboidFeatureActual (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureActualType >
    CuboidFeatureActual (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureActualType >
    CuboidFeatureActual (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureActualType >
    CuboidFeatureActual (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureActualType >
    CuboidFeatureActual (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureActualType >
    CuboidFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureActualType >
    CylinderFeatureActual (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureActualType >
    CylinderFeatureActual (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureActualType >
    CylinderFeatureActual (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureActualType >
    CylinderFeatureActual (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureActualType >
    CylinderFeatureActual (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureActualType >
    CylinderFeatureActual (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureActualType >
    CylinderFeatureActual (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureActualType >
    CylinderFeatureActual (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureActualType >
    CylinderFeatureActual (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureActualType >
    CylinderFeatureActual (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureActualType >
    CylinderFeatureActual (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureActualType >
    CylinderFeatureActual (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureActualType >
    CylinderFeatureActual (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureActualType >
    CylinderFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureActualType >
    CylindricalSegmentFeatureActual (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureActualType >
    CylindricalSegmentFeatureActual (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureActualType >
    CylindricalSegmentFeatureActual (const ::std::string& uri,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureActualType >
    CylindricalSegmentFeatureActual (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureActualType >
    CylindricalSegmentFeatureActual (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureActualType >
    CylindricalSegmentFeatureActual (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureActualType >
    CylindricalSegmentFeatureActual (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureActualType >
    CylindricalSegmentFeatureActual (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureActualType >
    CylindricalSegmentFeatureActual (::std::istream& is,
                                     const ::std::string& id,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureActualType >
    CylindricalSegmentFeatureActual (::xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureActualType >
    CylindricalSegmentFeatureActual (::xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureActualType >
    CylindricalSegmentFeatureActual (::xercesc::InputSource& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureActualType >
    CylindricalSegmentFeatureActual (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureActualType >
    CylindricalSegmentFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureActualType >
    EdgePointFeatureActual (const ::std::string& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureActualType >
    EdgePointFeatureActual (const ::std::string& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureActualType >
    EdgePointFeatureActual (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureActualType >
    EdgePointFeatureActual (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureActualType >
    EdgePointFeatureActual (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureActualType >
    EdgePointFeatureActual (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureActualType >
    EdgePointFeatureActual (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureActualType >
    EdgePointFeatureActual (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureActualType >
    EdgePointFeatureActual (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureActualType >
    EdgePointFeatureActual (::xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureActualType >
    EdgePointFeatureActual (::xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureActualType >
    EdgePointFeatureActual (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureActualType >
    EdgePointFeatureActual (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureActualType >
    EdgePointFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureActualType >
    EllipseFeatureActual (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureActualType >
    EllipseFeatureActual (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureActualType >
    EllipseFeatureActual (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureActualType >
    EllipseFeatureActual (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureActualType >
    EllipseFeatureActual (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureActualType >
    EllipseFeatureActual (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureActualType >
    EllipseFeatureActual (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureActualType >
    EllipseFeatureActual (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureActualType >
    EllipseFeatureActual (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureActualType >
    EllipseFeatureActual (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureActualType >
    EllipseFeatureActual (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureActualType >
    EllipseFeatureActual (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureActualType >
    EllipseFeatureActual (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureActualType >
    EllipseFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureActualType >
    ElongatedCylinderFeatureActual (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureActualType >
    ElongatedCylinderFeatureActual (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureActualType >
    ElongatedCylinderFeatureActual (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureActualType >
    ElongatedCylinderFeatureActual (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureActualType >
    ElongatedCylinderFeatureActual (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureActualType >
    ElongatedCylinderFeatureActual (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureActualType >
    ElongatedCylinderFeatureActual (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureActualType >
    ElongatedCylinderFeatureActual (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureActualType >
    ElongatedCylinderFeatureActual (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureActualType >
    ElongatedCylinderFeatureActual (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureActualType >
    ElongatedCylinderFeatureActual (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureActualType >
    ElongatedCylinderFeatureActual (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureActualType >
    ElongatedCylinderFeatureActual (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureActualType >
    ElongatedCylinderFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureActualType >
    ExtrudedCrossSectionFeatureActual (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureActualType >
    ExtrudedCrossSectionFeatureActual (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureActualType >
    ExtrudedCrossSectionFeatureActual (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureActualType >
    ExtrudedCrossSectionFeatureActual (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureActualType >
    ExtrudedCrossSectionFeatureActual (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureActualType >
    ExtrudedCrossSectionFeatureActual (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureActualType >
    ExtrudedCrossSectionFeatureActual (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureActualType >
    ExtrudedCrossSectionFeatureActual (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureActualType >
    ExtrudedCrossSectionFeatureActual (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureActualType >
    ExtrudedCrossSectionFeatureActual (::xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureActualType >
    ExtrudedCrossSectionFeatureActual (::xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureActualType >
    ExtrudedCrossSectionFeatureActual (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureActualType >
    ExtrudedCrossSectionFeatureActual (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureActualType >
    ExtrudedCrossSectionFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LineFeatureActualType >
    LineFeatureActual (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureActualType >
    LineFeatureActual (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureActualType >
    LineFeatureActual (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LineFeatureActualType >
    LineFeatureActual (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureActualType >
    LineFeatureActual (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureActualType >
    LineFeatureActual (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureActualType >
    LineFeatureActual (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureActualType >
    LineFeatureActual (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureActualType >
    LineFeatureActual (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LineFeatureActualType >
    LineFeatureActual (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureActualType >
    LineFeatureActual (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureActualType >
    LineFeatureActual (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LineFeatureActualType >
    LineFeatureActual (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureActualType >
    LineFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureActualType >
    OppositeLinesFeatureActual (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureActualType >
    OppositeLinesFeatureActual (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureActualType >
    OppositeLinesFeatureActual (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureActualType >
    OppositeLinesFeatureActual (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureActualType >
    OppositeLinesFeatureActual (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureActualType >
    OppositeLinesFeatureActual (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureActualType >
    OppositeLinesFeatureActual (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureActualType >
    OppositeLinesFeatureActual (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureActualType >
    OppositeLinesFeatureActual (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureActualType >
    OppositeLinesFeatureActual (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureActualType >
    OppositeLinesFeatureActual (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureActualType >
    OppositeLinesFeatureActual (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureActualType >
    OppositeLinesFeatureActual (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureActualType >
    OppositeLinesFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureActualType >
    OppositePlanesFeatureActual (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureActualType >
    OppositePlanesFeatureActual (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureActualType >
    OppositePlanesFeatureActual (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureActualType >
    OppositePlanesFeatureActual (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureActualType >
    OppositePlanesFeatureActual (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureActualType >
    OppositePlanesFeatureActual (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureActualType >
    OppositePlanesFeatureActual (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureActualType >
    OppositePlanesFeatureActual (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureActualType >
    OppositePlanesFeatureActual (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureActualType >
    OppositePlanesFeatureActual (::xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureActualType >
    OppositePlanesFeatureActual (::xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureActualType >
    OppositePlanesFeatureActual (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureActualType >
    OppositePlanesFeatureActual (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureActualType >
    OppositePlanesFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureActualType >
    PatternFeatureActual (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureActualType >
    PatternFeatureActual (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureActualType >
    PatternFeatureActual (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureActualType >
    PatternFeatureActual (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureActualType >
    PatternFeatureActual (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureActualType >
    PatternFeatureActual (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureActualType >
    PatternFeatureActual (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureActualType >
    PatternFeatureActual (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureActualType >
    PatternFeatureActual (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureActualType >
    PatternFeatureActual (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureActualType >
    PatternFeatureActual (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureActualType >
    PatternFeatureActual (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureActualType >
    PatternFeatureActual (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureActualType >
    PatternFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureActualType >
    PlaneFeatureActual (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureActualType >
    PlaneFeatureActual (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureActualType >
    PlaneFeatureActual (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureActualType >
    PlaneFeatureActual (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureActualType >
    PlaneFeatureActual (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureActualType >
    PlaneFeatureActual (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureActualType >
    PlaneFeatureActual (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureActualType >
    PlaneFeatureActual (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureActualType >
    PlaneFeatureActual (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureActualType >
    PlaneFeatureActual (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureActualType >
    PlaneFeatureActual (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureActualType >
    PlaneFeatureActual (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureActualType >
    PlaneFeatureActual (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureActualType >
    PlaneFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureActualType >
    PointDefinedCurveFeatureActual (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureActualType >
    PointDefinedCurveFeatureActual (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureActualType >
    PointDefinedCurveFeatureActual (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureActualType >
    PointDefinedCurveFeatureActual (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureActualType >
    PointDefinedCurveFeatureActual (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureActualType >
    PointDefinedCurveFeatureActual (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureActualType >
    PointDefinedCurveFeatureActual (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureActualType >
    PointDefinedCurveFeatureActual (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureActualType >
    PointDefinedCurveFeatureActual (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureActualType >
    PointDefinedCurveFeatureActual (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureActualType >
    PointDefinedCurveFeatureActual (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureActualType >
    PointDefinedCurveFeatureActual (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureActualType >
    PointDefinedCurveFeatureActual (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureActualType >
    PointDefinedCurveFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureActualType >
    PointDefinedSurfaceFeatureActual (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureActualType >
    PointDefinedSurfaceFeatureActual (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureActualType >
    PointDefinedSurfaceFeatureActual (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureActualType >
    PointDefinedSurfaceFeatureActual (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureActualType >
    PointDefinedSurfaceFeatureActual (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureActualType >
    PointDefinedSurfaceFeatureActual (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureActualType >
    PointDefinedSurfaceFeatureActual (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureActualType >
    PointDefinedSurfaceFeatureActual (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureActualType >
    PointDefinedSurfaceFeatureActual (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureActualType >
    PointDefinedSurfaceFeatureActual (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureActualType >
    PointDefinedSurfaceFeatureActual (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureActualType >
    PointDefinedSurfaceFeatureActual (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureActualType >
    PointDefinedSurfaceFeatureActual (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureActualType >
    PointDefinedSurfaceFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PointFeatureActualType >
    PointFeatureActual (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureActualType >
    PointFeatureActual (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureActualType >
    PointFeatureActual (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PointFeatureActualType >
    PointFeatureActual (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureActualType >
    PointFeatureActual (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureActualType >
    PointFeatureActual (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureActualType >
    PointFeatureActual (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureActualType >
    PointFeatureActual (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureActualType >
    PointFeatureActual (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PointFeatureActualType >
    PointFeatureActual (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureActualType >
    PointFeatureActual (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureActualType >
    PointFeatureActual (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PointFeatureActualType >
    PointFeatureActual (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureActualType >
    PointFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureActualType >
    ProfileGroupFeatureActual (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureActualType >
    ProfileGroupFeatureActual (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureActualType >
    ProfileGroupFeatureActual (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureActualType >
    ProfileGroupFeatureActual (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureActualType >
    ProfileGroupFeatureActual (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureActualType >
    ProfileGroupFeatureActual (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureActualType >
    ProfileGroupFeatureActual (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureActualType >
    ProfileGroupFeatureActual (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureActualType >
    ProfileGroupFeatureActual (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureActualType >
    ProfileGroupFeatureActual (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureActualType >
    ProfileGroupFeatureActual (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureActualType >
    ProfileGroupFeatureActual (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureActualType >
    ProfileGroupFeatureActual (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureActualType >
    ProfileGroupFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureActualType >
    RunoutGroupFeatureActual (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureActualType >
    RunoutGroupFeatureActual (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureActualType >
    RunoutGroupFeatureActual (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureActualType >
    RunoutGroupFeatureActual (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureActualType >
    RunoutGroupFeatureActual (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureActualType >
    RunoutGroupFeatureActual (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureActualType >
    RunoutGroupFeatureActual (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureActualType >
    RunoutGroupFeatureActual (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureActualType >
    RunoutGroupFeatureActual (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureActualType >
    RunoutGroupFeatureActual (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureActualType >
    RunoutGroupFeatureActual (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureActualType >
    RunoutGroupFeatureActual (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureActualType >
    RunoutGroupFeatureActual (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureActualType >
    RunoutGroupFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureActualType >
    SphereFeatureActual (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureActualType >
    SphereFeatureActual (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureActualType >
    SphereFeatureActual (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureActualType >
    SphereFeatureActual (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureActualType >
    SphereFeatureActual (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureActualType >
    SphereFeatureActual (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureActualType >
    SphereFeatureActual (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureActualType >
    SphereFeatureActual (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureActualType >
    SphereFeatureActual (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureActualType >
    SphereFeatureActual (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureActualType >
    SphereFeatureActual (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureActualType >
    SphereFeatureActual (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureActualType >
    SphereFeatureActual (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureActualType >
    SphereFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureActualType >
    SphericalSegmentFeatureActual (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureActualType >
    SphericalSegmentFeatureActual (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureActualType >
    SphericalSegmentFeatureActual (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureActualType >
    SphericalSegmentFeatureActual (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureActualType >
    SphericalSegmentFeatureActual (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureActualType >
    SphericalSegmentFeatureActual (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureActualType >
    SphericalSegmentFeatureActual (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureActualType >
    SphericalSegmentFeatureActual (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureActualType >
    SphericalSegmentFeatureActual (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureActualType >
    SphericalSegmentFeatureActual (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureActualType >
    SphericalSegmentFeatureActual (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureActualType >
    SphericalSegmentFeatureActual (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureActualType >
    SphericalSegmentFeatureActual (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureActualType >
    SphericalSegmentFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureActualType >
    SurfaceOfRevolutionFeatureActual (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureActualType >
    SurfaceOfRevolutionFeatureActual (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureActualType >
    SurfaceOfRevolutionFeatureActual (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureActualType >
    SurfaceOfRevolutionFeatureActual (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureActualType >
    SurfaceOfRevolutionFeatureActual (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureActualType >
    SurfaceOfRevolutionFeatureActual (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureActualType >
    SurfaceOfRevolutionFeatureActual (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureActualType >
    SurfaceOfRevolutionFeatureActual (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureActualType >
    SurfaceOfRevolutionFeatureActual (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureActualType >
    SurfaceOfRevolutionFeatureActual (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureActualType >
    SurfaceOfRevolutionFeatureActual (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureActualType >
    SurfaceOfRevolutionFeatureActual (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureActualType >
    SurfaceOfRevolutionFeatureActual (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureActualType >
    SurfaceOfRevolutionFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureActualType >
    ThreadedFeatureActual (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureActualType >
    ThreadedFeatureActual (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureActualType >
    ThreadedFeatureActual (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureActualType >
    ThreadedFeatureActual (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureActualType >
    ThreadedFeatureActual (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureActualType >
    ThreadedFeatureActual (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureActualType >
    ThreadedFeatureActual (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureActualType >
    ThreadedFeatureActual (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureActualType >
    ThreadedFeatureActual (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureActualType >
    ThreadedFeatureActual (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureActualType >
    ThreadedFeatureActual (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureActualType >
    ThreadedFeatureActual (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureActualType >
    ThreadedFeatureActual (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureActualType >
    ThreadedFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureActualType >
    ToroidalSegmentFeatureActual (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureActualType >
    ToroidalSegmentFeatureActual (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureActualType >
    ToroidalSegmentFeatureActual (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureActualType >
    ToroidalSegmentFeatureActual (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureActualType >
    ToroidalSegmentFeatureActual (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureActualType >
    ToroidalSegmentFeatureActual (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureActualType >
    ToroidalSegmentFeatureActual (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureActualType >
    ToroidalSegmentFeatureActual (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureActualType >
    ToroidalSegmentFeatureActual (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureActualType >
    ToroidalSegmentFeatureActual (::xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureActualType >
    ToroidalSegmentFeatureActual (::xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureActualType >
    ToroidalSegmentFeatureActual (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureActualType >
    ToroidalSegmentFeatureActual (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureActualType >
    ToroidalSegmentFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureActualType >
    TorusFeatureActual (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureActualType >
    TorusFeatureActual (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureActualType >
    TorusFeatureActual (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureActualType >
    TorusFeatureActual (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureActualType >
    TorusFeatureActual (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureActualType >
    TorusFeatureActual (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureActualType >
    TorusFeatureActual (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureActualType >
    TorusFeatureActual (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureActualType >
    TorusFeatureActual (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureActualType >
    TorusFeatureActual (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureActualType >
    TorusFeatureActual (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureActualType >
    TorusFeatureActual (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureActualType >
    TorusFeatureActual (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureActualType >
    TorusFeatureActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureItemBaseType >
    FeatureItem (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureItemBaseType >
    FeatureItem (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureItemBaseType >
    FeatureItem (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureItemBaseType >
    FeatureItem (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureItemBaseType >
    FeatureItem (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureItemBaseType >
    FeatureItem (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureItemBaseType >
    FeatureItem (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureItemBaseType >
    FeatureItem (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureItemBaseType >
    FeatureItem (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureItemBaseType >
    FeatureItem (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureItemBaseType >
    FeatureItem (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureItemBaseType >
    FeatureItem (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureItemBaseType >
    FeatureItem (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureItemBaseType >
    FeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureItemType >
    ArcFeatureItem (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureItemType >
    ArcFeatureItem (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureItemType >
    ArcFeatureItem (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureItemType >
    ArcFeatureItem (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureItemType >
    ArcFeatureItem (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureItemType >
    ArcFeatureItem (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureItemType >
    ArcFeatureItem (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureItemType >
    ArcFeatureItem (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureItemType >
    ArcFeatureItem (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureItemType >
    ArcFeatureItem (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureItemType >
    ArcFeatureItem (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureItemType >
    ArcFeatureItem (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureItemType >
    ArcFeatureItem (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArcFeatureItemType >
    ArcFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureItemType >
    GenericFeatureItem (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureItemType >
    GenericFeatureItem (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureItemType >
    GenericFeatureItem (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureItemType >
    GenericFeatureItem (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureItemType >
    GenericFeatureItem (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureItemType >
    GenericFeatureItem (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureItemType >
    GenericFeatureItem (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureItemType >
    GenericFeatureItem (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureItemType >
    GenericFeatureItem (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureItemType >
    GenericFeatureItem (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureItemType >
    GenericFeatureItem (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureItemType >
    GenericFeatureItem (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureItemType >
    GenericFeatureItem (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GenericFeatureItemType >
    GenericFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureItemType >
    CircleFeatureItem (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureItemType >
    CircleFeatureItem (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureItemType >
    CircleFeatureItem (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureItemType >
    CircleFeatureItem (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureItemType >
    CircleFeatureItem (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureItemType >
    CircleFeatureItem (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureItemType >
    CircleFeatureItem (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureItemType >
    CircleFeatureItem (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureItemType >
    CircleFeatureItem (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureItemType >
    CircleFeatureItem (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureItemType >
    CircleFeatureItem (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureItemType >
    CircleFeatureItem (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureItemType >
    CircleFeatureItem (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircleFeatureItemType >
    CircleFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureItemType >
    CompoundFeatureItem (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureItemType >
    CompoundFeatureItem (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureItemType >
    CompoundFeatureItem (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureItemType >
    CompoundFeatureItem (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureItemType >
    CompoundFeatureItem (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureItemType >
    CompoundFeatureItem (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureItemType >
    CompoundFeatureItem (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureItemType >
    CompoundFeatureItem (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureItemType >
    CompoundFeatureItem (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureItemType >
    CompoundFeatureItem (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureItemType >
    CompoundFeatureItem (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureItemType >
    CompoundFeatureItem (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureItemType >
    CompoundFeatureItem (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CompoundFeatureItemType >
    CompoundFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureItemType >
    ConeFeatureItem (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureItemType >
    ConeFeatureItem (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureItemType >
    ConeFeatureItem (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureItemType >
    ConeFeatureItem (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureItemType >
    ConeFeatureItem (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureItemType >
    ConeFeatureItem (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureItemType >
    ConeFeatureItem (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureItemType >
    ConeFeatureItem (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureItemType >
    ConeFeatureItem (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureItemType >
    ConeFeatureItem (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureItemType >
    ConeFeatureItem (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureItemType >
    ConeFeatureItem (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureItemType >
    ConeFeatureItem (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConeFeatureItemType >
    ConeFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureItemType >
    ConicalSegmentFeatureItem (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureItemType >
    ConicalSegmentFeatureItem (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureItemType >
    ConicalSegmentFeatureItem (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureItemType >
    ConicalSegmentFeatureItem (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureItemType >
    ConicalSegmentFeatureItem (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureItemType >
    ConicalSegmentFeatureItem (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureItemType >
    ConicalSegmentFeatureItem (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureItemType >
    ConicalSegmentFeatureItem (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureItemType >
    ConicalSegmentFeatureItem (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureItemType >
    ConicalSegmentFeatureItem (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureItemType >
    ConicalSegmentFeatureItem (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureItemType >
    ConicalSegmentFeatureItem (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureItemType >
    ConicalSegmentFeatureItem (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConicalSegmentFeatureItemType >
    ConicalSegmentFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureItemType >
    CuboidFeatureItem (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureItemType >
    CuboidFeatureItem (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureItemType >
    CuboidFeatureItem (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureItemType >
    CuboidFeatureItem (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureItemType >
    CuboidFeatureItem (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureItemType >
    CuboidFeatureItem (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureItemType >
    CuboidFeatureItem (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureItemType >
    CuboidFeatureItem (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureItemType >
    CuboidFeatureItem (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureItemType >
    CuboidFeatureItem (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureItemType >
    CuboidFeatureItem (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureItemType >
    CuboidFeatureItem (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureItemType >
    CuboidFeatureItem (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CuboidFeatureItemType >
    CuboidFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureItemType >
    CylinderFeatureItem (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureItemType >
    CylinderFeatureItem (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureItemType >
    CylinderFeatureItem (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureItemType >
    CylinderFeatureItem (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureItemType >
    CylinderFeatureItem (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureItemType >
    CylinderFeatureItem (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureItemType >
    CylinderFeatureItem (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureItemType >
    CylinderFeatureItem (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureItemType >
    CylinderFeatureItem (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureItemType >
    CylinderFeatureItem (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureItemType >
    CylinderFeatureItem (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureItemType >
    CylinderFeatureItem (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureItemType >
    CylinderFeatureItem (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylinderFeatureItemType >
    CylinderFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureItemType >
    CylindricalSegmentFeatureItem (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureItemType >
    CylindricalSegmentFeatureItem (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureItemType >
    CylindricalSegmentFeatureItem (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureItemType >
    CylindricalSegmentFeatureItem (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureItemType >
    CylindricalSegmentFeatureItem (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureItemType >
    CylindricalSegmentFeatureItem (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureItemType >
    CylindricalSegmentFeatureItem (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureItemType >
    CylindricalSegmentFeatureItem (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureItemType >
    CylindricalSegmentFeatureItem (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureItemType >
    CylindricalSegmentFeatureItem (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureItemType >
    CylindricalSegmentFeatureItem (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureItemType >
    CylindricalSegmentFeatureItem (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureItemType >
    CylindricalSegmentFeatureItem (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricalSegmentFeatureItemType >
    CylindricalSegmentFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureItemType >
    EdgePointFeatureItem (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureItemType >
    EdgePointFeatureItem (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureItemType >
    EdgePointFeatureItem (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureItemType >
    EdgePointFeatureItem (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureItemType >
    EdgePointFeatureItem (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureItemType >
    EdgePointFeatureItem (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureItemType >
    EdgePointFeatureItem (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureItemType >
    EdgePointFeatureItem (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureItemType >
    EdgePointFeatureItem (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureItemType >
    EdgePointFeatureItem (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureItemType >
    EdgePointFeatureItem (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureItemType >
    EdgePointFeatureItem (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureItemType >
    EdgePointFeatureItem (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgePointFeatureItemType >
    EdgePointFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureItemType >
    EllipseFeatureItem (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureItemType >
    EllipseFeatureItem (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureItemType >
    EllipseFeatureItem (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureItemType >
    EllipseFeatureItem (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureItemType >
    EllipseFeatureItem (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureItemType >
    EllipseFeatureItem (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureItemType >
    EllipseFeatureItem (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureItemType >
    EllipseFeatureItem (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureItemType >
    EllipseFeatureItem (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureItemType >
    EllipseFeatureItem (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureItemType >
    EllipseFeatureItem (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureItemType >
    EllipseFeatureItem (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureItemType >
    EllipseFeatureItem (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EllipseFeatureItemType >
    EllipseFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureItemType >
    ElongatedCylinderFeatureItem (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureItemType >
    ElongatedCylinderFeatureItem (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureItemType >
    ElongatedCylinderFeatureItem (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureItemType >
    ElongatedCylinderFeatureItem (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureItemType >
    ElongatedCylinderFeatureItem (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureItemType >
    ElongatedCylinderFeatureItem (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureItemType >
    ElongatedCylinderFeatureItem (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureItemType >
    ElongatedCylinderFeatureItem (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureItemType >
    ElongatedCylinderFeatureItem (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureItemType >
    ElongatedCylinderFeatureItem (::xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureItemType >
    ElongatedCylinderFeatureItem (::xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureItemType >
    ElongatedCylinderFeatureItem (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureItemType >
    ElongatedCylinderFeatureItem (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ElongatedCylinderFeatureItemType >
    ElongatedCylinderFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureItemType >
    ExtrudedCrossSectionFeatureItem (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureItemType >
    ExtrudedCrossSectionFeatureItem (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureItemType >
    ExtrudedCrossSectionFeatureItem (const ::std::string& uri,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureItemType >
    ExtrudedCrossSectionFeatureItem (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureItemType >
    ExtrudedCrossSectionFeatureItem (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureItemType >
    ExtrudedCrossSectionFeatureItem (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureItemType >
    ExtrudedCrossSectionFeatureItem (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureItemType >
    ExtrudedCrossSectionFeatureItem (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureItemType >
    ExtrudedCrossSectionFeatureItem (::std::istream& is,
                                     const ::std::string& id,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureItemType >
    ExtrudedCrossSectionFeatureItem (::xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureItemType >
    ExtrudedCrossSectionFeatureItem (::xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureItemType >
    ExtrudedCrossSectionFeatureItem (::xercesc::InputSource& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureItemType >
    ExtrudedCrossSectionFeatureItem (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ExtrudedCrossSectionFeatureItemType >
    ExtrudedCrossSectionFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LineFeatureItemType >
    LineFeatureItem (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureItemType >
    LineFeatureItem (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureItemType >
    LineFeatureItem (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LineFeatureItemType >
    LineFeatureItem (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureItemType >
    LineFeatureItem (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureItemType >
    LineFeatureItem (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureItemType >
    LineFeatureItem (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureItemType >
    LineFeatureItem (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureItemType >
    LineFeatureItem (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LineFeatureItemType >
    LineFeatureItem (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureItemType >
    LineFeatureItem (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureItemType >
    LineFeatureItem (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LineFeatureItemType >
    LineFeatureItem (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineFeatureItemType >
    LineFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureItemType >
    OppositeLinesFeatureItem (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureItemType >
    OppositeLinesFeatureItem (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureItemType >
    OppositeLinesFeatureItem (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureItemType >
    OppositeLinesFeatureItem (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureItemType >
    OppositeLinesFeatureItem (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureItemType >
    OppositeLinesFeatureItem (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureItemType >
    OppositeLinesFeatureItem (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureItemType >
    OppositeLinesFeatureItem (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureItemType >
    OppositeLinesFeatureItem (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureItemType >
    OppositeLinesFeatureItem (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureItemType >
    OppositeLinesFeatureItem (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureItemType >
    OppositeLinesFeatureItem (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureItemType >
    OppositeLinesFeatureItem (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositeLinesFeatureItemType >
    OppositeLinesFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureItemType >
    OppositePlanesFeatureItem (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureItemType >
    OppositePlanesFeatureItem (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureItemType >
    OppositePlanesFeatureItem (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureItemType >
    OppositePlanesFeatureItem (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureItemType >
    OppositePlanesFeatureItem (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureItemType >
    OppositePlanesFeatureItem (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureItemType >
    OppositePlanesFeatureItem (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureItemType >
    OppositePlanesFeatureItem (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureItemType >
    OppositePlanesFeatureItem (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureItemType >
    OppositePlanesFeatureItem (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureItemType >
    OppositePlanesFeatureItem (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureItemType >
    OppositePlanesFeatureItem (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureItemType >
    OppositePlanesFeatureItem (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OppositePlanesFeatureItemType >
    OppositePlanesFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureItemType >
    PatternFeatureItem (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureItemType >
    PatternFeatureItem (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureItemType >
    PatternFeatureItem (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureItemType >
    PatternFeatureItem (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureItemType >
    PatternFeatureItem (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureItemType >
    PatternFeatureItem (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureItemType >
    PatternFeatureItem (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureItemType >
    PatternFeatureItem (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureItemType >
    PatternFeatureItem (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureItemType >
    PatternFeatureItem (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureItemType >
    PatternFeatureItem (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureItemType >
    PatternFeatureItem (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureItemType >
    PatternFeatureItem (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PatternFeatureItemType >
    PatternFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureItemType >
    PlaneFeatureItem (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureItemType >
    PlaneFeatureItem (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureItemType >
    PlaneFeatureItem (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureItemType >
    PlaneFeatureItem (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureItemType >
    PlaneFeatureItem (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureItemType >
    PlaneFeatureItem (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureItemType >
    PlaneFeatureItem (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureItemType >
    PlaneFeatureItem (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureItemType >
    PlaneFeatureItem (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureItemType >
    PlaneFeatureItem (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureItemType >
    PlaneFeatureItem (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureItemType >
    PlaneFeatureItem (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureItemType >
    PlaneFeatureItem (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlaneFeatureItemType >
    PlaneFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureItemType >
    PointDefinedCurveFeatureItem (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureItemType >
    PointDefinedCurveFeatureItem (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureItemType >
    PointDefinedCurveFeatureItem (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureItemType >
    PointDefinedCurveFeatureItem (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureItemType >
    PointDefinedCurveFeatureItem (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureItemType >
    PointDefinedCurveFeatureItem (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureItemType >
    PointDefinedCurveFeatureItem (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureItemType >
    PointDefinedCurveFeatureItem (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureItemType >
    PointDefinedCurveFeatureItem (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureItemType >
    PointDefinedCurveFeatureItem (::xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureItemType >
    PointDefinedCurveFeatureItem (::xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureItemType >
    PointDefinedCurveFeatureItem (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureItemType >
    PointDefinedCurveFeatureItem (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedCurveFeatureItemType >
    PointDefinedCurveFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureItemType >
    PointDefinedSurfaceFeatureItem (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureItemType >
    PointDefinedSurfaceFeatureItem (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureItemType >
    PointDefinedSurfaceFeatureItem (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureItemType >
    PointDefinedSurfaceFeatureItem (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureItemType >
    PointDefinedSurfaceFeatureItem (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureItemType >
    PointDefinedSurfaceFeatureItem (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureItemType >
    PointDefinedSurfaceFeatureItem (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureItemType >
    PointDefinedSurfaceFeatureItem (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureItemType >
    PointDefinedSurfaceFeatureItem (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureItemType >
    PointDefinedSurfaceFeatureItem (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureItemType >
    PointDefinedSurfaceFeatureItem (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureItemType >
    PointDefinedSurfaceFeatureItem (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureItemType >
    PointDefinedSurfaceFeatureItem (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointDefinedSurfaceFeatureItemType >
    PointDefinedSurfaceFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PointFeatureItemType >
    PointFeatureItem (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureItemType >
    PointFeatureItem (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureItemType >
    PointFeatureItem (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PointFeatureItemType >
    PointFeatureItem (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureItemType >
    PointFeatureItem (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureItemType >
    PointFeatureItem (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureItemType >
    PointFeatureItem (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureItemType >
    PointFeatureItem (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureItemType >
    PointFeatureItem (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PointFeatureItemType >
    PointFeatureItem (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureItemType >
    PointFeatureItem (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureItemType >
    PointFeatureItem (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PointFeatureItemType >
    PointFeatureItem (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointFeatureItemType >
    PointFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureItemType >
    ProfileGroupFeatureItem (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureItemType >
    ProfileGroupFeatureItem (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureItemType >
    ProfileGroupFeatureItem (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureItemType >
    ProfileGroupFeatureItem (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureItemType >
    ProfileGroupFeatureItem (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureItemType >
    ProfileGroupFeatureItem (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureItemType >
    ProfileGroupFeatureItem (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureItemType >
    ProfileGroupFeatureItem (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureItemType >
    ProfileGroupFeatureItem (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureItemType >
    ProfileGroupFeatureItem (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureItemType >
    ProfileGroupFeatureItem (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureItemType >
    ProfileGroupFeatureItem (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureItemType >
    ProfileGroupFeatureItem (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProfileGroupFeatureItemType >
    ProfileGroupFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureItemType >
    RunoutGroupFeatureItem (const ::std::string& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureItemType >
    RunoutGroupFeatureItem (const ::std::string& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureItemType >
    RunoutGroupFeatureItem (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureItemType >
    RunoutGroupFeatureItem (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureItemType >
    RunoutGroupFeatureItem (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureItemType >
    RunoutGroupFeatureItem (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureItemType >
    RunoutGroupFeatureItem (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureItemType >
    RunoutGroupFeatureItem (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureItemType >
    RunoutGroupFeatureItem (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureItemType >
    RunoutGroupFeatureItem (::xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureItemType >
    RunoutGroupFeatureItem (::xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureItemType >
    RunoutGroupFeatureItem (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureItemType >
    RunoutGroupFeatureItem (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RunoutGroupFeatureItemType >
    RunoutGroupFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureItemType >
    SphereFeatureItem (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureItemType >
    SphereFeatureItem (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureItemType >
    SphereFeatureItem (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureItemType >
    SphereFeatureItem (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureItemType >
    SphereFeatureItem (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureItemType >
    SphereFeatureItem (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureItemType >
    SphereFeatureItem (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureItemType >
    SphereFeatureItem (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureItemType >
    SphereFeatureItem (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureItemType >
    SphereFeatureItem (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureItemType >
    SphereFeatureItem (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureItemType >
    SphereFeatureItem (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureItemType >
    SphereFeatureItem (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphereFeatureItemType >
    SphereFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureItemType >
    SphericalSegmentFeatureItem (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureItemType >
    SphericalSegmentFeatureItem (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureItemType >
    SphericalSegmentFeatureItem (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureItemType >
    SphericalSegmentFeatureItem (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureItemType >
    SphericalSegmentFeatureItem (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureItemType >
    SphericalSegmentFeatureItem (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureItemType >
    SphericalSegmentFeatureItem (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureItemType >
    SphericalSegmentFeatureItem (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureItemType >
    SphericalSegmentFeatureItem (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureItemType >
    SphericalSegmentFeatureItem (::xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureItemType >
    SphericalSegmentFeatureItem (::xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureItemType >
    SphericalSegmentFeatureItem (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureItemType >
    SphericalSegmentFeatureItem (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SphericalSegmentFeatureItemType >
    SphericalSegmentFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureItemType >
    SurfaceOfRevolutionFeatureItem (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureItemType >
    SurfaceOfRevolutionFeatureItem (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureItemType >
    SurfaceOfRevolutionFeatureItem (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureItemType >
    SurfaceOfRevolutionFeatureItem (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureItemType >
    SurfaceOfRevolutionFeatureItem (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureItemType >
    SurfaceOfRevolutionFeatureItem (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureItemType >
    SurfaceOfRevolutionFeatureItem (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureItemType >
    SurfaceOfRevolutionFeatureItem (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureItemType >
    SurfaceOfRevolutionFeatureItem (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureItemType >
    SurfaceOfRevolutionFeatureItem (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureItemType >
    SurfaceOfRevolutionFeatureItem (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureItemType >
    SurfaceOfRevolutionFeatureItem (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureItemType >
    SurfaceOfRevolutionFeatureItem (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceOfRevolutionFeatureItemType >
    SurfaceOfRevolutionFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureItemType >
    ThreadedFeatureItem (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureItemType >
    ThreadedFeatureItem (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureItemType >
    ThreadedFeatureItem (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureItemType >
    ThreadedFeatureItem (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureItemType >
    ThreadedFeatureItem (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureItemType >
    ThreadedFeatureItem (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureItemType >
    ThreadedFeatureItem (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureItemType >
    ThreadedFeatureItem (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureItemType >
    ThreadedFeatureItem (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureItemType >
    ThreadedFeatureItem (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureItemType >
    ThreadedFeatureItem (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureItemType >
    ThreadedFeatureItem (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureItemType >
    ThreadedFeatureItem (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadedFeatureItemType >
    ThreadedFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureItemType >
    ToroidalSegmentFeatureItem (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureItemType >
    ToroidalSegmentFeatureItem (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureItemType >
    ToroidalSegmentFeatureItem (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureItemType >
    ToroidalSegmentFeatureItem (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureItemType >
    ToroidalSegmentFeatureItem (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureItemType >
    ToroidalSegmentFeatureItem (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureItemType >
    ToroidalSegmentFeatureItem (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureItemType >
    ToroidalSegmentFeatureItem (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureItemType >
    ToroidalSegmentFeatureItem (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureItemType >
    ToroidalSegmentFeatureItem (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureItemType >
    ToroidalSegmentFeatureItem (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureItemType >
    ToroidalSegmentFeatureItem (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureItemType >
    ToroidalSegmentFeatureItem (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ToroidalSegmentFeatureItemType >
    ToroidalSegmentFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureItemType >
    TorusFeatureItem (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureItemType >
    TorusFeatureItem (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureItemType >
    TorusFeatureItem (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureItemType >
    TorusFeatureItem (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureItemType >
    TorusFeatureItem (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureItemType >
    TorusFeatureItem (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureItemType >
    TorusFeatureItem (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureItemType >
    TorusFeatureItem (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureItemType >
    TorusFeatureItem (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureItemType >
    TorusFeatureItem (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureItemType >
    TorusFeatureItem (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureItemType >
    TorusFeatureItem (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureItemType >
    TorusFeatureItem (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TorusFeatureItemType >
    TorusFeatureItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xsd
{
  namespace qif2
  {
    void
    operator<< (::xercesc::DOMElement&, const FeatureBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const FeatureItemBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const FeatureDefinitionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const PointListNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const FeatureNominalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const PointListActualType&);

    void
    operator<< (::xercesc::DOMElement&, const FeatureActualBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const SetFeatureType&);

    void
    operator<< (::xercesc::DOMAttr&, const SetFeatureType&);

    void
    operator<< (::xml_schema::list_stream&,
                const SetFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const MeasuredFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const ConstructionMethodBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const PointRangeType&);

    void
    operator<< (::xercesc::DOMElement&, const PointIndexType&);

    void
    operator<< (::xercesc::DOMElement&, const BaseFeaturePointSetType&);

    void
    operator<< (::xercesc::DOMElement&, const BaseFeaturePointListType&);

    void
    operator<< (::xercesc::DOMElement&, const TransformationReferenceType&);

    void
    operator<< (::xercesc::DOMElement&, const ArcConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const ArcBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const ArcRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const ArcProjectionType&);

    void
    operator<< (::xercesc::DOMElement&, const ArcCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const ArcCastType&);

    void
    operator<< (::xercesc::DOMElement&, const ArcTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const ArcFromScanType&);

    void
    operator<< (::xercesc::DOMElement&, const ArcExtractType&);

    void
    operator<< (::xercesc::DOMElement&, const ArcCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const ArcCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const ArcActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const ArcFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const ArcFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const ArcFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const ArcFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const CircleConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const CircleBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const CircleRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const CircleIntersectionType&);

    void
    operator<< (::xercesc::DOMElement&, const CircleProjectionType&);

    void
    operator<< (::xercesc::DOMElement&, const CircleCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const CircleCastType&);

    void
    operator<< (::xercesc::DOMElement&, const CircleTangentType&);

    void
    operator<< (::xercesc::DOMElement&, const CircleTangentThroughType&);

    void
    operator<< (::xercesc::DOMElement&, const CircleTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const CircleFromConeType&);

    void
    operator<< (::xercesc::DOMElement&, const CircleFromScanType&);

    void
    operator<< (::xercesc::DOMElement&, const CircleCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const CircleCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const CircleActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const CircleFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const CircleFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const CircleFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const CircleFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const ConeConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const ConeBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const ConeRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const ConeCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const ConeCastType&);

    void
    operator<< (::xercesc::DOMElement&, const ConeTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const ConeFromScanType&);

    void
    operator<< (::xercesc::DOMElement&, const ConeCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const ConeCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const ConeActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const ConeFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const ConeFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const ConeFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const ConeFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const ConicalSegmentConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const ConicalSegmentBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const ConicalSegmentRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const ConicalSegmentCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const ConicalSegmentCastType&);

    void
    operator<< (::xercesc::DOMElement&, const ConicalSegmentTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const ConicalSegmentCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const ConicalSegmentCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const ConicalSegmentActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const ConicalSegmentFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const ConicalSegmentFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const ConicalSegmentFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const ConicalSegmentFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const CuboidConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const CuboidBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const CuboidRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const CuboidCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const CuboidCastType&);

    void
    operator<< (::xercesc::DOMElement&, const CuboidTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const CuboidCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const CuboidCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const CuboidActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const CuboidFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const CuboidFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const CuboidFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const CuboidFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const CylinderConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const CylinderBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const CylinderRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const CylinderCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const CylinderCastType&);

    void
    operator<< (::xercesc::DOMElement&, const CylinderTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const CylinderFromScanType&);

    void
    operator<< (::xercesc::DOMElement&, const CylinderCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const CylinderCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const CylinderActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const CylinderFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const CylinderFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const CylinderFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const CylinderFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const CylindricalSegmentConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const CylindricalSegmentBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const CylindricalSegmentRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const CylindricalSegmentCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const CylindricalSegmentCastType&);

    void
    operator<< (::xercesc::DOMElement&, const CylindricalSegmentTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const CylindricalSegmentCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const CylindricalSegmentCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const CylindricalSegmentActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const CylindricalSegmentFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const CylindricalSegmentFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const CylindricalSegmentFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const CylindricalSegmentFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const EdgePointConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const EdgePointCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const EdgePointCastType&);

    void
    operator<< (::xercesc::DOMElement&, const EdgePointTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const EdgePointFromScanType&);

    void
    operator<< (::xercesc::DOMElement&, const EdgePointCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const EdgePointCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const EdgePointActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const EdgePointFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const EdgePointFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const EdgePointFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const EdgePointFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const EllipseConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const EllipseBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const EllipseRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const EllipseProjectionType&);

    void
    operator<< (::xercesc::DOMElement&, const EllipseIntersectionType&);

    void
    operator<< (::xercesc::DOMElement&, const EllipseCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const EllipseCastType&);

    void
    operator<< (::xercesc::DOMElement&, const EllipseTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const EllipseFromScanType&);

    void
    operator<< (::xercesc::DOMElement&, const EllipseCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const EllipseCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const EllipseActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const EllipseFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const EllipseFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const EllipseFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const EllipseFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const ElongatedCylinderConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const ElongatedCylinderBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const ElongatedCylinderRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const ElongatedCylinderCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const ElongatedCylinderCastType&);

    void
    operator<< (::xercesc::DOMElement&, const ElongatedCylinderTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const ElongatedCylinderCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const ElongatedCylinderCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const ElongatedCylinderActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const ElongatedCylinderFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const ElongatedCylinderFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const ElongatedCylinderFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const ElongatedCylinderFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const ExtrudedCrossSectionConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const ExtrudedCrossSectionBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const ExtrudedCrossSectionRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const ExtrudedCrossSectionCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const ExtrudedCrossSectionCastType&);

    void
    operator<< (::xercesc::DOMElement&, const ExtrudedCrossSectionTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const ExtrudedCrossSectionCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const ExtrudedCrossSectionCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const ExtrudedCrossSectionActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const ExtrudedCrossSectionFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const ExtrudedCrossSectionFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const ExtrudedCrossSectionFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const ExtrudedCrossSectionFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const GenericFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const GenericFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const GenericFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const GenericFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const LineConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const LineBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const LineRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const LineMidlineType&);

    void
    operator<< (::xercesc::DOMElement&, const LineIntersectionType&);

    void
    operator<< (::xercesc::DOMElement&, const LineProjectionType&);

    void
    operator<< (::xercesc::DOMElement&, const LinePerpendicularType&);

    void
    operator<< (::xercesc::DOMElement&, const LineParallelType&);

    void
    operator<< (::xercesc::DOMElement&, const LineCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const LineCastType&);

    void
    operator<< (::xercesc::DOMElement&, const LineTangentThroughType&);

    void
    operator<< (::xercesc::DOMElement&, const LineTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const LineFromScanType&);

    void
    operator<< (::xercesc::DOMElement&, const LineExtractType&);

    void
    operator<< (::xercesc::DOMElement&, const LineCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const LineCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const LineActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const LineFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const LineFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const LineFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const LineFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositeLinesConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositeLinesBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositeLinesRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositeLinesProjectionType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositeLinesCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositeLinesCastType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositeLinesTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositeLinesFromScanType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositeLinesCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositeLinesCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositeLinesActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositeLinesFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositeLinesFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositeLinesFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositeLinesFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositePlanesConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositePlanesBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositePlanesRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositePlanesCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositePlanesCastType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositePlanesTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositePlanesFromScanType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositePlanesCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositePlanesCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositePlanesActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositePlanesFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositePlanesFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositePlanesFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const OppositePlanesFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const PlaneConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const PlaneBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const PlaneRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const PlaneMidplaneType&);

    void
    operator<< (::xercesc::DOMElement&, const PlaneOffsetType&);

    void
    operator<< (::xercesc::DOMElement&, const PlanePerpendicularType&);

    void
    operator<< (::xercesc::DOMElement&, const PlaneParallelType&);

    void
    operator<< (::xercesc::DOMElement&, const PlaneCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const PlaneCastType&);

    void
    operator<< (::xercesc::DOMElement&, const PlaneTangentThroughType&);

    void
    operator<< (::xercesc::DOMElement&, const PlaneTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const PlaneExtractType&);

    void
    operator<< (::xercesc::DOMElement&, const PlaneCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const PlaneCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const PlaneActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const PlaneFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const PlaneFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const PlaneFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const PlaneFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedCurveConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedCurveBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedCurveRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedCurveCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedCurveTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedCurveFromScanType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedCurveExtractType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedCurveCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedCurveCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedCurveActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedCurveFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedCurveFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedCurveFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const TargetPointsActualType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedCurveFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedSurfaceConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedSurfaceBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedSurfaceRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedSurfaceCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedSurfaceTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedSurfaceExtractType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedSurfaceCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedSurfaceCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedSurfaceActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedSurfaceFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedSurfaceFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const TargetPointsNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedSurfaceFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedSurfaceFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const PointConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const PointFeatureIntersectionType&);

    void
    operator<< (::xercesc::DOMElement&, const PointFeaturePierceType&);

    void
    operator<< (::xercesc::DOMElement&, const PointFeatureProjectionType&);

    void
    operator<< (::xercesc::DOMElement&, const PointFeatureFromConeType&);

    void
    operator<< (::xercesc::DOMElement&, const PointFeatureCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const PointFeatureTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const PointFeatureFromScanType&);

    void
    operator<< (::xercesc::DOMElement&, const PointFeatureCenterOfGravityType&);

    void
    operator<< (::xercesc::DOMElement&, const PointFeatureMidPointType&);

    void
    operator<< (::xercesc::DOMElement&, const PointFeatureCastType&);

    void
    operator<< (::xercesc::DOMElement&, const PointFeatureMovePointType&);

    void
    operator<< (::xercesc::DOMElement&, const PointFeatureMovePointVectorType&);

    void
    operator<< (::xercesc::DOMElement&, const PointFeatureMovePointAxisType&);

    void
    operator<< (::xercesc::DOMElement&, const PointFeatureExtremeType&);

    void
    operator<< (::xercesc::DOMElement&, const PointCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const PointCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const PointActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const PointFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const PointFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const PointFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const PointFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const SphereConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const SphereBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const SphereRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const SphereCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const SphereCastType&);

    void
    operator<< (::xercesc::DOMElement&, const SphereTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const SphereFromScanType&);

    void
    operator<< (::xercesc::DOMElement&, const SphereCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const SphereCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const SphereActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const SphereFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const SphereFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const SphereFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const SphereFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const SphericalSegmentConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const SphericalSegmentBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const SphericalSegmentRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const SphericalSegmentCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const SphericalSegmentCastType&);

    void
    operator<< (::xercesc::DOMElement&, const SphericalSegmentTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const SphericalSegmentCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const SphericalSegmentCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const SphericalSegmentActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const SphericalSegmentFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const SphericalSegmentFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const SphericalSegmentFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const SphericalSegmentFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceOfRevolutionConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceOfRevolutionBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceOfRevolutionRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceOfRevolutionCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceOfRevolutionCastType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceOfRevolutionTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceOfRevolutionCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceOfRevolutionCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceOfRevolutionActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceOfRevolutionFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceOfRevolutionFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceOfRevolutionFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceOfRevolutionFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadedFeatureConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadedFeatureBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadedFeatureRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadedFeatureCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadedFeatureCastType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadedFeatureTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadedFeatureFromCylinderType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadedFeatureCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadedFeatureCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadedFeatureActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadedFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadedFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadedFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadedFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const ToroidalSegmentConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const ToroidalSegmentBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const ToroidalSegmentRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const ToroidalSegmentCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const ToroidalSegmentCastType&);

    void
    operator<< (::xercesc::DOMElement&, const ToroidalSegmentTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const ToroidalSegmentCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const ToroidalSegmentCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const ToroidalSegmentActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const ToroidalSegmentFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const ToroidalSegmentFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const ToroidalSegmentFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const ToroidalSegmentFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const TorusConstructionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const TorusBestFitType&);

    void
    operator<< (::xercesc::DOMElement&, const TorusRecompType&);

    void
    operator<< (::xercesc::DOMElement&, const TorusCopyType&);

    void
    operator<< (::xercesc::DOMElement&, const TorusCastType&);

    void
    operator<< (::xercesc::DOMElement&, const TorusTransformType&);

    void
    operator<< (::xercesc::DOMElement&, const TorusFromScanType&);

    void
    operator<< (::xercesc::DOMElement&, const TorusCheckedType&);

    void
    operator<< (::xercesc::DOMElement&, const TorusCheckedFeatureType&);

    void
    operator<< (::xercesc::DOMElement&, const TorusActualDeterminationType&);

    void
    operator<< (::xercesc::DOMElement&, const TorusFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const TorusFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const TorusFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const TorusFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const CompositeFeatureItemBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const CompositeFeatureDefinitionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const CompositeFeatureNominalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const CompositeFeatureActualBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const CompoundFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const CompoundFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const CompoundFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const CompoundFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const PatternFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const PatternFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const PatternFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const PatternFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const ProfileGroupFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const ProfileGroupFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const ProfileGroupFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const ProfileGroupFeatureActualType&);

    void
    operator<< (::xercesc::DOMElement&, const RunoutGroupFeatureItemType&);

    void
    operator<< (::xercesc::DOMElement&, const RunoutGroupFeatureDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const RunoutGroupFeatureNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const RunoutGroupFeatureActualType&);

    // Serialize to std::ostream.
    //

    void
    Features (::std::ostream& os,
              const ::xsd::qif2::FeatureAspectsListsType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    Features (::std::ostream& os,
              const ::xsd::qif2::FeatureAspectsListsType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    Features (::std::ostream& os,
              const ::xsd::qif2::FeatureAspectsListsType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Features (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::FeatureAspectsListsType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    Features (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::FeatureAspectsListsType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    Features (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::FeatureAspectsListsType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Features (::xercesc::DOMDocument& d,
              const ::xsd::qif2::FeatureAspectsListsType& x,
              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Features (const ::xsd::qif2::FeatureAspectsListsType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const FeatureAspectsListsType&);

    void
    operator<< (::xercesc::DOMElement&, const MeasuredFeaturesType&);

    // Serialize to std::ostream.
    //

    void
    MeasuredFeatures (::std::ostream& os,
                      const ::xsd::qif2::MeasuredFeaturesType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    MeasuredFeatures (::std::ostream& os,
                      const ::xsd::qif2::MeasuredFeaturesType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    MeasuredFeatures (::std::ostream& os,
                      const ::xsd::qif2::MeasuredFeaturesType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    MeasuredFeatures (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::MeasuredFeaturesType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    MeasuredFeatures (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::MeasuredFeaturesType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    MeasuredFeatures (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::MeasuredFeaturesType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    MeasuredFeatures (::xercesc::DOMDocument& d,
                      const ::xsd::qif2::MeasuredFeaturesType& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    MeasuredFeatures (const ::xsd::qif2::MeasuredFeaturesType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const FeatureDefinitionsType&);

    void
    operator<< (::xercesc::DOMElement&, const FeatureNominalsType&);

    void
    operator<< (::xercesc::DOMElement&, const FeatureItemsType&);

    void
    operator<< (::xercesc::DOMElement&, const FeatureActualsType&);

    // Serialize to std::ostream.
    //

    void
    FeatureDefinition (::std::ostream& os,
                       const ::xsd::qif2::FeatureDefinitionBaseType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    FeatureDefinition (::std::ostream& os,
                       const ::xsd::qif2::FeatureDefinitionBaseType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    FeatureDefinition (::std::ostream& os,
                       const ::xsd::qif2::FeatureDefinitionBaseType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FeatureDefinition (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::FeatureDefinitionBaseType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    FeatureDefinition (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::FeatureDefinitionBaseType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    FeatureDefinition (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::FeatureDefinitionBaseType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FeatureDefinition (::xercesc::DOMDocument& d,
                       const ::xsd::qif2::FeatureDefinitionBaseType& x,
                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FeatureDefinition (const ::xsd::qif2::FeatureDefinitionBaseType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ArcFeatureDefinition (::std::ostream& os,
                          const ::xsd::qif2::ArcFeatureDefinitionType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    ArcFeatureDefinition (::std::ostream& os,
                          const ::xsd::qif2::ArcFeatureDefinitionType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    ArcFeatureDefinition (::std::ostream& os,
                          const ::xsd::qif2::ArcFeatureDefinitionType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ArcFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::ArcFeatureDefinitionType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    ArcFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::ArcFeatureDefinitionType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    ArcFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::ArcFeatureDefinitionType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ArcFeatureDefinition (::xercesc::DOMDocument& d,
                          const ::xsd::qif2::ArcFeatureDefinitionType& x,
                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ArcFeatureDefinition (const ::xsd::qif2::ArcFeatureDefinitionType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    GenericFeatureDefinition (::std::ostream& os,
                              const ::xsd::qif2::GenericFeatureDefinitionType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    GenericFeatureDefinition (::std::ostream& os,
                              const ::xsd::qif2::GenericFeatureDefinitionType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    GenericFeatureDefinition (::std::ostream& os,
                              const ::xsd::qif2::GenericFeatureDefinitionType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    GenericFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::GenericFeatureDefinitionType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    GenericFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::GenericFeatureDefinitionType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    GenericFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::GenericFeatureDefinitionType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    GenericFeatureDefinition (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::GenericFeatureDefinitionType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    GenericFeatureDefinition (const ::xsd::qif2::GenericFeatureDefinitionType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CircleFeatureDefinition (::std::ostream& os,
                             const ::xsd::qif2::CircleFeatureDefinitionType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    CircleFeatureDefinition (::std::ostream& os,
                             const ::xsd::qif2::CircleFeatureDefinitionType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    CircleFeatureDefinition (::std::ostream& os,
                             const ::xsd::qif2::CircleFeatureDefinitionType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CircleFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::CircleFeatureDefinitionType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    CircleFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::CircleFeatureDefinitionType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    CircleFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::CircleFeatureDefinitionType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CircleFeatureDefinition (::xercesc::DOMDocument& d,
                             const ::xsd::qif2::CircleFeatureDefinitionType& x,
                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CircleFeatureDefinition (const ::xsd::qif2::CircleFeatureDefinitionType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CompoundFeatureDefinition (::std::ostream& os,
                               const ::xsd::qif2::CompoundFeatureDefinitionType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    CompoundFeatureDefinition (::std::ostream& os,
                               const ::xsd::qif2::CompoundFeatureDefinitionType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    CompoundFeatureDefinition (::std::ostream& os,
                               const ::xsd::qif2::CompoundFeatureDefinitionType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CompoundFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::CompoundFeatureDefinitionType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    CompoundFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::CompoundFeatureDefinitionType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    CompoundFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::CompoundFeatureDefinitionType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CompoundFeatureDefinition (::xercesc::DOMDocument& d,
                               const ::xsd::qif2::CompoundFeatureDefinitionType& x,
                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CompoundFeatureDefinition (const ::xsd::qif2::CompoundFeatureDefinitionType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ConeFeatureDefinition (::std::ostream& os,
                           const ::xsd::qif2::ConeFeatureDefinitionType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    ConeFeatureDefinition (::std::ostream& os,
                           const ::xsd::qif2::ConeFeatureDefinitionType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    ConeFeatureDefinition (::std::ostream& os,
                           const ::xsd::qif2::ConeFeatureDefinitionType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ConeFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::ConeFeatureDefinitionType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    ConeFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::ConeFeatureDefinitionType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    ConeFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::ConeFeatureDefinitionType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ConeFeatureDefinition (::xercesc::DOMDocument& d,
                           const ::xsd::qif2::ConeFeatureDefinitionType& x,
                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ConeFeatureDefinition (const ::xsd::qif2::ConeFeatureDefinitionType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ConicalSegmentFeatureDefinition (::std::ostream& os,
                                     const ::xsd::qif2::ConicalSegmentFeatureDefinitionType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    ConicalSegmentFeatureDefinition (::std::ostream& os,
                                     const ::xsd::qif2::ConicalSegmentFeatureDefinitionType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    ConicalSegmentFeatureDefinition (::std::ostream& os,
                                     const ::xsd::qif2::ConicalSegmentFeatureDefinitionType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ConicalSegmentFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::ConicalSegmentFeatureDefinitionType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    ConicalSegmentFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::ConicalSegmentFeatureDefinitionType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    ConicalSegmentFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::ConicalSegmentFeatureDefinitionType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ConicalSegmentFeatureDefinition (::xercesc::DOMDocument& d,
                                     const ::xsd::qif2::ConicalSegmentFeatureDefinitionType& x,
                                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ConicalSegmentFeatureDefinition (const ::xsd::qif2::ConicalSegmentFeatureDefinitionType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CuboidFeatureDefinition (::std::ostream& os,
                             const ::xsd::qif2::CuboidFeatureDefinitionType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    CuboidFeatureDefinition (::std::ostream& os,
                             const ::xsd::qif2::CuboidFeatureDefinitionType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    CuboidFeatureDefinition (::std::ostream& os,
                             const ::xsd::qif2::CuboidFeatureDefinitionType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CuboidFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::CuboidFeatureDefinitionType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    CuboidFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::CuboidFeatureDefinitionType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    CuboidFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::CuboidFeatureDefinitionType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CuboidFeatureDefinition (::xercesc::DOMDocument& d,
                             const ::xsd::qif2::CuboidFeatureDefinitionType& x,
                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CuboidFeatureDefinition (const ::xsd::qif2::CuboidFeatureDefinitionType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CylinderFeatureDefinition (::std::ostream& os,
                               const ::xsd::qif2::CylinderFeatureDefinitionType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    CylinderFeatureDefinition (::std::ostream& os,
                               const ::xsd::qif2::CylinderFeatureDefinitionType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    CylinderFeatureDefinition (::std::ostream& os,
                               const ::xsd::qif2::CylinderFeatureDefinitionType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CylinderFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::CylinderFeatureDefinitionType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    CylinderFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::CylinderFeatureDefinitionType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    CylinderFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::CylinderFeatureDefinitionType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CylinderFeatureDefinition (::xercesc::DOMDocument& d,
                               const ::xsd::qif2::CylinderFeatureDefinitionType& x,
                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CylinderFeatureDefinition (const ::xsd::qif2::CylinderFeatureDefinitionType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CylindricalSegmentFeatureDefinition (::std::ostream& os,
                                         const ::xsd::qif2::CylindricalSegmentFeatureDefinitionType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    CylindricalSegmentFeatureDefinition (::std::ostream& os,
                                         const ::xsd::qif2::CylindricalSegmentFeatureDefinitionType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    CylindricalSegmentFeatureDefinition (::std::ostream& os,
                                         const ::xsd::qif2::CylindricalSegmentFeatureDefinitionType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CylindricalSegmentFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::CylindricalSegmentFeatureDefinitionType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    CylindricalSegmentFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::CylindricalSegmentFeatureDefinitionType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    CylindricalSegmentFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::CylindricalSegmentFeatureDefinitionType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CylindricalSegmentFeatureDefinition (::xercesc::DOMDocument& d,
                                         const ::xsd::qif2::CylindricalSegmentFeatureDefinitionType& x,
                                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CylindricalSegmentFeatureDefinition (const ::xsd::qif2::CylindricalSegmentFeatureDefinitionType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    EdgePointFeatureDefinition (::std::ostream& os,
                                const ::xsd::qif2::EdgePointFeatureDefinitionType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    EdgePointFeatureDefinition (::std::ostream& os,
                                const ::xsd::qif2::EdgePointFeatureDefinitionType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    EdgePointFeatureDefinition (::std::ostream& os,
                                const ::xsd::qif2::EdgePointFeatureDefinitionType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EdgePointFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::EdgePointFeatureDefinitionType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    EdgePointFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::EdgePointFeatureDefinitionType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    EdgePointFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::EdgePointFeatureDefinitionType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EdgePointFeatureDefinition (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::EdgePointFeatureDefinitionType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EdgePointFeatureDefinition (const ::xsd::qif2::EdgePointFeatureDefinitionType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    EllipseFeatureDefinition (::std::ostream& os,
                              const ::xsd::qif2::EllipseFeatureDefinitionType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    EllipseFeatureDefinition (::std::ostream& os,
                              const ::xsd::qif2::EllipseFeatureDefinitionType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    EllipseFeatureDefinition (::std::ostream& os,
                              const ::xsd::qif2::EllipseFeatureDefinitionType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EllipseFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::EllipseFeatureDefinitionType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    EllipseFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::EllipseFeatureDefinitionType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    EllipseFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::EllipseFeatureDefinitionType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EllipseFeatureDefinition (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::EllipseFeatureDefinitionType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EllipseFeatureDefinition (const ::xsd::qif2::EllipseFeatureDefinitionType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ElongatedCylinderFeatureDefinition (::std::ostream& os,
                                        const ::xsd::qif2::ElongatedCylinderFeatureDefinitionType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    ElongatedCylinderFeatureDefinition (::std::ostream& os,
                                        const ::xsd::qif2::ElongatedCylinderFeatureDefinitionType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    ElongatedCylinderFeatureDefinition (::std::ostream& os,
                                        const ::xsd::qif2::ElongatedCylinderFeatureDefinitionType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ElongatedCylinderFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::ElongatedCylinderFeatureDefinitionType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    ElongatedCylinderFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::ElongatedCylinderFeatureDefinitionType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    ElongatedCylinderFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::ElongatedCylinderFeatureDefinitionType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ElongatedCylinderFeatureDefinition (::xercesc::DOMDocument& d,
                                        const ::xsd::qif2::ElongatedCylinderFeatureDefinitionType& x,
                                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ElongatedCylinderFeatureDefinition (const ::xsd::qif2::ElongatedCylinderFeatureDefinitionType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ExtrudedCrossSectionFeatureDefinition (::std::ostream& os,
                                           const ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    ExtrudedCrossSectionFeatureDefinition (::std::ostream& os,
                                           const ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType& x, 
                                           ::xml_schema::error_handler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    ExtrudedCrossSectionFeatureDefinition (::std::ostream& os,
                                           const ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ExtrudedCrossSectionFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    ExtrudedCrossSectionFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType& x, 
                                           ::xml_schema::error_handler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    ExtrudedCrossSectionFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ExtrudedCrossSectionFeatureDefinition (::xercesc::DOMDocument& d,
                                           const ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType& x,
                                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ExtrudedCrossSectionFeatureDefinition (const ::xsd::qif2::ExtrudedCrossSectionFeatureDefinitionType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LineFeatureDefinition (::std::ostream& os,
                           const ::xsd::qif2::LineFeatureDefinitionType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    LineFeatureDefinition (::std::ostream& os,
                           const ::xsd::qif2::LineFeatureDefinitionType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    LineFeatureDefinition (::std::ostream& os,
                           const ::xsd::qif2::LineFeatureDefinitionType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LineFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::LineFeatureDefinitionType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    LineFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::LineFeatureDefinitionType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    LineFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::LineFeatureDefinitionType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LineFeatureDefinition (::xercesc::DOMDocument& d,
                           const ::xsd::qif2::LineFeatureDefinitionType& x,
                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LineFeatureDefinition (const ::xsd::qif2::LineFeatureDefinitionType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    OppositeLinesFeatureDefinition (::std::ostream& os,
                                    const ::xsd::qif2::OppositeLinesFeatureDefinitionType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    OppositeLinesFeatureDefinition (::std::ostream& os,
                                    const ::xsd::qif2::OppositeLinesFeatureDefinitionType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    OppositeLinesFeatureDefinition (::std::ostream& os,
                                    const ::xsd::qif2::OppositeLinesFeatureDefinitionType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    OppositeLinesFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::OppositeLinesFeatureDefinitionType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    OppositeLinesFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::OppositeLinesFeatureDefinitionType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    OppositeLinesFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::OppositeLinesFeatureDefinitionType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    OppositeLinesFeatureDefinition (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::OppositeLinesFeatureDefinitionType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    OppositeLinesFeatureDefinition (const ::xsd::qif2::OppositeLinesFeatureDefinitionType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    OppositePlanesFeatureDefinition (::std::ostream& os,
                                     const ::xsd::qif2::OppositePlanesFeatureDefinitionType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    OppositePlanesFeatureDefinition (::std::ostream& os,
                                     const ::xsd::qif2::OppositePlanesFeatureDefinitionType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    OppositePlanesFeatureDefinition (::std::ostream& os,
                                     const ::xsd::qif2::OppositePlanesFeatureDefinitionType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    OppositePlanesFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::OppositePlanesFeatureDefinitionType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    OppositePlanesFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::OppositePlanesFeatureDefinitionType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    OppositePlanesFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::OppositePlanesFeatureDefinitionType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    OppositePlanesFeatureDefinition (::xercesc::DOMDocument& d,
                                     const ::xsd::qif2::OppositePlanesFeatureDefinitionType& x,
                                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    OppositePlanesFeatureDefinition (const ::xsd::qif2::OppositePlanesFeatureDefinitionType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PatternFeatureDefinition (::std::ostream& os,
                              const ::xsd::qif2::PatternFeatureDefinitionType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    PatternFeatureDefinition (::std::ostream& os,
                              const ::xsd::qif2::PatternFeatureDefinitionType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    PatternFeatureDefinition (::std::ostream& os,
                              const ::xsd::qif2::PatternFeatureDefinitionType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PatternFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::PatternFeatureDefinitionType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    PatternFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::PatternFeatureDefinitionType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    PatternFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::PatternFeatureDefinitionType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PatternFeatureDefinition (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::PatternFeatureDefinitionType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PatternFeatureDefinition (const ::xsd::qif2::PatternFeatureDefinitionType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PlaneFeatureDefinition (::std::ostream& os,
                            const ::xsd::qif2::PlaneFeatureDefinitionType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    PlaneFeatureDefinition (::std::ostream& os,
                            const ::xsd::qif2::PlaneFeatureDefinitionType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    PlaneFeatureDefinition (::std::ostream& os,
                            const ::xsd::qif2::PlaneFeatureDefinitionType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PlaneFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::PlaneFeatureDefinitionType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    PlaneFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::PlaneFeatureDefinitionType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    PlaneFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::PlaneFeatureDefinitionType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PlaneFeatureDefinition (::xercesc::DOMDocument& d,
                            const ::xsd::qif2::PlaneFeatureDefinitionType& x,
                            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PlaneFeatureDefinition (const ::xsd::qif2::PlaneFeatureDefinitionType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PointDefinedCurveFeatureDefinition (::std::ostream& os,
                                        const ::xsd::qif2::PointDefinedCurveFeatureDefinitionType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    PointDefinedCurveFeatureDefinition (::std::ostream& os,
                                        const ::xsd::qif2::PointDefinedCurveFeatureDefinitionType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    PointDefinedCurveFeatureDefinition (::std::ostream& os,
                                        const ::xsd::qif2::PointDefinedCurveFeatureDefinitionType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PointDefinedCurveFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::PointDefinedCurveFeatureDefinitionType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    PointDefinedCurveFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::PointDefinedCurveFeatureDefinitionType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    PointDefinedCurveFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::PointDefinedCurveFeatureDefinitionType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PointDefinedCurveFeatureDefinition (::xercesc::DOMDocument& d,
                                        const ::xsd::qif2::PointDefinedCurveFeatureDefinitionType& x,
                                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PointDefinedCurveFeatureDefinition (const ::xsd::qif2::PointDefinedCurveFeatureDefinitionType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PointDefinedSurfaceFeatureDefinition (::std::ostream& os,
                                          const ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    PointDefinedSurfaceFeatureDefinition (::std::ostream& os,
                                          const ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    PointDefinedSurfaceFeatureDefinition (::std::ostream& os,
                                          const ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PointDefinedSurfaceFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    PointDefinedSurfaceFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    PointDefinedSurfaceFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PointDefinedSurfaceFeatureDefinition (::xercesc::DOMDocument& d,
                                          const ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType& x,
                                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PointDefinedSurfaceFeatureDefinition (const ::xsd::qif2::PointDefinedSurfaceFeatureDefinitionType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PointFeatureDefinition (::std::ostream& os,
                            const ::xsd::qif2::PointFeatureDefinitionType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    PointFeatureDefinition (::std::ostream& os,
                            const ::xsd::qif2::PointFeatureDefinitionType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    PointFeatureDefinition (::std::ostream& os,
                            const ::xsd::qif2::PointFeatureDefinitionType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PointFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::PointFeatureDefinitionType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    PointFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::PointFeatureDefinitionType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    PointFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::PointFeatureDefinitionType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PointFeatureDefinition (::xercesc::DOMDocument& d,
                            const ::xsd::qif2::PointFeatureDefinitionType& x,
                            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PointFeatureDefinition (const ::xsd::qif2::PointFeatureDefinitionType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ProfileGroupFeatureDefinition (::std::ostream& os,
                                   const ::xsd::qif2::ProfileGroupFeatureDefinitionType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ProfileGroupFeatureDefinition (::std::ostream& os,
                                   const ::xsd::qif2::ProfileGroupFeatureDefinitionType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ProfileGroupFeatureDefinition (::std::ostream& os,
                                   const ::xsd::qif2::ProfileGroupFeatureDefinitionType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ProfileGroupFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::ProfileGroupFeatureDefinitionType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ProfileGroupFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::ProfileGroupFeatureDefinitionType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ProfileGroupFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::ProfileGroupFeatureDefinitionType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ProfileGroupFeatureDefinition (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::ProfileGroupFeatureDefinitionType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ProfileGroupFeatureDefinition (const ::xsd::qif2::ProfileGroupFeatureDefinitionType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    RunoutGroupFeatureDefinition (::std::ostream& os,
                                  const ::xsd::qif2::RunoutGroupFeatureDefinitionType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    RunoutGroupFeatureDefinition (::std::ostream& os,
                                  const ::xsd::qif2::RunoutGroupFeatureDefinitionType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    RunoutGroupFeatureDefinition (::std::ostream& os,
                                  const ::xsd::qif2::RunoutGroupFeatureDefinitionType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    RunoutGroupFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::RunoutGroupFeatureDefinitionType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    RunoutGroupFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::RunoutGroupFeatureDefinitionType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    RunoutGroupFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::RunoutGroupFeatureDefinitionType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    RunoutGroupFeatureDefinition (::xercesc::DOMDocument& d,
                                  const ::xsd::qif2::RunoutGroupFeatureDefinitionType& x,
                                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    RunoutGroupFeatureDefinition (const ::xsd::qif2::RunoutGroupFeatureDefinitionType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SphereFeatureDefinition (::std::ostream& os,
                             const ::xsd::qif2::SphereFeatureDefinitionType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    SphereFeatureDefinition (::std::ostream& os,
                             const ::xsd::qif2::SphereFeatureDefinitionType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    SphereFeatureDefinition (::std::ostream& os,
                             const ::xsd::qif2::SphereFeatureDefinitionType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SphereFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::SphereFeatureDefinitionType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    SphereFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::SphereFeatureDefinitionType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    SphereFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::SphereFeatureDefinitionType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SphereFeatureDefinition (::xercesc::DOMDocument& d,
                             const ::xsd::qif2::SphereFeatureDefinitionType& x,
                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SphereFeatureDefinition (const ::xsd::qif2::SphereFeatureDefinitionType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SphericalSegmentFeatureDefinition (::std::ostream& os,
                                       const ::xsd::qif2::SphericalSegmentFeatureDefinitionType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    SphericalSegmentFeatureDefinition (::std::ostream& os,
                                       const ::xsd::qif2::SphericalSegmentFeatureDefinitionType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    SphericalSegmentFeatureDefinition (::std::ostream& os,
                                       const ::xsd::qif2::SphericalSegmentFeatureDefinitionType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SphericalSegmentFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::SphericalSegmentFeatureDefinitionType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    SphericalSegmentFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::SphericalSegmentFeatureDefinitionType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    SphericalSegmentFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::SphericalSegmentFeatureDefinitionType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SphericalSegmentFeatureDefinition (::xercesc::DOMDocument& d,
                                       const ::xsd::qif2::SphericalSegmentFeatureDefinitionType& x,
                                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SphericalSegmentFeatureDefinition (const ::xsd::qif2::SphericalSegmentFeatureDefinitionType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SurfaceOfRevolutionFeatureDefinition (::std::ostream& os,
                                          const ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    SurfaceOfRevolutionFeatureDefinition (::std::ostream& os,
                                          const ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    SurfaceOfRevolutionFeatureDefinition (::std::ostream& os,
                                          const ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SurfaceOfRevolutionFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    SurfaceOfRevolutionFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    SurfaceOfRevolutionFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SurfaceOfRevolutionFeatureDefinition (::xercesc::DOMDocument& d,
                                          const ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType& x,
                                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SurfaceOfRevolutionFeatureDefinition (const ::xsd::qif2::SurfaceOfRevolutionFeatureDefinitionType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ThreadedFeatureDefinition (::std::ostream& os,
                               const ::xsd::qif2::ThreadedFeatureDefinitionType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ThreadedFeatureDefinition (::std::ostream& os,
                               const ::xsd::qif2::ThreadedFeatureDefinitionType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ThreadedFeatureDefinition (::std::ostream& os,
                               const ::xsd::qif2::ThreadedFeatureDefinitionType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ThreadedFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::ThreadedFeatureDefinitionType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ThreadedFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::ThreadedFeatureDefinitionType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ThreadedFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::ThreadedFeatureDefinitionType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ThreadedFeatureDefinition (::xercesc::DOMDocument& d,
                               const ::xsd::qif2::ThreadedFeatureDefinitionType& x,
                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ThreadedFeatureDefinition (const ::xsd::qif2::ThreadedFeatureDefinitionType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ToroidalSegmentFeatureDefinition (::std::ostream& os,
                                      const ::xsd::qif2::ToroidalSegmentFeatureDefinitionType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    ToroidalSegmentFeatureDefinition (::std::ostream& os,
                                      const ::xsd::qif2::ToroidalSegmentFeatureDefinitionType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    ToroidalSegmentFeatureDefinition (::std::ostream& os,
                                      const ::xsd::qif2::ToroidalSegmentFeatureDefinitionType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ToroidalSegmentFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::ToroidalSegmentFeatureDefinitionType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    ToroidalSegmentFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::ToroidalSegmentFeatureDefinitionType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    ToroidalSegmentFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::ToroidalSegmentFeatureDefinitionType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ToroidalSegmentFeatureDefinition (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::ToroidalSegmentFeatureDefinitionType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ToroidalSegmentFeatureDefinition (const ::xsd::qif2::ToroidalSegmentFeatureDefinitionType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    TorusFeatureDefinition (::std::ostream& os,
                            const ::xsd::qif2::TorusFeatureDefinitionType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    TorusFeatureDefinition (::std::ostream& os,
                            const ::xsd::qif2::TorusFeatureDefinitionType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    TorusFeatureDefinition (::std::ostream& os,
                            const ::xsd::qif2::TorusFeatureDefinitionType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    TorusFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::TorusFeatureDefinitionType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    TorusFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::TorusFeatureDefinitionType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    TorusFeatureDefinition (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::TorusFeatureDefinitionType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    TorusFeatureDefinition (::xercesc::DOMDocument& d,
                            const ::xsd::qif2::TorusFeatureDefinitionType& x,
                            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    TorusFeatureDefinition (const ::xsd::qif2::TorusFeatureDefinitionType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FeatureNominal (::std::ostream& os,
                    const ::xsd::qif2::FeatureNominalBaseType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    void
    FeatureNominal (::std::ostream& os,
                    const ::xsd::qif2::FeatureNominalBaseType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    void
    FeatureNominal (::std::ostream& os,
                    const ::xsd::qif2::FeatureNominalBaseType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FeatureNominal (::xercesc::XMLFormatTarget& ft,
                    const ::xsd::qif2::FeatureNominalBaseType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    void
    FeatureNominal (::xercesc::XMLFormatTarget& ft,
                    const ::xsd::qif2::FeatureNominalBaseType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    void
    FeatureNominal (::xercesc::XMLFormatTarget& ft,
                    const ::xsd::qif2::FeatureNominalBaseType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FeatureNominal (::xercesc::DOMDocument& d,
                    const ::xsd::qif2::FeatureNominalBaseType& x,
                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FeatureNominal (const ::xsd::qif2::FeatureNominalBaseType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ArcFeatureNominal (::std::ostream& os,
                       const ::xsd::qif2::ArcFeatureNominalType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    ArcFeatureNominal (::std::ostream& os,
                       const ::xsd::qif2::ArcFeatureNominalType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    ArcFeatureNominal (::std::ostream& os,
                       const ::xsd::qif2::ArcFeatureNominalType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ArcFeatureNominal (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::ArcFeatureNominalType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    ArcFeatureNominal (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::ArcFeatureNominalType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    ArcFeatureNominal (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::ArcFeatureNominalType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ArcFeatureNominal (::xercesc::DOMDocument& d,
                       const ::xsd::qif2::ArcFeatureNominalType& x,
                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ArcFeatureNominal (const ::xsd::qif2::ArcFeatureNominalType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    GenericFeatureNominal (::std::ostream& os,
                           const ::xsd::qif2::GenericFeatureNominalType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    GenericFeatureNominal (::std::ostream& os,
                           const ::xsd::qif2::GenericFeatureNominalType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    GenericFeatureNominal (::std::ostream& os,
                           const ::xsd::qif2::GenericFeatureNominalType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    GenericFeatureNominal (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::GenericFeatureNominalType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    GenericFeatureNominal (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::GenericFeatureNominalType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    GenericFeatureNominal (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::GenericFeatureNominalType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    GenericFeatureNominal (::xercesc::DOMDocument& d,
                           const ::xsd::qif2::GenericFeatureNominalType& x,
                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    GenericFeatureNominal (const ::xsd::qif2::GenericFeatureNominalType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CircleFeatureNominal (::std::ostream& os,
                          const ::xsd::qif2::CircleFeatureNominalType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    CircleFeatureNominal (::std::ostream& os,
                          const ::xsd::qif2::CircleFeatureNominalType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    CircleFeatureNominal (::std::ostream& os,
                          const ::xsd::qif2::CircleFeatureNominalType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CircleFeatureNominal (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::CircleFeatureNominalType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    CircleFeatureNominal (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::CircleFeatureNominalType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    CircleFeatureNominal (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::CircleFeatureNominalType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CircleFeatureNominal (::xercesc::DOMDocument& d,
                          const ::xsd::qif2::CircleFeatureNominalType& x,
                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CircleFeatureNominal (const ::xsd::qif2::CircleFeatureNominalType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CompoundFeatureNominal (::std::ostream& os,
                            const ::xsd::qif2::CompoundFeatureNominalType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    CompoundFeatureNominal (::std::ostream& os,
                            const ::xsd::qif2::CompoundFeatureNominalType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    CompoundFeatureNominal (::std::ostream& os,
                            const ::xsd::qif2::CompoundFeatureNominalType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CompoundFeatureNominal (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::CompoundFeatureNominalType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    CompoundFeatureNominal (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::CompoundFeatureNominalType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    CompoundFeatureNominal (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::CompoundFeatureNominalType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CompoundFeatureNominal (::xercesc::DOMDocument& d,
                            const ::xsd::qif2::CompoundFeatureNominalType& x,
                            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CompoundFeatureNominal (const ::xsd::qif2::CompoundFeatureNominalType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ConeFeatureNominal (::std::ostream& os,
                        const ::xsd::qif2::ConeFeatureNominalType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    ConeFeatureNominal (::std::ostream& os,
                        const ::xsd::qif2::ConeFeatureNominalType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    ConeFeatureNominal (::std::ostream& os,
                        const ::xsd::qif2::ConeFeatureNominalType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ConeFeatureNominal (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::ConeFeatureNominalType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    ConeFeatureNominal (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::ConeFeatureNominalType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    ConeFeatureNominal (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::ConeFeatureNominalType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ConeFeatureNominal (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::ConeFeatureNominalType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ConeFeatureNominal (const ::xsd::qif2::ConeFeatureNominalType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ConicalSegmentFeatureNominal (::std::ostream& os,
                                  const ::xsd::qif2::ConicalSegmentFeatureNominalType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    ConicalSegmentFeatureNominal (::std::ostream& os,
                                  const ::xsd::qif2::ConicalSegmentFeatureNominalType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    ConicalSegmentFeatureNominal (::std::ostream& os,
                                  const ::xsd::qif2::ConicalSegmentFeatureNominalType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ConicalSegmentFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::ConicalSegmentFeatureNominalType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    ConicalSegmentFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::ConicalSegmentFeatureNominalType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    ConicalSegmentFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::ConicalSegmentFeatureNominalType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ConicalSegmentFeatureNominal (::xercesc::DOMDocument& d,
                                  const ::xsd::qif2::ConicalSegmentFeatureNominalType& x,
                                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ConicalSegmentFeatureNominal (const ::xsd::qif2::ConicalSegmentFeatureNominalType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CuboidFeatureNominal (::std::ostream& os,
                          const ::xsd::qif2::CuboidFeatureNominalType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    CuboidFeatureNominal (::std::ostream& os,
                          const ::xsd::qif2::CuboidFeatureNominalType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    CuboidFeatureNominal (::std::ostream& os,
                          const ::xsd::qif2::CuboidFeatureNominalType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CuboidFeatureNominal (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::CuboidFeatureNominalType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    CuboidFeatureNominal (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::CuboidFeatureNominalType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    CuboidFeatureNominal (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::CuboidFeatureNominalType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CuboidFeatureNominal (::xercesc::DOMDocument& d,
                          const ::xsd::qif2::CuboidFeatureNominalType& x,
                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CuboidFeatureNominal (const ::xsd::qif2::CuboidFeatureNominalType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CylinderFeatureNominal (::std::ostream& os,
                            const ::xsd::qif2::CylinderFeatureNominalType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    CylinderFeatureNominal (::std::ostream& os,
                            const ::xsd::qif2::CylinderFeatureNominalType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    CylinderFeatureNominal (::std::ostream& os,
                            const ::xsd::qif2::CylinderFeatureNominalType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CylinderFeatureNominal (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::CylinderFeatureNominalType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    CylinderFeatureNominal (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::CylinderFeatureNominalType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    CylinderFeatureNominal (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::CylinderFeatureNominalType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CylinderFeatureNominal (::xercesc::DOMDocument& d,
                            const ::xsd::qif2::CylinderFeatureNominalType& x,
                            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CylinderFeatureNominal (const ::xsd::qif2::CylinderFeatureNominalType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CylindricalSegmentFeatureNominal (::std::ostream& os,
                                      const ::xsd::qif2::CylindricalSegmentFeatureNominalType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    CylindricalSegmentFeatureNominal (::std::ostream& os,
                                      const ::xsd::qif2::CylindricalSegmentFeatureNominalType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    CylindricalSegmentFeatureNominal (::std::ostream& os,
                                      const ::xsd::qif2::CylindricalSegmentFeatureNominalType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CylindricalSegmentFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::CylindricalSegmentFeatureNominalType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    CylindricalSegmentFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::CylindricalSegmentFeatureNominalType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    CylindricalSegmentFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::CylindricalSegmentFeatureNominalType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CylindricalSegmentFeatureNominal (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::CylindricalSegmentFeatureNominalType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CylindricalSegmentFeatureNominal (const ::xsd::qif2::CylindricalSegmentFeatureNominalType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    EdgePointFeatureNominal (::std::ostream& os,
                             const ::xsd::qif2::EdgePointFeatureNominalType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    EdgePointFeatureNominal (::std::ostream& os,
                             const ::xsd::qif2::EdgePointFeatureNominalType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    EdgePointFeatureNominal (::std::ostream& os,
                             const ::xsd::qif2::EdgePointFeatureNominalType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EdgePointFeatureNominal (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::EdgePointFeatureNominalType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    EdgePointFeatureNominal (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::EdgePointFeatureNominalType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    EdgePointFeatureNominal (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::EdgePointFeatureNominalType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EdgePointFeatureNominal (::xercesc::DOMDocument& d,
                             const ::xsd::qif2::EdgePointFeatureNominalType& x,
                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EdgePointFeatureNominal (const ::xsd::qif2::EdgePointFeatureNominalType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    EllipseFeatureNominal (::std::ostream& os,
                           const ::xsd::qif2::EllipseFeatureNominalType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    EllipseFeatureNominal (::std::ostream& os,
                           const ::xsd::qif2::EllipseFeatureNominalType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    EllipseFeatureNominal (::std::ostream& os,
                           const ::xsd::qif2::EllipseFeatureNominalType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EllipseFeatureNominal (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::EllipseFeatureNominalType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    EllipseFeatureNominal (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::EllipseFeatureNominalType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    EllipseFeatureNominal (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::EllipseFeatureNominalType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EllipseFeatureNominal (::xercesc::DOMDocument& d,
                           const ::xsd::qif2::EllipseFeatureNominalType& x,
                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EllipseFeatureNominal (const ::xsd::qif2::EllipseFeatureNominalType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ElongatedCylinderFeatureNominal (::std::ostream& os,
                                     const ::xsd::qif2::ElongatedCylinderFeatureNominalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    ElongatedCylinderFeatureNominal (::std::ostream& os,
                                     const ::xsd::qif2::ElongatedCylinderFeatureNominalType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    ElongatedCylinderFeatureNominal (::std::ostream& os,
                                     const ::xsd::qif2::ElongatedCylinderFeatureNominalType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ElongatedCylinderFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::ElongatedCylinderFeatureNominalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    ElongatedCylinderFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::ElongatedCylinderFeatureNominalType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    ElongatedCylinderFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::ElongatedCylinderFeatureNominalType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ElongatedCylinderFeatureNominal (::xercesc::DOMDocument& d,
                                     const ::xsd::qif2::ElongatedCylinderFeatureNominalType& x,
                                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ElongatedCylinderFeatureNominal (const ::xsd::qif2::ElongatedCylinderFeatureNominalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ExtrudedCrossSectionFeatureNominal (::std::ostream& os,
                                        const ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    ExtrudedCrossSectionFeatureNominal (::std::ostream& os,
                                        const ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    ExtrudedCrossSectionFeatureNominal (::std::ostream& os,
                                        const ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ExtrudedCrossSectionFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    ExtrudedCrossSectionFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    ExtrudedCrossSectionFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ExtrudedCrossSectionFeatureNominal (::xercesc::DOMDocument& d,
                                        const ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType& x,
                                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ExtrudedCrossSectionFeatureNominal (const ::xsd::qif2::ExtrudedCrossSectionFeatureNominalType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LineFeatureNominal (::std::ostream& os,
                        const ::xsd::qif2::LineFeatureNominalType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    LineFeatureNominal (::std::ostream& os,
                        const ::xsd::qif2::LineFeatureNominalType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    LineFeatureNominal (::std::ostream& os,
                        const ::xsd::qif2::LineFeatureNominalType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LineFeatureNominal (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::LineFeatureNominalType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    LineFeatureNominal (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::LineFeatureNominalType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    LineFeatureNominal (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::LineFeatureNominalType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LineFeatureNominal (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::LineFeatureNominalType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LineFeatureNominal (const ::xsd::qif2::LineFeatureNominalType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PatternFeatureNominal (::std::ostream& os,
                           const ::xsd::qif2::PatternFeatureNominalType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    PatternFeatureNominal (::std::ostream& os,
                           const ::xsd::qif2::PatternFeatureNominalType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    PatternFeatureNominal (::std::ostream& os,
                           const ::xsd::qif2::PatternFeatureNominalType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PatternFeatureNominal (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::PatternFeatureNominalType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    PatternFeatureNominal (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::PatternFeatureNominalType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    PatternFeatureNominal (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::PatternFeatureNominalType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PatternFeatureNominal (::xercesc::DOMDocument& d,
                           const ::xsd::qif2::PatternFeatureNominalType& x,
                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PatternFeatureNominal (const ::xsd::qif2::PatternFeatureNominalType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PlaneFeatureNominal (::std::ostream& os,
                         const ::xsd::qif2::PlaneFeatureNominalType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    PlaneFeatureNominal (::std::ostream& os,
                         const ::xsd::qif2::PlaneFeatureNominalType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    PlaneFeatureNominal (::std::ostream& os,
                         const ::xsd::qif2::PlaneFeatureNominalType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PlaneFeatureNominal (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::PlaneFeatureNominalType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    PlaneFeatureNominal (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::PlaneFeatureNominalType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    PlaneFeatureNominal (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::PlaneFeatureNominalType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PlaneFeatureNominal (::xercesc::DOMDocument& d,
                         const ::xsd::qif2::PlaneFeatureNominalType& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PlaneFeatureNominal (const ::xsd::qif2::PlaneFeatureNominalType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PointDefinedCurveFeatureNominal (::std::ostream& os,
                                     const ::xsd::qif2::PointDefinedCurveFeatureNominalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    PointDefinedCurveFeatureNominal (::std::ostream& os,
                                     const ::xsd::qif2::PointDefinedCurveFeatureNominalType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    PointDefinedCurveFeatureNominal (::std::ostream& os,
                                     const ::xsd::qif2::PointDefinedCurveFeatureNominalType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PointDefinedCurveFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::PointDefinedCurveFeatureNominalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    PointDefinedCurveFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::PointDefinedCurveFeatureNominalType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    PointDefinedCurveFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::PointDefinedCurveFeatureNominalType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PointDefinedCurveFeatureNominal (::xercesc::DOMDocument& d,
                                     const ::xsd::qif2::PointDefinedCurveFeatureNominalType& x,
                                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PointDefinedCurveFeatureNominal (const ::xsd::qif2::PointDefinedCurveFeatureNominalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PointDefinedSurfaceFeatureNominal (::std::ostream& os,
                                       const ::xsd::qif2::PointDefinedSurfaceFeatureNominalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    PointDefinedSurfaceFeatureNominal (::std::ostream& os,
                                       const ::xsd::qif2::PointDefinedSurfaceFeatureNominalType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    PointDefinedSurfaceFeatureNominal (::std::ostream& os,
                                       const ::xsd::qif2::PointDefinedSurfaceFeatureNominalType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PointDefinedSurfaceFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::PointDefinedSurfaceFeatureNominalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    PointDefinedSurfaceFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::PointDefinedSurfaceFeatureNominalType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    PointDefinedSurfaceFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::PointDefinedSurfaceFeatureNominalType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PointDefinedSurfaceFeatureNominal (::xercesc::DOMDocument& d,
                                       const ::xsd::qif2::PointDefinedSurfaceFeatureNominalType& x,
                                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PointDefinedSurfaceFeatureNominal (const ::xsd::qif2::PointDefinedSurfaceFeatureNominalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PointFeatureNominal (::std::ostream& os,
                         const ::xsd::qif2::PointFeatureNominalType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    PointFeatureNominal (::std::ostream& os,
                         const ::xsd::qif2::PointFeatureNominalType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    PointFeatureNominal (::std::ostream& os,
                         const ::xsd::qif2::PointFeatureNominalType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PointFeatureNominal (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::PointFeatureNominalType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    PointFeatureNominal (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::PointFeatureNominalType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    PointFeatureNominal (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::PointFeatureNominalType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PointFeatureNominal (::xercesc::DOMDocument& d,
                         const ::xsd::qif2::PointFeatureNominalType& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PointFeatureNominal (const ::xsd::qif2::PointFeatureNominalType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    OppositeLinesFeatureNominal (::std::ostream& os,
                                 const ::xsd::qif2::OppositeLinesFeatureNominalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    OppositeLinesFeatureNominal (::std::ostream& os,
                                 const ::xsd::qif2::OppositeLinesFeatureNominalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    OppositeLinesFeatureNominal (::std::ostream& os,
                                 const ::xsd::qif2::OppositeLinesFeatureNominalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    OppositeLinesFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::OppositeLinesFeatureNominalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    OppositeLinesFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::OppositeLinesFeatureNominalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    OppositeLinesFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::OppositeLinesFeatureNominalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    OppositeLinesFeatureNominal (::xercesc::DOMDocument& d,
                                 const ::xsd::qif2::OppositeLinesFeatureNominalType& x,
                                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    OppositeLinesFeatureNominal (const ::xsd::qif2::OppositeLinesFeatureNominalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    OppositePlanesFeatureNominal (::std::ostream& os,
                                  const ::xsd::qif2::OppositePlanesFeatureNominalType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    OppositePlanesFeatureNominal (::std::ostream& os,
                                  const ::xsd::qif2::OppositePlanesFeatureNominalType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    OppositePlanesFeatureNominal (::std::ostream& os,
                                  const ::xsd::qif2::OppositePlanesFeatureNominalType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    OppositePlanesFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::OppositePlanesFeatureNominalType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    OppositePlanesFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::OppositePlanesFeatureNominalType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    OppositePlanesFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::OppositePlanesFeatureNominalType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    OppositePlanesFeatureNominal (::xercesc::DOMDocument& d,
                                  const ::xsd::qif2::OppositePlanesFeatureNominalType& x,
                                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    OppositePlanesFeatureNominal (const ::xsd::qif2::OppositePlanesFeatureNominalType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ProfileGroupFeatureNominal (::std::ostream& os,
                                const ::xsd::qif2::ProfileGroupFeatureNominalType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ProfileGroupFeatureNominal (::std::ostream& os,
                                const ::xsd::qif2::ProfileGroupFeatureNominalType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ProfileGroupFeatureNominal (::std::ostream& os,
                                const ::xsd::qif2::ProfileGroupFeatureNominalType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ProfileGroupFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::ProfileGroupFeatureNominalType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ProfileGroupFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::ProfileGroupFeatureNominalType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ProfileGroupFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::ProfileGroupFeatureNominalType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ProfileGroupFeatureNominal (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::ProfileGroupFeatureNominalType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ProfileGroupFeatureNominal (const ::xsd::qif2::ProfileGroupFeatureNominalType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    RunoutGroupFeatureNominal (::std::ostream& os,
                               const ::xsd::qif2::RunoutGroupFeatureNominalType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    RunoutGroupFeatureNominal (::std::ostream& os,
                               const ::xsd::qif2::RunoutGroupFeatureNominalType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    RunoutGroupFeatureNominal (::std::ostream& os,
                               const ::xsd::qif2::RunoutGroupFeatureNominalType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    RunoutGroupFeatureNominal (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::RunoutGroupFeatureNominalType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    RunoutGroupFeatureNominal (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::RunoutGroupFeatureNominalType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    RunoutGroupFeatureNominal (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::RunoutGroupFeatureNominalType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    RunoutGroupFeatureNominal (::xercesc::DOMDocument& d,
                               const ::xsd::qif2::RunoutGroupFeatureNominalType& x,
                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    RunoutGroupFeatureNominal (const ::xsd::qif2::RunoutGroupFeatureNominalType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SphereFeatureNominal (::std::ostream& os,
                          const ::xsd::qif2::SphereFeatureNominalType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    SphereFeatureNominal (::std::ostream& os,
                          const ::xsd::qif2::SphereFeatureNominalType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    SphereFeatureNominal (::std::ostream& os,
                          const ::xsd::qif2::SphereFeatureNominalType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SphereFeatureNominal (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::SphereFeatureNominalType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    SphereFeatureNominal (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::SphereFeatureNominalType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    SphereFeatureNominal (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::SphereFeatureNominalType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SphereFeatureNominal (::xercesc::DOMDocument& d,
                          const ::xsd::qif2::SphereFeatureNominalType& x,
                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SphereFeatureNominal (const ::xsd::qif2::SphereFeatureNominalType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SphericalSegmentFeatureNominal (::std::ostream& os,
                                    const ::xsd::qif2::SphericalSegmentFeatureNominalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    SphericalSegmentFeatureNominal (::std::ostream& os,
                                    const ::xsd::qif2::SphericalSegmentFeatureNominalType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    SphericalSegmentFeatureNominal (::std::ostream& os,
                                    const ::xsd::qif2::SphericalSegmentFeatureNominalType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SphericalSegmentFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::SphericalSegmentFeatureNominalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    SphericalSegmentFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::SphericalSegmentFeatureNominalType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    SphericalSegmentFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::SphericalSegmentFeatureNominalType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SphericalSegmentFeatureNominal (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::SphericalSegmentFeatureNominalType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SphericalSegmentFeatureNominal (const ::xsd::qif2::SphericalSegmentFeatureNominalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SurfaceOfRevolutionFeatureNominal (::std::ostream& os,
                                       const ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    SurfaceOfRevolutionFeatureNominal (::std::ostream& os,
                                       const ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    SurfaceOfRevolutionFeatureNominal (::std::ostream& os,
                                       const ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SurfaceOfRevolutionFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    SurfaceOfRevolutionFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    SurfaceOfRevolutionFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SurfaceOfRevolutionFeatureNominal (::xercesc::DOMDocument& d,
                                       const ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType& x,
                                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SurfaceOfRevolutionFeatureNominal (const ::xsd::qif2::SurfaceOfRevolutionFeatureNominalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ThreadedFeatureNominal (::std::ostream& os,
                            const ::xsd::qif2::ThreadedFeatureNominalType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    ThreadedFeatureNominal (::std::ostream& os,
                            const ::xsd::qif2::ThreadedFeatureNominalType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    ThreadedFeatureNominal (::std::ostream& os,
                            const ::xsd::qif2::ThreadedFeatureNominalType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ThreadedFeatureNominal (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::ThreadedFeatureNominalType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    ThreadedFeatureNominal (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::ThreadedFeatureNominalType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    ThreadedFeatureNominal (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::ThreadedFeatureNominalType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ThreadedFeatureNominal (::xercesc::DOMDocument& d,
                            const ::xsd::qif2::ThreadedFeatureNominalType& x,
                            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ThreadedFeatureNominal (const ::xsd::qif2::ThreadedFeatureNominalType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ToroidalSegmentFeatureNominal (::std::ostream& os,
                                   const ::xsd::qif2::ToroidalSegmentFeatureNominalType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ToroidalSegmentFeatureNominal (::std::ostream& os,
                                   const ::xsd::qif2::ToroidalSegmentFeatureNominalType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ToroidalSegmentFeatureNominal (::std::ostream& os,
                                   const ::xsd::qif2::ToroidalSegmentFeatureNominalType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ToroidalSegmentFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::ToroidalSegmentFeatureNominalType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ToroidalSegmentFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::ToroidalSegmentFeatureNominalType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ToroidalSegmentFeatureNominal (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::ToroidalSegmentFeatureNominalType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ToroidalSegmentFeatureNominal (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::ToroidalSegmentFeatureNominalType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ToroidalSegmentFeatureNominal (const ::xsd::qif2::ToroidalSegmentFeatureNominalType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    TorusFeatureNominal (::std::ostream& os,
                         const ::xsd::qif2::TorusFeatureNominalType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    TorusFeatureNominal (::std::ostream& os,
                         const ::xsd::qif2::TorusFeatureNominalType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    TorusFeatureNominal (::std::ostream& os,
                         const ::xsd::qif2::TorusFeatureNominalType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    TorusFeatureNominal (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::TorusFeatureNominalType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    TorusFeatureNominal (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::TorusFeatureNominalType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    TorusFeatureNominal (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::TorusFeatureNominalType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    TorusFeatureNominal (::xercesc::DOMDocument& d,
                         const ::xsd::qif2::TorusFeatureNominalType& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    TorusFeatureNominal (const ::xsd::qif2::TorusFeatureNominalType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FeatureActual (::std::ostream& os,
                   const ::xsd::qif2::FeatureActualBaseType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    FeatureActual (::std::ostream& os,
                   const ::xsd::qif2::FeatureActualBaseType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    FeatureActual (::std::ostream& os,
                   const ::xsd::qif2::FeatureActualBaseType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FeatureActual (::xercesc::XMLFormatTarget& ft,
                   const ::xsd::qif2::FeatureActualBaseType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    FeatureActual (::xercesc::XMLFormatTarget& ft,
                   const ::xsd::qif2::FeatureActualBaseType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    FeatureActual (::xercesc::XMLFormatTarget& ft,
                   const ::xsd::qif2::FeatureActualBaseType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FeatureActual (::xercesc::DOMDocument& d,
                   const ::xsd::qif2::FeatureActualBaseType& x,
                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FeatureActual (const ::xsd::qif2::FeatureActualBaseType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ArcFeatureActual (::std::ostream& os,
                      const ::xsd::qif2::ArcFeatureActualType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    ArcFeatureActual (::std::ostream& os,
                      const ::xsd::qif2::ArcFeatureActualType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    ArcFeatureActual (::std::ostream& os,
                      const ::xsd::qif2::ArcFeatureActualType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ArcFeatureActual (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::ArcFeatureActualType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    ArcFeatureActual (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::ArcFeatureActualType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    ArcFeatureActual (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::ArcFeatureActualType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ArcFeatureActual (::xercesc::DOMDocument& d,
                      const ::xsd::qif2::ArcFeatureActualType& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ArcFeatureActual (const ::xsd::qif2::ArcFeatureActualType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    GenericFeatureActual (::std::ostream& os,
                          const ::xsd::qif2::GenericFeatureActualType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    GenericFeatureActual (::std::ostream& os,
                          const ::xsd::qif2::GenericFeatureActualType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    GenericFeatureActual (::std::ostream& os,
                          const ::xsd::qif2::GenericFeatureActualType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    GenericFeatureActual (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::GenericFeatureActualType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    GenericFeatureActual (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::GenericFeatureActualType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    GenericFeatureActual (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::GenericFeatureActualType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    GenericFeatureActual (::xercesc::DOMDocument& d,
                          const ::xsd::qif2::GenericFeatureActualType& x,
                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    GenericFeatureActual (const ::xsd::qif2::GenericFeatureActualType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CircleFeatureActual (::std::ostream& os,
                         const ::xsd::qif2::CircleFeatureActualType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CircleFeatureActual (::std::ostream& os,
                         const ::xsd::qif2::CircleFeatureActualType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CircleFeatureActual (::std::ostream& os,
                         const ::xsd::qif2::CircleFeatureActualType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CircleFeatureActual (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::CircleFeatureActualType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CircleFeatureActual (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::CircleFeatureActualType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CircleFeatureActual (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::CircleFeatureActualType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CircleFeatureActual (::xercesc::DOMDocument& d,
                         const ::xsd::qif2::CircleFeatureActualType& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CircleFeatureActual (const ::xsd::qif2::CircleFeatureActualType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CompoundFeatureActual (::std::ostream& os,
                           const ::xsd::qif2::CompoundFeatureActualType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    CompoundFeatureActual (::std::ostream& os,
                           const ::xsd::qif2::CompoundFeatureActualType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    CompoundFeatureActual (::std::ostream& os,
                           const ::xsd::qif2::CompoundFeatureActualType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CompoundFeatureActual (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::CompoundFeatureActualType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    CompoundFeatureActual (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::CompoundFeatureActualType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    CompoundFeatureActual (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::CompoundFeatureActualType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CompoundFeatureActual (::xercesc::DOMDocument& d,
                           const ::xsd::qif2::CompoundFeatureActualType& x,
                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CompoundFeatureActual (const ::xsd::qif2::CompoundFeatureActualType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ConeFeatureActual (::std::ostream& os,
                       const ::xsd::qif2::ConeFeatureActualType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    ConeFeatureActual (::std::ostream& os,
                       const ::xsd::qif2::ConeFeatureActualType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    ConeFeatureActual (::std::ostream& os,
                       const ::xsd::qif2::ConeFeatureActualType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ConeFeatureActual (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::ConeFeatureActualType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    ConeFeatureActual (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::ConeFeatureActualType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    ConeFeatureActual (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::ConeFeatureActualType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ConeFeatureActual (::xercesc::DOMDocument& d,
                       const ::xsd::qif2::ConeFeatureActualType& x,
                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ConeFeatureActual (const ::xsd::qif2::ConeFeatureActualType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ConicalSegmentFeatureActual (::std::ostream& os,
                                 const ::xsd::qif2::ConicalSegmentFeatureActualType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    ConicalSegmentFeatureActual (::std::ostream& os,
                                 const ::xsd::qif2::ConicalSegmentFeatureActualType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    ConicalSegmentFeatureActual (::std::ostream& os,
                                 const ::xsd::qif2::ConicalSegmentFeatureActualType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ConicalSegmentFeatureActual (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::ConicalSegmentFeatureActualType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    ConicalSegmentFeatureActual (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::ConicalSegmentFeatureActualType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    ConicalSegmentFeatureActual (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::ConicalSegmentFeatureActualType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ConicalSegmentFeatureActual (::xercesc::DOMDocument& d,
                                 const ::xsd::qif2::ConicalSegmentFeatureActualType& x,
                                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ConicalSegmentFeatureActual (const ::xsd::qif2::ConicalSegmentFeatureActualType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CuboidFeatureActual (::std::ostream& os,
                         const ::xsd::qif2::CuboidFeatureActualType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CuboidFeatureActual (::std::ostream& os,
                         const ::xsd::qif2::CuboidFeatureActualType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CuboidFeatureActual (::std::ostream& os,
                         const ::xsd::qif2::CuboidFeatureActualType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CuboidFeatureActual (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::CuboidFeatureActualType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CuboidFeatureActual (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::CuboidFeatureActualType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CuboidFeatureActual (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::CuboidFeatureActualType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CuboidFeatureActual (::xercesc::DOMDocument& d,
                         const ::xsd::qif2::CuboidFeatureActualType& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CuboidFeatureActual (const ::xsd::qif2::CuboidFeatureActualType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CylinderFeatureActual (::std::ostream& os,
                           const ::xsd::qif2::CylinderFeatureActualType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    CylinderFeatureActual (::std::ostream& os,
                           const ::xsd::qif2::CylinderFeatureActualType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    CylinderFeatureActual (::std::ostream& os,
                           const ::xsd::qif2::CylinderFeatureActualType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CylinderFeatureActual (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::CylinderFeatureActualType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    CylinderFeatureActual (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::CylinderFeatureActualType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    CylinderFeatureActual (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::CylinderFeatureActualType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CylinderFeatureActual (::xercesc::DOMDocument& d,
                           const ::xsd::qif2::CylinderFeatureActualType& x,
                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CylinderFeatureActual (const ::xsd::qif2::CylinderFeatureActualType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CylindricalSegmentFeatureActual (::std::ostream& os,
                                     const ::xsd::qif2::CylindricalSegmentFeatureActualType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    CylindricalSegmentFeatureActual (::std::ostream& os,
                                     const ::xsd::qif2::CylindricalSegmentFeatureActualType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    CylindricalSegmentFeatureActual (::std::ostream& os,
                                     const ::xsd::qif2::CylindricalSegmentFeatureActualType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CylindricalSegmentFeatureActual (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::CylindricalSegmentFeatureActualType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    CylindricalSegmentFeatureActual (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::CylindricalSegmentFeatureActualType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    CylindricalSegmentFeatureActual (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::CylindricalSegmentFeatureActualType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CylindricalSegmentFeatureActual (::xercesc::DOMDocument& d,
                                     const ::xsd::qif2::CylindricalSegmentFeatureActualType& x,
                                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CylindricalSegmentFeatureActual (const ::xsd::qif2::CylindricalSegmentFeatureActualType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    EdgePointFeatureActual (::std::ostream& os,
                            const ::xsd::qif2::EdgePointFeatureActualType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    EdgePointFeatureActual (::std::ostream& os,
                            const ::xsd::qif2::EdgePointFeatureActualType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    EdgePointFeatureActual (::std::ostream& os,
                            const ::xsd::qif2::EdgePointFeatureActualType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EdgePointFeatureActual (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::EdgePointFeatureActualType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    EdgePointFeatureActual (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::EdgePointFeatureActualType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    EdgePointFeatureActual (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::EdgePointFeatureActualType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EdgePointFeatureActual (::xercesc::DOMDocument& d,
                            const ::xsd::qif2::EdgePointFeatureActualType& x,
                            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EdgePointFeatureActual (const ::xsd::qif2::EdgePointFeatureActualType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    EllipseFeatureActual (::std::ostream& os,
                          const ::xsd::qif2::EllipseFeatureActualType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    EllipseFeatureActual (::std::ostream& os,
                          const ::xsd::qif2::EllipseFeatureActualType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    EllipseFeatureActual (::std::ostream& os,
                          const ::xsd::qif2::EllipseFeatureActualType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EllipseFeatureActual (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::EllipseFeatureActualType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    EllipseFeatureActual (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::EllipseFeatureActualType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    EllipseFeatureActual (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::EllipseFeatureActualType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EllipseFeatureActual (::xercesc::DOMDocument& d,
                          const ::xsd::qif2::EllipseFeatureActualType& x,
                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EllipseFeatureActual (const ::xsd::qif2::EllipseFeatureActualType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ElongatedCylinderFeatureActual (::std::ostream& os,
                                    const ::xsd::qif2::ElongatedCylinderFeatureActualType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    ElongatedCylinderFeatureActual (::std::ostream& os,
                                    const ::xsd::qif2::ElongatedCylinderFeatureActualType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    ElongatedCylinderFeatureActual (::std::ostream& os,
                                    const ::xsd::qif2::ElongatedCylinderFeatureActualType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ElongatedCylinderFeatureActual (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::ElongatedCylinderFeatureActualType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    ElongatedCylinderFeatureActual (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::ElongatedCylinderFeatureActualType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    ElongatedCylinderFeatureActual (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::ElongatedCylinderFeatureActualType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ElongatedCylinderFeatureActual (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::ElongatedCylinderFeatureActualType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ElongatedCylinderFeatureActual (const ::xsd::qif2::ElongatedCylinderFeatureActualType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ExtrudedCrossSectionFeatureActual (::std::ostream& os,
                                       const ::xsd::qif2::ExtrudedCrossSectionFeatureActualType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    ExtrudedCrossSectionFeatureActual (::std::ostream& os,
                                       const ::xsd::qif2::ExtrudedCrossSectionFeatureActualType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    ExtrudedCrossSectionFeatureActual (::std::ostream& os,
                                       const ::xsd::qif2::ExtrudedCrossSectionFeatureActualType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ExtrudedCrossSectionFeatureActual (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::ExtrudedCrossSectionFeatureActualType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    ExtrudedCrossSectionFeatureActual (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::ExtrudedCrossSectionFeatureActualType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    ExtrudedCrossSectionFeatureActual (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::ExtrudedCrossSectionFeatureActualType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ExtrudedCrossSectionFeatureActual (::xercesc::DOMDocument& d,
                                       const ::xsd::qif2::ExtrudedCrossSectionFeatureActualType& x,
                                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ExtrudedCrossSectionFeatureActual (const ::xsd::qif2::ExtrudedCrossSectionFeatureActualType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LineFeatureActual (::std::ostream& os,
                       const ::xsd::qif2::LineFeatureActualType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    LineFeatureActual (::std::ostream& os,
                       const ::xsd::qif2::LineFeatureActualType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    LineFeatureActual (::std::ostream& os,
                       const ::xsd::qif2::LineFeatureActualType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LineFeatureActual (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::LineFeatureActualType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    LineFeatureActual (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::LineFeatureActualType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    LineFeatureActual (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::LineFeatureActualType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LineFeatureActual (::xercesc::DOMDocument& d,
                       const ::xsd::qif2::LineFeatureActualType& x,
                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LineFeatureActual (const ::xsd::qif2::LineFeatureActualType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    OppositeLinesFeatureActual (::std::ostream& os,
                                const ::xsd::qif2::OppositeLinesFeatureActualType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    OppositeLinesFeatureActual (::std::ostream& os,
                                const ::xsd::qif2::OppositeLinesFeatureActualType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    OppositeLinesFeatureActual (::std::ostream& os,
                                const ::xsd::qif2::OppositeLinesFeatureActualType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    OppositeLinesFeatureActual (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::OppositeLinesFeatureActualType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    OppositeLinesFeatureActual (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::OppositeLinesFeatureActualType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    OppositeLinesFeatureActual (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::OppositeLinesFeatureActualType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    OppositeLinesFeatureActual (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::OppositeLinesFeatureActualType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    OppositeLinesFeatureActual (const ::xsd::qif2::OppositeLinesFeatureActualType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    OppositePlanesFeatureActual (::std::ostream& os,
                                 const ::xsd::qif2::OppositePlanesFeatureActualType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    OppositePlanesFeatureActual (::std::ostream& os,
                                 const ::xsd::qif2::OppositePlanesFeatureActualType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    OppositePlanesFeatureActual (::std::ostream& os,
                                 const ::xsd::qif2::OppositePlanesFeatureActualType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    OppositePlanesFeatureActual (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::OppositePlanesFeatureActualType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    OppositePlanesFeatureActual (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::OppositePlanesFeatureActualType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    OppositePlanesFeatureActual (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::OppositePlanesFeatureActualType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    OppositePlanesFeatureActual (::xercesc::DOMDocument& d,
                                 const ::xsd::qif2::OppositePlanesFeatureActualType& x,
                                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    OppositePlanesFeatureActual (const ::xsd::qif2::OppositePlanesFeatureActualType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PatternFeatureActual (::std::ostream& os,
                          const ::xsd::qif2::PatternFeatureActualType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    PatternFeatureActual (::std::ostream& os,
                          const ::xsd::qif2::PatternFeatureActualType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    PatternFeatureActual (::std::ostream& os,
                          const ::xsd::qif2::PatternFeatureActualType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PatternFeatureActual (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::PatternFeatureActualType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    PatternFeatureActual (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::PatternFeatureActualType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    PatternFeatureActual (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::PatternFeatureActualType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PatternFeatureActual (::xercesc::DOMDocument& d,
                          const ::xsd::qif2::PatternFeatureActualType& x,
                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PatternFeatureActual (const ::xsd::qif2::PatternFeatureActualType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PlaneFeatureActual (::std::ostream& os,
                        const ::xsd::qif2::PlaneFeatureActualType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    PlaneFeatureActual (::std::ostream& os,
                        const ::xsd::qif2::PlaneFeatureActualType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    PlaneFeatureActual (::std::ostream& os,
                        const ::xsd::qif2::PlaneFeatureActualType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PlaneFeatureActual (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::PlaneFeatureActualType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    PlaneFeatureActual (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::PlaneFeatureActualType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    PlaneFeatureActual (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::PlaneFeatureActualType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PlaneFeatureActual (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::PlaneFeatureActualType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PlaneFeatureActual (const ::xsd::qif2::PlaneFeatureActualType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PointDefinedCurveFeatureActual (::std::ostream& os,
                                    const ::xsd::qif2::PointDefinedCurveFeatureActualType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    PointDefinedCurveFeatureActual (::std::ostream& os,
                                    const ::xsd::qif2::PointDefinedCurveFeatureActualType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    PointDefinedCurveFeatureActual (::std::ostream& os,
                                    const ::xsd::qif2::PointDefinedCurveFeatureActualType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PointDefinedCurveFeatureActual (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::PointDefinedCurveFeatureActualType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    PointDefinedCurveFeatureActual (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::PointDefinedCurveFeatureActualType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    PointDefinedCurveFeatureActual (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::PointDefinedCurveFeatureActualType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PointDefinedCurveFeatureActual (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::PointDefinedCurveFeatureActualType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PointDefinedCurveFeatureActual (const ::xsd::qif2::PointDefinedCurveFeatureActualType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PointDefinedSurfaceFeatureActual (::std::ostream& os,
                                      const ::xsd::qif2::PointDefinedSurfaceFeatureActualType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    PointDefinedSurfaceFeatureActual (::std::ostream& os,
                                      const ::xsd::qif2::PointDefinedSurfaceFeatureActualType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    PointDefinedSurfaceFeatureActual (::std::ostream& os,
                                      const ::xsd::qif2::PointDefinedSurfaceFeatureActualType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PointDefinedSurfaceFeatureActual (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::PointDefinedSurfaceFeatureActualType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    PointDefinedSurfaceFeatureActual (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::PointDefinedSurfaceFeatureActualType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    PointDefinedSurfaceFeatureActual (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::PointDefinedSurfaceFeatureActualType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PointDefinedSurfaceFeatureActual (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::PointDefinedSurfaceFeatureActualType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PointDefinedSurfaceFeatureActual (const ::xsd::qif2::PointDefinedSurfaceFeatureActualType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PointFeatureActual (::std::ostream& os,
                        const ::xsd::qif2::PointFeatureActualType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    PointFeatureActual (::std::ostream& os,
                        const ::xsd::qif2::PointFeatureActualType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    PointFeatureActual (::std::ostream& os,
                        const ::xsd::qif2::PointFeatureActualType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PointFeatureActual (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::PointFeatureActualType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    PointFeatureActual (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::PointFeatureActualType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    PointFeatureActual (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::PointFeatureActualType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PointFeatureActual (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::PointFeatureActualType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PointFeatureActual (const ::xsd::qif2::PointFeatureActualType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ProfileGroupFeatureActual (::std::ostream& os,
                               const ::xsd::qif2::ProfileGroupFeatureActualType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ProfileGroupFeatureActual (::std::ostream& os,
                               const ::xsd::qif2::ProfileGroupFeatureActualType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ProfileGroupFeatureActual (::std::ostream& os,
                               const ::xsd::qif2::ProfileGroupFeatureActualType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ProfileGroupFeatureActual (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::ProfileGroupFeatureActualType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ProfileGroupFeatureActual (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::ProfileGroupFeatureActualType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ProfileGroupFeatureActual (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::ProfileGroupFeatureActualType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ProfileGroupFeatureActual (::xercesc::DOMDocument& d,
                               const ::xsd::qif2::ProfileGroupFeatureActualType& x,
                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ProfileGroupFeatureActual (const ::xsd::qif2::ProfileGroupFeatureActualType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    RunoutGroupFeatureActual (::std::ostream& os,
                              const ::xsd::qif2::RunoutGroupFeatureActualType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    RunoutGroupFeatureActual (::std::ostream& os,
                              const ::xsd::qif2::RunoutGroupFeatureActualType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    RunoutGroupFeatureActual (::std::ostream& os,
                              const ::xsd::qif2::RunoutGroupFeatureActualType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    RunoutGroupFeatureActual (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::RunoutGroupFeatureActualType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    RunoutGroupFeatureActual (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::RunoutGroupFeatureActualType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    RunoutGroupFeatureActual (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::RunoutGroupFeatureActualType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    RunoutGroupFeatureActual (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::RunoutGroupFeatureActualType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    RunoutGroupFeatureActual (const ::xsd::qif2::RunoutGroupFeatureActualType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SphereFeatureActual (::std::ostream& os,
                         const ::xsd::qif2::SphereFeatureActualType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    SphereFeatureActual (::std::ostream& os,
                         const ::xsd::qif2::SphereFeatureActualType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    SphereFeatureActual (::std::ostream& os,
                         const ::xsd::qif2::SphereFeatureActualType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SphereFeatureActual (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::SphereFeatureActualType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    SphereFeatureActual (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::SphereFeatureActualType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    SphereFeatureActual (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::SphereFeatureActualType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SphereFeatureActual (::xercesc::DOMDocument& d,
                         const ::xsd::qif2::SphereFeatureActualType& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SphereFeatureActual (const ::xsd::qif2::SphereFeatureActualType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SphericalSegmentFeatureActual (::std::ostream& os,
                                   const ::xsd::qif2::SphericalSegmentFeatureActualType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    SphericalSegmentFeatureActual (::std::ostream& os,
                                   const ::xsd::qif2::SphericalSegmentFeatureActualType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    SphericalSegmentFeatureActual (::std::ostream& os,
                                   const ::xsd::qif2::SphericalSegmentFeatureActualType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SphericalSegmentFeatureActual (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::SphericalSegmentFeatureActualType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    SphericalSegmentFeatureActual (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::SphericalSegmentFeatureActualType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    SphericalSegmentFeatureActual (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::SphericalSegmentFeatureActualType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SphericalSegmentFeatureActual (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::SphericalSegmentFeatureActualType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SphericalSegmentFeatureActual (const ::xsd::qif2::SphericalSegmentFeatureActualType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SurfaceOfRevolutionFeatureActual (::std::ostream& os,
                                      const ::xsd::qif2::SurfaceOfRevolutionFeatureActualType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    SurfaceOfRevolutionFeatureActual (::std::ostream& os,
                                      const ::xsd::qif2::SurfaceOfRevolutionFeatureActualType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    SurfaceOfRevolutionFeatureActual (::std::ostream& os,
                                      const ::xsd::qif2::SurfaceOfRevolutionFeatureActualType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SurfaceOfRevolutionFeatureActual (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::SurfaceOfRevolutionFeatureActualType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    SurfaceOfRevolutionFeatureActual (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::SurfaceOfRevolutionFeatureActualType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    SurfaceOfRevolutionFeatureActual (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::SurfaceOfRevolutionFeatureActualType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SurfaceOfRevolutionFeatureActual (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::SurfaceOfRevolutionFeatureActualType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SurfaceOfRevolutionFeatureActual (const ::xsd::qif2::SurfaceOfRevolutionFeatureActualType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ThreadedFeatureActual (::std::ostream& os,
                           const ::xsd::qif2::ThreadedFeatureActualType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    ThreadedFeatureActual (::std::ostream& os,
                           const ::xsd::qif2::ThreadedFeatureActualType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    ThreadedFeatureActual (::std::ostream& os,
                           const ::xsd::qif2::ThreadedFeatureActualType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ThreadedFeatureActual (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::ThreadedFeatureActualType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    ThreadedFeatureActual (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::ThreadedFeatureActualType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    ThreadedFeatureActual (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::ThreadedFeatureActualType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ThreadedFeatureActual (::xercesc::DOMDocument& d,
                           const ::xsd::qif2::ThreadedFeatureActualType& x,
                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ThreadedFeatureActual (const ::xsd::qif2::ThreadedFeatureActualType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ToroidalSegmentFeatureActual (::std::ostream& os,
                                  const ::xsd::qif2::ToroidalSegmentFeatureActualType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    ToroidalSegmentFeatureActual (::std::ostream& os,
                                  const ::xsd::qif2::ToroidalSegmentFeatureActualType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    ToroidalSegmentFeatureActual (::std::ostream& os,
                                  const ::xsd::qif2::ToroidalSegmentFeatureActualType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ToroidalSegmentFeatureActual (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::ToroidalSegmentFeatureActualType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    ToroidalSegmentFeatureActual (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::ToroidalSegmentFeatureActualType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    ToroidalSegmentFeatureActual (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::ToroidalSegmentFeatureActualType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ToroidalSegmentFeatureActual (::xercesc::DOMDocument& d,
                                  const ::xsd::qif2::ToroidalSegmentFeatureActualType& x,
                                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ToroidalSegmentFeatureActual (const ::xsd::qif2::ToroidalSegmentFeatureActualType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    TorusFeatureActual (::std::ostream& os,
                        const ::xsd::qif2::TorusFeatureActualType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    TorusFeatureActual (::std::ostream& os,
                        const ::xsd::qif2::TorusFeatureActualType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    TorusFeatureActual (::std::ostream& os,
                        const ::xsd::qif2::TorusFeatureActualType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    TorusFeatureActual (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::TorusFeatureActualType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    TorusFeatureActual (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::TorusFeatureActualType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    TorusFeatureActual (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::TorusFeatureActualType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    TorusFeatureActual (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::TorusFeatureActualType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    TorusFeatureActual (const ::xsd::qif2::TorusFeatureActualType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FeatureItem (::std::ostream& os,
                 const ::xsd::qif2::FeatureItemBaseType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    void
    FeatureItem (::std::ostream& os,
                 const ::xsd::qif2::FeatureItemBaseType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    void
    FeatureItem (::std::ostream& os,
                 const ::xsd::qif2::FeatureItemBaseType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FeatureItem (::xercesc::XMLFormatTarget& ft,
                 const ::xsd::qif2::FeatureItemBaseType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    void
    FeatureItem (::xercesc::XMLFormatTarget& ft,
                 const ::xsd::qif2::FeatureItemBaseType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    void
    FeatureItem (::xercesc::XMLFormatTarget& ft,
                 const ::xsd::qif2::FeatureItemBaseType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FeatureItem (::xercesc::DOMDocument& d,
                 const ::xsd::qif2::FeatureItemBaseType& x,
                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FeatureItem (const ::xsd::qif2::FeatureItemBaseType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ArcFeatureItem (::std::ostream& os,
                    const ::xsd::qif2::ArcFeatureItemType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    void
    ArcFeatureItem (::std::ostream& os,
                    const ::xsd::qif2::ArcFeatureItemType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    void
    ArcFeatureItem (::std::ostream& os,
                    const ::xsd::qif2::ArcFeatureItemType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ArcFeatureItem (::xercesc::XMLFormatTarget& ft,
                    const ::xsd::qif2::ArcFeatureItemType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    void
    ArcFeatureItem (::xercesc::XMLFormatTarget& ft,
                    const ::xsd::qif2::ArcFeatureItemType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    void
    ArcFeatureItem (::xercesc::XMLFormatTarget& ft,
                    const ::xsd::qif2::ArcFeatureItemType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ArcFeatureItem (::xercesc::DOMDocument& d,
                    const ::xsd::qif2::ArcFeatureItemType& x,
                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ArcFeatureItem (const ::xsd::qif2::ArcFeatureItemType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    GenericFeatureItem (::std::ostream& os,
                        const ::xsd::qif2::GenericFeatureItemType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    GenericFeatureItem (::std::ostream& os,
                        const ::xsd::qif2::GenericFeatureItemType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    GenericFeatureItem (::std::ostream& os,
                        const ::xsd::qif2::GenericFeatureItemType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    GenericFeatureItem (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::GenericFeatureItemType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    GenericFeatureItem (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::GenericFeatureItemType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    GenericFeatureItem (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::GenericFeatureItemType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    GenericFeatureItem (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::GenericFeatureItemType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    GenericFeatureItem (const ::xsd::qif2::GenericFeatureItemType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CircleFeatureItem (::std::ostream& os,
                       const ::xsd::qif2::CircleFeatureItemType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    CircleFeatureItem (::std::ostream& os,
                       const ::xsd::qif2::CircleFeatureItemType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    CircleFeatureItem (::std::ostream& os,
                       const ::xsd::qif2::CircleFeatureItemType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CircleFeatureItem (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::CircleFeatureItemType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    CircleFeatureItem (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::CircleFeatureItemType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    CircleFeatureItem (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::CircleFeatureItemType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CircleFeatureItem (::xercesc::DOMDocument& d,
                       const ::xsd::qif2::CircleFeatureItemType& x,
                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CircleFeatureItem (const ::xsd::qif2::CircleFeatureItemType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CompoundFeatureItem (::std::ostream& os,
                         const ::xsd::qif2::CompoundFeatureItemType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CompoundFeatureItem (::std::ostream& os,
                         const ::xsd::qif2::CompoundFeatureItemType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CompoundFeatureItem (::std::ostream& os,
                         const ::xsd::qif2::CompoundFeatureItemType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CompoundFeatureItem (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::CompoundFeatureItemType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CompoundFeatureItem (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::CompoundFeatureItemType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CompoundFeatureItem (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::CompoundFeatureItemType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CompoundFeatureItem (::xercesc::DOMDocument& d,
                         const ::xsd::qif2::CompoundFeatureItemType& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CompoundFeatureItem (const ::xsd::qif2::CompoundFeatureItemType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ConeFeatureItem (::std::ostream& os,
                     const ::xsd::qif2::ConeFeatureItemType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    ConeFeatureItem (::std::ostream& os,
                     const ::xsd::qif2::ConeFeatureItemType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    ConeFeatureItem (::std::ostream& os,
                     const ::xsd::qif2::ConeFeatureItemType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ConeFeatureItem (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::ConeFeatureItemType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    ConeFeatureItem (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::ConeFeatureItemType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    ConeFeatureItem (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::ConeFeatureItemType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ConeFeatureItem (::xercesc::DOMDocument& d,
                     const ::xsd::qif2::ConeFeatureItemType& x,
                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ConeFeatureItem (const ::xsd::qif2::ConeFeatureItemType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ConicalSegmentFeatureItem (::std::ostream& os,
                               const ::xsd::qif2::ConicalSegmentFeatureItemType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ConicalSegmentFeatureItem (::std::ostream& os,
                               const ::xsd::qif2::ConicalSegmentFeatureItemType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ConicalSegmentFeatureItem (::std::ostream& os,
                               const ::xsd::qif2::ConicalSegmentFeatureItemType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ConicalSegmentFeatureItem (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::ConicalSegmentFeatureItemType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ConicalSegmentFeatureItem (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::ConicalSegmentFeatureItemType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ConicalSegmentFeatureItem (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::ConicalSegmentFeatureItemType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ConicalSegmentFeatureItem (::xercesc::DOMDocument& d,
                               const ::xsd::qif2::ConicalSegmentFeatureItemType& x,
                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ConicalSegmentFeatureItem (const ::xsd::qif2::ConicalSegmentFeatureItemType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CuboidFeatureItem (::std::ostream& os,
                       const ::xsd::qif2::CuboidFeatureItemType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    CuboidFeatureItem (::std::ostream& os,
                       const ::xsd::qif2::CuboidFeatureItemType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    CuboidFeatureItem (::std::ostream& os,
                       const ::xsd::qif2::CuboidFeatureItemType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CuboidFeatureItem (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::CuboidFeatureItemType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    CuboidFeatureItem (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::CuboidFeatureItemType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    CuboidFeatureItem (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::CuboidFeatureItemType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CuboidFeatureItem (::xercesc::DOMDocument& d,
                       const ::xsd::qif2::CuboidFeatureItemType& x,
                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CuboidFeatureItem (const ::xsd::qif2::CuboidFeatureItemType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CylinderFeatureItem (::std::ostream& os,
                         const ::xsd::qif2::CylinderFeatureItemType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CylinderFeatureItem (::std::ostream& os,
                         const ::xsd::qif2::CylinderFeatureItemType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CylinderFeatureItem (::std::ostream& os,
                         const ::xsd::qif2::CylinderFeatureItemType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CylinderFeatureItem (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::CylinderFeatureItemType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CylinderFeatureItem (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::CylinderFeatureItemType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CylinderFeatureItem (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::CylinderFeatureItemType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CylinderFeatureItem (::xercesc::DOMDocument& d,
                         const ::xsd::qif2::CylinderFeatureItemType& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CylinderFeatureItem (const ::xsd::qif2::CylinderFeatureItemType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CylindricalSegmentFeatureItem (::std::ostream& os,
                                   const ::xsd::qif2::CylindricalSegmentFeatureItemType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    CylindricalSegmentFeatureItem (::std::ostream& os,
                                   const ::xsd::qif2::CylindricalSegmentFeatureItemType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    CylindricalSegmentFeatureItem (::std::ostream& os,
                                   const ::xsd::qif2::CylindricalSegmentFeatureItemType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CylindricalSegmentFeatureItem (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::CylindricalSegmentFeatureItemType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    CylindricalSegmentFeatureItem (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::CylindricalSegmentFeatureItemType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    CylindricalSegmentFeatureItem (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::CylindricalSegmentFeatureItemType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CylindricalSegmentFeatureItem (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::CylindricalSegmentFeatureItemType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CylindricalSegmentFeatureItem (const ::xsd::qif2::CylindricalSegmentFeatureItemType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    EdgePointFeatureItem (::std::ostream& os,
                          const ::xsd::qif2::EdgePointFeatureItemType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    EdgePointFeatureItem (::std::ostream& os,
                          const ::xsd::qif2::EdgePointFeatureItemType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    EdgePointFeatureItem (::std::ostream& os,
                          const ::xsd::qif2::EdgePointFeatureItemType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EdgePointFeatureItem (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::EdgePointFeatureItemType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    EdgePointFeatureItem (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::EdgePointFeatureItemType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    EdgePointFeatureItem (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::EdgePointFeatureItemType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EdgePointFeatureItem (::xercesc::DOMDocument& d,
                          const ::xsd::qif2::EdgePointFeatureItemType& x,
                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EdgePointFeatureItem (const ::xsd::qif2::EdgePointFeatureItemType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    EllipseFeatureItem (::std::ostream& os,
                        const ::xsd::qif2::EllipseFeatureItemType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    EllipseFeatureItem (::std::ostream& os,
                        const ::xsd::qif2::EllipseFeatureItemType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    EllipseFeatureItem (::std::ostream& os,
                        const ::xsd::qif2::EllipseFeatureItemType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EllipseFeatureItem (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::EllipseFeatureItemType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    EllipseFeatureItem (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::EllipseFeatureItemType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    EllipseFeatureItem (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::EllipseFeatureItemType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EllipseFeatureItem (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::EllipseFeatureItemType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EllipseFeatureItem (const ::xsd::qif2::EllipseFeatureItemType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ElongatedCylinderFeatureItem (::std::ostream& os,
                                  const ::xsd::qif2::ElongatedCylinderFeatureItemType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    ElongatedCylinderFeatureItem (::std::ostream& os,
                                  const ::xsd::qif2::ElongatedCylinderFeatureItemType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    ElongatedCylinderFeatureItem (::std::ostream& os,
                                  const ::xsd::qif2::ElongatedCylinderFeatureItemType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ElongatedCylinderFeatureItem (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::ElongatedCylinderFeatureItemType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    ElongatedCylinderFeatureItem (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::ElongatedCylinderFeatureItemType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    ElongatedCylinderFeatureItem (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::ElongatedCylinderFeatureItemType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ElongatedCylinderFeatureItem (::xercesc::DOMDocument& d,
                                  const ::xsd::qif2::ElongatedCylinderFeatureItemType& x,
                                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ElongatedCylinderFeatureItem (const ::xsd::qif2::ElongatedCylinderFeatureItemType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ExtrudedCrossSectionFeatureItem (::std::ostream& os,
                                     const ::xsd::qif2::ExtrudedCrossSectionFeatureItemType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    ExtrudedCrossSectionFeatureItem (::std::ostream& os,
                                     const ::xsd::qif2::ExtrudedCrossSectionFeatureItemType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    ExtrudedCrossSectionFeatureItem (::std::ostream& os,
                                     const ::xsd::qif2::ExtrudedCrossSectionFeatureItemType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ExtrudedCrossSectionFeatureItem (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::ExtrudedCrossSectionFeatureItemType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    ExtrudedCrossSectionFeatureItem (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::ExtrudedCrossSectionFeatureItemType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    ExtrudedCrossSectionFeatureItem (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::ExtrudedCrossSectionFeatureItemType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ExtrudedCrossSectionFeatureItem (::xercesc::DOMDocument& d,
                                     const ::xsd::qif2::ExtrudedCrossSectionFeatureItemType& x,
                                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ExtrudedCrossSectionFeatureItem (const ::xsd::qif2::ExtrudedCrossSectionFeatureItemType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LineFeatureItem (::std::ostream& os,
                     const ::xsd::qif2::LineFeatureItemType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    LineFeatureItem (::std::ostream& os,
                     const ::xsd::qif2::LineFeatureItemType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    LineFeatureItem (::std::ostream& os,
                     const ::xsd::qif2::LineFeatureItemType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LineFeatureItem (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::LineFeatureItemType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    LineFeatureItem (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::LineFeatureItemType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    LineFeatureItem (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::LineFeatureItemType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LineFeatureItem (::xercesc::DOMDocument& d,
                     const ::xsd::qif2::LineFeatureItemType& x,
                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LineFeatureItem (const ::xsd::qif2::LineFeatureItemType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    OppositeLinesFeatureItem (::std::ostream& os,
                              const ::xsd::qif2::OppositeLinesFeatureItemType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    OppositeLinesFeatureItem (::std::ostream& os,
                              const ::xsd::qif2::OppositeLinesFeatureItemType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    OppositeLinesFeatureItem (::std::ostream& os,
                              const ::xsd::qif2::OppositeLinesFeatureItemType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    OppositeLinesFeatureItem (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::OppositeLinesFeatureItemType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    OppositeLinesFeatureItem (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::OppositeLinesFeatureItemType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    OppositeLinesFeatureItem (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::OppositeLinesFeatureItemType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    OppositeLinesFeatureItem (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::OppositeLinesFeatureItemType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    OppositeLinesFeatureItem (const ::xsd::qif2::OppositeLinesFeatureItemType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    OppositePlanesFeatureItem (::std::ostream& os,
                               const ::xsd::qif2::OppositePlanesFeatureItemType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    OppositePlanesFeatureItem (::std::ostream& os,
                               const ::xsd::qif2::OppositePlanesFeatureItemType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    OppositePlanesFeatureItem (::std::ostream& os,
                               const ::xsd::qif2::OppositePlanesFeatureItemType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    OppositePlanesFeatureItem (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::OppositePlanesFeatureItemType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    OppositePlanesFeatureItem (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::OppositePlanesFeatureItemType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    OppositePlanesFeatureItem (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::OppositePlanesFeatureItemType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    OppositePlanesFeatureItem (::xercesc::DOMDocument& d,
                               const ::xsd::qif2::OppositePlanesFeatureItemType& x,
                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    OppositePlanesFeatureItem (const ::xsd::qif2::OppositePlanesFeatureItemType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PatternFeatureItem (::std::ostream& os,
                        const ::xsd::qif2::PatternFeatureItemType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    PatternFeatureItem (::std::ostream& os,
                        const ::xsd::qif2::PatternFeatureItemType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    PatternFeatureItem (::std::ostream& os,
                        const ::xsd::qif2::PatternFeatureItemType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PatternFeatureItem (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::PatternFeatureItemType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    PatternFeatureItem (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::PatternFeatureItemType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    PatternFeatureItem (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::PatternFeatureItemType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PatternFeatureItem (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::PatternFeatureItemType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PatternFeatureItem (const ::xsd::qif2::PatternFeatureItemType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PlaneFeatureItem (::std::ostream& os,
                      const ::xsd::qif2::PlaneFeatureItemType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    PlaneFeatureItem (::std::ostream& os,
                      const ::xsd::qif2::PlaneFeatureItemType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    PlaneFeatureItem (::std::ostream& os,
                      const ::xsd::qif2::PlaneFeatureItemType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PlaneFeatureItem (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::PlaneFeatureItemType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    PlaneFeatureItem (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::PlaneFeatureItemType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    PlaneFeatureItem (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::PlaneFeatureItemType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PlaneFeatureItem (::xercesc::DOMDocument& d,
                      const ::xsd::qif2::PlaneFeatureItemType& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PlaneFeatureItem (const ::xsd::qif2::PlaneFeatureItemType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PointDefinedCurveFeatureItem (::std::ostream& os,
                                  const ::xsd::qif2::PointDefinedCurveFeatureItemType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    PointDefinedCurveFeatureItem (::std::ostream& os,
                                  const ::xsd::qif2::PointDefinedCurveFeatureItemType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    PointDefinedCurveFeatureItem (::std::ostream& os,
                                  const ::xsd::qif2::PointDefinedCurveFeatureItemType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PointDefinedCurveFeatureItem (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::PointDefinedCurveFeatureItemType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    PointDefinedCurveFeatureItem (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::PointDefinedCurveFeatureItemType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    PointDefinedCurveFeatureItem (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::PointDefinedCurveFeatureItemType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PointDefinedCurveFeatureItem (::xercesc::DOMDocument& d,
                                  const ::xsd::qif2::PointDefinedCurveFeatureItemType& x,
                                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PointDefinedCurveFeatureItem (const ::xsd::qif2::PointDefinedCurveFeatureItemType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PointDefinedSurfaceFeatureItem (::std::ostream& os,
                                    const ::xsd::qif2::PointDefinedSurfaceFeatureItemType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    PointDefinedSurfaceFeatureItem (::std::ostream& os,
                                    const ::xsd::qif2::PointDefinedSurfaceFeatureItemType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    PointDefinedSurfaceFeatureItem (::std::ostream& os,
                                    const ::xsd::qif2::PointDefinedSurfaceFeatureItemType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PointDefinedSurfaceFeatureItem (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::PointDefinedSurfaceFeatureItemType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    PointDefinedSurfaceFeatureItem (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::PointDefinedSurfaceFeatureItemType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    PointDefinedSurfaceFeatureItem (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::PointDefinedSurfaceFeatureItemType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PointDefinedSurfaceFeatureItem (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::PointDefinedSurfaceFeatureItemType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PointDefinedSurfaceFeatureItem (const ::xsd::qif2::PointDefinedSurfaceFeatureItemType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PointFeatureItem (::std::ostream& os,
                      const ::xsd::qif2::PointFeatureItemType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    PointFeatureItem (::std::ostream& os,
                      const ::xsd::qif2::PointFeatureItemType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    PointFeatureItem (::std::ostream& os,
                      const ::xsd::qif2::PointFeatureItemType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PointFeatureItem (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::PointFeatureItemType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    PointFeatureItem (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::PointFeatureItemType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    PointFeatureItem (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::PointFeatureItemType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PointFeatureItem (::xercesc::DOMDocument& d,
                      const ::xsd::qif2::PointFeatureItemType& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PointFeatureItem (const ::xsd::qif2::PointFeatureItemType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ProfileGroupFeatureItem (::std::ostream& os,
                             const ::xsd::qif2::ProfileGroupFeatureItemType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    ProfileGroupFeatureItem (::std::ostream& os,
                             const ::xsd::qif2::ProfileGroupFeatureItemType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    ProfileGroupFeatureItem (::std::ostream& os,
                             const ::xsd::qif2::ProfileGroupFeatureItemType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ProfileGroupFeatureItem (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::ProfileGroupFeatureItemType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    ProfileGroupFeatureItem (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::ProfileGroupFeatureItemType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    ProfileGroupFeatureItem (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::ProfileGroupFeatureItemType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ProfileGroupFeatureItem (::xercesc::DOMDocument& d,
                             const ::xsd::qif2::ProfileGroupFeatureItemType& x,
                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ProfileGroupFeatureItem (const ::xsd::qif2::ProfileGroupFeatureItemType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    RunoutGroupFeatureItem (::std::ostream& os,
                            const ::xsd::qif2::RunoutGroupFeatureItemType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    RunoutGroupFeatureItem (::std::ostream& os,
                            const ::xsd::qif2::RunoutGroupFeatureItemType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    RunoutGroupFeatureItem (::std::ostream& os,
                            const ::xsd::qif2::RunoutGroupFeatureItemType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    RunoutGroupFeatureItem (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::RunoutGroupFeatureItemType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    RunoutGroupFeatureItem (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::RunoutGroupFeatureItemType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    RunoutGroupFeatureItem (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::RunoutGroupFeatureItemType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    RunoutGroupFeatureItem (::xercesc::DOMDocument& d,
                            const ::xsd::qif2::RunoutGroupFeatureItemType& x,
                            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    RunoutGroupFeatureItem (const ::xsd::qif2::RunoutGroupFeatureItemType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SphereFeatureItem (::std::ostream& os,
                       const ::xsd::qif2::SphereFeatureItemType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    SphereFeatureItem (::std::ostream& os,
                       const ::xsd::qif2::SphereFeatureItemType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    SphereFeatureItem (::std::ostream& os,
                       const ::xsd::qif2::SphereFeatureItemType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SphereFeatureItem (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::SphereFeatureItemType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    SphereFeatureItem (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::SphereFeatureItemType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    SphereFeatureItem (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::SphereFeatureItemType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SphereFeatureItem (::xercesc::DOMDocument& d,
                       const ::xsd::qif2::SphereFeatureItemType& x,
                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SphereFeatureItem (const ::xsd::qif2::SphereFeatureItemType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SphericalSegmentFeatureItem (::std::ostream& os,
                                 const ::xsd::qif2::SphericalSegmentFeatureItemType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    SphericalSegmentFeatureItem (::std::ostream& os,
                                 const ::xsd::qif2::SphericalSegmentFeatureItemType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    SphericalSegmentFeatureItem (::std::ostream& os,
                                 const ::xsd::qif2::SphericalSegmentFeatureItemType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SphericalSegmentFeatureItem (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::SphericalSegmentFeatureItemType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    SphericalSegmentFeatureItem (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::SphericalSegmentFeatureItemType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    SphericalSegmentFeatureItem (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::SphericalSegmentFeatureItemType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SphericalSegmentFeatureItem (::xercesc::DOMDocument& d,
                                 const ::xsd::qif2::SphericalSegmentFeatureItemType& x,
                                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SphericalSegmentFeatureItem (const ::xsd::qif2::SphericalSegmentFeatureItemType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SurfaceOfRevolutionFeatureItem (::std::ostream& os,
                                    const ::xsd::qif2::SurfaceOfRevolutionFeatureItemType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    SurfaceOfRevolutionFeatureItem (::std::ostream& os,
                                    const ::xsd::qif2::SurfaceOfRevolutionFeatureItemType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    SurfaceOfRevolutionFeatureItem (::std::ostream& os,
                                    const ::xsd::qif2::SurfaceOfRevolutionFeatureItemType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SurfaceOfRevolutionFeatureItem (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::SurfaceOfRevolutionFeatureItemType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    SurfaceOfRevolutionFeatureItem (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::SurfaceOfRevolutionFeatureItemType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    SurfaceOfRevolutionFeatureItem (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::SurfaceOfRevolutionFeatureItemType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SurfaceOfRevolutionFeatureItem (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::SurfaceOfRevolutionFeatureItemType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SurfaceOfRevolutionFeatureItem (const ::xsd::qif2::SurfaceOfRevolutionFeatureItemType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ThreadedFeatureItem (::std::ostream& os,
                         const ::xsd::qif2::ThreadedFeatureItemType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    ThreadedFeatureItem (::std::ostream& os,
                         const ::xsd::qif2::ThreadedFeatureItemType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    ThreadedFeatureItem (::std::ostream& os,
                         const ::xsd::qif2::ThreadedFeatureItemType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ThreadedFeatureItem (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::ThreadedFeatureItemType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    ThreadedFeatureItem (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::ThreadedFeatureItemType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    ThreadedFeatureItem (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::ThreadedFeatureItemType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ThreadedFeatureItem (::xercesc::DOMDocument& d,
                         const ::xsd::qif2::ThreadedFeatureItemType& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ThreadedFeatureItem (const ::xsd::qif2::ThreadedFeatureItemType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ToroidalSegmentFeatureItem (::std::ostream& os,
                                const ::xsd::qif2::ToroidalSegmentFeatureItemType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ToroidalSegmentFeatureItem (::std::ostream& os,
                                const ::xsd::qif2::ToroidalSegmentFeatureItemType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ToroidalSegmentFeatureItem (::std::ostream& os,
                                const ::xsd::qif2::ToroidalSegmentFeatureItemType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ToroidalSegmentFeatureItem (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::ToroidalSegmentFeatureItemType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ToroidalSegmentFeatureItem (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::ToroidalSegmentFeatureItemType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ToroidalSegmentFeatureItem (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::ToroidalSegmentFeatureItemType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ToroidalSegmentFeatureItem (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::ToroidalSegmentFeatureItemType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ToroidalSegmentFeatureItem (const ::xsd::qif2::ToroidalSegmentFeatureItemType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    TorusFeatureItem (::std::ostream& os,
                      const ::xsd::qif2::TorusFeatureItemType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    TorusFeatureItem (::std::ostream& os,
                      const ::xsd::qif2::TorusFeatureItemType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    TorusFeatureItem (::std::ostream& os,
                      const ::xsd::qif2::TorusFeatureItemType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    TorusFeatureItem (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::TorusFeatureItemType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    TorusFeatureItem (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::TorusFeatureItemType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    TorusFeatureItem (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::TorusFeatureItemType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    TorusFeatureItem (::xercesc::DOMDocument& d,
                      const ::xsd::qif2::TorusFeatureItemType& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    TorusFeatureItem (const ::xsd::qif2::TorusFeatureItemType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // FEATURES_HXX

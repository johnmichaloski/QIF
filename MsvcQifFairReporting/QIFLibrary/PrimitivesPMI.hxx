// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRIMITIVES_PMI_HXX
#define PRIMITIVES_PMI_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xsd
{
  namespace qif2
  {
    class RectangularUnitAreaType;
    class CircularUnitAreaType;
    class ActualZoneAxisType;
    class BottomEnumType;
    class BottomType;
    class BoundingBoxType;
    class ShapeClassEnumType;
    class ShapeClassType;
    class ManufacturingMethodEnumType;
    class ManufacturingMethodType;
    class InternalExternalEnumType;
    class DimensionCountEnumType;
    class CoordinateEnumType;
    class TypeOfCoordinatesType;
    class RectangleType;
    class CircleType;
    class CylinderType;
    class SphereType;
    class PointAndVectorType;
    class ActualPointAndVectorType;
    class SlotEndEnumType;
    class EndRadiusType;
    class ActualEndRadiusType;
    class SlotEndType;
    class ThreadSeriesEnumType;
    class ThreadSeriesType;
    class ThreadClassType;
    class ThreadClassEnumType;
    class SecurityClassificationEnumType;
    class SecurityClassificationType;
    class DigitalModelFormatEnumType;
    class DigitalModelFormatType;
    class UniformScaleType;
    class RadialDifferentialScaleType;
    class AxialDifferentialScaleType;
    class ScaleType;
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "../qiflibrary/primitives.hxx"

namespace xsd
{
  namespace qif2
  {
    class RectangularUnitAreaType: public ::xml_schema::type
    {
      public:
      // RectangularUnitAreaLength
      //
      typedef ::xsd::qif2::LinearValueType RectangularUnitAreaLength_type;
      typedef ::xsd::cxx::tree::traits< RectangularUnitAreaLength_type, char > RectangularUnitAreaLength_traits;

      const RectangularUnitAreaLength_type&
      RectangularUnitAreaLength () const;

      RectangularUnitAreaLength_type&
      RectangularUnitAreaLength ();

      void
      RectangularUnitAreaLength (const RectangularUnitAreaLength_type& x);

      void
      RectangularUnitAreaLength (::std::auto_ptr< RectangularUnitAreaLength_type > p);

      // RectangularUnitAreaWidth
      //
      typedef ::xsd::qif2::LinearValueType RectangularUnitAreaWidth_type;
      typedef ::xsd::cxx::tree::traits< RectangularUnitAreaWidth_type, char > RectangularUnitAreaWidth_traits;

      const RectangularUnitAreaWidth_type&
      RectangularUnitAreaWidth () const;

      RectangularUnitAreaWidth_type&
      RectangularUnitAreaWidth ();

      void
      RectangularUnitAreaWidth (const RectangularUnitAreaWidth_type& x);

      void
      RectangularUnitAreaWidth (::std::auto_ptr< RectangularUnitAreaWidth_type > p);

      // RectangularUnitAreaOrientation
      //
      typedef ::xsd::qif2::UnitVectorType RectangularUnitAreaOrientation_type;
      typedef ::xsd::cxx::tree::optional< RectangularUnitAreaOrientation_type > RectangularUnitAreaOrientation_optional;
      typedef ::xsd::cxx::tree::traits< RectangularUnitAreaOrientation_type, char > RectangularUnitAreaOrientation_traits;

      const RectangularUnitAreaOrientation_optional&
      RectangularUnitAreaOrientation () const;

      RectangularUnitAreaOrientation_optional&
      RectangularUnitAreaOrientation ();

      void
      RectangularUnitAreaOrientation (const RectangularUnitAreaOrientation_type& x);

      void
      RectangularUnitAreaOrientation (const RectangularUnitAreaOrientation_optional& x);

      void
      RectangularUnitAreaOrientation (::std::auto_ptr< RectangularUnitAreaOrientation_type > p);

      // Constructors.
      //
      RectangularUnitAreaType (const RectangularUnitAreaLength_type&,
                               const RectangularUnitAreaWidth_type&);

      RectangularUnitAreaType (::std::auto_ptr< RectangularUnitAreaLength_type >,
                               ::std::auto_ptr< RectangularUnitAreaWidth_type >);

      RectangularUnitAreaType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      RectangularUnitAreaType (const RectangularUnitAreaType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual RectangularUnitAreaType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      RectangularUnitAreaType&
      operator= (const RectangularUnitAreaType& x);

      virtual 
      ~RectangularUnitAreaType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< RectangularUnitAreaLength_type > RectangularUnitAreaLength_;
      ::xsd::cxx::tree::one< RectangularUnitAreaWidth_type > RectangularUnitAreaWidth_;
      RectangularUnitAreaOrientation_optional RectangularUnitAreaOrientation_;
    };

    class CircularUnitAreaType: public ::xml_schema::type
    {
      public:
      // CircularUnitAreaDiameter
      //
      typedef ::xsd::qif2::LinearValueType CircularUnitAreaDiameter_type;
      typedef ::xsd::cxx::tree::traits< CircularUnitAreaDiameter_type, char > CircularUnitAreaDiameter_traits;

      const CircularUnitAreaDiameter_type&
      CircularUnitAreaDiameter () const;

      CircularUnitAreaDiameter_type&
      CircularUnitAreaDiameter ();

      void
      CircularUnitAreaDiameter (const CircularUnitAreaDiameter_type& x);

      void
      CircularUnitAreaDiameter (::std::auto_ptr< CircularUnitAreaDiameter_type > p);

      // Constructors.
      //
      CircularUnitAreaType (const CircularUnitAreaDiameter_type&);

      CircularUnitAreaType (::std::auto_ptr< CircularUnitAreaDiameter_type >);

      CircularUnitAreaType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      CircularUnitAreaType (const CircularUnitAreaType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual CircularUnitAreaType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircularUnitAreaType&
      operator= (const CircularUnitAreaType& x);

      virtual 
      ~CircularUnitAreaType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< CircularUnitAreaDiameter_type > CircularUnitAreaDiameter_;
    };

    class ActualZoneAxisType: public ::xsd::qif2::AxisType
    {
      public:
      // Length
      //
      typedef ::xsd::qif2::ActualLinearValueType Length_type;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_type&
      Length () const;

      Length_type&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // Constructors.
      //
      ActualZoneAxisType (const AxisPoint_type&,
                          const Direction_type&,
                          const Length_type&);

      ActualZoneAxisType (::std::auto_ptr< AxisPoint_type >,
                          ::std::auto_ptr< Direction_type >,
                          ::std::auto_ptr< Length_type >);

      ActualZoneAxisType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      ActualZoneAxisType (const ActualZoneAxisType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual ActualZoneAxisType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ActualZoneAxisType&
      operator= (const ActualZoneAxisType& x);

      virtual 
      ~ActualZoneAxisType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Length_type > Length_;
    };

    class BottomEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        BLIND,
        THROUGH,
        UNDEFINED
      };

      BottomEnumType (value v);

      BottomEnumType (const char* v);

      BottomEnumType (const ::std::string& v);

      BottomEnumType (const ::xml_schema::nmtoken& v);

      BottomEnumType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      BottomEnumType (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      BottomEnumType (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      BottomEnumType (const BottomEnumType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual BottomEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      BottomEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_BottomEnumType_convert ();
      }

      protected:
      value
      _xsd_BottomEnumType_convert () const;

      public:
      static const char* const _xsd_BottomEnumType_literals_[3];
      static const value _xsd_BottomEnumType_indexes_[3];
    };

    class BottomType: public ::xml_schema::type
    {
      public:
      // BottomEnum
      //
      typedef ::xsd::qif2::BottomEnumType BottomEnum_type;
      typedef ::xsd::cxx::tree::optional< BottomEnum_type > BottomEnum_optional;
      typedef ::xsd::cxx::tree::traits< BottomEnum_type, char > BottomEnum_traits;

      const BottomEnum_optional&
      BottomEnum () const;

      BottomEnum_optional&
      BottomEnum ();

      void
      BottomEnum (const BottomEnum_type& x);

      void
      BottomEnum (const BottomEnum_optional& x);

      void
      BottomEnum (::std::auto_ptr< BottomEnum_type > p);

      // OtherBottom
      //
      typedef ::xml_schema::string OtherBottom_type;
      typedef ::xsd::cxx::tree::optional< OtherBottom_type > OtherBottom_optional;
      typedef ::xsd::cxx::tree::traits< OtherBottom_type, char > OtherBottom_traits;

      const OtherBottom_optional&
      OtherBottom () const;

      OtherBottom_optional&
      OtherBottom ();

      void
      OtherBottom (const OtherBottom_type& x);

      void
      OtherBottom (const OtherBottom_optional& x);

      void
      OtherBottom (::std::auto_ptr< OtherBottom_type > p);

      // Constructors.
      //
      BottomType ();

      BottomType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      BottomType (const BottomType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual BottomType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      BottomType&
      operator= (const BottomType& x);

      virtual 
      ~BottomType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      BottomEnum_optional BottomEnum_;
      OtherBottom_optional OtherBottom_;
    };

    class BoundingBoxType: public ::xml_schema::type
    {
      public:
      // Length
      //
      typedef ::xsd::qif2::LinearValueType Length_type;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_type&
      Length () const;

      Length_type&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // Width
      //
      typedef ::xsd::qif2::LinearValueType Width_type;
      typedef ::xsd::cxx::tree::traits< Width_type, char > Width_traits;

      const Width_type&
      Width () const;

      Width_type&
      Width ();

      void
      Width (const Width_type& x);

      void
      Width (::std::auto_ptr< Width_type > p);

      // Height
      //
      typedef ::xsd::qif2::LinearValueType Height_type;
      typedef ::xsd::cxx::tree::traits< Height_type, char > Height_traits;

      const Height_type&
      Height () const;

      Height_type&
      Height ();

      void
      Height (const Height_type& x);

      void
      Height (::std::auto_ptr< Height_type > p);

      // Constructors.
      //
      BoundingBoxType (const Length_type&,
                       const Width_type&,
                       const Height_type&);

      BoundingBoxType (::std::auto_ptr< Length_type >,
                       ::std::auto_ptr< Width_type >,
                       ::std::auto_ptr< Height_type >);

      BoundingBoxType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      BoundingBoxType (const BoundingBoxType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual BoundingBoxType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      BoundingBoxType&
      operator= (const BoundingBoxType& x);

      virtual 
      ~BoundingBoxType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Length_type > Length_;
      ::xsd::cxx::tree::one< Width_type > Width_;
      ::xsd::cxx::tree::one< Height_type > Height_;
    };

    class ShapeClassEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        GEAR,
        FREEFORM,
        PRISMATIC,
        ROTATIONAL,
        THINWALLED
      };

      ShapeClassEnumType (value v);

      ShapeClassEnumType (const char* v);

      ShapeClassEnumType (const ::std::string& v);

      ShapeClassEnumType (const ::xml_schema::nmtoken& v);

      ShapeClassEnumType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      ShapeClassEnumType (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      ShapeClassEnumType (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      ShapeClassEnumType (const ShapeClassEnumType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual ShapeClassEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ShapeClassEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_ShapeClassEnumType_convert ();
      }

      protected:
      value
      _xsd_ShapeClassEnumType_convert () const;

      public:
      static const char* const _xsd_ShapeClassEnumType_literals_[5];
      static const value _xsd_ShapeClassEnumType_indexes_[5];
    };

    class ShapeClassType: public ::xml_schema::type
    {
      public:
      // ShapeClassEnum
      //
      typedef ::xsd::qif2::ShapeClassEnumType ShapeClassEnum_type;
      typedef ::xsd::cxx::tree::optional< ShapeClassEnum_type > ShapeClassEnum_optional;
      typedef ::xsd::cxx::tree::traits< ShapeClassEnum_type, char > ShapeClassEnum_traits;

      const ShapeClassEnum_optional&
      ShapeClassEnum () const;

      ShapeClassEnum_optional&
      ShapeClassEnum ();

      void
      ShapeClassEnum (const ShapeClassEnum_type& x);

      void
      ShapeClassEnum (const ShapeClassEnum_optional& x);

      void
      ShapeClassEnum (::std::auto_ptr< ShapeClassEnum_type > p);

      // OtherShapeClass
      //
      typedef ::xml_schema::string OtherShapeClass_type;
      typedef ::xsd::cxx::tree::optional< OtherShapeClass_type > OtherShapeClass_optional;
      typedef ::xsd::cxx::tree::traits< OtherShapeClass_type, char > OtherShapeClass_traits;

      const OtherShapeClass_optional&
      OtherShapeClass () const;

      OtherShapeClass_optional&
      OtherShapeClass ();

      void
      OtherShapeClass (const OtherShapeClass_type& x);

      void
      OtherShapeClass (const OtherShapeClass_optional& x);

      void
      OtherShapeClass (::std::auto_ptr< OtherShapeClass_type > p);

      // Constructors.
      //
      ShapeClassType ();

      ShapeClassType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      ShapeClassType (const ShapeClassType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual ShapeClassType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ShapeClassType&
      operator= (const ShapeClassType& x);

      virtual 
      ~ShapeClassType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ShapeClassEnum_optional ShapeClassEnum_;
      OtherShapeClass_optional OtherShapeClass_;
    };

    class ManufacturingMethodEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        ADDITIVE,
        CASTING,
        COMPOSITE,
        FABRICATION,
        FORMING,
        JOINING,
        MACHINING,
        MOLDING
      };

      ManufacturingMethodEnumType (value v);

      ManufacturingMethodEnumType (const char* v);

      ManufacturingMethodEnumType (const ::std::string& v);

      ManufacturingMethodEnumType (const ::xml_schema::nmtoken& v);

      ManufacturingMethodEnumType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      ManufacturingMethodEnumType (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      ManufacturingMethodEnumType (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      ManufacturingMethodEnumType (const ManufacturingMethodEnumType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual ManufacturingMethodEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ManufacturingMethodEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_ManufacturingMethodEnumType_convert ();
      }

      protected:
      value
      _xsd_ManufacturingMethodEnumType_convert () const;

      public:
      static const char* const _xsd_ManufacturingMethodEnumType_literals_[8];
      static const value _xsd_ManufacturingMethodEnumType_indexes_[8];
    };

    class ManufacturingMethodType: public ::xml_schema::type
    {
      public:
      // ManufacturingMethodEnum
      //
      typedef ::xsd::qif2::ManufacturingMethodEnumType ManufacturingMethodEnum_type;
      typedef ::xsd::cxx::tree::optional< ManufacturingMethodEnum_type > ManufacturingMethodEnum_optional;
      typedef ::xsd::cxx::tree::traits< ManufacturingMethodEnum_type, char > ManufacturingMethodEnum_traits;

      const ManufacturingMethodEnum_optional&
      ManufacturingMethodEnum () const;

      ManufacturingMethodEnum_optional&
      ManufacturingMethodEnum ();

      void
      ManufacturingMethodEnum (const ManufacturingMethodEnum_type& x);

      void
      ManufacturingMethodEnum (const ManufacturingMethodEnum_optional& x);

      void
      ManufacturingMethodEnum (::std::auto_ptr< ManufacturingMethodEnum_type > p);

      // OtherManufacturingMethod
      //
      typedef ::xml_schema::string OtherManufacturingMethod_type;
      typedef ::xsd::cxx::tree::optional< OtherManufacturingMethod_type > OtherManufacturingMethod_optional;
      typedef ::xsd::cxx::tree::traits< OtherManufacturingMethod_type, char > OtherManufacturingMethod_traits;

      const OtherManufacturingMethod_optional&
      OtherManufacturingMethod () const;

      OtherManufacturingMethod_optional&
      OtherManufacturingMethod ();

      void
      OtherManufacturingMethod (const OtherManufacturingMethod_type& x);

      void
      OtherManufacturingMethod (const OtherManufacturingMethod_optional& x);

      void
      OtherManufacturingMethod (::std::auto_ptr< OtherManufacturingMethod_type > p);

      // Constructors.
      //
      ManufacturingMethodType ();

      ManufacturingMethodType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      ManufacturingMethodType (const ManufacturingMethodType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual ManufacturingMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ManufacturingMethodType&
      operator= (const ManufacturingMethodType& x);

      virtual 
      ~ManufacturingMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ManufacturingMethodEnum_optional ManufacturingMethodEnum_;
      OtherManufacturingMethod_optional OtherManufacturingMethod_;
    };

    class InternalExternalEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        INTERNAL,
        EXTERNAL,
        NOT_APPLICABLE
      };

      InternalExternalEnumType (value v);

      InternalExternalEnumType (const char* v);

      InternalExternalEnumType (const ::std::string& v);

      InternalExternalEnumType (const ::xml_schema::nmtoken& v);

      InternalExternalEnumType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      InternalExternalEnumType (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      InternalExternalEnumType (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      InternalExternalEnumType (const InternalExternalEnumType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual InternalExternalEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      InternalExternalEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_InternalExternalEnumType_convert ();
      }

      protected:
      value
      _xsd_InternalExternalEnumType_convert () const;

      public:
      static const char* const _xsd_InternalExternalEnumType_literals_[3];
      static const value _xsd_InternalExternalEnumType_indexes_[3];
    };

    class DimensionCountEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        TWODIMENSIONAL,
        THREEDIMENSIONAL
      };

      DimensionCountEnumType (value v);

      DimensionCountEnumType (const char* v);

      DimensionCountEnumType (const ::std::string& v);

      DimensionCountEnumType (const ::xml_schema::nmtoken& v);

      DimensionCountEnumType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      DimensionCountEnumType (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      DimensionCountEnumType (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      DimensionCountEnumType (const DimensionCountEnumType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual DimensionCountEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      DimensionCountEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_DimensionCountEnumType_convert ();
      }

      protected:
      value
      _xsd_DimensionCountEnumType_convert () const;

      public:
      static const char* const _xsd_DimensionCountEnumType_literals_[2];
      static const value _xsd_DimensionCountEnumType_indexes_[2];
    };

    class CoordinateEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        CARTESIAN_2D,
        POLAR_2D,
        CARTESIAN_3D,
        CYLINDRICAL_3D,
        SPHERICAL_3D,
        UNDEFINED
      };

      CoordinateEnumType (value v);

      CoordinateEnumType (const char* v);

      CoordinateEnumType (const ::std::string& v);

      CoordinateEnumType (const ::xml_schema::nmtoken& v);

      CoordinateEnumType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      CoordinateEnumType (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      CoordinateEnumType (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      CoordinateEnumType (const CoordinateEnumType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual CoordinateEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CoordinateEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_CoordinateEnumType_convert ();
      }

      protected:
      value
      _xsd_CoordinateEnumType_convert () const;

      public:
      static const char* const _xsd_CoordinateEnumType_literals_[6];
      static const value _xsd_CoordinateEnumType_indexes_[6];
    };

    class TypeOfCoordinatesType: public ::xml_schema::type
    {
      public:
      // CoordinateEnum
      //
      typedef ::xsd::qif2::CoordinateEnumType CoordinateEnum_type;
      typedef ::xsd::cxx::tree::optional< CoordinateEnum_type > CoordinateEnum_optional;
      typedef ::xsd::cxx::tree::traits< CoordinateEnum_type, char > CoordinateEnum_traits;

      const CoordinateEnum_optional&
      CoordinateEnum () const;

      CoordinateEnum_optional&
      CoordinateEnum ();

      void
      CoordinateEnum (const CoordinateEnum_type& x);

      void
      CoordinateEnum (const CoordinateEnum_optional& x);

      void
      CoordinateEnum (::std::auto_ptr< CoordinateEnum_type > p);

      // OtherCoordinate
      //
      typedef ::xml_schema::string OtherCoordinate_type;
      typedef ::xsd::cxx::tree::optional< OtherCoordinate_type > OtherCoordinate_optional;
      typedef ::xsd::cxx::tree::traits< OtherCoordinate_type, char > OtherCoordinate_traits;

      const OtherCoordinate_optional&
      OtherCoordinate () const;

      OtherCoordinate_optional&
      OtherCoordinate ();

      void
      OtherCoordinate (const OtherCoordinate_type& x);

      void
      OtherCoordinate (const OtherCoordinate_optional& x);

      void
      OtherCoordinate (::std::auto_ptr< OtherCoordinate_type > p);

      // Constructors.
      //
      TypeOfCoordinatesType ();

      TypeOfCoordinatesType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      TypeOfCoordinatesType (const TypeOfCoordinatesType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual TypeOfCoordinatesType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TypeOfCoordinatesType&
      operator= (const TypeOfCoordinatesType& x);

      virtual 
      ~TypeOfCoordinatesType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CoordinateEnum_optional CoordinateEnum_;
      OtherCoordinate_optional OtherCoordinate_;
    };

    class RectangleType: public ::xml_schema::type
    {
      public:
      // Length
      //
      typedef ::xsd::qif2::LinearValueType Length_type;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_type&
      Length () const;

      Length_type&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // CornerPoint
      //
      typedef ::xsd::qif2::PointType CornerPoint_type;
      typedef ::xsd::cxx::tree::traits< CornerPoint_type, char > CornerPoint_traits;

      const CornerPoint_type&
      CornerPoint () const;

      CornerPoint_type&
      CornerPoint ();

      void
      CornerPoint (const CornerPoint_type& x);

      void
      CornerPoint (::std::auto_ptr< CornerPoint_type > p);

      // Width
      //
      typedef ::xsd::qif2::LinearValueType Width_type;
      typedef ::xsd::cxx::tree::traits< Width_type, char > Width_traits;

      const Width_type&
      Width () const;

      Width_type&
      Width ();

      void
      Width (const Width_type& x);

      void
      Width (::std::auto_ptr< Width_type > p);

      // WidthDirection
      //
      typedef ::xsd::qif2::UnitVectorType WidthDirection_type;
      typedef ::xsd::cxx::tree::traits< WidthDirection_type, char > WidthDirection_traits;

      const WidthDirection_type&
      WidthDirection () const;

      WidthDirection_type&
      WidthDirection ();

      void
      WidthDirection (const WidthDirection_type& x);

      void
      WidthDirection (::std::auto_ptr< WidthDirection_type > p);

      // LengthDirection
      //
      typedef ::xsd::qif2::UnitVectorType LengthDirection_type;
      typedef ::xsd::cxx::tree::traits< LengthDirection_type, char > LengthDirection_traits;

      const LengthDirection_type&
      LengthDirection () const;

      LengthDirection_type&
      LengthDirection ();

      void
      LengthDirection (const LengthDirection_type& x);

      void
      LengthDirection (::std::auto_ptr< LengthDirection_type > p);

      // Constructors.
      //
      RectangleType (const Length_type&,
                     const CornerPoint_type&,
                     const Width_type&,
                     const WidthDirection_type&,
                     const LengthDirection_type&);

      RectangleType (::std::auto_ptr< Length_type >,
                     ::std::auto_ptr< CornerPoint_type >,
                     ::std::auto_ptr< Width_type >,
                     ::std::auto_ptr< WidthDirection_type >,
                     ::std::auto_ptr< LengthDirection_type >);

      RectangleType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      RectangleType (const RectangleType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual RectangleType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      RectangleType&
      operator= (const RectangleType& x);

      virtual 
      ~RectangleType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Length_type > Length_;
      ::xsd::cxx::tree::one< CornerPoint_type > CornerPoint_;
      ::xsd::cxx::tree::one< Width_type > Width_;
      ::xsd::cxx::tree::one< WidthDirection_type > WidthDirection_;
      ::xsd::cxx::tree::one< LengthDirection_type > LengthDirection_;
    };

    class CircleType: public ::xml_schema::type
    {
      public:
      // CenterPoint
      //
      typedef ::xsd::qif2::PointType CenterPoint_type;
      typedef ::xsd::cxx::tree::traits< CenterPoint_type, char > CenterPoint_traits;

      const CenterPoint_type&
      CenterPoint () const;

      CenterPoint_type&
      CenterPoint ();

      void
      CenterPoint (const CenterPoint_type& x);

      void
      CenterPoint (::std::auto_ptr< CenterPoint_type > p);

      // Diameter
      //
      typedef ::xsd::qif2::LinearValueType Diameter_type;
      typedef ::xsd::cxx::tree::traits< Diameter_type, char > Diameter_traits;

      const Diameter_type&
      Diameter () const;

      Diameter_type&
      Diameter ();

      void
      Diameter (const Diameter_type& x);

      void
      Diameter (::std::auto_ptr< Diameter_type > p);

      // Normal
      //
      typedef ::xsd::qif2::UnitVectorType Normal_type;
      typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

      const Normal_type&
      Normal () const;

      Normal_type&
      Normal ();

      void
      Normal (const Normal_type& x);

      void
      Normal (::std::auto_ptr< Normal_type > p);

      // Constructors.
      //
      CircleType (const CenterPoint_type&,
                  const Diameter_type&,
                  const Normal_type&);

      CircleType (::std::auto_ptr< CenterPoint_type >,
                  ::std::auto_ptr< Diameter_type >,
                  ::std::auto_ptr< Normal_type >);

      CircleType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      CircleType (const CircleType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual CircleType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircleType&
      operator= (const CircleType& x);

      virtual 
      ~CircleType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< CenterPoint_type > CenterPoint_;
      ::xsd::cxx::tree::one< Diameter_type > Diameter_;
      ::xsd::cxx::tree::one< Normal_type > Normal_;
    };

    class CylinderType: public ::xml_schema::type
    {
      public:
      // CenterPoint
      //
      typedef ::xsd::qif2::PointType CenterPoint_type;
      typedef ::xsd::cxx::tree::traits< CenterPoint_type, char > CenterPoint_traits;

      const CenterPoint_type&
      CenterPoint () const;

      CenterPoint_type&
      CenterPoint ();

      void
      CenterPoint (const CenterPoint_type& x);

      void
      CenterPoint (::std::auto_ptr< CenterPoint_type > p);

      // Diameter
      //
      typedef ::xsd::qif2::LinearValueType Diameter_type;
      typedef ::xsd::cxx::tree::traits< Diameter_type, char > Diameter_traits;

      const Diameter_type&
      Diameter () const;

      Diameter_type&
      Diameter ();

      void
      Diameter (const Diameter_type& x);

      void
      Diameter (::std::auto_ptr< Diameter_type > p);

      // Axis
      //
      typedef ::xsd::qif2::UnitVectorType Axis_type;
      typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

      const Axis_type&
      Axis () const;

      Axis_type&
      Axis ();

      void
      Axis (const Axis_type& x);

      void
      Axis (::std::auto_ptr< Axis_type > p);

      // Length
      //
      typedef ::xsd::qif2::LinearValueType Length_type;
      typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

      const Length_type&
      Length () const;

      Length_type&
      Length ();

      void
      Length (const Length_type& x);

      void
      Length (::std::auto_ptr< Length_type > p);

      // Constructors.
      //
      CylinderType (const CenterPoint_type&,
                    const Diameter_type&,
                    const Axis_type&,
                    const Length_type&);

      CylinderType (::std::auto_ptr< CenterPoint_type >,
                    ::std::auto_ptr< Diameter_type >,
                    ::std::auto_ptr< Axis_type >,
                    ::std::auto_ptr< Length_type >);

      CylinderType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      CylinderType (const CylinderType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual CylinderType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylinderType&
      operator= (const CylinderType& x);

      virtual 
      ~CylinderType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< CenterPoint_type > CenterPoint_;
      ::xsd::cxx::tree::one< Diameter_type > Diameter_;
      ::xsd::cxx::tree::one< Axis_type > Axis_;
      ::xsd::cxx::tree::one< Length_type > Length_;
    };

    class SphereType: public ::xml_schema::type
    {
      public:
      // CenterPoint
      //
      typedef ::xsd::qif2::PointType CenterPoint_type;
      typedef ::xsd::cxx::tree::traits< CenterPoint_type, char > CenterPoint_traits;

      const CenterPoint_type&
      CenterPoint () const;

      CenterPoint_type&
      CenterPoint ();

      void
      CenterPoint (const CenterPoint_type& x);

      void
      CenterPoint (::std::auto_ptr< CenterPoint_type > p);

      // Diameter
      //
      typedef ::xsd::qif2::LinearValueType Diameter_type;
      typedef ::xsd::cxx::tree::traits< Diameter_type, char > Diameter_traits;

      const Diameter_type&
      Diameter () const;

      Diameter_type&
      Diameter ();

      void
      Diameter (const Diameter_type& x);

      void
      Diameter (::std::auto_ptr< Diameter_type > p);

      // Constructors.
      //
      SphereType (const CenterPoint_type&,
                  const Diameter_type&);

      SphereType (::std::auto_ptr< CenterPoint_type >,
                  ::std::auto_ptr< Diameter_type >);

      SphereType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      SphereType (const SphereType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual SphereType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SphereType&
      operator= (const SphereType& x);

      virtual 
      ~SphereType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< CenterPoint_type > CenterPoint_;
      ::xsd::cxx::tree::one< Diameter_type > Diameter_;
    };

    class PointAndVectorType: public ::xml_schema::type
    {
      public:
      // StartPoint
      //
      typedef ::xsd::qif2::PointType StartPoint_type;
      typedef ::xsd::cxx::tree::traits< StartPoint_type, char > StartPoint_traits;

      const StartPoint_type&
      StartPoint () const;

      StartPoint_type&
      StartPoint ();

      void
      StartPoint (const StartPoint_type& x);

      void
      StartPoint (::std::auto_ptr< StartPoint_type > p);

      // Vector
      //
      typedef ::xsd::qif2::UnitVectorType Vector_type;
      typedef ::xsd::cxx::tree::traits< Vector_type, char > Vector_traits;

      const Vector_type&
      Vector () const;

      Vector_type&
      Vector ();

      void
      Vector (const Vector_type& x);

      void
      Vector (::std::auto_ptr< Vector_type > p);

      // Constructors.
      //
      PointAndVectorType (const StartPoint_type&,
                          const Vector_type&);

      PointAndVectorType (::std::auto_ptr< StartPoint_type >,
                          ::std::auto_ptr< Vector_type >);

      PointAndVectorType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      PointAndVectorType (const PointAndVectorType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual PointAndVectorType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointAndVectorType&
      operator= (const PointAndVectorType& x);

      virtual 
      ~PointAndVectorType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< StartPoint_type > StartPoint_;
      ::xsd::cxx::tree::one< Vector_type > Vector_;
    };

    class ActualPointAndVectorType: public ::xml_schema::type
    {
      public:
      // StartPoint
      //
      typedef ::xsd::qif2::ActualPointType StartPoint_type;
      typedef ::xsd::cxx::tree::traits< StartPoint_type, char > StartPoint_traits;

      const StartPoint_type&
      StartPoint () const;

      StartPoint_type&
      StartPoint ();

      void
      StartPoint (const StartPoint_type& x);

      void
      StartPoint (::std::auto_ptr< StartPoint_type > p);

      // Vector
      //
      typedef ::xsd::qif2::ActualUnitVectorType Vector_type;
      typedef ::xsd::cxx::tree::traits< Vector_type, char > Vector_traits;

      const Vector_type&
      Vector () const;

      Vector_type&
      Vector ();

      void
      Vector (const Vector_type& x);

      void
      Vector (::std::auto_ptr< Vector_type > p);

      // Constructors.
      //
      ActualPointAndVectorType (const StartPoint_type&,
                                const Vector_type&);

      ActualPointAndVectorType (::std::auto_ptr< StartPoint_type >,
                                ::std::auto_ptr< Vector_type >);

      ActualPointAndVectorType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      ActualPointAndVectorType (const ActualPointAndVectorType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual ActualPointAndVectorType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ActualPointAndVectorType&
      operator= (const ActualPointAndVectorType& x);

      virtual 
      ~ActualPointAndVectorType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< StartPoint_type > StartPoint_;
      ::xsd::cxx::tree::one< Vector_type > Vector_;
    };

    class SlotEndEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        ROUND,
        FLAT,
        OPEN,
        UNDEFINED
      };

      SlotEndEnumType (value v);

      SlotEndEnumType (const char* v);

      SlotEndEnumType (const ::std::string& v);

      SlotEndEnumType (const ::xml_schema::nmtoken& v);

      SlotEndEnumType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      SlotEndEnumType (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      SlotEndEnumType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      SlotEndEnumType (const SlotEndEnumType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual SlotEndEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SlotEndEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_SlotEndEnumType_convert ();
      }

      protected:
      value
      _xsd_SlotEndEnumType_convert () const;

      public:
      static const char* const _xsd_SlotEndEnumType_literals_[4];
      static const value _xsd_SlotEndEnumType_indexes_[4];
    };

    class EndRadiusType: public ::xml_schema::type
    {
      public:
      // EndRadius
      //
      typedef ::xsd::qif2::LinearValueType EndRadius_type;
      typedef ::xsd::cxx::tree::traits< EndRadius_type, char > EndRadius_traits;

      const EndRadius_type&
      EndRadius () const;

      EndRadius_type&
      EndRadius ();

      void
      EndRadius (const EndRadius_type& x);

      void
      EndRadius (::std::auto_ptr< EndRadius_type > p);

      // Expanded
      //
      typedef ::xml_schema::boolean Expanded_type;
      typedef ::xsd::cxx::tree::optional< Expanded_type > Expanded_optional;
      typedef ::xsd::cxx::tree::traits< Expanded_type, char > Expanded_traits;

      const Expanded_optional&
      Expanded () const;

      Expanded_optional&
      Expanded ();

      void
      Expanded (const Expanded_type& x);

      void
      Expanded (const Expanded_optional& x);

      // Constructors.
      //
      EndRadiusType (const EndRadius_type&);

      EndRadiusType (::std::auto_ptr< EndRadius_type >);

      EndRadiusType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      EndRadiusType (const EndRadiusType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual EndRadiusType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EndRadiusType&
      operator= (const EndRadiusType& x);

      virtual 
      ~EndRadiusType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< EndRadius_type > EndRadius_;
      Expanded_optional Expanded_;
    };

    class ActualEndRadiusType: public ::xml_schema::type
    {
      public:
      // EndRadius
      //
      typedef ::xsd::qif2::ActualLinearValueType EndRadius_type;
      typedef ::xsd::cxx::tree::traits< EndRadius_type, char > EndRadius_traits;

      const EndRadius_type&
      EndRadius () const;

      EndRadius_type&
      EndRadius ();

      void
      EndRadius (const EndRadius_type& x);

      void
      EndRadius (::std::auto_ptr< EndRadius_type > p);

      // Expanded
      //
      typedef ::xml_schema::boolean Expanded_type;
      typedef ::xsd::cxx::tree::optional< Expanded_type > Expanded_optional;
      typedef ::xsd::cxx::tree::traits< Expanded_type, char > Expanded_traits;

      const Expanded_optional&
      Expanded () const;

      Expanded_optional&
      Expanded ();

      void
      Expanded (const Expanded_type& x);

      void
      Expanded (const Expanded_optional& x);

      // Constructors.
      //
      ActualEndRadiusType (const EndRadius_type&);

      ActualEndRadiusType (::std::auto_ptr< EndRadius_type >);

      ActualEndRadiusType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      ActualEndRadiusType (const ActualEndRadiusType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual ActualEndRadiusType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ActualEndRadiusType&
      operator= (const ActualEndRadiusType& x);

      virtual 
      ~ActualEndRadiusType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< EndRadius_type > EndRadius_;
      Expanded_optional Expanded_;
    };

    class SlotEndType: public ::xml_schema::type
    {
      public:
      // SlotEndEnum
      //
      typedef ::xsd::qif2::SlotEndEnumType SlotEndEnum_type;
      typedef ::xsd::cxx::tree::optional< SlotEndEnum_type > SlotEndEnum_optional;
      typedef ::xsd::cxx::tree::traits< SlotEndEnum_type, char > SlotEndEnum_traits;

      const SlotEndEnum_optional&
      SlotEndEnum () const;

      SlotEndEnum_optional&
      SlotEndEnum ();

      void
      SlotEndEnum (const SlotEndEnum_type& x);

      void
      SlotEndEnum (const SlotEndEnum_optional& x);

      void
      SlotEndEnum (::std::auto_ptr< SlotEndEnum_type > p);

      // OtherSlotEnd
      //
      typedef ::xml_schema::string OtherSlotEnd_type;
      typedef ::xsd::cxx::tree::optional< OtherSlotEnd_type > OtherSlotEnd_optional;
      typedef ::xsd::cxx::tree::traits< OtherSlotEnd_type, char > OtherSlotEnd_traits;

      const OtherSlotEnd_optional&
      OtherSlotEnd () const;

      OtherSlotEnd_optional&
      OtherSlotEnd ();

      void
      OtherSlotEnd (const OtherSlotEnd_type& x);

      void
      OtherSlotEnd (const OtherSlotEnd_optional& x);

      void
      OtherSlotEnd (::std::auto_ptr< OtherSlotEnd_type > p);

      // Constructors.
      //
      SlotEndType ();

      SlotEndType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      SlotEndType (const SlotEndType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual SlotEndType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SlotEndType&
      operator= (const SlotEndType& x);

      virtual 
      ~SlotEndType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      SlotEndEnum_optional SlotEndEnum_;
      OtherSlotEnd_optional OtherSlotEnd_;
    };

    class ThreadSeriesEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        ACME,
        ACME_C,
        ACME_G,
        AMO,
        ANPT,
        BUTT,
        PUSH_BUTT,
        F_PTF,
        M,
        MJ,
        MJS,
        NC5_HF,
        NC5_CSF,
        NC5_ONF,
        NC5_IF,
        NC5_INF,
        NGO,
        NGS,
        NGT,
        NH,
        NHR,
        NPSC,
        NPSF,
        NPSH,
        NPSI,
        NPSL,
        NPSM,
        NPT,
        NPTF,
        PTF_SAE_SHORT,
        PTF_SPL_SHORT,
        PTF_SPL_EXTRA_SHORT,
        SGT,
        SPL_PTF,
        STUB_ACME,
        UN,
        UNC,
        UNF,
        UNEF,
        UNJ,
        UNJC,
        UNJF,
        UNJEF,
        UNR,
        UNRC,
        UNRF,
        UNREF,
        UNM,
        UNS,
        G,
        R,
        RC,
        RP,
        S,
        TR,
        UNDEFINED
      };

      ThreadSeriesEnumType (value v);

      ThreadSeriesEnumType (const char* v);

      ThreadSeriesEnumType (const ::std::string& v);

      ThreadSeriesEnumType (const ::xml_schema::nmtoken& v);

      ThreadSeriesEnumType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      ThreadSeriesEnumType (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      ThreadSeriesEnumType (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      ThreadSeriesEnumType (const ThreadSeriesEnumType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual ThreadSeriesEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ThreadSeriesEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_ThreadSeriesEnumType_convert ();
      }

      protected:
      value
      _xsd_ThreadSeriesEnumType_convert () const;

      public:
      static const char* const _xsd_ThreadSeriesEnumType_literals_[56];
      static const value _xsd_ThreadSeriesEnumType_indexes_[56];
    };

    class ThreadSeriesType: public ::xml_schema::type
    {
      public:
      // ThreadSeriesEnum
      //
      typedef ::xsd::qif2::ThreadSeriesEnumType ThreadSeriesEnum_type;
      typedef ::xsd::cxx::tree::optional< ThreadSeriesEnum_type > ThreadSeriesEnum_optional;
      typedef ::xsd::cxx::tree::traits< ThreadSeriesEnum_type, char > ThreadSeriesEnum_traits;

      const ThreadSeriesEnum_optional&
      ThreadSeriesEnum () const;

      ThreadSeriesEnum_optional&
      ThreadSeriesEnum ();

      void
      ThreadSeriesEnum (const ThreadSeriesEnum_type& x);

      void
      ThreadSeriesEnum (const ThreadSeriesEnum_optional& x);

      void
      ThreadSeriesEnum (::std::auto_ptr< ThreadSeriesEnum_type > p);

      // OtherThreadSeries
      //
      typedef ::xml_schema::string OtherThreadSeries_type;
      typedef ::xsd::cxx::tree::optional< OtherThreadSeries_type > OtherThreadSeries_optional;
      typedef ::xsd::cxx::tree::traits< OtherThreadSeries_type, char > OtherThreadSeries_traits;

      const OtherThreadSeries_optional&
      OtherThreadSeries () const;

      OtherThreadSeries_optional&
      OtherThreadSeries ();

      void
      OtherThreadSeries (const OtherThreadSeries_type& x);

      void
      OtherThreadSeries (const OtherThreadSeries_optional& x);

      void
      OtherThreadSeries (::std::auto_ptr< OtherThreadSeries_type > p);

      // Constructors.
      //
      ThreadSeriesType ();

      ThreadSeriesType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      ThreadSeriesType (const ThreadSeriesType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual ThreadSeriesType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ThreadSeriesType&
      operator= (const ThreadSeriesType& x);

      virtual 
      ~ThreadSeriesType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ThreadSeriesEnum_optional ThreadSeriesEnum_;
      OtherThreadSeries_optional OtherThreadSeries_;
    };

    class ThreadClassType: public ::xml_schema::type
    {
      public:
      // ThreadClassEnum
      //
      typedef ::xsd::qif2::ThreadClassEnumType ThreadClassEnum_type;
      typedef ::xsd::cxx::tree::optional< ThreadClassEnum_type > ThreadClassEnum_optional;
      typedef ::xsd::cxx::tree::traits< ThreadClassEnum_type, char > ThreadClassEnum_traits;

      const ThreadClassEnum_optional&
      ThreadClassEnum () const;

      ThreadClassEnum_optional&
      ThreadClassEnum ();

      void
      ThreadClassEnum (const ThreadClassEnum_type& x);

      void
      ThreadClassEnum (const ThreadClassEnum_optional& x);

      void
      ThreadClassEnum (::std::auto_ptr< ThreadClassEnum_type > p);

      // OtherThreadClass
      //
      typedef ::xml_schema::string OtherThreadClass_type;
      typedef ::xsd::cxx::tree::optional< OtherThreadClass_type > OtherThreadClass_optional;
      typedef ::xsd::cxx::tree::traits< OtherThreadClass_type, char > OtherThreadClass_traits;

      const OtherThreadClass_optional&
      OtherThreadClass () const;

      OtherThreadClass_optional&
      OtherThreadClass ();

      void
      OtherThreadClass (const OtherThreadClass_type& x);

      void
      OtherThreadClass (const OtherThreadClass_optional& x);

      void
      OtherThreadClass (::std::auto_ptr< OtherThreadClass_type > p);

      // Constructors.
      //
      ThreadClassType ();

      ThreadClassType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      ThreadClassType (const ThreadClassType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual ThreadClassType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ThreadClassType&
      operator= (const ThreadClassType& x);

      virtual 
      ~ThreadClassType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ThreadClassEnum_optional ThreadClassEnum_;
      OtherThreadClass_optional OtherThreadClass_;
    };

    class ThreadClassEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        cxx_1A,
        cxx_1B,
        cxx_2A,
        cxx_2AG,
        cxx_2B,
        cxx_3A,
        cxx_3B,
        EXT_3E,
        EXT_3F,
        EXT_3G,
        EXT_3H,
        EXT_4E,
        EXT_4F,
        EXT_4G,
        EXT_4H,
        cxx_4G,
        cxx_4H,
        EXT_5E,
        EXT_5F,
        EXT_5G,
        EXT_5H,
        cxx_5G,
        cxx_5H,
        EXT_6E,
        EXT_6F,
        EXT_6G,
        EXT_6H,
        cxx_6G,
        cxx_6H,
        EXT_7E,
        EXT_7F,
        EXT_7G,
        EXT_7H,
        cxx_7G,
        cxx_7H,
        EXT_8E,
        EXT_8F,
        EXT_8G,
        EXT_8H,
        cxx_8G,
        cxx_8H,
        EXT_9E,
        EXT_9F,
        EXT_9G,
        EXT_9H,
        INT,
        EXT,
        SE,
        G,
        UNDEFINED
      };

      ThreadClassEnumType (value v);

      ThreadClassEnumType (const char* v);

      ThreadClassEnumType (const ::std::string& v);

      ThreadClassEnumType (const ::xml_schema::nmtoken& v);

      ThreadClassEnumType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      ThreadClassEnumType (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      ThreadClassEnumType (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      ThreadClassEnumType (const ThreadClassEnumType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual ThreadClassEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ThreadClassEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_ThreadClassEnumType_convert ();
      }

      protected:
      value
      _xsd_ThreadClassEnumType_convert () const;

      public:
      static const char* const _xsd_ThreadClassEnumType_literals_[50];
      static const value _xsd_ThreadClassEnumType_indexes_[50];
    };

    class SecurityClassificationEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        NONE,
        UNCLASSIFIED,
        RESTRICTED,
        EU_RESTRICTED,
        WEU_RESTRICTED,
        FOR_OFFICIAL_USE_ONLY,
        PROTECTED,
        PROTECTED_A,
        PROTECTED_B,
        PROTECTED_C,
        CONFIDENTIAL,
        EU_CONFIDENTIAL,
        WEU_CONFIDENTIAL,
        SECRET,
        SECRET_NATIONAL_SECURITY_INFORMATION,
        SECRET_FORMERLY_RESTRICTED_DATA,
        SECRET_RESTRICTED_DATA,
        SECRET1,
        EU_SECRET,
        WEU_SECRET,
        TOP_SECRET_NATIONAL_SECURITY_INFORMATION,
        TOP_SECRET_FORMERLY_RESTRICTED_DATA,
        TOP_SECRET_RESTRICTED_DATA,
        EU_TOP_SECRET,
        FOCAL_TOP_SECRET,
        COMPANY_CONFIDENTIAL,
        OFFICAL_USE_ONLY,
        TRADE_SECRET,
        TRADEMARK,
        REGISTERED_TRADEMARK,
        PATENT,
        UNDEFINED
      };

      SecurityClassificationEnumType (value v);

      SecurityClassificationEnumType (const char* v);

      SecurityClassificationEnumType (const ::std::string& v);

      SecurityClassificationEnumType (const ::xml_schema::nmtoken& v);

      SecurityClassificationEnumType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      SecurityClassificationEnumType (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      SecurityClassificationEnumType (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      SecurityClassificationEnumType (const SecurityClassificationEnumType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual SecurityClassificationEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SecurityClassificationEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_SecurityClassificationEnumType_convert ();
      }

      protected:
      value
      _xsd_SecurityClassificationEnumType_convert () const;

      public:
      static const char* const _xsd_SecurityClassificationEnumType_literals_[32];
      static const value _xsd_SecurityClassificationEnumType_indexes_[32];
    };

    class SecurityClassificationType: public ::xml_schema::type
    {
      public:
      // SecurityClassificationEnum
      //
      typedef ::xsd::qif2::SecurityClassificationEnumType SecurityClassificationEnum_type;
      typedef ::xsd::cxx::tree::optional< SecurityClassificationEnum_type > SecurityClassificationEnum_optional;
      typedef ::xsd::cxx::tree::traits< SecurityClassificationEnum_type, char > SecurityClassificationEnum_traits;

      const SecurityClassificationEnum_optional&
      SecurityClassificationEnum () const;

      SecurityClassificationEnum_optional&
      SecurityClassificationEnum ();

      void
      SecurityClassificationEnum (const SecurityClassificationEnum_type& x);

      void
      SecurityClassificationEnum (const SecurityClassificationEnum_optional& x);

      void
      SecurityClassificationEnum (::std::auto_ptr< SecurityClassificationEnum_type > p);

      // OtherSecurityClassification
      //
      typedef ::xml_schema::string OtherSecurityClassification_type;
      typedef ::xsd::cxx::tree::optional< OtherSecurityClassification_type > OtherSecurityClassification_optional;
      typedef ::xsd::cxx::tree::traits< OtherSecurityClassification_type, char > OtherSecurityClassification_traits;

      const OtherSecurityClassification_optional&
      OtherSecurityClassification () const;

      OtherSecurityClassification_optional&
      OtherSecurityClassification ();

      void
      OtherSecurityClassification (const OtherSecurityClassification_type& x);

      void
      OtherSecurityClassification (const OtherSecurityClassification_optional& x);

      void
      OtherSecurityClassification (::std::auto_ptr< OtherSecurityClassification_type > p);

      // Constructors.
      //
      SecurityClassificationType ();

      SecurityClassificationType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      SecurityClassificationType (const SecurityClassificationType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual SecurityClassificationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SecurityClassificationType&
      operator= (const SecurityClassificationType& x);

      virtual 
      ~SecurityClassificationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      SecurityClassificationEnum_optional SecurityClassificationEnum_;
      OtherSecurityClassification_optional OtherSecurityClassification_;
    };

    class DigitalModelFormatEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        STEPAP203,
        STEPAP203E2,
        STEPAP214,
        STEPAP242,
        JTOPEN,
        RPC,
        PDPMI,
        ACIS,
        PARASOLID,
        AUTODESK,
        PTC,
        NX,
        SOLIDWORKS,
        CATIA,
        NOTDEFINED
      };

      DigitalModelFormatEnumType (value v);

      DigitalModelFormatEnumType (const char* v);

      DigitalModelFormatEnumType (const ::std::string& v);

      DigitalModelFormatEnumType (const ::xml_schema::nmtoken& v);

      DigitalModelFormatEnumType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      DigitalModelFormatEnumType (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      DigitalModelFormatEnumType (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      DigitalModelFormatEnumType (const DigitalModelFormatEnumType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual DigitalModelFormatEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      DigitalModelFormatEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_DigitalModelFormatEnumType_convert ();
      }

      protected:
      value
      _xsd_DigitalModelFormatEnumType_convert () const;

      public:
      static const char* const _xsd_DigitalModelFormatEnumType_literals_[15];
      static const value _xsd_DigitalModelFormatEnumType_indexes_[15];
    };

    class DigitalModelFormatType: public ::xml_schema::type
    {
      public:
      // DigitalModelFormatEnum
      //
      typedef ::xsd::qif2::DigitalModelFormatEnumType DigitalModelFormatEnum_type;
      typedef ::xsd::cxx::tree::optional< DigitalModelFormatEnum_type > DigitalModelFormatEnum_optional;
      typedef ::xsd::cxx::tree::traits< DigitalModelFormatEnum_type, char > DigitalModelFormatEnum_traits;

      const DigitalModelFormatEnum_optional&
      DigitalModelFormatEnum () const;

      DigitalModelFormatEnum_optional&
      DigitalModelFormatEnum ();

      void
      DigitalModelFormatEnum (const DigitalModelFormatEnum_type& x);

      void
      DigitalModelFormatEnum (const DigitalModelFormatEnum_optional& x);

      void
      DigitalModelFormatEnum (::std::auto_ptr< DigitalModelFormatEnum_type > p);

      // OtherDigitalModelFormat
      //
      typedef ::xml_schema::string OtherDigitalModelFormat_type;
      typedef ::xsd::cxx::tree::optional< OtherDigitalModelFormat_type > OtherDigitalModelFormat_optional;
      typedef ::xsd::cxx::tree::traits< OtherDigitalModelFormat_type, char > OtherDigitalModelFormat_traits;

      const OtherDigitalModelFormat_optional&
      OtherDigitalModelFormat () const;

      OtherDigitalModelFormat_optional&
      OtherDigitalModelFormat ();

      void
      OtherDigitalModelFormat (const OtherDigitalModelFormat_type& x);

      void
      OtherDigitalModelFormat (const OtherDigitalModelFormat_optional& x);

      void
      OtherDigitalModelFormat (::std::auto_ptr< OtherDigitalModelFormat_type > p);

      // Constructors.
      //
      DigitalModelFormatType ();

      DigitalModelFormatType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      DigitalModelFormatType (const DigitalModelFormatType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual DigitalModelFormatType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      DigitalModelFormatType&
      operator= (const DigitalModelFormatType& x);

      virtual 
      ~DigitalModelFormatType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      DigitalModelFormatEnum_optional DigitalModelFormatEnum_;
      OtherDigitalModelFormat_optional OtherDigitalModelFormat_;
    };

    class UniformScaleType: public ::xml_schema::type
    {
      public:
      // ScaleFactor
      //
      typedef ::xml_schema::decimal ScaleFactor_type;
      typedef ::xsd::cxx::tree::traits< ScaleFactor_type, char, ::xsd::cxx::tree::schema_type::decimal > ScaleFactor_traits;

      const ScaleFactor_type&
      ScaleFactor () const;

      ScaleFactor_type&
      ScaleFactor ();

      void
      ScaleFactor (const ScaleFactor_type& x);

      // Constructors.
      //
      UniformScaleType (const ScaleFactor_type&);

      UniformScaleType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      UniformScaleType (const UniformScaleType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual UniformScaleType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UniformScaleType&
      operator= (const UniformScaleType& x);

      virtual 
      ~UniformScaleType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ScaleFactor_type > ScaleFactor_;
    };

    class RadialDifferentialScaleType: public ::xml_schema::type
    {
      public:
      // PerpendicularScaleFactor
      //
      typedef ::xml_schema::decimal PerpendicularScaleFactor_type;
      typedef ::xsd::cxx::tree::traits< PerpendicularScaleFactor_type, char, ::xsd::cxx::tree::schema_type::decimal > PerpendicularScaleFactor_traits;

      const PerpendicularScaleFactor_type&
      PerpendicularScaleFactor () const;

      PerpendicularScaleFactor_type&
      PerpendicularScaleFactor ();

      void
      PerpendicularScaleFactor (const PerpendicularScaleFactor_type& x);

      // ParallelScaleFactor
      //
      typedef ::xml_schema::decimal ParallelScaleFactor_type;
      typedef ::xsd::cxx::tree::traits< ParallelScaleFactor_type, char, ::xsd::cxx::tree::schema_type::decimal > ParallelScaleFactor_traits;

      const ParallelScaleFactor_type&
      ParallelScaleFactor () const;

      ParallelScaleFactor_type&
      ParallelScaleFactor ();

      void
      ParallelScaleFactor (const ParallelScaleFactor_type& x);

      // Direction
      //
      typedef ::xsd::qif2::UnitVectorType Direction_type;
      typedef ::xsd::cxx::tree::traits< Direction_type, char > Direction_traits;

      const Direction_type&
      Direction () const;

      Direction_type&
      Direction ();

      void
      Direction (const Direction_type& x);

      void
      Direction (::std::auto_ptr< Direction_type > p);

      // Constructors.
      //
      RadialDifferentialScaleType (const PerpendicularScaleFactor_type&,
                                   const ParallelScaleFactor_type&,
                                   const Direction_type&);

      RadialDifferentialScaleType (const PerpendicularScaleFactor_type&,
                                   const ParallelScaleFactor_type&,
                                   ::std::auto_ptr< Direction_type >);

      RadialDifferentialScaleType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      RadialDifferentialScaleType (const RadialDifferentialScaleType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual RadialDifferentialScaleType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      RadialDifferentialScaleType&
      operator= (const RadialDifferentialScaleType& x);

      virtual 
      ~RadialDifferentialScaleType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< PerpendicularScaleFactor_type > PerpendicularScaleFactor_;
      ::xsd::cxx::tree::one< ParallelScaleFactor_type > ParallelScaleFactor_;
      ::xsd::cxx::tree::one< Direction_type > Direction_;
    };

    class AxialDifferentialScaleType: public ::xml_schema::type
    {
      public:
      // XScaleFactor
      //
      typedef ::xml_schema::decimal XScaleFactor_type;
      typedef ::xsd::cxx::tree::traits< XScaleFactor_type, char, ::xsd::cxx::tree::schema_type::decimal > XScaleFactor_traits;

      const XScaleFactor_type&
      XScaleFactor () const;

      XScaleFactor_type&
      XScaleFactor ();

      void
      XScaleFactor (const XScaleFactor_type& x);

      // XaxisDirection
      //
      typedef ::xsd::qif2::UnitVectorType XaxisDirection_type;
      typedef ::xsd::cxx::tree::traits< XaxisDirection_type, char > XaxisDirection_traits;

      const XaxisDirection_type&
      XaxisDirection () const;

      XaxisDirection_type&
      XaxisDirection ();

      void
      XaxisDirection (const XaxisDirection_type& x);

      void
      XaxisDirection (::std::auto_ptr< XaxisDirection_type > p);

      // YScaleFactor
      //
      typedef ::xml_schema::decimal YScaleFactor_type;
      typedef ::xsd::cxx::tree::traits< YScaleFactor_type, char, ::xsd::cxx::tree::schema_type::decimal > YScaleFactor_traits;

      const YScaleFactor_type&
      YScaleFactor () const;

      YScaleFactor_type&
      YScaleFactor ();

      void
      YScaleFactor (const YScaleFactor_type& x);

      // YaxisDirection
      //
      typedef ::xsd::qif2::UnitVectorType YaxisDirection_type;
      typedef ::xsd::cxx::tree::traits< YaxisDirection_type, char > YaxisDirection_traits;

      const YaxisDirection_type&
      YaxisDirection () const;

      YaxisDirection_type&
      YaxisDirection ();

      void
      YaxisDirection (const YaxisDirection_type& x);

      void
      YaxisDirection (::std::auto_ptr< YaxisDirection_type > p);

      // ZScaleFactor
      //
      typedef ::xml_schema::decimal ZScaleFactor_type;
      typedef ::xsd::cxx::tree::traits< ZScaleFactor_type, char, ::xsd::cxx::tree::schema_type::decimal > ZScaleFactor_traits;

      const ZScaleFactor_type&
      ZScaleFactor () const;

      ZScaleFactor_type&
      ZScaleFactor ();

      void
      ZScaleFactor (const ZScaleFactor_type& x);

      // ZaxisDirection
      //
      typedef ::xsd::qif2::UnitVectorType ZaxisDirection_type;
      typedef ::xsd::cxx::tree::traits< ZaxisDirection_type, char > ZaxisDirection_traits;

      const ZaxisDirection_type&
      ZaxisDirection () const;

      ZaxisDirection_type&
      ZaxisDirection ();

      void
      ZaxisDirection (const ZaxisDirection_type& x);

      void
      ZaxisDirection (::std::auto_ptr< ZaxisDirection_type > p);

      // Constructors.
      //
      AxialDifferentialScaleType (const XScaleFactor_type&,
                                  const XaxisDirection_type&,
                                  const YScaleFactor_type&,
                                  const YaxisDirection_type&,
                                  const ZScaleFactor_type&,
                                  const ZaxisDirection_type&);

      AxialDifferentialScaleType (const XScaleFactor_type&,
                                  ::std::auto_ptr< XaxisDirection_type >,
                                  const YScaleFactor_type&,
                                  ::std::auto_ptr< YaxisDirection_type >,
                                  const ZScaleFactor_type&,
                                  ::std::auto_ptr< ZaxisDirection_type >);

      AxialDifferentialScaleType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      AxialDifferentialScaleType (const AxialDifferentialScaleType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual AxialDifferentialScaleType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AxialDifferentialScaleType&
      operator= (const AxialDifferentialScaleType& x);

      virtual 
      ~AxialDifferentialScaleType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< XScaleFactor_type > XScaleFactor_;
      ::xsd::cxx::tree::one< XaxisDirection_type > XaxisDirection_;
      ::xsd::cxx::tree::one< YScaleFactor_type > YScaleFactor_;
      ::xsd::cxx::tree::one< YaxisDirection_type > YaxisDirection_;
      ::xsd::cxx::tree::one< ZScaleFactor_type > ZScaleFactor_;
      ::xsd::cxx::tree::one< ZaxisDirection_type > ZaxisDirection_;
    };

    class ScaleType: public ::xml_schema::type
    {
      public:
      // Origin
      //
      typedef ::xsd::qif2::PointType Origin_type;
      typedef ::xsd::cxx::tree::traits< Origin_type, char > Origin_traits;

      const Origin_type&
      Origin () const;

      Origin_type&
      Origin ();

      void
      Origin (const Origin_type& x);

      void
      Origin (::std::auto_ptr< Origin_type > p);

      // UniformScale
      //
      typedef ::xsd::qif2::UniformScaleType UniformScale_type;
      typedef ::xsd::cxx::tree::optional< UniformScale_type > UniformScale_optional;
      typedef ::xsd::cxx::tree::traits< UniformScale_type, char > UniformScale_traits;

      const UniformScale_optional&
      UniformScale () const;

      UniformScale_optional&
      UniformScale ();

      void
      UniformScale (const UniformScale_type& x);

      void
      UniformScale (const UniformScale_optional& x);

      void
      UniformScale (::std::auto_ptr< UniformScale_type > p);

      // RadialDifferentialScale
      //
      typedef ::xsd::qif2::RadialDifferentialScaleType RadialDifferentialScale_type;
      typedef ::xsd::cxx::tree::optional< RadialDifferentialScale_type > RadialDifferentialScale_optional;
      typedef ::xsd::cxx::tree::traits< RadialDifferentialScale_type, char > RadialDifferentialScale_traits;

      const RadialDifferentialScale_optional&
      RadialDifferentialScale () const;

      RadialDifferentialScale_optional&
      RadialDifferentialScale ();

      void
      RadialDifferentialScale (const RadialDifferentialScale_type& x);

      void
      RadialDifferentialScale (const RadialDifferentialScale_optional& x);

      void
      RadialDifferentialScale (::std::auto_ptr< RadialDifferentialScale_type > p);

      // AxialDifferentialScale
      //
      typedef ::xsd::qif2::AxialDifferentialScaleType AxialDifferentialScale_type;
      typedef ::xsd::cxx::tree::optional< AxialDifferentialScale_type > AxialDifferentialScale_optional;
      typedef ::xsd::cxx::tree::traits< AxialDifferentialScale_type, char > AxialDifferentialScale_traits;

      const AxialDifferentialScale_optional&
      AxialDifferentialScale () const;

      AxialDifferentialScale_optional&
      AxialDifferentialScale ();

      void
      AxialDifferentialScale (const AxialDifferentialScale_type& x);

      void
      AxialDifferentialScale (const AxialDifferentialScale_optional& x);

      void
      AxialDifferentialScale (::std::auto_ptr< AxialDifferentialScale_type > p);

      // Constructors.
      //
      ScaleType (const Origin_type&);

      ScaleType (::std::auto_ptr< Origin_type >);

      ScaleType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      ScaleType (const ScaleType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual ScaleType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ScaleType&
      operator= (const ScaleType& x);

      virtual 
      ~ScaleType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Origin_type > Origin_;
      UniformScale_optional UniformScale_;
      RadialDifferentialScale_optional RadialDifferentialScale_;
      AxialDifferentialScale_optional AxialDifferentialScale_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xsd
{
  namespace qif2
  {
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xsd
{
  namespace qif2
  {
    void
    operator<< (::xercesc::DOMElement&, const RectangularUnitAreaType&);

    void
    operator<< (::xercesc::DOMElement&, const CircularUnitAreaType&);

    void
    operator<< (::xercesc::DOMElement&, const ActualZoneAxisType&);

    void
    operator<< (::xercesc::DOMElement&, const BottomEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const BottomEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const BottomEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const BottomType&);

    void
    operator<< (::xercesc::DOMElement&, const BoundingBoxType&);

    void
    operator<< (::xercesc::DOMElement&, const ShapeClassEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const ShapeClassEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ShapeClassEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const ShapeClassType&);

    void
    operator<< (::xercesc::DOMElement&, const ManufacturingMethodEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const ManufacturingMethodEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ManufacturingMethodEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const ManufacturingMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const InternalExternalEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const InternalExternalEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const InternalExternalEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const DimensionCountEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const DimensionCountEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const DimensionCountEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const CoordinateEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const CoordinateEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const CoordinateEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const TypeOfCoordinatesType&);

    void
    operator<< (::xercesc::DOMElement&, const RectangleType&);

    void
    operator<< (::xercesc::DOMElement&, const CircleType&);

    void
    operator<< (::xercesc::DOMElement&, const CylinderType&);

    void
    operator<< (::xercesc::DOMElement&, const SphereType&);

    void
    operator<< (::xercesc::DOMElement&, const PointAndVectorType&);

    void
    operator<< (::xercesc::DOMElement&, const ActualPointAndVectorType&);

    void
    operator<< (::xercesc::DOMElement&, const SlotEndEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const SlotEndEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const SlotEndEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const EndRadiusType&);

    void
    operator<< (::xercesc::DOMElement&, const ActualEndRadiusType&);

    void
    operator<< (::xercesc::DOMElement&, const SlotEndType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadSeriesEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const ThreadSeriesEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ThreadSeriesEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadSeriesType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadClassType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadClassEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const ThreadClassEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ThreadClassEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const SecurityClassificationEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const SecurityClassificationEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const SecurityClassificationEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const SecurityClassificationType&);

    void
    operator<< (::xercesc::DOMElement&, const DigitalModelFormatEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const DigitalModelFormatEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const DigitalModelFormatEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const DigitalModelFormatType&);

    void
    operator<< (::xercesc::DOMElement&, const UniformScaleType&);

    void
    operator<< (::xercesc::DOMElement&, const RadialDifferentialScaleType&);

    void
    operator<< (::xercesc::DOMElement&, const AxialDifferentialScaleType&);

    void
    operator<< (::xercesc::DOMElement&, const ScaleType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRIMITIVES_PMI_HXX

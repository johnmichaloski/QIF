// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef VISUALIZATION_HXX
#define VISUALIZATION_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xsd
{
  namespace qif2
  {
    class VisualizationSetType;
    class FontsType;
    class FontType;
    class PMIDisplaySetType;
    class PMIDisplayType;
    class LeaderType;
    class LeaderExtendType;
    class LeaderDoubleHeadType;
    class LeaderDoubleHeadExtendType;
    class LeaderCircularType;
    class LeaderDoubleHeadCircularType;
    class BalloonType;
    class TextsType;
    class FramesType;
    class TextType;
    class WitnessLinesType;
    class FrameType;
    class FrameRectangularType;
    class FrameCircularType;
    class FrameFlagType;
    class FrameIrregularFormType;
    class LeaderHeadFormEnumType;
    class ViewSetType;
    class ViewBaseType;
    class CameraBaseType;
    class CameraFormEnumType;
    class CameraType;
    class SavedViewType;
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "../qiflibrary/primitivespd.hxx"

namespace xsd
{
  namespace qif2
  {
    class VisualizationSetType: public ::xml_schema::type
    {
      public:
      // Fonts
      //
      typedef ::xsd::qif2::FontsType Fonts_type;
      typedef ::xsd::cxx::tree::traits< Fonts_type, char > Fonts_traits;

      const Fonts_type&
      Fonts () const;

      Fonts_type&
      Fonts ();

      void
      Fonts (const Fonts_type& x);

      void
      Fonts (::std::auto_ptr< Fonts_type > p);

      // PMIDisplaySet
      //
      typedef ::xsd::qif2::PMIDisplaySetType PMIDisplaySet_type;
      typedef ::xsd::cxx::tree::traits< PMIDisplaySet_type, char > PMIDisplaySet_traits;

      const PMIDisplaySet_type&
      PMIDisplaySet () const;

      PMIDisplaySet_type&
      PMIDisplaySet ();

      void
      PMIDisplaySet (const PMIDisplaySet_type& x);

      void
      PMIDisplaySet (::std::auto_ptr< PMIDisplaySet_type > p);

      // Constructors.
      //
      VisualizationSetType (const Fonts_type&,
                            const PMIDisplaySet_type&);

      VisualizationSetType (::std::auto_ptr< Fonts_type >,
                            ::std::auto_ptr< PMIDisplaySet_type >);

      VisualizationSetType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      VisualizationSetType (const VisualizationSetType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual VisualizationSetType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      VisualizationSetType&
      operator= (const VisualizationSetType& x);

      virtual 
      ~VisualizationSetType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Fonts_type > Fonts_;
      ::xsd::cxx::tree::one< PMIDisplaySet_type > PMIDisplaySet_;
    };

    class FontsType: public ::xml_schema::type
    {
      public:
      // Font
      //
      typedef ::xsd::qif2::FontType Font_type;
      typedef ::xsd::cxx::tree::sequence< Font_type > Font_sequence;
      typedef Font_sequence::iterator Font_iterator;
      typedef Font_sequence::const_iterator Font_const_iterator;
      typedef ::xsd::cxx::tree::traits< Font_type, char > Font_traits;

      const Font_sequence&
      Font () const;

      Font_sequence&
      Font ();

      void
      Font (const Font_sequence& s);

      // N
      //
      typedef ::xsd::qif2::NaturalType N_type;
      typedef ::xsd::cxx::tree::traits< N_type, char > N_traits;

      const N_type&
      N () const;

      N_type&
      N ();

      void
      N (const N_type& x);

      void
      N (::std::auto_ptr< N_type > p);

      // Constructors.
      //
      FontsType (const N_type&);

      FontsType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      FontsType (const FontsType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual FontsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FontsType&
      operator= (const FontsType& x);

      virtual 
      ~FontsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Font_sequence Font_;
      ::xsd::cxx::tree::one< N_type > N_;
    };

    class FontType: public ::xml_schema::type
    {
      public:
      // Attributes
      //
      typedef ::xsd::qif2::AttributesType Attributes_type;
      typedef ::xsd::cxx::tree::optional< Attributes_type > Attributes_optional;
      typedef ::xsd::cxx::tree::traits< Attributes_type, char > Attributes_traits;

      const Attributes_optional&
      Attributes () const;

      Attributes_optional&
      Attributes ();

      void
      Attributes (const Attributes_type& x);

      void
      Attributes (const Attributes_optional& x);

      void
      Attributes (::std::auto_ptr< Attributes_type > p);

      // Name
      //
      typedef ::xml_schema::string Name_type;
      typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

      const Name_type&
      Name () const;

      Name_type&
      Name ();

      void
      Name (const Name_type& x);

      void
      Name (::std::auto_ptr< Name_type > p);

      // Size
      //
      typedef ::xsd::qif2::NaturalType Size_type;
      typedef ::xsd::cxx::tree::traits< Size_type, char > Size_traits;

      const Size_type&
      Size () const;

      Size_type&
      Size ();

      void
      Size (const Size_type& x);

      void
      Size (::std::auto_ptr< Size_type > p);

      // index
      //
      typedef ::xml_schema::unsigned_int index_type;
      typedef ::xsd::cxx::tree::traits< index_type, char > index_traits;

      const index_type&
      index () const;

      index_type&
      index ();

      void
      index (const index_type& x);

      // bold
      //
      typedef ::xml_schema::boolean bold_type;
      typedef ::xsd::cxx::tree::traits< bold_type, char > bold_traits;

      const bold_type&
      bold () const;

      bold_type&
      bold ();

      void
      bold (const bold_type& x);

      static bold_type
      bold_default_value ();

      // italic
      //
      typedef ::xml_schema::boolean italic_type;
      typedef ::xsd::cxx::tree::traits< italic_type, char > italic_traits;

      const italic_type&
      italic () const;

      italic_type&
      italic ();

      void
      italic (const italic_type& x);

      static italic_type
      italic_default_value ();

      // underline
      //
      typedef ::xml_schema::boolean underline_type;
      typedef ::xsd::cxx::tree::traits< underline_type, char > underline_traits;

      const underline_type&
      underline () const;

      underline_type&
      underline ();

      void
      underline (const underline_type& x);

      static underline_type
      underline_default_value ();

      // Constructors.
      //
      FontType (const Name_type&,
                const Size_type&,
                const index_type&);

      FontType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      FontType (const FontType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual FontType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FontType&
      operator= (const FontType& x);

      virtual 
      ~FontType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Attributes_optional Attributes_;
      ::xsd::cxx::tree::one< Name_type > Name_;
      ::xsd::cxx::tree::one< Size_type > Size_;
      ::xsd::cxx::tree::one< index_type > index_;
      ::xsd::cxx::tree::one< bold_type > bold_;
      ::xsd::cxx::tree::one< italic_type > italic_;
      ::xsd::cxx::tree::one< underline_type > underline_;
    };

    class PMIDisplaySetType: public ::xml_schema::type
    {
      public:
      // PMIDisplay
      //
      typedef ::xsd::qif2::PMIDisplayType PMIDisplay_type;
      typedef ::xsd::cxx::tree::sequence< PMIDisplay_type > PMIDisplay_sequence;
      typedef PMIDisplay_sequence::iterator PMIDisplay_iterator;
      typedef PMIDisplay_sequence::const_iterator PMIDisplay_const_iterator;
      typedef ::xsd::cxx::tree::traits< PMIDisplay_type, char > PMIDisplay_traits;

      const PMIDisplay_sequence&
      PMIDisplay () const;

      PMIDisplay_sequence&
      PMIDisplay ();

      void
      PMIDisplay (const PMIDisplay_sequence& s);

      // Constructors.
      //
      PMIDisplaySetType ();

      PMIDisplaySetType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      PMIDisplaySetType (const PMIDisplaySetType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual PMIDisplaySetType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PMIDisplaySetType&
      operator= (const PMIDisplaySetType& x);

      virtual 
      ~PMIDisplaySetType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      PMIDisplay_sequence PMIDisplay_;
    };

    class PMIDisplayType: public ::xml_schema::type
    {
      public:
      // Attributes
      //
      typedef ::xsd::qif2::AttributesType Attributes_type;
      typedef ::xsd::cxx::tree::optional< Attributes_type > Attributes_optional;
      typedef ::xsd::cxx::tree::traits< Attributes_type, char > Attributes_traits;

      const Attributes_optional&
      Attributes () const;

      Attributes_optional&
      Attributes ();

      void
      Attributes (const Attributes_type& x);

      void
      Attributes (const Attributes_optional& x);

      void
      Attributes (::std::auto_ptr< Attributes_type > p);

      // Color
      //
      typedef ::xsd::qif2::ColorType Color_type;
      typedef ::xsd::cxx::tree::optional< Color_type > Color_optional;
      typedef ::xsd::cxx::tree::traits< Color_type, char > Color_traits;

      const Color_optional&
      Color () const;

      Color_optional&
      Color ();

      void
      Color (const Color_type& x);

      void
      Color (const Color_optional& x);

      void
      Color (::std::auto_ptr< Color_type > p);

      // Plane
      //
      typedef ::xsd::qif2::PlaneXType Plane_type;
      typedef ::xsd::cxx::tree::optional< Plane_type > Plane_optional;
      typedef ::xsd::cxx::tree::traits< Plane_type, char > Plane_traits;

      const Plane_optional&
      Plane () const;

      Plane_optional&
      Plane ();

      void
      Plane (const Plane_type& x);

      void
      Plane (const Plane_optional& x);

      void
      Plane (::std::auto_ptr< Plane_type > p);

      // Texts
      //
      typedef ::xsd::qif2::TextsType Texts_type;
      typedef ::xsd::cxx::tree::optional< Texts_type > Texts_optional;
      typedef ::xsd::cxx::tree::traits< Texts_type, char > Texts_traits;

      const Texts_optional&
      Texts () const;

      Texts_optional&
      Texts ();

      void
      Texts (const Texts_type& x);

      void
      Texts (const Texts_optional& x);

      void
      Texts (::std::auto_ptr< Texts_type > p);

      // Leader
      //
      typedef ::xsd::qif2::LeaderType Leader_type;
      typedef ::xsd::cxx::tree::sequence< Leader_type > Leader_sequence;
      typedef Leader_sequence::iterator Leader_iterator;
      typedef Leader_sequence::const_iterator Leader_const_iterator;
      typedef ::xsd::cxx::tree::traits< Leader_type, char > Leader_traits;

      const Leader_sequence&
      Leader () const;

      Leader_sequence&
      Leader ();

      void
      Leader (const Leader_sequence& s);

      // WitnessLines
      //
      typedef ::xsd::qif2::WitnessLinesType WitnessLines_type;
      typedef ::xsd::cxx::tree::optional< WitnessLines_type > WitnessLines_optional;
      typedef ::xsd::cxx::tree::traits< WitnessLines_type, char > WitnessLines_traits;

      const WitnessLines_optional&
      WitnessLines () const;

      WitnessLines_optional&
      WitnessLines ();

      void
      WitnessLines (const WitnessLines_type& x);

      void
      WitnessLines (const WitnessLines_optional& x);

      void
      WitnessLines (::std::auto_ptr< WitnessLines_type > p);

      // Frames
      //
      typedef ::xsd::qif2::FramesType Frames_type;
      typedef ::xsd::cxx::tree::optional< Frames_type > Frames_optional;
      typedef ::xsd::cxx::tree::traits< Frames_type, char > Frames_traits;

      const Frames_optional&
      Frames () const;

      Frames_optional&
      Frames ();

      void
      Frames (const Frames_type& x);

      void
      Frames (const Frames_optional& x);

      void
      Frames (::std::auto_ptr< Frames_type > p);

      // Balloon
      //
      typedef ::xsd::qif2::BalloonType Balloon_type;
      typedef ::xsd::cxx::tree::optional< Balloon_type > Balloon_optional;
      typedef ::xsd::cxx::tree::traits< Balloon_type, char > Balloon_traits;

      const Balloon_optional&
      Balloon () const;

      Balloon_optional&
      Balloon ();

      void
      Balloon (const Balloon_type& x);

      void
      Balloon (const Balloon_optional& x);

      void
      Balloon (::std::auto_ptr< Balloon_type > p);

      // Reference
      //
      typedef ::xsd::qif2::ElementReferenceFullType Reference_type;
      typedef ::xsd::cxx::tree::traits< Reference_type, char > Reference_traits;

      const Reference_type&
      Reference () const;

      Reference_type&
      Reference ();

      void
      Reference (const Reference_type& x);

      void
      Reference (::std::auto_ptr< Reference_type > p);

      // Constructors.
      //
      PMIDisplayType (const Reference_type&);

      PMIDisplayType (::std::auto_ptr< Reference_type >);

      PMIDisplayType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      PMIDisplayType (const PMIDisplayType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual PMIDisplayType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PMIDisplayType&
      operator= (const PMIDisplayType& x);

      virtual 
      ~PMIDisplayType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Attributes_optional Attributes_;
      Color_optional Color_;
      Plane_optional Plane_;
      Texts_optional Texts_;
      Leader_sequence Leader_;
      WitnessLines_optional WitnessLines_;
      Frames_optional Frames_;
      Balloon_optional Balloon_;
      ::xsd::cxx::tree::one< Reference_type > Reference_;
    };

    class LeaderType: public ::xsd::qif2::LineSegment2dType
    {
      public:
      // HeadForm
      //
      typedef ::xsd::qif2::LeaderHeadFormEnumType HeadForm_type;
      typedef ::xsd::cxx::tree::traits< HeadForm_type, char > HeadForm_traits;

      const HeadForm_type&
      HeadForm () const;

      HeadForm_type&
      HeadForm ();

      void
      HeadForm (const HeadForm_type& x);

      void
      HeadForm (::std::auto_ptr< HeadForm_type > p);

      // HeadHeight
      //
      typedef ::xml_schema::double_ HeadHeight_type;
      typedef ::xsd::cxx::tree::traits< HeadHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > HeadHeight_traits;

      const HeadHeight_type&
      HeadHeight () const;

      HeadHeight_type&
      HeadHeight ();

      void
      HeadHeight (const HeadHeight_type& x);

      // Constructors.
      //
      LeaderType (const StartPoint_type&,
                  const EndPoint_type&,
                  const HeadForm_type&,
                  const HeadHeight_type&);

      LeaderType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      LeaderType (const LeaderType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual LeaderType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LeaderType&
      operator= (const LeaderType& x);

      virtual 
      ~LeaderType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< HeadForm_type > HeadForm_;
      ::xsd::cxx::tree::one< HeadHeight_type > HeadHeight_;
    };

    class LeaderExtendType: public ::xsd::qif2::LeaderType
    {
      public:
      // PointExtension
      //
      typedef ::xsd::qif2::Point2dSimpleType PointExtension_type;
      typedef ::xsd::cxx::tree::traits< PointExtension_type, char > PointExtension_traits;

      const PointExtension_type&
      PointExtension () const;

      PointExtension_type&
      PointExtension ();

      void
      PointExtension (const PointExtension_type& x);

      void
      PointExtension (::std::auto_ptr< PointExtension_type > p);

      // Constructors.
      //
      LeaderExtendType (const StartPoint_type&,
                        const EndPoint_type&,
                        const HeadForm_type&,
                        const HeadHeight_type&,
                        const PointExtension_type&);

      LeaderExtendType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      LeaderExtendType (const LeaderExtendType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual LeaderExtendType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LeaderExtendType&
      operator= (const LeaderExtendType& x);

      virtual 
      ~LeaderExtendType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< PointExtension_type > PointExtension_;
    };

    class LeaderDoubleHeadType: public ::xsd::qif2::LeaderType
    {
      public:
      // HeadForm2
      //
      typedef ::xsd::qif2::LeaderHeadFormEnumType HeadForm2_type;
      typedef ::xsd::cxx::tree::traits< HeadForm2_type, char > HeadForm2_traits;

      const HeadForm2_type&
      HeadForm2 () const;

      HeadForm2_type&
      HeadForm2 ();

      void
      HeadForm2 (const HeadForm2_type& x);

      void
      HeadForm2 (::std::auto_ptr< HeadForm2_type > p);

      // PointConnection
      //
      typedef ::xsd::qif2::Point2dSimpleType PointConnection_type;
      typedef ::xsd::cxx::tree::traits< PointConnection_type, char > PointConnection_traits;

      const PointConnection_type&
      PointConnection () const;

      PointConnection_type&
      PointConnection ();

      void
      PointConnection (const PointConnection_type& x);

      void
      PointConnection (::std::auto_ptr< PointConnection_type > p);

      // Constructors.
      //
      LeaderDoubleHeadType (const StartPoint_type&,
                            const EndPoint_type&,
                            const HeadForm_type&,
                            const HeadHeight_type&,
                            const HeadForm2_type&,
                            const PointConnection_type&);

      LeaderDoubleHeadType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      LeaderDoubleHeadType (const LeaderDoubleHeadType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual LeaderDoubleHeadType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LeaderDoubleHeadType&
      operator= (const LeaderDoubleHeadType& x);

      virtual 
      ~LeaderDoubleHeadType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< HeadForm2_type > HeadForm2_;
      ::xsd::cxx::tree::one< PointConnection_type > PointConnection_;
    };

    class LeaderDoubleHeadExtendType: public ::xsd::qif2::LeaderDoubleHeadType
    {
      public:
      // PointExtension
      //
      typedef ::xsd::qif2::Point2dSimpleType PointExtension_type;
      typedef ::xsd::cxx::tree::traits< PointExtension_type, char > PointExtension_traits;

      const PointExtension_type&
      PointExtension () const;

      PointExtension_type&
      PointExtension ();

      void
      PointExtension (const PointExtension_type& x);

      void
      PointExtension (::std::auto_ptr< PointExtension_type > p);

      // Constructors.
      //
      LeaderDoubleHeadExtendType (const StartPoint_type&,
                                  const EndPoint_type&,
                                  const HeadForm_type&,
                                  const HeadHeight_type&,
                                  const HeadForm2_type&,
                                  const PointConnection_type&,
                                  const PointExtension_type&);

      LeaderDoubleHeadExtendType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      LeaderDoubleHeadExtendType (const LeaderDoubleHeadExtendType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual LeaderDoubleHeadExtendType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LeaderDoubleHeadExtendType&
      operator= (const LeaderDoubleHeadExtendType& x);

      virtual 
      ~LeaderDoubleHeadExtendType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< PointExtension_type > PointExtension_;
    };

    class LeaderCircularType: public ::xsd::qif2::LeaderType
    {
      public:
      // Center
      //
      typedef ::xsd::qif2::Point2dSimpleType Center_type;
      typedef ::xsd::cxx::tree::traits< Center_type, char > Center_traits;

      const Center_type&
      Center () const;

      Center_type&
      Center ();

      void
      Center (const Center_type& x);

      void
      Center (::std::auto_ptr< Center_type > p);

      // Constructors.
      //
      LeaderCircularType (const StartPoint_type&,
                          const EndPoint_type&,
                          const HeadForm_type&,
                          const HeadHeight_type&,
                          const Center_type&);

      LeaderCircularType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      LeaderCircularType (const LeaderCircularType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual LeaderCircularType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LeaderCircularType&
      operator= (const LeaderCircularType& x);

      virtual 
      ~LeaderCircularType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Center_type > Center_;
    };

    class LeaderDoubleHeadCircularType: public ::xsd::qif2::LeaderDoubleHeadType
    {
      public:
      // Center
      //
      typedef ::xsd::qif2::Point2dSimpleType Center_type;
      typedef ::xsd::cxx::tree::traits< Center_type, char > Center_traits;

      const Center_type&
      Center () const;

      Center_type&
      Center ();

      void
      Center (const Center_type& x);

      void
      Center (::std::auto_ptr< Center_type > p);

      // Constructors.
      //
      LeaderDoubleHeadCircularType (const StartPoint_type&,
                                    const EndPoint_type&,
                                    const HeadForm_type&,
                                    const HeadHeight_type&,
                                    const HeadForm2_type&,
                                    const PointConnection_type&,
                                    const Center_type&);

      LeaderDoubleHeadCircularType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      LeaderDoubleHeadCircularType (const LeaderDoubleHeadCircularType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual LeaderDoubleHeadCircularType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LeaderDoubleHeadCircularType&
      operator= (const LeaderDoubleHeadCircularType& x);

      virtual 
      ~LeaderDoubleHeadCircularType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Center_type > Center_;
    };

    class BalloonType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, char, ::xml_schema::simple_type >
    {
      public:
      // sub
      //
      typedef ::xsd::qif2::NaturalType sub_type;
      typedef ::xsd::cxx::tree::optional< sub_type > sub_optional;
      typedef ::xsd::cxx::tree::traits< sub_type, char > sub_traits;

      const sub_optional&
      sub () const;

      sub_optional&
      sub ();

      void
      sub (const sub_type& x);

      void
      sub (const sub_optional& x);

      void
      sub (::std::auto_ptr< sub_type > p);

      // Constructors.
      //
      BalloonType (const ::xml_schema::unsigned_int&);

      BalloonType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      BalloonType (const BalloonType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual BalloonType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      BalloonType&
      operator= (const BalloonType& x);

      virtual 
      ~BalloonType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      sub_optional sub_;
    };

    class TextsType: public ::xml_schema::type
    {
      public:
      // Text
      //
      typedef ::xsd::qif2::TextType Text_type;
      typedef ::xsd::cxx::tree::sequence< Text_type > Text_sequence;
      typedef Text_sequence::iterator Text_iterator;
      typedef Text_sequence::const_iterator Text_const_iterator;
      typedef ::xsd::cxx::tree::traits< Text_type, char > Text_traits;

      const Text_sequence&
      Text () const;

      Text_sequence&
      Text ();

      void
      Text (const Text_sequence& s);

      // fontIndex
      //
      typedef ::xml_schema::unsigned_int fontIndex_type;
      typedef ::xsd::cxx::tree::traits< fontIndex_type, char > fontIndex_traits;

      const fontIndex_type&
      fontIndex () const;

      fontIndex_type&
      fontIndex ();

      void
      fontIndex (const fontIndex_type& x);

      // lineHeight
      //
      typedef ::xml_schema::double_ lineHeight_type;
      typedef ::xsd::cxx::tree::optional< lineHeight_type > lineHeight_optional;
      typedef ::xsd::cxx::tree::traits< lineHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > lineHeight_traits;

      const lineHeight_optional&
      lineHeight () const;

      lineHeight_optional&
      lineHeight ();

      void
      lineHeight (const lineHeight_type& x);

      void
      lineHeight (const lineHeight_optional& x);

      // N
      //
      typedef ::xsd::qif2::NaturalType N_type;
      typedef ::xsd::cxx::tree::traits< N_type, char > N_traits;

      const N_type&
      N () const;

      N_type&
      N ();

      void
      N (const N_type& x);

      void
      N (::std::auto_ptr< N_type > p);

      // Constructors.
      //
      TextsType (const fontIndex_type&,
                 const N_type&);

      TextsType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      TextsType (const TextsType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual TextsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TextsType&
      operator= (const TextsType& x);

      virtual 
      ~TextsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Text_sequence Text_;
      ::xsd::cxx::tree::one< fontIndex_type > fontIndex_;
      lineHeight_optional lineHeight_;
      ::xsd::cxx::tree::one< N_type > N_;
    };

    class FramesType: public ::xml_schema::type
    {
      public:
      // Frame
      //
      typedef ::xsd::qif2::FrameType Frame_type;
      typedef ::xsd::cxx::tree::sequence< Frame_type > Frame_sequence;
      typedef Frame_sequence::iterator Frame_iterator;
      typedef Frame_sequence::const_iterator Frame_const_iterator;
      typedef ::xsd::cxx::tree::traits< Frame_type, char > Frame_traits;

      const Frame_sequence&
      Frame () const;

      Frame_sequence&
      Frame ();

      void
      Frame (const Frame_sequence& s);

      // N
      //
      typedef ::xsd::qif2::NaturalType N_type;
      typedef ::xsd::cxx::tree::traits< N_type, char > N_traits;

      const N_type&
      N () const;

      N_type&
      N ();

      void
      N (const N_type& x);

      void
      N (::std::auto_ptr< N_type > p);

      // Constructors.
      //
      FramesType (const N_type&);

      FramesType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      FramesType (const FramesType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual FramesType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FramesType&
      operator= (const FramesType& x);

      virtual 
      ~FramesType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Frame_sequence Frame_;
      ::xsd::cxx::tree::one< N_type > N_;
    };

    class TextType: public ::xml_schema::type
    {
      public:
      // Data
      //
      typedef ::xml_schema::string Data_type;
      typedef ::xsd::cxx::tree::traits< Data_type, char > Data_traits;

      const Data_type&
      Data () const;

      Data_type&
      Data ();

      void
      Data (const Data_type& x);

      void
      Data (::std::auto_ptr< Data_type > p);

      // XY
      //
      typedef ::xsd::qif2::Point2dSimpleType XY_type;
      typedef ::xsd::cxx::tree::traits< XY_type, char > XY_traits;

      const XY_type&
      XY () const;

      XY_type&
      XY ();

      void
      XY (const XY_type& x);

      void
      XY (::std::auto_ptr< XY_type > p);

      // Constructors.
      //
      TextType (const Data_type&,
                const XY_type&);

      TextType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      TextType (const TextType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual TextType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TextType&
      operator= (const TextType& x);

      virtual 
      ~TextType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Data_type > Data_;
      ::xsd::cxx::tree::one< XY_type > XY_;
    };

    class WitnessLinesType: public ::xml_schema::type
    {
      public:
      // Segment1
      //
      typedef ::xsd::qif2::LineSegment2dType Segment1_type;
      typedef ::xsd::cxx::tree::traits< Segment1_type, char > Segment1_traits;

      const Segment1_type&
      Segment1 () const;

      Segment1_type&
      Segment1 ();

      void
      Segment1 (const Segment1_type& x);

      void
      Segment1 (::std::auto_ptr< Segment1_type > p);

      // Segment2
      //
      typedef ::xsd::qif2::LineSegment2dType Segment2_type;
      typedef ::xsd::cxx::tree::traits< Segment2_type, char > Segment2_traits;

      const Segment2_type&
      Segment2 () const;

      Segment2_type&
      Segment2 ();

      void
      Segment2 (const Segment2_type& x);

      void
      Segment2 (::std::auto_ptr< Segment2_type > p);

      // width
      //
      typedef ::xml_schema::double_ width_type;
      typedef ::xsd::cxx::tree::traits< width_type, char, ::xsd::cxx::tree::schema_type::double_ > width_traits;

      const width_type&
      width () const;

      width_type&
      width ();

      void
      width (const width_type& x);

      // Constructors.
      //
      WitnessLinesType (const Segment1_type&,
                        const Segment2_type&,
                        const width_type&);

      WitnessLinesType (::std::auto_ptr< Segment1_type >,
                        ::std::auto_ptr< Segment2_type >,
                        const width_type&);

      WitnessLinesType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      WitnessLinesType (const WitnessLinesType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual WitnessLinesType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      WitnessLinesType&
      operator= (const WitnessLinesType& x);

      virtual 
      ~WitnessLinesType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Segment1_type > Segment1_;
      ::xsd::cxx::tree::one< Segment2_type > Segment2_;
      ::xsd::cxx::tree::one< width_type > width_;
    };

    class FrameType: public ::xml_schema::type
    {
      public:
      // XY
      //
      typedef ::xsd::qif2::Point2dSimpleType XY_type;
      typedef ::xsd::cxx::tree::traits< XY_type, char > XY_traits;

      const XY_type&
      XY () const;

      XY_type&
      XY ();

      void
      XY (const XY_type& x);

      void
      XY (::std::auto_ptr< XY_type > p);

      // Constructors.
      //
      FrameType (const XY_type&);

      FrameType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      FrameType (const FrameType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual FrameType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FrameType&
      operator= (const FrameType& x);

      virtual 
      ~FrameType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< XY_type > XY_;
    };

    class FrameRectangularType: public ::xsd::qif2::FrameType
    {
      public:
      // Width
      //
      typedef ::xml_schema::double_ Width_type;
      typedef ::xsd::cxx::tree::traits< Width_type, char, ::xsd::cxx::tree::schema_type::double_ > Width_traits;

      const Width_type&
      Width () const;

      Width_type&
      Width ();

      void
      Width (const Width_type& x);

      // Height
      //
      typedef ::xml_schema::double_ Height_type;
      typedef ::xsd::cxx::tree::traits< Height_type, char, ::xsd::cxx::tree::schema_type::double_ > Height_traits;

      const Height_type&
      Height () const;

      Height_type&
      Height ();

      void
      Height (const Height_type& x);

      // Constructors.
      //
      FrameRectangularType (const XY_type&,
                            const Width_type&,
                            const Height_type&);

      FrameRectangularType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      FrameRectangularType (const FrameRectangularType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual FrameRectangularType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FrameRectangularType&
      operator= (const FrameRectangularType& x);

      virtual 
      ~FrameRectangularType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Width_type > Width_;
      ::xsd::cxx::tree::one< Height_type > Height_;
    };

    class FrameCircularType: public ::xsd::qif2::FrameType
    {
      public:
      // Radius
      //
      typedef ::xml_schema::double_ Radius_type;
      typedef ::xsd::cxx::tree::traits< Radius_type, char, ::xsd::cxx::tree::schema_type::double_ > Radius_traits;

      const Radius_type&
      Radius () const;

      Radius_type&
      Radius ();

      void
      Radius (const Radius_type& x);

      // crossed
      //
      typedef ::xml_schema::boolean crossed_type;
      typedef ::xsd::cxx::tree::traits< crossed_type, char > crossed_traits;

      const crossed_type&
      crossed () const;

      crossed_type&
      crossed ();

      void
      crossed (const crossed_type& x);

      static crossed_type
      crossed_default_value ();

      // Constructors.
      //
      FrameCircularType (const XY_type&,
                         const Radius_type&);

      FrameCircularType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      FrameCircularType (const FrameCircularType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual FrameCircularType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FrameCircularType&
      operator= (const FrameCircularType& x);

      virtual 
      ~FrameCircularType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Radius_type > Radius_;
      ::xsd::cxx::tree::one< crossed_type > crossed_;
    };

    class FrameFlagType: public ::xsd::qif2::FrameRectangularType
    {
      public:
      // right
      //
      typedef ::xml_schema::boolean right_type;
      typedef ::xsd::cxx::tree::traits< right_type, char > right_traits;

      const right_type&
      right () const;

      right_type&
      right ();

      void
      right (const right_type& x);

      static right_type
      right_default_value ();

      // Constructors.
      //
      FrameFlagType (const XY_type&,
                     const Width_type&,
                     const Height_type&);

      FrameFlagType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      FrameFlagType (const FrameFlagType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual FrameFlagType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FrameFlagType&
      operator= (const FrameFlagType& x);

      virtual 
      ~FrameFlagType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< right_type > right_;
    };

    class FrameIrregularFormType: public ::xsd::qif2::FrameType
    {
      public:
      // Points
      //
      typedef ::xsd::qif2::ArrayPoint2dType Points_type;
      typedef ::xsd::cxx::tree::traits< Points_type, char > Points_traits;

      const Points_type&
      Points () const;

      Points_type&
      Points ();

      void
      Points (const Points_type& x);

      void
      Points (::std::auto_ptr< Points_type > p);

      // Constructors.
      //
      FrameIrregularFormType (const XY_type&,
                              const Points_type&);

      FrameIrregularFormType (const XY_type&,
                              ::std::auto_ptr< Points_type >);

      FrameIrregularFormType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      FrameIrregularFormType (const FrameIrregularFormType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual FrameIrregularFormType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FrameIrregularFormType&
      operator= (const FrameIrregularFormType& x);

      virtual 
      ~FrameIrregularFormType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Points_type > Points_;
    };

    class LeaderHeadFormEnumType: public ::xml_schema::string
    {
      public:
      enum value
      {
        NONE,
        ARROW_OPEN,
        ARROW_UNFILLED,
        ARROW_BLANKED,
        ARROW_FILLED,
        TRIANGLE_BLANKED,
        TRIANGLE_FILLED,
        DOT_BLANKED,
        DOT_FILLED,
        BOX_BLANKED,
        BOX_FILLED,
        DIMENSION_ORIGIN,
        SYMBOL_SLASH,
        SYMBOL_INTEGRAL,
        SYMBOL_CROSS
      };

      LeaderHeadFormEnumType (value v);

      LeaderHeadFormEnumType (const char* v);

      LeaderHeadFormEnumType (const ::std::string& v);

      LeaderHeadFormEnumType (const ::xml_schema::string& v);

      LeaderHeadFormEnumType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      LeaderHeadFormEnumType (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      LeaderHeadFormEnumType (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      LeaderHeadFormEnumType (const LeaderHeadFormEnumType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual LeaderHeadFormEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LeaderHeadFormEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_LeaderHeadFormEnumType_convert ();
      }

      protected:
      value
      _xsd_LeaderHeadFormEnumType_convert () const;

      public:
      static const char* const _xsd_LeaderHeadFormEnumType_literals_[15];
      static const value _xsd_LeaderHeadFormEnumType_indexes_[15];
    };

    class ViewSetType: public ::xml_schema::type
    {
      public:
      // ViewBase
      //
      typedef ::xsd::qif2::ViewBaseType ViewBase_type;
      typedef ::xsd::cxx::tree::sequence< ViewBase_type > ViewBase_sequence;
      typedef ViewBase_sequence::iterator ViewBase_iterator;
      typedef ViewBase_sequence::const_iterator ViewBase_const_iterator;
      typedef ::xsd::cxx::tree::traits< ViewBase_type, char > ViewBase_traits;

      const ViewBase_sequence&
      ViewBase () const;

      ViewBase_sequence&
      ViewBase ();

      void
      ViewBase (const ViewBase_sequence& s);

      // N
      //
      typedef ::xsd::qif2::NaturalType N_type;
      typedef ::xsd::cxx::tree::traits< N_type, char > N_traits;

      const N_type&
      N () const;

      N_type&
      N ();

      void
      N (const N_type& x);

      void
      N (::std::auto_ptr< N_type > p);

      // Constructors.
      //
      ViewSetType (const N_type&);

      ViewSetType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      ViewSetType (const ViewSetType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual ViewSetType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ViewSetType&
      operator= (const ViewSetType& x);

      virtual 
      ~ViewSetType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ViewBase_sequence ViewBase_;
      ::xsd::cxx::tree::one< N_type > N_;
    };

    class ViewBaseType: public ::xsd::qif2::NodeWithIdBaseType
    {
      public:
      // Constructors.
      //
      ViewBaseType (const id_type&);

      ViewBaseType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      ViewBaseType (const ViewBaseType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual ViewBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ViewBaseType ();
    };

    class CameraBaseType: public ::xsd::qif2::ViewBaseType
    {
      public:
      // ViewPlaneOrigin
      //
      typedef ::xsd::qif2::PointSimpleType ViewPlaneOrigin_type;
      typedef ::xsd::cxx::tree::traits< ViewPlaneOrigin_type, char > ViewPlaneOrigin_traits;

      const ViewPlaneOrigin_type&
      ViewPlaneOrigin () const;

      ViewPlaneOrigin_type&
      ViewPlaneOrigin ();

      void
      ViewPlaneOrigin (const ViewPlaneOrigin_type& x);

      void
      ViewPlaneOrigin (::std::auto_ptr< ViewPlaneOrigin_type > p);

      // Orientation
      //
      typedef ::xsd::qif2::QuaternionType Orientation_type;
      typedef ::xsd::cxx::tree::traits< Orientation_type, char > Orientation_traits;

      const Orientation_type&
      Orientation () const;

      Orientation_type&
      Orientation ();

      void
      Orientation (const Orientation_type& x);

      void
      Orientation (::std::auto_ptr< Orientation_type > p);

      // Ratio
      //
      typedef ::xml_schema::double_ Ratio_type;
      typedef ::xsd::cxx::tree::traits< Ratio_type, char, ::xsd::cxx::tree::schema_type::double_ > Ratio_traits;

      const Ratio_type&
      Ratio () const;

      Ratio_type&
      Ratio ();

      void
      Ratio (const Ratio_type& x);

      // Near
      //
      typedef ::xml_schema::double_ Near_type;
      typedef ::xsd::cxx::tree::traits< Near_type, char, ::xsd::cxx::tree::schema_type::double_ > Near_traits;

      const Near_type&
      Near () const;

      Near_type&
      Near ();

      void
      Near (const Near_type& x);

      // Far
      //
      typedef ::xml_schema::double_ Far_type;
      typedef ::xsd::cxx::tree::traits< Far_type, char, ::xsd::cxx::tree::schema_type::double_ > Far_traits;

      const Far_type&
      Far () const;

      Far_type&
      Far ();

      void
      Far (const Far_type& x);

      // Height
      //
      typedef ::xml_schema::double_ Height_type;
      typedef ::xsd::cxx::tree::traits< Height_type, char, ::xsd::cxx::tree::schema_type::double_ > Height_traits;

      const Height_type&
      Height () const;

      Height_type&
      Height ();

      void
      Height (const Height_type& x);

      // Constructors.
      //
      CameraBaseType (const id_type&,
                      const ViewPlaneOrigin_type&,
                      const Orientation_type&,
                      const Ratio_type&,
                      const Near_type&,
                      const Far_type&,
                      const Height_type&);

      CameraBaseType (const id_type&,
                      const ViewPlaneOrigin_type&,
                      ::std::auto_ptr< Orientation_type >,
                      const Ratio_type&,
                      const Near_type&,
                      const Far_type&,
                      const Height_type&);

      CameraBaseType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      CameraBaseType (const CameraBaseType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual CameraBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CameraBaseType&
      operator= (const CameraBaseType& x);

      virtual 
      ~CameraBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ViewPlaneOrigin_type > ViewPlaneOrigin_;
      ::xsd::cxx::tree::one< Orientation_type > Orientation_;
      ::xsd::cxx::tree::one< Ratio_type > Ratio_;
      ::xsd::cxx::tree::one< Near_type > Near_;
      ::xsd::cxx::tree::one< Far_type > Far_;
      ::xsd::cxx::tree::one< Height_type > Height_;
    };

    class CameraFormEnumType: public ::xml_schema::string
    {
      public:
      enum value
      {
        ORTHOGRAPHIC,
        PERSPECTIVE
      };

      CameraFormEnumType (value v);

      CameraFormEnumType (const char* v);

      CameraFormEnumType (const ::std::string& v);

      CameraFormEnumType (const ::xml_schema::string& v);

      CameraFormEnumType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      CameraFormEnumType (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      CameraFormEnumType (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      CameraFormEnumType (const CameraFormEnumType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual CameraFormEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CameraFormEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_CameraFormEnumType_convert ();
      }

      protected:
      value
      _xsd_CameraFormEnumType_convert () const;

      public:
      static const char* const _xsd_CameraFormEnumType_literals_[2];
      static const value _xsd_CameraFormEnumType_indexes_[2];
    };

    class CameraType: public ::xsd::qif2::CameraBaseType
    {
      public:
      // form
      //
      typedef ::xsd::qif2::CameraFormEnumType form_type;
      typedef ::xsd::cxx::tree::traits< form_type, char > form_traits;

      const form_type&
      form () const;

      form_type&
      form ();

      void
      form (const form_type& x);

      void
      form (::std::auto_ptr< form_type > p);

      static const form_type&
      form_default_value ();

      // Constructors.
      //
      CameraType (const id_type&,
                  const ViewPlaneOrigin_type&,
                  const Orientation_type&,
                  const Ratio_type&,
                  const Near_type&,
                  const Far_type&,
                  const Height_type&);

      CameraType (const id_type&,
                  const ViewPlaneOrigin_type&,
                  ::std::auto_ptr< Orientation_type >,
                  const Ratio_type&,
                  const Near_type&,
                  const Far_type&,
                  const Height_type&);

      CameraType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      CameraType (const CameraType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual CameraType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CameraType&
      operator= (const CameraType& x);

      virtual 
      ~CameraType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< form_type > form_;
      static const form_type form_default_value_;
    };

    class SavedViewType: public ::xsd::qif2::CameraBaseType
    {
      public:
      // AnnotationVisibleIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType AnnotationVisibleIds_type;
      typedef ::xsd::cxx::tree::optional< AnnotationVisibleIds_type > AnnotationVisibleIds_optional;
      typedef ::xsd::cxx::tree::traits< AnnotationVisibleIds_type, char > AnnotationVisibleIds_traits;

      const AnnotationVisibleIds_optional&
      AnnotationVisibleIds () const;

      AnnotationVisibleIds_optional&
      AnnotationVisibleIds ();

      void
      AnnotationVisibleIds (const AnnotationVisibleIds_type& x);

      void
      AnnotationVisibleIds (const AnnotationVisibleIds_optional& x);

      void
      AnnotationVisibleIds (::std::auto_ptr< AnnotationVisibleIds_type > p);

      // AnnotationHiddenIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType AnnotationHiddenIds_type;
      typedef ::xsd::cxx::tree::optional< AnnotationHiddenIds_type > AnnotationHiddenIds_optional;
      typedef ::xsd::cxx::tree::traits< AnnotationHiddenIds_type, char > AnnotationHiddenIds_traits;

      const AnnotationHiddenIds_optional&
      AnnotationHiddenIds () const;

      AnnotationHiddenIds_optional&
      AnnotationHiddenIds ();

      void
      AnnotationHiddenIds (const AnnotationHiddenIds_type& x);

      void
      AnnotationHiddenIds (const AnnotationHiddenIds_optional& x);

      void
      AnnotationHiddenIds (::std::auto_ptr< AnnotationHiddenIds_type > p);

      // BodyIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType BodyIds_type;
      typedef ::xsd::cxx::tree::optional< BodyIds_type > BodyIds_optional;
      typedef ::xsd::cxx::tree::traits< BodyIds_type, char > BodyIds_traits;

      const BodyIds_optional&
      BodyIds () const;

      BodyIds_optional&
      BodyIds ();

      void
      BodyIds (const BodyIds_type& x);

      void
      BodyIds (const BodyIds_optional& x);

      void
      BodyIds (::std::auto_ptr< BodyIds_type > p);

      // ComponentIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType ComponentIds_type;
      typedef ::xsd::cxx::tree::optional< ComponentIds_type > ComponentIds_optional;
      typedef ::xsd::cxx::tree::traits< ComponentIds_type, char > ComponentIds_traits;

      const ComponentIds_optional&
      ComponentIds () const;

      ComponentIds_optional&
      ComponentIds ();

      void
      ComponentIds (const ComponentIds_type& x);

      void
      ComponentIds (const ComponentIds_optional& x);

      void
      ComponentIds (::std::auto_ptr< ComponentIds_type > p);

      // PlaneClippingIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType PlaneClippingIds_type;
      typedef ::xsd::cxx::tree::optional< PlaneClippingIds_type > PlaneClippingIds_optional;
      typedef ::xsd::cxx::tree::traits< PlaneClippingIds_type, char > PlaneClippingIds_traits;

      const PlaneClippingIds_optional&
      PlaneClippingIds () const;

      PlaneClippingIds_optional&
      PlaneClippingIds ();

      void
      PlaneClippingIds (const PlaneClippingIds_type& x);

      void
      PlaneClippingIds (const PlaneClippingIds_optional& x);

      void
      PlaneClippingIds (::std::auto_ptr< PlaneClippingIds_type > p);

      // Constructors.
      //
      SavedViewType (const id_type&,
                     const ViewPlaneOrigin_type&,
                     const Orientation_type&,
                     const Ratio_type&,
                     const Near_type&,
                     const Far_type&,
                     const Height_type&);

      SavedViewType (const id_type&,
                     const ViewPlaneOrigin_type&,
                     ::std::auto_ptr< Orientation_type >,
                     const Ratio_type&,
                     const Near_type&,
                     const Far_type&,
                     const Height_type&);

      SavedViewType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      SavedViewType (const SavedViewType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual SavedViewType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SavedViewType&
      operator= (const SavedViewType& x);

      virtual 
      ~SavedViewType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      AnnotationVisibleIds_optional AnnotationVisibleIds_;
      AnnotationHiddenIds_optional AnnotationHiddenIds_;
      BodyIds_optional BodyIds_;
      ComponentIds_optional ComponentIds_;
      PlaneClippingIds_optional PlaneClippingIds_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xsd
{
  namespace qif2
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (const ::std::string& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (const ::std::string& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (::xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (::xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xsd
{
  namespace qif2
  {
    void
    operator<< (::xercesc::DOMElement&, const VisualizationSetType&);

    void
    operator<< (::xercesc::DOMElement&, const FontsType&);

    void
    operator<< (::xercesc::DOMElement&, const FontType&);

    void
    operator<< (::xercesc::DOMElement&, const PMIDisplaySetType&);

    void
    operator<< (::xercesc::DOMElement&, const PMIDisplayType&);

    void
    operator<< (::xercesc::DOMElement&, const LeaderType&);

    void
    operator<< (::xercesc::DOMElement&, const LeaderExtendType&);

    void
    operator<< (::xercesc::DOMElement&, const LeaderDoubleHeadType&);

    void
    operator<< (::xercesc::DOMElement&, const LeaderDoubleHeadExtendType&);

    void
    operator<< (::xercesc::DOMElement&, const LeaderCircularType&);

    void
    operator<< (::xercesc::DOMElement&, const LeaderDoubleHeadCircularType&);

    void
    operator<< (::xercesc::DOMElement&, const BalloonType&);

    void
    operator<< (::xercesc::DOMElement&, const TextsType&);

    void
    operator<< (::xercesc::DOMElement&, const FramesType&);

    void
    operator<< (::xercesc::DOMElement&, const TextType&);

    void
    operator<< (::xercesc::DOMElement&, const WitnessLinesType&);

    void
    operator<< (::xercesc::DOMElement&, const FrameType&);

    void
    operator<< (::xercesc::DOMElement&, const FrameRectangularType&);

    void
    operator<< (::xercesc::DOMElement&, const FrameCircularType&);

    void
    operator<< (::xercesc::DOMElement&, const FrameFlagType&);

    void
    operator<< (::xercesc::DOMElement&, const FrameIrregularFormType&);

    void
    operator<< (::xercesc::DOMElement&, const LeaderHeadFormEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const LeaderHeadFormEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const LeaderHeadFormEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const ViewSetType&);

    void
    operator<< (::xercesc::DOMElement&, const ViewBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const CameraBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const CameraFormEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const CameraFormEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const CameraFormEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const CameraType&);

    void
    operator<< (::xercesc::DOMElement&, const SavedViewType&);

    // Serialize to std::ostream.
    //

    void
    Frames (::std::ostream& os,
            const ::xsd::qif2::FramesType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    void
    Frames (::std::ostream& os,
            const ::xsd::qif2::FramesType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    void
    Frames (::std::ostream& os,
            const ::xsd::qif2::FramesType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Frames (::xercesc::XMLFormatTarget& ft,
            const ::xsd::qif2::FramesType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    void
    Frames (::xercesc::XMLFormatTarget& ft,
            const ::xsd::qif2::FramesType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    void
    Frames (::xercesc::XMLFormatTarget& ft,
            const ::xsd::qif2::FramesType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Frames (::xercesc::DOMDocument& d,
            const ::xsd::qif2::FramesType& x,
            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Frames (const ::xsd::qif2::FramesType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Frame (::std::ostream& os,
           const ::xsd::qif2::FrameType& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    void
    Frame (::std::ostream& os,
           const ::xsd::qif2::FrameType& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    void
    Frame (::std::ostream& os,
           const ::xsd::qif2::FrameType& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Frame (::xercesc::XMLFormatTarget& ft,
           const ::xsd::qif2::FrameType& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    void
    Frame (::xercesc::XMLFormatTarget& ft,
           const ::xsd::qif2::FrameType& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    void
    Frame (::xercesc::XMLFormatTarget& ft,
           const ::xsd::qif2::FrameType& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Frame (::xercesc::DOMDocument& d,
           const ::xsd::qif2::FrameType& x,
           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Frame (const ::xsd::qif2::FrameType& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FrameRectangular (::std::ostream& os,
                      const ::xsd::qif2::FrameRectangularType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    FrameRectangular (::std::ostream& os,
                      const ::xsd::qif2::FrameRectangularType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    FrameRectangular (::std::ostream& os,
                      const ::xsd::qif2::FrameRectangularType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FrameRectangular (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::FrameRectangularType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    FrameRectangular (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::FrameRectangularType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    FrameRectangular (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::FrameRectangularType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FrameRectangular (::xercesc::DOMDocument& d,
                      const ::xsd::qif2::FrameRectangularType& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FrameRectangular (const ::xsd::qif2::FrameRectangularType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FrameCircular (::std::ostream& os,
                   const ::xsd::qif2::FrameCircularType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    FrameCircular (::std::ostream& os,
                   const ::xsd::qif2::FrameCircularType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    FrameCircular (::std::ostream& os,
                   const ::xsd::qif2::FrameCircularType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FrameCircular (::xercesc::XMLFormatTarget& ft,
                   const ::xsd::qif2::FrameCircularType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    FrameCircular (::xercesc::XMLFormatTarget& ft,
                   const ::xsd::qif2::FrameCircularType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    FrameCircular (::xercesc::XMLFormatTarget& ft,
                   const ::xsd::qif2::FrameCircularType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FrameCircular (::xercesc::DOMDocument& d,
                   const ::xsd::qif2::FrameCircularType& x,
                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FrameCircular (const ::xsd::qif2::FrameCircularType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FrameFlag (::std::ostream& os,
               const ::xsd::qif2::FrameFlagType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    void
    FrameFlag (::std::ostream& os,
               const ::xsd::qif2::FrameFlagType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    void
    FrameFlag (::std::ostream& os,
               const ::xsd::qif2::FrameFlagType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FrameFlag (::xercesc::XMLFormatTarget& ft,
               const ::xsd::qif2::FrameFlagType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    void
    FrameFlag (::xercesc::XMLFormatTarget& ft,
               const ::xsd::qif2::FrameFlagType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    void
    FrameFlag (::xercesc::XMLFormatTarget& ft,
               const ::xsd::qif2::FrameFlagType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FrameFlag (::xercesc::DOMDocument& d,
               const ::xsd::qif2::FrameFlagType& x,
               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FrameFlag (const ::xsd::qif2::FrameFlagType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FrameIrregularForm (::std::ostream& os,
                        const ::xsd::qif2::FrameIrregularFormType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    FrameIrregularForm (::std::ostream& os,
                        const ::xsd::qif2::FrameIrregularFormType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    FrameIrregularForm (::std::ostream& os,
                        const ::xsd::qif2::FrameIrregularFormType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FrameIrregularForm (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::FrameIrregularFormType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    FrameIrregularForm (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::FrameIrregularFormType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    FrameIrregularForm (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::FrameIrregularFormType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FrameIrregularForm (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::FrameIrregularFormType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FrameIrregularForm (const ::xsd::qif2::FrameIrregularFormType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Leader (::std::ostream& os,
            const ::xsd::qif2::LeaderType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    void
    Leader (::std::ostream& os,
            const ::xsd::qif2::LeaderType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    void
    Leader (::std::ostream& os,
            const ::xsd::qif2::LeaderType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Leader (::xercesc::XMLFormatTarget& ft,
            const ::xsd::qif2::LeaderType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    void
    Leader (::xercesc::XMLFormatTarget& ft,
            const ::xsd::qif2::LeaderType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    void
    Leader (::xercesc::XMLFormatTarget& ft,
            const ::xsd::qif2::LeaderType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Leader (::xercesc::DOMDocument& d,
            const ::xsd::qif2::LeaderType& x,
            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Leader (const ::xsd::qif2::LeaderType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LeaderExtend (::std::ostream& os,
                  const ::xsd::qif2::LeaderExtendType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    void
    LeaderExtend (::std::ostream& os,
                  const ::xsd::qif2::LeaderExtendType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    void
    LeaderExtend (::std::ostream& os,
                  const ::xsd::qif2::LeaderExtendType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LeaderExtend (::xercesc::XMLFormatTarget& ft,
                  const ::xsd::qif2::LeaderExtendType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    void
    LeaderExtend (::xercesc::XMLFormatTarget& ft,
                  const ::xsd::qif2::LeaderExtendType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    void
    LeaderExtend (::xercesc::XMLFormatTarget& ft,
                  const ::xsd::qif2::LeaderExtendType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LeaderExtend (::xercesc::DOMDocument& d,
                  const ::xsd::qif2::LeaderExtendType& x,
                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LeaderExtend (const ::xsd::qif2::LeaderExtendType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LeaderCircular (::std::ostream& os,
                    const ::xsd::qif2::LeaderCircularType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    void
    LeaderCircular (::std::ostream& os,
                    const ::xsd::qif2::LeaderCircularType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    void
    LeaderCircular (::std::ostream& os,
                    const ::xsd::qif2::LeaderCircularType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LeaderCircular (::xercesc::XMLFormatTarget& ft,
                    const ::xsd::qif2::LeaderCircularType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    void
    LeaderCircular (::xercesc::XMLFormatTarget& ft,
                    const ::xsd::qif2::LeaderCircularType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    void
    LeaderCircular (::xercesc::XMLFormatTarget& ft,
                    const ::xsd::qif2::LeaderCircularType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LeaderCircular (::xercesc::DOMDocument& d,
                    const ::xsd::qif2::LeaderCircularType& x,
                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LeaderCircular (const ::xsd::qif2::LeaderCircularType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LeaderDoubleHead (::std::ostream& os,
                      const ::xsd::qif2::LeaderDoubleHeadType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    LeaderDoubleHead (::std::ostream& os,
                      const ::xsd::qif2::LeaderDoubleHeadType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    LeaderDoubleHead (::std::ostream& os,
                      const ::xsd::qif2::LeaderDoubleHeadType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LeaderDoubleHead (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::LeaderDoubleHeadType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    LeaderDoubleHead (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::LeaderDoubleHeadType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    LeaderDoubleHead (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::LeaderDoubleHeadType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LeaderDoubleHead (::xercesc::DOMDocument& d,
                      const ::xsd::qif2::LeaderDoubleHeadType& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LeaderDoubleHead (const ::xsd::qif2::LeaderDoubleHeadType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LeaderDoubleHeadCircular (::std::ostream& os,
                              const ::xsd::qif2::LeaderDoubleHeadCircularType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    LeaderDoubleHeadCircular (::std::ostream& os,
                              const ::xsd::qif2::LeaderDoubleHeadCircularType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    LeaderDoubleHeadCircular (::std::ostream& os,
                              const ::xsd::qif2::LeaderDoubleHeadCircularType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LeaderDoubleHeadCircular (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::LeaderDoubleHeadCircularType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    LeaderDoubleHeadCircular (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::LeaderDoubleHeadCircularType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    LeaderDoubleHeadCircular (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::LeaderDoubleHeadCircularType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LeaderDoubleHeadCircular (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::LeaderDoubleHeadCircularType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LeaderDoubleHeadCircular (const ::xsd::qif2::LeaderDoubleHeadCircularType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LeaderDoubleHeadExtend (::std::ostream& os,
                            const ::xsd::qif2::LeaderDoubleHeadExtendType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    LeaderDoubleHeadExtend (::std::ostream& os,
                            const ::xsd::qif2::LeaderDoubleHeadExtendType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    LeaderDoubleHeadExtend (::std::ostream& os,
                            const ::xsd::qif2::LeaderDoubleHeadExtendType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LeaderDoubleHeadExtend (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::LeaderDoubleHeadExtendType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    LeaderDoubleHeadExtend (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::LeaderDoubleHeadExtendType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    LeaderDoubleHeadExtend (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::LeaderDoubleHeadExtendType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LeaderDoubleHeadExtend (::xercesc::DOMDocument& d,
                            const ::xsd::qif2::LeaderDoubleHeadExtendType& x,
                            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LeaderDoubleHeadExtend (const ::xsd::qif2::LeaderDoubleHeadExtendType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    WitnessLines (::std::ostream& os,
                  const ::xsd::qif2::WitnessLinesType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    void
    WitnessLines (::std::ostream& os,
                  const ::xsd::qif2::WitnessLinesType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    void
    WitnessLines (::std::ostream& os,
                  const ::xsd::qif2::WitnessLinesType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    WitnessLines (::xercesc::XMLFormatTarget& ft,
                  const ::xsd::qif2::WitnessLinesType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    void
    WitnessLines (::xercesc::XMLFormatTarget& ft,
                  const ::xsd::qif2::WitnessLinesType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    void
    WitnessLines (::xercesc::XMLFormatTarget& ft,
                  const ::xsd::qif2::WitnessLinesType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    WitnessLines (::xercesc::DOMDocument& d,
                  const ::xsd::qif2::WitnessLinesType& x,
                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    WitnessLines (const ::xsd::qif2::WitnessLinesType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Texts (::std::ostream& os,
           const ::xsd::qif2::TextsType& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    void
    Texts (::std::ostream& os,
           const ::xsd::qif2::TextsType& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    void
    Texts (::std::ostream& os,
           const ::xsd::qif2::TextsType& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Texts (::xercesc::XMLFormatTarget& ft,
           const ::xsd::qif2::TextsType& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    void
    Texts (::xercesc::XMLFormatTarget& ft,
           const ::xsd::qif2::TextsType& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    void
    Texts (::xercesc::XMLFormatTarget& ft,
           const ::xsd::qif2::TextsType& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Texts (::xercesc::DOMDocument& d,
           const ::xsd::qif2::TextsType& x,
           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Texts (const ::xsd::qif2::TextsType& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Text (::std::ostream& os,
          const ::xsd::qif2::TextType& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    void
    Text (::std::ostream& os,
          const ::xsd::qif2::TextType& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    void
    Text (::std::ostream& os,
          const ::xsd::qif2::TextType& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Text (::xercesc::XMLFormatTarget& ft,
          const ::xsd::qif2::TextType& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    void
    Text (::xercesc::XMLFormatTarget& ft,
          const ::xsd::qif2::TextType& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    void
    Text (::xercesc::XMLFormatTarget& ft,
          const ::xsd::qif2::TextType& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Text (::xercesc::DOMDocument& d,
          const ::xsd::qif2::TextType& x,
          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Text (const ::xsd::qif2::TextType& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    VisualizationSet (::std::ostream& os,
                      const ::xsd::qif2::VisualizationSetType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    VisualizationSet (::std::ostream& os,
                      const ::xsd::qif2::VisualizationSetType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    VisualizationSet (::std::ostream& os,
                      const ::xsd::qif2::VisualizationSetType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    VisualizationSet (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::VisualizationSetType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    VisualizationSet (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::VisualizationSetType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    VisualizationSet (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::VisualizationSetType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    VisualizationSet (::xercesc::DOMDocument& d,
                      const ::xsd::qif2::VisualizationSetType& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    VisualizationSet (const ::xsd::qif2::VisualizationSetType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PMIDisplaySet (::std::ostream& os,
                   const ::xsd::qif2::PMIDisplaySetType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    PMIDisplaySet (::std::ostream& os,
                   const ::xsd::qif2::PMIDisplaySetType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    PMIDisplaySet (::std::ostream& os,
                   const ::xsd::qif2::PMIDisplaySetType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PMIDisplaySet (::xercesc::XMLFormatTarget& ft,
                   const ::xsd::qif2::PMIDisplaySetType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    PMIDisplaySet (::xercesc::XMLFormatTarget& ft,
                   const ::xsd::qif2::PMIDisplaySetType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    PMIDisplaySet (::xercesc::XMLFormatTarget& ft,
                   const ::xsd::qif2::PMIDisplaySetType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PMIDisplaySet (::xercesc::DOMDocument& d,
                   const ::xsd::qif2::PMIDisplaySetType& x,
                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PMIDisplaySet (const ::xsd::qif2::PMIDisplaySetType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Fonts (::std::ostream& os,
           const ::xsd::qif2::FontsType& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    void
    Fonts (::std::ostream& os,
           const ::xsd::qif2::FontsType& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    void
    Fonts (::std::ostream& os,
           const ::xsd::qif2::FontsType& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Fonts (::xercesc::XMLFormatTarget& ft,
           const ::xsd::qif2::FontsType& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    void
    Fonts (::xercesc::XMLFormatTarget& ft,
           const ::xsd::qif2::FontsType& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    void
    Fonts (::xercesc::XMLFormatTarget& ft,
           const ::xsd::qif2::FontsType& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Fonts (::xercesc::DOMDocument& d,
           const ::xsd::qif2::FontsType& x,
           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Fonts (const ::xsd::qif2::FontsType& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ViewSet (::std::ostream& os,
             const ::xsd::qif2::ViewSetType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    void
    ViewSet (::std::ostream& os,
             const ::xsd::qif2::ViewSetType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    void
    ViewSet (::std::ostream& os,
             const ::xsd::qif2::ViewSetType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ViewSet (::xercesc::XMLFormatTarget& ft,
             const ::xsd::qif2::ViewSetType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    void
    ViewSet (::xercesc::XMLFormatTarget& ft,
             const ::xsd::qif2::ViewSetType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    void
    ViewSet (::xercesc::XMLFormatTarget& ft,
             const ::xsd::qif2::ViewSetType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ViewSet (::xercesc::DOMDocument& d,
             const ::xsd::qif2::ViewSetType& x,
             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ViewSet (const ::xsd::qif2::ViewSetType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ViewBase (::std::ostream& os,
              const ::xsd::qif2::ViewBaseType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    ViewBase (::std::ostream& os,
              const ::xsd::qif2::ViewBaseType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    ViewBase (::std::ostream& os,
              const ::xsd::qif2::ViewBaseType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ViewBase (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::ViewBaseType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    ViewBase (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::ViewBaseType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    ViewBase (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::ViewBaseType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ViewBase (::xercesc::DOMDocument& d,
              const ::xsd::qif2::ViewBaseType& x,
              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ViewBase (const ::xsd::qif2::ViewBaseType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Camera (::std::ostream& os,
            const ::xsd::qif2::CameraType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    void
    Camera (::std::ostream& os,
            const ::xsd::qif2::CameraType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    void
    Camera (::std::ostream& os,
            const ::xsd::qif2::CameraType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Camera (::xercesc::XMLFormatTarget& ft,
            const ::xsd::qif2::CameraType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    void
    Camera (::xercesc::XMLFormatTarget& ft,
            const ::xsd::qif2::CameraType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    void
    Camera (::xercesc::XMLFormatTarget& ft,
            const ::xsd::qif2::CameraType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Camera (::xercesc::DOMDocument& d,
            const ::xsd::qif2::CameraType& x,
            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Camera (const ::xsd::qif2::CameraType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SavedView (::std::ostream& os,
               const ::xsd::qif2::SavedViewType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    void
    SavedView (::std::ostream& os,
               const ::xsd::qif2::SavedViewType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    void
    SavedView (::std::ostream& os,
               const ::xsd::qif2::SavedViewType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SavedView (::xercesc::XMLFormatTarget& ft,
               const ::xsd::qif2::SavedViewType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    void
    SavedView (::xercesc::XMLFormatTarget& ft,
               const ::xsd::qif2::SavedViewType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    void
    SavedView (::xercesc::XMLFormatTarget& ft,
               const ::xsd::qif2::SavedViewType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SavedView (::xercesc::DOMDocument& d,
               const ::xsd::qif2::SavedViewType& x,
               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SavedView (const ::xsd::qif2::SavedViewType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // VISUALIZATION_HXX

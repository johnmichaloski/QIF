// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CHARACTERISTICS_HXX
#define CHARACTERISTICS_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xsd
{
  namespace qif2
  {
    class CharacteristicBaseType;
    class CharacteristicItemBaseType;
    class KeyCharacteristicType;
    class LocationOnDrawingType;
    class CharacteristicDefinitionBaseType;
    class CharacteristicNominalBaseType;
    class CharacteristicActualBaseType;
    class GeometricCharacteristicDefinitionBaseType;
    class GeometricCharacteristicNominalBaseType;
    class GeometricCharacteristicActualBaseType;
    class GeometricCharacteristicItemBaseType;
    class DimensionalCharacteristicDefinitionBaseType;
    class DimensionalCharacteristicNominalBaseType;
    class DimensionalCharacteristicActualBaseType;
    class DimensionalCharacteristicItemBaseType;
    class CoordinateCharacteristicDefinitionBaseType;
    class CoordinateCharacteristicNominalBaseType;
    class CoordinateCharacteristicActualBaseType;
    class CoordinateCharacteristicItemBaseType;
    class UserDefinedAttributeCharacteristicDefinitionType;
    class UserDefinedAttributeCharacteristicNominalType;
    class UserDefinedAttributeCharacteristicActualType;
    class UserDefinedAttributeCharacteristicItemType;
    class StringValuesType;
    class LinearCharacteristicDefinitionBaseType;
    class UserDefinedLinearCharacteristicDefinitionType;
    class LinearCharacteristicNominalBaseType;
    class UserDefinedLinearCharacteristicNominalType;
    class LinearCharacteristicActualBaseType;
    class UserDefinedLinearCharacteristicActualType;
    class LinearCharacteristicItemBaseType;
    class UserDefinedLinearCharacteristicItemType;
    class AngularCharacteristicDefinitionBaseType;
    class UserDefinedAngularCharacteristicDefinitionType;
    class AngularCharacteristicNominalBaseType;
    class UserDefinedAngularCharacteristicNominalType;
    class AngularCharacteristicActualBaseType;
    class UserDefinedAngularCharacteristicActualType;
    class AngularCharacteristicItemBaseType;
    class UserDefinedAngularCharacteristicItemType;
    class TemperatureCharacteristicDefinitionBaseType;
    class TemperatureCharacteristicNominalBaseType;
    class TemperatureCharacteristicActualBaseType;
    class TemperatureCharacteristicItemBaseType;
    class UserDefinedTemperatureCharacteristicDefinitionType;
    class UserDefinedTemperatureCharacteristicNominalType;
    class UserDefinedTemperatureCharacteristicActualType;
    class UserDefinedTemperatureCharacteristicItemType;
    class AreaCharacteristicDefinitionBaseType;
    class AreaCharacteristicNominalBaseType;
    class AreaCharacteristicActualBaseType;
    class AreaCharacteristicItemBaseType;
    class UserDefinedAreaCharacteristicDefinitionType;
    class UserDefinedAreaCharacteristicNominalType;
    class UserDefinedAreaCharacteristicActualType;
    class UserDefinedAreaCharacteristicItemType;
    class ForceCharacteristicDefinitionBaseType;
    class ForceCharacteristicNominalBaseType;
    class ForceCharacteristicActualBaseType;
    class ForceCharacteristicItemBaseType;
    class UserDefinedForceCharacteristicDefinitionType;
    class UserDefinedForceCharacteristicNominalType;
    class UserDefinedForceCharacteristicActualType;
    class UserDefinedForceCharacteristicItemType;
    class MassCharacteristicDefinitionBaseType;
    class MassCharacteristicNominalBaseType;
    class MassCharacteristicActualBaseType;
    class MassCharacteristicItemBaseType;
    class UserDefinedMassCharacteristicDefinitionType;
    class UserDefinedMassCharacteristicNominalType;
    class UserDefinedMassCharacteristicActualType;
    class UserDefinedMassCharacteristicItemType;
    class PressureCharacteristicDefinitionBaseType;
    class PressureCharacteristicNominalBaseType;
    class PressureCharacteristicActualBaseType;
    class PressureCharacteristicItemBaseType;
    class UserDefinedPressureCharacteristicDefinitionType;
    class UserDefinedPressureCharacteristicNominalType;
    class UserDefinedPressureCharacteristicActualType;
    class UserDefinedPressureCharacteristicItemType;
    class SpeedCharacteristicDefinitionBaseType;
    class SpeedCharacteristicNominalBaseType;
    class SpeedCharacteristicActualBaseType;
    class SpeedCharacteristicItemBaseType;
    class UserDefinedSpeedCharacteristicDefinitionType;
    class UserDefinedSpeedCharacteristicNominalType;
    class UserDefinedSpeedCharacteristicActualType;
    class UserDefinedSpeedCharacteristicItemType;
    class TimeCharacteristicDefinitionBaseType;
    class TimeCharacteristicNominalBaseType;
    class TimeCharacteristicActualBaseType;
    class TimeCharacteristicItemBaseType;
    class UserDefinedTimeCharacteristicDefinitionType;
    class UserDefinedTimeCharacteristicNominalType;
    class UserDefinedTimeCharacteristicActualType;
    class UserDefinedTimeCharacteristicItemType;
    class UserDefinedUnitCharacteristicDefinitionType;
    class UserDefinedUnitCharacteristicNominalType;
    class UserDefinedUnitCharacteristicActualType;
    class UserDefinedUnitCharacteristicItemType;
    class CompositeSegmentDefinitionBaseType;
    class CompositeSegmentActualBaseType;
    class CompositeSegmentPositionDefinitionType;
    class CompositeSegmentPositionActualType;
    class CompositeSegmentProfileDefinitionType;
    class CompositeSegmentProfileActualType;
    class CompositeSegmentSymmetryDefinitionType;
    class CompositeSegmentSymmetryActualType;
    class OriginReferenceType;
    class SurfaceTextureCharacteristicDefinitionType;
    class SurfaceTextureCharacteristicNominalType;
    class SurfaceTextureCharacteristicActualType;
    class SurfaceTextureCharacteristicItemType;
    class OrientationDiametricalZoneType;
    class OrientationPlanarZoneType;
    class OrientationZoneShapeType;
    class OrientationCharacteristicItemBaseType;
    class OrientationCharacteristicDefinitionBaseType;
    class OrientationCharacteristicNominalBaseType;
    class OrientationCharacteristicActualBaseType;
    class AngularityCharacteristicItemType;
    class AngularityCharacteristicDefinitionType;
    class AngularityCharacteristicNominalType;
    class AngularityCharacteristicActualType;
    class PerpendicularityCharacteristicItemType;
    class PerpendicularityCharacteristicDefinitionType;
    class PerpendicularityCharacteristicNominalType;
    class PerpendicularityCharacteristicActualType;
    class ParallelismCharacteristicItemType;
    class ParallelismCharacteristicDefinitionType;
    class ParallelismCharacteristicNominalType;
    class ParallelismCharacteristicActualType;
    class FormCharacteristicDefinitionBaseType;
    class FormCharacteristicNominalBaseType;
    class FormCharacteristicActualBaseType;
    class FormCharacteristicItemBaseType;
    class StraightnessDiametricalZoneType;
    class StraightnessNonDiametricalZoneType;
    class StraightnessZoneShapeType;
    class StraightnessCharacteristicItemType;
    class StraightnessCharacteristicDefinitionType;
    class StraightnessCharacteristicNominalType;
    class StraightnessCharacteristicActualType;
    class FlatnessCharacteristicItemType;
    class FlatnessCharacteristicDefinitionType;
    class FlatnessCharacteristicNominalType;
    class FlatnessCharacteristicActualType;
    class CircularityCharacteristicItemType;
    class CircularityCharacteristicDefinitionType;
    class CircularityCharacteristicNominalType;
    class CircularityCharacteristicActualType;
    class CylindricityCharacteristicItemType;
    class CylindricityCharacteristicDefinitionType;
    class CylindricityCharacteristicNominalType;
    class CylindricityCharacteristicActualType;
    class LocationCharacteristicItemBaseType;
    class LocationCharacteristicDefinitionBaseType;
    class LocationCharacteristicNominalBaseType;
    class LocationCharacteristicActualBaseType;
    class PositionCharacteristicItemType;
    class PositionSphericalZoneType;
    class PositionDiametricalZoneType;
    class PositionNonDiametricalZoneType;
    class PositionZoneShapeType;
    class PositionCharacteristicDefinitionType;
    class PositionCharacteristicNominalType;
    class PositionCharacteristicActualType;
    class AngleCharacteristicItemType;
    class AngleCharacteristicDefinitionType;
    class AngleCharacteristicNominalType;
    class AngleCharacteristicActualType;
    class AngleFromCharacteristicItemType;
    class AngleFromCharacteristicDefinitionType;
    class AngleFromCharacteristicNominalType;
    class AngleFromCharacteristicActualType;
    class AngleBetweenCharacteristicItemType;
    class AngleBetweenCharacteristicDefinitionType;
    class AngleBetweenCharacteristicNominalType;
    class AngleBetweenCharacteristicActualType;
    class LinearCoordinateCharacteristicItemType;
    class LinearCoordinateCharacteristicDefinitionType;
    class LinearCoordinateCharacteristicNominalType;
    class LinearCoordinateCharacteristicActualType;
    class AngularCoordinateCharacteristicItemType;
    class AngularCoordinateCharacteristicDefinitionType;
    class AngularCoordinateCharacteristicNominalType;
    class AngularCoordinateCharacteristicActualType;
    class CurveLengthCharacteristicItemType;
    class CurveLengthCharacteristicDefinitionType;
    class CurveLengthCharacteristicNominalType;
    class CurveLengthCharacteristicActualType;
    class DiameterCharacteristicItemType;
    class DiameterCharacteristicDefinitionType;
    class DiameterCharacteristicNominalType;
    class DiameterCharacteristicActualType;
    class LengthCharacteristicItemType;
    class LengthCharacteristicDefinitionType;
    class LengthCharacteristicNominalType;
    class LengthCharacteristicActualType;
    class WidthCharacteristicItemType;
    class WidthCharacteristicDefinitionType;
    class WidthCharacteristicNominalType;
    class WidthCharacteristicActualType;
    class HeightCharacteristicItemType;
    class HeightCharacteristicDefinitionType;
    class HeightCharacteristicNominalType;
    class HeightCharacteristicActualType;
    class DepthCharacteristicItemType;
    class DepthCharacteristicDefinitionType;
    class DepthCharacteristicNominalType;
    class DepthCharacteristicActualType;
    class ThicknessCharacteristicItemType;
    class ThicknessCharacteristicDefinitionType;
    class ThicknessCharacteristicNominalType;
    class ThicknessCharacteristicActualType;
    class SquareCharacteristicItemType;
    class SquareCharacteristicDefinitionType;
    class SquareCharacteristicNominalType;
    class SquareCharacteristicActualType;
    class DistanceFromCharacteristicItemType;
    class DistanceFromCharacteristicDefinitionType;
    class DistanceFromCharacteristicNominalType;
    class DistanceFromCharacteristicActualType;
    class DistanceBetweenCharacteristicItemType;
    class DistanceBetweenCharacteristicDefinitionType;
    class DistanceBetweenCharacteristicNominalType;
    class DistanceBetweenCharacteristicActualType;
    class RadiusCharacteristicItemType;
    class RadiusCharacteristicDefinitionType;
    class RadiusCharacteristicNominalType;
    class RadiusCharacteristicActualType;
    class ChordCharacteristicItemType;
    class ChordCharacteristicDefinitionType;
    class ChordCharacteristicNominalType;
    class ChordCharacteristicActualType;
    class RunoutCharacteristicItemBaseType;
    class RunoutCharacteristicDefinitionBaseType;
    class RunoutCharacteristicNominalBaseType;
    class RunoutCharacteristicActualBaseType;
    class CircularRunoutCharacteristicItemType;
    class CircularRunoutCharacteristicDefinitionType;
    class CircularRunoutCharacteristicNominalType;
    class CircularRunoutCharacteristicActualType;
    class TotalRunoutCharacteristicItemType;
    class TotalRunoutCharacteristicDefinitionType;
    class TotalRunoutCharacteristicNominalType;
    class TotalRunoutCharacteristicActualType;
    class ConcentricitySphericalZoneType;
    class ConcentricityDiametricalZoneType;
    class ConcentricityNonDiametricalZoneType;
    class ConcentricityZoneShapeType;
    class ConcentricityCharacteristicItemType;
    class ConcentricityCharacteristicDefinitionType;
    class ConcentricityCharacteristicNominalType;
    class ConcentricityCharacteristicActualType;
    class SymmetryCharacteristicItemType;
    class SymmetryCharacteristicDefinitionType;
    class SymmetryCharacteristicNominalType;
    class SymmetryCharacteristicActualType;
    class ProfileCharacteristicItemBaseType;
    class ProfileCharacteristicDefinitionBaseType;
    class ProfileCharacteristicNominalBaseType;
    class ProfileCharacteristicActualBaseType;
    class LineProfileCharacteristicItemType;
    class LineProfileCharacteristicDefinitionType;
    class LineProfileCharacteristicNominalType;
    class LineProfileCharacteristicActualType;
    class PointProfileCharacteristicItemType;
    class PointProfileCharacteristicDefinitionType;
    class PointProfileCharacteristicNominalType;
    class PointProfileCharacteristicActualType;
    class SurfaceProfileCharacteristicItemType;
    class SurfaceProfileCharacteristicDefinitionType;
    class SurfaceProfileCharacteristicNominalType;
    class SurfaceProfileCharacteristicActualType;
    class SurfaceProfileNonUniformCharacteristicItemType;
    class SurfaceProfileNonUniformCharacteristicDefinitionType;
    class SurfaceProfileNonUniformCharacteristicNominalType;
    class SurfaceProfileNonUniformCharacteristicActualType;
    class ZoneRadiiType;
    class ActualZoneRadiiType;
    class CharacteristicGroupType;
    class CharacteristicManufacturingProcessGroupType;
    class CharacteristicSimultaneityGroupType;
    class CharacteristicStatusEnumType;
    class CharacteristicStatusType;
    class CharacteristicGroupStatusType;
    class PointDeviationType;
    class PointDeviationsType;
    class ExtentEnumType;
    class ExtentType;
    class PointWithNameType;
    class CharacteristicDirectionalZoneLimitType;
    class CharacteristicRectangularZoneLimitType;
    class CharacteristicCircularZoneLimitType;
    class ThreadCharacteristicItemType;
    class ThreadCharacteristicDefinitionType;
    class ThreadCharacteristicNominalType;
    class ThreadCharacteristicActualType;
    class CharacteristicAspectsListsType;
    class MeasuredCharacteristicsType;
    class CharacteristicItemsType;
    class CharacteristicGroupsType;
    class CharacteristicGroupStatusesType;
    class CharacteristicDefinitionsType;
    class ToleranceDefinitionsType;
    class CharacteristicNominalsType;
    class CharacteristicActualsType;
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "../qiflibrary/intermediatespmi.hxx"

namespace xsd
{
  namespace qif2
  {
    class CharacteristicBaseType: public ::xml_schema::type
    {
      public:
      // Attributes
      //
      typedef ::xsd::qif2::AttributesType Attributes_type;
      typedef ::xsd::cxx::tree::optional< Attributes_type > Attributes_optional;
      typedef ::xsd::cxx::tree::traits< Attributes_type, char > Attributes_traits;

      const Attributes_optional&
      Attributes () const;

      Attributes_optional&
      Attributes ();

      void
      Attributes (const Attributes_type& x);

      void
      Attributes (const Attributes_optional& x);

      void
      Attributes (::std::auto_ptr< Attributes_type > p);

      // Description
      //
      typedef ::xml_schema::string Description_type;
      typedef ::xsd::cxx::tree::optional< Description_type > Description_optional;
      typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

      const Description_optional&
      Description () const;

      Description_optional&
      Description ();

      void
      Description (const Description_type& x);

      void
      Description (const Description_optional& x);

      void
      Description (::std::auto_ptr< Description_type > p);

      // id
      //
      typedef ::xsd::qif2::QIFIdType id_type;
      typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

      const id_type&
      id () const;

      id_type&
      id ();

      void
      id (const id_type& x);

      void
      id (::std::auto_ptr< id_type > p);

      // Constructors.
      //
      CharacteristicBaseType (const id_type&);

      CharacteristicBaseType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      CharacteristicBaseType (const CharacteristicBaseType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual CharacteristicBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicBaseType&
      operator= (const CharacteristicBaseType& x);

      virtual 
      ~CharacteristicBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Attributes_optional Attributes_;
      Description_optional Description_;
      ::xsd::cxx::tree::one< id_type > id_;
    };

    class CharacteristicItemBaseType: public ::xsd::qif2::CharacteristicBaseType
    {
      public:
      // Name
      //
      typedef ::xml_schema::token Name_type;
      typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

      const Name_type&
      Name () const;

      Name_type&
      Name ();

      void
      Name (const Name_type& x);

      void
      Name (::std::auto_ptr< Name_type > p);

      // QPId
      //
      typedef ::xsd::qif2::QPIdType QPId_type;
      typedef ::xsd::cxx::tree::optional< QPId_type > QPId_optional;
      typedef ::xsd::cxx::tree::traits< QPId_type, char > QPId_traits;

      const QPId_optional&
      QPId () const;

      QPId_optional&
      QPId ();

      void
      QPId (const QPId_type& x);

      void
      QPId (const QPId_optional& x);

      void
      QPId (::std::auto_ptr< QPId_type > p);

      // KeyCharacteristic
      //
      typedef ::xsd::qif2::KeyCharacteristicType KeyCharacteristic_type;
      typedef ::xsd::cxx::tree::optional< KeyCharacteristic_type > KeyCharacteristic_optional;
      typedef ::xsd::cxx::tree::traits< KeyCharacteristic_type, char > KeyCharacteristic_traits;

      const KeyCharacteristic_optional&
      KeyCharacteristic () const;

      KeyCharacteristic_optional&
      KeyCharacteristic ();

      void
      KeyCharacteristic (const KeyCharacteristic_type& x);

      void
      KeyCharacteristic (const KeyCharacteristic_optional& x);

      void
      KeyCharacteristic (::std::auto_ptr< KeyCharacteristic_type > p);

      // FeatureItemIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType FeatureItemIds_type;
      typedef ::xsd::cxx::tree::optional< FeatureItemIds_type > FeatureItemIds_optional;
      typedef ::xsd::cxx::tree::traits< FeatureItemIds_type, char > FeatureItemIds_traits;

      const FeatureItemIds_optional&
      FeatureItemIds () const;

      FeatureItemIds_optional&
      FeatureItemIds ();

      void
      FeatureItemIds (const FeatureItemIds_type& x);

      void
      FeatureItemIds (const FeatureItemIds_optional& x);

      void
      FeatureItemIds (::std::auto_ptr< FeatureItemIds_type > p);

      // NotableEventIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType NotableEventIds_type;
      typedef ::xsd::cxx::tree::optional< NotableEventIds_type > NotableEventIds_optional;
      typedef ::xsd::cxx::tree::traits< NotableEventIds_type, char > NotableEventIds_traits;

      const NotableEventIds_optional&
      NotableEventIds () const;

      NotableEventIds_optional&
      NotableEventIds ();

      void
      NotableEventIds (const NotableEventIds_type& x);

      void
      NotableEventIds (const NotableEventIds_optional& x);

      void
      NotableEventIds (::std::auto_ptr< NotableEventIds_type > p);

      // MeasurementDeviceIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType MeasurementDeviceIds_type;
      typedef ::xsd::cxx::tree::optional< MeasurementDeviceIds_type > MeasurementDeviceIds_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementDeviceIds_type, char > MeasurementDeviceIds_traits;

      const MeasurementDeviceIds_optional&
      MeasurementDeviceIds () const;

      MeasurementDeviceIds_optional&
      MeasurementDeviceIds ();

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_type& x);

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_optional& x);

      void
      MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > p);

      // CharacteristicNominalId
      //
      typedef ::xsd::qif2::QIFReferenceFullType CharacteristicNominalId_type;
      typedef ::xsd::cxx::tree::traits< CharacteristicNominalId_type, char > CharacteristicNominalId_traits;

      const CharacteristicNominalId_type&
      CharacteristicNominalId () const;

      CharacteristicNominalId_type&
      CharacteristicNominalId ();

      void
      CharacteristicNominalId (const CharacteristicNominalId_type& x);

      void
      CharacteristicNominalId (::std::auto_ptr< CharacteristicNominalId_type > p);

      // LocationOnDrawing
      //
      typedef ::xsd::qif2::LocationOnDrawingType LocationOnDrawing_type;
      typedef ::xsd::cxx::tree::optional< LocationOnDrawing_type > LocationOnDrawing_optional;
      typedef ::xsd::cxx::tree::traits< LocationOnDrawing_type, char > LocationOnDrawing_traits;

      const LocationOnDrawing_optional&
      LocationOnDrawing () const;

      LocationOnDrawing_optional&
      LocationOnDrawing ();

      void
      LocationOnDrawing (const LocationOnDrawing_type& x);

      void
      LocationOnDrawing (const LocationOnDrawing_optional& x);

      void
      LocationOnDrawing (::std::auto_ptr< LocationOnDrawing_type > p);

      // Constructors.
      //
      CharacteristicItemBaseType (const id_type&,
                                  const Name_type&,
                                  const CharacteristicNominalId_type&);

      CharacteristicItemBaseType (const id_type&,
                                  const Name_type&,
                                  ::std::auto_ptr< CharacteristicNominalId_type >);

      CharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      CharacteristicItemBaseType (const CharacteristicItemBaseType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual CharacteristicItemBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicItemBaseType&
      operator= (const CharacteristicItemBaseType& x);

      virtual 
      ~CharacteristicItemBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Name_type > Name_;
      QPId_optional QPId_;
      KeyCharacteristic_optional KeyCharacteristic_;
      FeatureItemIds_optional FeatureItemIds_;
      NotableEventIds_optional NotableEventIds_;
      MeasurementDeviceIds_optional MeasurementDeviceIds_;
      ::xsd::cxx::tree::one< CharacteristicNominalId_type > CharacteristicNominalId_;
      LocationOnDrawing_optional LocationOnDrawing_;
    };

    class KeyCharacteristicType: public ::xml_schema::type
    {
      public:
      // Designator
      //
      typedef ::xml_schema::token Designator_type;
      typedef ::xsd::cxx::tree::traits< Designator_type, char > Designator_traits;

      const Designator_type&
      Designator () const;

      Designator_type&
      Designator ();

      void
      Designator (const Designator_type& x);

      void
      Designator (::std::auto_ptr< Designator_type > p);

      // Criticality
      //
      typedef ::xml_schema::token Criticality_type;
      typedef ::xsd::cxx::tree::optional< Criticality_type > Criticality_optional;
      typedef ::xsd::cxx::tree::traits< Criticality_type, char > Criticality_traits;

      const Criticality_optional&
      Criticality () const;

      Criticality_optional&
      Criticality ();

      void
      Criticality (const Criticality_type& x);

      void
      Criticality (const Criticality_optional& x);

      void
      Criticality (::std::auto_ptr< Criticality_type > p);

      // Constructors.
      //
      KeyCharacteristicType (const Designator_type&);

      KeyCharacteristicType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      KeyCharacteristicType (const KeyCharacteristicType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual KeyCharacteristicType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      KeyCharacteristicType&
      operator= (const KeyCharacteristicType& x);

      virtual 
      ~KeyCharacteristicType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Designator_type > Designator_;
      Criticality_optional Criticality_;
    };

    class LocationOnDrawingType: public ::xml_schema::type
    {
      public:
      // DrawingId
      //
      typedef ::xsd::qif2::QIFReferenceFullType DrawingId_type;
      typedef ::xsd::cxx::tree::optional< DrawingId_type > DrawingId_optional;
      typedef ::xsd::cxx::tree::traits< DrawingId_type, char > DrawingId_traits;

      const DrawingId_optional&
      DrawingId () const;

      DrawingId_optional&
      DrawingId ();

      void
      DrawingId (const DrawingId_type& x);

      void
      DrawingId (const DrawingId_optional& x);

      void
      DrawingId (::std::auto_ptr< DrawingId_type > p);

      // SheetNumber
      //
      typedef ::xml_schema::string SheetNumber_type;
      typedef ::xsd::cxx::tree::optional< SheetNumber_type > SheetNumber_optional;
      typedef ::xsd::cxx::tree::traits< SheetNumber_type, char > SheetNumber_traits;

      const SheetNumber_optional&
      SheetNumber () const;

      SheetNumber_optional&
      SheetNumber ();

      void
      SheetNumber (const SheetNumber_type& x);

      void
      SheetNumber (const SheetNumber_optional& x);

      void
      SheetNumber (::std::auto_ptr< SheetNumber_type > p);

      // DrawingZone
      //
      typedef ::xml_schema::string DrawingZone_type;
      typedef ::xsd::cxx::tree::optional< DrawingZone_type > DrawingZone_optional;
      typedef ::xsd::cxx::tree::traits< DrawingZone_type, char > DrawingZone_traits;

      const DrawingZone_optional&
      DrawingZone () const;

      DrawingZone_optional&
      DrawingZone ();

      void
      DrawingZone (const DrawingZone_type& x);

      void
      DrawingZone (const DrawingZone_optional& x);

      void
      DrawingZone (::std::auto_ptr< DrawingZone_type > p);

      // ModelId
      //
      typedef ::xsd::qif2::QIFReferenceFullType ModelId_type;
      typedef ::xsd::cxx::tree::optional< ModelId_type > ModelId_optional;
      typedef ::xsd::cxx::tree::traits< ModelId_type, char > ModelId_traits;

      const ModelId_optional&
      ModelId () const;

      ModelId_optional&
      ModelId ();

      void
      ModelId (const ModelId_type& x);

      void
      ModelId (const ModelId_optional& x);

      void
      ModelId (::std::auto_ptr< ModelId_type > p);

      // View
      //
      typedef ::xml_schema::string View_type;
      typedef ::xsd::cxx::tree::optional< View_type > View_optional;
      typedef ::xsd::cxx::tree::traits< View_type, char > View_traits;

      const View_optional&
      View () const;

      View_optional&
      View ();

      void
      View (const View_type& x);

      void
      View (const View_optional& x);

      void
      View (::std::auto_ptr< View_type > p);

      // ViewId
      //
      typedef ::xsd::qif2::QIFReferenceFullType ViewId_type;
      typedef ::xsd::cxx::tree::optional< ViewId_type > ViewId_optional;
      typedef ::xsd::cxx::tree::traits< ViewId_type, char > ViewId_traits;

      const ViewId_optional&
      ViewId () const;

      ViewId_optional&
      ViewId ();

      void
      ViewId (const ViewId_type& x);

      void
      ViewId (const ViewId_optional& x);

      void
      ViewId (::std::auto_ptr< ViewId_type > p);

      // Constructors.
      //
      LocationOnDrawingType ();

      LocationOnDrawingType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      LocationOnDrawingType (const LocationOnDrawingType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual LocationOnDrawingType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LocationOnDrawingType&
      operator= (const LocationOnDrawingType& x);

      virtual 
      ~LocationOnDrawingType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      DrawingId_optional DrawingId_;
      SheetNumber_optional SheetNumber_;
      DrawingZone_optional DrawingZone_;
      ModelId_optional ModelId_;
      View_optional View_;
      ViewId_optional ViewId_;
    };

    class CharacteristicDefinitionBaseType: public ::xsd::qif2::CharacteristicBaseType
    {
      public:
      // Name
      //
      typedef ::xml_schema::token Name_type;
      typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
      typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

      const Name_optional&
      Name () const;

      Name_optional&
      Name ();

      void
      Name (const Name_type& x);

      void
      Name (const Name_optional& x);

      void
      Name (::std::auto_ptr< Name_type > p);

      // KeyCharacteristic
      //
      typedef ::xsd::qif2::KeyCharacteristicType KeyCharacteristic_type;
      typedef ::xsd::cxx::tree::optional< KeyCharacteristic_type > KeyCharacteristic_optional;
      typedef ::xsd::cxx::tree::traits< KeyCharacteristic_type, char > KeyCharacteristic_traits;

      const KeyCharacteristic_optional&
      KeyCharacteristic () const;

      KeyCharacteristic_optional&
      KeyCharacteristic ();

      void
      KeyCharacteristic (const KeyCharacteristic_type& x);

      void
      KeyCharacteristic (const KeyCharacteristic_optional& x);

      void
      KeyCharacteristic (::std::auto_ptr< KeyCharacteristic_type > p);

      // FreeState
      //
      typedef ::xml_schema::boolean FreeState_type;
      typedef ::xsd::cxx::tree::optional< FreeState_type > FreeState_optional;
      typedef ::xsd::cxx::tree::traits< FreeState_type, char > FreeState_traits;

      const FreeState_optional&
      FreeState () const;

      FreeState_optional&
      FreeState ();

      void
      FreeState (const FreeState_type& x);

      void
      FreeState (const FreeState_optional& x);

      // StatisticalCharacteristic
      //
      typedef ::xml_schema::boolean StatisticalCharacteristic_type;
      typedef ::xsd::cxx::tree::optional< StatisticalCharacteristic_type > StatisticalCharacteristic_optional;
      typedef ::xsd::cxx::tree::traits< StatisticalCharacteristic_type, char > StatisticalCharacteristic_traits;

      const StatisticalCharacteristic_optional&
      StatisticalCharacteristic () const;

      StatisticalCharacteristic_optional&
      StatisticalCharacteristic ();

      void
      StatisticalCharacteristic (const StatisticalCharacteristic_type& x);

      void
      StatisticalCharacteristic (const StatisticalCharacteristic_optional& x);

      // CommonZone
      //
      typedef ::xml_schema::boolean CommonZone_type;
      typedef ::xsd::cxx::tree::optional< CommonZone_type > CommonZone_optional;
      typedef ::xsd::cxx::tree::traits< CommonZone_type, char > CommonZone_traits;

      const CommonZone_optional&
      CommonZone () const;

      CommonZone_optional&
      CommonZone ();

      void
      CommonZone (const CommonZone_type& x);

      void
      CommonZone (const CommonZone_optional& x);

      // MedianFeature
      //
      typedef ::xml_schema::boolean MedianFeature_type;
      typedef ::xsd::cxx::tree::optional< MedianFeature_type > MedianFeature_optional;
      typedef ::xsd::cxx::tree::traits< MedianFeature_type, char > MedianFeature_traits;

      const MedianFeature_optional&
      MedianFeature () const;

      MedianFeature_optional&
      MedianFeature ();

      void
      MedianFeature (const MedianFeature_type& x);

      void
      MedianFeature (const MedianFeature_optional& x);

      // EnvelopeRequirement
      //
      typedef ::xml_schema::boolean EnvelopeRequirement_type;
      typedef ::xsd::cxx::tree::optional< EnvelopeRequirement_type > EnvelopeRequirement_optional;
      typedef ::xsd::cxx::tree::traits< EnvelopeRequirement_type, char > EnvelopeRequirement_traits;

      const EnvelopeRequirement_optional&
      EnvelopeRequirement () const;

      EnvelopeRequirement_optional&
      EnvelopeRequirement ();

      void
      EnvelopeRequirement (const EnvelopeRequirement_type& x);

      void
      EnvelopeRequirement (const EnvelopeRequirement_optional& x);

      // UnitedFeature
      //
      typedef ::xml_schema::boolean UnitedFeature_type;
      typedef ::xsd::cxx::tree::optional< UnitedFeature_type > UnitedFeature_optional;
      typedef ::xsd::cxx::tree::traits< UnitedFeature_type, char > UnitedFeature_traits;

      const UnitedFeature_optional&
      UnitedFeature () const;

      UnitedFeature_optional&
      UnitedFeature ();

      void
      UnitedFeature (const UnitedFeature_type& x);

      void
      UnitedFeature (const UnitedFeature_optional& x);

      // SeparateZone
      //
      typedef ::xml_schema::boolean SeparateZone_type;
      typedef ::xsd::cxx::tree::optional< SeparateZone_type > SeparateZone_optional;
      typedef ::xsd::cxx::tree::traits< SeparateZone_type, char > SeparateZone_traits;

      const SeparateZone_optional&
      SeparateZone () const;

      SeparateZone_optional&
      SeparateZone ();

      void
      SeparateZone (const SeparateZone_type& x);

      void
      SeparateZone (const SeparateZone_optional& x);

      // Constructors.
      //
      CharacteristicDefinitionBaseType (const id_type&);

      CharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      CharacteristicDefinitionBaseType (const CharacteristicDefinitionBaseType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual CharacteristicDefinitionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicDefinitionBaseType&
      operator= (const CharacteristicDefinitionBaseType& x);

      virtual 
      ~CharacteristicDefinitionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Name_optional Name_;
      KeyCharacteristic_optional KeyCharacteristic_;
      FreeState_optional FreeState_;
      StatisticalCharacteristic_optional StatisticalCharacteristic_;
      CommonZone_optional CommonZone_;
      MedianFeature_optional MedianFeature_;
      EnvelopeRequirement_optional EnvelopeRequirement_;
      UnitedFeature_optional UnitedFeature_;
      SeparateZone_optional SeparateZone_;
    };

    class CharacteristicNominalBaseType: public ::xsd::qif2::CharacteristicBaseType
    {
      public:
      // CharacteristicDefinitionId
      //
      typedef ::xsd::qif2::QIFReferenceType CharacteristicDefinitionId_type;
      typedef ::xsd::cxx::tree::traits< CharacteristicDefinitionId_type, char > CharacteristicDefinitionId_traits;

      const CharacteristicDefinitionId_type&
      CharacteristicDefinitionId () const;

      CharacteristicDefinitionId_type&
      CharacteristicDefinitionId ();

      void
      CharacteristicDefinitionId (const CharacteristicDefinitionId_type& x);

      void
      CharacteristicDefinitionId (::std::auto_ptr< CharacteristicDefinitionId_type > p);
	  CharacteristicDefinitionBaseType * baseCharacteristicDefinitionType;

      // FeatureNominalIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType FeatureNominalIds_type;
      typedef ::xsd::cxx::tree::optional< FeatureNominalIds_type > FeatureNominalIds_optional;
      typedef ::xsd::cxx::tree::traits< FeatureNominalIds_type, char > FeatureNominalIds_traits;

      const FeatureNominalIds_optional&
      FeatureNominalIds () const;

      FeatureNominalIds_optional&
      FeatureNominalIds ();

      void
      FeatureNominalIds (const FeatureNominalIds_type& x);

      void
      FeatureNominalIds (const FeatureNominalIds_optional& x);

      void
      FeatureNominalIds (::std::auto_ptr< FeatureNominalIds_type > p);

      // EntityInternalIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType EntityInternalIds_type;
      typedef ::xsd::cxx::tree::optional< EntityInternalIds_type > EntityInternalIds_optional;
      typedef ::xsd::cxx::tree::traits< EntityInternalIds_type, char > EntityInternalIds_traits;

      const EntityInternalIds_optional&
      EntityInternalIds () const;

      EntityInternalIds_optional&
      EntityInternalIds ();

      void
      EntityInternalIds (const EntityInternalIds_type& x);

      void
      EntityInternalIds (const EntityInternalIds_optional& x);

      void
      EntityInternalIds (::std::auto_ptr< EntityInternalIds_type > p);

      // EntityExternalIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType EntityExternalIds_type;
      typedef ::xsd::cxx::tree::optional< EntityExternalIds_type > EntityExternalIds_optional;
      typedef ::xsd::cxx::tree::traits< EntityExternalIds_type, char > EntityExternalIds_traits;

      const EntityExternalIds_optional&
      EntityExternalIds () const;

      EntityExternalIds_optional&
      EntityExternalIds ();

      void
      EntityExternalIds (const EntityExternalIds_type& x);

      void
      EntityExternalIds (const EntityExternalIds_optional& x);

      void
      EntityExternalIds (::std::auto_ptr< EntityExternalIds_type > p);

      // Name
      //
      typedef ::xml_schema::token Name_type;
      typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
      typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

      const Name_optional&
      Name () const;

      Name_optional&
      Name ();

      void
      Name (const Name_type& x);

      void
      Name (const Name_optional& x);

      void
      Name (::std::auto_ptr< Name_type > p);

      // KeyCharacteristic
      //
      typedef ::xsd::qif2::KeyCharacteristicType KeyCharacteristic_type;
      typedef ::xsd::cxx::tree::optional< KeyCharacteristic_type > KeyCharacteristic_optional;
      typedef ::xsd::cxx::tree::traits< KeyCharacteristic_type, char > KeyCharacteristic_traits;

      const KeyCharacteristic_optional&
      KeyCharacteristic () const;

      KeyCharacteristic_optional&
      KeyCharacteristic ();

      void
      KeyCharacteristic (const KeyCharacteristic_type& x);

      void
      KeyCharacteristic (const KeyCharacteristic_optional& x);

      void
      KeyCharacteristic (::std::auto_ptr< KeyCharacteristic_type > p);

      // Constructors.
      //
      CharacteristicNominalBaseType (const id_type&,
                                     const CharacteristicDefinitionId_type&);

      CharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      CharacteristicNominalBaseType (const CharacteristicNominalBaseType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual CharacteristicNominalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicNominalBaseType&
      operator= (const CharacteristicNominalBaseType& x);

      virtual 
      ~CharacteristicNominalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< CharacteristicDefinitionId_type > CharacteristicDefinitionId_;
      FeatureNominalIds_optional FeatureNominalIds_;
      EntityInternalIds_optional EntityInternalIds_;
      EntityExternalIds_optional EntityExternalIds_;
      Name_optional Name_;
      KeyCharacteristic_optional KeyCharacteristic_;
    };

    class CharacteristicActualBaseType: public ::xsd::qif2::CharacteristicBaseType
    {
      public:
      // Status
      //
      typedef ::xsd::qif2::CharacteristicStatusType Status_type;
      typedef ::xsd::cxx::tree::traits< Status_type, char > Status_traits;

      const Status_type&
      Status () const;

      Status_type&
      Status ();

      void
      Status (const Status_type& x);

      void
      Status (::std::auto_ptr< Status_type > p);

      // CharacteristicItemId
      //
      typedef ::xsd::qif2::QIFReferenceFullType CharacteristicItemId_type;
      typedef ::xsd::cxx::tree::traits< CharacteristicItemId_type, char > CharacteristicItemId_traits;

      const CharacteristicItemId_type&
      CharacteristicItemId () const;

      CharacteristicItemId_type&
      CharacteristicItemId ();

      void
      CharacteristicItemId (const CharacteristicItemId_type& x);

      void
      CharacteristicItemId (::std::auto_ptr< CharacteristicItemId_type > p);

      // FeatureActualIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType FeatureActualIds_type;
      typedef ::xsd::cxx::tree::optional< FeatureActualIds_type > FeatureActualIds_optional;
      typedef ::xsd::cxx::tree::traits< FeatureActualIds_type, char > FeatureActualIds_traits;

      const FeatureActualIds_optional&
      FeatureActualIds () const;

      FeatureActualIds_optional&
      FeatureActualIds ();

      void
      FeatureActualIds (const FeatureActualIds_type& x);

      void
      FeatureActualIds (const FeatureActualIds_optional& x);

      void
      FeatureActualIds (::std::auto_ptr< FeatureActualIds_type > p);

      // ActualComponentId
      //
      typedef ::xsd::qif2::QIFReferenceFullType ActualComponentId_type;
      typedef ::xsd::cxx::tree::optional< ActualComponentId_type > ActualComponentId_optional;
      typedef ::xsd::cxx::tree::traits< ActualComponentId_type, char > ActualComponentId_traits;

      const ActualComponentId_optional&
      ActualComponentId () const;

      ActualComponentId_optional&
      ActualComponentId ();

      void
      ActualComponentId (const ActualComponentId_type& x);

      void
      ActualComponentId (const ActualComponentId_optional& x);

      void
      ActualComponentId (::std::auto_ptr< ActualComponentId_type > p);

      // MeasurementDeviceIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType MeasurementDeviceIds_type;
      typedef ::xsd::cxx::tree::optional< MeasurementDeviceIds_type > MeasurementDeviceIds_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementDeviceIds_type, char > MeasurementDeviceIds_traits;

      const MeasurementDeviceIds_optional&
      MeasurementDeviceIds () const;

      MeasurementDeviceIds_optional&
      MeasurementDeviceIds ();

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_type& x);

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_optional& x);

      void
      MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > p);

      // ManufacturingProcessId
      //
      typedef ::xsd::qif2::QIFReferenceFullType ManufacturingProcessId_type;
      typedef ::xsd::cxx::tree::optional< ManufacturingProcessId_type > ManufacturingProcessId_optional;
      typedef ::xsd::cxx::tree::traits< ManufacturingProcessId_type, char > ManufacturingProcessId_traits;

      const ManufacturingProcessId_optional&
      ManufacturingProcessId () const;

      ManufacturingProcessId_optional&
      ManufacturingProcessId ();

      void
      ManufacturingProcessId (const ManufacturingProcessId_type& x);

      void
      ManufacturingProcessId (const ManufacturingProcessId_optional& x);

      void
      ManufacturingProcessId (::std::auto_ptr< ManufacturingProcessId_type > p);

      // NotedEventIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType NotedEventIds_type;
      typedef ::xsd::cxx::tree::optional< NotedEventIds_type > NotedEventIds_optional;
      typedef ::xsd::cxx::tree::traits< NotedEventIds_type, char > NotedEventIds_traits;

      const NotedEventIds_optional&
      NotedEventIds () const;

      NotedEventIds_optional&
      NotedEventIds ();

      void
      NotedEventIds (const NotedEventIds_type& x);

      void
      NotedEventIds (const NotedEventIds_optional& x);

      void
      NotedEventIds (::std::auto_ptr< NotedEventIds_type > p);

      // NonConformanceDesignator
      //
      typedef ::xml_schema::token NonConformanceDesignator_type;
      typedef ::xsd::cxx::tree::optional< NonConformanceDesignator_type > NonConformanceDesignator_optional;
      typedef ::xsd::cxx::tree::traits< NonConformanceDesignator_type, char > NonConformanceDesignator_traits;

      const NonConformanceDesignator_optional&
      NonConformanceDesignator () const;

      NonConformanceDesignator_optional&
      NonConformanceDesignator ();

      void
      NonConformanceDesignator (const NonConformanceDesignator_type& x);

      void
      NonConformanceDesignator (const NonConformanceDesignator_optional& x);

      void
      NonConformanceDesignator (::std::auto_ptr< NonConformanceDesignator_type > p);

      // Constructors.
      //
      CharacteristicActualBaseType (const id_type&,
                                    const Status_type&,
                                    const CharacteristicItemId_type&);

      CharacteristicActualBaseType (const id_type&,
                                    ::std::auto_ptr< Status_type >,
                                    ::std::auto_ptr< CharacteristicItemId_type >);

      CharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      CharacteristicActualBaseType (const CharacteristicActualBaseType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual CharacteristicActualBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicActualBaseType&
      operator= (const CharacteristicActualBaseType& x);

      virtual 
      ~CharacteristicActualBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Status_type > Status_;
      ::xsd::cxx::tree::one< CharacteristicItemId_type > CharacteristicItemId_;
      FeatureActualIds_optional FeatureActualIds_;
      ActualComponentId_optional ActualComponentId_;
      MeasurementDeviceIds_optional MeasurementDeviceIds_;
      ManufacturingProcessId_optional ManufacturingProcessId_;
      NotedEventIds_optional NotedEventIds_;
      NonConformanceDesignator_optional NonConformanceDesignator_;
    };

    class GeometricCharacteristicDefinitionBaseType: public ::xsd::qif2::CharacteristicDefinitionBaseType
    {
      public:
      // DirectionFeature
      //
      typedef ::xsd::qif2::DirectionFeatureType DirectionFeature_type;
      typedef ::xsd::cxx::tree::optional< DirectionFeature_type > DirectionFeature_optional;
      typedef ::xsd::cxx::tree::traits< DirectionFeature_type, char > DirectionFeature_traits;

      const DirectionFeature_optional&
      DirectionFeature () const;

      DirectionFeature_optional&
      DirectionFeature ();

      void
      DirectionFeature (const DirectionFeature_type& x);

      void
      DirectionFeature (const DirectionFeature_optional& x);

      void
      DirectionFeature (::std::auto_ptr< DirectionFeature_type > p);

      // CollectionPlane
      //
      typedef ::xsd::qif2::CollectionPlaneType CollectionPlane_type;
      typedef ::xsd::cxx::tree::optional< CollectionPlane_type > CollectionPlane_optional;
      typedef ::xsd::cxx::tree::traits< CollectionPlane_type, char > CollectionPlane_traits;

      const CollectionPlane_optional&
      CollectionPlane () const;

      CollectionPlane_optional&
      CollectionPlane ();

      void
      CollectionPlane (const CollectionPlane_type& x);

      void
      CollectionPlane (const CollectionPlane_optional& x);

      void
      CollectionPlane (::std::auto_ptr< CollectionPlane_type > p);

      // IntersectionPlane
      //
      typedef ::xsd::qif2::IntersectionPlaneType IntersectionPlane_type;
      typedef ::xsd::cxx::tree::optional< IntersectionPlane_type > IntersectionPlane_optional;
      typedef ::xsd::cxx::tree::traits< IntersectionPlane_type, char > IntersectionPlane_traits;

      const IntersectionPlane_optional&
      IntersectionPlane () const;

      IntersectionPlane_optional&
      IntersectionPlane ();

      void
      IntersectionPlane (const IntersectionPlane_type& x);

      void
      IntersectionPlane (const IntersectionPlane_optional& x);

      void
      IntersectionPlane (::std::auto_ptr< IntersectionPlane_type > p);

      // OrientationPlane
      //
      typedef ::xsd::qif2::OrientationPlaneType OrientationPlane_type;
      typedef ::xsd::cxx::tree::optional< OrientationPlane_type > OrientationPlane_optional;
      typedef ::xsd::cxx::tree::traits< OrientationPlane_type, char > OrientationPlane_traits;

      const OrientationPlane_optional&
      OrientationPlane () const;

      OrientationPlane_optional&
      OrientationPlane ();

      void
      OrientationPlane (const OrientationPlane_type& x);

      void
      OrientationPlane (const OrientationPlane_optional& x);

      void
      OrientationPlane (::std::auto_ptr< OrientationPlane_type > p);

      // Constructors.
      //
      GeometricCharacteristicDefinitionBaseType (const id_type&);

      GeometricCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      GeometricCharacteristicDefinitionBaseType (const GeometricCharacteristicDefinitionBaseType& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      virtual GeometricCharacteristicDefinitionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      GeometricCharacteristicDefinitionBaseType&
      operator= (const GeometricCharacteristicDefinitionBaseType& x);

      virtual 
      ~GeometricCharacteristicDefinitionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      DirectionFeature_optional DirectionFeature_;
      CollectionPlane_optional CollectionPlane_;
      IntersectionPlane_optional IntersectionPlane_;
      OrientationPlane_optional OrientationPlane_;
    };

    class GeometricCharacteristicNominalBaseType: public ::xsd::qif2::CharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      GeometricCharacteristicNominalBaseType (const id_type&,
                                              const CharacteristicDefinitionId_type&);

      GeometricCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      GeometricCharacteristicNominalBaseType (const GeometricCharacteristicNominalBaseType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual GeometricCharacteristicNominalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~GeometricCharacteristicNominalBaseType ();
    };

    class GeometricCharacteristicActualBaseType: public ::xsd::qif2::CharacteristicActualBaseType
    {
      public:
      // Value
      //
      typedef ::xsd::qif2::ActualLinearValueType Value_type;
      typedef ::xsd::cxx::tree::optional< Value_type > Value_optional;
      typedef ::xsd::cxx::tree::traits< Value_type, char > Value_traits;

      const Value_optional&
      Value () const;

      Value_optional&
      Value ();

      void
      Value (const Value_type& x);

      void
      Value (const Value_optional& x);

      void
      Value (::std::auto_ptr< Value_type > p);

      // MaxValue
      //
      typedef ::xsd::qif2::ActualLinearValueType MaxValue_type;
      typedef ::xsd::cxx::tree::optional< MaxValue_type > MaxValue_optional;
      typedef ::xsd::cxx::tree::traits< MaxValue_type, char > MaxValue_traits;

      const MaxValue_optional&
      MaxValue () const;

      MaxValue_optional&
      MaxValue ();

      void
      MaxValue (const MaxValue_type& x);

      void
      MaxValue (const MaxValue_optional& x);

      void
      MaxValue (::std::auto_ptr< MaxValue_type > p);

      // MinValue
      //
      typedef ::xsd::qif2::ActualLinearValueType MinValue_type;
      typedef ::xsd::cxx::tree::optional< MinValue_type > MinValue_optional;
      typedef ::xsd::cxx::tree::traits< MinValue_type, char > MinValue_traits;

      const MinValue_optional&
      MinValue () const;

      MinValue_optional&
      MinValue ();

      void
      MinValue (const MinValue_type& x);

      void
      MinValue (const MinValue_optional& x);

      void
      MinValue (::std::auto_ptr< MinValue_type > p);

      // Constructors.
      //
      GeometricCharacteristicActualBaseType (const id_type&,
                                             const Status_type&,
                                             const CharacteristicItemId_type&);

      GeometricCharacteristicActualBaseType (const id_type&,
                                             ::std::auto_ptr< Status_type >,
                                             ::std::auto_ptr< CharacteristicItemId_type >);

      GeometricCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      GeometricCharacteristicActualBaseType (const GeometricCharacteristicActualBaseType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual GeometricCharacteristicActualBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      GeometricCharacteristicActualBaseType&
      operator= (const GeometricCharacteristicActualBaseType& x);

      virtual 
      ~GeometricCharacteristicActualBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Value_optional Value_;
      MaxValue_optional MaxValue_;
      MinValue_optional MinValue_;
    };

    class GeometricCharacteristicItemBaseType: public ::xsd::qif2::CharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      GeometricCharacteristicItemBaseType (const id_type&,
                                           const Name_type&,
                                           const CharacteristicNominalId_type&);

      GeometricCharacteristicItemBaseType (const id_type&,
                                           const Name_type&,
                                           ::std::auto_ptr< CharacteristicNominalId_type >);

      GeometricCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      GeometricCharacteristicItemBaseType (const GeometricCharacteristicItemBaseType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual GeometricCharacteristicItemBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~GeometricCharacteristicItemBaseType ();
    };

    class DimensionalCharacteristicDefinitionBaseType: public ::xsd::qif2::CharacteristicDefinitionBaseType
    {
      public:
      // DimensionType
      //
      typedef ::xsd::qif2::DimensionModifierEnumType DimensionType_type;
      typedef ::xsd::cxx::tree::optional< DimensionType_type > DimensionType_optional;
      typedef ::xsd::cxx::tree::traits< DimensionType_type, char > DimensionType_traits;

      const DimensionType_optional&
      DimensionType () const;

      DimensionType_optional&
      DimensionType ();

      void
      DimensionType (const DimensionType_type& x);

      void
      DimensionType (const DimensionType_optional& x);

      void
      DimensionType (::std::auto_ptr< DimensionType_type > p);

      // Constructors.
      //
      DimensionalCharacteristicDefinitionBaseType (const id_type&);

      DimensionalCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      DimensionalCharacteristicDefinitionBaseType (const DimensionalCharacteristicDefinitionBaseType& x,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      virtual DimensionalCharacteristicDefinitionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      DimensionalCharacteristicDefinitionBaseType&
      operator= (const DimensionalCharacteristicDefinitionBaseType& x);

      virtual 
      ~DimensionalCharacteristicDefinitionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      DimensionType_optional DimensionType_;
    };

    class DimensionalCharacteristicNominalBaseType: public ::xsd::qif2::CharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      DimensionalCharacteristicNominalBaseType (const id_type&,
                                                const CharacteristicDefinitionId_type&);

      DimensionalCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      DimensionalCharacteristicNominalBaseType (const DimensionalCharacteristicNominalBaseType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual DimensionalCharacteristicNominalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~DimensionalCharacteristicNominalBaseType ();
    };

    class DimensionalCharacteristicActualBaseType: public ::xsd::qif2::CharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      DimensionalCharacteristicActualBaseType (const id_type&,
                                               const Status_type&,
                                               const CharacteristicItemId_type&);

      DimensionalCharacteristicActualBaseType (const id_type&,
                                               ::std::auto_ptr< Status_type >,
                                               ::std::auto_ptr< CharacteristicItemId_type >);

      DimensionalCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      DimensionalCharacteristicActualBaseType (const DimensionalCharacteristicActualBaseType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual DimensionalCharacteristicActualBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~DimensionalCharacteristicActualBaseType ();
    };

    class DimensionalCharacteristicItemBaseType: public ::xsd::qif2::CharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      DimensionalCharacteristicItemBaseType (const id_type&,
                                             const Name_type&,
                                             const CharacteristicNominalId_type&);

      DimensionalCharacteristicItemBaseType (const id_type&,
                                             const Name_type&,
                                             ::std::auto_ptr< CharacteristicNominalId_type >);

      DimensionalCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      DimensionalCharacteristicItemBaseType (const DimensionalCharacteristicItemBaseType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual DimensionalCharacteristicItemBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~DimensionalCharacteristicItemBaseType ();
    };

    class CoordinateCharacteristicDefinitionBaseType: public ::xsd::qif2::DimensionalCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      CoordinateCharacteristicDefinitionBaseType (const id_type&);

      CoordinateCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      CoordinateCharacteristicDefinitionBaseType (const CoordinateCharacteristicDefinitionBaseType& x,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      virtual CoordinateCharacteristicDefinitionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CoordinateCharacteristicDefinitionBaseType ();
    };

    class CoordinateCharacteristicNominalBaseType: public ::xsd::qif2::DimensionalCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      CoordinateCharacteristicNominalBaseType (const id_type&,
                                               const CharacteristicDefinitionId_type&);

      CoordinateCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      CoordinateCharacteristicNominalBaseType (const CoordinateCharacteristicNominalBaseType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual CoordinateCharacteristicNominalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CoordinateCharacteristicNominalBaseType ();
    };

    class CoordinateCharacteristicActualBaseType: public ::xsd::qif2::DimensionalCharacteristicActualBaseType
    {
      public:
      // TypeOfCoordinates
      //
      typedef ::xsd::qif2::TypeOfCoordinatesType TypeOfCoordinates_type;
      typedef ::xsd::cxx::tree::traits< TypeOfCoordinates_type, char > TypeOfCoordinates_traits;

      const TypeOfCoordinates_type&
      TypeOfCoordinates () const;

      TypeOfCoordinates_type&
      TypeOfCoordinates ();

      void
      TypeOfCoordinates (const TypeOfCoordinates_type& x);

      void
      TypeOfCoordinates (::std::auto_ptr< TypeOfCoordinates_type > p);

      // Constructors.
      //
      CoordinateCharacteristicActualBaseType (const id_type&,
                                              const Status_type&,
                                              const CharacteristicItemId_type&,
                                              const TypeOfCoordinates_type&);

      CoordinateCharacteristicActualBaseType (const id_type&,
                                              ::std::auto_ptr< Status_type >,
                                              ::std::auto_ptr< CharacteristicItemId_type >,
                                              ::std::auto_ptr< TypeOfCoordinates_type >);

      CoordinateCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      CoordinateCharacteristicActualBaseType (const CoordinateCharacteristicActualBaseType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual CoordinateCharacteristicActualBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CoordinateCharacteristicActualBaseType&
      operator= (const CoordinateCharacteristicActualBaseType& x);

      virtual 
      ~CoordinateCharacteristicActualBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< TypeOfCoordinates_type > TypeOfCoordinates_;
    };

    class CoordinateCharacteristicItemBaseType: public ::xsd::qif2::DimensionalCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      CoordinateCharacteristicItemBaseType (const id_type&,
                                            const Name_type&,
                                            const CharacteristicNominalId_type&);

      CoordinateCharacteristicItemBaseType (const id_type&,
                                            const Name_type&,
                                            ::std::auto_ptr< CharacteristicNominalId_type >);

      CoordinateCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      CoordinateCharacteristicItemBaseType (const CoordinateCharacteristicItemBaseType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual CoordinateCharacteristicItemBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CoordinateCharacteristicItemBaseType ();
    };

    class UserDefinedAttributeCharacteristicDefinitionType: public ::xsd::qif2::CharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedAttributeCharacteristicDefinitionType (const id_type&);

      UserDefinedAttributeCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                        ::xml_schema::flags f = 0,
                                                        ::xml_schema::container* c = 0);

      UserDefinedAttributeCharacteristicDefinitionType (const UserDefinedAttributeCharacteristicDefinitionType& x,
                                                        ::xml_schema::flags f = 0,
                                                        ::xml_schema::container* c = 0);

      virtual UserDefinedAttributeCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedAttributeCharacteristicDefinitionType ();
    };

    class UserDefinedAttributeCharacteristicNominalType: public ::xsd::qif2::CharacteristicNominalBaseType
    {
      public:
      // PassValues
      //
      typedef ::xsd::qif2::StringValuesType PassValues_type;
      typedef ::xsd::cxx::tree::traits< PassValues_type, char > PassValues_traits;

      const PassValues_type&
      PassValues () const;

      PassValues_type&
      PassValues ();

      void
      PassValues (const PassValues_type& x);

      void
      PassValues (::std::auto_ptr< PassValues_type > p);

      // FailValues
      //
      typedef ::xsd::qif2::StringValuesType FailValues_type;
      typedef ::xsd::cxx::tree::traits< FailValues_type, char > FailValues_traits;

      const FailValues_type&
      FailValues () const;

      FailValues_type&
      FailValues ();

      void
      FailValues (const FailValues_type& x);

      void
      FailValues (::std::auto_ptr< FailValues_type > p);

      // Constructors.
      //
      UserDefinedAttributeCharacteristicNominalType (const id_type&,
                                                     const CharacteristicDefinitionId_type&,
                                                     const PassValues_type&,
                                                     const FailValues_type&);

      UserDefinedAttributeCharacteristicNominalType (const id_type&,
                                                     const CharacteristicDefinitionId_type&,
                                                     ::std::auto_ptr< PassValues_type >,
                                                     ::std::auto_ptr< FailValues_type >);

      UserDefinedAttributeCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

      UserDefinedAttributeCharacteristicNominalType (const UserDefinedAttributeCharacteristicNominalType& x,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

      virtual UserDefinedAttributeCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedAttributeCharacteristicNominalType&
      operator= (const UserDefinedAttributeCharacteristicNominalType& x);

      virtual 
      ~UserDefinedAttributeCharacteristicNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< PassValues_type > PassValues_;
      ::xsd::cxx::tree::one< FailValues_type > FailValues_;
    };

    class UserDefinedAttributeCharacteristicActualType: public ::xsd::qif2::CharacteristicActualBaseType
    {
      public:
      // Value
      //
      typedef ::xml_schema::string Value_type;
      typedef ::xsd::cxx::tree::optional< Value_type > Value_optional;
      typedef ::xsd::cxx::tree::traits< Value_type, char > Value_traits;

      const Value_optional&
      Value () const;

      Value_optional&
      Value ();

      void
      Value (const Value_type& x);

      void
      Value (const Value_optional& x);

      void
      Value (::std::auto_ptr< Value_type > p);

      // Constructors.
      //
      UserDefinedAttributeCharacteristicActualType (const id_type&,
                                                    const Status_type&,
                                                    const CharacteristicItemId_type&);

      UserDefinedAttributeCharacteristicActualType (const id_type&,
                                                    ::std::auto_ptr< Status_type >,
                                                    ::std::auto_ptr< CharacteristicItemId_type >);

      UserDefinedAttributeCharacteristicActualType (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

      UserDefinedAttributeCharacteristicActualType (const UserDefinedAttributeCharacteristicActualType& x,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

      virtual UserDefinedAttributeCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedAttributeCharacteristicActualType&
      operator= (const UserDefinedAttributeCharacteristicActualType& x);

      virtual 
      ~UserDefinedAttributeCharacteristicActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Value_optional Value_;
    };

    class UserDefinedAttributeCharacteristicItemType: public ::xsd::qif2::CharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedAttributeCharacteristicItemType (const id_type&,
                                                  const Name_type&,
                                                  const CharacteristicNominalId_type&);

      UserDefinedAttributeCharacteristicItemType (const id_type&,
                                                  const Name_type&,
                                                  ::std::auto_ptr< CharacteristicNominalId_type >);

      UserDefinedAttributeCharacteristicItemType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      UserDefinedAttributeCharacteristicItemType (const UserDefinedAttributeCharacteristicItemType& x,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      virtual UserDefinedAttributeCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedAttributeCharacteristicItemType ();
    };

    class StringValuesType: public ::xml_schema::type
    {
      public:
      // StringValue
      //
      typedef ::xml_schema::string StringValue_type;
      typedef ::xsd::cxx::tree::sequence< StringValue_type > StringValue_sequence;
      typedef StringValue_sequence::iterator StringValue_iterator;
      typedef StringValue_sequence::const_iterator StringValue_const_iterator;
      typedef ::xsd::cxx::tree::traits< StringValue_type, char > StringValue_traits;

      const StringValue_sequence&
      StringValue () const;

      StringValue_sequence&
      StringValue ();

      void
      StringValue (const StringValue_sequence& s);

      // Constructors.
      //
      StringValuesType ();

      StringValuesType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      StringValuesType (const StringValuesType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual StringValuesType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StringValuesType&
      operator= (const StringValuesType& x);

      virtual 
      ~StringValuesType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      StringValue_sequence StringValue_;
    };

    class LinearCharacteristicDefinitionBaseType: public ::xsd::qif2::DimensionalCharacteristicDefinitionBaseType
    {
      public:
      // Tolerance
      //
      typedef ::xsd::qif2::LinearToleranceType Tolerance_type;
      typedef ::xsd::cxx::tree::optional< Tolerance_type > Tolerance_optional;
      typedef ::xsd::cxx::tree::traits< Tolerance_type, char > Tolerance_traits;

      const Tolerance_optional&
      Tolerance () const;

      Tolerance_optional&
      Tolerance ();

      void
      Tolerance (const Tolerance_type& x);

      void
      Tolerance (const Tolerance_optional& x);

      void
      Tolerance (::std::auto_ptr< Tolerance_type > p);

      // NonTolerance
      //
      typedef ::xsd::qif2::NonToleranceEnumType NonTolerance_type;
      typedef ::xsd::cxx::tree::optional< NonTolerance_type > NonTolerance_optional;
      typedef ::xsd::cxx::tree::traits< NonTolerance_type, char > NonTolerance_traits;

      const NonTolerance_optional&
      NonTolerance () const;

      NonTolerance_optional&
      NonTolerance ();

      void
      NonTolerance (const NonTolerance_type& x);

      void
      NonTolerance (const NonTolerance_optional& x);

      void
      NonTolerance (::std::auto_ptr< NonTolerance_type > p);

      // Constructors.
      //
      LinearCharacteristicDefinitionBaseType (const id_type&);

      LinearCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      LinearCharacteristicDefinitionBaseType (const LinearCharacteristicDefinitionBaseType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual LinearCharacteristicDefinitionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LinearCharacteristicDefinitionBaseType&
      operator= (const LinearCharacteristicDefinitionBaseType& x);

      virtual 
      ~LinearCharacteristicDefinitionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Tolerance_optional Tolerance_;
      NonTolerance_optional NonTolerance_;
    };

    class UserDefinedLinearCharacteristicDefinitionType: public ::xsd::qif2::LinearCharacteristicDefinitionBaseType
    {
      public:
      // WhatToMeasure
      //
      typedef ::xml_schema::string WhatToMeasure_type;
      typedef ::xsd::cxx::tree::traits< WhatToMeasure_type, char > WhatToMeasure_traits;

      const WhatToMeasure_type&
      WhatToMeasure () const;

      WhatToMeasure_type&
      WhatToMeasure ();

      void
      WhatToMeasure (const WhatToMeasure_type& x);

      void
      WhatToMeasure (::std::auto_ptr< WhatToMeasure_type > p);

      // Constructors.
      //
      UserDefinedLinearCharacteristicDefinitionType (const id_type&,
                                                     const WhatToMeasure_type&);

      UserDefinedLinearCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

      UserDefinedLinearCharacteristicDefinitionType (const UserDefinedLinearCharacteristicDefinitionType& x,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

      virtual UserDefinedLinearCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedLinearCharacteristicDefinitionType&
      operator= (const UserDefinedLinearCharacteristicDefinitionType& x);

      virtual 
      ~UserDefinedLinearCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< WhatToMeasure_type > WhatToMeasure_;
    };

    class LinearCharacteristicNominalBaseType: public ::xsd::qif2::DimensionalCharacteristicNominalBaseType
    {
      public:
      // TargetValue
      //
      typedef ::xsd::qif2::LinearValueType TargetValue_type;
      typedef ::xsd::cxx::tree::optional< TargetValue_type > TargetValue_optional;
      typedef ::xsd::cxx::tree::traits< TargetValue_type, char > TargetValue_traits;

      const TargetValue_optional&
      TargetValue () const;

      TargetValue_optional&
      TargetValue ();

      void
      TargetValue (const TargetValue_type& x);

      void
      TargetValue (const TargetValue_optional& x);

      void
      TargetValue (::std::auto_ptr< TargetValue_type > p);

      // Constructors.
      //
      LinearCharacteristicNominalBaseType (const id_type&,
                                           const CharacteristicDefinitionId_type&);

      LinearCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      LinearCharacteristicNominalBaseType (const LinearCharacteristicNominalBaseType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual LinearCharacteristicNominalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LinearCharacteristicNominalBaseType&
      operator= (const LinearCharacteristicNominalBaseType& x);

      virtual 
      ~LinearCharacteristicNominalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      TargetValue_optional TargetValue_;
    };

    class UserDefinedLinearCharacteristicNominalType: public ::xsd::qif2::LinearCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedLinearCharacteristicNominalType (const id_type&,
                                                  const CharacteristicDefinitionId_type&);

      UserDefinedLinearCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      UserDefinedLinearCharacteristicNominalType (const UserDefinedLinearCharacteristicNominalType& x,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      virtual UserDefinedLinearCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedLinearCharacteristicNominalType ();
    };

    class LinearCharacteristicActualBaseType: public ::xsd::qif2::DimensionalCharacteristicActualBaseType
    {
      public:
      // Value
      //
      typedef ::xsd::qif2::ActualLinearValueType Value_type;
      typedef ::xsd::cxx::tree::optional< Value_type > Value_optional;
      typedef ::xsd::cxx::tree::traits< Value_type, char > Value_traits;

      const Value_optional&
      Value () const;

      Value_optional&
      Value ();

      void
      Value (const Value_type& x);

      void
      Value (const Value_optional& x);

      void
      Value (::std::auto_ptr< Value_type > p);

      // MaxValue
      //
      typedef ::xsd::qif2::ActualLinearValueType MaxValue_type;
      typedef ::xsd::cxx::tree::optional< MaxValue_type > MaxValue_optional;
      typedef ::xsd::cxx::tree::traits< MaxValue_type, char > MaxValue_traits;

      const MaxValue_optional&
      MaxValue () const;

      MaxValue_optional&
      MaxValue ();

      void
      MaxValue (const MaxValue_type& x);

      void
      MaxValue (const MaxValue_optional& x);

      void
      MaxValue (::std::auto_ptr< MaxValue_type > p);

      // MinValue
      //
      typedef ::xsd::qif2::ActualLinearValueType MinValue_type;
      typedef ::xsd::cxx::tree::optional< MinValue_type > MinValue_optional;
      typedef ::xsd::cxx::tree::traits< MinValue_type, char > MinValue_traits;

      const MinValue_optional&
      MinValue () const;

      MinValue_optional&
      MinValue ();

      void
      MinValue (const MinValue_type& x);

      void
      MinValue (const MinValue_optional& x);

      void
      MinValue (::std::auto_ptr< MinValue_type > p);

      // Constructors.
      //
      LinearCharacteristicActualBaseType (const id_type&,
                                          const Status_type&,
                                          const CharacteristicItemId_type&);

      LinearCharacteristicActualBaseType (const id_type&,
                                          ::std::auto_ptr< Status_type >,
                                          ::std::auto_ptr< CharacteristicItemId_type >);

      LinearCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      LinearCharacteristicActualBaseType (const LinearCharacteristicActualBaseType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual LinearCharacteristicActualBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LinearCharacteristicActualBaseType&
      operator= (const LinearCharacteristicActualBaseType& x);

      virtual 
      ~LinearCharacteristicActualBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Value_optional Value_;
      MaxValue_optional MaxValue_;
      MinValue_optional MinValue_;
    };

    class UserDefinedLinearCharacteristicActualType: public ::xsd::qif2::LinearCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedLinearCharacteristicActualType (const id_type&,
                                                 const Status_type&,
                                                 const CharacteristicItemId_type&);

      UserDefinedLinearCharacteristicActualType (const id_type&,
                                                 ::std::auto_ptr< Status_type >,
                                                 ::std::auto_ptr< CharacteristicItemId_type >);

      UserDefinedLinearCharacteristicActualType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      UserDefinedLinearCharacteristicActualType (const UserDefinedLinearCharacteristicActualType& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      virtual UserDefinedLinearCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedLinearCharacteristicActualType ();
    };

    class LinearCharacteristicItemBaseType: public ::xsd::qif2::DimensionalCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      LinearCharacteristicItemBaseType (const id_type&,
                                        const Name_type&,
                                        const CharacteristicNominalId_type&);

      LinearCharacteristicItemBaseType (const id_type&,
                                        const Name_type&,
                                        ::std::auto_ptr< CharacteristicNominalId_type >);

      LinearCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      LinearCharacteristicItemBaseType (const LinearCharacteristicItemBaseType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual LinearCharacteristicItemBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~LinearCharacteristicItemBaseType ();
    };

    class UserDefinedLinearCharacteristicItemType: public ::xsd::qif2::LinearCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedLinearCharacteristicItemType (const id_type&,
                                               const Name_type&,
                                               const CharacteristicNominalId_type&);

      UserDefinedLinearCharacteristicItemType (const id_type&,
                                               const Name_type&,
                                               ::std::auto_ptr< CharacteristicNominalId_type >);

      UserDefinedLinearCharacteristicItemType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      UserDefinedLinearCharacteristicItemType (const UserDefinedLinearCharacteristicItemType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual UserDefinedLinearCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedLinearCharacteristicItemType ();
    };

    class AngularCharacteristicDefinitionBaseType: public ::xsd::qif2::DimensionalCharacteristicDefinitionBaseType
    {
      public:
      // Tolerance
      //
      typedef ::xsd::qif2::AngularToleranceType Tolerance_type;
      typedef ::xsd::cxx::tree::optional< Tolerance_type > Tolerance_optional;
      typedef ::xsd::cxx::tree::traits< Tolerance_type, char > Tolerance_traits;

      const Tolerance_optional&
      Tolerance () const;

      Tolerance_optional&
      Tolerance ();

      void
      Tolerance (const Tolerance_type& x);

      void
      Tolerance (const Tolerance_optional& x);

      void
      Tolerance (::std::auto_ptr< Tolerance_type > p);

      // NonTolerance
      //
      typedef ::xsd::qif2::NonToleranceEnumType NonTolerance_type;
      typedef ::xsd::cxx::tree::optional< NonTolerance_type > NonTolerance_optional;
      typedef ::xsd::cxx::tree::traits< NonTolerance_type, char > NonTolerance_traits;

      const NonTolerance_optional&
      NonTolerance () const;

      NonTolerance_optional&
      NonTolerance ();

      void
      NonTolerance (const NonTolerance_type& x);

      void
      NonTolerance (const NonTolerance_optional& x);

      void
      NonTolerance (::std::auto_ptr< NonTolerance_type > p);

      // Constructors.
      //
      AngularCharacteristicDefinitionBaseType (const id_type&);

      AngularCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      AngularCharacteristicDefinitionBaseType (const AngularCharacteristicDefinitionBaseType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual AngularCharacteristicDefinitionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AngularCharacteristicDefinitionBaseType&
      operator= (const AngularCharacteristicDefinitionBaseType& x);

      virtual 
      ~AngularCharacteristicDefinitionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Tolerance_optional Tolerance_;
      NonTolerance_optional NonTolerance_;
    };

    class UserDefinedAngularCharacteristicDefinitionType: public ::xsd::qif2::AngularCharacteristicDefinitionBaseType
    {
      public:
      // WhatToMeasure
      //
      typedef ::xml_schema::string WhatToMeasure_type;
      typedef ::xsd::cxx::tree::traits< WhatToMeasure_type, char > WhatToMeasure_traits;

      const WhatToMeasure_type&
      WhatToMeasure () const;

      WhatToMeasure_type&
      WhatToMeasure ();

      void
      WhatToMeasure (const WhatToMeasure_type& x);

      void
      WhatToMeasure (::std::auto_ptr< WhatToMeasure_type > p);

      // Constructors.
      //
      UserDefinedAngularCharacteristicDefinitionType (const id_type&,
                                                      const WhatToMeasure_type&);

      UserDefinedAngularCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

      UserDefinedAngularCharacteristicDefinitionType (const UserDefinedAngularCharacteristicDefinitionType& x,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

      virtual UserDefinedAngularCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedAngularCharacteristicDefinitionType&
      operator= (const UserDefinedAngularCharacteristicDefinitionType& x);

      virtual 
      ~UserDefinedAngularCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< WhatToMeasure_type > WhatToMeasure_;
    };

    class AngularCharacteristicNominalBaseType: public ::xsd::qif2::DimensionalCharacteristicNominalBaseType
    {
      public:
      // TargetValue
      //
      typedef ::xsd::qif2::AngularValueType TargetValue_type;
      typedef ::xsd::cxx::tree::optional< TargetValue_type > TargetValue_optional;
      typedef ::xsd::cxx::tree::traits< TargetValue_type, char > TargetValue_traits;

      const TargetValue_optional&
      TargetValue () const;

      TargetValue_optional&
      TargetValue ();

      void
      TargetValue (const TargetValue_type& x);

      void
      TargetValue (const TargetValue_optional& x);

      void
      TargetValue (::std::auto_ptr< TargetValue_type > p);

      // Constructors.
      //
      AngularCharacteristicNominalBaseType (const id_type&,
                                            const CharacteristicDefinitionId_type&);

      AngularCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      AngularCharacteristicNominalBaseType (const AngularCharacteristicNominalBaseType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual AngularCharacteristicNominalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AngularCharacteristicNominalBaseType&
      operator= (const AngularCharacteristicNominalBaseType& x);

      virtual 
      ~AngularCharacteristicNominalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      TargetValue_optional TargetValue_;
    };

    class UserDefinedAngularCharacteristicNominalType: public ::xsd::qif2::AngularCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedAngularCharacteristicNominalType (const id_type&,
                                                   const CharacteristicDefinitionId_type&);

      UserDefinedAngularCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      UserDefinedAngularCharacteristicNominalType (const UserDefinedAngularCharacteristicNominalType& x,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      virtual UserDefinedAngularCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedAngularCharacteristicNominalType ();
    };

    class AngularCharacteristicActualBaseType: public ::xsd::qif2::DimensionalCharacteristicActualBaseType
    {
      public:
      // Value
      //
      typedef ::xsd::qif2::ActualAngularValueType Value_type;
      typedef ::xsd::cxx::tree::optional< Value_type > Value_optional;
      typedef ::xsd::cxx::tree::traits< Value_type, char > Value_traits;

      const Value_optional&
      Value () const;

      Value_optional&
      Value ();

      void
      Value (const Value_type& x);

      void
      Value (const Value_optional& x);

      void
      Value (::std::auto_ptr< Value_type > p);

      // MaxValue
      //
      typedef ::xsd::qif2::ActualAngularValueType MaxValue_type;
      typedef ::xsd::cxx::tree::optional< MaxValue_type > MaxValue_optional;
      typedef ::xsd::cxx::tree::traits< MaxValue_type, char > MaxValue_traits;

      const MaxValue_optional&
      MaxValue () const;

      MaxValue_optional&
      MaxValue ();

      void
      MaxValue (const MaxValue_type& x);

      void
      MaxValue (const MaxValue_optional& x);

      void
      MaxValue (::std::auto_ptr< MaxValue_type > p);

      // MinValue
      //
      typedef ::xsd::qif2::ActualAngularValueType MinValue_type;
      typedef ::xsd::cxx::tree::optional< MinValue_type > MinValue_optional;
      typedef ::xsd::cxx::tree::traits< MinValue_type, char > MinValue_traits;

      const MinValue_optional&
      MinValue () const;

      MinValue_optional&
      MinValue ();

      void
      MinValue (const MinValue_type& x);

      void
      MinValue (const MinValue_optional& x);

      void
      MinValue (::std::auto_ptr< MinValue_type > p);

      // Constructors.
      //
      AngularCharacteristicActualBaseType (const id_type&,
                                           const Status_type&,
                                           const CharacteristicItemId_type&);

      AngularCharacteristicActualBaseType (const id_type&,
                                           ::std::auto_ptr< Status_type >,
                                           ::std::auto_ptr< CharacteristicItemId_type >);

      AngularCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      AngularCharacteristicActualBaseType (const AngularCharacteristicActualBaseType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual AngularCharacteristicActualBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AngularCharacteristicActualBaseType&
      operator= (const AngularCharacteristicActualBaseType& x);

      virtual 
      ~AngularCharacteristicActualBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Value_optional Value_;
      MaxValue_optional MaxValue_;
      MinValue_optional MinValue_;
    };

    class UserDefinedAngularCharacteristicActualType: public ::xsd::qif2::AngularCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedAngularCharacteristicActualType (const id_type&,
                                                  const Status_type&,
                                                  const CharacteristicItemId_type&);

      UserDefinedAngularCharacteristicActualType (const id_type&,
                                                  ::std::auto_ptr< Status_type >,
                                                  ::std::auto_ptr< CharacteristicItemId_type >);

      UserDefinedAngularCharacteristicActualType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      UserDefinedAngularCharacteristicActualType (const UserDefinedAngularCharacteristicActualType& x,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      virtual UserDefinedAngularCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedAngularCharacteristicActualType ();
    };

    class AngularCharacteristicItemBaseType: public ::xsd::qif2::DimensionalCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      AngularCharacteristicItemBaseType (const id_type&,
                                         const Name_type&,
                                         const CharacteristicNominalId_type&);

      AngularCharacteristicItemBaseType (const id_type&,
                                         const Name_type&,
                                         ::std::auto_ptr< CharacteristicNominalId_type >);

      AngularCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      AngularCharacteristicItemBaseType (const AngularCharacteristicItemBaseType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual AngularCharacteristicItemBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AngularCharacteristicItemBaseType ();
    };

    class UserDefinedAngularCharacteristicItemType: public ::xsd::qif2::AngularCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedAngularCharacteristicItemType (const id_type&,
                                                const Name_type&,
                                                const CharacteristicNominalId_type&);

      UserDefinedAngularCharacteristicItemType (const id_type&,
                                                const Name_type&,
                                                ::std::auto_ptr< CharacteristicNominalId_type >);

      UserDefinedAngularCharacteristicItemType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      UserDefinedAngularCharacteristicItemType (const UserDefinedAngularCharacteristicItemType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual UserDefinedAngularCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedAngularCharacteristicItemType ();
    };

    class TemperatureCharacteristicDefinitionBaseType: public ::xsd::qif2::CharacteristicDefinitionBaseType
    {
      public:
      // Tolerance
      //
      typedef ::xsd::qif2::TemperatureToleranceType Tolerance_type;
      typedef ::xsd::cxx::tree::optional< Tolerance_type > Tolerance_optional;
      typedef ::xsd::cxx::tree::traits< Tolerance_type, char > Tolerance_traits;

      const Tolerance_optional&
      Tolerance () const;

      Tolerance_optional&
      Tolerance ();

      void
      Tolerance (const Tolerance_type& x);

      void
      Tolerance (const Tolerance_optional& x);

      void
      Tolerance (::std::auto_ptr< Tolerance_type > p);

      // NonTolerance
      //
      typedef ::xsd::qif2::NonToleranceEnumType NonTolerance_type;
      typedef ::xsd::cxx::tree::optional< NonTolerance_type > NonTolerance_optional;
      typedef ::xsd::cxx::tree::traits< NonTolerance_type, char > NonTolerance_traits;

      const NonTolerance_optional&
      NonTolerance () const;

      NonTolerance_optional&
      NonTolerance ();

      void
      NonTolerance (const NonTolerance_type& x);

      void
      NonTolerance (const NonTolerance_optional& x);

      void
      NonTolerance (::std::auto_ptr< NonTolerance_type > p);

      // Constructors.
      //
      TemperatureCharacteristicDefinitionBaseType (const id_type&);

      TemperatureCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      TemperatureCharacteristicDefinitionBaseType (const TemperatureCharacteristicDefinitionBaseType& x,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      virtual TemperatureCharacteristicDefinitionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TemperatureCharacteristicDefinitionBaseType&
      operator= (const TemperatureCharacteristicDefinitionBaseType& x);

      virtual 
      ~TemperatureCharacteristicDefinitionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Tolerance_optional Tolerance_;
      NonTolerance_optional NonTolerance_;
    };

    class TemperatureCharacteristicNominalBaseType: public ::xsd::qif2::CharacteristicNominalBaseType
    {
      public:
      // TargetValue
      //
      typedef ::xsd::qif2::TemperatureValueType TargetValue_type;
      typedef ::xsd::cxx::tree::optional< TargetValue_type > TargetValue_optional;
      typedef ::xsd::cxx::tree::traits< TargetValue_type, char > TargetValue_traits;

      const TargetValue_optional&
      TargetValue () const;

      TargetValue_optional&
      TargetValue ();

      void
      TargetValue (const TargetValue_type& x);

      void
      TargetValue (const TargetValue_optional& x);

      void
      TargetValue (::std::auto_ptr< TargetValue_type > p);

      // Constructors.
      //
      TemperatureCharacteristicNominalBaseType (const id_type&,
                                                const CharacteristicDefinitionId_type&);

      TemperatureCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      TemperatureCharacteristicNominalBaseType (const TemperatureCharacteristicNominalBaseType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual TemperatureCharacteristicNominalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TemperatureCharacteristicNominalBaseType&
      operator= (const TemperatureCharacteristicNominalBaseType& x);

      virtual 
      ~TemperatureCharacteristicNominalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      TargetValue_optional TargetValue_;
    };

    class TemperatureCharacteristicActualBaseType: public ::xsd::qif2::CharacteristicActualBaseType
    {
      public:
      // Value
      //
      typedef ::xsd::qif2::ActualTemperatureValueType Value_type;
      typedef ::xsd::cxx::tree::optional< Value_type > Value_optional;
      typedef ::xsd::cxx::tree::traits< Value_type, char > Value_traits;

      const Value_optional&
      Value () const;

      Value_optional&
      Value ();

      void
      Value (const Value_type& x);

      void
      Value (const Value_optional& x);

      void
      Value (::std::auto_ptr< Value_type > p);

      // MaxValue
      //
      typedef ::xsd::qif2::ActualTemperatureValueType MaxValue_type;
      typedef ::xsd::cxx::tree::optional< MaxValue_type > MaxValue_optional;
      typedef ::xsd::cxx::tree::traits< MaxValue_type, char > MaxValue_traits;

      const MaxValue_optional&
      MaxValue () const;

      MaxValue_optional&
      MaxValue ();

      void
      MaxValue (const MaxValue_type& x);

      void
      MaxValue (const MaxValue_optional& x);

      void
      MaxValue (::std::auto_ptr< MaxValue_type > p);

      // MinValue
      //
      typedef ::xsd::qif2::ActualTemperatureValueType MinValue_type;
      typedef ::xsd::cxx::tree::optional< MinValue_type > MinValue_optional;
      typedef ::xsd::cxx::tree::traits< MinValue_type, char > MinValue_traits;

      const MinValue_optional&
      MinValue () const;

      MinValue_optional&
      MinValue ();

      void
      MinValue (const MinValue_type& x);

      void
      MinValue (const MinValue_optional& x);

      void
      MinValue (::std::auto_ptr< MinValue_type > p);

      // Constructors.
      //
      TemperatureCharacteristicActualBaseType (const id_type&,
                                               const Status_type&,
                                               const CharacteristicItemId_type&);

      TemperatureCharacteristicActualBaseType (const id_type&,
                                               ::std::auto_ptr< Status_type >,
                                               ::std::auto_ptr< CharacteristicItemId_type >);

      TemperatureCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      TemperatureCharacteristicActualBaseType (const TemperatureCharacteristicActualBaseType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual TemperatureCharacteristicActualBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TemperatureCharacteristicActualBaseType&
      operator= (const TemperatureCharacteristicActualBaseType& x);

      virtual 
      ~TemperatureCharacteristicActualBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Value_optional Value_;
      MaxValue_optional MaxValue_;
      MinValue_optional MinValue_;
    };

    class TemperatureCharacteristicItemBaseType: public ::xsd::qif2::CharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      TemperatureCharacteristicItemBaseType (const id_type&,
                                             const Name_type&,
                                             const CharacteristicNominalId_type&);

      TemperatureCharacteristicItemBaseType (const id_type&,
                                             const Name_type&,
                                             ::std::auto_ptr< CharacteristicNominalId_type >);

      TemperatureCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      TemperatureCharacteristicItemBaseType (const TemperatureCharacteristicItemBaseType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual TemperatureCharacteristicItemBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~TemperatureCharacteristicItemBaseType ();
    };

    class UserDefinedTemperatureCharacteristicDefinitionType: public ::xsd::qif2::TemperatureCharacteristicDefinitionBaseType
    {
      public:
      // WhatToMeasure
      //
      typedef ::xml_schema::string WhatToMeasure_type;
      typedef ::xsd::cxx::tree::traits< WhatToMeasure_type, char > WhatToMeasure_traits;

      const WhatToMeasure_type&
      WhatToMeasure () const;

      WhatToMeasure_type&
      WhatToMeasure ();

      void
      WhatToMeasure (const WhatToMeasure_type& x);

      void
      WhatToMeasure (::std::auto_ptr< WhatToMeasure_type > p);

      // Constructors.
      //
      UserDefinedTemperatureCharacteristicDefinitionType (const id_type&,
                                                          const WhatToMeasure_type&);

      UserDefinedTemperatureCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                          ::xml_schema::flags f = 0,
                                                          ::xml_schema::container* c = 0);

      UserDefinedTemperatureCharacteristicDefinitionType (const UserDefinedTemperatureCharacteristicDefinitionType& x,
                                                          ::xml_schema::flags f = 0,
                                                          ::xml_schema::container* c = 0);

      virtual UserDefinedTemperatureCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedTemperatureCharacteristicDefinitionType&
      operator= (const UserDefinedTemperatureCharacteristicDefinitionType& x);

      virtual 
      ~UserDefinedTemperatureCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< WhatToMeasure_type > WhatToMeasure_;
    };

    class UserDefinedTemperatureCharacteristicNominalType: public ::xsd::qif2::TemperatureCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedTemperatureCharacteristicNominalType (const id_type&,
                                                       const CharacteristicDefinitionId_type&);

      UserDefinedTemperatureCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                       ::xml_schema::flags f = 0,
                                                       ::xml_schema::container* c = 0);

      UserDefinedTemperatureCharacteristicNominalType (const UserDefinedTemperatureCharacteristicNominalType& x,
                                                       ::xml_schema::flags f = 0,
                                                       ::xml_schema::container* c = 0);

      virtual UserDefinedTemperatureCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedTemperatureCharacteristicNominalType ();
    };

    class UserDefinedTemperatureCharacteristicActualType: public ::xsd::qif2::TemperatureCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedTemperatureCharacteristicActualType (const id_type&,
                                                      const Status_type&,
                                                      const CharacteristicItemId_type&);

      UserDefinedTemperatureCharacteristicActualType (const id_type&,
                                                      ::std::auto_ptr< Status_type >,
                                                      ::std::auto_ptr< CharacteristicItemId_type >);

      UserDefinedTemperatureCharacteristicActualType (const ::xercesc::DOMElement& e,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

      UserDefinedTemperatureCharacteristicActualType (const UserDefinedTemperatureCharacteristicActualType& x,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

      virtual UserDefinedTemperatureCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedTemperatureCharacteristicActualType ();
    };

    class UserDefinedTemperatureCharacteristicItemType: public ::xsd::qif2::TemperatureCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedTemperatureCharacteristicItemType (const id_type&,
                                                    const Name_type&,
                                                    const CharacteristicNominalId_type&);

      UserDefinedTemperatureCharacteristicItemType (const id_type&,
                                                    const Name_type&,
                                                    ::std::auto_ptr< CharacteristicNominalId_type >);

      UserDefinedTemperatureCharacteristicItemType (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

      UserDefinedTemperatureCharacteristicItemType (const UserDefinedTemperatureCharacteristicItemType& x,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

      virtual UserDefinedTemperatureCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedTemperatureCharacteristicItemType ();
    };

    class AreaCharacteristicDefinitionBaseType: public ::xsd::qif2::CharacteristicDefinitionBaseType
    {
      public:
      // Tolerance
      //
      typedef ::xsd::qif2::AreaToleranceType Tolerance_type;
      typedef ::xsd::cxx::tree::optional< Tolerance_type > Tolerance_optional;
      typedef ::xsd::cxx::tree::traits< Tolerance_type, char > Tolerance_traits;

      const Tolerance_optional&
      Tolerance () const;

      Tolerance_optional&
      Tolerance ();

      void
      Tolerance (const Tolerance_type& x);

      void
      Tolerance (const Tolerance_optional& x);

      void
      Tolerance (::std::auto_ptr< Tolerance_type > p);

      // NonTolerance
      //
      typedef ::xsd::qif2::NonToleranceEnumType NonTolerance_type;
      typedef ::xsd::cxx::tree::optional< NonTolerance_type > NonTolerance_optional;
      typedef ::xsd::cxx::tree::traits< NonTolerance_type, char > NonTolerance_traits;

      const NonTolerance_optional&
      NonTolerance () const;

      NonTolerance_optional&
      NonTolerance ();

      void
      NonTolerance (const NonTolerance_type& x);

      void
      NonTolerance (const NonTolerance_optional& x);

      void
      NonTolerance (::std::auto_ptr< NonTolerance_type > p);

      // Constructors.
      //
      AreaCharacteristicDefinitionBaseType (const id_type&);

      AreaCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      AreaCharacteristicDefinitionBaseType (const AreaCharacteristicDefinitionBaseType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual AreaCharacteristicDefinitionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AreaCharacteristicDefinitionBaseType&
      operator= (const AreaCharacteristicDefinitionBaseType& x);

      virtual 
      ~AreaCharacteristicDefinitionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Tolerance_optional Tolerance_;
      NonTolerance_optional NonTolerance_;
    };

    class AreaCharacteristicNominalBaseType: public ::xsd::qif2::CharacteristicNominalBaseType
    {
      public:
      // TargetValue
      //
      typedef ::xsd::qif2::AreaValueType TargetValue_type;
      typedef ::xsd::cxx::tree::optional< TargetValue_type > TargetValue_optional;
      typedef ::xsd::cxx::tree::traits< TargetValue_type, char > TargetValue_traits;

      const TargetValue_optional&
      TargetValue () const;

      TargetValue_optional&
      TargetValue ();

      void
      TargetValue (const TargetValue_type& x);

      void
      TargetValue (const TargetValue_optional& x);

      void
      TargetValue (::std::auto_ptr< TargetValue_type > p);

      // Constructors.
      //
      AreaCharacteristicNominalBaseType (const id_type&,
                                         const CharacteristicDefinitionId_type&);

      AreaCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      AreaCharacteristicNominalBaseType (const AreaCharacteristicNominalBaseType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual AreaCharacteristicNominalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AreaCharacteristicNominalBaseType&
      operator= (const AreaCharacteristicNominalBaseType& x);

      virtual 
      ~AreaCharacteristicNominalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      TargetValue_optional TargetValue_;
    };

    class AreaCharacteristicActualBaseType: public ::xsd::qif2::CharacteristicActualBaseType
    {
      public:
      // Value
      //
      typedef ::xsd::qif2::ActualAreaValueType Value_type;
      typedef ::xsd::cxx::tree::optional< Value_type > Value_optional;
      typedef ::xsd::cxx::tree::traits< Value_type, char > Value_traits;

      const Value_optional&
      Value () const;

      Value_optional&
      Value ();

      void
      Value (const Value_type& x);

      void
      Value (const Value_optional& x);

      void
      Value (::std::auto_ptr< Value_type > p);

      // MaxValue
      //
      typedef ::xsd::qif2::ActualAreaValueType MaxValue_type;
      typedef ::xsd::cxx::tree::optional< MaxValue_type > MaxValue_optional;
      typedef ::xsd::cxx::tree::traits< MaxValue_type, char > MaxValue_traits;

      const MaxValue_optional&
      MaxValue () const;

      MaxValue_optional&
      MaxValue ();

      void
      MaxValue (const MaxValue_type& x);

      void
      MaxValue (const MaxValue_optional& x);

      void
      MaxValue (::std::auto_ptr< MaxValue_type > p);

      // MinValue
      //
      typedef ::xsd::qif2::ActualAreaValueType MinValue_type;
      typedef ::xsd::cxx::tree::optional< MinValue_type > MinValue_optional;
      typedef ::xsd::cxx::tree::traits< MinValue_type, char > MinValue_traits;

      const MinValue_optional&
      MinValue () const;

      MinValue_optional&
      MinValue ();

      void
      MinValue (const MinValue_type& x);

      void
      MinValue (const MinValue_optional& x);

      void
      MinValue (::std::auto_ptr< MinValue_type > p);

      // Constructors.
      //
      AreaCharacteristicActualBaseType (const id_type&,
                                        const Status_type&,
                                        const CharacteristicItemId_type&);

      AreaCharacteristicActualBaseType (const id_type&,
                                        ::std::auto_ptr< Status_type >,
                                        ::std::auto_ptr< CharacteristicItemId_type >);

      AreaCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      AreaCharacteristicActualBaseType (const AreaCharacteristicActualBaseType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual AreaCharacteristicActualBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AreaCharacteristicActualBaseType&
      operator= (const AreaCharacteristicActualBaseType& x);

      virtual 
      ~AreaCharacteristicActualBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Value_optional Value_;
      MaxValue_optional MaxValue_;
      MinValue_optional MinValue_;
    };

    class AreaCharacteristicItemBaseType: public ::xsd::qif2::CharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      AreaCharacteristicItemBaseType (const id_type&,
                                      const Name_type&,
                                      const CharacteristicNominalId_type&);

      AreaCharacteristicItemBaseType (const id_type&,
                                      const Name_type&,
                                      ::std::auto_ptr< CharacteristicNominalId_type >);

      AreaCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      AreaCharacteristicItemBaseType (const AreaCharacteristicItemBaseType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual AreaCharacteristicItemBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AreaCharacteristicItemBaseType ();
    };

    class UserDefinedAreaCharacteristicDefinitionType: public ::xsd::qif2::AreaCharacteristicDefinitionBaseType
    {
      public:
      // WhatToMeasure
      //
      typedef ::xml_schema::string WhatToMeasure_type;
      typedef ::xsd::cxx::tree::traits< WhatToMeasure_type, char > WhatToMeasure_traits;

      const WhatToMeasure_type&
      WhatToMeasure () const;

      WhatToMeasure_type&
      WhatToMeasure ();

      void
      WhatToMeasure (const WhatToMeasure_type& x);

      void
      WhatToMeasure (::std::auto_ptr< WhatToMeasure_type > p);

      // Constructors.
      //
      UserDefinedAreaCharacteristicDefinitionType (const id_type&,
                                                   const WhatToMeasure_type&);

      UserDefinedAreaCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      UserDefinedAreaCharacteristicDefinitionType (const UserDefinedAreaCharacteristicDefinitionType& x,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      virtual UserDefinedAreaCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedAreaCharacteristicDefinitionType&
      operator= (const UserDefinedAreaCharacteristicDefinitionType& x);

      virtual 
      ~UserDefinedAreaCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< WhatToMeasure_type > WhatToMeasure_;
    };

    class UserDefinedAreaCharacteristicNominalType: public ::xsd::qif2::AreaCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedAreaCharacteristicNominalType (const id_type&,
                                                const CharacteristicDefinitionId_type&);

      UserDefinedAreaCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      UserDefinedAreaCharacteristicNominalType (const UserDefinedAreaCharacteristicNominalType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual UserDefinedAreaCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedAreaCharacteristicNominalType ();
    };

    class UserDefinedAreaCharacteristicActualType: public ::xsd::qif2::AreaCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedAreaCharacteristicActualType (const id_type&,
                                               const Status_type&,
                                               const CharacteristicItemId_type&);

      UserDefinedAreaCharacteristicActualType (const id_type&,
                                               ::std::auto_ptr< Status_type >,
                                               ::std::auto_ptr< CharacteristicItemId_type >);

      UserDefinedAreaCharacteristicActualType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      UserDefinedAreaCharacteristicActualType (const UserDefinedAreaCharacteristicActualType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual UserDefinedAreaCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedAreaCharacteristicActualType ();
    };

    class UserDefinedAreaCharacteristicItemType: public ::xsd::qif2::AreaCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedAreaCharacteristicItemType (const id_type&,
                                             const Name_type&,
                                             const CharacteristicNominalId_type&);

      UserDefinedAreaCharacteristicItemType (const id_type&,
                                             const Name_type&,
                                             ::std::auto_ptr< CharacteristicNominalId_type >);

      UserDefinedAreaCharacteristicItemType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      UserDefinedAreaCharacteristicItemType (const UserDefinedAreaCharacteristicItemType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual UserDefinedAreaCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedAreaCharacteristicItemType ();
    };

    class ForceCharacteristicDefinitionBaseType: public ::xsd::qif2::CharacteristicDefinitionBaseType
    {
      public:
      // Tolerance
      //
      typedef ::xsd::qif2::ForceToleranceType Tolerance_type;
      typedef ::xsd::cxx::tree::optional< Tolerance_type > Tolerance_optional;
      typedef ::xsd::cxx::tree::traits< Tolerance_type, char > Tolerance_traits;

      const Tolerance_optional&
      Tolerance () const;

      Tolerance_optional&
      Tolerance ();

      void
      Tolerance (const Tolerance_type& x);

      void
      Tolerance (const Tolerance_optional& x);

      void
      Tolerance (::std::auto_ptr< Tolerance_type > p);

      // NonTolerance
      //
      typedef ::xsd::qif2::NonToleranceEnumType NonTolerance_type;
      typedef ::xsd::cxx::tree::optional< NonTolerance_type > NonTolerance_optional;
      typedef ::xsd::cxx::tree::traits< NonTolerance_type, char > NonTolerance_traits;

      const NonTolerance_optional&
      NonTolerance () const;

      NonTolerance_optional&
      NonTolerance ();

      void
      NonTolerance (const NonTolerance_type& x);

      void
      NonTolerance (const NonTolerance_optional& x);

      void
      NonTolerance (::std::auto_ptr< NonTolerance_type > p);

      // Constructors.
      //
      ForceCharacteristicDefinitionBaseType (const id_type&);

      ForceCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      ForceCharacteristicDefinitionBaseType (const ForceCharacteristicDefinitionBaseType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual ForceCharacteristicDefinitionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ForceCharacteristicDefinitionBaseType&
      operator= (const ForceCharacteristicDefinitionBaseType& x);

      virtual 
      ~ForceCharacteristicDefinitionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Tolerance_optional Tolerance_;
      NonTolerance_optional NonTolerance_;
    };

    class ForceCharacteristicNominalBaseType: public ::xsd::qif2::CharacteristicNominalBaseType
    {
      public:
      // TargetValue
      //
      typedef ::xsd::qif2::ForceValueType TargetValue_type;
      typedef ::xsd::cxx::tree::optional< TargetValue_type > TargetValue_optional;
      typedef ::xsd::cxx::tree::traits< TargetValue_type, char > TargetValue_traits;

      const TargetValue_optional&
      TargetValue () const;

      TargetValue_optional&
      TargetValue ();

      void
      TargetValue (const TargetValue_type& x);

      void
      TargetValue (const TargetValue_optional& x);

      void
      TargetValue (::std::auto_ptr< TargetValue_type > p);

      // Constructors.
      //
      ForceCharacteristicNominalBaseType (const id_type&,
                                          const CharacteristicDefinitionId_type&);

      ForceCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      ForceCharacteristicNominalBaseType (const ForceCharacteristicNominalBaseType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual ForceCharacteristicNominalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ForceCharacteristicNominalBaseType&
      operator= (const ForceCharacteristicNominalBaseType& x);

      virtual 
      ~ForceCharacteristicNominalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      TargetValue_optional TargetValue_;
    };

    class ForceCharacteristicActualBaseType: public ::xsd::qif2::CharacteristicActualBaseType
    {
      public:
      // Value
      //
      typedef ::xsd::qif2::ActualForceValueType Value_type;
      typedef ::xsd::cxx::tree::optional< Value_type > Value_optional;
      typedef ::xsd::cxx::tree::traits< Value_type, char > Value_traits;

      const Value_optional&
      Value () const;

      Value_optional&
      Value ();

      void
      Value (const Value_type& x);

      void
      Value (const Value_optional& x);

      void
      Value (::std::auto_ptr< Value_type > p);

      // MaxValue
      //
      typedef ::xsd::qif2::ActualForceValueType MaxValue_type;
      typedef ::xsd::cxx::tree::optional< MaxValue_type > MaxValue_optional;
      typedef ::xsd::cxx::tree::traits< MaxValue_type, char > MaxValue_traits;

      const MaxValue_optional&
      MaxValue () const;

      MaxValue_optional&
      MaxValue ();

      void
      MaxValue (const MaxValue_type& x);

      void
      MaxValue (const MaxValue_optional& x);

      void
      MaxValue (::std::auto_ptr< MaxValue_type > p);

      // MinValue
      //
      typedef ::xsd::qif2::ActualForceValueType MinValue_type;
      typedef ::xsd::cxx::tree::optional< MinValue_type > MinValue_optional;
      typedef ::xsd::cxx::tree::traits< MinValue_type, char > MinValue_traits;

      const MinValue_optional&
      MinValue () const;

      MinValue_optional&
      MinValue ();

      void
      MinValue (const MinValue_type& x);

      void
      MinValue (const MinValue_optional& x);

      void
      MinValue (::std::auto_ptr< MinValue_type > p);

      // Constructors.
      //
      ForceCharacteristicActualBaseType (const id_type&,
                                         const Status_type&,
                                         const CharacteristicItemId_type&);

      ForceCharacteristicActualBaseType (const id_type&,
                                         ::std::auto_ptr< Status_type >,
                                         ::std::auto_ptr< CharacteristicItemId_type >);

      ForceCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      ForceCharacteristicActualBaseType (const ForceCharacteristicActualBaseType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual ForceCharacteristicActualBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ForceCharacteristicActualBaseType&
      operator= (const ForceCharacteristicActualBaseType& x);

      virtual 
      ~ForceCharacteristicActualBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Value_optional Value_;
      MaxValue_optional MaxValue_;
      MinValue_optional MinValue_;
    };

    class ForceCharacteristicItemBaseType: public ::xsd::qif2::CharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      ForceCharacteristicItemBaseType (const id_type&,
                                       const Name_type&,
                                       const CharacteristicNominalId_type&);

      ForceCharacteristicItemBaseType (const id_type&,
                                       const Name_type&,
                                       ::std::auto_ptr< CharacteristicNominalId_type >);

      ForceCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      ForceCharacteristicItemBaseType (const ForceCharacteristicItemBaseType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual ForceCharacteristicItemBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ForceCharacteristicItemBaseType ();
    };

    class UserDefinedForceCharacteristicDefinitionType: public ::xsd::qif2::ForceCharacteristicDefinitionBaseType
    {
      public:
      // WhatToMeasure
      //
      typedef ::xml_schema::string WhatToMeasure_type;
      typedef ::xsd::cxx::tree::traits< WhatToMeasure_type, char > WhatToMeasure_traits;

      const WhatToMeasure_type&
      WhatToMeasure () const;

      WhatToMeasure_type&
      WhatToMeasure ();

      void
      WhatToMeasure (const WhatToMeasure_type& x);

      void
      WhatToMeasure (::std::auto_ptr< WhatToMeasure_type > p);

      // Constructors.
      //
      UserDefinedForceCharacteristicDefinitionType (const id_type&,
                                                    const WhatToMeasure_type&);

      UserDefinedForceCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

      UserDefinedForceCharacteristicDefinitionType (const UserDefinedForceCharacteristicDefinitionType& x,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

      virtual UserDefinedForceCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedForceCharacteristicDefinitionType&
      operator= (const UserDefinedForceCharacteristicDefinitionType& x);

      virtual 
      ~UserDefinedForceCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< WhatToMeasure_type > WhatToMeasure_;
    };

    class UserDefinedForceCharacteristicNominalType: public ::xsd::qif2::ForceCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedForceCharacteristicNominalType (const id_type&,
                                                 const CharacteristicDefinitionId_type&);

      UserDefinedForceCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      UserDefinedForceCharacteristicNominalType (const UserDefinedForceCharacteristicNominalType& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      virtual UserDefinedForceCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedForceCharacteristicNominalType ();
    };

    class UserDefinedForceCharacteristicActualType: public ::xsd::qif2::ForceCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedForceCharacteristicActualType (const id_type&,
                                                const Status_type&,
                                                const CharacteristicItemId_type&);

      UserDefinedForceCharacteristicActualType (const id_type&,
                                                ::std::auto_ptr< Status_type >,
                                                ::std::auto_ptr< CharacteristicItemId_type >);

      UserDefinedForceCharacteristicActualType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      UserDefinedForceCharacteristicActualType (const UserDefinedForceCharacteristicActualType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual UserDefinedForceCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedForceCharacteristicActualType ();
    };

    class UserDefinedForceCharacteristicItemType: public ::xsd::qif2::ForceCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedForceCharacteristicItemType (const id_type&,
                                              const Name_type&,
                                              const CharacteristicNominalId_type&);

      UserDefinedForceCharacteristicItemType (const id_type&,
                                              const Name_type&,
                                              ::std::auto_ptr< CharacteristicNominalId_type >);

      UserDefinedForceCharacteristicItemType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      UserDefinedForceCharacteristicItemType (const UserDefinedForceCharacteristicItemType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual UserDefinedForceCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedForceCharacteristicItemType ();
    };

    class MassCharacteristicDefinitionBaseType: public ::xsd::qif2::CharacteristicDefinitionBaseType
    {
      public:
      // Tolerance
      //
      typedef ::xsd::qif2::MassToleranceType Tolerance_type;
      typedef ::xsd::cxx::tree::optional< Tolerance_type > Tolerance_optional;
      typedef ::xsd::cxx::tree::traits< Tolerance_type, char > Tolerance_traits;

      const Tolerance_optional&
      Tolerance () const;

      Tolerance_optional&
      Tolerance ();

      void
      Tolerance (const Tolerance_type& x);

      void
      Tolerance (const Tolerance_optional& x);

      void
      Tolerance (::std::auto_ptr< Tolerance_type > p);

      // NonTolerance
      //
      typedef ::xsd::qif2::NonToleranceEnumType NonTolerance_type;
      typedef ::xsd::cxx::tree::optional< NonTolerance_type > NonTolerance_optional;
      typedef ::xsd::cxx::tree::traits< NonTolerance_type, char > NonTolerance_traits;

      const NonTolerance_optional&
      NonTolerance () const;

      NonTolerance_optional&
      NonTolerance ();

      void
      NonTolerance (const NonTolerance_type& x);

      void
      NonTolerance (const NonTolerance_optional& x);

      void
      NonTolerance (::std::auto_ptr< NonTolerance_type > p);

      // Constructors.
      //
      MassCharacteristicDefinitionBaseType (const id_type&);

      MassCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      MassCharacteristicDefinitionBaseType (const MassCharacteristicDefinitionBaseType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual MassCharacteristicDefinitionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      MassCharacteristicDefinitionBaseType&
      operator= (const MassCharacteristicDefinitionBaseType& x);

      virtual 
      ~MassCharacteristicDefinitionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Tolerance_optional Tolerance_;
      NonTolerance_optional NonTolerance_;
    };

    class MassCharacteristicNominalBaseType: public ::xsd::qif2::CharacteristicNominalBaseType
    {
      public:
      // TargetValue
      //
      typedef ::xsd::qif2::MassValueType TargetValue_type;
      typedef ::xsd::cxx::tree::optional< TargetValue_type > TargetValue_optional;
      typedef ::xsd::cxx::tree::traits< TargetValue_type, char > TargetValue_traits;

      const TargetValue_optional&
      TargetValue () const;

      TargetValue_optional&
      TargetValue ();

      void
      TargetValue (const TargetValue_type& x);

      void
      TargetValue (const TargetValue_optional& x);

      void
      TargetValue (::std::auto_ptr< TargetValue_type > p);

      // Constructors.
      //
      MassCharacteristicNominalBaseType (const id_type&,
                                         const CharacteristicDefinitionId_type&);

      MassCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      MassCharacteristicNominalBaseType (const MassCharacteristicNominalBaseType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual MassCharacteristicNominalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      MassCharacteristicNominalBaseType&
      operator= (const MassCharacteristicNominalBaseType& x);

      virtual 
      ~MassCharacteristicNominalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      TargetValue_optional TargetValue_;
    };

    class MassCharacteristicActualBaseType: public ::xsd::qif2::CharacteristicActualBaseType
    {
      public:
      // Value
      //
      typedef ::xsd::qif2::ActualMassValueType Value_type;
      typedef ::xsd::cxx::tree::optional< Value_type > Value_optional;
      typedef ::xsd::cxx::tree::traits< Value_type, char > Value_traits;

      const Value_optional&
      Value () const;

      Value_optional&
      Value ();

      void
      Value (const Value_type& x);

      void
      Value (const Value_optional& x);

      void
      Value (::std::auto_ptr< Value_type > p);

      // MaxValue
      //
      typedef ::xsd::qif2::ActualMassValueType MaxValue_type;
      typedef ::xsd::cxx::tree::optional< MaxValue_type > MaxValue_optional;
      typedef ::xsd::cxx::tree::traits< MaxValue_type, char > MaxValue_traits;

      const MaxValue_optional&
      MaxValue () const;

      MaxValue_optional&
      MaxValue ();

      void
      MaxValue (const MaxValue_type& x);

      void
      MaxValue (const MaxValue_optional& x);

      void
      MaxValue (::std::auto_ptr< MaxValue_type > p);

      // MinValue
      //
      typedef ::xsd::qif2::ActualMassValueType MinValue_type;
      typedef ::xsd::cxx::tree::optional< MinValue_type > MinValue_optional;
      typedef ::xsd::cxx::tree::traits< MinValue_type, char > MinValue_traits;

      const MinValue_optional&
      MinValue () const;

      MinValue_optional&
      MinValue ();

      void
      MinValue (const MinValue_type& x);

      void
      MinValue (const MinValue_optional& x);

      void
      MinValue (::std::auto_ptr< MinValue_type > p);

      // Constructors.
      //
      MassCharacteristicActualBaseType (const id_type&,
                                        const Status_type&,
                                        const CharacteristicItemId_type&);

      MassCharacteristicActualBaseType (const id_type&,
                                        ::std::auto_ptr< Status_type >,
                                        ::std::auto_ptr< CharacteristicItemId_type >);

      MassCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      MassCharacteristicActualBaseType (const MassCharacteristicActualBaseType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual MassCharacteristicActualBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      MassCharacteristicActualBaseType&
      operator= (const MassCharacteristicActualBaseType& x);

      virtual 
      ~MassCharacteristicActualBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Value_optional Value_;
      MaxValue_optional MaxValue_;
      MinValue_optional MinValue_;
    };

    class MassCharacteristicItemBaseType: public ::xsd::qif2::CharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      MassCharacteristicItemBaseType (const id_type&,
                                      const Name_type&,
                                      const CharacteristicNominalId_type&);

      MassCharacteristicItemBaseType (const id_type&,
                                      const Name_type&,
                                      ::std::auto_ptr< CharacteristicNominalId_type >);

      MassCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      MassCharacteristicItemBaseType (const MassCharacteristicItemBaseType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual MassCharacteristicItemBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~MassCharacteristicItemBaseType ();
    };

    class UserDefinedMassCharacteristicDefinitionType: public ::xsd::qif2::MassCharacteristicDefinitionBaseType
    {
      public:
      // WhatToMeasure
      //
      typedef ::xml_schema::string WhatToMeasure_type;
      typedef ::xsd::cxx::tree::traits< WhatToMeasure_type, char > WhatToMeasure_traits;

      const WhatToMeasure_type&
      WhatToMeasure () const;

      WhatToMeasure_type&
      WhatToMeasure ();

      void
      WhatToMeasure (const WhatToMeasure_type& x);

      void
      WhatToMeasure (::std::auto_ptr< WhatToMeasure_type > p);

      // Constructors.
      //
      UserDefinedMassCharacteristicDefinitionType (const id_type&,
                                                   const WhatToMeasure_type&);

      UserDefinedMassCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      UserDefinedMassCharacteristicDefinitionType (const UserDefinedMassCharacteristicDefinitionType& x,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      virtual UserDefinedMassCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedMassCharacteristicDefinitionType&
      operator= (const UserDefinedMassCharacteristicDefinitionType& x);

      virtual 
      ~UserDefinedMassCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< WhatToMeasure_type > WhatToMeasure_;
    };

    class UserDefinedMassCharacteristicNominalType: public ::xsd::qif2::MassCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedMassCharacteristicNominalType (const id_type&,
                                                const CharacteristicDefinitionId_type&);

      UserDefinedMassCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      UserDefinedMassCharacteristicNominalType (const UserDefinedMassCharacteristicNominalType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual UserDefinedMassCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedMassCharacteristicNominalType ();
    };

    class UserDefinedMassCharacteristicActualType: public ::xsd::qif2::MassCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedMassCharacteristicActualType (const id_type&,
                                               const Status_type&,
                                               const CharacteristicItemId_type&);

      UserDefinedMassCharacteristicActualType (const id_type&,
                                               ::std::auto_ptr< Status_type >,
                                               ::std::auto_ptr< CharacteristicItemId_type >);

      UserDefinedMassCharacteristicActualType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      UserDefinedMassCharacteristicActualType (const UserDefinedMassCharacteristicActualType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual UserDefinedMassCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedMassCharacteristicActualType ();
    };

    class UserDefinedMassCharacteristicItemType: public ::xsd::qif2::MassCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedMassCharacteristicItemType (const id_type&,
                                             const Name_type&,
                                             const CharacteristicNominalId_type&);

      UserDefinedMassCharacteristicItemType (const id_type&,
                                             const Name_type&,
                                             ::std::auto_ptr< CharacteristicNominalId_type >);

      UserDefinedMassCharacteristicItemType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      UserDefinedMassCharacteristicItemType (const UserDefinedMassCharacteristicItemType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual UserDefinedMassCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedMassCharacteristicItemType ();
    };

    class PressureCharacteristicDefinitionBaseType: public ::xsd::qif2::CharacteristicDefinitionBaseType
    {
      public:
      // Tolerance
      //
      typedef ::xsd::qif2::PressureToleranceType Tolerance_type;
      typedef ::xsd::cxx::tree::optional< Tolerance_type > Tolerance_optional;
      typedef ::xsd::cxx::tree::traits< Tolerance_type, char > Tolerance_traits;

      const Tolerance_optional&
      Tolerance () const;

      Tolerance_optional&
      Tolerance ();

      void
      Tolerance (const Tolerance_type& x);

      void
      Tolerance (const Tolerance_optional& x);

      void
      Tolerance (::std::auto_ptr< Tolerance_type > p);

      // NonTolerance
      //
      typedef ::xsd::qif2::NonToleranceEnumType NonTolerance_type;
      typedef ::xsd::cxx::tree::optional< NonTolerance_type > NonTolerance_optional;
      typedef ::xsd::cxx::tree::traits< NonTolerance_type, char > NonTolerance_traits;

      const NonTolerance_optional&
      NonTolerance () const;

      NonTolerance_optional&
      NonTolerance ();

      void
      NonTolerance (const NonTolerance_type& x);

      void
      NonTolerance (const NonTolerance_optional& x);

      void
      NonTolerance (::std::auto_ptr< NonTolerance_type > p);

      // Constructors.
      //
      PressureCharacteristicDefinitionBaseType (const id_type&);

      PressureCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      PressureCharacteristicDefinitionBaseType (const PressureCharacteristicDefinitionBaseType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual PressureCharacteristicDefinitionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PressureCharacteristicDefinitionBaseType&
      operator= (const PressureCharacteristicDefinitionBaseType& x);

      virtual 
      ~PressureCharacteristicDefinitionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Tolerance_optional Tolerance_;
      NonTolerance_optional NonTolerance_;
    };

    class PressureCharacteristicNominalBaseType: public ::xsd::qif2::CharacteristicNominalBaseType
    {
      public:
      // TargetValue
      //
      typedef ::xsd::qif2::PressureValueType TargetValue_type;
      typedef ::xsd::cxx::tree::optional< TargetValue_type > TargetValue_optional;
      typedef ::xsd::cxx::tree::traits< TargetValue_type, char > TargetValue_traits;

      const TargetValue_optional&
      TargetValue () const;

      TargetValue_optional&
      TargetValue ();

      void
      TargetValue (const TargetValue_type& x);

      void
      TargetValue (const TargetValue_optional& x);

      void
      TargetValue (::std::auto_ptr< TargetValue_type > p);

      // Constructors.
      //
      PressureCharacteristicNominalBaseType (const id_type&,
                                             const CharacteristicDefinitionId_type&);

      PressureCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      PressureCharacteristicNominalBaseType (const PressureCharacteristicNominalBaseType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual PressureCharacteristicNominalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PressureCharacteristicNominalBaseType&
      operator= (const PressureCharacteristicNominalBaseType& x);

      virtual 
      ~PressureCharacteristicNominalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      TargetValue_optional TargetValue_;
    };

    class PressureCharacteristicActualBaseType: public ::xsd::qif2::CharacteristicActualBaseType
    {
      public:
      // Value
      //
      typedef ::xsd::qif2::ActualPressureValueType Value_type;
      typedef ::xsd::cxx::tree::optional< Value_type > Value_optional;
      typedef ::xsd::cxx::tree::traits< Value_type, char > Value_traits;

      const Value_optional&
      Value () const;

      Value_optional&
      Value ();

      void
      Value (const Value_type& x);

      void
      Value (const Value_optional& x);

      void
      Value (::std::auto_ptr< Value_type > p);

      // MaxValue
      //
      typedef ::xsd::qif2::ActualPressureValueType MaxValue_type;
      typedef ::xsd::cxx::tree::optional< MaxValue_type > MaxValue_optional;
      typedef ::xsd::cxx::tree::traits< MaxValue_type, char > MaxValue_traits;

      const MaxValue_optional&
      MaxValue () const;

      MaxValue_optional&
      MaxValue ();

      void
      MaxValue (const MaxValue_type& x);

      void
      MaxValue (const MaxValue_optional& x);

      void
      MaxValue (::std::auto_ptr< MaxValue_type > p);

      // MinValue
      //
      typedef ::xsd::qif2::ActualPressureValueType MinValue_type;
      typedef ::xsd::cxx::tree::optional< MinValue_type > MinValue_optional;
      typedef ::xsd::cxx::tree::traits< MinValue_type, char > MinValue_traits;

      const MinValue_optional&
      MinValue () const;

      MinValue_optional&
      MinValue ();

      void
      MinValue (const MinValue_type& x);

      void
      MinValue (const MinValue_optional& x);

      void
      MinValue (::std::auto_ptr< MinValue_type > p);

      // Constructors.
      //
      PressureCharacteristicActualBaseType (const id_type&,
                                            const Status_type&,
                                            const CharacteristicItemId_type&);

      PressureCharacteristicActualBaseType (const id_type&,
                                            ::std::auto_ptr< Status_type >,
                                            ::std::auto_ptr< CharacteristicItemId_type >);

      PressureCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      PressureCharacteristicActualBaseType (const PressureCharacteristicActualBaseType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual PressureCharacteristicActualBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PressureCharacteristicActualBaseType&
      operator= (const PressureCharacteristicActualBaseType& x);

      virtual 
      ~PressureCharacteristicActualBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Value_optional Value_;
      MaxValue_optional MaxValue_;
      MinValue_optional MinValue_;
    };

    class PressureCharacteristicItemBaseType: public ::xsd::qif2::CharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      PressureCharacteristicItemBaseType (const id_type&,
                                          const Name_type&,
                                          const CharacteristicNominalId_type&);

      PressureCharacteristicItemBaseType (const id_type&,
                                          const Name_type&,
                                          ::std::auto_ptr< CharacteristicNominalId_type >);

      PressureCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      PressureCharacteristicItemBaseType (const PressureCharacteristicItemBaseType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual PressureCharacteristicItemBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PressureCharacteristicItemBaseType ();
    };

    class UserDefinedPressureCharacteristicDefinitionType: public ::xsd::qif2::PressureCharacteristicDefinitionBaseType
    {
      public:
      // WhatToMeasure
      //
      typedef ::xml_schema::string WhatToMeasure_type;
      typedef ::xsd::cxx::tree::traits< WhatToMeasure_type, char > WhatToMeasure_traits;

      const WhatToMeasure_type&
      WhatToMeasure () const;

      WhatToMeasure_type&
      WhatToMeasure ();

      void
      WhatToMeasure (const WhatToMeasure_type& x);

      void
      WhatToMeasure (::std::auto_ptr< WhatToMeasure_type > p);

      // Constructors.
      //
      UserDefinedPressureCharacteristicDefinitionType (const id_type&,
                                                       const WhatToMeasure_type&);

      UserDefinedPressureCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                       ::xml_schema::flags f = 0,
                                                       ::xml_schema::container* c = 0);

      UserDefinedPressureCharacteristicDefinitionType (const UserDefinedPressureCharacteristicDefinitionType& x,
                                                       ::xml_schema::flags f = 0,
                                                       ::xml_schema::container* c = 0);

      virtual UserDefinedPressureCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedPressureCharacteristicDefinitionType&
      operator= (const UserDefinedPressureCharacteristicDefinitionType& x);

      virtual 
      ~UserDefinedPressureCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< WhatToMeasure_type > WhatToMeasure_;
    };

    class UserDefinedPressureCharacteristicNominalType: public ::xsd::qif2::PressureCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedPressureCharacteristicNominalType (const id_type&,
                                                    const CharacteristicDefinitionId_type&);

      UserDefinedPressureCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

      UserDefinedPressureCharacteristicNominalType (const UserDefinedPressureCharacteristicNominalType& x,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

      virtual UserDefinedPressureCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedPressureCharacteristicNominalType ();
    };

    class UserDefinedPressureCharacteristicActualType: public ::xsd::qif2::PressureCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedPressureCharacteristicActualType (const id_type&,
                                                   const Status_type&,
                                                   const CharacteristicItemId_type&);

      UserDefinedPressureCharacteristicActualType (const id_type&,
                                                   ::std::auto_ptr< Status_type >,
                                                   ::std::auto_ptr< CharacteristicItemId_type >);

      UserDefinedPressureCharacteristicActualType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      UserDefinedPressureCharacteristicActualType (const UserDefinedPressureCharacteristicActualType& x,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      virtual UserDefinedPressureCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedPressureCharacteristicActualType ();
    };

    class UserDefinedPressureCharacteristicItemType: public ::xsd::qif2::PressureCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedPressureCharacteristicItemType (const id_type&,
                                                 const Name_type&,
                                                 const CharacteristicNominalId_type&);

      UserDefinedPressureCharacteristicItemType (const id_type&,
                                                 const Name_type&,
                                                 ::std::auto_ptr< CharacteristicNominalId_type >);

      UserDefinedPressureCharacteristicItemType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      UserDefinedPressureCharacteristicItemType (const UserDefinedPressureCharacteristicItemType& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      virtual UserDefinedPressureCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedPressureCharacteristicItemType ();
    };

    class SpeedCharacteristicDefinitionBaseType: public ::xsd::qif2::CharacteristicDefinitionBaseType
    {
      public:
      // Tolerance
      //
      typedef ::xsd::qif2::SpeedToleranceType Tolerance_type;
      typedef ::xsd::cxx::tree::optional< Tolerance_type > Tolerance_optional;
      typedef ::xsd::cxx::tree::traits< Tolerance_type, char > Tolerance_traits;

      const Tolerance_optional&
      Tolerance () const;

      Tolerance_optional&
      Tolerance ();

      void
      Tolerance (const Tolerance_type& x);

      void
      Tolerance (const Tolerance_optional& x);

      void
      Tolerance (::std::auto_ptr< Tolerance_type > p);

      // NonTolerance
      //
      typedef ::xsd::qif2::NonToleranceEnumType NonTolerance_type;
      typedef ::xsd::cxx::tree::optional< NonTolerance_type > NonTolerance_optional;
      typedef ::xsd::cxx::tree::traits< NonTolerance_type, char > NonTolerance_traits;

      const NonTolerance_optional&
      NonTolerance () const;

      NonTolerance_optional&
      NonTolerance ();

      void
      NonTolerance (const NonTolerance_type& x);

      void
      NonTolerance (const NonTolerance_optional& x);

      void
      NonTolerance (::std::auto_ptr< NonTolerance_type > p);

      // Constructors.
      //
      SpeedCharacteristicDefinitionBaseType (const id_type&);

      SpeedCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      SpeedCharacteristicDefinitionBaseType (const SpeedCharacteristicDefinitionBaseType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual SpeedCharacteristicDefinitionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SpeedCharacteristicDefinitionBaseType&
      operator= (const SpeedCharacteristicDefinitionBaseType& x);

      virtual 
      ~SpeedCharacteristicDefinitionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Tolerance_optional Tolerance_;
      NonTolerance_optional NonTolerance_;
    };

    class SpeedCharacteristicNominalBaseType: public ::xsd::qif2::CharacteristicNominalBaseType
    {
      public:
      // TargetValue
      //
      typedef ::xsd::qif2::SpeedValueType TargetValue_type;
      typedef ::xsd::cxx::tree::optional< TargetValue_type > TargetValue_optional;
      typedef ::xsd::cxx::tree::traits< TargetValue_type, char > TargetValue_traits;

      const TargetValue_optional&
      TargetValue () const;

      TargetValue_optional&
      TargetValue ();

      void
      TargetValue (const TargetValue_type& x);

      void
      TargetValue (const TargetValue_optional& x);

      void
      TargetValue (::std::auto_ptr< TargetValue_type > p);

      // Constructors.
      //
      SpeedCharacteristicNominalBaseType (const id_type&,
                                          const CharacteristicDefinitionId_type&);

      SpeedCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      SpeedCharacteristicNominalBaseType (const SpeedCharacteristicNominalBaseType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual SpeedCharacteristicNominalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SpeedCharacteristicNominalBaseType&
      operator= (const SpeedCharacteristicNominalBaseType& x);

      virtual 
      ~SpeedCharacteristicNominalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      TargetValue_optional TargetValue_;
    };

    class SpeedCharacteristicActualBaseType: public ::xsd::qif2::CharacteristicActualBaseType
    {
      public:
      // Value
      //
      typedef ::xsd::qif2::ActualSpeedValueType Value_type;
      typedef ::xsd::cxx::tree::optional< Value_type > Value_optional;
      typedef ::xsd::cxx::tree::traits< Value_type, char > Value_traits;

      const Value_optional&
      Value () const;

      Value_optional&
      Value ();

      void
      Value (const Value_type& x);

      void
      Value (const Value_optional& x);

      void
      Value (::std::auto_ptr< Value_type > p);

      // MaxValue
      //
      typedef ::xsd::qif2::ActualSpeedValueType MaxValue_type;
      typedef ::xsd::cxx::tree::optional< MaxValue_type > MaxValue_optional;
      typedef ::xsd::cxx::tree::traits< MaxValue_type, char > MaxValue_traits;

      const MaxValue_optional&
      MaxValue () const;

      MaxValue_optional&
      MaxValue ();

      void
      MaxValue (const MaxValue_type& x);

      void
      MaxValue (const MaxValue_optional& x);

      void
      MaxValue (::std::auto_ptr< MaxValue_type > p);

      // MinValue
      //
      typedef ::xsd::qif2::ActualSpeedValueType MinValue_type;
      typedef ::xsd::cxx::tree::optional< MinValue_type > MinValue_optional;
      typedef ::xsd::cxx::tree::traits< MinValue_type, char > MinValue_traits;

      const MinValue_optional&
      MinValue () const;

      MinValue_optional&
      MinValue ();

      void
      MinValue (const MinValue_type& x);

      void
      MinValue (const MinValue_optional& x);

      void
      MinValue (::std::auto_ptr< MinValue_type > p);

      // Constructors.
      //
      SpeedCharacteristicActualBaseType (const id_type&,
                                         const Status_type&,
                                         const CharacteristicItemId_type&);

      SpeedCharacteristicActualBaseType (const id_type&,
                                         ::std::auto_ptr< Status_type >,
                                         ::std::auto_ptr< CharacteristicItemId_type >);

      SpeedCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      SpeedCharacteristicActualBaseType (const SpeedCharacteristicActualBaseType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual SpeedCharacteristicActualBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SpeedCharacteristicActualBaseType&
      operator= (const SpeedCharacteristicActualBaseType& x);

      virtual 
      ~SpeedCharacteristicActualBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Value_optional Value_;
      MaxValue_optional MaxValue_;
      MinValue_optional MinValue_;
    };

    class SpeedCharacteristicItemBaseType: public ::xsd::qif2::CharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      SpeedCharacteristicItemBaseType (const id_type&,
                                       const Name_type&,
                                       const CharacteristicNominalId_type&);

      SpeedCharacteristicItemBaseType (const id_type&,
                                       const Name_type&,
                                       ::std::auto_ptr< CharacteristicNominalId_type >);

      SpeedCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      SpeedCharacteristicItemBaseType (const SpeedCharacteristicItemBaseType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual SpeedCharacteristicItemBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SpeedCharacteristicItemBaseType ();
    };

    class UserDefinedSpeedCharacteristicDefinitionType: public ::xsd::qif2::SpeedCharacteristicDefinitionBaseType
    {
      public:
      // WhatToMeasure
      //
      typedef ::xml_schema::string WhatToMeasure_type;
      typedef ::xsd::cxx::tree::traits< WhatToMeasure_type, char > WhatToMeasure_traits;

      const WhatToMeasure_type&
      WhatToMeasure () const;

      WhatToMeasure_type&
      WhatToMeasure ();

      void
      WhatToMeasure (const WhatToMeasure_type& x);

      void
      WhatToMeasure (::std::auto_ptr< WhatToMeasure_type > p);

      // Constructors.
      //
      UserDefinedSpeedCharacteristicDefinitionType (const id_type&,
                                                    const WhatToMeasure_type&);

      UserDefinedSpeedCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

      UserDefinedSpeedCharacteristicDefinitionType (const UserDefinedSpeedCharacteristicDefinitionType& x,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

      virtual UserDefinedSpeedCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedSpeedCharacteristicDefinitionType&
      operator= (const UserDefinedSpeedCharacteristicDefinitionType& x);

      virtual 
      ~UserDefinedSpeedCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< WhatToMeasure_type > WhatToMeasure_;
    };

    class UserDefinedSpeedCharacteristicNominalType: public ::xsd::qif2::SpeedCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedSpeedCharacteristicNominalType (const id_type&,
                                                 const CharacteristicDefinitionId_type&);

      UserDefinedSpeedCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      UserDefinedSpeedCharacteristicNominalType (const UserDefinedSpeedCharacteristicNominalType& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      virtual UserDefinedSpeedCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedSpeedCharacteristicNominalType ();
    };

    class UserDefinedSpeedCharacteristicActualType: public ::xsd::qif2::SpeedCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedSpeedCharacteristicActualType (const id_type&,
                                                const Status_type&,
                                                const CharacteristicItemId_type&);

      UserDefinedSpeedCharacteristicActualType (const id_type&,
                                                ::std::auto_ptr< Status_type >,
                                                ::std::auto_ptr< CharacteristicItemId_type >);

      UserDefinedSpeedCharacteristicActualType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      UserDefinedSpeedCharacteristicActualType (const UserDefinedSpeedCharacteristicActualType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual UserDefinedSpeedCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedSpeedCharacteristicActualType ();
    };

    class UserDefinedSpeedCharacteristicItemType: public ::xsd::qif2::SpeedCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedSpeedCharacteristicItemType (const id_type&,
                                              const Name_type&,
                                              const CharacteristicNominalId_type&);

      UserDefinedSpeedCharacteristicItemType (const id_type&,
                                              const Name_type&,
                                              ::std::auto_ptr< CharacteristicNominalId_type >);

      UserDefinedSpeedCharacteristicItemType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      UserDefinedSpeedCharacteristicItemType (const UserDefinedSpeedCharacteristicItemType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual UserDefinedSpeedCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedSpeedCharacteristicItemType ();
    };

    class TimeCharacteristicDefinitionBaseType: public ::xsd::qif2::CharacteristicDefinitionBaseType
    {
      public:
      // Tolerance
      //
      typedef ::xsd::qif2::TimeToleranceType Tolerance_type;
      typedef ::xsd::cxx::tree::optional< Tolerance_type > Tolerance_optional;
      typedef ::xsd::cxx::tree::traits< Tolerance_type, char > Tolerance_traits;

      const Tolerance_optional&
      Tolerance () const;

      Tolerance_optional&
      Tolerance ();

      void
      Tolerance (const Tolerance_type& x);

      void
      Tolerance (const Tolerance_optional& x);

      void
      Tolerance (::std::auto_ptr< Tolerance_type > p);

      // NonTolerance
      //
      typedef ::xsd::qif2::NonToleranceEnumType NonTolerance_type;
      typedef ::xsd::cxx::tree::optional< NonTolerance_type > NonTolerance_optional;
      typedef ::xsd::cxx::tree::traits< NonTolerance_type, char > NonTolerance_traits;

      const NonTolerance_optional&
      NonTolerance () const;

      NonTolerance_optional&
      NonTolerance ();

      void
      NonTolerance (const NonTolerance_type& x);

      void
      NonTolerance (const NonTolerance_optional& x);

      void
      NonTolerance (::std::auto_ptr< NonTolerance_type > p);

      // Constructors.
      //
      TimeCharacteristicDefinitionBaseType (const id_type&);

      TimeCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      TimeCharacteristicDefinitionBaseType (const TimeCharacteristicDefinitionBaseType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual TimeCharacteristicDefinitionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TimeCharacteristicDefinitionBaseType&
      operator= (const TimeCharacteristicDefinitionBaseType& x);

      virtual 
      ~TimeCharacteristicDefinitionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Tolerance_optional Tolerance_;
      NonTolerance_optional NonTolerance_;
    };

    class TimeCharacteristicNominalBaseType: public ::xsd::qif2::CharacteristicNominalBaseType
    {
      public:
      // TargetValue
      //
      typedef ::xsd::qif2::TimeValueType TargetValue_type;
      typedef ::xsd::cxx::tree::optional< TargetValue_type > TargetValue_optional;
      typedef ::xsd::cxx::tree::traits< TargetValue_type, char > TargetValue_traits;

      const TargetValue_optional&
      TargetValue () const;

      TargetValue_optional&
      TargetValue ();

      void
      TargetValue (const TargetValue_type& x);

      void
      TargetValue (const TargetValue_optional& x);

      void
      TargetValue (::std::auto_ptr< TargetValue_type > p);

      // Constructors.
      //
      TimeCharacteristicNominalBaseType (const id_type&,
                                         const CharacteristicDefinitionId_type&);

      TimeCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      TimeCharacteristicNominalBaseType (const TimeCharacteristicNominalBaseType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual TimeCharacteristicNominalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TimeCharacteristicNominalBaseType&
      operator= (const TimeCharacteristicNominalBaseType& x);

      virtual 
      ~TimeCharacteristicNominalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      TargetValue_optional TargetValue_;
    };

    class TimeCharacteristicActualBaseType: public ::xsd::qif2::CharacteristicActualBaseType
    {
      public:
      // Value
      //
      typedef ::xsd::qif2::ActualTimeValueType Value_type;
      typedef ::xsd::cxx::tree::optional< Value_type > Value_optional;
      typedef ::xsd::cxx::tree::traits< Value_type, char > Value_traits;

      const Value_optional&
      Value () const;

      Value_optional&
      Value ();

      void
      Value (const Value_type& x);

      void
      Value (const Value_optional& x);

      void
      Value (::std::auto_ptr< Value_type > p);

      // MaxValue
      //
      typedef ::xsd::qif2::ActualTimeValueType MaxValue_type;
      typedef ::xsd::cxx::tree::optional< MaxValue_type > MaxValue_optional;
      typedef ::xsd::cxx::tree::traits< MaxValue_type, char > MaxValue_traits;

      const MaxValue_optional&
      MaxValue () const;

      MaxValue_optional&
      MaxValue ();

      void
      MaxValue (const MaxValue_type& x);

      void
      MaxValue (const MaxValue_optional& x);

      void
      MaxValue (::std::auto_ptr< MaxValue_type > p);

      // MinValue
      //
      typedef ::xsd::qif2::ActualTimeValueType MinValue_type;
      typedef ::xsd::cxx::tree::optional< MinValue_type > MinValue_optional;
      typedef ::xsd::cxx::tree::traits< MinValue_type, char > MinValue_traits;

      const MinValue_optional&
      MinValue () const;

      MinValue_optional&
      MinValue ();

      void
      MinValue (const MinValue_type& x);

      void
      MinValue (const MinValue_optional& x);

      void
      MinValue (::std::auto_ptr< MinValue_type > p);

      // Constructors.
      //
      TimeCharacteristicActualBaseType (const id_type&,
                                        const Status_type&,
                                        const CharacteristicItemId_type&);

      TimeCharacteristicActualBaseType (const id_type&,
                                        ::std::auto_ptr< Status_type >,
                                        ::std::auto_ptr< CharacteristicItemId_type >);

      TimeCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      TimeCharacteristicActualBaseType (const TimeCharacteristicActualBaseType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual TimeCharacteristicActualBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TimeCharacteristicActualBaseType&
      operator= (const TimeCharacteristicActualBaseType& x);

      virtual 
      ~TimeCharacteristicActualBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Value_optional Value_;
      MaxValue_optional MaxValue_;
      MinValue_optional MinValue_;
    };

    class TimeCharacteristicItemBaseType: public ::xsd::qif2::CharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      TimeCharacteristicItemBaseType (const id_type&,
                                      const Name_type&,
                                      const CharacteristicNominalId_type&);

      TimeCharacteristicItemBaseType (const id_type&,
                                      const Name_type&,
                                      ::std::auto_ptr< CharacteristicNominalId_type >);

      TimeCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      TimeCharacteristicItemBaseType (const TimeCharacteristicItemBaseType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual TimeCharacteristicItemBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~TimeCharacteristicItemBaseType ();
    };

    class UserDefinedTimeCharacteristicDefinitionType: public ::xsd::qif2::TimeCharacteristicDefinitionBaseType
    {
      public:
      // WhatToMeasure
      //
      typedef ::xml_schema::string WhatToMeasure_type;
      typedef ::xsd::cxx::tree::traits< WhatToMeasure_type, char > WhatToMeasure_traits;

      const WhatToMeasure_type&
      WhatToMeasure () const;

      WhatToMeasure_type&
      WhatToMeasure ();

      void
      WhatToMeasure (const WhatToMeasure_type& x);

      void
      WhatToMeasure (::std::auto_ptr< WhatToMeasure_type > p);

      // Constructors.
      //
      UserDefinedTimeCharacteristicDefinitionType (const id_type&,
                                                   const WhatToMeasure_type&);

      UserDefinedTimeCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      UserDefinedTimeCharacteristicDefinitionType (const UserDefinedTimeCharacteristicDefinitionType& x,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      virtual UserDefinedTimeCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedTimeCharacteristicDefinitionType&
      operator= (const UserDefinedTimeCharacteristicDefinitionType& x);

      virtual 
      ~UserDefinedTimeCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< WhatToMeasure_type > WhatToMeasure_;
    };

    class UserDefinedTimeCharacteristicNominalType: public ::xsd::qif2::TimeCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedTimeCharacteristicNominalType (const id_type&,
                                                const CharacteristicDefinitionId_type&);

      UserDefinedTimeCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      UserDefinedTimeCharacteristicNominalType (const UserDefinedTimeCharacteristicNominalType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual UserDefinedTimeCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedTimeCharacteristicNominalType ();
    };

    class UserDefinedTimeCharacteristicActualType: public ::xsd::qif2::TimeCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedTimeCharacteristicActualType (const id_type&,
                                               const Status_type&,
                                               const CharacteristicItemId_type&);

      UserDefinedTimeCharacteristicActualType (const id_type&,
                                               ::std::auto_ptr< Status_type >,
                                               ::std::auto_ptr< CharacteristicItemId_type >);

      UserDefinedTimeCharacteristicActualType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      UserDefinedTimeCharacteristicActualType (const UserDefinedTimeCharacteristicActualType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual UserDefinedTimeCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedTimeCharacteristicActualType ();
    };

    class UserDefinedTimeCharacteristicItemType: public ::xsd::qif2::TimeCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedTimeCharacteristicItemType (const id_type&,
                                             const Name_type&,
                                             const CharacteristicNominalId_type&);

      UserDefinedTimeCharacteristicItemType (const id_type&,
                                             const Name_type&,
                                             ::std::auto_ptr< CharacteristicNominalId_type >);

      UserDefinedTimeCharacteristicItemType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      UserDefinedTimeCharacteristicItemType (const UserDefinedTimeCharacteristicItemType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual UserDefinedTimeCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedTimeCharacteristicItemType ();
    };

    class UserDefinedUnitCharacteristicDefinitionType: public ::xsd::qif2::CharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedUnitCharacteristicDefinitionType (const id_type&);

      UserDefinedUnitCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      UserDefinedUnitCharacteristicDefinitionType (const UserDefinedUnitCharacteristicDefinitionType& x,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      virtual UserDefinedUnitCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedUnitCharacteristicDefinitionType ();
    };

    class UserDefinedUnitCharacteristicNominalType: public ::xsd::qif2::CharacteristicNominalBaseType
    {
      public:
      // TargetValue
      //
      typedef ::xsd::qif2::UserDefinedUnitValueType TargetValue_type;
      typedef ::xsd::cxx::tree::traits< TargetValue_type, char > TargetValue_traits;

      const TargetValue_type&
      TargetValue () const;

      TargetValue_type&
      TargetValue ();

      void
      TargetValue (const TargetValue_type& x);

      void
      TargetValue (::std::auto_ptr< TargetValue_type > p);

      // MaxValue
      //
      typedef ::xsd::qif2::UserDefinedUnitValueType MaxValue_type;
      typedef ::xsd::cxx::tree::optional< MaxValue_type > MaxValue_optional;
      typedef ::xsd::cxx::tree::traits< MaxValue_type, char > MaxValue_traits;

      const MaxValue_optional&
      MaxValue () const;

      MaxValue_optional&
      MaxValue ();

      void
      MaxValue (const MaxValue_type& x);

      void
      MaxValue (const MaxValue_optional& x);

      void
      MaxValue (::std::auto_ptr< MaxValue_type > p);

      // MinValue
      //
      typedef ::xsd::qif2::UserDefinedUnitValueType MinValue_type;
      typedef ::xsd::cxx::tree::optional< MinValue_type > MinValue_optional;
      typedef ::xsd::cxx::tree::traits< MinValue_type, char > MinValue_traits;

      const MinValue_optional&
      MinValue () const;

      MinValue_optional&
      MinValue ();

      void
      MinValue (const MinValue_type& x);

      void
      MinValue (const MinValue_optional& x);

      void
      MinValue (::std::auto_ptr< MinValue_type > p);

      // DefinedAsLimit
      //
      typedef ::xml_schema::boolean DefinedAsLimit_type;
      typedef ::xsd::cxx::tree::traits< DefinedAsLimit_type, char > DefinedAsLimit_traits;

      const DefinedAsLimit_type&
      DefinedAsLimit () const;

      DefinedAsLimit_type&
      DefinedAsLimit ();

      void
      DefinedAsLimit (const DefinedAsLimit_type& x);

      // Constructors.
      //
      UserDefinedUnitCharacteristicNominalType (const id_type&,
                                                const CharacteristicDefinitionId_type&,
                                                const TargetValue_type&,
                                                const DefinedAsLimit_type&);

      UserDefinedUnitCharacteristicNominalType (const id_type&,
                                                const CharacteristicDefinitionId_type&,
                                                ::std::auto_ptr< TargetValue_type >,
                                                const DefinedAsLimit_type&);

      UserDefinedUnitCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      UserDefinedUnitCharacteristicNominalType (const UserDefinedUnitCharacteristicNominalType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual UserDefinedUnitCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedUnitCharacteristicNominalType&
      operator= (const UserDefinedUnitCharacteristicNominalType& x);

      virtual 
      ~UserDefinedUnitCharacteristicNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< TargetValue_type > TargetValue_;
      MaxValue_optional MaxValue_;
      MinValue_optional MinValue_;
      ::xsd::cxx::tree::one< DefinedAsLimit_type > DefinedAsLimit_;
    };

    class UserDefinedUnitCharacteristicActualType: public ::xsd::qif2::CharacteristicActualBaseType
    {
      public:
      // Value
      //
      typedef ::xsd::qif2::ActualUserDefinedUnitValueType Value_type;
      typedef ::xsd::cxx::tree::optional< Value_type > Value_optional;
      typedef ::xsd::cxx::tree::traits< Value_type, char > Value_traits;

      const Value_optional&
      Value () const;

      Value_optional&
      Value ();

      void
      Value (const Value_type& x);

      void
      Value (const Value_optional& x);

      void
      Value (::std::auto_ptr< Value_type > p);

      // MaxValue
      //
      typedef ::xsd::qif2::ActualUserDefinedUnitValueType MaxValue_type;
      typedef ::xsd::cxx::tree::optional< MaxValue_type > MaxValue_optional;
      typedef ::xsd::cxx::tree::traits< MaxValue_type, char > MaxValue_traits;

      const MaxValue_optional&
      MaxValue () const;

      MaxValue_optional&
      MaxValue ();

      void
      MaxValue (const MaxValue_type& x);

      void
      MaxValue (const MaxValue_optional& x);

      void
      MaxValue (::std::auto_ptr< MaxValue_type > p);

      // MinValue
      //
      typedef ::xsd::qif2::ActualUserDefinedUnitValueType MinValue_type;
      typedef ::xsd::cxx::tree::optional< MinValue_type > MinValue_optional;
      typedef ::xsd::cxx::tree::traits< MinValue_type, char > MinValue_traits;

      const MinValue_optional&
      MinValue () const;

      MinValue_optional&
      MinValue ();

      void
      MinValue (const MinValue_type& x);

      void
      MinValue (const MinValue_optional& x);

      void
      MinValue (::std::auto_ptr< MinValue_type > p);

      // Constructors.
      //
      UserDefinedUnitCharacteristicActualType (const id_type&,
                                               const Status_type&,
                                               const CharacteristicItemId_type&);

      UserDefinedUnitCharacteristicActualType (const id_type&,
                                               ::std::auto_ptr< Status_type >,
                                               ::std::auto_ptr< CharacteristicItemId_type >);

      UserDefinedUnitCharacteristicActualType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      UserDefinedUnitCharacteristicActualType (const UserDefinedUnitCharacteristicActualType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual UserDefinedUnitCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedUnitCharacteristicActualType&
      operator= (const UserDefinedUnitCharacteristicActualType& x);

      virtual 
      ~UserDefinedUnitCharacteristicActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Value_optional Value_;
      MaxValue_optional MaxValue_;
      MinValue_optional MinValue_;
    };

    class UserDefinedUnitCharacteristicItemType: public ::xsd::qif2::CharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      UserDefinedUnitCharacteristicItemType (const id_type&,
                                             const Name_type&,
                                             const CharacteristicNominalId_type&);

      UserDefinedUnitCharacteristicItemType (const id_type&,
                                             const Name_type&,
                                             ::std::auto_ptr< CharacteristicNominalId_type >);

      UserDefinedUnitCharacteristicItemType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      UserDefinedUnitCharacteristicItemType (const UserDefinedUnitCharacteristicItemType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual UserDefinedUnitCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~UserDefinedUnitCharacteristicItemType ();
    };

    class CompositeSegmentDefinitionBaseType: public ::xml_schema::type
    {
      public:
      // DatumReferenceFrameId
      //
      typedef ::xsd::qif2::QIFReferenceFullType DatumReferenceFrameId_type;
      typedef ::xsd::cxx::tree::traits< DatumReferenceFrameId_type, char > DatumReferenceFrameId_traits;

      const DatumReferenceFrameId_type&
      DatumReferenceFrameId () const;

      DatumReferenceFrameId_type&
      DatumReferenceFrameId ();

      void
      DatumReferenceFrameId (const DatumReferenceFrameId_type& x);

      void
      DatumReferenceFrameId (::std::auto_ptr< DatumReferenceFrameId_type > p);

      // ToleranceValue
      //
      typedef ::xsd::qif2::LinearValueType ToleranceValue_type;
      typedef ::xsd::cxx::tree::traits< ToleranceValue_type, char > ToleranceValue_traits;

      const ToleranceValue_type&
      ToleranceValue () const;

      ToleranceValue_type&
      ToleranceValue ();

      void
      ToleranceValue (const ToleranceValue_type& x);

      void
      ToleranceValue (::std::auto_ptr< ToleranceValue_type > p);

      // Constructors.
      //
      CompositeSegmentDefinitionBaseType (const DatumReferenceFrameId_type&,
                                          const ToleranceValue_type&);

      CompositeSegmentDefinitionBaseType (::std::auto_ptr< DatumReferenceFrameId_type >,
                                          ::std::auto_ptr< ToleranceValue_type >);

      CompositeSegmentDefinitionBaseType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      CompositeSegmentDefinitionBaseType (const CompositeSegmentDefinitionBaseType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual CompositeSegmentDefinitionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CompositeSegmentDefinitionBaseType&
      operator= (const CompositeSegmentDefinitionBaseType& x);

      virtual 
      ~CompositeSegmentDefinitionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DatumReferenceFrameId_type > DatumReferenceFrameId_;
      ::xsd::cxx::tree::one< ToleranceValue_type > ToleranceValue_;
    };

    class CompositeSegmentActualBaseType: public ::xml_schema::type
    {
      public:
      // Value
      //
      typedef ::xsd::qif2::ActualLinearValueType Value_type;
      typedef ::xsd::cxx::tree::optional< Value_type > Value_optional;
      typedef ::xsd::cxx::tree::traits< Value_type, char > Value_traits;

      const Value_optional&
      Value () const;

      Value_optional&
      Value ();

      void
      Value (const Value_type& x);

      void
      Value (const Value_optional& x);

      void
      Value (::std::auto_ptr< Value_type > p);

      // MaxValue
      //
      typedef ::xsd::qif2::ActualLinearValueType MaxValue_type;
      typedef ::xsd::cxx::tree::optional< MaxValue_type > MaxValue_optional;
      typedef ::xsd::cxx::tree::traits< MaxValue_type, char > MaxValue_traits;

      const MaxValue_optional&
      MaxValue () const;

      MaxValue_optional&
      MaxValue ();

      void
      MaxValue (const MaxValue_type& x);

      void
      MaxValue (const MaxValue_optional& x);

      void
      MaxValue (::std::auto_ptr< MaxValue_type > p);

      // MinValue
      //
      typedef ::xsd::qif2::ActualLinearValueType MinValue_type;
      typedef ::xsd::cxx::tree::optional< MinValue_type > MinValue_optional;
      typedef ::xsd::cxx::tree::traits< MinValue_type, char > MinValue_traits;

      const MinValue_optional&
      MinValue () const;

      MinValue_optional&
      MinValue ();

      void
      MinValue (const MinValue_type& x);

      void
      MinValue (const MinValue_optional& x);

      void
      MinValue (::std::auto_ptr< MinValue_type > p);

      // Status
      //
      typedef ::xsd::qif2::CharacteristicStatusType Status_type;
      typedef ::xsd::cxx::tree::traits< Status_type, char > Status_traits;

      const Status_type&
      Status () const;

      Status_type&
      Status ();

      void
      Status (const Status_type& x);

      void
      Status (::std::auto_ptr< Status_type > p);

      // DRFTransformActualId
      //
      typedef ::xsd::qif2::QIFReferenceFullType DRFTransformActualId_type;
      typedef ::xsd::cxx::tree::optional< DRFTransformActualId_type > DRFTransformActualId_optional;
      typedef ::xsd::cxx::tree::traits< DRFTransformActualId_type, char > DRFTransformActualId_traits;

      const DRFTransformActualId_optional&
      DRFTransformActualId () const;

      DRFTransformActualId_optional&
      DRFTransformActualId ();

      void
      DRFTransformActualId (const DRFTransformActualId_type& x);

      void
      DRFTransformActualId (const DRFTransformActualId_optional& x);

      void
      DRFTransformActualId (::std::auto_ptr< DRFTransformActualId_type > p);

      // ZoneData
      //
      typedef ::xsd::qif2::ZoneDataType ZoneData_type;
      typedef ::xsd::cxx::tree::sequence< ZoneData_type > ZoneData_sequence;
      typedef ZoneData_sequence::iterator ZoneData_iterator;
      typedef ZoneData_sequence::const_iterator ZoneData_const_iterator;
      typedef ::xsd::cxx::tree::traits< ZoneData_type, char > ZoneData_traits;

      const ZoneData_sequence&
      ZoneData () const;

      ZoneData_sequence&
      ZoneData ();

      void
      ZoneData (const ZoneData_sequence& s);

      // Constructors.
      //
      CompositeSegmentActualBaseType (const Status_type&);

      CompositeSegmentActualBaseType (::std::auto_ptr< Status_type >);

      CompositeSegmentActualBaseType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      CompositeSegmentActualBaseType (const CompositeSegmentActualBaseType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual CompositeSegmentActualBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CompositeSegmentActualBaseType&
      operator= (const CompositeSegmentActualBaseType& x);

      virtual 
      ~CompositeSegmentActualBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Value_optional Value_;
      MaxValue_optional MaxValue_;
      MinValue_optional MinValue_;
      ::xsd::cxx::tree::one< Status_type > Status_;
      DRFTransformActualId_optional DRFTransformActualId_;
      ZoneData_sequence ZoneData_;
    };

    class CompositeSegmentPositionDefinitionType: public ::xsd::qif2::CompositeSegmentDefinitionBaseType
    {
      public:
      // MaterialCondition
      //
      typedef ::xsd::qif2::MaterialModifierEnumType MaterialCondition_type;
      typedef ::xsd::cxx::tree::traits< MaterialCondition_type, char > MaterialCondition_traits;

      const MaterialCondition_type&
      MaterialCondition () const;

      MaterialCondition_type&
      MaterialCondition ();

      void
      MaterialCondition (const MaterialCondition_type& x);

      void
      MaterialCondition (::std::auto_ptr< MaterialCondition_type > p);

      // ZoneShape
      //
      typedef ::xsd::qif2::PositionZoneShapeType ZoneShape_type;
      typedef ::xsd::cxx::tree::traits< ZoneShape_type, char > ZoneShape_traits;

      const ZoneShape_type&
      ZoneShape () const;

      ZoneShape_type&
      ZoneShape ();

      void
      ZoneShape (const ZoneShape_type& x);

      void
      ZoneShape (::std::auto_ptr< ZoneShape_type > p);

      // ProjectedToleranceZone
      //
      typedef ::xsd::qif2::LinearValueType ProjectedToleranceZone_type;
      typedef ::xsd::cxx::tree::optional< ProjectedToleranceZone_type > ProjectedToleranceZone_optional;
      typedef ::xsd::cxx::tree::traits< ProjectedToleranceZone_type, char > ProjectedToleranceZone_traits;

      const ProjectedToleranceZone_optional&
      ProjectedToleranceZone () const;

      ProjectedToleranceZone_optional&
      ProjectedToleranceZone ();

      void
      ProjectedToleranceZone (const ProjectedToleranceZone_type& x);

      void
      ProjectedToleranceZone (const ProjectedToleranceZone_optional& x);

      void
      ProjectedToleranceZone (::std::auto_ptr< ProjectedToleranceZone_type > p);

      // Constructors.
      //
      CompositeSegmentPositionDefinitionType (const DatumReferenceFrameId_type&,
                                              const ToleranceValue_type&,
                                              const MaterialCondition_type&,
                                              const ZoneShape_type&);

      CompositeSegmentPositionDefinitionType (::std::auto_ptr< DatumReferenceFrameId_type >,
                                              ::std::auto_ptr< ToleranceValue_type >,
                                              const MaterialCondition_type&,
                                              ::std::auto_ptr< ZoneShape_type >);

      CompositeSegmentPositionDefinitionType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      CompositeSegmentPositionDefinitionType (const CompositeSegmentPositionDefinitionType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual CompositeSegmentPositionDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CompositeSegmentPositionDefinitionType&
      operator= (const CompositeSegmentPositionDefinitionType& x);

      virtual 
      ~CompositeSegmentPositionDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< MaterialCondition_type > MaterialCondition_;
      ::xsd::cxx::tree::one< ZoneShape_type > ZoneShape_;
      ProjectedToleranceZone_optional ProjectedToleranceZone_;
    };

    class CompositeSegmentPositionActualType: public ::xsd::qif2::CompositeSegmentActualBaseType
    {
      public:
      // Constructors.
      //
      CompositeSegmentPositionActualType (const Status_type&);

      CompositeSegmentPositionActualType (::std::auto_ptr< Status_type >);

      CompositeSegmentPositionActualType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      CompositeSegmentPositionActualType (const CompositeSegmentPositionActualType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual CompositeSegmentPositionActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CompositeSegmentPositionActualType ();
    };

    class CompositeSegmentProfileDefinitionType: public ::xsd::qif2::CompositeSegmentDefinitionBaseType
    {
      public:
      // OuterDisposition
      //
      typedef ::xsd::qif2::LinearValueType OuterDisposition_type;
      typedef ::xsd::cxx::tree::optional< OuterDisposition_type > OuterDisposition_optional;
      typedef ::xsd::cxx::tree::traits< OuterDisposition_type, char > OuterDisposition_traits;

      const OuterDisposition_optional&
      OuterDisposition () const;

      OuterDisposition_optional&
      OuterDisposition ();

      void
      OuterDisposition (const OuterDisposition_type& x);

      void
      OuterDisposition (const OuterDisposition_optional& x);

      void
      OuterDisposition (::std::auto_ptr< OuterDisposition_type > p);

      // Constructors.
      //
      CompositeSegmentProfileDefinitionType (const DatumReferenceFrameId_type&,
                                             const ToleranceValue_type&);

      CompositeSegmentProfileDefinitionType (::std::auto_ptr< DatumReferenceFrameId_type >,
                                             ::std::auto_ptr< ToleranceValue_type >);

      CompositeSegmentProfileDefinitionType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      CompositeSegmentProfileDefinitionType (const CompositeSegmentProfileDefinitionType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual CompositeSegmentProfileDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CompositeSegmentProfileDefinitionType&
      operator= (const CompositeSegmentProfileDefinitionType& x);

      virtual 
      ~CompositeSegmentProfileDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      OuterDisposition_optional OuterDisposition_;
    };

    class CompositeSegmentProfileActualType: public ::xsd::qif2::CompositeSegmentActualBaseType
    {
      public:
      // Constructors.
      //
      CompositeSegmentProfileActualType (const Status_type&);

      CompositeSegmentProfileActualType (::std::auto_ptr< Status_type >);

      CompositeSegmentProfileActualType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      CompositeSegmentProfileActualType (const CompositeSegmentProfileActualType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual CompositeSegmentProfileActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CompositeSegmentProfileActualType ();
    };

    class CompositeSegmentSymmetryDefinitionType: public ::xsd::qif2::CompositeSegmentDefinitionBaseType
    {
      public:
      // Constructors.
      //
      CompositeSegmentSymmetryDefinitionType (const DatumReferenceFrameId_type&,
                                              const ToleranceValue_type&);

      CompositeSegmentSymmetryDefinitionType (::std::auto_ptr< DatumReferenceFrameId_type >,
                                              ::std::auto_ptr< ToleranceValue_type >);

      CompositeSegmentSymmetryDefinitionType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      CompositeSegmentSymmetryDefinitionType (const CompositeSegmentSymmetryDefinitionType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual CompositeSegmentSymmetryDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CompositeSegmentSymmetryDefinitionType ();
    };

    class CompositeSegmentSymmetryActualType: public ::xsd::qif2::CompositeSegmentActualBaseType
    {
      public:
      // Constructors.
      //
      CompositeSegmentSymmetryActualType (const Status_type&);

      CompositeSegmentSymmetryActualType (::std::auto_ptr< Status_type >);

      CompositeSegmentSymmetryActualType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      CompositeSegmentSymmetryActualType (const CompositeSegmentSymmetryActualType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual CompositeSegmentSymmetryActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CompositeSegmentSymmetryActualType ();
    };

    class OriginReferenceType: public ::xml_schema::type
    {
      public:
      // FeatureItemId
      //
      typedef ::xsd::qif2::QIFReferenceFullType FeatureItemId_type;
      typedef ::xsd::cxx::tree::optional< FeatureItemId_type > FeatureItemId_optional;
      typedef ::xsd::cxx::tree::traits< FeatureItemId_type, char > FeatureItemId_traits;

      const FeatureItemId_optional&
      FeatureItemId () const;

      FeatureItemId_optional&
      FeatureItemId ();

      void
      FeatureItemId (const FeatureItemId_type& x);

      void
      FeatureItemId (const FeatureItemId_optional& x);

      void
      FeatureItemId (::std::auto_ptr< FeatureItemId_type > p);

      // ReferencedComponent
      //
      typedef ::xsd::qif2::ReferencedComponentEnumType ReferencedComponent_type;
      typedef ::xsd::cxx::tree::optional< ReferencedComponent_type > ReferencedComponent_optional;
      typedef ::xsd::cxx::tree::traits< ReferencedComponent_type, char > ReferencedComponent_traits;

      const ReferencedComponent_optional&
      ReferencedComponent () const;

      ReferencedComponent_optional&
      ReferencedComponent ();

      void
      ReferencedComponent (const ReferencedComponent_type& x);

      void
      ReferencedComponent (const ReferencedComponent_optional& x);

      void
      ReferencedComponent (::std::auto_ptr< ReferencedComponent_type > p);

      // DatumDefinitionId
      //
      typedef ::xsd::qif2::QIFReferenceFullType DatumDefinitionId_type;
      typedef ::xsd::cxx::tree::optional< DatumDefinitionId_type > DatumDefinitionId_optional;
      typedef ::xsd::cxx::tree::traits< DatumDefinitionId_type, char > DatumDefinitionId_traits;

      const DatumDefinitionId_optional&
      DatumDefinitionId () const;

      DatumDefinitionId_optional&
      DatumDefinitionId ();

      void
      DatumDefinitionId (const DatumDefinitionId_type& x);

      void
      DatumDefinitionId (const DatumDefinitionId_optional& x);

      void
      DatumDefinitionId (::std::auto_ptr< DatumDefinitionId_type > p);

      // Constructors.
      //
      OriginReferenceType ();

      OriginReferenceType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      OriginReferenceType (const OriginReferenceType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual OriginReferenceType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OriginReferenceType&
      operator= (const OriginReferenceType& x);

      virtual 
      ~OriginReferenceType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      FeatureItemId_optional FeatureItemId_;
      ReferencedComponent_optional ReferencedComponent_;
      DatumDefinitionId_optional DatumDefinitionId_;
    };

    class SurfaceTextureCharacteristicDefinitionType: public ::xsd::qif2::CharacteristicDefinitionBaseType
    {
      public:
      // RoughnessAverage
      //
      typedef ::xsd::qif2::LinearValueType RoughnessAverage_type;
      typedef ::xsd::cxx::tree::traits< RoughnessAverage_type, char > RoughnessAverage_traits;

      const RoughnessAverage_type&
      RoughnessAverage () const;

      RoughnessAverage_type&
      RoughnessAverage ();

      void
      RoughnessAverage (const RoughnessAverage_type& x);

      void
      RoughnessAverage (::std::auto_ptr< RoughnessAverage_type > p);

      // Constructors.
      //
      SurfaceTextureCharacteristicDefinitionType (const id_type&,
                                                  const RoughnessAverage_type&);

      SurfaceTextureCharacteristicDefinitionType (const id_type&,
                                                  ::std::auto_ptr< RoughnessAverage_type >);

      SurfaceTextureCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      SurfaceTextureCharacteristicDefinitionType (const SurfaceTextureCharacteristicDefinitionType& x,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      virtual SurfaceTextureCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SurfaceTextureCharacteristicDefinitionType&
      operator= (const SurfaceTextureCharacteristicDefinitionType& x);

      virtual 
      ~SurfaceTextureCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< RoughnessAverage_type > RoughnessAverage_;
    };

    class SurfaceTextureCharacteristicNominalType: public ::xsd::qif2::CharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      SurfaceTextureCharacteristicNominalType (const id_type&,
                                               const CharacteristicDefinitionId_type&);

      SurfaceTextureCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      SurfaceTextureCharacteristicNominalType (const SurfaceTextureCharacteristicNominalType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual SurfaceTextureCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SurfaceTextureCharacteristicNominalType ();
    };

    class SurfaceTextureCharacteristicActualType: public ::xsd::qif2::CharacteristicActualBaseType
    {
      public:
      // RoughnessAverageValue
      //
      typedef ::xsd::qif2::ActualLinearValueType RoughnessAverageValue_type;
      typedef ::xsd::cxx::tree::optional< RoughnessAverageValue_type > RoughnessAverageValue_optional;
      typedef ::xsd::cxx::tree::traits< RoughnessAverageValue_type, char > RoughnessAverageValue_traits;

      const RoughnessAverageValue_optional&
      RoughnessAverageValue () const;

      RoughnessAverageValue_optional&
      RoughnessAverageValue ();

      void
      RoughnessAverageValue (const RoughnessAverageValue_type& x);

      void
      RoughnessAverageValue (const RoughnessAverageValue_optional& x);

      void
      RoughnessAverageValue (::std::auto_ptr< RoughnessAverageValue_type > p);

      // Constructors.
      //
      SurfaceTextureCharacteristicActualType (const id_type&,
                                              const Status_type&,
                                              const CharacteristicItemId_type&);

      SurfaceTextureCharacteristicActualType (const id_type&,
                                              ::std::auto_ptr< Status_type >,
                                              ::std::auto_ptr< CharacteristicItemId_type >);

      SurfaceTextureCharacteristicActualType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      SurfaceTextureCharacteristicActualType (const SurfaceTextureCharacteristicActualType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual SurfaceTextureCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SurfaceTextureCharacteristicActualType&
      operator= (const SurfaceTextureCharacteristicActualType& x);

      virtual 
      ~SurfaceTextureCharacteristicActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      RoughnessAverageValue_optional RoughnessAverageValue_;
    };

    class SurfaceTextureCharacteristicItemType: public ::xsd::qif2::CharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      SurfaceTextureCharacteristicItemType (const id_type&,
                                            const Name_type&,
                                            const CharacteristicNominalId_type&);

      SurfaceTextureCharacteristicItemType (const id_type&,
                                            const Name_type&,
                                            ::std::auto_ptr< CharacteristicNominalId_type >);

      SurfaceTextureCharacteristicItemType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      SurfaceTextureCharacteristicItemType (const SurfaceTextureCharacteristicItemType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual SurfaceTextureCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SurfaceTextureCharacteristicItemType ();
    };

    class OrientationDiametricalZoneType: public ::xml_schema::type
    {
      public:
      // ZoneOrientationVector
      //
      typedef ::xsd::qif2::UnitVectorType ZoneOrientationVector_type;
      typedef ::xsd::cxx::tree::optional< ZoneOrientationVector_type > ZoneOrientationVector_optional;
      typedef ::xsd::cxx::tree::traits< ZoneOrientationVector_type, char > ZoneOrientationVector_traits;

      const ZoneOrientationVector_optional&
      ZoneOrientationVector () const;

      ZoneOrientationVector_optional&
      ZoneOrientationVector ();

      void
      ZoneOrientationVector (const ZoneOrientationVector_type& x);

      void
      ZoneOrientationVector (const ZoneOrientationVector_optional& x);

      void
      ZoneOrientationVector (::std::auto_ptr< ZoneOrientationVector_type > p);

      // Constructors.
      //
      OrientationDiametricalZoneType ();

      OrientationDiametricalZoneType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      OrientationDiametricalZoneType (const OrientationDiametricalZoneType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual OrientationDiametricalZoneType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OrientationDiametricalZoneType&
      operator= (const OrientationDiametricalZoneType& x);

      virtual 
      ~OrientationDiametricalZoneType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ZoneOrientationVector_optional ZoneOrientationVector_;
    };

    class OrientationPlanarZoneType: public ::xml_schema::type
    {
      public:
      // ZoneOrientationVector
      //
      typedef ::xsd::qif2::UnitVectorType ZoneOrientationVector_type;
      typedef ::xsd::cxx::tree::optional< ZoneOrientationVector_type > ZoneOrientationVector_optional;
      typedef ::xsd::cxx::tree::traits< ZoneOrientationVector_type, char > ZoneOrientationVector_traits;

      const ZoneOrientationVector_optional&
      ZoneOrientationVector () const;

      ZoneOrientationVector_optional&
      ZoneOrientationVector ();

      void
      ZoneOrientationVector (const ZoneOrientationVector_type& x);

      void
      ZoneOrientationVector (const ZoneOrientationVector_optional& x);

      void
      ZoneOrientationVector (::std::auto_ptr< ZoneOrientationVector_type > p);

      // Constructors.
      //
      OrientationPlanarZoneType ();

      OrientationPlanarZoneType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      OrientationPlanarZoneType (const OrientationPlanarZoneType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual OrientationPlanarZoneType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OrientationPlanarZoneType&
      operator= (const OrientationPlanarZoneType& x);

      virtual 
      ~OrientationPlanarZoneType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ZoneOrientationVector_optional ZoneOrientationVector_;
    };

    class OrientationZoneShapeType: public ::xml_schema::type
    {
      public:
      // DiametricalZone
      //
      typedef ::xsd::qif2::OrientationDiametricalZoneType DiametricalZone_type;
      typedef ::xsd::cxx::tree::optional< DiametricalZone_type > DiametricalZone_optional;
      typedef ::xsd::cxx::tree::traits< DiametricalZone_type, char > DiametricalZone_traits;

      const DiametricalZone_optional&
      DiametricalZone () const;

      DiametricalZone_optional&
      DiametricalZone ();

      void
      DiametricalZone (const DiametricalZone_type& x);

      void
      DiametricalZone (const DiametricalZone_optional& x);

      void
      DiametricalZone (::std::auto_ptr< DiametricalZone_type > p);

      // PlanarZone
      //
      typedef ::xsd::qif2::OrientationPlanarZoneType PlanarZone_type;
      typedef ::xsd::cxx::tree::optional< PlanarZone_type > PlanarZone_optional;
      typedef ::xsd::cxx::tree::traits< PlanarZone_type, char > PlanarZone_traits;

      const PlanarZone_optional&
      PlanarZone () const;

      PlanarZone_optional&
      PlanarZone ();

      void
      PlanarZone (const PlanarZone_type& x);

      void
      PlanarZone (const PlanarZone_optional& x);

      void
      PlanarZone (::std::auto_ptr< PlanarZone_type > p);

      // Constructors.
      //
      OrientationZoneShapeType ();

      OrientationZoneShapeType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      OrientationZoneShapeType (const OrientationZoneShapeType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual OrientationZoneShapeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OrientationZoneShapeType&
      operator= (const OrientationZoneShapeType& x);

      virtual 
      ~OrientationZoneShapeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      DiametricalZone_optional DiametricalZone_;
      PlanarZone_optional PlanarZone_;
    };

    class OrientationCharacteristicItemBaseType: public ::xsd::qif2::GeometricCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      OrientationCharacteristicItemBaseType (const id_type&,
                                             const Name_type&,
                                             const CharacteristicNominalId_type&);

      OrientationCharacteristicItemBaseType (const id_type&,
                                             const Name_type&,
                                             ::std::auto_ptr< CharacteristicNominalId_type >);

      OrientationCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      OrientationCharacteristicItemBaseType (const OrientationCharacteristicItemBaseType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual OrientationCharacteristicItemBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~OrientationCharacteristicItemBaseType ();
    };

    class OrientationCharacteristicDefinitionBaseType: public ::xsd::qif2::GeometricCharacteristicDefinitionBaseType
    {
      public:
      // ToleranceValue
      //
      typedef ::xsd::qif2::LinearValueType ToleranceValue_type;
      typedef ::xsd::cxx::tree::traits< ToleranceValue_type, char > ToleranceValue_traits;

      const ToleranceValue_type&
      ToleranceValue () const;

      ToleranceValue_type&
      ToleranceValue ();

      void
      ToleranceValue (const ToleranceValue_type& x);

      void
      ToleranceValue (::std::auto_ptr< ToleranceValue_type > p);

      // DatumReferenceFrameId
      //
      typedef ::xsd::qif2::QIFReferenceFullType DatumReferenceFrameId_type;
      typedef ::xsd::cxx::tree::traits< DatumReferenceFrameId_type, char > DatumReferenceFrameId_traits;

      const DatumReferenceFrameId_type&
      DatumReferenceFrameId () const;

      DatumReferenceFrameId_type&
      DatumReferenceFrameId ();

      void
      DatumReferenceFrameId (const DatumReferenceFrameId_type& x);

      void
      DatumReferenceFrameId (::std::auto_ptr< DatumReferenceFrameId_type > p);

      // MaterialCondition
      //
      typedef ::xsd::qif2::MaterialModifierEnumType MaterialCondition_type;
      typedef ::xsd::cxx::tree::traits< MaterialCondition_type, char > MaterialCondition_traits;

      const MaterialCondition_type&
      MaterialCondition () const;

      MaterialCondition_type&
      MaterialCondition ();

      void
      MaterialCondition (const MaterialCondition_type& x);

      void
      MaterialCondition (::std::auto_ptr< MaterialCondition_type > p);

      // ZoneShape
      //
      typedef ::xsd::qif2::OrientationZoneShapeType ZoneShape_type;
      typedef ::xsd::cxx::tree::traits< ZoneShape_type, char > ZoneShape_traits;

      const ZoneShape_type&
      ZoneShape () const;

      ZoneShape_type&
      ZoneShape ();

      void
      ZoneShape (const ZoneShape_type& x);

      void
      ZoneShape (::std::auto_ptr< ZoneShape_type > p);

      // TangentPlane
      //
      typedef ::xml_schema::boolean TangentPlane_type;
      typedef ::xsd::cxx::tree::optional< TangentPlane_type > TangentPlane_optional;
      typedef ::xsd::cxx::tree::traits< TangentPlane_type, char > TangentPlane_traits;

      const TangentPlane_optional&
      TangentPlane () const;

      TangentPlane_optional&
      TangentPlane ();

      void
      TangentPlane (const TangentPlane_type& x);

      void
      TangentPlane (const TangentPlane_optional& x);

      // MaximumToleranceValue
      //
      typedef ::xsd::qif2::LinearValueType MaximumToleranceValue_type;
      typedef ::xsd::cxx::tree::optional< MaximumToleranceValue_type > MaximumToleranceValue_optional;
      typedef ::xsd::cxx::tree::traits< MaximumToleranceValue_type, char > MaximumToleranceValue_traits;

      const MaximumToleranceValue_optional&
      MaximumToleranceValue () const;

      MaximumToleranceValue_optional&
      MaximumToleranceValue ();

      void
      MaximumToleranceValue (const MaximumToleranceValue_type& x);

      void
      MaximumToleranceValue (const MaximumToleranceValue_optional& x);

      void
      MaximumToleranceValue (::std::auto_ptr< MaximumToleranceValue_type > p);

      // ProjectedToleranceZoneValue
      //
      typedef ::xsd::qif2::LinearValueType ProjectedToleranceZoneValue_type;
      typedef ::xsd::cxx::tree::optional< ProjectedToleranceZoneValue_type > ProjectedToleranceZoneValue_optional;
      typedef ::xsd::cxx::tree::traits< ProjectedToleranceZoneValue_type, char > ProjectedToleranceZoneValue_traits;

      const ProjectedToleranceZoneValue_optional&
      ProjectedToleranceZoneValue () const;

      ProjectedToleranceZoneValue_optional&
      ProjectedToleranceZoneValue ();

      void
      ProjectedToleranceZoneValue (const ProjectedToleranceZoneValue_type& x);

      void
      ProjectedToleranceZoneValue (const ProjectedToleranceZoneValue_optional& x);

      void
      ProjectedToleranceZoneValue (::std::auto_ptr< ProjectedToleranceZoneValue_type > p);

      // EachRadialElement
      //
      typedef ::xml_schema::boolean EachRadialElement_type;
      typedef ::xsd::cxx::tree::optional< EachRadialElement_type > EachRadialElement_optional;
      typedef ::xsd::cxx::tree::traits< EachRadialElement_type, char > EachRadialElement_traits;

      const EachRadialElement_optional&
      EachRadialElement () const;

      EachRadialElement_optional&
      EachRadialElement ();

      void
      EachRadialElement (const EachRadialElement_type& x);

      void
      EachRadialElement (const EachRadialElement_optional& x);

      // EachElement
      //
      typedef ::xml_schema::boolean EachElement_type;
      typedef ::xsd::cxx::tree::optional< EachElement_type > EachElement_optional;
      typedef ::xsd::cxx::tree::traits< EachElement_type, char > EachElement_traits;

      const EachElement_optional&
      EachElement () const;

      EachElement_optional&
      EachElement ();

      void
      EachElement (const EachElement_type& x);

      void
      EachElement (const EachElement_optional& x);

      // Constructors.
      //
      OrientationCharacteristicDefinitionBaseType (const id_type&,
                                                   const ToleranceValue_type&,
                                                   const DatumReferenceFrameId_type&,
                                                   const MaterialCondition_type&,
                                                   const ZoneShape_type&);

      OrientationCharacteristicDefinitionBaseType (const id_type&,
                                                   ::std::auto_ptr< ToleranceValue_type >,
                                                   ::std::auto_ptr< DatumReferenceFrameId_type >,
                                                   const MaterialCondition_type&,
                                                   ::std::auto_ptr< ZoneShape_type >);

      OrientationCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      OrientationCharacteristicDefinitionBaseType (const OrientationCharacteristicDefinitionBaseType& x,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      virtual OrientationCharacteristicDefinitionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OrientationCharacteristicDefinitionBaseType&
      operator= (const OrientationCharacteristicDefinitionBaseType& x);

      virtual 
      ~OrientationCharacteristicDefinitionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ToleranceValue_type > ToleranceValue_;
      ::xsd::cxx::tree::one< DatumReferenceFrameId_type > DatumReferenceFrameId_;
      ::xsd::cxx::tree::one< MaterialCondition_type > MaterialCondition_;
      ::xsd::cxx::tree::one< ZoneShape_type > ZoneShape_;
      TangentPlane_optional TangentPlane_;
      MaximumToleranceValue_optional MaximumToleranceValue_;
      ProjectedToleranceZoneValue_optional ProjectedToleranceZoneValue_;
      EachRadialElement_optional EachRadialElement_;
      EachElement_optional EachElement_;
    };

    class OrientationCharacteristicNominalBaseType: public ::xsd::qif2::GeometricCharacteristicNominalBaseType
    {
      public:
      // CircularZoneLimit
      //
      typedef ::xsd::qif2::CharacteristicCircularZoneLimitType CircularZoneLimit_type;
      typedef ::xsd::cxx::tree::optional< CircularZoneLimit_type > CircularZoneLimit_optional;
      typedef ::xsd::cxx::tree::traits< CircularZoneLimit_type, char > CircularZoneLimit_traits;

      const CircularZoneLimit_optional&
      CircularZoneLimit () const;

      CircularZoneLimit_optional&
      CircularZoneLimit ();

      void
      CircularZoneLimit (const CircularZoneLimit_type& x);

      void
      CircularZoneLimit (const CircularZoneLimit_optional& x);

      void
      CircularZoneLimit (::std::auto_ptr< CircularZoneLimit_type > p);

      // DirectionalZoneLimit
      //
      typedef ::xsd::qif2::CharacteristicDirectionalZoneLimitType DirectionalZoneLimit_type;
      typedef ::xsd::cxx::tree::optional< DirectionalZoneLimit_type > DirectionalZoneLimit_optional;
      typedef ::xsd::cxx::tree::traits< DirectionalZoneLimit_type, char > DirectionalZoneLimit_traits;

      const DirectionalZoneLimit_optional&
      DirectionalZoneLimit () const;

      DirectionalZoneLimit_optional&
      DirectionalZoneLimit ();

      void
      DirectionalZoneLimit (const DirectionalZoneLimit_type& x);

      void
      DirectionalZoneLimit (const DirectionalZoneLimit_optional& x);

      void
      DirectionalZoneLimit (::std::auto_ptr< DirectionalZoneLimit_type > p);

      // RectangularZoneLimit
      //
      typedef ::xsd::qif2::CharacteristicRectangularZoneLimitType RectangularZoneLimit_type;
      typedef ::xsd::cxx::tree::optional< RectangularZoneLimit_type > RectangularZoneLimit_optional;
      typedef ::xsd::cxx::tree::traits< RectangularZoneLimit_type, char > RectangularZoneLimit_traits;

      const RectangularZoneLimit_optional&
      RectangularZoneLimit () const;

      RectangularZoneLimit_optional&
      RectangularZoneLimit ();

      void
      RectangularZoneLimit (const RectangularZoneLimit_type& x);

      void
      RectangularZoneLimit (const RectangularZoneLimit_optional& x);

      void
      RectangularZoneLimit (::std::auto_ptr< RectangularZoneLimit_type > p);

      // Constructors.
      //
      OrientationCharacteristicNominalBaseType (const id_type&,
                                                const CharacteristicDefinitionId_type&);

      OrientationCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      OrientationCharacteristicNominalBaseType (const OrientationCharacteristicNominalBaseType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual OrientationCharacteristicNominalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OrientationCharacteristicNominalBaseType&
      operator= (const OrientationCharacteristicNominalBaseType& x);

      virtual 
      ~OrientationCharacteristicNominalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CircularZoneLimit_optional CircularZoneLimit_;
      DirectionalZoneLimit_optional DirectionalZoneLimit_;
      RectangularZoneLimit_optional RectangularZoneLimit_;
    };

    class OrientationCharacteristicActualBaseType: public ::xsd::qif2::GeometricCharacteristicActualBaseType
    {
      public:
      // DatumsOk
      //
      typedef ::xml_schema::boolean DatumsOk_type;
      typedef ::xsd::cxx::tree::optional< DatumsOk_type > DatumsOk_optional;
      typedef ::xsd::cxx::tree::traits< DatumsOk_type, char > DatumsOk_traits;

      const DatumsOk_optional&
      DatumsOk () const;

      DatumsOk_optional&
      DatumsOk ();

      void
      DatumsOk (const DatumsOk_type& x);

      void
      DatumsOk (const DatumsOk_optional& x);

      // Bonus
      //
      typedef ::xsd::qif2::ActualLinearValueType Bonus_type;
      typedef ::xsd::cxx::tree::optional< Bonus_type > Bonus_optional;
      typedef ::xsd::cxx::tree::traits< Bonus_type, char > Bonus_traits;

      const Bonus_optional&
      Bonus () const;

      Bonus_optional&
      Bonus ();

      void
      Bonus (const Bonus_type& x);

      void
      Bonus (const Bonus_optional& x);

      void
      Bonus (::std::auto_ptr< Bonus_type > p);

      // ReferenceLength
      //
      typedef ::xsd::qif2::LinearValueType ReferenceLength_type;
      typedef ::xsd::cxx::tree::optional< ReferenceLength_type > ReferenceLength_optional;
      typedef ::xsd::cxx::tree::traits< ReferenceLength_type, char > ReferenceLength_traits;

      const ReferenceLength_optional&
      ReferenceLength () const;

      ReferenceLength_optional&
      ReferenceLength ();

      void
      ReferenceLength (const ReferenceLength_type& x);

      void
      ReferenceLength (const ReferenceLength_optional& x);

      void
      ReferenceLength (::std::auto_ptr< ReferenceLength_type > p);

      // DRFTransformActualId
      //
      typedef ::xsd::qif2::QIFReferenceFullType DRFTransformActualId_type;
      typedef ::xsd::cxx::tree::optional< DRFTransformActualId_type > DRFTransformActualId_optional;
      typedef ::xsd::cxx::tree::traits< DRFTransformActualId_type, char > DRFTransformActualId_traits;

      const DRFTransformActualId_optional&
      DRFTransformActualId () const;

      DRFTransformActualId_optional&
      DRFTransformActualId ();

      void
      DRFTransformActualId (const DRFTransformActualId_type& x);

      void
      DRFTransformActualId (const DRFTransformActualId_optional& x);

      void
      DRFTransformActualId (::std::auto_ptr< DRFTransformActualId_type > p);

      // Constructors.
      //
      OrientationCharacteristicActualBaseType (const id_type&,
                                               const Status_type&,
                                               const CharacteristicItemId_type&);

      OrientationCharacteristicActualBaseType (const id_type&,
                                               ::std::auto_ptr< Status_type >,
                                               ::std::auto_ptr< CharacteristicItemId_type >);

      OrientationCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      OrientationCharacteristicActualBaseType (const OrientationCharacteristicActualBaseType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual OrientationCharacteristicActualBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OrientationCharacteristicActualBaseType&
      operator= (const OrientationCharacteristicActualBaseType& x);

      virtual 
      ~OrientationCharacteristicActualBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      DatumsOk_optional DatumsOk_;
      Bonus_optional Bonus_;
      ReferenceLength_optional ReferenceLength_;
      DRFTransformActualId_optional DRFTransformActualId_;
    };

    class AngularityCharacteristicItemType: public ::xsd::qif2::OrientationCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      AngularityCharacteristicItemType (const id_type&,
                                        const Name_type&,
                                        const CharacteristicNominalId_type&);

      AngularityCharacteristicItemType (const id_type&,
                                        const Name_type&,
                                        ::std::auto_ptr< CharacteristicNominalId_type >);

      AngularityCharacteristicItemType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      AngularityCharacteristicItemType (const AngularityCharacteristicItemType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual AngularityCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AngularityCharacteristicItemType ();
    };

    class AngularityCharacteristicDefinitionType: public ::xsd::qif2::OrientationCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      AngularityCharacteristicDefinitionType (const id_type&,
                                              const ToleranceValue_type&,
                                              const DatumReferenceFrameId_type&,
                                              const MaterialCondition_type&,
                                              const ZoneShape_type&);

      AngularityCharacteristicDefinitionType (const id_type&,
                                              ::std::auto_ptr< ToleranceValue_type >,
                                              ::std::auto_ptr< DatumReferenceFrameId_type >,
                                              const MaterialCondition_type&,
                                              ::std::auto_ptr< ZoneShape_type >);

      AngularityCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      AngularityCharacteristicDefinitionType (const AngularityCharacteristicDefinitionType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual AngularityCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AngularityCharacteristicDefinitionType ();
    };

    class AngularityCharacteristicNominalType: public ::xsd::qif2::OrientationCharacteristicNominalBaseType
    {
      public:
      // Angle
      //
      typedef ::xsd::qif2::AngularValueType Angle_type;
      typedef ::xsd::cxx::tree::optional< Angle_type > Angle_optional;
      typedef ::xsd::cxx::tree::traits< Angle_type, char > Angle_traits;

      const Angle_optional&
      Angle () const;

      Angle_optional&
      Angle ();

      void
      Angle (const Angle_type& x);

      void
      Angle (const Angle_optional& x);

      void
      Angle (::std::auto_ptr< Angle_type > p);

      // Constructors.
      //
      AngularityCharacteristicNominalType (const id_type&,
                                           const CharacteristicDefinitionId_type&);

      AngularityCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      AngularityCharacteristicNominalType (const AngularityCharacteristicNominalType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual AngularityCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AngularityCharacteristicNominalType&
      operator= (const AngularityCharacteristicNominalType& x);

      virtual 
      ~AngularityCharacteristicNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Angle_optional Angle_;
    };

    class AngularityCharacteristicActualType: public ::xsd::qif2::OrientationCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      AngularityCharacteristicActualType (const id_type&,
                                          const Status_type&,
                                          const CharacteristicItemId_type&);

      AngularityCharacteristicActualType (const id_type&,
                                          ::std::auto_ptr< Status_type >,
                                          ::std::auto_ptr< CharacteristicItemId_type >);

      AngularityCharacteristicActualType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      AngularityCharacteristicActualType (const AngularityCharacteristicActualType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual AngularityCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AngularityCharacteristicActualType ();
    };

    class PerpendicularityCharacteristicItemType: public ::xsd::qif2::OrientationCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      PerpendicularityCharacteristicItemType (const id_type&,
                                              const Name_type&,
                                              const CharacteristicNominalId_type&);

      PerpendicularityCharacteristicItemType (const id_type&,
                                              const Name_type&,
                                              ::std::auto_ptr< CharacteristicNominalId_type >);

      PerpendicularityCharacteristicItemType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      PerpendicularityCharacteristicItemType (const PerpendicularityCharacteristicItemType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual PerpendicularityCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PerpendicularityCharacteristicItemType ();
    };

    class PerpendicularityCharacteristicDefinitionType: public ::xsd::qif2::OrientationCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      PerpendicularityCharacteristicDefinitionType (const id_type&,
                                                    const ToleranceValue_type&,
                                                    const DatumReferenceFrameId_type&,
                                                    const MaterialCondition_type&,
                                                    const ZoneShape_type&);

      PerpendicularityCharacteristicDefinitionType (const id_type&,
                                                    ::std::auto_ptr< ToleranceValue_type >,
                                                    ::std::auto_ptr< DatumReferenceFrameId_type >,
                                                    const MaterialCondition_type&,
                                                    ::std::auto_ptr< ZoneShape_type >);

      PerpendicularityCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

      PerpendicularityCharacteristicDefinitionType (const PerpendicularityCharacteristicDefinitionType& x,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

      virtual PerpendicularityCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PerpendicularityCharacteristicDefinitionType ();
    };

    class PerpendicularityCharacteristicNominalType: public ::xsd::qif2::OrientationCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      PerpendicularityCharacteristicNominalType (const id_type&,
                                                 const CharacteristicDefinitionId_type&);

      PerpendicularityCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      PerpendicularityCharacteristicNominalType (const PerpendicularityCharacteristicNominalType& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      virtual PerpendicularityCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PerpendicularityCharacteristicNominalType ();
    };

    class PerpendicularityCharacteristicActualType: public ::xsd::qif2::OrientationCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      PerpendicularityCharacteristicActualType (const id_type&,
                                                const Status_type&,
                                                const CharacteristicItemId_type&);

      PerpendicularityCharacteristicActualType (const id_type&,
                                                ::std::auto_ptr< Status_type >,
                                                ::std::auto_ptr< CharacteristicItemId_type >);

      PerpendicularityCharacteristicActualType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      PerpendicularityCharacteristicActualType (const PerpendicularityCharacteristicActualType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual PerpendicularityCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PerpendicularityCharacteristicActualType ();
    };

    class ParallelismCharacteristicItemType: public ::xsd::qif2::OrientationCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      ParallelismCharacteristicItemType (const id_type&,
                                         const Name_type&,
                                         const CharacteristicNominalId_type&);

      ParallelismCharacteristicItemType (const id_type&,
                                         const Name_type&,
                                         ::std::auto_ptr< CharacteristicNominalId_type >);

      ParallelismCharacteristicItemType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      ParallelismCharacteristicItemType (const ParallelismCharacteristicItemType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual ParallelismCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ParallelismCharacteristicItemType ();
    };

    class ParallelismCharacteristicDefinitionType: public ::xsd::qif2::OrientationCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      ParallelismCharacteristicDefinitionType (const id_type&,
                                               const ToleranceValue_type&,
                                               const DatumReferenceFrameId_type&,
                                               const MaterialCondition_type&,
                                               const ZoneShape_type&);

      ParallelismCharacteristicDefinitionType (const id_type&,
                                               ::std::auto_ptr< ToleranceValue_type >,
                                               ::std::auto_ptr< DatumReferenceFrameId_type >,
                                               const MaterialCondition_type&,
                                               ::std::auto_ptr< ZoneShape_type >);

      ParallelismCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      ParallelismCharacteristicDefinitionType (const ParallelismCharacteristicDefinitionType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual ParallelismCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ParallelismCharacteristicDefinitionType ();
    };

    class ParallelismCharacteristicNominalType: public ::xsd::qif2::OrientationCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      ParallelismCharacteristicNominalType (const id_type&,
                                            const CharacteristicDefinitionId_type&);

      ParallelismCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      ParallelismCharacteristicNominalType (const ParallelismCharacteristicNominalType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual ParallelismCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ParallelismCharacteristicNominalType ();
    };

    class ParallelismCharacteristicActualType: public ::xsd::qif2::OrientationCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      ParallelismCharacteristicActualType (const id_type&,
                                           const Status_type&,
                                           const CharacteristicItemId_type&);

      ParallelismCharacteristicActualType (const id_type&,
                                           ::std::auto_ptr< Status_type >,
                                           ::std::auto_ptr< CharacteristicItemId_type >);

      ParallelismCharacteristicActualType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      ParallelismCharacteristicActualType (const ParallelismCharacteristicActualType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual ParallelismCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ParallelismCharacteristicActualType ();
    };

    class FormCharacteristicDefinitionBaseType: public ::xsd::qif2::GeometricCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      FormCharacteristicDefinitionBaseType (const id_type&);

      FormCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      FormCharacteristicDefinitionBaseType (const FormCharacteristicDefinitionBaseType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual FormCharacteristicDefinitionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~FormCharacteristicDefinitionBaseType ();
    };

    class FormCharacteristicNominalBaseType: public ::xsd::qif2::GeometricCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      FormCharacteristicNominalBaseType (const id_type&,
                                         const CharacteristicDefinitionId_type&);

      FormCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      FormCharacteristicNominalBaseType (const FormCharacteristicNominalBaseType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual FormCharacteristicNominalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~FormCharacteristicNominalBaseType ();
    };

    class FormCharacteristicActualBaseType: public ::xsd::qif2::GeometricCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      FormCharacteristicActualBaseType (const id_type&,
                                        const Status_type&,
                                        const CharacteristicItemId_type&);

      FormCharacteristicActualBaseType (const id_type&,
                                        ::std::auto_ptr< Status_type >,
                                        ::std::auto_ptr< CharacteristicItemId_type >);

      FormCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      FormCharacteristicActualBaseType (const FormCharacteristicActualBaseType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual FormCharacteristicActualBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~FormCharacteristicActualBaseType ();
    };

    class FormCharacteristicItemBaseType: public ::xsd::qif2::GeometricCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      FormCharacteristicItemBaseType (const id_type&,
                                      const Name_type&,
                                      const CharacteristicNominalId_type&);

      FormCharacteristicItemBaseType (const id_type&,
                                      const Name_type&,
                                      ::std::auto_ptr< CharacteristicNominalId_type >);

      FormCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      FormCharacteristicItemBaseType (const FormCharacteristicItemBaseType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual FormCharacteristicItemBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~FormCharacteristicItemBaseType ();
    };

    class StraightnessDiametricalZoneType: public ::xml_schema::type
    {
      public:
      // Constructors.
      //
      StraightnessDiametricalZoneType ();

      StraightnessDiametricalZoneType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      StraightnessDiametricalZoneType (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      StraightnessDiametricalZoneType (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      StraightnessDiametricalZoneType (const StraightnessDiametricalZoneType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual StraightnessDiametricalZoneType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~StraightnessDiametricalZoneType ();
    };

    class StraightnessNonDiametricalZoneType: public ::xml_schema::type
    {
      public:
      // ZoneOrientationVector
      //
      typedef ::xsd::qif2::UnitVectorType ZoneOrientationVector_type;
      typedef ::xsd::cxx::tree::optional< ZoneOrientationVector_type > ZoneOrientationVector_optional;
      typedef ::xsd::cxx::tree::traits< ZoneOrientationVector_type, char > ZoneOrientationVector_traits;

      const ZoneOrientationVector_optional&
      ZoneOrientationVector () const;

      ZoneOrientationVector_optional&
      ZoneOrientationVector ();

      void
      ZoneOrientationVector (const ZoneOrientationVector_type& x);

      void
      ZoneOrientationVector (const ZoneOrientationVector_optional& x);

      void
      ZoneOrientationVector (::std::auto_ptr< ZoneOrientationVector_type > p);

      // Constructors.
      //
      StraightnessNonDiametricalZoneType ();

      StraightnessNonDiametricalZoneType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      StraightnessNonDiametricalZoneType (const StraightnessNonDiametricalZoneType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual StraightnessNonDiametricalZoneType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StraightnessNonDiametricalZoneType&
      operator= (const StraightnessNonDiametricalZoneType& x);

      virtual 
      ~StraightnessNonDiametricalZoneType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ZoneOrientationVector_optional ZoneOrientationVector_;
    };

    class StraightnessZoneShapeType: public ::xml_schema::type
    {
      public:
      // DiametricalZone
      //
      typedef ::xsd::qif2::StraightnessDiametricalZoneType DiametricalZone_type;
      typedef ::xsd::cxx::tree::optional< DiametricalZone_type > DiametricalZone_optional;
      typedef ::xsd::cxx::tree::traits< DiametricalZone_type, char > DiametricalZone_traits;

      const DiametricalZone_optional&
      DiametricalZone () const;

      DiametricalZone_optional&
      DiametricalZone ();

      void
      DiametricalZone (const DiametricalZone_type& x);

      void
      DiametricalZone (const DiametricalZone_optional& x);

      void
      DiametricalZone (::std::auto_ptr< DiametricalZone_type > p);

      // NonDiametricalZone
      //
      typedef ::xsd::qif2::StraightnessNonDiametricalZoneType NonDiametricalZone_type;
      typedef ::xsd::cxx::tree::optional< NonDiametricalZone_type > NonDiametricalZone_optional;
      typedef ::xsd::cxx::tree::traits< NonDiametricalZone_type, char > NonDiametricalZone_traits;

      const NonDiametricalZone_optional&
      NonDiametricalZone () const;

      NonDiametricalZone_optional&
      NonDiametricalZone ();

      void
      NonDiametricalZone (const NonDiametricalZone_type& x);

      void
      NonDiametricalZone (const NonDiametricalZone_optional& x);

      void
      NonDiametricalZone (::std::auto_ptr< NonDiametricalZone_type > p);

      // Constructors.
      //
      StraightnessZoneShapeType ();

      StraightnessZoneShapeType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      StraightnessZoneShapeType (const StraightnessZoneShapeType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual StraightnessZoneShapeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StraightnessZoneShapeType&
      operator= (const StraightnessZoneShapeType& x);

      virtual 
      ~StraightnessZoneShapeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      DiametricalZone_optional DiametricalZone_;
      NonDiametricalZone_optional NonDiametricalZone_;
    };

    class StraightnessCharacteristicItemType: public ::xsd::qif2::FormCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      StraightnessCharacteristicItemType (const id_type&,
                                          const Name_type&,
                                          const CharacteristicNominalId_type&);

      StraightnessCharacteristicItemType (const id_type&,
                                          const Name_type&,
                                          ::std::auto_ptr< CharacteristicNominalId_type >);

      StraightnessCharacteristicItemType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      StraightnessCharacteristicItemType (const StraightnessCharacteristicItemType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual StraightnessCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~StraightnessCharacteristicItemType ();
    };

    class StraightnessCharacteristicDefinitionType: public ::xsd::qif2::FormCharacteristicDefinitionBaseType
    {
      public:
      // ToleranceValue
      //
      typedef ::xsd::qif2::LinearValueType ToleranceValue_type;
      typedef ::xsd::cxx::tree::optional< ToleranceValue_type > ToleranceValue_optional;
      typedef ::xsd::cxx::tree::traits< ToleranceValue_type, char > ToleranceValue_traits;

      const ToleranceValue_optional&
      ToleranceValue () const;

      ToleranceValue_optional&
      ToleranceValue ();

      void
      ToleranceValue (const ToleranceValue_type& x);

      void
      ToleranceValue (const ToleranceValue_optional& x);

      void
      ToleranceValue (::std::auto_ptr< ToleranceValue_type > p);

      // ToleranceZonePerUnitLength
      //
      typedef ::xsd::qif2::ToleranceZonePerUnitLengthType ToleranceZonePerUnitLength_type;
      typedef ::xsd::cxx::tree::optional< ToleranceZonePerUnitLength_type > ToleranceZonePerUnitLength_optional;
      typedef ::xsd::cxx::tree::traits< ToleranceZonePerUnitLength_type, char > ToleranceZonePerUnitLength_traits;

      const ToleranceZonePerUnitLength_optional&
      ToleranceZonePerUnitLength () const;

      ToleranceZonePerUnitLength_optional&
      ToleranceZonePerUnitLength ();

      void
      ToleranceZonePerUnitLength (const ToleranceZonePerUnitLength_type& x);

      void
      ToleranceZonePerUnitLength (const ToleranceZonePerUnitLength_optional& x);

      void
      ToleranceZonePerUnitLength (::std::auto_ptr< ToleranceZonePerUnitLength_type > p);

      // MaterialCondition
      //
      typedef ::xsd::qif2::MaterialModifierEnumType MaterialCondition_type;
      typedef ::xsd::cxx::tree::optional< MaterialCondition_type > MaterialCondition_optional;
      typedef ::xsd::cxx::tree::traits< MaterialCondition_type, char > MaterialCondition_traits;

      const MaterialCondition_optional&
      MaterialCondition () const;

      MaterialCondition_optional&
      MaterialCondition ();

      void
      MaterialCondition (const MaterialCondition_type& x);

      void
      MaterialCondition (const MaterialCondition_optional& x);

      void
      MaterialCondition (::std::auto_ptr< MaterialCondition_type > p);

      // ZoneShape
      //
      typedef ::xsd::qif2::StraightnessZoneShapeType ZoneShape_type;
      typedef ::xsd::cxx::tree::traits< ZoneShape_type, char > ZoneShape_traits;

      const ZoneShape_type&
      ZoneShape () const;

      ZoneShape_type&
      ZoneShape ();

      void
      ZoneShape (const ZoneShape_type& x);

      void
      ZoneShape (::std::auto_ptr< ZoneShape_type > p);

      // Constructors.
      //
      StraightnessCharacteristicDefinitionType (const id_type&,
                                                const ZoneShape_type&);

      StraightnessCharacteristicDefinitionType (const id_type&,
                                                ::std::auto_ptr< ZoneShape_type >);

      StraightnessCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      StraightnessCharacteristicDefinitionType (const StraightnessCharacteristicDefinitionType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual StraightnessCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StraightnessCharacteristicDefinitionType&
      operator= (const StraightnessCharacteristicDefinitionType& x);

      virtual 
      ~StraightnessCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ToleranceValue_optional ToleranceValue_;
      ToleranceZonePerUnitLength_optional ToleranceZonePerUnitLength_;
      MaterialCondition_optional MaterialCondition_;
      ::xsd::cxx::tree::one< ZoneShape_type > ZoneShape_;
    };

    class StraightnessCharacteristicNominalType: public ::xsd::qif2::FormCharacteristicNominalBaseType
    {
      public:
      // ZoneLimit
      //
      typedef ::xsd::qif2::CharacteristicDirectionalZoneLimitType ZoneLimit_type;
      typedef ::xsd::cxx::tree::optional< ZoneLimit_type > ZoneLimit_optional;
      typedef ::xsd::cxx::tree::traits< ZoneLimit_type, char > ZoneLimit_traits;

      const ZoneLimit_optional&
      ZoneLimit () const;

      ZoneLimit_optional&
      ZoneLimit ();

      void
      ZoneLimit (const ZoneLimit_type& x);

      void
      ZoneLimit (const ZoneLimit_optional& x);

      void
      ZoneLimit (::std::auto_ptr< ZoneLimit_type > p);

      // Constructors.
      //
      StraightnessCharacteristicNominalType (const id_type&,
                                             const CharacteristicDefinitionId_type&);

      StraightnessCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      StraightnessCharacteristicNominalType (const StraightnessCharacteristicNominalType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual StraightnessCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StraightnessCharacteristicNominalType&
      operator= (const StraightnessCharacteristicNominalType& x);

      virtual 
      ~StraightnessCharacteristicNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ZoneLimit_optional ZoneLimit_;
    };

    class StraightnessCharacteristicActualType: public ::xsd::qif2::FormCharacteristicActualBaseType
    {
      public:
      // MaxStraightness
      //
      typedef ::xsd::qif2::ActualLinearValueType MaxStraightness_type;
      typedef ::xsd::cxx::tree::optional< MaxStraightness_type > MaxStraightness_optional;
      typedef ::xsd::cxx::tree::traits< MaxStraightness_type, char > MaxStraightness_traits;

      const MaxStraightness_optional&
      MaxStraightness () const;

      MaxStraightness_optional&
      MaxStraightness ();

      void
      MaxStraightness (const MaxStraightness_type& x);

      void
      MaxStraightness (const MaxStraightness_optional& x);

      void
      MaxStraightness (::std::auto_ptr< MaxStraightness_type > p);

      // ZoneOrientation
      //
      typedef ::xsd::qif2::ActualUnitVectorType ZoneOrientation_type;
      typedef ::xsd::cxx::tree::optional< ZoneOrientation_type > ZoneOrientation_optional;
      typedef ::xsd::cxx::tree::traits< ZoneOrientation_type, char > ZoneOrientation_traits;

      const ZoneOrientation_optional&
      ZoneOrientation () const;

      ZoneOrientation_optional&
      ZoneOrientation ();

      void
      ZoneOrientation (const ZoneOrientation_type& x);

      void
      ZoneOrientation (const ZoneOrientation_optional& x);

      void
      ZoneOrientation (::std::auto_ptr< ZoneOrientation_type > p);

      // ZoneLine
      //
      typedef ::xsd::qif2::ActualZoneAxisType ZoneLine_type;
      typedef ::xsd::cxx::tree::optional< ZoneLine_type > ZoneLine_optional;
      typedef ::xsd::cxx::tree::traits< ZoneLine_type, char > ZoneLine_traits;

      const ZoneLine_optional&
      ZoneLine () const;

      ZoneLine_optional&
      ZoneLine ();

      void
      ZoneLine (const ZoneLine_type& x);

      void
      ZoneLine (const ZoneLine_optional& x);

      void
      ZoneLine (::std::auto_ptr< ZoneLine_type > p);

      // Constructors.
      //
      StraightnessCharacteristicActualType (const id_type&,
                                            const Status_type&,
                                            const CharacteristicItemId_type&);

      StraightnessCharacteristicActualType (const id_type&,
                                            ::std::auto_ptr< Status_type >,
                                            ::std::auto_ptr< CharacteristicItemId_type >);

      StraightnessCharacteristicActualType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      StraightnessCharacteristicActualType (const StraightnessCharacteristicActualType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual StraightnessCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StraightnessCharacteristicActualType&
      operator= (const StraightnessCharacteristicActualType& x);

      virtual 
      ~StraightnessCharacteristicActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      MaxStraightness_optional MaxStraightness_;
      ZoneOrientation_optional ZoneOrientation_;
      ZoneLine_optional ZoneLine_;
    };

    class FlatnessCharacteristicItemType: public ::xsd::qif2::FormCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      FlatnessCharacteristicItemType (const id_type&,
                                      const Name_type&,
                                      const CharacteristicNominalId_type&);

      FlatnessCharacteristicItemType (const id_type&,
                                      const Name_type&,
                                      ::std::auto_ptr< CharacteristicNominalId_type >);

      FlatnessCharacteristicItemType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      FlatnessCharacteristicItemType (const FlatnessCharacteristicItemType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual FlatnessCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~FlatnessCharacteristicItemType ();
    };

    class FlatnessCharacteristicDefinitionType: public ::xsd::qif2::FormCharacteristicDefinitionBaseType
    {
      public:
      // ToleranceValue
      //
      typedef ::xsd::qif2::LinearValueType ToleranceValue_type;
      typedef ::xsd::cxx::tree::optional< ToleranceValue_type > ToleranceValue_optional;
      typedef ::xsd::cxx::tree::traits< ToleranceValue_type, char > ToleranceValue_traits;

      const ToleranceValue_optional&
      ToleranceValue () const;

      ToleranceValue_optional&
      ToleranceValue ();

      void
      ToleranceValue (const ToleranceValue_type& x);

      void
      ToleranceValue (const ToleranceValue_optional& x);

      void
      ToleranceValue (::std::auto_ptr< ToleranceValue_type > p);

      // ToleranceZonePerUnitArea
      //
      typedef ::xsd::qif2::ToleranceZonePerUnitAreaType ToleranceZonePerUnitArea_type;
      typedef ::xsd::cxx::tree::optional< ToleranceZonePerUnitArea_type > ToleranceZonePerUnitArea_optional;
      typedef ::xsd::cxx::tree::traits< ToleranceZonePerUnitArea_type, char > ToleranceZonePerUnitArea_traits;

      const ToleranceZonePerUnitArea_optional&
      ToleranceZonePerUnitArea () const;

      ToleranceZonePerUnitArea_optional&
      ToleranceZonePerUnitArea ();

      void
      ToleranceZonePerUnitArea (const ToleranceZonePerUnitArea_type& x);

      void
      ToleranceZonePerUnitArea (const ToleranceZonePerUnitArea_optional& x);

      void
      ToleranceZonePerUnitArea (::std::auto_ptr< ToleranceZonePerUnitArea_type > p);

      // NotConvex
      //
      typedef ::xml_schema::boolean NotConvex_type;
      typedef ::xsd::cxx::tree::optional< NotConvex_type > NotConvex_optional;
      typedef ::xsd::cxx::tree::traits< NotConvex_type, char > NotConvex_traits;

      const NotConvex_optional&
      NotConvex () const;

      NotConvex_optional&
      NotConvex ();

      void
      NotConvex (const NotConvex_type& x);

      void
      NotConvex (const NotConvex_optional& x);

      // Constructors.
      //
      FlatnessCharacteristicDefinitionType (const id_type&);

      FlatnessCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      FlatnessCharacteristicDefinitionType (const FlatnessCharacteristicDefinitionType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual FlatnessCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FlatnessCharacteristicDefinitionType&
      operator= (const FlatnessCharacteristicDefinitionType& x);

      virtual 
      ~FlatnessCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ToleranceValue_optional ToleranceValue_;
      ToleranceZonePerUnitArea_optional ToleranceZonePerUnitArea_;
      NotConvex_optional NotConvex_;
    };

    class FlatnessCharacteristicNominalType: public ::xsd::qif2::FormCharacteristicNominalBaseType
    {
      public:
      // CircularZoneLimit
      //
      typedef ::xsd::qif2::CharacteristicCircularZoneLimitType CircularZoneLimit_type;
      typedef ::xsd::cxx::tree::optional< CircularZoneLimit_type > CircularZoneLimit_optional;
      typedef ::xsd::cxx::tree::traits< CircularZoneLimit_type, char > CircularZoneLimit_traits;

      const CircularZoneLimit_optional&
      CircularZoneLimit () const;

      CircularZoneLimit_optional&
      CircularZoneLimit ();

      void
      CircularZoneLimit (const CircularZoneLimit_type& x);

      void
      CircularZoneLimit (const CircularZoneLimit_optional& x);

      void
      CircularZoneLimit (::std::auto_ptr< CircularZoneLimit_type > p);

      // DirectionalZoneLimit
      //
      typedef ::xsd::qif2::CharacteristicDirectionalZoneLimitType DirectionalZoneLimit_type;
      typedef ::xsd::cxx::tree::optional< DirectionalZoneLimit_type > DirectionalZoneLimit_optional;
      typedef ::xsd::cxx::tree::traits< DirectionalZoneLimit_type, char > DirectionalZoneLimit_traits;

      const DirectionalZoneLimit_optional&
      DirectionalZoneLimit () const;

      DirectionalZoneLimit_optional&
      DirectionalZoneLimit ();

      void
      DirectionalZoneLimit (const DirectionalZoneLimit_type& x);

      void
      DirectionalZoneLimit (const DirectionalZoneLimit_optional& x);

      void
      DirectionalZoneLimit (::std::auto_ptr< DirectionalZoneLimit_type > p);

      // RectangularZoneLimit
      //
      typedef ::xsd::qif2::CharacteristicRectangularZoneLimitType RectangularZoneLimit_type;
      typedef ::xsd::cxx::tree::optional< RectangularZoneLimit_type > RectangularZoneLimit_optional;
      typedef ::xsd::cxx::tree::traits< RectangularZoneLimit_type, char > RectangularZoneLimit_traits;

      const RectangularZoneLimit_optional&
      RectangularZoneLimit () const;

      RectangularZoneLimit_optional&
      RectangularZoneLimit ();

      void
      RectangularZoneLimit (const RectangularZoneLimit_type& x);

      void
      RectangularZoneLimit (const RectangularZoneLimit_optional& x);

      void
      RectangularZoneLimit (::std::auto_ptr< RectangularZoneLimit_type > p);

      // Constructors.
      //
      FlatnessCharacteristicNominalType (const id_type&,
                                         const CharacteristicDefinitionId_type&);

      FlatnessCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      FlatnessCharacteristicNominalType (const FlatnessCharacteristicNominalType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual FlatnessCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FlatnessCharacteristicNominalType&
      operator= (const FlatnessCharacteristicNominalType& x);

      virtual 
      ~FlatnessCharacteristicNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CircularZoneLimit_optional CircularZoneLimit_;
      DirectionalZoneLimit_optional DirectionalZoneLimit_;
      RectangularZoneLimit_optional RectangularZoneLimit_;
    };

    class FlatnessCharacteristicActualType: public ::xsd::qif2::FormCharacteristicActualBaseType
    {
      public:
      // MaxFlatness
      //
      typedef ::xsd::qif2::ActualLinearValueType MaxFlatness_type;
      typedef ::xsd::cxx::tree::optional< MaxFlatness_type > MaxFlatness_optional;
      typedef ::xsd::cxx::tree::traits< MaxFlatness_type, char > MaxFlatness_traits;

      const MaxFlatness_optional&
      MaxFlatness () const;

      MaxFlatness_optional&
      MaxFlatness ();

      void
      MaxFlatness (const MaxFlatness_type& x);

      void
      MaxFlatness (const MaxFlatness_optional& x);

      void
      MaxFlatness (::std::auto_ptr< MaxFlatness_type > p);

      // ZonePlane
      //
      typedef ::xsd::qif2::ActualPlaneType ZonePlane_type;
      typedef ::xsd::cxx::tree::optional< ZonePlane_type > ZonePlane_optional;
      typedef ::xsd::cxx::tree::traits< ZonePlane_type, char > ZonePlane_traits;

      const ZonePlane_optional&
      ZonePlane () const;

      ZonePlane_optional&
      ZonePlane ();

      void
      ZonePlane (const ZonePlane_type& x);

      void
      ZonePlane (const ZonePlane_optional& x);

      void
      ZonePlane (::std::auto_ptr< ZonePlane_type > p);

      // Constructors.
      //
      FlatnessCharacteristicActualType (const id_type&,
                                        const Status_type&,
                                        const CharacteristicItemId_type&);

      FlatnessCharacteristicActualType (const id_type&,
                                        ::std::auto_ptr< Status_type >,
                                        ::std::auto_ptr< CharacteristicItemId_type >);

      FlatnessCharacteristicActualType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      FlatnessCharacteristicActualType (const FlatnessCharacteristicActualType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual FlatnessCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FlatnessCharacteristicActualType&
      operator= (const FlatnessCharacteristicActualType& x);

      virtual 
      ~FlatnessCharacteristicActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      MaxFlatness_optional MaxFlatness_;
      ZonePlane_optional ZonePlane_;
    };

    class CircularityCharacteristicItemType: public ::xsd::qif2::FormCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      CircularityCharacteristicItemType (const id_type&,
                                         const Name_type&,
                                         const CharacteristicNominalId_type&);

      CircularityCharacteristicItemType (const id_type&,
                                         const Name_type&,
                                         ::std::auto_ptr< CharacteristicNominalId_type >);

      CircularityCharacteristicItemType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      CircularityCharacteristicItemType (const CircularityCharacteristicItemType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual CircularityCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CircularityCharacteristicItemType ();
    };

    class CircularityCharacteristicDefinitionType: public ::xsd::qif2::FormCharacteristicDefinitionBaseType
    {
      public:
      // ToleranceValue
      //
      typedef ::xsd::qif2::LinearValueType ToleranceValue_type;
      typedef ::xsd::cxx::tree::optional< ToleranceValue_type > ToleranceValue_optional;
      typedef ::xsd::cxx::tree::traits< ToleranceValue_type, char > ToleranceValue_traits;

      const ToleranceValue_optional&
      ToleranceValue () const;

      ToleranceValue_optional&
      ToleranceValue ();

      void
      ToleranceValue (const ToleranceValue_type& x);

      void
      ToleranceValue (const ToleranceValue_optional& x);

      void
      ToleranceValue (::std::auto_ptr< ToleranceValue_type > p);

      // ToleranceZonePerUnitAngle
      //
      typedef ::xsd::qif2::ToleranceZonePerUnitAngleType ToleranceZonePerUnitAngle_type;
      typedef ::xsd::cxx::tree::optional< ToleranceZonePerUnitAngle_type > ToleranceZonePerUnitAngle_optional;
      typedef ::xsd::cxx::tree::traits< ToleranceZonePerUnitAngle_type, char > ToleranceZonePerUnitAngle_traits;

      const ToleranceZonePerUnitAngle_optional&
      ToleranceZonePerUnitAngle () const;

      ToleranceZonePerUnitAngle_optional&
      ToleranceZonePerUnitAngle ();

      void
      ToleranceZonePerUnitAngle (const ToleranceZonePerUnitAngle_type& x);

      void
      ToleranceZonePerUnitAngle (const ToleranceZonePerUnitAngle_optional& x);

      void
      ToleranceZonePerUnitAngle (::std::auto_ptr< ToleranceZonePerUnitAngle_type > p);

      // ToleranceZonePerUnitArcLength
      //
      typedef ::xsd::qif2::ToleranceZonePerUnitLengthType ToleranceZonePerUnitArcLength_type;
      typedef ::xsd::cxx::tree::optional< ToleranceZonePerUnitArcLength_type > ToleranceZonePerUnitArcLength_optional;
      typedef ::xsd::cxx::tree::traits< ToleranceZonePerUnitArcLength_type, char > ToleranceZonePerUnitArcLength_traits;

      const ToleranceZonePerUnitArcLength_optional&
      ToleranceZonePerUnitArcLength () const;

      ToleranceZonePerUnitArcLength_optional&
      ToleranceZonePerUnitArcLength ();

      void
      ToleranceZonePerUnitArcLength (const ToleranceZonePerUnitArcLength_type& x);

      void
      ToleranceZonePerUnitArcLength (const ToleranceZonePerUnitArcLength_optional& x);

      void
      ToleranceZonePerUnitArcLength (::std::auto_ptr< ToleranceZonePerUnitArcLength_type > p);

      // Constructors.
      //
      CircularityCharacteristicDefinitionType (const id_type&);

      CircularityCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      CircularityCharacteristicDefinitionType (const CircularityCharacteristicDefinitionType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual CircularityCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircularityCharacteristicDefinitionType&
      operator= (const CircularityCharacteristicDefinitionType& x);

      virtual 
      ~CircularityCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ToleranceValue_optional ToleranceValue_;
      ToleranceZonePerUnitAngle_optional ToleranceZonePerUnitAngle_;
      ToleranceZonePerUnitArcLength_optional ToleranceZonePerUnitArcLength_;
    };

    class CircularityCharacteristicNominalType: public ::xsd::qif2::FormCharacteristicNominalBaseType
    {
      public:
      // ZoneLimit
      //
      typedef ::xsd::qif2::CharacteristicDirectionalZoneLimitType ZoneLimit_type;
      typedef ::xsd::cxx::tree::optional< ZoneLimit_type > ZoneLimit_optional;
      typedef ::xsd::cxx::tree::traits< ZoneLimit_type, char > ZoneLimit_traits;

      const ZoneLimit_optional&
      ZoneLimit () const;

      ZoneLimit_optional&
      ZoneLimit ();

      void
      ZoneLimit (const ZoneLimit_type& x);

      void
      ZoneLimit (const ZoneLimit_optional& x);

      void
      ZoneLimit (::std::auto_ptr< ZoneLimit_type > p);

      // Constructors.
      //
      CircularityCharacteristicNominalType (const id_type&,
                                            const CharacteristicDefinitionId_type&);

      CircularityCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      CircularityCharacteristicNominalType (const CircularityCharacteristicNominalType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual CircularityCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircularityCharacteristicNominalType&
      operator= (const CircularityCharacteristicNominalType& x);

      virtual 
      ~CircularityCharacteristicNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ZoneLimit_optional ZoneLimit_;
    };

    class CircularityCharacteristicActualType: public ::xsd::qif2::FormCharacteristicActualBaseType
    {
      public:
      // MaxCircularity
      //
      typedef ::xsd::qif2::ActualLinearValueType MaxCircularity_type;
      typedef ::xsd::cxx::tree::optional< MaxCircularity_type > MaxCircularity_optional;
      typedef ::xsd::cxx::tree::traits< MaxCircularity_type, char > MaxCircularity_traits;

      const MaxCircularity_optional&
      MaxCircularity () const;

      MaxCircularity_optional&
      MaxCircularity ();

      void
      MaxCircularity (const MaxCircularity_type& x);

      void
      MaxCircularity (const MaxCircularity_optional& x);

      void
      MaxCircularity (::std::auto_ptr< MaxCircularity_type > p);

      // ZoneRadii
      //
      typedef ::xsd::qif2::ActualZoneRadiiType ZoneRadii_type;
      typedef ::xsd::cxx::tree::optional< ZoneRadii_type > ZoneRadii_optional;
      typedef ::xsd::cxx::tree::traits< ZoneRadii_type, char > ZoneRadii_traits;

      const ZoneRadii_optional&
      ZoneRadii () const;

      ZoneRadii_optional&
      ZoneRadii ();

      void
      ZoneRadii (const ZoneRadii_type& x);

      void
      ZoneRadii (const ZoneRadii_optional& x);

      void
      ZoneRadii (::std::auto_ptr< ZoneRadii_type > p);

      // ZonePlane
      //
      typedef ::xsd::qif2::ActualPlaneType ZonePlane_type;
      typedef ::xsd::cxx::tree::optional< ZonePlane_type > ZonePlane_optional;
      typedef ::xsd::cxx::tree::traits< ZonePlane_type, char > ZonePlane_traits;

      const ZonePlane_optional&
      ZonePlane () const;

      ZonePlane_optional&
      ZonePlane ();

      void
      ZonePlane (const ZonePlane_type& x);

      void
      ZonePlane (const ZonePlane_optional& x);

      void
      ZonePlane (::std::auto_ptr< ZonePlane_type > p);

      // Constructors.
      //
      CircularityCharacteristicActualType (const id_type&,
                                           const Status_type&,
                                           const CharacteristicItemId_type&);

      CircularityCharacteristicActualType (const id_type&,
                                           ::std::auto_ptr< Status_type >,
                                           ::std::auto_ptr< CharacteristicItemId_type >);

      CircularityCharacteristicActualType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      CircularityCharacteristicActualType (const CircularityCharacteristicActualType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual CircularityCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircularityCharacteristicActualType&
      operator= (const CircularityCharacteristicActualType& x);

      virtual 
      ~CircularityCharacteristicActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      MaxCircularity_optional MaxCircularity_;
      ZoneRadii_optional ZoneRadii_;
      ZonePlane_optional ZonePlane_;
    };

    class CylindricityCharacteristicItemType: public ::xsd::qif2::FormCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      CylindricityCharacteristicItemType (const id_type&,
                                          const Name_type&,
                                          const CharacteristicNominalId_type&);

      CylindricityCharacteristicItemType (const id_type&,
                                          const Name_type&,
                                          ::std::auto_ptr< CharacteristicNominalId_type >);

      CylindricityCharacteristicItemType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      CylindricityCharacteristicItemType (const CylindricityCharacteristicItemType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual CylindricityCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CylindricityCharacteristicItemType ();
    };

    class CylindricityCharacteristicDefinitionType: public ::xsd::qif2::FormCharacteristicDefinitionBaseType
    {
      public:
      // ToleranceValue
      //
      typedef ::xsd::qif2::LinearValueType ToleranceValue_type;
      typedef ::xsd::cxx::tree::optional< ToleranceValue_type > ToleranceValue_optional;
      typedef ::xsd::cxx::tree::traits< ToleranceValue_type, char > ToleranceValue_traits;

      const ToleranceValue_optional&
      ToleranceValue () const;

      ToleranceValue_optional&
      ToleranceValue ();

      void
      ToleranceValue (const ToleranceValue_type& x);

      void
      ToleranceValue (const ToleranceValue_optional& x);

      void
      ToleranceValue (::std::auto_ptr< ToleranceValue_type > p);

      // ToleranceZonePerUnitAngle
      //
      typedef ::xsd::qif2::ToleranceZonePerUnitAngleType ToleranceZonePerUnitAngle_type;
      typedef ::xsd::cxx::tree::optional< ToleranceZonePerUnitAngle_type > ToleranceZonePerUnitAngle_optional;
      typedef ::xsd::cxx::tree::traits< ToleranceZonePerUnitAngle_type, char > ToleranceZonePerUnitAngle_traits;

      const ToleranceZonePerUnitAngle_optional&
      ToleranceZonePerUnitAngle () const;

      ToleranceZonePerUnitAngle_optional&
      ToleranceZonePerUnitAngle ();

      void
      ToleranceZonePerUnitAngle (const ToleranceZonePerUnitAngle_type& x);

      void
      ToleranceZonePerUnitAngle (const ToleranceZonePerUnitAngle_optional& x);

      void
      ToleranceZonePerUnitAngle (::std::auto_ptr< ToleranceZonePerUnitAngle_type > p);

      // ToleranceZonePerUnitArcLength
      //
      typedef ::xsd::qif2::ToleranceZonePerUnitLengthType ToleranceZonePerUnitArcLength_type;
      typedef ::xsd::cxx::tree::optional< ToleranceZonePerUnitArcLength_type > ToleranceZonePerUnitArcLength_optional;
      typedef ::xsd::cxx::tree::traits< ToleranceZonePerUnitArcLength_type, char > ToleranceZonePerUnitArcLength_traits;

      const ToleranceZonePerUnitArcLength_optional&
      ToleranceZonePerUnitArcLength () const;

      ToleranceZonePerUnitArcLength_optional&
      ToleranceZonePerUnitArcLength ();

      void
      ToleranceZonePerUnitArcLength (const ToleranceZonePerUnitArcLength_type& x);

      void
      ToleranceZonePerUnitArcLength (const ToleranceZonePerUnitArcLength_optional& x);

      void
      ToleranceZonePerUnitArcLength (::std::auto_ptr< ToleranceZonePerUnitArcLength_type > p);

      // ToleranceZonePerUnitPolarArea
      //
      typedef ::xsd::qif2::ToleranceZonePerUnitPolarAreaType ToleranceZonePerUnitPolarArea_type;
      typedef ::xsd::cxx::tree::optional< ToleranceZonePerUnitPolarArea_type > ToleranceZonePerUnitPolarArea_optional;
      typedef ::xsd::cxx::tree::traits< ToleranceZonePerUnitPolarArea_type, char > ToleranceZonePerUnitPolarArea_traits;

      const ToleranceZonePerUnitPolarArea_optional&
      ToleranceZonePerUnitPolarArea () const;

      ToleranceZonePerUnitPolarArea_optional&
      ToleranceZonePerUnitPolarArea ();

      void
      ToleranceZonePerUnitPolarArea (const ToleranceZonePerUnitPolarArea_type& x);

      void
      ToleranceZonePerUnitPolarArea (const ToleranceZonePerUnitPolarArea_optional& x);

      void
      ToleranceZonePerUnitPolarArea (::std::auto_ptr< ToleranceZonePerUnitPolarArea_type > p);

      // ToleranceZonePerUnitArea
      //
      typedef ::xsd::qif2::ToleranceZonePerUnitAreaType ToleranceZonePerUnitArea_type;
      typedef ::xsd::cxx::tree::optional< ToleranceZonePerUnitArea_type > ToleranceZonePerUnitArea_optional;
      typedef ::xsd::cxx::tree::traits< ToleranceZonePerUnitArea_type, char > ToleranceZonePerUnitArea_traits;

      const ToleranceZonePerUnitArea_optional&
      ToleranceZonePerUnitArea () const;

      ToleranceZonePerUnitArea_optional&
      ToleranceZonePerUnitArea ();

      void
      ToleranceZonePerUnitArea (const ToleranceZonePerUnitArea_type& x);

      void
      ToleranceZonePerUnitArea (const ToleranceZonePerUnitArea_optional& x);

      void
      ToleranceZonePerUnitArea (::std::auto_ptr< ToleranceZonePerUnitArea_type > p);

      // ToleranceZonePerUnitLength
      //
      typedef ::xsd::qif2::ToleranceZonePerUnitLengthType ToleranceZonePerUnitLength_type;
      typedef ::xsd::cxx::tree::optional< ToleranceZonePerUnitLength_type > ToleranceZonePerUnitLength_optional;
      typedef ::xsd::cxx::tree::traits< ToleranceZonePerUnitLength_type, char > ToleranceZonePerUnitLength_traits;

      const ToleranceZonePerUnitLength_optional&
      ToleranceZonePerUnitLength () const;

      ToleranceZonePerUnitLength_optional&
      ToleranceZonePerUnitLength ();

      void
      ToleranceZonePerUnitLength (const ToleranceZonePerUnitLength_type& x);

      void
      ToleranceZonePerUnitLength (const ToleranceZonePerUnitLength_optional& x);

      void
      ToleranceZonePerUnitLength (::std::auto_ptr< ToleranceZonePerUnitLength_type > p);

      // Constructors.
      //
      CylindricityCharacteristicDefinitionType (const id_type&);

      CylindricityCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      CylindricityCharacteristicDefinitionType (const CylindricityCharacteristicDefinitionType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual CylindricityCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylindricityCharacteristicDefinitionType&
      operator= (const CylindricityCharacteristicDefinitionType& x);

      virtual 
      ~CylindricityCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ToleranceValue_optional ToleranceValue_;
      ToleranceZonePerUnitAngle_optional ToleranceZonePerUnitAngle_;
      ToleranceZonePerUnitArcLength_optional ToleranceZonePerUnitArcLength_;
      ToleranceZonePerUnitPolarArea_optional ToleranceZonePerUnitPolarArea_;
      ToleranceZonePerUnitArea_optional ToleranceZonePerUnitArea_;
      ToleranceZonePerUnitLength_optional ToleranceZonePerUnitLength_;
    };

    class CylindricityCharacteristicNominalType: public ::xsd::qif2::FormCharacteristicNominalBaseType
    {
      public:
      // ZoneLimit
      //
      typedef ::xsd::qif2::CharacteristicDirectionalZoneLimitType ZoneLimit_type;
      typedef ::xsd::cxx::tree::optional< ZoneLimit_type > ZoneLimit_optional;
      typedef ::xsd::cxx::tree::traits< ZoneLimit_type, char > ZoneLimit_traits;

      const ZoneLimit_optional&
      ZoneLimit () const;

      ZoneLimit_optional&
      ZoneLimit ();

      void
      ZoneLimit (const ZoneLimit_type& x);

      void
      ZoneLimit (const ZoneLimit_optional& x);

      void
      ZoneLimit (::std::auto_ptr< ZoneLimit_type > p);

      // Constructors.
      //
      CylindricityCharacteristicNominalType (const id_type&,
                                             const CharacteristicDefinitionId_type&);

      CylindricityCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      CylindricityCharacteristicNominalType (const CylindricityCharacteristicNominalType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual CylindricityCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylindricityCharacteristicNominalType&
      operator= (const CylindricityCharacteristicNominalType& x);

      virtual 
      ~CylindricityCharacteristicNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ZoneLimit_optional ZoneLimit_;
    };

    class CylindricityCharacteristicActualType: public ::xsd::qif2::FormCharacteristicActualBaseType
    {
      public:
      // MaxCylindricity
      //
      typedef ::xsd::qif2::ActualLinearValueType MaxCylindricity_type;
      typedef ::xsd::cxx::tree::optional< MaxCylindricity_type > MaxCylindricity_optional;
      typedef ::xsd::cxx::tree::traits< MaxCylindricity_type, char > MaxCylindricity_traits;

      const MaxCylindricity_optional&
      MaxCylindricity () const;

      MaxCylindricity_optional&
      MaxCylindricity ();

      void
      MaxCylindricity (const MaxCylindricity_type& x);

      void
      MaxCylindricity (const MaxCylindricity_optional& x);

      void
      MaxCylindricity (::std::auto_ptr< MaxCylindricity_type > p);

      // ZoneRadii
      //
      typedef ::xsd::qif2::ActualZoneRadiiType ZoneRadii_type;
      typedef ::xsd::cxx::tree::optional< ZoneRadii_type > ZoneRadii_optional;
      typedef ::xsd::cxx::tree::traits< ZoneRadii_type, char > ZoneRadii_traits;

      const ZoneRadii_optional&
      ZoneRadii () const;

      ZoneRadii_optional&
      ZoneRadii ();

      void
      ZoneRadii (const ZoneRadii_type& x);

      void
      ZoneRadii (const ZoneRadii_optional& x);

      void
      ZoneRadii (::std::auto_ptr< ZoneRadii_type > p);

      // ZoneAxis
      //
      typedef ::xsd::qif2::ActualZoneAxisType ZoneAxis_type;
      typedef ::xsd::cxx::tree::optional< ZoneAxis_type > ZoneAxis_optional;
      typedef ::xsd::cxx::tree::traits< ZoneAxis_type, char > ZoneAxis_traits;

      const ZoneAxis_optional&
      ZoneAxis () const;

      ZoneAxis_optional&
      ZoneAxis ();

      void
      ZoneAxis (const ZoneAxis_type& x);

      void
      ZoneAxis (const ZoneAxis_optional& x);

      void
      ZoneAxis (::std::auto_ptr< ZoneAxis_type > p);

      // Constructors.
      //
      CylindricityCharacteristicActualType (const id_type&,
                                            const Status_type&,
                                            const CharacteristicItemId_type&);

      CylindricityCharacteristicActualType (const id_type&,
                                            ::std::auto_ptr< Status_type >,
                                            ::std::auto_ptr< CharacteristicItemId_type >);

      CylindricityCharacteristicActualType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      CylindricityCharacteristicActualType (const CylindricityCharacteristicActualType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual CylindricityCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylindricityCharacteristicActualType&
      operator= (const CylindricityCharacteristicActualType& x);

      virtual 
      ~CylindricityCharacteristicActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      MaxCylindricity_optional MaxCylindricity_;
      ZoneRadii_optional ZoneRadii_;
      ZoneAxis_optional ZoneAxis_;
    };

    class LocationCharacteristicItemBaseType: public ::xsd::qif2::GeometricCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      LocationCharacteristicItemBaseType (const id_type&,
                                          const Name_type&,
                                          const CharacteristicNominalId_type&);

      LocationCharacteristicItemBaseType (const id_type&,
                                          const Name_type&,
                                          ::std::auto_ptr< CharacteristicNominalId_type >);

      LocationCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      LocationCharacteristicItemBaseType (const LocationCharacteristicItemBaseType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual LocationCharacteristicItemBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~LocationCharacteristicItemBaseType ();
    };

    class LocationCharacteristicDefinitionBaseType: public ::xsd::qif2::GeometricCharacteristicDefinitionBaseType
    {
      public:
      // ToleranceValue
      //
      typedef ::xsd::qif2::LinearValueType ToleranceValue_type;
      typedef ::xsd::cxx::tree::traits< ToleranceValue_type, char > ToleranceValue_traits;

      const ToleranceValue_type&
      ToleranceValue () const;

      ToleranceValue_type&
      ToleranceValue ();

      void
      ToleranceValue (const ToleranceValue_type& x);

      void
      ToleranceValue (::std::auto_ptr< ToleranceValue_type > p);

      // DatumReferenceFrameId
      //
      typedef ::xsd::qif2::QIFReferenceFullType DatumReferenceFrameId_type;
      typedef ::xsd::cxx::tree::traits< DatumReferenceFrameId_type, char > DatumReferenceFrameId_traits;

      const DatumReferenceFrameId_type&
      DatumReferenceFrameId () const;

      DatumReferenceFrameId_type&
      DatumReferenceFrameId ();

      void
      DatumReferenceFrameId (const DatumReferenceFrameId_type& x);

      void
      DatumReferenceFrameId (::std::auto_ptr< DatumReferenceFrameId_type > p);

      // Constructors.
      //
      LocationCharacteristicDefinitionBaseType (const id_type&,
                                                const ToleranceValue_type&,
                                                const DatumReferenceFrameId_type&);

      LocationCharacteristicDefinitionBaseType (const id_type&,
                                                ::std::auto_ptr< ToleranceValue_type >,
                                                ::std::auto_ptr< DatumReferenceFrameId_type >);

      LocationCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      LocationCharacteristicDefinitionBaseType (const LocationCharacteristicDefinitionBaseType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual LocationCharacteristicDefinitionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LocationCharacteristicDefinitionBaseType&
      operator= (const LocationCharacteristicDefinitionBaseType& x);

      virtual 
      ~LocationCharacteristicDefinitionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ToleranceValue_type > ToleranceValue_;
      ::xsd::cxx::tree::one< DatumReferenceFrameId_type > DatumReferenceFrameId_;
    };

    class LocationCharacteristicNominalBaseType: public ::xsd::qif2::GeometricCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      LocationCharacteristicNominalBaseType (const id_type&,
                                             const CharacteristicDefinitionId_type&);

      LocationCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      LocationCharacteristicNominalBaseType (const LocationCharacteristicNominalBaseType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual LocationCharacteristicNominalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~LocationCharacteristicNominalBaseType ();
    };

    class LocationCharacteristicActualBaseType: public ::xsd::qif2::GeometricCharacteristicActualBaseType
    {
      public:
      // ZoneData
      //
      typedef ::xsd::qif2::ZoneDataType ZoneData_type;
      typedef ::xsd::cxx::tree::sequence< ZoneData_type > ZoneData_sequence;
      typedef ZoneData_sequence::iterator ZoneData_iterator;
      typedef ZoneData_sequence::const_iterator ZoneData_const_iterator;
      typedef ::xsd::cxx::tree::traits< ZoneData_type, char > ZoneData_traits;

      const ZoneData_sequence&
      ZoneData () const;

      ZoneData_sequence&
      ZoneData ();

      void
      ZoneData (const ZoneData_sequence& s);

      // DatumsOk
      //
      typedef ::xml_schema::boolean DatumsOk_type;
      typedef ::xsd::cxx::tree::optional< DatumsOk_type > DatumsOk_optional;
      typedef ::xsd::cxx::tree::traits< DatumsOk_type, char > DatumsOk_traits;

      const DatumsOk_optional&
      DatumsOk () const;

      DatumsOk_optional&
      DatumsOk ();

      void
      DatumsOk (const DatumsOk_type& x);

      void
      DatumsOk (const DatumsOk_optional& x);

      // Constructors.
      //
      LocationCharacteristicActualBaseType (const id_type&,
                                            const Status_type&,
                                            const CharacteristicItemId_type&);

      LocationCharacteristicActualBaseType (const id_type&,
                                            ::std::auto_ptr< Status_type >,
                                            ::std::auto_ptr< CharacteristicItemId_type >);

      LocationCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      LocationCharacteristicActualBaseType (const LocationCharacteristicActualBaseType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual LocationCharacteristicActualBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LocationCharacteristicActualBaseType&
      operator= (const LocationCharacteristicActualBaseType& x);

      virtual 
      ~LocationCharacteristicActualBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ZoneData_sequence ZoneData_;
      DatumsOk_optional DatumsOk_;
    };

    class PositionCharacteristicItemType: public ::xsd::qif2::LocationCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      PositionCharacteristicItemType (const id_type&,
                                      const Name_type&,
                                      const CharacteristicNominalId_type&);

      PositionCharacteristicItemType (const id_type&,
                                      const Name_type&,
                                      ::std::auto_ptr< CharacteristicNominalId_type >);

      PositionCharacteristicItemType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      PositionCharacteristicItemType (const PositionCharacteristicItemType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual PositionCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PositionCharacteristicItemType ();
    };

    class PositionSphericalZoneType: public ::xml_schema::type
    {
      public:
      // Dimensionality
      //
      typedef ::xsd::qif2::DimensionCountEnumType Dimensionality_type;
      typedef ::xsd::cxx::tree::optional< Dimensionality_type > Dimensionality_optional;
      typedef ::xsd::cxx::tree::traits< Dimensionality_type, char > Dimensionality_traits;

      const Dimensionality_optional&
      Dimensionality () const;

      Dimensionality_optional&
      Dimensionality ();

      void
      Dimensionality (const Dimensionality_type& x);

      void
      Dimensionality (const Dimensionality_optional& x);

      void
      Dimensionality (::std::auto_ptr< Dimensionality_type > p);

      static const Dimensionality_type&
      Dimensionality_default_value ();

      // Constructors.
      //
      PositionSphericalZoneType ();

      PositionSphericalZoneType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      PositionSphericalZoneType (const PositionSphericalZoneType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual PositionSphericalZoneType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PositionSphericalZoneType&
      operator= (const PositionSphericalZoneType& x);

      virtual 
      ~PositionSphericalZoneType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Dimensionality_optional Dimensionality_;
      static const Dimensionality_type Dimensionality_default_value_;
    };

    class PositionDiametricalZoneType: public ::xml_schema::type
    {
      public:
      // Dimensionality
      //
      typedef ::xsd::qif2::DimensionCountEnumType Dimensionality_type;
      typedef ::xsd::cxx::tree::optional< Dimensionality_type > Dimensionality_optional;
      typedef ::xsd::cxx::tree::traits< Dimensionality_type, char > Dimensionality_traits;

      const Dimensionality_optional&
      Dimensionality () const;

      Dimensionality_optional&
      Dimensionality ();

      void
      Dimensionality (const Dimensionality_type& x);

      void
      Dimensionality (const Dimensionality_optional& x);

      void
      Dimensionality (::std::auto_ptr< Dimensionality_type > p);

      // ZoneOrientationVector
      //
      typedef ::xsd::qif2::UnitVectorType ZoneOrientationVector_type;
      typedef ::xsd::cxx::tree::optional< ZoneOrientationVector_type > ZoneOrientationVector_optional;
      typedef ::xsd::cxx::tree::traits< ZoneOrientationVector_type, char > ZoneOrientationVector_traits;

      const ZoneOrientationVector_optional&
      ZoneOrientationVector () const;

      ZoneOrientationVector_optional&
      ZoneOrientationVector ();

      void
      ZoneOrientationVector (const ZoneOrientationVector_type& x);

      void
      ZoneOrientationVector (const ZoneOrientationVector_optional& x);

      void
      ZoneOrientationVector (::std::auto_ptr< ZoneOrientationVector_type > p);

      // ElongatedZone
      //
      typedef ::xml_schema::boolean ElongatedZone_type;
      typedef ::xsd::cxx::tree::optional< ElongatedZone_type > ElongatedZone_optional;
      typedef ::xsd::cxx::tree::traits< ElongatedZone_type, char > ElongatedZone_traits;

      const ElongatedZone_optional&
      ElongatedZone () const;

      ElongatedZone_optional&
      ElongatedZone ();

      void
      ElongatedZone (const ElongatedZone_type& x);

      void
      ElongatedZone (const ElongatedZone_optional& x);

      // Constructors.
      //
      PositionDiametricalZoneType ();

      PositionDiametricalZoneType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      PositionDiametricalZoneType (const PositionDiametricalZoneType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual PositionDiametricalZoneType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PositionDiametricalZoneType&
      operator= (const PositionDiametricalZoneType& x);

      virtual 
      ~PositionDiametricalZoneType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Dimensionality_optional Dimensionality_;
      ZoneOrientationVector_optional ZoneOrientationVector_;
      ElongatedZone_optional ElongatedZone_;
    };

    class PositionNonDiametricalZoneType: public ::xml_schema::type
    {
      public:
      // Dimensionality
      //
      typedef ::xsd::qif2::DimensionCountEnumType Dimensionality_type;
      typedef ::xsd::cxx::tree::optional< Dimensionality_type > Dimensionality_optional;
      typedef ::xsd::cxx::tree::traits< Dimensionality_type, char > Dimensionality_traits;

      const Dimensionality_optional&
      Dimensionality () const;

      Dimensionality_optional&
      Dimensionality ();

      void
      Dimensionality (const Dimensionality_type& x);

      void
      Dimensionality (const Dimensionality_optional& x);

      void
      Dimensionality (::std::auto_ptr< Dimensionality_type > p);

      // ZoneOrientationVector
      //
      typedef ::xsd::qif2::UnitVectorType ZoneOrientationVector_type;
      typedef ::xsd::cxx::tree::optional< ZoneOrientationVector_type > ZoneOrientationVector_optional;
      typedef ::xsd::cxx::tree::traits< ZoneOrientationVector_type, char > ZoneOrientationVector_traits;

      const ZoneOrientationVector_optional&
      ZoneOrientationVector () const;

      ZoneOrientationVector_optional&
      ZoneOrientationVector ();

      void
      ZoneOrientationVector (const ZoneOrientationVector_type& x);

      void
      ZoneOrientationVector (const ZoneOrientationVector_optional& x);

      void
      ZoneOrientationVector (::std::auto_ptr< ZoneOrientationVector_type > p);

      // BoundaryZone
      //
      typedef ::xml_schema::boolean BoundaryZone_type;
      typedef ::xsd::cxx::tree::optional< BoundaryZone_type > BoundaryZone_optional;
      typedef ::xsd::cxx::tree::traits< BoundaryZone_type, char > BoundaryZone_traits;

      const BoundaryZone_optional&
      BoundaryZone () const;

      BoundaryZone_optional&
      BoundaryZone ();

      void
      BoundaryZone (const BoundaryZone_type& x);

      void
      BoundaryZone (const BoundaryZone_optional& x);

      // Constructors.
      //
      PositionNonDiametricalZoneType ();

      PositionNonDiametricalZoneType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      PositionNonDiametricalZoneType (const PositionNonDiametricalZoneType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual PositionNonDiametricalZoneType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PositionNonDiametricalZoneType&
      operator= (const PositionNonDiametricalZoneType& x);

      virtual 
      ~PositionNonDiametricalZoneType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Dimensionality_optional Dimensionality_;
      ZoneOrientationVector_optional ZoneOrientationVector_;
      BoundaryZone_optional BoundaryZone_;
    };

    class PositionZoneShapeType: public ::xml_schema::type
    {
      public:
      // SphericalZone
      //
      typedef ::xsd::qif2::PositionSphericalZoneType SphericalZone_type;
      typedef ::xsd::cxx::tree::optional< SphericalZone_type > SphericalZone_optional;
      typedef ::xsd::cxx::tree::traits< SphericalZone_type, char > SphericalZone_traits;

      const SphericalZone_optional&
      SphericalZone () const;

      SphericalZone_optional&
      SphericalZone ();

      void
      SphericalZone (const SphericalZone_type& x);

      void
      SphericalZone (const SphericalZone_optional& x);

      void
      SphericalZone (::std::auto_ptr< SphericalZone_type > p);

      // DiametricalZone
      //
      typedef ::xsd::qif2::PositionDiametricalZoneType DiametricalZone_type;
      typedef ::xsd::cxx::tree::optional< DiametricalZone_type > DiametricalZone_optional;
      typedef ::xsd::cxx::tree::traits< DiametricalZone_type, char > DiametricalZone_traits;

      const DiametricalZone_optional&
      DiametricalZone () const;

      DiametricalZone_optional&
      DiametricalZone ();

      void
      DiametricalZone (const DiametricalZone_type& x);

      void
      DiametricalZone (const DiametricalZone_optional& x);

      void
      DiametricalZone (::std::auto_ptr< DiametricalZone_type > p);

      // NonDiametricalZone
      //
      typedef ::xsd::qif2::PositionNonDiametricalZoneType NonDiametricalZone_type;
      typedef ::xsd::cxx::tree::optional< NonDiametricalZone_type > NonDiametricalZone_optional;
      typedef ::xsd::cxx::tree::traits< NonDiametricalZone_type, char > NonDiametricalZone_traits;

      const NonDiametricalZone_optional&
      NonDiametricalZone () const;

      NonDiametricalZone_optional&
      NonDiametricalZone ();

      void
      NonDiametricalZone (const NonDiametricalZone_type& x);

      void
      NonDiametricalZone (const NonDiametricalZone_optional& x);

      void
      NonDiametricalZone (::std::auto_ptr< NonDiametricalZone_type > p);

      // Constructors.
      //
      PositionZoneShapeType ();

      PositionZoneShapeType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      PositionZoneShapeType (const PositionZoneShapeType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual PositionZoneShapeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PositionZoneShapeType&
      operator= (const PositionZoneShapeType& x);

      virtual 
      ~PositionZoneShapeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      SphericalZone_optional SphericalZone_;
      DiametricalZone_optional DiametricalZone_;
      NonDiametricalZone_optional NonDiametricalZone_;
    };

    class PositionCharacteristicDefinitionType: public ::xsd::qif2::LocationCharacteristicDefinitionBaseType
    {
      public:
      // MaterialCondition
      //
      typedef ::xsd::qif2::MaterialModifierEnumType MaterialCondition_type;
      typedef ::xsd::cxx::tree::traits< MaterialCondition_type, char > MaterialCondition_traits;

      const MaterialCondition_type&
      MaterialCondition () const;

      MaterialCondition_type&
      MaterialCondition ();

      void
      MaterialCondition (const MaterialCondition_type& x);

      void
      MaterialCondition (::std::auto_ptr< MaterialCondition_type > p);

      // ZoneShape
      //
      typedef ::xsd::qif2::PositionZoneShapeType ZoneShape_type;
      typedef ::xsd::cxx::tree::traits< ZoneShape_type, char > ZoneShape_traits;

      const ZoneShape_type&
      ZoneShape () const;

      ZoneShape_type&
      ZoneShape ();

      void
      ZoneShape (const ZoneShape_type& x);

      void
      ZoneShape (::std::auto_ptr< ZoneShape_type > p);

      // ProjectedToleranceZoneValue
      //
      typedef ::xsd::qif2::LinearValueType ProjectedToleranceZoneValue_type;
      typedef ::xsd::cxx::tree::optional< ProjectedToleranceZoneValue_type > ProjectedToleranceZoneValue_optional;
      typedef ::xsd::cxx::tree::traits< ProjectedToleranceZoneValue_type, char > ProjectedToleranceZoneValue_traits;

      const ProjectedToleranceZoneValue_optional&
      ProjectedToleranceZoneValue () const;

      ProjectedToleranceZoneValue_optional&
      ProjectedToleranceZoneValue ();

      void
      ProjectedToleranceZoneValue (const ProjectedToleranceZoneValue_type& x);

      void
      ProjectedToleranceZoneValue (const ProjectedToleranceZoneValue_optional& x);

      void
      ProjectedToleranceZoneValue (::std::auto_ptr< ProjectedToleranceZoneValue_type > p);

      // SecondCompositeSegmentPositionDefinition
      //
      typedef ::xsd::qif2::CompositeSegmentPositionDefinitionType SecondCompositeSegmentPositionDefinition_type;
      typedef ::xsd::cxx::tree::optional< SecondCompositeSegmentPositionDefinition_type > SecondCompositeSegmentPositionDefinition_optional;
      typedef ::xsd::cxx::tree::traits< SecondCompositeSegmentPositionDefinition_type, char > SecondCompositeSegmentPositionDefinition_traits;

      const SecondCompositeSegmentPositionDefinition_optional&
      SecondCompositeSegmentPositionDefinition () const;

      SecondCompositeSegmentPositionDefinition_optional&
      SecondCompositeSegmentPositionDefinition ();

      void
      SecondCompositeSegmentPositionDefinition (const SecondCompositeSegmentPositionDefinition_type& x);

      void
      SecondCompositeSegmentPositionDefinition (const SecondCompositeSegmentPositionDefinition_optional& x);

      void
      SecondCompositeSegmentPositionDefinition (::std::auto_ptr< SecondCompositeSegmentPositionDefinition_type > p);

      // ThirdCompositeSegmentPositionDefinition
      //
      typedef ::xsd::qif2::CompositeSegmentPositionDefinitionType ThirdCompositeSegmentPositionDefinition_type;
      typedef ::xsd::cxx::tree::optional< ThirdCompositeSegmentPositionDefinition_type > ThirdCompositeSegmentPositionDefinition_optional;
      typedef ::xsd::cxx::tree::traits< ThirdCompositeSegmentPositionDefinition_type, char > ThirdCompositeSegmentPositionDefinition_traits;

      const ThirdCompositeSegmentPositionDefinition_optional&
      ThirdCompositeSegmentPositionDefinition () const;

      ThirdCompositeSegmentPositionDefinition_optional&
      ThirdCompositeSegmentPositionDefinition ();

      void
      ThirdCompositeSegmentPositionDefinition (const ThirdCompositeSegmentPositionDefinition_type& x);

      void
      ThirdCompositeSegmentPositionDefinition (const ThirdCompositeSegmentPositionDefinition_optional& x);

      void
      ThirdCompositeSegmentPositionDefinition (::std::auto_ptr< ThirdCompositeSegmentPositionDefinition_type > p);

      // FourthCompositeSegmentPositionDefinition
      //
      typedef ::xsd::qif2::CompositeSegmentPositionDefinitionType FourthCompositeSegmentPositionDefinition_type;
      typedef ::xsd::cxx::tree::optional< FourthCompositeSegmentPositionDefinition_type > FourthCompositeSegmentPositionDefinition_optional;
      typedef ::xsd::cxx::tree::traits< FourthCompositeSegmentPositionDefinition_type, char > FourthCompositeSegmentPositionDefinition_traits;

      const FourthCompositeSegmentPositionDefinition_optional&
      FourthCompositeSegmentPositionDefinition () const;

      FourthCompositeSegmentPositionDefinition_optional&
      FourthCompositeSegmentPositionDefinition ();

      void
      FourthCompositeSegmentPositionDefinition (const FourthCompositeSegmentPositionDefinition_type& x);

      void
      FourthCompositeSegmentPositionDefinition (const FourthCompositeSegmentPositionDefinition_optional& x);

      void
      FourthCompositeSegmentPositionDefinition (::std::auto_ptr< FourthCompositeSegmentPositionDefinition_type > p);

      // ToPointToleranceValue
      //
      typedef ::xsd::qif2::LinearValueType ToPointToleranceValue_type;
      typedef ::xsd::cxx::tree::optional< ToPointToleranceValue_type > ToPointToleranceValue_optional;
      typedef ::xsd::cxx::tree::traits< ToPointToleranceValue_type, char > ToPointToleranceValue_traits;

      const ToPointToleranceValue_optional&
      ToPointToleranceValue () const;

      ToPointToleranceValue_optional&
      ToPointToleranceValue ();

      void
      ToPointToleranceValue (const ToPointToleranceValue_type& x);

      void
      ToPointToleranceValue (const ToPointToleranceValue_optional& x);

      void
      ToPointToleranceValue (::std::auto_ptr< ToPointToleranceValue_type > p);

      // OrientationOnly
      //
      typedef ::xml_schema::boolean OrientationOnly_type;
      typedef ::xsd::cxx::tree::optional< OrientationOnly_type > OrientationOnly_optional;
      typedef ::xsd::cxx::tree::traits< OrientationOnly_type, char > OrientationOnly_traits;

      const OrientationOnly_optional&
      OrientationOnly () const;

      OrientationOnly_optional&
      OrientationOnly ();

      void
      OrientationOnly (const OrientationOnly_type& x);

      void
      OrientationOnly (const OrientationOnly_optional& x);

      // Constructors.
      //
      PositionCharacteristicDefinitionType (const id_type&,
                                            const ToleranceValue_type&,
                                            const DatumReferenceFrameId_type&,
                                            const MaterialCondition_type&,
                                            const ZoneShape_type&);

      PositionCharacteristicDefinitionType (const id_type&,
                                            ::std::auto_ptr< ToleranceValue_type >,
                                            ::std::auto_ptr< DatumReferenceFrameId_type >,
                                            const MaterialCondition_type&,
                                            ::std::auto_ptr< ZoneShape_type >);

      PositionCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      PositionCharacteristicDefinitionType (const PositionCharacteristicDefinitionType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual PositionCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PositionCharacteristicDefinitionType&
      operator= (const PositionCharacteristicDefinitionType& x);

      virtual 
      ~PositionCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< MaterialCondition_type > MaterialCondition_;
      ::xsd::cxx::tree::one< ZoneShape_type > ZoneShape_;
      ProjectedToleranceZoneValue_optional ProjectedToleranceZoneValue_;
      SecondCompositeSegmentPositionDefinition_optional SecondCompositeSegmentPositionDefinition_;
      ThirdCompositeSegmentPositionDefinition_optional ThirdCompositeSegmentPositionDefinition_;
      FourthCompositeSegmentPositionDefinition_optional FourthCompositeSegmentPositionDefinition_;
      ToPointToleranceValue_optional ToPointToleranceValue_;
      OrientationOnly_optional OrientationOnly_;
    };

    class PositionCharacteristicNominalType: public ::xsd::qif2::LocationCharacteristicNominalBaseType
    {
      public:
      // ZoneLimit
      //
      typedef ::xsd::qif2::CharacteristicDirectionalZoneLimitType ZoneLimit_type;
      typedef ::xsd::cxx::tree::optional< ZoneLimit_type > ZoneLimit_optional;
      typedef ::xsd::cxx::tree::traits< ZoneLimit_type, char > ZoneLimit_traits;

      const ZoneLimit_optional&
      ZoneLimit () const;

      ZoneLimit_optional&
      ZoneLimit ();

      void
      ZoneLimit (const ZoneLimit_type& x);

      void
      ZoneLimit (const ZoneLimit_optional& x);

      void
      ZoneLimit (::std::auto_ptr< ZoneLimit_type > p);

      // Constructors.
      //
      PositionCharacteristicNominalType (const id_type&,
                                         const CharacteristicDefinitionId_type&);

      PositionCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      PositionCharacteristicNominalType (const PositionCharacteristicNominalType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual PositionCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PositionCharacteristicNominalType&
      operator= (const PositionCharacteristicNominalType& x);

      virtual 
      ~PositionCharacteristicNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ZoneLimit_optional ZoneLimit_;
    };

    class PositionCharacteristicActualType: public ::xsd::qif2::LocationCharacteristicActualBaseType
    {
      public:
      // DRFTransformActualId
      //
      typedef ::xsd::qif2::QIFReferenceFullType DRFTransformActualId_type;
      typedef ::xsd::cxx::tree::optional< DRFTransformActualId_type > DRFTransformActualId_optional;
      typedef ::xsd::cxx::tree::traits< DRFTransformActualId_type, char > DRFTransformActualId_traits;

      const DRFTransformActualId_optional&
      DRFTransformActualId () const;

      DRFTransformActualId_optional&
      DRFTransformActualId ();

      void
      DRFTransformActualId (const DRFTransformActualId_type& x);

      void
      DRFTransformActualId (const DRFTransformActualId_optional& x);

      void
      DRFTransformActualId (::std::auto_ptr< DRFTransformActualId_type > p);

      // SecondCompositeSegmentPositionActual
      //
      typedef ::xsd::qif2::CompositeSegmentPositionActualType SecondCompositeSegmentPositionActual_type;
      typedef ::xsd::cxx::tree::optional< SecondCompositeSegmentPositionActual_type > SecondCompositeSegmentPositionActual_optional;
      typedef ::xsd::cxx::tree::traits< SecondCompositeSegmentPositionActual_type, char > SecondCompositeSegmentPositionActual_traits;

      const SecondCompositeSegmentPositionActual_optional&
      SecondCompositeSegmentPositionActual () const;

      SecondCompositeSegmentPositionActual_optional&
      SecondCompositeSegmentPositionActual ();

      void
      SecondCompositeSegmentPositionActual (const SecondCompositeSegmentPositionActual_type& x);

      void
      SecondCompositeSegmentPositionActual (const SecondCompositeSegmentPositionActual_optional& x);

      void
      SecondCompositeSegmentPositionActual (::std::auto_ptr< SecondCompositeSegmentPositionActual_type > p);

      // ThirdCompositeSegmentPositionActual
      //
      typedef ::xsd::qif2::CompositeSegmentPositionActualType ThirdCompositeSegmentPositionActual_type;
      typedef ::xsd::cxx::tree::optional< ThirdCompositeSegmentPositionActual_type > ThirdCompositeSegmentPositionActual_optional;
      typedef ::xsd::cxx::tree::traits< ThirdCompositeSegmentPositionActual_type, char > ThirdCompositeSegmentPositionActual_traits;

      const ThirdCompositeSegmentPositionActual_optional&
      ThirdCompositeSegmentPositionActual () const;

      ThirdCompositeSegmentPositionActual_optional&
      ThirdCompositeSegmentPositionActual ();

      void
      ThirdCompositeSegmentPositionActual (const ThirdCompositeSegmentPositionActual_type& x);

      void
      ThirdCompositeSegmentPositionActual (const ThirdCompositeSegmentPositionActual_optional& x);

      void
      ThirdCompositeSegmentPositionActual (::std::auto_ptr< ThirdCompositeSegmentPositionActual_type > p);

      // FourthCompositeSegmentPositionActual
      //
      typedef ::xsd::qif2::CompositeSegmentPositionActualType FourthCompositeSegmentPositionActual_type;
      typedef ::xsd::cxx::tree::optional< FourthCompositeSegmentPositionActual_type > FourthCompositeSegmentPositionActual_optional;
      typedef ::xsd::cxx::tree::traits< FourthCompositeSegmentPositionActual_type, char > FourthCompositeSegmentPositionActual_traits;

      const FourthCompositeSegmentPositionActual_optional&
      FourthCompositeSegmentPositionActual () const;

      FourthCompositeSegmentPositionActual_optional&
      FourthCompositeSegmentPositionActual ();

      void
      FourthCompositeSegmentPositionActual (const FourthCompositeSegmentPositionActual_type& x);

      void
      FourthCompositeSegmentPositionActual (const FourthCompositeSegmentPositionActual_optional& x);

      void
      FourthCompositeSegmentPositionActual (::std::auto_ptr< FourthCompositeSegmentPositionActual_type > p);

      // Constructors.
      //
      PositionCharacteristicActualType (const id_type&,
                                        const Status_type&,
                                        const CharacteristicItemId_type&);

      PositionCharacteristicActualType (const id_type&,
                                        ::std::auto_ptr< Status_type >,
                                        ::std::auto_ptr< CharacteristicItemId_type >);

      PositionCharacteristicActualType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      PositionCharacteristicActualType (const PositionCharacteristicActualType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual PositionCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PositionCharacteristicActualType&
      operator= (const PositionCharacteristicActualType& x);

      virtual 
      ~PositionCharacteristicActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      DRFTransformActualId_optional DRFTransformActualId_;
      SecondCompositeSegmentPositionActual_optional SecondCompositeSegmentPositionActual_;
      ThirdCompositeSegmentPositionActual_optional ThirdCompositeSegmentPositionActual_;
      FourthCompositeSegmentPositionActual_optional FourthCompositeSegmentPositionActual_;
    };

    class AngleCharacteristicItemType: public ::xsd::qif2::AngularCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      AngleCharacteristicItemType (const id_type&,
                                   const Name_type&,
                                   const CharacteristicNominalId_type&);

      AngleCharacteristicItemType (const id_type&,
                                   const Name_type&,
                                   ::std::auto_ptr< CharacteristicNominalId_type >);

      AngleCharacteristicItemType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      AngleCharacteristicItemType (const AngleCharacteristicItemType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual AngleCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AngleCharacteristicItemType ();
    };

    class AngleCharacteristicDefinitionType: public ::xsd::qif2::AngularCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      AngleCharacteristicDefinitionType (const id_type&);

      AngleCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      AngleCharacteristicDefinitionType (const AngleCharacteristicDefinitionType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual AngleCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AngleCharacteristicDefinitionType ();
    };

    class AngleCharacteristicNominalType: public ::xsd::qif2::AngularCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      AngleCharacteristicNominalType (const id_type&,
                                      const CharacteristicDefinitionId_type&);

      AngleCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      AngleCharacteristicNominalType (const AngleCharacteristicNominalType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual AngleCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AngleCharacteristicNominalType ();
    };

    class AngleCharacteristicActualType: public ::xsd::qif2::AngularCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      AngleCharacteristicActualType (const id_type&,
                                     const Status_type&,
                                     const CharacteristicItemId_type&);

      AngleCharacteristicActualType (const id_type&,
                                     ::std::auto_ptr< Status_type >,
                                     ::std::auto_ptr< CharacteristicItemId_type >);

      AngleCharacteristicActualType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      AngleCharacteristicActualType (const AngleCharacteristicActualType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual AngleCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AngleCharacteristicActualType ();
    };

    class AngleFromCharacteristicItemType: public ::xsd::qif2::AngularCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      AngleFromCharacteristicItemType (const id_type&,
                                       const Name_type&,
                                       const CharacteristicNominalId_type&);

      AngleFromCharacteristicItemType (const id_type&,
                                       const Name_type&,
                                       ::std::auto_ptr< CharacteristicNominalId_type >);

      AngleFromCharacteristicItemType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      AngleFromCharacteristicItemType (const AngleFromCharacteristicItemType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual AngleFromCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AngleFromCharacteristicItemType ();
    };

    class AngleFromCharacteristicDefinitionType: public ::xsd::qif2::AngularCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      AngleFromCharacteristicDefinitionType (const id_type&);

      AngleFromCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      AngleFromCharacteristicDefinitionType (const AngleFromCharacteristicDefinitionType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual AngleFromCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AngleFromCharacteristicDefinitionType ();
    };

    class AngleFromCharacteristicNominalType: public ::xsd::qif2::AngularCharacteristicNominalBaseType
    {
      public:
      // OriginReference
      //
      typedef ::xsd::qif2::OriginReferenceType OriginReference_type;
      typedef ::xsd::cxx::tree::optional< OriginReference_type > OriginReference_optional;
      typedef ::xsd::cxx::tree::traits< OriginReference_type, char > OriginReference_traits;

      const OriginReference_optional&
      OriginReference () const;

      OriginReference_optional&
      OriginReference ();

      void
      OriginReference (const OriginReference_type& x);

      void
      OriginReference (const OriginReference_optional& x);

      void
      OriginReference (::std::auto_ptr< OriginReference_type > p);

      // AnalysisVector
      //
      typedef ::xsd::qif2::UnitVectorType AnalysisVector_type;
      typedef ::xsd::cxx::tree::optional< AnalysisVector_type > AnalysisVector_optional;
      typedef ::xsd::cxx::tree::traits< AnalysisVector_type, char > AnalysisVector_traits;

      const AnalysisVector_optional&
      AnalysisVector () const;

      AnalysisVector_optional&
      AnalysisVector ();

      void
      AnalysisVector (const AnalysisVector_type& x);

      void
      AnalysisVector (const AnalysisVector_optional& x);

      void
      AnalysisVector (::std::auto_ptr< AnalysisVector_type > p);

      // AnalysisMode
      //
      typedef ::xsd::qif2::AngleBetweenAnalysisModeEnumType AnalysisMode_type;
      typedef ::xsd::cxx::tree::traits< AnalysisMode_type, char > AnalysisMode_traits;

      const AnalysisMode_type&
      AnalysisMode () const;

      AnalysisMode_type&
      AnalysisMode ();

      void
      AnalysisMode (const AnalysisMode_type& x);

      void
      AnalysisMode (::std::auto_ptr< AnalysisMode_type > p);

      // CoordinateSystemId
      //
      typedef ::xsd::qif2::QIFReferenceFullType CoordinateSystemId_type;
      typedef ::xsd::cxx::tree::optional< CoordinateSystemId_type > CoordinateSystemId_optional;
      typedef ::xsd::cxx::tree::traits< CoordinateSystemId_type, char > CoordinateSystemId_traits;

      const CoordinateSystemId_optional&
      CoordinateSystemId () const;

      CoordinateSystemId_optional&
      CoordinateSystemId ();

      void
      CoordinateSystemId (const CoordinateSystemId_type& x);

      void
      CoordinateSystemId (const CoordinateSystemId_optional& x);

      void
      CoordinateSystemId (::std::auto_ptr< CoordinateSystemId_type > p);

      // MeasurementDirective
      //
      typedef ::xsd::qif2::MeasurementDirectiveType MeasurementDirective_type;
      typedef ::xsd::cxx::tree::optional< MeasurementDirective_type > MeasurementDirective_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementDirective_type, char > MeasurementDirective_traits;

      const MeasurementDirective_optional&
      MeasurementDirective () const;

      MeasurementDirective_optional&
      MeasurementDirective ();

      void
      MeasurementDirective (const MeasurementDirective_type& x);

      void
      MeasurementDirective (const MeasurementDirective_optional& x);

      void
      MeasurementDirective (::std::auto_ptr< MeasurementDirective_type > p);

      // Vertex
      //
      typedef ::xsd::qif2::PointType Vertex_type;
      typedef ::xsd::cxx::tree::optional< Vertex_type > Vertex_optional;
      typedef ::xsd::cxx::tree::traits< Vertex_type, char > Vertex_traits;

      const Vertex_optional&
      Vertex () const;

      Vertex_optional&
      Vertex ();

      void
      Vertex (const Vertex_type& x);

      void
      Vertex (const Vertex_optional& x);

      void
      Vertex (::std::auto_ptr< Vertex_type > p);

      // ZoneLimit
      //
      typedef ::xsd::qif2::CharacteristicDirectionalZoneLimitType ZoneLimit_type;
      typedef ::xsd::cxx::tree::optional< ZoneLimit_type > ZoneLimit_optional;
      typedef ::xsd::cxx::tree::traits< ZoneLimit_type, char > ZoneLimit_traits;

      const ZoneLimit_optional&
      ZoneLimit () const;

      ZoneLimit_optional&
      ZoneLimit ();

      void
      ZoneLimit (const ZoneLimit_type& x);

      void
      ZoneLimit (const ZoneLimit_optional& x);

      void
      ZoneLimit (::std::auto_ptr< ZoneLimit_type > p);

      // Constructors.
      //
      AngleFromCharacteristicNominalType (const id_type&,
                                          const CharacteristicDefinitionId_type&,
                                          const AnalysisMode_type&);

      AngleFromCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      AngleFromCharacteristicNominalType (const AngleFromCharacteristicNominalType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual AngleFromCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AngleFromCharacteristicNominalType&
      operator= (const AngleFromCharacteristicNominalType& x);

      virtual 
      ~AngleFromCharacteristicNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      OriginReference_optional OriginReference_;
      AnalysisVector_optional AnalysisVector_;
      ::xsd::cxx::tree::one< AnalysisMode_type > AnalysisMode_;
      CoordinateSystemId_optional CoordinateSystemId_;
      MeasurementDirective_optional MeasurementDirective_;
      Vertex_optional Vertex_;
      ZoneLimit_optional ZoneLimit_;
    };

    class AngleFromCharacteristicActualType: public ::xsd::qif2::AngularCharacteristicActualBaseType
    {
      public:
      // AnalysisVector
      //
      typedef ::xsd::qif2::ActualUnitVectorType AnalysisVector_type;
      typedef ::xsd::cxx::tree::optional< AnalysisVector_type > AnalysisVector_optional;
      typedef ::xsd::cxx::tree::traits< AnalysisVector_type, char > AnalysisVector_traits;

      const AnalysisVector_optional&
      AnalysisVector () const;

      AnalysisVector_optional&
      AnalysisVector ();

      void
      AnalysisVector (const AnalysisVector_type& x);

      void
      AnalysisVector (const AnalysisVector_optional& x);

      void
      AnalysisVector (::std::auto_ptr< AnalysisVector_type > p);

      // Vertex
      //
      typedef ::xsd::qif2::ActualPointType Vertex_type;
      typedef ::xsd::cxx::tree::optional< Vertex_type > Vertex_optional;
      typedef ::xsd::cxx::tree::traits< Vertex_type, char > Vertex_traits;

      const Vertex_optional&
      Vertex () const;

      Vertex_optional&
      Vertex ();

      void
      Vertex (const Vertex_type& x);

      void
      Vertex (const Vertex_optional& x);

      void
      Vertex (::std::auto_ptr< Vertex_type > p);

      // Constructors.
      //
      AngleFromCharacteristicActualType (const id_type&,
                                         const Status_type&,
                                         const CharacteristicItemId_type&);

      AngleFromCharacteristicActualType (const id_type&,
                                         ::std::auto_ptr< Status_type >,
                                         ::std::auto_ptr< CharacteristicItemId_type >);

      AngleFromCharacteristicActualType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      AngleFromCharacteristicActualType (const AngleFromCharacteristicActualType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual AngleFromCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AngleFromCharacteristicActualType&
      operator= (const AngleFromCharacteristicActualType& x);

      virtual 
      ~AngleFromCharacteristicActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      AnalysisVector_optional AnalysisVector_;
      Vertex_optional Vertex_;
    };

    class AngleBetweenCharacteristicItemType: public ::xsd::qif2::AngularCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      AngleBetweenCharacteristicItemType (const id_type&,
                                          const Name_type&,
                                          const CharacteristicNominalId_type&);

      AngleBetweenCharacteristicItemType (const id_type&,
                                          const Name_type&,
                                          ::std::auto_ptr< CharacteristicNominalId_type >);

      AngleBetweenCharacteristicItemType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      AngleBetweenCharacteristicItemType (const AngleBetweenCharacteristicItemType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual AngleBetweenCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AngleBetweenCharacteristicItemType ();
    };

    class AngleBetweenCharacteristicDefinitionType: public ::xsd::qif2::AngularCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      AngleBetweenCharacteristicDefinitionType (const id_type&);

      AngleBetweenCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      AngleBetweenCharacteristicDefinitionType (const AngleBetweenCharacteristicDefinitionType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual AngleBetweenCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AngleBetweenCharacteristicDefinitionType ();
    };

    class AngleBetweenCharacteristicNominalType: public ::xsd::qif2::AngularCharacteristicNominalBaseType
    {
      public:
      // AnalysisVector
      //
      typedef ::xsd::qif2::UnitVectorType AnalysisVector_type;
      typedef ::xsd::cxx::tree::optional< AnalysisVector_type > AnalysisVector_optional;
      typedef ::xsd::cxx::tree::traits< AnalysisVector_type, char > AnalysisVector_traits;

      const AnalysisVector_optional&
      AnalysisVector () const;

      AnalysisVector_optional&
      AnalysisVector ();

      void
      AnalysisVector (const AnalysisVector_type& x);

      void
      AnalysisVector (const AnalysisVector_optional& x);

      void
      AnalysisVector (::std::auto_ptr< AnalysisVector_type > p);

      // AnalysisMode
      //
      typedef ::xsd::qif2::AngleBetweenAnalysisModeEnumType AnalysisMode_type;
      typedef ::xsd::cxx::tree::traits< AnalysisMode_type, char > AnalysisMode_traits;

      const AnalysisMode_type&
      AnalysisMode () const;

      AnalysisMode_type&
      AnalysisMode ();

      void
      AnalysisMode (const AnalysisMode_type& x);

      void
      AnalysisMode (::std::auto_ptr< AnalysisMode_type > p);

      // CoordinateSystemId
      //
      typedef ::xsd::qif2::QIFReferenceFullType CoordinateSystemId_type;
      typedef ::xsd::cxx::tree::optional< CoordinateSystemId_type > CoordinateSystemId_optional;
      typedef ::xsd::cxx::tree::traits< CoordinateSystemId_type, char > CoordinateSystemId_traits;

      const CoordinateSystemId_optional&
      CoordinateSystemId () const;

      CoordinateSystemId_optional&
      CoordinateSystemId ();

      void
      CoordinateSystemId (const CoordinateSystemId_type& x);

      void
      CoordinateSystemId (const CoordinateSystemId_optional& x);

      void
      CoordinateSystemId (::std::auto_ptr< CoordinateSystemId_type > p);

      // MeasurementDirective
      //
      typedef ::xsd::qif2::MeasurementDirectiveType MeasurementDirective_type;
      typedef ::xsd::cxx::tree::optional< MeasurementDirective_type > MeasurementDirective_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementDirective_type, char > MeasurementDirective_traits;

      const MeasurementDirective_optional&
      MeasurementDirective () const;

      MeasurementDirective_optional&
      MeasurementDirective ();

      void
      MeasurementDirective (const MeasurementDirective_type& x);

      void
      MeasurementDirective (const MeasurementDirective_optional& x);

      void
      MeasurementDirective (::std::auto_ptr< MeasurementDirective_type > p);

      // Vertex
      //
      typedef ::xsd::qif2::PointType Vertex_type;
      typedef ::xsd::cxx::tree::optional< Vertex_type > Vertex_optional;
      typedef ::xsd::cxx::tree::traits< Vertex_type, char > Vertex_traits;

      const Vertex_optional&
      Vertex () const;

      Vertex_optional&
      Vertex ();

      void
      Vertex (const Vertex_type& x);

      void
      Vertex (const Vertex_optional& x);

      void
      Vertex (::std::auto_ptr< Vertex_type > p);

      // ZoneLimit
      //
      typedef ::xsd::qif2::CharacteristicDirectionalZoneLimitType ZoneLimit_type;
      typedef ::xsd::cxx::tree::optional< ZoneLimit_type > ZoneLimit_optional;
      typedef ::xsd::cxx::tree::traits< ZoneLimit_type, char > ZoneLimit_traits;

      const ZoneLimit_optional&
      ZoneLimit () const;

      ZoneLimit_optional&
      ZoneLimit ();

      void
      ZoneLimit (const ZoneLimit_type& x);

      void
      ZoneLimit (const ZoneLimit_optional& x);

      void
      ZoneLimit (::std::auto_ptr< ZoneLimit_type > p);

      // Constructors.
      //
      AngleBetweenCharacteristicNominalType (const id_type&,
                                             const CharacteristicDefinitionId_type&,
                                             const AnalysisMode_type&);

      AngleBetweenCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      AngleBetweenCharacteristicNominalType (const AngleBetweenCharacteristicNominalType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual AngleBetweenCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AngleBetweenCharacteristicNominalType&
      operator= (const AngleBetweenCharacteristicNominalType& x);

      virtual 
      ~AngleBetweenCharacteristicNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      AnalysisVector_optional AnalysisVector_;
      ::xsd::cxx::tree::one< AnalysisMode_type > AnalysisMode_;
      CoordinateSystemId_optional CoordinateSystemId_;
      MeasurementDirective_optional MeasurementDirective_;
      Vertex_optional Vertex_;
      ZoneLimit_optional ZoneLimit_;
    };

    class AngleBetweenCharacteristicActualType: public ::xsd::qif2::AngularCharacteristicActualBaseType
    {
      public:
      // AnalysisVector
      //
      typedef ::xsd::qif2::ActualUnitVectorType AnalysisVector_type;
      typedef ::xsd::cxx::tree::optional< AnalysisVector_type > AnalysisVector_optional;
      typedef ::xsd::cxx::tree::traits< AnalysisVector_type, char > AnalysisVector_traits;

      const AnalysisVector_optional&
      AnalysisVector () const;

      AnalysisVector_optional&
      AnalysisVector ();

      void
      AnalysisVector (const AnalysisVector_type& x);

      void
      AnalysisVector (const AnalysisVector_optional& x);

      void
      AnalysisVector (::std::auto_ptr< AnalysisVector_type > p);

      // Vertex
      //
      typedef ::xsd::qif2::ActualPointType Vertex_type;
      typedef ::xsd::cxx::tree::optional< Vertex_type > Vertex_optional;
      typedef ::xsd::cxx::tree::traits< Vertex_type, char > Vertex_traits;

      const Vertex_optional&
      Vertex () const;

      Vertex_optional&
      Vertex ();

      void
      Vertex (const Vertex_type& x);

      void
      Vertex (const Vertex_optional& x);

      void
      Vertex (::std::auto_ptr< Vertex_type > p);

      // Constructors.
      //
      AngleBetweenCharacteristicActualType (const id_type&,
                                            const Status_type&,
                                            const CharacteristicItemId_type&);

      AngleBetweenCharacteristicActualType (const id_type&,
                                            ::std::auto_ptr< Status_type >,
                                            ::std::auto_ptr< CharacteristicItemId_type >);

      AngleBetweenCharacteristicActualType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      AngleBetweenCharacteristicActualType (const AngleBetweenCharacteristicActualType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual AngleBetweenCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AngleBetweenCharacteristicActualType&
      operator= (const AngleBetweenCharacteristicActualType& x);

      virtual 
      ~AngleBetweenCharacteristicActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      AnalysisVector_optional AnalysisVector_;
      Vertex_optional Vertex_;
    };

    class LinearCoordinateCharacteristicItemType: public ::xsd::qif2::CoordinateCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      LinearCoordinateCharacteristicItemType (const id_type&,
                                              const Name_type&,
                                              const CharacteristicNominalId_type&);

      LinearCoordinateCharacteristicItemType (const id_type&,
                                              const Name_type&,
                                              ::std::auto_ptr< CharacteristicNominalId_type >);

      LinearCoordinateCharacteristicItemType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      LinearCoordinateCharacteristicItemType (const LinearCoordinateCharacteristicItemType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual LinearCoordinateCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~LinearCoordinateCharacteristicItemType ();
    };

    class LinearCoordinateCharacteristicDefinitionType: public ::xsd::qif2::CoordinateCharacteristicDefinitionBaseType
    {
      public:
      // Tolerance
      //
      typedef ::xsd::qif2::LinearToleranceType Tolerance_type;
      typedef ::xsd::cxx::tree::optional< Tolerance_type > Tolerance_optional;
      typedef ::xsd::cxx::tree::traits< Tolerance_type, char > Tolerance_traits;

      const Tolerance_optional&
      Tolerance () const;

      Tolerance_optional&
      Tolerance ();

      void
      Tolerance (const Tolerance_type& x);

      void
      Tolerance (const Tolerance_optional& x);

      void
      Tolerance (::std::auto_ptr< Tolerance_type > p);

      // NonTolerance
      //
      typedef ::xsd::qif2::NonToleranceEnumType NonTolerance_type;
      typedef ::xsd::cxx::tree::optional< NonTolerance_type > NonTolerance_optional;
      typedef ::xsd::cxx::tree::traits< NonTolerance_type, char > NonTolerance_traits;

      const NonTolerance_optional&
      NonTolerance () const;

      NonTolerance_optional&
      NonTolerance ();

      void
      NonTolerance (const NonTolerance_type& x);

      void
      NonTolerance (const NonTolerance_optional& x);

      void
      NonTolerance (::std::auto_ptr< NonTolerance_type > p);

      // Constructors.
      //
      LinearCoordinateCharacteristicDefinitionType (const id_type&);

      LinearCoordinateCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

      LinearCoordinateCharacteristicDefinitionType (const LinearCoordinateCharacteristicDefinitionType& x,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

      virtual LinearCoordinateCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LinearCoordinateCharacteristicDefinitionType&
      operator= (const LinearCoordinateCharacteristicDefinitionType& x);

      virtual 
      ~LinearCoordinateCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Tolerance_optional Tolerance_;
      NonTolerance_optional NonTolerance_;
    };

    class LinearCoordinateCharacteristicNominalType: public ::xsd::qif2::CoordinateCharacteristicNominalBaseType
    {
      public:
      // TargetValue
      //
      typedef ::xsd::qif2::LinearValueType TargetValue_type;
      typedef ::xsd::cxx::tree::optional< TargetValue_type > TargetValue_optional;
      typedef ::xsd::cxx::tree::traits< TargetValue_type, char > TargetValue_traits;

      const TargetValue_optional&
      TargetValue () const;

      TargetValue_optional&
      TargetValue ();

      void
      TargetValue (const TargetValue_type& x);

      void
      TargetValue (const TargetValue_optional& x);

      void
      TargetValue (::std::auto_ptr< TargetValue_type > p);

      // Direction
      //
      typedef ::xsd::qif2::LinearCoordinateDirectionEnumType Direction_type;
      typedef ::xsd::cxx::tree::traits< Direction_type, char > Direction_traits;

      const Direction_type&
      Direction () const;

      Direction_type&
      Direction ();

      void
      Direction (const Direction_type& x);

      void
      Direction (::std::auto_ptr< Direction_type > p);

      // CoordinateSystemId
      //
      typedef ::xsd::qif2::QIFReferenceFullType CoordinateSystemId_type;
      typedef ::xsd::cxx::tree::optional< CoordinateSystemId_type > CoordinateSystemId_optional;
      typedef ::xsd::cxx::tree::traits< CoordinateSystemId_type, char > CoordinateSystemId_traits;

      const CoordinateSystemId_optional&
      CoordinateSystemId () const;

      CoordinateSystemId_optional&
      CoordinateSystemId ();

      void
      CoordinateSystemId (const CoordinateSystemId_type& x);

      void
      CoordinateSystemId (const CoordinateSystemId_optional& x);

      void
      CoordinateSystemId (::std::auto_ptr< CoordinateSystemId_type > p);

      // Constructors.
      //
      LinearCoordinateCharacteristicNominalType (const id_type&,
                                                 const CharacteristicDefinitionId_type&,
                                                 const Direction_type&);

      LinearCoordinateCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      LinearCoordinateCharacteristicNominalType (const LinearCoordinateCharacteristicNominalType& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      virtual LinearCoordinateCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LinearCoordinateCharacteristicNominalType&
      operator= (const LinearCoordinateCharacteristicNominalType& x);

      virtual 
      ~LinearCoordinateCharacteristicNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      TargetValue_optional TargetValue_;
      ::xsd::cxx::tree::one< Direction_type > Direction_;
      CoordinateSystemId_optional CoordinateSystemId_;
    };

    class LinearCoordinateCharacteristicActualType: public ::xsd::qif2::CoordinateCharacteristicActualBaseType
    {
      public:
      // Value
      //
      typedef ::xsd::qif2::ActualLinearValueType Value_type;
      typedef ::xsd::cxx::tree::optional< Value_type > Value_optional;
      typedef ::xsd::cxx::tree::traits< Value_type, char > Value_traits;

      const Value_optional&
      Value () const;

      Value_optional&
      Value ();

      void
      Value (const Value_type& x);

      void
      Value (const Value_optional& x);

      void
      Value (::std::auto_ptr< Value_type > p);

      // MaxValue
      //
      typedef ::xsd::qif2::ActualLinearValueType MaxValue_type;
      typedef ::xsd::cxx::tree::optional< MaxValue_type > MaxValue_optional;
      typedef ::xsd::cxx::tree::traits< MaxValue_type, char > MaxValue_traits;

      const MaxValue_optional&
      MaxValue () const;

      MaxValue_optional&
      MaxValue ();

      void
      MaxValue (const MaxValue_type& x);

      void
      MaxValue (const MaxValue_optional& x);

      void
      MaxValue (::std::auto_ptr< MaxValue_type > p);

      // MinValue
      //
      typedef ::xsd::qif2::ActualLinearValueType MinValue_type;
      typedef ::xsd::cxx::tree::optional< MinValue_type > MinValue_optional;
      typedef ::xsd::cxx::tree::traits< MinValue_type, char > MinValue_traits;

      const MinValue_optional&
      MinValue () const;

      MinValue_optional&
      MinValue ();

      void
      MinValue (const MinValue_type& x);

      void
      MinValue (const MinValue_optional& x);

      void
      MinValue (::std::auto_ptr< MinValue_type > p);

      // Constructors.
      //
      LinearCoordinateCharacteristicActualType (const id_type&,
                                                const Status_type&,
                                                const CharacteristicItemId_type&,
                                                const TypeOfCoordinates_type&);

      LinearCoordinateCharacteristicActualType (const id_type&,
                                                ::std::auto_ptr< Status_type >,
                                                ::std::auto_ptr< CharacteristicItemId_type >,
                                                ::std::auto_ptr< TypeOfCoordinates_type >);

      LinearCoordinateCharacteristicActualType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      LinearCoordinateCharacteristicActualType (const LinearCoordinateCharacteristicActualType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual LinearCoordinateCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LinearCoordinateCharacteristicActualType&
      operator= (const LinearCoordinateCharacteristicActualType& x);

      virtual 
      ~LinearCoordinateCharacteristicActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Value_optional Value_;
      MaxValue_optional MaxValue_;
      MinValue_optional MinValue_;
    };

    class AngularCoordinateCharacteristicItemType: public ::xsd::qif2::CoordinateCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      AngularCoordinateCharacteristicItemType (const id_type&,
                                               const Name_type&,
                                               const CharacteristicNominalId_type&);

      AngularCoordinateCharacteristicItemType (const id_type&,
                                               const Name_type&,
                                               ::std::auto_ptr< CharacteristicNominalId_type >);

      AngularCoordinateCharacteristicItemType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      AngularCoordinateCharacteristicItemType (const AngularCoordinateCharacteristicItemType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual AngularCoordinateCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AngularCoordinateCharacteristicItemType ();
    };

    class AngularCoordinateCharacteristicDefinitionType: public ::xsd::qif2::CoordinateCharacteristicDefinitionBaseType
    {
      public:
      // Tolerance
      //
      typedef ::xsd::qif2::AngularToleranceType Tolerance_type;
      typedef ::xsd::cxx::tree::optional< Tolerance_type > Tolerance_optional;
      typedef ::xsd::cxx::tree::traits< Tolerance_type, char > Tolerance_traits;

      const Tolerance_optional&
      Tolerance () const;

      Tolerance_optional&
      Tolerance ();

      void
      Tolerance (const Tolerance_type& x);

      void
      Tolerance (const Tolerance_optional& x);

      void
      Tolerance (::std::auto_ptr< Tolerance_type > p);

      // NonTolerance
      //
      typedef ::xsd::qif2::NonToleranceEnumType NonTolerance_type;
      typedef ::xsd::cxx::tree::optional< NonTolerance_type > NonTolerance_optional;
      typedef ::xsd::cxx::tree::traits< NonTolerance_type, char > NonTolerance_traits;

      const NonTolerance_optional&
      NonTolerance () const;

      NonTolerance_optional&
      NonTolerance ();

      void
      NonTolerance (const NonTolerance_type& x);

      void
      NonTolerance (const NonTolerance_optional& x);

      void
      NonTolerance (::std::auto_ptr< NonTolerance_type > p);

      // Constructors.
      //
      AngularCoordinateCharacteristicDefinitionType (const id_type&);

      AngularCoordinateCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

      AngularCoordinateCharacteristicDefinitionType (const AngularCoordinateCharacteristicDefinitionType& x,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

      virtual AngularCoordinateCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AngularCoordinateCharacteristicDefinitionType&
      operator= (const AngularCoordinateCharacteristicDefinitionType& x);

      virtual 
      ~AngularCoordinateCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Tolerance_optional Tolerance_;
      NonTolerance_optional NonTolerance_;
    };

    class AngularCoordinateCharacteristicNominalType: public ::xsd::qif2::CoordinateCharacteristicNominalBaseType
    {
      public:
      // TargetValue
      //
      typedef ::xsd::qif2::AngularValueType TargetValue_type;
      typedef ::xsd::cxx::tree::optional< TargetValue_type > TargetValue_optional;
      typedef ::xsd::cxx::tree::traits< TargetValue_type, char > TargetValue_traits;

      const TargetValue_optional&
      TargetValue () const;

      TargetValue_optional&
      TargetValue ();

      void
      TargetValue (const TargetValue_type& x);

      void
      TargetValue (const TargetValue_optional& x);

      void
      TargetValue (::std::auto_ptr< TargetValue_type > p);

      // Direction
      //
      typedef ::xsd::qif2::AngularCoordinateDirectionEnumType Direction_type;
      typedef ::xsd::cxx::tree::traits< Direction_type, char > Direction_traits;

      const Direction_type&
      Direction () const;

      Direction_type&
      Direction ();

      void
      Direction (const Direction_type& x);

      void
      Direction (::std::auto_ptr< Direction_type > p);

      // CoordinateSystemId
      //
      typedef ::xsd::qif2::QIFReferenceFullType CoordinateSystemId_type;
      typedef ::xsd::cxx::tree::optional< CoordinateSystemId_type > CoordinateSystemId_optional;
      typedef ::xsd::cxx::tree::traits< CoordinateSystemId_type, char > CoordinateSystemId_traits;

      const CoordinateSystemId_optional&
      CoordinateSystemId () const;

      CoordinateSystemId_optional&
      CoordinateSystemId ();

      void
      CoordinateSystemId (const CoordinateSystemId_type& x);

      void
      CoordinateSystemId (const CoordinateSystemId_optional& x);

      void
      CoordinateSystemId (::std::auto_ptr< CoordinateSystemId_type > p);

      // Constructors.
      //
      AngularCoordinateCharacteristicNominalType (const id_type&,
                                                  const CharacteristicDefinitionId_type&,
                                                  const Direction_type&);

      AngularCoordinateCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      AngularCoordinateCharacteristicNominalType (const AngularCoordinateCharacteristicNominalType& x,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      virtual AngularCoordinateCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AngularCoordinateCharacteristicNominalType&
      operator= (const AngularCoordinateCharacteristicNominalType& x);

      virtual 
      ~AngularCoordinateCharacteristicNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      TargetValue_optional TargetValue_;
      ::xsd::cxx::tree::one< Direction_type > Direction_;
      CoordinateSystemId_optional CoordinateSystemId_;
    };

    class AngularCoordinateCharacteristicActualType: public ::xsd::qif2::CoordinateCharacteristicActualBaseType
    {
      public:
      // Value
      //
      typedef ::xsd::qif2::ActualAngularValueType Value_type;
      typedef ::xsd::cxx::tree::optional< Value_type > Value_optional;
      typedef ::xsd::cxx::tree::traits< Value_type, char > Value_traits;

      const Value_optional&
      Value () const;

      Value_optional&
      Value ();

      void
      Value (const Value_type& x);

      void
      Value (const Value_optional& x);

      void
      Value (::std::auto_ptr< Value_type > p);

      // MaxValue
      //
      typedef ::xsd::qif2::ActualAngularValueType MaxValue_type;
      typedef ::xsd::cxx::tree::optional< MaxValue_type > MaxValue_optional;
      typedef ::xsd::cxx::tree::traits< MaxValue_type, char > MaxValue_traits;

      const MaxValue_optional&
      MaxValue () const;

      MaxValue_optional&
      MaxValue ();

      void
      MaxValue (const MaxValue_type& x);

      void
      MaxValue (const MaxValue_optional& x);

      void
      MaxValue (::std::auto_ptr< MaxValue_type > p);

      // MinValue
      //
      typedef ::xsd::qif2::ActualAngularValueType MinValue_type;
      typedef ::xsd::cxx::tree::optional< MinValue_type > MinValue_optional;
      typedef ::xsd::cxx::tree::traits< MinValue_type, char > MinValue_traits;

      const MinValue_optional&
      MinValue () const;

      MinValue_optional&
      MinValue ();

      void
      MinValue (const MinValue_type& x);

      void
      MinValue (const MinValue_optional& x);

      void
      MinValue (::std::auto_ptr< MinValue_type > p);

      // Constructors.
      //
      AngularCoordinateCharacteristicActualType (const id_type&,
                                                 const Status_type&,
                                                 const CharacteristicItemId_type&,
                                                 const TypeOfCoordinates_type&);

      AngularCoordinateCharacteristicActualType (const id_type&,
                                                 ::std::auto_ptr< Status_type >,
                                                 ::std::auto_ptr< CharacteristicItemId_type >,
                                                 ::std::auto_ptr< TypeOfCoordinates_type >);

      AngularCoordinateCharacteristicActualType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      AngularCoordinateCharacteristicActualType (const AngularCoordinateCharacteristicActualType& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      virtual AngularCoordinateCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AngularCoordinateCharacteristicActualType&
      operator= (const AngularCoordinateCharacteristicActualType& x);

      virtual 
      ~AngularCoordinateCharacteristicActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Value_optional Value_;
      MaxValue_optional MaxValue_;
      MinValue_optional MinValue_;
    };

    class CurveLengthCharacteristicItemType: public ::xsd::qif2::LinearCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      CurveLengthCharacteristicItemType (const id_type&,
                                         const Name_type&,
                                         const CharacteristicNominalId_type&);

      CurveLengthCharacteristicItemType (const id_type&,
                                         const Name_type&,
                                         ::std::auto_ptr< CharacteristicNominalId_type >);

      CurveLengthCharacteristicItemType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      CurveLengthCharacteristicItemType (const CurveLengthCharacteristicItemType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual CurveLengthCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CurveLengthCharacteristicItemType ();
    };

    class CurveLengthCharacteristicDefinitionType: public ::xsd::qif2::LinearCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      CurveLengthCharacteristicDefinitionType (const id_type&);

      CurveLengthCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      CurveLengthCharacteristicDefinitionType (const CurveLengthCharacteristicDefinitionType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual CurveLengthCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CurveLengthCharacteristicDefinitionType ();
    };

    class CurveLengthCharacteristicNominalType: public ::xsd::qif2::LinearCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      CurveLengthCharacteristicNominalType (const id_type&,
                                            const CharacteristicDefinitionId_type&);

      CurveLengthCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      CurveLengthCharacteristicNominalType (const CurveLengthCharacteristicNominalType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual CurveLengthCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CurveLengthCharacteristicNominalType ();
    };

    class CurveLengthCharacteristicActualType: public ::xsd::qif2::LinearCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      CurveLengthCharacteristicActualType (const id_type&,
                                           const Status_type&,
                                           const CharacteristicItemId_type&);

      CurveLengthCharacteristicActualType (const id_type&,
                                           ::std::auto_ptr< Status_type >,
                                           ::std::auto_ptr< CharacteristicItemId_type >);

      CurveLengthCharacteristicActualType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      CurveLengthCharacteristicActualType (const CurveLengthCharacteristicActualType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual CurveLengthCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CurveLengthCharacteristicActualType ();
    };

    class DiameterCharacteristicItemType: public ::xsd::qif2::LinearCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      DiameterCharacteristicItemType (const id_type&,
                                      const Name_type&,
                                      const CharacteristicNominalId_type&);

      DiameterCharacteristicItemType (const id_type&,
                                      const Name_type&,
                                      ::std::auto_ptr< CharacteristicNominalId_type >);

      DiameterCharacteristicItemType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      DiameterCharacteristicItemType (const DiameterCharacteristicItemType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual DiameterCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~DiameterCharacteristicItemType ();
    };

    class DiameterCharacteristicDefinitionType: public ::xsd::qif2::LinearCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      DiameterCharacteristicDefinitionType (const id_type&);

      DiameterCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      DiameterCharacteristicDefinitionType (const DiameterCharacteristicDefinitionType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual DiameterCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~DiameterCharacteristicDefinitionType ();
    };

    class DiameterCharacteristicNominalType: public ::xsd::qif2::LinearCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      DiameterCharacteristicNominalType (const id_type&,
                                         const CharacteristicDefinitionId_type&);

      DiameterCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      DiameterCharacteristicNominalType (const DiameterCharacteristicNominalType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual DiameterCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~DiameterCharacteristicNominalType ();
    };

    class DiameterCharacteristicActualType: public ::xsd::qif2::LinearCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      DiameterCharacteristicActualType (const id_type&,
                                        const Status_type&,
                                        const CharacteristicItemId_type&);

      DiameterCharacteristicActualType (const id_type&,
                                        ::std::auto_ptr< Status_type >,
                                        ::std::auto_ptr< CharacteristicItemId_type >);

      DiameterCharacteristicActualType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      DiameterCharacteristicActualType (const DiameterCharacteristicActualType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual DiameterCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~DiameterCharacteristicActualType ();
    };

    class LengthCharacteristicItemType: public ::xsd::qif2::LinearCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      LengthCharacteristicItemType (const id_type&,
                                    const Name_type&,
                                    const CharacteristicNominalId_type&);

      LengthCharacteristicItemType (const id_type&,
                                    const Name_type&,
                                    ::std::auto_ptr< CharacteristicNominalId_type >);

      LengthCharacteristicItemType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      LengthCharacteristicItemType (const LengthCharacteristicItemType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual LengthCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~LengthCharacteristicItemType ();
    };

    class LengthCharacteristicDefinitionType: public ::xsd::qif2::LinearCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      LengthCharacteristicDefinitionType (const id_type&);

      LengthCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      LengthCharacteristicDefinitionType (const LengthCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual LengthCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~LengthCharacteristicDefinitionType ();
    };

    class LengthCharacteristicNominalType: public ::xsd::qif2::LinearCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      LengthCharacteristicNominalType (const id_type&,
                                       const CharacteristicDefinitionId_type&);

      LengthCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      LengthCharacteristicNominalType (const LengthCharacteristicNominalType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual LengthCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~LengthCharacteristicNominalType ();
    };

    class LengthCharacteristicActualType: public ::xsd::qif2::LinearCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      LengthCharacteristicActualType (const id_type&,
                                      const Status_type&,
                                      const CharacteristicItemId_type&);

      LengthCharacteristicActualType (const id_type&,
                                      ::std::auto_ptr< Status_type >,
                                      ::std::auto_ptr< CharacteristicItemId_type >);

      LengthCharacteristicActualType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      LengthCharacteristicActualType (const LengthCharacteristicActualType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual LengthCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~LengthCharacteristicActualType ();
    };

    class WidthCharacteristicItemType: public ::xsd::qif2::LinearCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      WidthCharacteristicItemType (const id_type&,
                                   const Name_type&,
                                   const CharacteristicNominalId_type&);

      WidthCharacteristicItemType (const id_type&,
                                   const Name_type&,
                                   ::std::auto_ptr< CharacteristicNominalId_type >);

      WidthCharacteristicItemType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      WidthCharacteristicItemType (const WidthCharacteristicItemType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual WidthCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~WidthCharacteristicItemType ();
    };

    class WidthCharacteristicDefinitionType: public ::xsd::qif2::LinearCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      WidthCharacteristicDefinitionType (const id_type&);

      WidthCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      WidthCharacteristicDefinitionType (const WidthCharacteristicDefinitionType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual WidthCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~WidthCharacteristicDefinitionType ();
    };

    class WidthCharacteristicNominalType: public ::xsd::qif2::LinearCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      WidthCharacteristicNominalType (const id_type&,
                                      const CharacteristicDefinitionId_type&);

      WidthCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      WidthCharacteristicNominalType (const WidthCharacteristicNominalType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual WidthCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~WidthCharacteristicNominalType ();
    };

    class WidthCharacteristicActualType: public ::xsd::qif2::LinearCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      WidthCharacteristicActualType (const id_type&,
                                     const Status_type&,
                                     const CharacteristicItemId_type&);

      WidthCharacteristicActualType (const id_type&,
                                     ::std::auto_ptr< Status_type >,
                                     ::std::auto_ptr< CharacteristicItemId_type >);

      WidthCharacteristicActualType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      WidthCharacteristicActualType (const WidthCharacteristicActualType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual WidthCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~WidthCharacteristicActualType ();
    };

    class HeightCharacteristicItemType: public ::xsd::qif2::LinearCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      HeightCharacteristicItemType (const id_type&,
                                    const Name_type&,
                                    const CharacteristicNominalId_type&);

      HeightCharacteristicItemType (const id_type&,
                                    const Name_type&,
                                    ::std::auto_ptr< CharacteristicNominalId_type >);

      HeightCharacteristicItemType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      HeightCharacteristicItemType (const HeightCharacteristicItemType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual HeightCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~HeightCharacteristicItemType ();
    };

    class HeightCharacteristicDefinitionType: public ::xsd::qif2::LinearCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      HeightCharacteristicDefinitionType (const id_type&);

      HeightCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      HeightCharacteristicDefinitionType (const HeightCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual HeightCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~HeightCharacteristicDefinitionType ();
    };

    class HeightCharacteristicNominalType: public ::xsd::qif2::LinearCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      HeightCharacteristicNominalType (const id_type&,
                                       const CharacteristicDefinitionId_type&);

      HeightCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      HeightCharacteristicNominalType (const HeightCharacteristicNominalType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual HeightCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~HeightCharacteristicNominalType ();
    };

    class HeightCharacteristicActualType: public ::xsd::qif2::LinearCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      HeightCharacteristicActualType (const id_type&,
                                      const Status_type&,
                                      const CharacteristicItemId_type&);

      HeightCharacteristicActualType (const id_type&,
                                      ::std::auto_ptr< Status_type >,
                                      ::std::auto_ptr< CharacteristicItemId_type >);

      HeightCharacteristicActualType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      HeightCharacteristicActualType (const HeightCharacteristicActualType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual HeightCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~HeightCharacteristicActualType ();
    };

    class DepthCharacteristicItemType: public ::xsd::qif2::LinearCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      DepthCharacteristicItemType (const id_type&,
                                   const Name_type&,
                                   const CharacteristicNominalId_type&);

      DepthCharacteristicItemType (const id_type&,
                                   const Name_type&,
                                   ::std::auto_ptr< CharacteristicNominalId_type >);

      DepthCharacteristicItemType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      DepthCharacteristicItemType (const DepthCharacteristicItemType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual DepthCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~DepthCharacteristicItemType ();
    };

    class DepthCharacteristicDefinitionType: public ::xsd::qif2::LinearCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      DepthCharacteristicDefinitionType (const id_type&);

      DepthCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      DepthCharacteristicDefinitionType (const DepthCharacteristicDefinitionType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual DepthCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~DepthCharacteristicDefinitionType ();
    };

    class DepthCharacteristicNominalType: public ::xsd::qif2::LinearCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      DepthCharacteristicNominalType (const id_type&,
                                      const CharacteristicDefinitionId_type&);

      DepthCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      DepthCharacteristicNominalType (const DepthCharacteristicNominalType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual DepthCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~DepthCharacteristicNominalType ();
    };

    class DepthCharacteristicActualType: public ::xsd::qif2::LinearCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      DepthCharacteristicActualType (const id_type&,
                                     const Status_type&,
                                     const CharacteristicItemId_type&);

      DepthCharacteristicActualType (const id_type&,
                                     ::std::auto_ptr< Status_type >,
                                     ::std::auto_ptr< CharacteristicItemId_type >);

      DepthCharacteristicActualType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      DepthCharacteristicActualType (const DepthCharacteristicActualType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual DepthCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~DepthCharacteristicActualType ();
    };

    class ThicknessCharacteristicItemType: public ::xsd::qif2::LinearCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      ThicknessCharacteristicItemType (const id_type&,
                                       const Name_type&,
                                       const CharacteristicNominalId_type&);

      ThicknessCharacteristicItemType (const id_type&,
                                       const Name_type&,
                                       ::std::auto_ptr< CharacteristicNominalId_type >);

      ThicknessCharacteristicItemType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      ThicknessCharacteristicItemType (const ThicknessCharacteristicItemType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual ThicknessCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ThicknessCharacteristicItemType ();
    };

    class ThicknessCharacteristicDefinitionType: public ::xsd::qif2::LinearCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      ThicknessCharacteristicDefinitionType (const id_type&);

      ThicknessCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      ThicknessCharacteristicDefinitionType (const ThicknessCharacteristicDefinitionType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual ThicknessCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ThicknessCharacteristicDefinitionType ();
    };

    class ThicknessCharacteristicNominalType: public ::xsd::qif2::LinearCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      ThicknessCharacteristicNominalType (const id_type&,
                                          const CharacteristicDefinitionId_type&);

      ThicknessCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      ThicknessCharacteristicNominalType (const ThicknessCharacteristicNominalType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual ThicknessCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ThicknessCharacteristicNominalType ();
    };

    class ThicknessCharacteristicActualType: public ::xsd::qif2::LinearCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      ThicknessCharacteristicActualType (const id_type&,
                                         const Status_type&,
                                         const CharacteristicItemId_type&);

      ThicknessCharacteristicActualType (const id_type&,
                                         ::std::auto_ptr< Status_type >,
                                         ::std::auto_ptr< CharacteristicItemId_type >);

      ThicknessCharacteristicActualType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      ThicknessCharacteristicActualType (const ThicknessCharacteristicActualType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual ThicknessCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ThicknessCharacteristicActualType ();
    };

    class SquareCharacteristicItemType: public ::xsd::qif2::LinearCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      SquareCharacteristicItemType (const id_type&,
                                    const Name_type&,
                                    const CharacteristicNominalId_type&);

      SquareCharacteristicItemType (const id_type&,
                                    const Name_type&,
                                    ::std::auto_ptr< CharacteristicNominalId_type >);

      SquareCharacteristicItemType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      SquareCharacteristicItemType (const SquareCharacteristicItemType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual SquareCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SquareCharacteristicItemType ();
    };

    class SquareCharacteristicDefinitionType: public ::xsd::qif2::LinearCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      SquareCharacteristicDefinitionType (const id_type&);

      SquareCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      SquareCharacteristicDefinitionType (const SquareCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual SquareCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SquareCharacteristicDefinitionType ();
    };

    class SquareCharacteristicNominalType: public ::xsd::qif2::LinearCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      SquareCharacteristicNominalType (const id_type&,
                                       const CharacteristicDefinitionId_type&);

      SquareCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      SquareCharacteristicNominalType (const SquareCharacteristicNominalType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual SquareCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SquareCharacteristicNominalType ();
    };

    class SquareCharacteristicActualType: public ::xsd::qif2::LinearCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      SquareCharacteristicActualType (const id_type&,
                                      const Status_type&,
                                      const CharacteristicItemId_type&);

      SquareCharacteristicActualType (const id_type&,
                                      ::std::auto_ptr< Status_type >,
                                      ::std::auto_ptr< CharacteristicItemId_type >);

      SquareCharacteristicActualType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      SquareCharacteristicActualType (const SquareCharacteristicActualType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual SquareCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SquareCharacteristicActualType ();
    };

    class DistanceFromCharacteristicItemType: public ::xsd::qif2::LinearCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      DistanceFromCharacteristicItemType (const id_type&,
                                          const Name_type&,
                                          const CharacteristicNominalId_type&);

      DistanceFromCharacteristicItemType (const id_type&,
                                          const Name_type&,
                                          ::std::auto_ptr< CharacteristicNominalId_type >);

      DistanceFromCharacteristicItemType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      DistanceFromCharacteristicItemType (const DistanceFromCharacteristicItemType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual DistanceFromCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~DistanceFromCharacteristicItemType ();
    };

    class DistanceFromCharacteristicDefinitionType: public ::xsd::qif2::LinearCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      DistanceFromCharacteristicDefinitionType (const id_type&);

      DistanceFromCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      DistanceFromCharacteristicDefinitionType (const DistanceFromCharacteristicDefinitionType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual DistanceFromCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~DistanceFromCharacteristicDefinitionType ();
    };

    class DistanceFromCharacteristicNominalType: public ::xsd::qif2::LinearCharacteristicNominalBaseType
    {
      public:
      // OriginReference
      //
      typedef ::xsd::qif2::OriginReferenceType OriginReference_type;
      typedef ::xsd::cxx::tree::optional< OriginReference_type > OriginReference_optional;
      typedef ::xsd::cxx::tree::traits< OriginReference_type, char > OriginReference_traits;

      const OriginReference_optional&
      OriginReference () const;

      OriginReference_optional&
      OriginReference ();

      void
      OriginReference (const OriginReference_type& x);

      void
      OriginReference (const OriginReference_optional& x);

      void
      OriginReference (::std::auto_ptr< OriginReference_type > p);

      // AnalysisVector
      //
      typedef ::xsd::qif2::UnitVectorType AnalysisVector_type;
      typedef ::xsd::cxx::tree::optional< AnalysisVector_type > AnalysisVector_optional;
      typedef ::xsd::cxx::tree::traits< AnalysisVector_type, char > AnalysisVector_traits;

      const AnalysisVector_optional&
      AnalysisVector () const;

      AnalysisVector_optional&
      AnalysisVector ();

      void
      AnalysisVector (const AnalysisVector_type& x);

      void
      AnalysisVector (const AnalysisVector_optional& x);

      void
      AnalysisVector (::std::auto_ptr< AnalysisVector_type > p);

      // AnalysisMode
      //
      typedef ::xsd::qif2::DistanceBetweenAnalysisModeEnumType AnalysisMode_type;
      typedef ::xsd::cxx::tree::traits< AnalysisMode_type, char > AnalysisMode_traits;

      const AnalysisMode_type&
      AnalysisMode () const;

      AnalysisMode_type&
      AnalysisMode ();

      void
      AnalysisMode (const AnalysisMode_type& x);

      void
      AnalysisMode (::std::auto_ptr< AnalysisMode_type > p);

      // MeasurementDirective
      //
      typedef ::xsd::qif2::MeasurementDirectiveType MeasurementDirective_type;
      typedef ::xsd::cxx::tree::optional< MeasurementDirective_type > MeasurementDirective_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementDirective_type, char > MeasurementDirective_traits;

      const MeasurementDirective_optional&
      MeasurementDirective () const;

      MeasurementDirective_optional&
      MeasurementDirective ();

      void
      MeasurementDirective (const MeasurementDirective_type& x);

      void
      MeasurementDirective (const MeasurementDirective_optional& x);

      void
      MeasurementDirective (::std::auto_ptr< MeasurementDirective_type > p);

      // CoordinateSystemId
      //
      typedef ::xsd::qif2::QIFReferenceFullType CoordinateSystemId_type;
      typedef ::xsd::cxx::tree::optional< CoordinateSystemId_type > CoordinateSystemId_optional;
      typedef ::xsd::cxx::tree::traits< CoordinateSystemId_type, char > CoordinateSystemId_traits;

      const CoordinateSystemId_optional&
      CoordinateSystemId () const;

      CoordinateSystemId_optional&
      CoordinateSystemId ();

      void
      CoordinateSystemId (const CoordinateSystemId_type& x);

      void
      CoordinateSystemId (const CoordinateSystemId_optional& x);

      void
      CoordinateSystemId (::std::auto_ptr< CoordinateSystemId_type > p);

      // ZoneLimit
      //
      typedef ::xsd::qif2::CharacteristicDirectionalZoneLimitType ZoneLimit_type;
      typedef ::xsd::cxx::tree::optional< ZoneLimit_type > ZoneLimit_optional;
      typedef ::xsd::cxx::tree::traits< ZoneLimit_type, char > ZoneLimit_traits;

      const ZoneLimit_optional&
      ZoneLimit () const;

      ZoneLimit_optional&
      ZoneLimit ();

      void
      ZoneLimit (const ZoneLimit_type& x);

      void
      ZoneLimit (const ZoneLimit_optional& x);

      void
      ZoneLimit (::std::auto_ptr< ZoneLimit_type > p);

      // Constructors.
      //
      DistanceFromCharacteristicNominalType (const id_type&,
                                             const CharacteristicDefinitionId_type&,
                                             const AnalysisMode_type&);

      DistanceFromCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      DistanceFromCharacteristicNominalType (const DistanceFromCharacteristicNominalType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual DistanceFromCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      DistanceFromCharacteristicNominalType&
      operator= (const DistanceFromCharacteristicNominalType& x);

      virtual 
      ~DistanceFromCharacteristicNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      OriginReference_optional OriginReference_;
      AnalysisVector_optional AnalysisVector_;
      ::xsd::cxx::tree::one< AnalysisMode_type > AnalysisMode_;
      MeasurementDirective_optional MeasurementDirective_;
      CoordinateSystemId_optional CoordinateSystemId_;
      ZoneLimit_optional ZoneLimit_;
    };

    class DistanceFromCharacteristicActualType: public ::xsd::qif2::LinearCharacteristicActualBaseType
    {
      public:
      // AnalysisVector
      //
      typedef ::xsd::qif2::ActualUnitVectorType AnalysisVector_type;
      typedef ::xsd::cxx::tree::optional< AnalysisVector_type > AnalysisVector_optional;
      typedef ::xsd::cxx::tree::traits< AnalysisVector_type, char > AnalysisVector_traits;

      const AnalysisVector_optional&
      AnalysisVector () const;

      AnalysisVector_optional&
      AnalysisVector ();

      void
      AnalysisVector (const AnalysisVector_type& x);

      void
      AnalysisVector (const AnalysisVector_optional& x);

      void
      AnalysisVector (::std::auto_ptr< AnalysisVector_type > p);

      // Constructors.
      //
      DistanceFromCharacteristicActualType (const id_type&,
                                            const Status_type&,
                                            const CharacteristicItemId_type&);

      DistanceFromCharacteristicActualType (const id_type&,
                                            ::std::auto_ptr< Status_type >,
                                            ::std::auto_ptr< CharacteristicItemId_type >);

      DistanceFromCharacteristicActualType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      DistanceFromCharacteristicActualType (const DistanceFromCharacteristicActualType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual DistanceFromCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      DistanceFromCharacteristicActualType&
      operator= (const DistanceFromCharacteristicActualType& x);

      virtual 
      ~DistanceFromCharacteristicActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      AnalysisVector_optional AnalysisVector_;
    };

    class DistanceBetweenCharacteristicItemType: public ::xsd::qif2::LinearCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      DistanceBetweenCharacteristicItemType (const id_type&,
                                             const Name_type&,
                                             const CharacteristicNominalId_type&);

      DistanceBetweenCharacteristicItemType (const id_type&,
                                             const Name_type&,
                                             ::std::auto_ptr< CharacteristicNominalId_type >);

      DistanceBetweenCharacteristicItemType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      DistanceBetweenCharacteristicItemType (const DistanceBetweenCharacteristicItemType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual DistanceBetweenCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~DistanceBetweenCharacteristicItemType ();
    };

    class DistanceBetweenCharacteristicDefinitionType: public ::xsd::qif2::LinearCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      DistanceBetweenCharacteristicDefinitionType (const id_type&);

      DistanceBetweenCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      DistanceBetweenCharacteristicDefinitionType (const DistanceBetweenCharacteristicDefinitionType& x,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      virtual DistanceBetweenCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~DistanceBetweenCharacteristicDefinitionType ();
    };

    class DistanceBetweenCharacteristicNominalType: public ::xsd::qif2::LinearCharacteristicNominalBaseType
    {
      public:
      // AnalysisVector
      //
      typedef ::xsd::qif2::UnitVectorType AnalysisVector_type;
      typedef ::xsd::cxx::tree::optional< AnalysisVector_type > AnalysisVector_optional;
      typedef ::xsd::cxx::tree::traits< AnalysisVector_type, char > AnalysisVector_traits;

      const AnalysisVector_optional&
      AnalysisVector () const;

      AnalysisVector_optional&
      AnalysisVector ();

      void
      AnalysisVector (const AnalysisVector_type& x);

      void
      AnalysisVector (const AnalysisVector_optional& x);

      void
      AnalysisVector (::std::auto_ptr< AnalysisVector_type > p);

      // AnalysisMode
      //
      typedef ::xsd::qif2::DistanceBetweenAnalysisModeEnumType AnalysisMode_type;
      typedef ::xsd::cxx::tree::traits< AnalysisMode_type, char > AnalysisMode_traits;

      const AnalysisMode_type&
      AnalysisMode () const;

      AnalysisMode_type&
      AnalysisMode ();

      void
      AnalysisMode (const AnalysisMode_type& x);

      void
      AnalysisMode (::std::auto_ptr< AnalysisMode_type > p);

      // MeasurementDirective
      //
      typedef ::xsd::qif2::MeasurementDirectiveType MeasurementDirective_type;
      typedef ::xsd::cxx::tree::optional< MeasurementDirective_type > MeasurementDirective_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementDirective_type, char > MeasurementDirective_traits;

      const MeasurementDirective_optional&
      MeasurementDirective () const;

      MeasurementDirective_optional&
      MeasurementDirective ();

      void
      MeasurementDirective (const MeasurementDirective_type& x);

      void
      MeasurementDirective (const MeasurementDirective_optional& x);

      void
      MeasurementDirective (::std::auto_ptr< MeasurementDirective_type > p);

      // CoordinateSystemId
      //
      typedef ::xsd::qif2::QIFReferenceFullType CoordinateSystemId_type;
      typedef ::xsd::cxx::tree::optional< CoordinateSystemId_type > CoordinateSystemId_optional;
      typedef ::xsd::cxx::tree::traits< CoordinateSystemId_type, char > CoordinateSystemId_traits;

      const CoordinateSystemId_optional&
      CoordinateSystemId () const;

      CoordinateSystemId_optional&
      CoordinateSystemId ();

      void
      CoordinateSystemId (const CoordinateSystemId_type& x);

      void
      CoordinateSystemId (const CoordinateSystemId_optional& x);

      void
      CoordinateSystemId (::std::auto_ptr< CoordinateSystemId_type > p);

      // ZoneLimit
      //
      typedef ::xsd::qif2::CharacteristicDirectionalZoneLimitType ZoneLimit_type;
      typedef ::xsd::cxx::tree::optional< ZoneLimit_type > ZoneLimit_optional;
      typedef ::xsd::cxx::tree::traits< ZoneLimit_type, char > ZoneLimit_traits;

      const ZoneLimit_optional&
      ZoneLimit () const;

      ZoneLimit_optional&
      ZoneLimit ();

      void
      ZoneLimit (const ZoneLimit_type& x);

      void
      ZoneLimit (const ZoneLimit_optional& x);

      void
      ZoneLimit (::std::auto_ptr< ZoneLimit_type > p);

      // Constructors.
      //
      DistanceBetweenCharacteristicNominalType (const id_type&,
                                                const CharacteristicDefinitionId_type&,
                                                const AnalysisMode_type&);

      DistanceBetweenCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      DistanceBetweenCharacteristicNominalType (const DistanceBetweenCharacteristicNominalType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual DistanceBetweenCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      DistanceBetweenCharacteristicNominalType&
      operator= (const DistanceBetweenCharacteristicNominalType& x);

      virtual 
      ~DistanceBetweenCharacteristicNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      AnalysisVector_optional AnalysisVector_;
      ::xsd::cxx::tree::one< AnalysisMode_type > AnalysisMode_;
      MeasurementDirective_optional MeasurementDirective_;
      CoordinateSystemId_optional CoordinateSystemId_;
      ZoneLimit_optional ZoneLimit_;
    };

    class DistanceBetweenCharacteristicActualType: public ::xsd::qif2::LinearCharacteristicActualBaseType
    {
      public:
      // AnalysisVector
      //
      typedef ::xsd::qif2::ActualUnitVectorType AnalysisVector_type;
      typedef ::xsd::cxx::tree::optional< AnalysisVector_type > AnalysisVector_optional;
      typedef ::xsd::cxx::tree::traits< AnalysisVector_type, char > AnalysisVector_traits;

      const AnalysisVector_optional&
      AnalysisVector () const;

      AnalysisVector_optional&
      AnalysisVector ();

      void
      AnalysisVector (const AnalysisVector_type& x);

      void
      AnalysisVector (const AnalysisVector_optional& x);

      void
      AnalysisVector (::std::auto_ptr< AnalysisVector_type > p);

      // Constructors.
      //
      DistanceBetweenCharacteristicActualType (const id_type&,
                                               const Status_type&,
                                               const CharacteristicItemId_type&);

      DistanceBetweenCharacteristicActualType (const id_type&,
                                               ::std::auto_ptr< Status_type >,
                                               ::std::auto_ptr< CharacteristicItemId_type >);

      DistanceBetweenCharacteristicActualType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      DistanceBetweenCharacteristicActualType (const DistanceBetweenCharacteristicActualType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual DistanceBetweenCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      DistanceBetweenCharacteristicActualType&
      operator= (const DistanceBetweenCharacteristicActualType& x);

      virtual 
      ~DistanceBetweenCharacteristicActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      AnalysisVector_optional AnalysisVector_;
    };

    class RadiusCharacteristicItemType: public ::xsd::qif2::LinearCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      RadiusCharacteristicItemType (const id_type&,
                                    const Name_type&,
                                    const CharacteristicNominalId_type&);

      RadiusCharacteristicItemType (const id_type&,
                                    const Name_type&,
                                    ::std::auto_ptr< CharacteristicNominalId_type >);

      RadiusCharacteristicItemType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      RadiusCharacteristicItemType (const RadiusCharacteristicItemType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual RadiusCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~RadiusCharacteristicItemType ();
    };

    class RadiusCharacteristicDefinitionType: public ::xsd::qif2::LinearCharacteristicDefinitionBaseType
    {
      public:
      // ControlledRadius
      //
      typedef ::xml_schema::boolean ControlledRadius_type;
      typedef ::xsd::cxx::tree::optional< ControlledRadius_type > ControlledRadius_optional;
      typedef ::xsd::cxx::tree::traits< ControlledRadius_type, char > ControlledRadius_traits;

      const ControlledRadius_optional&
      ControlledRadius () const;

      ControlledRadius_optional&
      ControlledRadius ();

      void
      ControlledRadius (const ControlledRadius_type& x);

      void
      ControlledRadius (const ControlledRadius_optional& x);

      // Constructors.
      //
      RadiusCharacteristicDefinitionType (const id_type&);

      RadiusCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      RadiusCharacteristicDefinitionType (const RadiusCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual RadiusCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      RadiusCharacteristicDefinitionType&
      operator= (const RadiusCharacteristicDefinitionType& x);

      virtual 
      ~RadiusCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ControlledRadius_optional ControlledRadius_;
    };

    class RadiusCharacteristicNominalType: public ::xsd::qif2::LinearCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      RadiusCharacteristicNominalType (const id_type&,
                                       const CharacteristicDefinitionId_type&);

      RadiusCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      RadiusCharacteristicNominalType (const RadiusCharacteristicNominalType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual RadiusCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~RadiusCharacteristicNominalType ();
    };

    class RadiusCharacteristicActualType: public ::xsd::qif2::LinearCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      RadiusCharacteristicActualType (const id_type&,
                                      const Status_type&,
                                      const CharacteristicItemId_type&);

      RadiusCharacteristicActualType (const id_type&,
                                      ::std::auto_ptr< Status_type >,
                                      ::std::auto_ptr< CharacteristicItemId_type >);

      RadiusCharacteristicActualType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      RadiusCharacteristicActualType (const RadiusCharacteristicActualType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual RadiusCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~RadiusCharacteristicActualType ();
    };

    class ChordCharacteristicItemType: public ::xsd::qif2::LinearCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      ChordCharacteristicItemType (const id_type&,
                                   const Name_type&,
                                   const CharacteristicNominalId_type&);

      ChordCharacteristicItemType (const id_type&,
                                   const Name_type&,
                                   ::std::auto_ptr< CharacteristicNominalId_type >);

      ChordCharacteristicItemType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      ChordCharacteristicItemType (const ChordCharacteristicItemType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual ChordCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ChordCharacteristicItemType ();
    };

    class ChordCharacteristicDefinitionType: public ::xsd::qif2::LinearCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      ChordCharacteristicDefinitionType (const id_type&);

      ChordCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      ChordCharacteristicDefinitionType (const ChordCharacteristicDefinitionType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual ChordCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ChordCharacteristicDefinitionType ();
    };

    class ChordCharacteristicNominalType: public ::xsd::qif2::LinearCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      ChordCharacteristicNominalType (const id_type&,
                                      const CharacteristicDefinitionId_type&);

      ChordCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      ChordCharacteristicNominalType (const ChordCharacteristicNominalType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual ChordCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ChordCharacteristicNominalType ();
    };

    class ChordCharacteristicActualType: public ::xsd::qif2::LinearCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      ChordCharacteristicActualType (const id_type&,
                                     const Status_type&,
                                     const CharacteristicItemId_type&);

      ChordCharacteristicActualType (const id_type&,
                                     ::std::auto_ptr< Status_type >,
                                     ::std::auto_ptr< CharacteristicItemId_type >);

      ChordCharacteristicActualType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      ChordCharacteristicActualType (const ChordCharacteristicActualType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual ChordCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ChordCharacteristicActualType ();
    };

    class RunoutCharacteristicItemBaseType: public ::xsd::qif2::GeometricCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      RunoutCharacteristicItemBaseType (const id_type&,
                                        const Name_type&,
                                        const CharacteristicNominalId_type&);

      RunoutCharacteristicItemBaseType (const id_type&,
                                        const Name_type&,
                                        ::std::auto_ptr< CharacteristicNominalId_type >);

      RunoutCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      RunoutCharacteristicItemBaseType (const RunoutCharacteristicItemBaseType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual RunoutCharacteristicItemBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~RunoutCharacteristicItemBaseType ();
    };

    class RunoutCharacteristicDefinitionBaseType: public ::xsd::qif2::GeometricCharacteristicDefinitionBaseType
    {
      public:
      // ToleranceValue
      //
      typedef ::xsd::qif2::LinearValueType ToleranceValue_type;
      typedef ::xsd::cxx::tree::traits< ToleranceValue_type, char > ToleranceValue_traits;

      const ToleranceValue_type&
      ToleranceValue () const;

      ToleranceValue_type&
      ToleranceValue ();

      void
      ToleranceValue (const ToleranceValue_type& x);

      void
      ToleranceValue (::std::auto_ptr< ToleranceValue_type > p);

      // DatumReferenceFrameId
      //
      typedef ::xsd::qif2::QIFReferenceFullType DatumReferenceFrameId_type;
      typedef ::xsd::cxx::tree::traits< DatumReferenceFrameId_type, char > DatumReferenceFrameId_traits;

      const DatumReferenceFrameId_type&
      DatumReferenceFrameId () const;

      DatumReferenceFrameId_type&
      DatumReferenceFrameId ();

      void
      DatumReferenceFrameId (const DatumReferenceFrameId_type& x);

      void
      DatumReferenceFrameId (::std::auto_ptr< DatumReferenceFrameId_type > p);

      // Constructors.
      //
      RunoutCharacteristicDefinitionBaseType (const id_type&,
                                              const ToleranceValue_type&,
                                              const DatumReferenceFrameId_type&);

      RunoutCharacteristicDefinitionBaseType (const id_type&,
                                              ::std::auto_ptr< ToleranceValue_type >,
                                              ::std::auto_ptr< DatumReferenceFrameId_type >);

      RunoutCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      RunoutCharacteristicDefinitionBaseType (const RunoutCharacteristicDefinitionBaseType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual RunoutCharacteristicDefinitionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      RunoutCharacteristicDefinitionBaseType&
      operator= (const RunoutCharacteristicDefinitionBaseType& x);

      virtual 
      ~RunoutCharacteristicDefinitionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ToleranceValue_type > ToleranceValue_;
      ::xsd::cxx::tree::one< DatumReferenceFrameId_type > DatumReferenceFrameId_;
    };

    class RunoutCharacteristicNominalBaseType: public ::xsd::qif2::GeometricCharacteristicNominalBaseType
    {
      public:
      // ZoneLimit
      //
      typedef ::xsd::qif2::CharacteristicDirectionalZoneLimitType ZoneLimit_type;
      typedef ::xsd::cxx::tree::optional< ZoneLimit_type > ZoneLimit_optional;
      typedef ::xsd::cxx::tree::traits< ZoneLimit_type, char > ZoneLimit_traits;

      const ZoneLimit_optional&
      ZoneLimit () const;

      ZoneLimit_optional&
      ZoneLimit ();

      void
      ZoneLimit (const ZoneLimit_type& x);

      void
      ZoneLimit (const ZoneLimit_optional& x);

      void
      ZoneLimit (::std::auto_ptr< ZoneLimit_type > p);

      // Constructors.
      //
      RunoutCharacteristicNominalBaseType (const id_type&,
                                           const CharacteristicDefinitionId_type&);

      RunoutCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      RunoutCharacteristicNominalBaseType (const RunoutCharacteristicNominalBaseType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual RunoutCharacteristicNominalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      RunoutCharacteristicNominalBaseType&
      operator= (const RunoutCharacteristicNominalBaseType& x);

      virtual 
      ~RunoutCharacteristicNominalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ZoneLimit_optional ZoneLimit_;
    };

    class RunoutCharacteristicActualBaseType: public ::xsd::qif2::GeometricCharacteristicActualBaseType
    {
      public:
      // DatumsOk
      //
      typedef ::xml_schema::boolean DatumsOk_type;
      typedef ::xsd::cxx::tree::optional< DatumsOk_type > DatumsOk_optional;
      typedef ::xsd::cxx::tree::traits< DatumsOk_type, char > DatumsOk_traits;

      const DatumsOk_optional&
      DatumsOk () const;

      DatumsOk_optional&
      DatumsOk ();

      void
      DatumsOk (const DatumsOk_type& x);

      void
      DatumsOk (const DatumsOk_optional& x);

      // Constructors.
      //
      RunoutCharacteristicActualBaseType (const id_type&,
                                          const Status_type&,
                                          const CharacteristicItemId_type&);

      RunoutCharacteristicActualBaseType (const id_type&,
                                          ::std::auto_ptr< Status_type >,
                                          ::std::auto_ptr< CharacteristicItemId_type >);

      RunoutCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      RunoutCharacteristicActualBaseType (const RunoutCharacteristicActualBaseType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual RunoutCharacteristicActualBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      RunoutCharacteristicActualBaseType&
      operator= (const RunoutCharacteristicActualBaseType& x);

      virtual 
      ~RunoutCharacteristicActualBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      DatumsOk_optional DatumsOk_;
    };

    class CircularRunoutCharacteristicItemType: public ::xsd::qif2::RunoutCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      CircularRunoutCharacteristicItemType (const id_type&,
                                            const Name_type&,
                                            const CharacteristicNominalId_type&);

      CircularRunoutCharacteristicItemType (const id_type&,
                                            const Name_type&,
                                            ::std::auto_ptr< CharacteristicNominalId_type >);

      CircularRunoutCharacteristicItemType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      CircularRunoutCharacteristicItemType (const CircularRunoutCharacteristicItemType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual CircularRunoutCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CircularRunoutCharacteristicItemType ();
    };

    class CircularRunoutCharacteristicDefinitionType: public ::xsd::qif2::RunoutCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      CircularRunoutCharacteristicDefinitionType (const id_type&,
                                                  const ToleranceValue_type&,
                                                  const DatumReferenceFrameId_type&);

      CircularRunoutCharacteristicDefinitionType (const id_type&,
                                                  ::std::auto_ptr< ToleranceValue_type >,
                                                  ::std::auto_ptr< DatumReferenceFrameId_type >);

      CircularRunoutCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      CircularRunoutCharacteristicDefinitionType (const CircularRunoutCharacteristicDefinitionType& x,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      virtual CircularRunoutCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CircularRunoutCharacteristicDefinitionType ();
    };

    class CircularRunoutCharacteristicNominalType: public ::xsd::qif2::RunoutCharacteristicNominalBaseType
    {
      public:
      // ZoneDirection
      //
      typedef ::xsd::qif2::UnitVectorType ZoneDirection_type;
      typedef ::xsd::cxx::tree::optional< ZoneDirection_type > ZoneDirection_optional;
      typedef ::xsd::cxx::tree::traits< ZoneDirection_type, char > ZoneDirection_traits;

      const ZoneDirection_optional&
      ZoneDirection () const;

      ZoneDirection_optional&
      ZoneDirection ();

      void
      ZoneDirection (const ZoneDirection_type& x);

      void
      ZoneDirection (const ZoneDirection_optional& x);

      void
      ZoneDirection (::std::auto_ptr< ZoneDirection_type > p);

      // Constructors.
      //
      CircularRunoutCharacteristicNominalType (const id_type&,
                                               const CharacteristicDefinitionId_type&);

      CircularRunoutCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      CircularRunoutCharacteristicNominalType (const CircularRunoutCharacteristicNominalType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual CircularRunoutCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircularRunoutCharacteristicNominalType&
      operator= (const CircularRunoutCharacteristicNominalType& x);

      virtual 
      ~CircularRunoutCharacteristicNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ZoneDirection_optional ZoneDirection_;
    };

    class CircularRunoutCharacteristicActualType: public ::xsd::qif2::RunoutCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      CircularRunoutCharacteristicActualType (const id_type&,
                                              const Status_type&,
                                              const CharacteristicItemId_type&);

      CircularRunoutCharacteristicActualType (const id_type&,
                                              ::std::auto_ptr< Status_type >,
                                              ::std::auto_ptr< CharacteristicItemId_type >);

      CircularRunoutCharacteristicActualType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      CircularRunoutCharacteristicActualType (const CircularRunoutCharacteristicActualType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual CircularRunoutCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CircularRunoutCharacteristicActualType ();
    };

    class TotalRunoutCharacteristicItemType: public ::xsd::qif2::RunoutCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      TotalRunoutCharacteristicItemType (const id_type&,
                                         const Name_type&,
                                         const CharacteristicNominalId_type&);

      TotalRunoutCharacteristicItemType (const id_type&,
                                         const Name_type&,
                                         ::std::auto_ptr< CharacteristicNominalId_type >);

      TotalRunoutCharacteristicItemType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      TotalRunoutCharacteristicItemType (const TotalRunoutCharacteristicItemType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual TotalRunoutCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~TotalRunoutCharacteristicItemType ();
    };

    class TotalRunoutCharacteristicDefinitionType: public ::xsd::qif2::RunoutCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      TotalRunoutCharacteristicDefinitionType (const id_type&,
                                               const ToleranceValue_type&,
                                               const DatumReferenceFrameId_type&);

      TotalRunoutCharacteristicDefinitionType (const id_type&,
                                               ::std::auto_ptr< ToleranceValue_type >,
                                               ::std::auto_ptr< DatumReferenceFrameId_type >);

      TotalRunoutCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      TotalRunoutCharacteristicDefinitionType (const TotalRunoutCharacteristicDefinitionType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual TotalRunoutCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~TotalRunoutCharacteristicDefinitionType ();
    };

    class TotalRunoutCharacteristicNominalType: public ::xsd::qif2::RunoutCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      TotalRunoutCharacteristicNominalType (const id_type&,
                                            const CharacteristicDefinitionId_type&);

      TotalRunoutCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      TotalRunoutCharacteristicNominalType (const TotalRunoutCharacteristicNominalType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual TotalRunoutCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~TotalRunoutCharacteristicNominalType ();
    };

    class TotalRunoutCharacteristicActualType: public ::xsd::qif2::RunoutCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      TotalRunoutCharacteristicActualType (const id_type&,
                                           const Status_type&,
                                           const CharacteristicItemId_type&);

      TotalRunoutCharacteristicActualType (const id_type&,
                                           ::std::auto_ptr< Status_type >,
                                           ::std::auto_ptr< CharacteristicItemId_type >);

      TotalRunoutCharacteristicActualType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      TotalRunoutCharacteristicActualType (const TotalRunoutCharacteristicActualType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual TotalRunoutCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~TotalRunoutCharacteristicActualType ();
    };

    class ConcentricitySphericalZoneType: public ::xml_schema::type
    {
      public:
      // Constructors.
      //
      ConcentricitySphericalZoneType ();

      ConcentricitySphericalZoneType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      ConcentricitySphericalZoneType (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      ConcentricitySphericalZoneType (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      ConcentricitySphericalZoneType (const ConcentricitySphericalZoneType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual ConcentricitySphericalZoneType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ConcentricitySphericalZoneType ();
    };

    class ConcentricityDiametricalZoneType: public ::xml_schema::type
    {
      public:
      // Constructors.
      //
      ConcentricityDiametricalZoneType ();

      ConcentricityDiametricalZoneType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      ConcentricityDiametricalZoneType (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      ConcentricityDiametricalZoneType (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      ConcentricityDiametricalZoneType (const ConcentricityDiametricalZoneType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual ConcentricityDiametricalZoneType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ConcentricityDiametricalZoneType ();
    };

    class ConcentricityNonDiametricalZoneType: public ::xml_schema::type
    {
      public:
      // Constructors.
      //
      ConcentricityNonDiametricalZoneType ();

      ConcentricityNonDiametricalZoneType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      ConcentricityNonDiametricalZoneType (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      ConcentricityNonDiametricalZoneType (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      ConcentricityNonDiametricalZoneType (const ConcentricityNonDiametricalZoneType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual ConcentricityNonDiametricalZoneType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ConcentricityNonDiametricalZoneType ();
    };

    class ConcentricityZoneShapeType: public ::xml_schema::type
    {
      public:
      // SphericalZone
      //
      typedef ::xsd::qif2::ConcentricitySphericalZoneType SphericalZone_type;
      typedef ::xsd::cxx::tree::optional< SphericalZone_type > SphericalZone_optional;
      typedef ::xsd::cxx::tree::traits< SphericalZone_type, char > SphericalZone_traits;

      const SphericalZone_optional&
      SphericalZone () const;

      SphericalZone_optional&
      SphericalZone ();

      void
      SphericalZone (const SphericalZone_type& x);

      void
      SphericalZone (const SphericalZone_optional& x);

      void
      SphericalZone (::std::auto_ptr< SphericalZone_type > p);

      // DiametricalZone
      //
      typedef ::xsd::qif2::ConcentricityDiametricalZoneType DiametricalZone_type;
      typedef ::xsd::cxx::tree::optional< DiametricalZone_type > DiametricalZone_optional;
      typedef ::xsd::cxx::tree::traits< DiametricalZone_type, char > DiametricalZone_traits;

      const DiametricalZone_optional&
      DiametricalZone () const;

      DiametricalZone_optional&
      DiametricalZone ();

      void
      DiametricalZone (const DiametricalZone_type& x);

      void
      DiametricalZone (const DiametricalZone_optional& x);

      void
      DiametricalZone (::std::auto_ptr< DiametricalZone_type > p);

      // NonDiametricalZone
      //
      typedef ::xsd::qif2::ConcentricityNonDiametricalZoneType NonDiametricalZone_type;
      typedef ::xsd::cxx::tree::optional< NonDiametricalZone_type > NonDiametricalZone_optional;
      typedef ::xsd::cxx::tree::traits< NonDiametricalZone_type, char > NonDiametricalZone_traits;

      const NonDiametricalZone_optional&
      NonDiametricalZone () const;

      NonDiametricalZone_optional&
      NonDiametricalZone ();

      void
      NonDiametricalZone (const NonDiametricalZone_type& x);

      void
      NonDiametricalZone (const NonDiametricalZone_optional& x);

      void
      NonDiametricalZone (::std::auto_ptr< NonDiametricalZone_type > p);

      // Constructors.
      //
      ConcentricityZoneShapeType ();

      ConcentricityZoneShapeType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      ConcentricityZoneShapeType (const ConcentricityZoneShapeType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual ConcentricityZoneShapeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConcentricityZoneShapeType&
      operator= (const ConcentricityZoneShapeType& x);

      virtual 
      ~ConcentricityZoneShapeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      SphericalZone_optional SphericalZone_;
      DiametricalZone_optional DiametricalZone_;
      NonDiametricalZone_optional NonDiametricalZone_;
    };

    class ConcentricityCharacteristicItemType: public ::xsd::qif2::LocationCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      ConcentricityCharacteristicItemType (const id_type&,
                                           const Name_type&,
                                           const CharacteristicNominalId_type&);

      ConcentricityCharacteristicItemType (const id_type&,
                                           const Name_type&,
                                           ::std::auto_ptr< CharacteristicNominalId_type >);

      ConcentricityCharacteristicItemType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      ConcentricityCharacteristicItemType (const ConcentricityCharacteristicItemType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual ConcentricityCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ConcentricityCharacteristicItemType ();
    };

    class ConcentricityCharacteristicDefinitionType: public ::xsd::qif2::LocationCharacteristicDefinitionBaseType
    {
      public:
      // ZoneShape
      //
      typedef ::xsd::qif2::ConcentricityZoneShapeType ZoneShape_type;
      typedef ::xsd::cxx::tree::traits< ZoneShape_type, char > ZoneShape_traits;

      const ZoneShape_type&
      ZoneShape () const;

      ZoneShape_type&
      ZoneShape ();

      void
      ZoneShape (const ZoneShape_type& x);

      void
      ZoneShape (::std::auto_ptr< ZoneShape_type > p);

      // Constructors.
      //
      ConcentricityCharacteristicDefinitionType (const id_type&,
                                                 const ToleranceValue_type&,
                                                 const DatumReferenceFrameId_type&,
                                                 const ZoneShape_type&);

      ConcentricityCharacteristicDefinitionType (const id_type&,
                                                 ::std::auto_ptr< ToleranceValue_type >,
                                                 ::std::auto_ptr< DatumReferenceFrameId_type >,
                                                 ::std::auto_ptr< ZoneShape_type >);

      ConcentricityCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      ConcentricityCharacteristicDefinitionType (const ConcentricityCharacteristicDefinitionType& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      virtual ConcentricityCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConcentricityCharacteristicDefinitionType&
      operator= (const ConcentricityCharacteristicDefinitionType& x);

      virtual 
      ~ConcentricityCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ZoneShape_type > ZoneShape_;
    };

    class ConcentricityCharacteristicNominalType: public ::xsd::qif2::LocationCharacteristicNominalBaseType
    {
      public:
      // ZoneLimit
      //
      typedef ::xsd::qif2::CharacteristicDirectionalZoneLimitType ZoneLimit_type;
      typedef ::xsd::cxx::tree::optional< ZoneLimit_type > ZoneLimit_optional;
      typedef ::xsd::cxx::tree::traits< ZoneLimit_type, char > ZoneLimit_traits;

      const ZoneLimit_optional&
      ZoneLimit () const;

      ZoneLimit_optional&
      ZoneLimit ();

      void
      ZoneLimit (const ZoneLimit_type& x);

      void
      ZoneLimit (const ZoneLimit_optional& x);

      void
      ZoneLimit (::std::auto_ptr< ZoneLimit_type > p);

      // Constructors.
      //
      ConcentricityCharacteristicNominalType (const id_type&,
                                              const CharacteristicDefinitionId_type&);

      ConcentricityCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      ConcentricityCharacteristicNominalType (const ConcentricityCharacteristicNominalType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual ConcentricityCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConcentricityCharacteristicNominalType&
      operator= (const ConcentricityCharacteristicNominalType& x);

      virtual 
      ~ConcentricityCharacteristicNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ZoneLimit_optional ZoneLimit_;
    };

    class ConcentricityCharacteristicActualType: public ::xsd::qif2::LocationCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      ConcentricityCharacteristicActualType (const id_type&,
                                             const Status_type&,
                                             const CharacteristicItemId_type&);

      ConcentricityCharacteristicActualType (const id_type&,
                                             ::std::auto_ptr< Status_type >,
                                             ::std::auto_ptr< CharacteristicItemId_type >);

      ConcentricityCharacteristicActualType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      ConcentricityCharacteristicActualType (const ConcentricityCharacteristicActualType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual ConcentricityCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ConcentricityCharacteristicActualType ();
    };

    class SymmetryCharacteristicItemType: public ::xsd::qif2::LocationCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      SymmetryCharacteristicItemType (const id_type&,
                                      const Name_type&,
                                      const CharacteristicNominalId_type&);

      SymmetryCharacteristicItemType (const id_type&,
                                      const Name_type&,
                                      ::std::auto_ptr< CharacteristicNominalId_type >);

      SymmetryCharacteristicItemType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      SymmetryCharacteristicItemType (const SymmetryCharacteristicItemType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual SymmetryCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SymmetryCharacteristicItemType ();
    };

    class SymmetryCharacteristicDefinitionType: public ::xsd::qif2::LocationCharacteristicDefinitionBaseType
    {
      public:
      // SecondCompositeSegmentSymmetryDefinition
      //
      typedef ::xsd::qif2::CompositeSegmentSymmetryDefinitionType SecondCompositeSegmentSymmetryDefinition_type;
      typedef ::xsd::cxx::tree::optional< SecondCompositeSegmentSymmetryDefinition_type > SecondCompositeSegmentSymmetryDefinition_optional;
      typedef ::xsd::cxx::tree::traits< SecondCompositeSegmentSymmetryDefinition_type, char > SecondCompositeSegmentSymmetryDefinition_traits;

      const SecondCompositeSegmentSymmetryDefinition_optional&
      SecondCompositeSegmentSymmetryDefinition () const;

      SecondCompositeSegmentSymmetryDefinition_optional&
      SecondCompositeSegmentSymmetryDefinition ();

      void
      SecondCompositeSegmentSymmetryDefinition (const SecondCompositeSegmentSymmetryDefinition_type& x);

      void
      SecondCompositeSegmentSymmetryDefinition (const SecondCompositeSegmentSymmetryDefinition_optional& x);

      void
      SecondCompositeSegmentSymmetryDefinition (::std::auto_ptr< SecondCompositeSegmentSymmetryDefinition_type > p);

      // ThirdCompositeSegmentSymmetryDefinition
      //
      typedef ::xsd::qif2::CompositeSegmentSymmetryDefinitionType ThirdCompositeSegmentSymmetryDefinition_type;
      typedef ::xsd::cxx::tree::optional< ThirdCompositeSegmentSymmetryDefinition_type > ThirdCompositeSegmentSymmetryDefinition_optional;
      typedef ::xsd::cxx::tree::traits< ThirdCompositeSegmentSymmetryDefinition_type, char > ThirdCompositeSegmentSymmetryDefinition_traits;

      const ThirdCompositeSegmentSymmetryDefinition_optional&
      ThirdCompositeSegmentSymmetryDefinition () const;

      ThirdCompositeSegmentSymmetryDefinition_optional&
      ThirdCompositeSegmentSymmetryDefinition ();

      void
      ThirdCompositeSegmentSymmetryDefinition (const ThirdCompositeSegmentSymmetryDefinition_type& x);

      void
      ThirdCompositeSegmentSymmetryDefinition (const ThirdCompositeSegmentSymmetryDefinition_optional& x);

      void
      ThirdCompositeSegmentSymmetryDefinition (::std::auto_ptr< ThirdCompositeSegmentSymmetryDefinition_type > p);

      // Constructors.
      //
      SymmetryCharacteristicDefinitionType (const id_type&,
                                            const ToleranceValue_type&,
                                            const DatumReferenceFrameId_type&);

      SymmetryCharacteristicDefinitionType (const id_type&,
                                            ::std::auto_ptr< ToleranceValue_type >,
                                            ::std::auto_ptr< DatumReferenceFrameId_type >);

      SymmetryCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      SymmetryCharacteristicDefinitionType (const SymmetryCharacteristicDefinitionType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual SymmetryCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SymmetryCharacteristicDefinitionType&
      operator= (const SymmetryCharacteristicDefinitionType& x);

      virtual 
      ~SymmetryCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      SecondCompositeSegmentSymmetryDefinition_optional SecondCompositeSegmentSymmetryDefinition_;
      ThirdCompositeSegmentSymmetryDefinition_optional ThirdCompositeSegmentSymmetryDefinition_;
    };

    class SymmetryCharacteristicNominalType: public ::xsd::qif2::LocationCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      SymmetryCharacteristicNominalType (const id_type&,
                                         const CharacteristicDefinitionId_type&);

      SymmetryCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      SymmetryCharacteristicNominalType (const SymmetryCharacteristicNominalType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual SymmetryCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SymmetryCharacteristicNominalType ();
    };

    class SymmetryCharacteristicActualType: public ::xsd::qif2::LocationCharacteristicActualBaseType
    {
      public:
      // SecondCompositeSegmentSymmetryActual
      //
      typedef ::xsd::qif2::CompositeSegmentSymmetryActualType SecondCompositeSegmentSymmetryActual_type;
      typedef ::xsd::cxx::tree::optional< SecondCompositeSegmentSymmetryActual_type > SecondCompositeSegmentSymmetryActual_optional;
      typedef ::xsd::cxx::tree::traits< SecondCompositeSegmentSymmetryActual_type, char > SecondCompositeSegmentSymmetryActual_traits;

      const SecondCompositeSegmentSymmetryActual_optional&
      SecondCompositeSegmentSymmetryActual () const;

      SecondCompositeSegmentSymmetryActual_optional&
      SecondCompositeSegmentSymmetryActual ();

      void
      SecondCompositeSegmentSymmetryActual (const SecondCompositeSegmentSymmetryActual_type& x);

      void
      SecondCompositeSegmentSymmetryActual (const SecondCompositeSegmentSymmetryActual_optional& x);

      void
      SecondCompositeSegmentSymmetryActual (::std::auto_ptr< SecondCompositeSegmentSymmetryActual_type > p);

      // ThirdCompositeSegmentSymmetryActual
      //
      typedef ::xsd::qif2::CompositeSegmentSymmetryActualType ThirdCompositeSegmentSymmetryActual_type;
      typedef ::xsd::cxx::tree::optional< ThirdCompositeSegmentSymmetryActual_type > ThirdCompositeSegmentSymmetryActual_optional;
      typedef ::xsd::cxx::tree::traits< ThirdCompositeSegmentSymmetryActual_type, char > ThirdCompositeSegmentSymmetryActual_traits;

      const ThirdCompositeSegmentSymmetryActual_optional&
      ThirdCompositeSegmentSymmetryActual () const;

      ThirdCompositeSegmentSymmetryActual_optional&
      ThirdCompositeSegmentSymmetryActual ();

      void
      ThirdCompositeSegmentSymmetryActual (const ThirdCompositeSegmentSymmetryActual_type& x);

      void
      ThirdCompositeSegmentSymmetryActual (const ThirdCompositeSegmentSymmetryActual_optional& x);

      void
      ThirdCompositeSegmentSymmetryActual (::std::auto_ptr< ThirdCompositeSegmentSymmetryActual_type > p);

      // Constructors.
      //
      SymmetryCharacteristicActualType (const id_type&,
                                        const Status_type&,
                                        const CharacteristicItemId_type&);

      SymmetryCharacteristicActualType (const id_type&,
                                        ::std::auto_ptr< Status_type >,
                                        ::std::auto_ptr< CharacteristicItemId_type >);

      SymmetryCharacteristicActualType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      SymmetryCharacteristicActualType (const SymmetryCharacteristicActualType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual SymmetryCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SymmetryCharacteristicActualType&
      operator= (const SymmetryCharacteristicActualType& x);

      virtual 
      ~SymmetryCharacteristicActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      SecondCompositeSegmentSymmetryActual_optional SecondCompositeSegmentSymmetryActual_;
      ThirdCompositeSegmentSymmetryActual_optional ThirdCompositeSegmentSymmetryActual_;
    };

    class ProfileCharacteristicItemBaseType: public ::xsd::qif2::GeometricCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      ProfileCharacteristicItemBaseType (const id_type&,
                                         const Name_type&,
                                         const CharacteristicNominalId_type&);

      ProfileCharacteristicItemBaseType (const id_type&,
                                         const Name_type&,
                                         ::std::auto_ptr< CharacteristicNominalId_type >);

      ProfileCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      ProfileCharacteristicItemBaseType (const ProfileCharacteristicItemBaseType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual ProfileCharacteristicItemBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ProfileCharacteristicItemBaseType ();
    };

    class ProfileCharacteristicDefinitionBaseType: public ::xsd::qif2::GeometricCharacteristicDefinitionBaseType
    {
      public:
      // ToleranceValue
      //
      typedef ::xsd::qif2::LinearValueType ToleranceValue_type;
      typedef ::xsd::cxx::tree::traits< ToleranceValue_type, char > ToleranceValue_traits;

      const ToleranceValue_type&
      ToleranceValue () const;

      ToleranceValue_type&
      ToleranceValue ();

      void
      ToleranceValue (const ToleranceValue_type& x);

      void
      ToleranceValue (::std::auto_ptr< ToleranceValue_type > p);

      // OuterDisposition
      //
      typedef ::xsd::qif2::LinearValueType OuterDisposition_type;
      typedef ::xsd::cxx::tree::optional< OuterDisposition_type > OuterDisposition_optional;
      typedef ::xsd::cxx::tree::traits< OuterDisposition_type, char > OuterDisposition_traits;

      const OuterDisposition_optional&
      OuterDisposition () const;

      OuterDisposition_optional&
      OuterDisposition ();

      void
      OuterDisposition (const OuterDisposition_type& x);

      void
      OuterDisposition (const OuterDisposition_optional& x);

      void
      OuterDisposition (::std::auto_ptr< OuterDisposition_type > p);

      // UnequallyDisposedZone
      //
      typedef ::xsd::qif2::LinearValueType UnequallyDisposedZone_type;
      typedef ::xsd::cxx::tree::optional< UnequallyDisposedZone_type > UnequallyDisposedZone_optional;
      typedef ::xsd::cxx::tree::traits< UnequallyDisposedZone_type, char > UnequallyDisposedZone_traits;

      const UnequallyDisposedZone_optional&
      UnequallyDisposedZone () const;

      UnequallyDisposedZone_optional&
      UnequallyDisposedZone ();

      void
      UnequallyDisposedZone (const UnequallyDisposedZone_type& x);

      void
      UnequallyDisposedZone (const UnequallyDisposedZone_optional& x);

      void
      UnequallyDisposedZone (::std::auto_ptr< UnequallyDisposedZone_type > p);

      // OffsetZone
      //
      typedef ::xml_schema::boolean OffsetZone_type;
      typedef ::xsd::cxx::tree::optional< OffsetZone_type > OffsetZone_optional;
      typedef ::xsd::cxx::tree::traits< OffsetZone_type, char > OffsetZone_traits;

      const OffsetZone_optional&
      OffsetZone () const;

      OffsetZone_optional&
      OffsetZone ();

      void
      OffsetZone (const OffsetZone_type& x);

      void
      OffsetZone (const OffsetZone_optional& x);

      // SecondCompositeSegmentProfileDefinition
      //
      typedef ::xsd::qif2::CompositeSegmentProfileDefinitionType SecondCompositeSegmentProfileDefinition_type;
      typedef ::xsd::cxx::tree::optional< SecondCompositeSegmentProfileDefinition_type > SecondCompositeSegmentProfileDefinition_optional;
      typedef ::xsd::cxx::tree::traits< SecondCompositeSegmentProfileDefinition_type, char > SecondCompositeSegmentProfileDefinition_traits;

      const SecondCompositeSegmentProfileDefinition_optional&
      SecondCompositeSegmentProfileDefinition () const;

      SecondCompositeSegmentProfileDefinition_optional&
      SecondCompositeSegmentProfileDefinition ();

      void
      SecondCompositeSegmentProfileDefinition (const SecondCompositeSegmentProfileDefinition_type& x);

      void
      SecondCompositeSegmentProfileDefinition (const SecondCompositeSegmentProfileDefinition_optional& x);

      void
      SecondCompositeSegmentProfileDefinition (::std::auto_ptr< SecondCompositeSegmentProfileDefinition_type > p);

      // ThirdCompositeSegmentProfileDefinition
      //
      typedef ::xsd::qif2::CompositeSegmentProfileDefinitionType ThirdCompositeSegmentProfileDefinition_type;
      typedef ::xsd::cxx::tree::optional< ThirdCompositeSegmentProfileDefinition_type > ThirdCompositeSegmentProfileDefinition_optional;
      typedef ::xsd::cxx::tree::traits< ThirdCompositeSegmentProfileDefinition_type, char > ThirdCompositeSegmentProfileDefinition_traits;

      const ThirdCompositeSegmentProfileDefinition_optional&
      ThirdCompositeSegmentProfileDefinition () const;

      ThirdCompositeSegmentProfileDefinition_optional&
      ThirdCompositeSegmentProfileDefinition ();

      void
      ThirdCompositeSegmentProfileDefinition (const ThirdCompositeSegmentProfileDefinition_type& x);

      void
      ThirdCompositeSegmentProfileDefinition (const ThirdCompositeSegmentProfileDefinition_optional& x);

      void
      ThirdCompositeSegmentProfileDefinition (::std::auto_ptr< ThirdCompositeSegmentProfileDefinition_type > p);

      // FourthCompositeSegmentProfileDefinition
      //
      typedef ::xsd::qif2::CompositeSegmentProfileDefinitionType FourthCompositeSegmentProfileDefinition_type;
      typedef ::xsd::cxx::tree::optional< FourthCompositeSegmentProfileDefinition_type > FourthCompositeSegmentProfileDefinition_optional;
      typedef ::xsd::cxx::tree::traits< FourthCompositeSegmentProfileDefinition_type, char > FourthCompositeSegmentProfileDefinition_traits;

      const FourthCompositeSegmentProfileDefinition_optional&
      FourthCompositeSegmentProfileDefinition () const;

      FourthCompositeSegmentProfileDefinition_optional&
      FourthCompositeSegmentProfileDefinition ();

      void
      FourthCompositeSegmentProfileDefinition (const FourthCompositeSegmentProfileDefinition_type& x);

      void
      FourthCompositeSegmentProfileDefinition (const FourthCompositeSegmentProfileDefinition_optional& x);

      void
      FourthCompositeSegmentProfileDefinition (::std::auto_ptr< FourthCompositeSegmentProfileDefinition_type > p);

      // DatumReferenceFrameId
      //
      typedef ::xsd::qif2::QIFReferenceFullType DatumReferenceFrameId_type;
      typedef ::xsd::cxx::tree::traits< DatumReferenceFrameId_type, char > DatumReferenceFrameId_traits;

      const DatumReferenceFrameId_type&
      DatumReferenceFrameId () const;

      DatumReferenceFrameId_type&
      DatumReferenceFrameId ();

      void
      DatumReferenceFrameId (const DatumReferenceFrameId_type& x);

      void
      DatumReferenceFrameId (::std::auto_ptr< DatumReferenceFrameId_type > p);

      // OrientationOnly
      //
      typedef ::xml_schema::boolean OrientationOnly_type;
      typedef ::xsd::cxx::tree::optional< OrientationOnly_type > OrientationOnly_optional;
      typedef ::xsd::cxx::tree::traits< OrientationOnly_type, char > OrientationOnly_traits;

      const OrientationOnly_optional&
      OrientationOnly () const;

      OrientationOnly_optional&
      OrientationOnly ();

      void
      OrientationOnly (const OrientationOnly_type& x);

      void
      OrientationOnly (const OrientationOnly_optional& x);

      // Constructors.
      //
      ProfileCharacteristicDefinitionBaseType (const id_type&,
                                               const ToleranceValue_type&,
                                               const DatumReferenceFrameId_type&);

      ProfileCharacteristicDefinitionBaseType (const id_type&,
                                               ::std::auto_ptr< ToleranceValue_type >,
                                               ::std::auto_ptr< DatumReferenceFrameId_type >);

      ProfileCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      ProfileCharacteristicDefinitionBaseType (const ProfileCharacteristicDefinitionBaseType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual ProfileCharacteristicDefinitionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ProfileCharacteristicDefinitionBaseType&
      operator= (const ProfileCharacteristicDefinitionBaseType& x);

      virtual 
      ~ProfileCharacteristicDefinitionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ToleranceValue_type > ToleranceValue_;
      OuterDisposition_optional OuterDisposition_;
      UnequallyDisposedZone_optional UnequallyDisposedZone_;
      OffsetZone_optional OffsetZone_;
      SecondCompositeSegmentProfileDefinition_optional SecondCompositeSegmentProfileDefinition_;
      ThirdCompositeSegmentProfileDefinition_optional ThirdCompositeSegmentProfileDefinition_;
      FourthCompositeSegmentProfileDefinition_optional FourthCompositeSegmentProfileDefinition_;
      ::xsd::cxx::tree::one< DatumReferenceFrameId_type > DatumReferenceFrameId_;
      OrientationOnly_optional OrientationOnly_;
    };

    class ProfileCharacteristicNominalBaseType: public ::xsd::qif2::GeometricCharacteristicNominalBaseType
    {
      public:
      // TargetValue
      //
      typedef ::xsd::qif2::LinearValueType TargetValue_type;
      typedef ::xsd::cxx::tree::optional< TargetValue_type > TargetValue_optional;
      typedef ::xsd::cxx::tree::traits< TargetValue_type, char > TargetValue_traits;

      const TargetValue_optional&
      TargetValue () const;

      TargetValue_optional&
      TargetValue ();

      void
      TargetValue (const TargetValue_type& x);

      void
      TargetValue (const TargetValue_optional& x);

      void
      TargetValue (::std::auto_ptr< TargetValue_type > p);

      // Constructors.
      //
      ProfileCharacteristicNominalBaseType (const id_type&,
                                            const CharacteristicDefinitionId_type&);

      ProfileCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      ProfileCharacteristicNominalBaseType (const ProfileCharacteristicNominalBaseType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual ProfileCharacteristicNominalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ProfileCharacteristicNominalBaseType&
      operator= (const ProfileCharacteristicNominalBaseType& x);

      virtual 
      ~ProfileCharacteristicNominalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      TargetValue_optional TargetValue_;
    };

    class ProfileCharacteristicActualBaseType: public ::xsd::qif2::GeometricCharacteristicActualBaseType
    {
      public:
      // WorstPositiveDeviation
      //
      typedef ::xsd::qif2::LinearValueType WorstPositiveDeviation_type;
      typedef ::xsd::cxx::tree::optional< WorstPositiveDeviation_type > WorstPositiveDeviation_optional;
      typedef ::xsd::cxx::tree::traits< WorstPositiveDeviation_type, char > WorstPositiveDeviation_traits;

      const WorstPositiveDeviation_optional&
      WorstPositiveDeviation () const;

      WorstPositiveDeviation_optional&
      WorstPositiveDeviation ();

      void
      WorstPositiveDeviation (const WorstPositiveDeviation_type& x);

      void
      WorstPositiveDeviation (const WorstPositiveDeviation_optional& x);

      void
      WorstPositiveDeviation (::std::auto_ptr< WorstPositiveDeviation_type > p);

      // WorstNegativeDeviation
      //
      typedef ::xsd::qif2::LinearValueType WorstNegativeDeviation_type;
      typedef ::xsd::cxx::tree::optional< WorstNegativeDeviation_type > WorstNegativeDeviation_optional;
      typedef ::xsd::cxx::tree::traits< WorstNegativeDeviation_type, char > WorstNegativeDeviation_traits;

      const WorstNegativeDeviation_optional&
      WorstNegativeDeviation () const;

      WorstNegativeDeviation_optional&
      WorstNegativeDeviation ();

      void
      WorstNegativeDeviation (const WorstNegativeDeviation_type& x);

      void
      WorstNegativeDeviation (const WorstNegativeDeviation_optional& x);

      void
      WorstNegativeDeviation (::std::auto_ptr< WorstNegativeDeviation_type > p);

      // PointDeviations
      //
      typedef ::xsd::qif2::PointDeviationsType PointDeviations_type;
      typedef ::xsd::cxx::tree::optional< PointDeviations_type > PointDeviations_optional;
      typedef ::xsd::cxx::tree::traits< PointDeviations_type, char > PointDeviations_traits;

      const PointDeviations_optional&
      PointDeviations () const;

      PointDeviations_optional&
      PointDeviations ();

      void
      PointDeviations (const PointDeviations_type& x);

      void
      PointDeviations (const PointDeviations_optional& x);

      void
      PointDeviations (::std::auto_ptr< PointDeviations_type > p);

      // DatumsOk
      //
      typedef ::xml_schema::boolean DatumsOk_type;
      typedef ::xsd::cxx::tree::optional< DatumsOk_type > DatumsOk_optional;
      typedef ::xsd::cxx::tree::traits< DatumsOk_type, char > DatumsOk_traits;

      const DatumsOk_optional&
      DatumsOk () const;

      DatumsOk_optional&
      DatumsOk ();

      void
      DatumsOk (const DatumsOk_type& x);

      void
      DatumsOk (const DatumsOk_optional& x);

      // DRFTransformActualId
      //
      typedef ::xsd::qif2::QIFReferenceFullType DRFTransformActualId_type;
      typedef ::xsd::cxx::tree::optional< DRFTransformActualId_type > DRFTransformActualId_optional;
      typedef ::xsd::cxx::tree::traits< DRFTransformActualId_type, char > DRFTransformActualId_traits;

      const DRFTransformActualId_optional&
      DRFTransformActualId () const;

      DRFTransformActualId_optional&
      DRFTransformActualId ();

      void
      DRFTransformActualId (const DRFTransformActualId_type& x);

      void
      DRFTransformActualId (const DRFTransformActualId_optional& x);

      void
      DRFTransformActualId (::std::auto_ptr< DRFTransformActualId_type > p);

      // SecondCompositeSegmentProfileActual
      //
      typedef ::xsd::qif2::CompositeSegmentProfileActualType SecondCompositeSegmentProfileActual_type;
      typedef ::xsd::cxx::tree::optional< SecondCompositeSegmentProfileActual_type > SecondCompositeSegmentProfileActual_optional;
      typedef ::xsd::cxx::tree::traits< SecondCompositeSegmentProfileActual_type, char > SecondCompositeSegmentProfileActual_traits;

      const SecondCompositeSegmentProfileActual_optional&
      SecondCompositeSegmentProfileActual () const;

      SecondCompositeSegmentProfileActual_optional&
      SecondCompositeSegmentProfileActual ();

      void
      SecondCompositeSegmentProfileActual (const SecondCompositeSegmentProfileActual_type& x);

      void
      SecondCompositeSegmentProfileActual (const SecondCompositeSegmentProfileActual_optional& x);

      void
      SecondCompositeSegmentProfileActual (::std::auto_ptr< SecondCompositeSegmentProfileActual_type > p);

      // ThirdCompositeSegmentProfileActual
      //
      typedef ::xsd::qif2::CompositeSegmentProfileActualType ThirdCompositeSegmentProfileActual_type;
      typedef ::xsd::cxx::tree::optional< ThirdCompositeSegmentProfileActual_type > ThirdCompositeSegmentProfileActual_optional;
      typedef ::xsd::cxx::tree::traits< ThirdCompositeSegmentProfileActual_type, char > ThirdCompositeSegmentProfileActual_traits;

      const ThirdCompositeSegmentProfileActual_optional&
      ThirdCompositeSegmentProfileActual () const;

      ThirdCompositeSegmentProfileActual_optional&
      ThirdCompositeSegmentProfileActual ();

      void
      ThirdCompositeSegmentProfileActual (const ThirdCompositeSegmentProfileActual_type& x);

      void
      ThirdCompositeSegmentProfileActual (const ThirdCompositeSegmentProfileActual_optional& x);

      void
      ThirdCompositeSegmentProfileActual (::std::auto_ptr< ThirdCompositeSegmentProfileActual_type > p);

      // FourthCompositeSegmentProfileActual
      //
      typedef ::xsd::qif2::CompositeSegmentProfileActualType FourthCompositeSegmentProfileActual_type;
      typedef ::xsd::cxx::tree::optional< FourthCompositeSegmentProfileActual_type > FourthCompositeSegmentProfileActual_optional;
      typedef ::xsd::cxx::tree::traits< FourthCompositeSegmentProfileActual_type, char > FourthCompositeSegmentProfileActual_traits;

      const FourthCompositeSegmentProfileActual_optional&
      FourthCompositeSegmentProfileActual () const;

      FourthCompositeSegmentProfileActual_optional&
      FourthCompositeSegmentProfileActual ();

      void
      FourthCompositeSegmentProfileActual (const FourthCompositeSegmentProfileActual_type& x);

      void
      FourthCompositeSegmentProfileActual (const FourthCompositeSegmentProfileActual_optional& x);

      void
      FourthCompositeSegmentProfileActual (::std::auto_ptr< FourthCompositeSegmentProfileActual_type > p);

      // Constructors.
      //
      ProfileCharacteristicActualBaseType (const id_type&,
                                           const Status_type&,
                                           const CharacteristicItemId_type&);

      ProfileCharacteristicActualBaseType (const id_type&,
                                           ::std::auto_ptr< Status_type >,
                                           ::std::auto_ptr< CharacteristicItemId_type >);

      ProfileCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      ProfileCharacteristicActualBaseType (const ProfileCharacteristicActualBaseType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual ProfileCharacteristicActualBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ProfileCharacteristicActualBaseType&
      operator= (const ProfileCharacteristicActualBaseType& x);

      virtual 
      ~ProfileCharacteristicActualBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      WorstPositiveDeviation_optional WorstPositiveDeviation_;
      WorstNegativeDeviation_optional WorstNegativeDeviation_;
      PointDeviations_optional PointDeviations_;
      DatumsOk_optional DatumsOk_;
      DRFTransformActualId_optional DRFTransformActualId_;
      SecondCompositeSegmentProfileActual_optional SecondCompositeSegmentProfileActual_;
      ThirdCompositeSegmentProfileActual_optional ThirdCompositeSegmentProfileActual_;
      FourthCompositeSegmentProfileActual_optional FourthCompositeSegmentProfileActual_;
    };

    class LineProfileCharacteristicItemType: public ::xsd::qif2::ProfileCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      LineProfileCharacteristicItemType (const id_type&,
                                         const Name_type&,
                                         const CharacteristicNominalId_type&);

      LineProfileCharacteristicItemType (const id_type&,
                                         const Name_type&,
                                         ::std::auto_ptr< CharacteristicNominalId_type >);

      LineProfileCharacteristicItemType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      LineProfileCharacteristicItemType (const LineProfileCharacteristicItemType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual LineProfileCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~LineProfileCharacteristicItemType ();
    };

    class LineProfileCharacteristicDefinitionType: public ::xsd::qif2::ProfileCharacteristicDefinitionBaseType
    {
      public:
      // Extent
      //
      typedef ::xsd::qif2::ExtentType Extent_type;
      typedef ::xsd::cxx::tree::optional< Extent_type > Extent_optional;
      typedef ::xsd::cxx::tree::traits< Extent_type, char > Extent_traits;

      const Extent_optional&
      Extent () const;

      Extent_optional&
      Extent ();

      void
      Extent (const Extent_type& x);

      void
      Extent (const Extent_optional& x);

      void
      Extent (::std::auto_ptr< Extent_type > p);

      // Constructors.
      //
      LineProfileCharacteristicDefinitionType (const id_type&,
                                               const ToleranceValue_type&,
                                               const DatumReferenceFrameId_type&);

      LineProfileCharacteristicDefinitionType (const id_type&,
                                               ::std::auto_ptr< ToleranceValue_type >,
                                               ::std::auto_ptr< DatumReferenceFrameId_type >);

      LineProfileCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      LineProfileCharacteristicDefinitionType (const LineProfileCharacteristicDefinitionType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual LineProfileCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineProfileCharacteristicDefinitionType&
      operator= (const LineProfileCharacteristicDefinitionType& x);

      virtual 
      ~LineProfileCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Extent_optional Extent_;
    };

    class LineProfileCharacteristicNominalType: public ::xsd::qif2::ProfileCharacteristicNominalBaseType
    {
      public:
      // Vector
      //
      typedef ::xsd::qif2::UnitVectorType Vector_type;
      typedef ::xsd::cxx::tree::traits< Vector_type, char > Vector_traits;

      const Vector_type&
      Vector () const;

      Vector_type&
      Vector ();

      void
      Vector (const Vector_type& x);

      void
      Vector (::std::auto_ptr< Vector_type > p);

      // ZoneLimit
      //
      typedef ::xsd::qif2::CharacteristicDirectionalZoneLimitType ZoneLimit_type;
      typedef ::xsd::cxx::tree::optional< ZoneLimit_type > ZoneLimit_optional;
      typedef ::xsd::cxx::tree::traits< ZoneLimit_type, char > ZoneLimit_traits;

      const ZoneLimit_optional&
      ZoneLimit () const;

      ZoneLimit_optional&
      ZoneLimit ();

      void
      ZoneLimit (const ZoneLimit_type& x);

      void
      ZoneLimit (const ZoneLimit_optional& x);

      void
      ZoneLimit (::std::auto_ptr< ZoneLimit_type > p);

      // Constructors.
      //
      LineProfileCharacteristicNominalType (const id_type&,
                                            const CharacteristicDefinitionId_type&,
                                            const Vector_type&);

      LineProfileCharacteristicNominalType (const id_type&,
                                            const CharacteristicDefinitionId_type&,
                                            ::std::auto_ptr< Vector_type >);

      LineProfileCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      LineProfileCharacteristicNominalType (const LineProfileCharacteristicNominalType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual LineProfileCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineProfileCharacteristicNominalType&
      operator= (const LineProfileCharacteristicNominalType& x);

      virtual 
      ~LineProfileCharacteristicNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Vector_type > Vector_;
      ZoneLimit_optional ZoneLimit_;
    };

    class LineProfileCharacteristicActualType: public ::xsd::qif2::ProfileCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      LineProfileCharacteristicActualType (const id_type&,
                                           const Status_type&,
                                           const CharacteristicItemId_type&);

      LineProfileCharacteristicActualType (const id_type&,
                                           ::std::auto_ptr< Status_type >,
                                           ::std::auto_ptr< CharacteristicItemId_type >);

      LineProfileCharacteristicActualType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      LineProfileCharacteristicActualType (const LineProfileCharacteristicActualType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual LineProfileCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~LineProfileCharacteristicActualType ();
    };

    class PointProfileCharacteristicItemType: public ::xsd::qif2::ProfileCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      PointProfileCharacteristicItemType (const id_type&,
                                          const Name_type&,
                                          const CharacteristicNominalId_type&);

      PointProfileCharacteristicItemType (const id_type&,
                                          const Name_type&,
                                          ::std::auto_ptr< CharacteristicNominalId_type >);

      PointProfileCharacteristicItemType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      PointProfileCharacteristicItemType (const PointProfileCharacteristicItemType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual PointProfileCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PointProfileCharacteristicItemType ();
    };

    class PointProfileCharacteristicDefinitionType: public ::xsd::qif2::ProfileCharacteristicDefinitionBaseType
    {
      public:
      // Constructors.
      //
      PointProfileCharacteristicDefinitionType (const id_type&,
                                                const ToleranceValue_type&,
                                                const DatumReferenceFrameId_type&);

      PointProfileCharacteristicDefinitionType (const id_type&,
                                                ::std::auto_ptr< ToleranceValue_type >,
                                                ::std::auto_ptr< DatumReferenceFrameId_type >);

      PointProfileCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      PointProfileCharacteristicDefinitionType (const PointProfileCharacteristicDefinitionType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual PointProfileCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PointProfileCharacteristicDefinitionType ();
    };

    class PointProfileCharacteristicNominalType: public ::xsd::qif2::ProfileCharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      PointProfileCharacteristicNominalType (const id_type&,
                                             const CharacteristicDefinitionId_type&);

      PointProfileCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      PointProfileCharacteristicNominalType (const PointProfileCharacteristicNominalType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual PointProfileCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PointProfileCharacteristicNominalType ();
    };

    class PointProfileCharacteristicActualType: public ::xsd::qif2::ProfileCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      PointProfileCharacteristicActualType (const id_type&,
                                            const Status_type&,
                                            const CharacteristicItemId_type&);

      PointProfileCharacteristicActualType (const id_type&,
                                            ::std::auto_ptr< Status_type >,
                                            ::std::auto_ptr< CharacteristicItemId_type >);

      PointProfileCharacteristicActualType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      PointProfileCharacteristicActualType (const PointProfileCharacteristicActualType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual PointProfileCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PointProfileCharacteristicActualType ();
    };

    class SurfaceProfileCharacteristicItemType: public ::xsd::qif2::ProfileCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      SurfaceProfileCharacteristicItemType (const id_type&,
                                            const Name_type&,
                                            const CharacteristicNominalId_type&);

      SurfaceProfileCharacteristicItemType (const id_type&,
                                            const Name_type&,
                                            ::std::auto_ptr< CharacteristicNominalId_type >);

      SurfaceProfileCharacteristicItemType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      SurfaceProfileCharacteristicItemType (const SurfaceProfileCharacteristicItemType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual SurfaceProfileCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SurfaceProfileCharacteristicItemType ();
    };

    class SurfaceProfileCharacteristicDefinitionType: public ::xsd::qif2::ProfileCharacteristicDefinitionBaseType
    {
      public:
      // Extent
      //
      typedef ::xsd::qif2::ExtentType Extent_type;
      typedef ::xsd::cxx::tree::optional< Extent_type > Extent_optional;
      typedef ::xsd::cxx::tree::traits< Extent_type, char > Extent_traits;

      const Extent_optional&
      Extent () const;

      Extent_optional&
      Extent ();

      void
      Extent (const Extent_type& x);

      void
      Extent (const Extent_optional& x);

      void
      Extent (::std::auto_ptr< Extent_type > p);

      // Constructors.
      //
      SurfaceProfileCharacteristicDefinitionType (const id_type&,
                                                  const ToleranceValue_type&,
                                                  const DatumReferenceFrameId_type&);

      SurfaceProfileCharacteristicDefinitionType (const id_type&,
                                                  ::std::auto_ptr< ToleranceValue_type >,
                                                  ::std::auto_ptr< DatumReferenceFrameId_type >);

      SurfaceProfileCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      SurfaceProfileCharacteristicDefinitionType (const SurfaceProfileCharacteristicDefinitionType& x,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      virtual SurfaceProfileCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SurfaceProfileCharacteristicDefinitionType&
      operator= (const SurfaceProfileCharacteristicDefinitionType& x);

      virtual 
      ~SurfaceProfileCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Extent_optional Extent_;
    };

    class SurfaceProfileCharacteristicNominalType: public ::xsd::qif2::ProfileCharacteristicNominalBaseType
    {
      public:
      // CircularZoneLimit
      //
      typedef ::xsd::qif2::CharacteristicCircularZoneLimitType CircularZoneLimit_type;
      typedef ::xsd::cxx::tree::optional< CircularZoneLimit_type > CircularZoneLimit_optional;
      typedef ::xsd::cxx::tree::traits< CircularZoneLimit_type, char > CircularZoneLimit_traits;

      const CircularZoneLimit_optional&
      CircularZoneLimit () const;

      CircularZoneLimit_optional&
      CircularZoneLimit ();

      void
      CircularZoneLimit (const CircularZoneLimit_type& x);

      void
      CircularZoneLimit (const CircularZoneLimit_optional& x);

      void
      CircularZoneLimit (::std::auto_ptr< CircularZoneLimit_type > p);

      // DirectionalZoneLimit
      //
      typedef ::xsd::qif2::CharacteristicDirectionalZoneLimitType DirectionalZoneLimit_type;
      typedef ::xsd::cxx::tree::optional< DirectionalZoneLimit_type > DirectionalZoneLimit_optional;
      typedef ::xsd::cxx::tree::traits< DirectionalZoneLimit_type, char > DirectionalZoneLimit_traits;

      const DirectionalZoneLimit_optional&
      DirectionalZoneLimit () const;

      DirectionalZoneLimit_optional&
      DirectionalZoneLimit ();

      void
      DirectionalZoneLimit (const DirectionalZoneLimit_type& x);

      void
      DirectionalZoneLimit (const DirectionalZoneLimit_optional& x);

      void
      DirectionalZoneLimit (::std::auto_ptr< DirectionalZoneLimit_type > p);

      // RectangularZoneLimit
      //
      typedef ::xsd::qif2::CharacteristicRectangularZoneLimitType RectangularZoneLimit_type;
      typedef ::xsd::cxx::tree::optional< RectangularZoneLimit_type > RectangularZoneLimit_optional;
      typedef ::xsd::cxx::tree::traits< RectangularZoneLimit_type, char > RectangularZoneLimit_traits;

      const RectangularZoneLimit_optional&
      RectangularZoneLimit () const;

      RectangularZoneLimit_optional&
      RectangularZoneLimit ();

      void
      RectangularZoneLimit (const RectangularZoneLimit_type& x);

      void
      RectangularZoneLimit (const RectangularZoneLimit_optional& x);

      void
      RectangularZoneLimit (::std::auto_ptr< RectangularZoneLimit_type > p);

      // Constructors.
      //
      SurfaceProfileCharacteristicNominalType (const id_type&,
                                               const CharacteristicDefinitionId_type&);

      SurfaceProfileCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      SurfaceProfileCharacteristicNominalType (const SurfaceProfileCharacteristicNominalType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual SurfaceProfileCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SurfaceProfileCharacteristicNominalType&
      operator= (const SurfaceProfileCharacteristicNominalType& x);

      virtual 
      ~SurfaceProfileCharacteristicNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CircularZoneLimit_optional CircularZoneLimit_;
      DirectionalZoneLimit_optional DirectionalZoneLimit_;
      RectangularZoneLimit_optional RectangularZoneLimit_;
    };

    class SurfaceProfileCharacteristicActualType: public ::xsd::qif2::ProfileCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      SurfaceProfileCharacteristicActualType (const id_type&,
                                              const Status_type&,
                                              const CharacteristicItemId_type&);

      SurfaceProfileCharacteristicActualType (const id_type&,
                                              ::std::auto_ptr< Status_type >,
                                              ::std::auto_ptr< CharacteristicItemId_type >);

      SurfaceProfileCharacteristicActualType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      SurfaceProfileCharacteristicActualType (const SurfaceProfileCharacteristicActualType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual SurfaceProfileCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SurfaceProfileCharacteristicActualType ();
    };

    class SurfaceProfileNonUniformCharacteristicItemType: public ::xsd::qif2::ProfileCharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      SurfaceProfileNonUniformCharacteristicItemType (const id_type&,
                                                      const Name_type&,
                                                      const CharacteristicNominalId_type&);

      SurfaceProfileNonUniformCharacteristicItemType (const id_type&,
                                                      const Name_type&,
                                                      ::std::auto_ptr< CharacteristicNominalId_type >);

      SurfaceProfileNonUniformCharacteristicItemType (const ::xercesc::DOMElement& e,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

      SurfaceProfileNonUniformCharacteristicItemType (const SurfaceProfileNonUniformCharacteristicItemType& x,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

      virtual SurfaceProfileNonUniformCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SurfaceProfileNonUniformCharacteristicItemType ();
    };

    class SurfaceProfileNonUniformCharacteristicDefinitionType: public ::xsd::qif2::ProfileCharacteristicDefinitionBaseType
    {
      public:
      // ToPointToleranceValue
      //
      typedef ::xsd::qif2::LinearValueType ToPointToleranceValue_type;
      typedef ::xsd::cxx::tree::traits< ToPointToleranceValue_type, char > ToPointToleranceValue_traits;

      const ToPointToleranceValue_type&
      ToPointToleranceValue () const;

      ToPointToleranceValue_type&
      ToPointToleranceValue ();

      void
      ToPointToleranceValue (const ToPointToleranceValue_type& x);

      void
      ToPointToleranceValue (::std::auto_ptr< ToPointToleranceValue_type > p);

      // Constructors.
      //
      SurfaceProfileNonUniformCharacteristicDefinitionType (const id_type&,
                                                            const ToleranceValue_type&,
                                                            const DatumReferenceFrameId_type&,
                                                            const ToPointToleranceValue_type&);

      SurfaceProfileNonUniformCharacteristicDefinitionType (const id_type&,
                                                            ::std::auto_ptr< ToleranceValue_type >,
                                                            ::std::auto_ptr< DatumReferenceFrameId_type >,
                                                            ::std::auto_ptr< ToPointToleranceValue_type >);

      SurfaceProfileNonUniformCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                            ::xml_schema::flags f = 0,
                                                            ::xml_schema::container* c = 0);

      SurfaceProfileNonUniformCharacteristicDefinitionType (const SurfaceProfileNonUniformCharacteristicDefinitionType& x,
                                                            ::xml_schema::flags f = 0,
                                                            ::xml_schema::container* c = 0);

      virtual SurfaceProfileNonUniformCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SurfaceProfileNonUniformCharacteristicDefinitionType&
      operator= (const SurfaceProfileNonUniformCharacteristicDefinitionType& x);

      virtual 
      ~SurfaceProfileNonUniformCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ToPointToleranceValue_type > ToPointToleranceValue_;
    };

    class SurfaceProfileNonUniformCharacteristicNominalType: public ::xsd::qif2::ProfileCharacteristicNominalBaseType
    {
      public:
      // ZoneLimit
      //
      typedef ::xsd::qif2::CharacteristicDirectionalZoneLimitType ZoneLimit_type;
      typedef ::xsd::cxx::tree::traits< ZoneLimit_type, char > ZoneLimit_traits;

      const ZoneLimit_type&
      ZoneLimit () const;

      ZoneLimit_type&
      ZoneLimit ();

      void
      ZoneLimit (const ZoneLimit_type& x);

      void
      ZoneLimit (::std::auto_ptr< ZoneLimit_type > p);

      // Constructors.
      //
      SurfaceProfileNonUniformCharacteristicNominalType (const id_type&,
                                                         const CharacteristicDefinitionId_type&,
                                                         const ZoneLimit_type&);

      SurfaceProfileNonUniformCharacteristicNominalType (const id_type&,
                                                         const CharacteristicDefinitionId_type&,
                                                         ::std::auto_ptr< ZoneLimit_type >);

      SurfaceProfileNonUniformCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                         ::xml_schema::flags f = 0,
                                                         ::xml_schema::container* c = 0);

      SurfaceProfileNonUniformCharacteristicNominalType (const SurfaceProfileNonUniformCharacteristicNominalType& x,
                                                         ::xml_schema::flags f = 0,
                                                         ::xml_schema::container* c = 0);

      virtual SurfaceProfileNonUniformCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SurfaceProfileNonUniformCharacteristicNominalType&
      operator= (const SurfaceProfileNonUniformCharacteristicNominalType& x);

      virtual 
      ~SurfaceProfileNonUniformCharacteristicNominalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ZoneLimit_type > ZoneLimit_;
    };

    class SurfaceProfileNonUniformCharacteristicActualType: public ::xsd::qif2::ProfileCharacteristicActualBaseType
    {
      public:
      // Constructors.
      //
      SurfaceProfileNonUniformCharacteristicActualType (const id_type&,
                                                        const Status_type&,
                                                        const CharacteristicItemId_type&);

      SurfaceProfileNonUniformCharacteristicActualType (const id_type&,
                                                        ::std::auto_ptr< Status_type >,
                                                        ::std::auto_ptr< CharacteristicItemId_type >);

      SurfaceProfileNonUniformCharacteristicActualType (const ::xercesc::DOMElement& e,
                                                        ::xml_schema::flags f = 0,
                                                        ::xml_schema::container* c = 0);

      SurfaceProfileNonUniformCharacteristicActualType (const SurfaceProfileNonUniformCharacteristicActualType& x,
                                                        ::xml_schema::flags f = 0,
                                                        ::xml_schema::container* c = 0);

      virtual SurfaceProfileNonUniformCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SurfaceProfileNonUniformCharacteristicActualType ();
    };

    class ZoneRadiiType: public ::xml_schema::type
    {
      public:
      // MinRadius
      //
      typedef ::xsd::qif2::LinearValueType MinRadius_type;
      typedef ::xsd::cxx::tree::traits< MinRadius_type, char > MinRadius_traits;

      const MinRadius_type&
      MinRadius () const;

      MinRadius_type&
      MinRadius ();

      void
      MinRadius (const MinRadius_type& x);

      void
      MinRadius (::std::auto_ptr< MinRadius_type > p);

      // MaxRadius
      //
      typedef ::xsd::qif2::LinearValueType MaxRadius_type;
      typedef ::xsd::cxx::tree::traits< MaxRadius_type, char > MaxRadius_traits;

      const MaxRadius_type&
      MaxRadius () const;

      MaxRadius_type&
      MaxRadius ();

      void
      MaxRadius (const MaxRadius_type& x);

      void
      MaxRadius (::std::auto_ptr< MaxRadius_type > p);

      // Constructors.
      //
      ZoneRadiiType (const MinRadius_type&,
                     const MaxRadius_type&);

      ZoneRadiiType (::std::auto_ptr< MinRadius_type >,
                     ::std::auto_ptr< MaxRadius_type >);

      ZoneRadiiType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      ZoneRadiiType (const ZoneRadiiType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual ZoneRadiiType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ZoneRadiiType&
      operator= (const ZoneRadiiType& x);

      virtual 
      ~ZoneRadiiType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< MinRadius_type > MinRadius_;
      ::xsd::cxx::tree::one< MaxRadius_type > MaxRadius_;
    };

    class ActualZoneRadiiType: public ::xml_schema::type
    {
      public:
      // MinRadius
      //
      typedef ::xsd::qif2::ActualLinearValueType MinRadius_type;
      typedef ::xsd::cxx::tree::traits< MinRadius_type, char > MinRadius_traits;

      const MinRadius_type&
      MinRadius () const;

      MinRadius_type&
      MinRadius ();

      void
      MinRadius (const MinRadius_type& x);

      void
      MinRadius (::std::auto_ptr< MinRadius_type > p);

      // MaxRadius
      //
      typedef ::xsd::qif2::ActualLinearValueType MaxRadius_type;
      typedef ::xsd::cxx::tree::traits< MaxRadius_type, char > MaxRadius_traits;

      const MaxRadius_type&
      MaxRadius () const;

      MaxRadius_type&
      MaxRadius ();

      void
      MaxRadius (const MaxRadius_type& x);

      void
      MaxRadius (::std::auto_ptr< MaxRadius_type > p);

      // Constructors.
      //
      ActualZoneRadiiType (const MinRadius_type&,
                           const MaxRadius_type&);

      ActualZoneRadiiType (::std::auto_ptr< MinRadius_type >,
                           ::std::auto_ptr< MaxRadius_type >);

      ActualZoneRadiiType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      ActualZoneRadiiType (const ActualZoneRadiiType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual ActualZoneRadiiType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ActualZoneRadiiType&
      operator= (const ActualZoneRadiiType& x);

      virtual 
      ~ActualZoneRadiiType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< MinRadius_type > MinRadius_;
      ::xsd::cxx::tree::one< MaxRadius_type > MaxRadius_;
    };

    class CharacteristicGroupType: public ::xml_schema::type
    {
      public:
      // CharacteristicItemIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType CharacteristicItemIds_type;
      typedef ::xsd::cxx::tree::traits< CharacteristicItemIds_type, char > CharacteristicItemIds_traits;

      const CharacteristicItemIds_type&
      CharacteristicItemIds () const;

      CharacteristicItemIds_type&
      CharacteristicItemIds ();

      void
      CharacteristicItemIds (const CharacteristicItemIds_type& x);

      void
      CharacteristicItemIds (::std::auto_ptr< CharacteristicItemIds_type > p);

      // Description
      //
      typedef ::xml_schema::string Description_type;
      typedef ::xsd::cxx::tree::optional< Description_type > Description_optional;
      typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

      const Description_optional&
      Description () const;

      Description_optional&
      Description ();

      void
      Description (const Description_type& x);

      void
      Description (const Description_optional& x);

      void
      Description (::std::auto_ptr< Description_type > p);

      // Name
      //
      typedef ::xml_schema::token Name_type;
      typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
      typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

      const Name_optional&
      Name () const;

      Name_optional&
      Name ();

      void
      Name (const Name_type& x);

      void
      Name (const Name_optional& x);

      void
      Name (::std::auto_ptr< Name_type > p);

      // TransformId
      //
      typedef ::xsd::qif2::QIFReferenceType TransformId_type;
      typedef ::xsd::cxx::tree::optional< TransformId_type > TransformId_optional;
      typedef ::xsd::cxx::tree::traits< TransformId_type, char > TransformId_traits;

      const TransformId_optional&
      TransformId () const;

      TransformId_optional&
      TransformId ();

      void
      TransformId (const TransformId_type& x);

      void
      TransformId (const TransformId_optional& x);

      void
      TransformId (::std::auto_ptr< TransformId_type > p);

      // Units
      //
      typedef ::xsd::qif2::OtherUnitsType Units_type;
      typedef ::xsd::cxx::tree::optional< Units_type > Units_optional;
      typedef ::xsd::cxx::tree::traits< Units_type, char > Units_traits;

      const Units_optional&
      Units () const;

      Units_optional&
      Units ();

      void
      Units (const Units_type& x);

      void
      Units (const Units_optional& x);

      void
      Units (::std::auto_ptr< Units_type > p);

      // Scale
      //
      typedef ::xsd::qif2::ScaleType Scale_type;
      typedef ::xsd::cxx::tree::optional< Scale_type > Scale_optional;
      typedef ::xsd::cxx::tree::traits< Scale_type, char > Scale_traits;

      const Scale_optional&
      Scale () const;

      Scale_optional&
      Scale ();

      void
      Scale (const Scale_type& x);

      void
      Scale (const Scale_optional& x);

      void
      Scale (::std::auto_ptr< Scale_type > p);

      // id
      //
      typedef ::xsd::qif2::QIFIdType id_type;
      typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

      const id_type&
      id () const;

      id_type&
      id ();

      void
      id (const id_type& x);

      void
      id (::std::auto_ptr< id_type > p);

      // Constructors.
      //
      CharacteristicGroupType (const CharacteristicItemIds_type&,
                               const id_type&);

      CharacteristicGroupType (::std::auto_ptr< CharacteristicItemIds_type >,
                               const id_type&);

      CharacteristicGroupType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      CharacteristicGroupType (const CharacteristicGroupType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual CharacteristicGroupType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicGroupType&
      operator= (const CharacteristicGroupType& x);

      virtual 
      ~CharacteristicGroupType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< CharacteristicItemIds_type > CharacteristicItemIds_;
      Description_optional Description_;
      Name_optional Name_;
      TransformId_optional TransformId_;
      Units_optional Units_;
      Scale_optional Scale_;
      ::xsd::cxx::tree::one< id_type > id_;
    };

    class CharacteristicManufacturingProcessGroupType: public ::xsd::qif2::CharacteristicGroupType
    {
      public:
      // ManufacturingProcessId
      //
      typedef ::xsd::qif2::QIFReferenceFullType ManufacturingProcessId_type;
      typedef ::xsd::cxx::tree::optional< ManufacturingProcessId_type > ManufacturingProcessId_optional;
      typedef ::xsd::cxx::tree::traits< ManufacturingProcessId_type, char > ManufacturingProcessId_traits;

      const ManufacturingProcessId_optional&
      ManufacturingProcessId () const;

      ManufacturingProcessId_optional&
      ManufacturingProcessId ();

      void
      ManufacturingProcessId (const ManufacturingProcessId_type& x);

      void
      ManufacturingProcessId (const ManufacturingProcessId_optional& x);

      void
      ManufacturingProcessId (::std::auto_ptr< ManufacturingProcessId_type > p);

      // Constructors.
      //
      CharacteristicManufacturingProcessGroupType (const CharacteristicItemIds_type&,
                                                   const id_type&);

      CharacteristicManufacturingProcessGroupType (::std::auto_ptr< CharacteristicItemIds_type >,
                                                   const id_type&);

      CharacteristicManufacturingProcessGroupType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      CharacteristicManufacturingProcessGroupType (const CharacteristicManufacturingProcessGroupType& x,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      virtual CharacteristicManufacturingProcessGroupType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicManufacturingProcessGroupType&
      operator= (const CharacteristicManufacturingProcessGroupType& x);

      virtual 
      ~CharacteristicManufacturingProcessGroupType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ManufacturingProcessId_optional ManufacturingProcessId_;
    };

    class CharacteristicSimultaneityGroupType: public ::xsd::qif2::CharacteristicGroupType
    {
      public:
      // Constructors.
      //
      CharacteristicSimultaneityGroupType (const CharacteristicItemIds_type&,
                                           const id_type&);

      CharacteristicSimultaneityGroupType (::std::auto_ptr< CharacteristicItemIds_type >,
                                           const id_type&);

      CharacteristicSimultaneityGroupType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      CharacteristicSimultaneityGroupType (const CharacteristicSimultaneityGroupType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual CharacteristicSimultaneityGroupType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CharacteristicSimultaneityGroupType ();
    };

    class CharacteristicStatusEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        PASS,
        FAIL,
        REWORK,
        SYSERROR,
        INDETERMINATE,
        NOT_ANALYZED,
        BASIC,
        UNDEFINED
      };

      CharacteristicStatusEnumType (value v);

      CharacteristicStatusEnumType (const char* v);

      CharacteristicStatusEnumType (const ::std::string& v);

      CharacteristicStatusEnumType (const ::xml_schema::nmtoken& v);

      CharacteristicStatusEnumType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      CharacteristicStatusEnumType (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      CharacteristicStatusEnumType (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      CharacteristicStatusEnumType (const CharacteristicStatusEnumType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual CharacteristicStatusEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicStatusEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_CharacteristicStatusEnumType_convert ();
      }

      protected:
      value
      _xsd_CharacteristicStatusEnumType_convert () const;

      public:
      static const char* const _xsd_CharacteristicStatusEnumType_literals_[8];
      static const value _xsd_CharacteristicStatusEnumType_indexes_[8];
    };

    class CharacteristicStatusType: public ::xml_schema::type
    {
      public:
      // CharacteristicStatusEnum
      //
      typedef ::xsd::qif2::CharacteristicStatusEnumType CharacteristicStatusEnum_type;
      typedef ::xsd::cxx::tree::optional< CharacteristicStatusEnum_type > CharacteristicStatusEnum_optional;
      typedef ::xsd::cxx::tree::traits< CharacteristicStatusEnum_type, char > CharacteristicStatusEnum_traits;

      const CharacteristicStatusEnum_optional&
      CharacteristicStatusEnum () const;

      CharacteristicStatusEnum_optional&
      CharacteristicStatusEnum ();

      void
      CharacteristicStatusEnum (const CharacteristicStatusEnum_type& x);

      void
      CharacteristicStatusEnum (const CharacteristicStatusEnum_optional& x);

      void
      CharacteristicStatusEnum (::std::auto_ptr< CharacteristicStatusEnum_type > p);

      // OtherCharacteristicStatus
      //
      typedef ::xml_schema::string OtherCharacteristicStatus_type;
      typedef ::xsd::cxx::tree::optional< OtherCharacteristicStatus_type > OtherCharacteristicStatus_optional;
      typedef ::xsd::cxx::tree::traits< OtherCharacteristicStatus_type, char > OtherCharacteristicStatus_traits;

      const OtherCharacteristicStatus_optional&
      OtherCharacteristicStatus () const;

      OtherCharacteristicStatus_optional&
      OtherCharacteristicStatus ();

      void
      OtherCharacteristicStatus (const OtherCharacteristicStatus_type& x);

      void
      OtherCharacteristicStatus (const OtherCharacteristicStatus_optional& x);

      void
      OtherCharacteristicStatus (::std::auto_ptr< OtherCharacteristicStatus_type > p);

      // Constructors.
      //
      CharacteristicStatusType ();

      CharacteristicStatusType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      CharacteristicStatusType (const CharacteristicStatusType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual CharacteristicStatusType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicStatusType&
      operator= (const CharacteristicStatusType& x);

      virtual 
      ~CharacteristicStatusType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CharacteristicStatusEnum_optional CharacteristicStatusEnum_;
      OtherCharacteristicStatus_optional OtherCharacteristicStatus_;
    };

    class CharacteristicGroupStatusType: public ::xml_schema::type
    {
      public:
      // Status
      //
      typedef ::xsd::qif2::CharacteristicStatusType Status_type;
      typedef ::xsd::cxx::tree::traits< Status_type, char > Status_traits;

      const Status_type&
      Status () const;

      Status_type&
      Status ();

      void
      Status (const Status_type& x);

      void
      Status (::std::auto_ptr< Status_type > p);

      // GroupId
      //
      typedef ::xsd::qif2::QIFReferenceFullType GroupId_type;
      typedef ::xsd::cxx::tree::traits< GroupId_type, char > GroupId_traits;

      const GroupId_type&
      GroupId () const;

      GroupId_type&
      GroupId ();

      void
      GroupId (const GroupId_type& x);

      void
      GroupId (::std::auto_ptr< GroupId_type > p);

      // Constructors.
      //
      CharacteristicGroupStatusType (const Status_type&,
                                     const GroupId_type&);

      CharacteristicGroupStatusType (::std::auto_ptr< Status_type >,
                                     ::std::auto_ptr< GroupId_type >);

      CharacteristicGroupStatusType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      CharacteristicGroupStatusType (const CharacteristicGroupStatusType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual CharacteristicGroupStatusType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicGroupStatusType&
      operator= (const CharacteristicGroupStatusType& x);

      virtual 
      ~CharacteristicGroupStatusType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Status_type > Status_;
      ::xsd::cxx::tree::one< GroupId_type > GroupId_;
    };

    class PointDeviationType: public ::xml_schema::type
    {
      public:
      // MeasurePointActualId
      //
      typedef ::xsd::qif2::QIFReferenceFullType MeasurePointActualId_type;
      typedef ::xsd::cxx::tree::traits< MeasurePointActualId_type, char > MeasurePointActualId_traits;

      const MeasurePointActualId_type&
      MeasurePointActualId () const;

      MeasurePointActualId_type&
      MeasurePointActualId ();

      void
      MeasurePointActualId (const MeasurePointActualId_type& x);

      void
      MeasurePointActualId (::std::auto_ptr< MeasurePointActualId_type > p);

      // Deviation
      //
      typedef ::xsd::qif2::LinearValueType Deviation_type;
      typedef ::xsd::cxx::tree::traits< Deviation_type, char > Deviation_traits;

      const Deviation_type&
      Deviation () const;

      Deviation_type&
      Deviation ();

      void
      Deviation (const Deviation_type& x);

      void
      Deviation (::std::auto_ptr< Deviation_type > p);

      // Constructors.
      //
      PointDeviationType (const MeasurePointActualId_type&,
                          const Deviation_type&);

      PointDeviationType (::std::auto_ptr< MeasurePointActualId_type >,
                          ::std::auto_ptr< Deviation_type >);

      PointDeviationType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      PointDeviationType (const PointDeviationType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual PointDeviationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDeviationType&
      operator= (const PointDeviationType& x);

      virtual 
      ~PointDeviationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< MeasurePointActualId_type > MeasurePointActualId_;
      ::xsd::cxx::tree::one< Deviation_type > Deviation_;
    };

    class PointDeviationsType: public ::xml_schema::type
    {
      public:
      // PointDeviation
      //
      typedef ::xsd::qif2::PointDeviationType PointDeviation_type;
      typedef ::xsd::cxx::tree::sequence< PointDeviation_type > PointDeviation_sequence;
      typedef PointDeviation_sequence::iterator PointDeviation_iterator;
      typedef PointDeviation_sequence::const_iterator PointDeviation_const_iterator;
      typedef ::xsd::cxx::tree::traits< PointDeviation_type, char > PointDeviation_traits;

      const PointDeviation_sequence&
      PointDeviation () const;

      PointDeviation_sequence&
      PointDeviation ();

      void
      PointDeviation (const PointDeviation_sequence& s);

      // Constructors.
      //
      PointDeviationsType ();

      PointDeviationsType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      PointDeviationsType (const PointDeviationsType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual PointDeviationsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDeviationsType&
      operator= (const PointDeviationsType& x);

      virtual 
      ~PointDeviationsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      PointDeviation_sequence PointDeviation_;
    };

    class ExtentEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        ALLOVER,
        ALLAROUND,
        ALLOVERTHISSIDE,
        ALLAROUNDTHISSIDE,
        UNDEFINED
      };

      ExtentEnumType (value v);

      ExtentEnumType (const char* v);

      ExtentEnumType (const ::std::string& v);

      ExtentEnumType (const ::xml_schema::nmtoken& v);

      ExtentEnumType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      ExtentEnumType (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      ExtentEnumType (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      ExtentEnumType (const ExtentEnumType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual ExtentEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ExtentEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_ExtentEnumType_convert ();
      }

      protected:
      value
      _xsd_ExtentEnumType_convert () const;

      public:
      static const char* const _xsd_ExtentEnumType_literals_[5];
      static const value _xsd_ExtentEnumType_indexes_[5];
    };

    class ExtentType: public ::xml_schema::type
    {
      public:
      // ExtentEnum
      //
      typedef ::xsd::qif2::ExtentEnumType ExtentEnum_type;
      typedef ::xsd::cxx::tree::optional< ExtentEnum_type > ExtentEnum_optional;
      typedef ::xsd::cxx::tree::traits< ExtentEnum_type, char > ExtentEnum_traits;

      const ExtentEnum_optional&
      ExtentEnum () const;

      ExtentEnum_optional&
      ExtentEnum ();

      void
      ExtentEnum (const ExtentEnum_type& x);

      void
      ExtentEnum (const ExtentEnum_optional& x);

      void
      ExtentEnum (::std::auto_ptr< ExtentEnum_type > p);

      // OtherExtent
      //
      typedef ::xml_schema::string OtherExtent_type;
      typedef ::xsd::cxx::tree::optional< OtherExtent_type > OtherExtent_optional;
      typedef ::xsd::cxx::tree::traits< OtherExtent_type, char > OtherExtent_traits;

      const OtherExtent_optional&
      OtherExtent () const;

      OtherExtent_optional&
      OtherExtent ();

      void
      OtherExtent (const OtherExtent_type& x);

      void
      OtherExtent (const OtherExtent_optional& x);

      void
      OtherExtent (::std::auto_ptr< OtherExtent_type > p);

      // Constructors.
      //
      ExtentType ();

      ExtentType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      ExtentType (const ExtentType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual ExtentType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ExtentType&
      operator= (const ExtentType& x);

      virtual 
      ~ExtentType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ExtentEnum_optional ExtentEnum_;
      OtherExtent_optional OtherExtent_;
    };

    class PointWithNameType: public ::xml_schema::type
    {
      public:
      // Point
      //
      typedef ::xsd::qif2::PointType Point_type;
      typedef ::xsd::cxx::tree::traits< Point_type, char > Point_traits;

      const Point_type&
      Point () const;

      Point_type&
      Point ();

      void
      Point (const Point_type& x);

      void
      Point (::std::auto_ptr< Point_type > p);

      // Name
      //
      typedef ::xml_schema::token Name_type;
      typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
      typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

      const Name_optional&
      Name () const;

      Name_optional&
      Name ();

      void
      Name (const Name_type& x);

      void
      Name (const Name_optional& x);

      void
      Name (::std::auto_ptr< Name_type > p);

      // Constructors.
      //
      PointWithNameType (const Point_type&);

      PointWithNameType (::std::auto_ptr< Point_type >);

      PointWithNameType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      PointWithNameType (const PointWithNameType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual PointWithNameType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointWithNameType&
      operator= (const PointWithNameType& x);

      virtual 
      ~PointWithNameType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Point_type > Point_;
      Name_optional Name_;
    };

    class CharacteristicDirectionalZoneLimitType: public ::xml_schema::type
    {
      public:
      // FromPoint
      //
      typedef ::xsd::qif2::PointWithNameType FromPoint_type;
      typedef ::xsd::cxx::tree::traits< FromPoint_type, char > FromPoint_traits;

      const FromPoint_type&
      FromPoint () const;

      FromPoint_type&
      FromPoint ();

      void
      FromPoint (const FromPoint_type& x);

      void
      FromPoint (::std::auto_ptr< FromPoint_type > p);

      // ToPoint
      //
      typedef ::xsd::qif2::PointWithNameType ToPoint_type;
      typedef ::xsd::cxx::tree::traits< ToPoint_type, char > ToPoint_traits;

      const ToPoint_type&
      ToPoint () const;

      ToPoint_type&
      ToPoint ();

      void
      ToPoint (const ToPoint_type& x);

      void
      ToPoint (::std::auto_ptr< ToPoint_type > p);

      // StartDirection
      //
      typedef ::xsd::qif2::UnitVectorType StartDirection_type;
      typedef ::xsd::cxx::tree::optional< StartDirection_type > StartDirection_optional;
      typedef ::xsd::cxx::tree::traits< StartDirection_type, char > StartDirection_traits;

      const StartDirection_optional&
      StartDirection () const;

      StartDirection_optional&
      StartDirection ();

      void
      StartDirection (const StartDirection_type& x);

      void
      StartDirection (const StartDirection_optional& x);

      void
      StartDirection (::std::auto_ptr< StartDirection_type > p);

      // PlaneNormal
      //
      typedef ::xsd::qif2::UnitVectorType PlaneNormal_type;
      typedef ::xsd::cxx::tree::optional< PlaneNormal_type > PlaneNormal_optional;
      typedef ::xsd::cxx::tree::traits< PlaneNormal_type, char > PlaneNormal_traits;

      const PlaneNormal_optional&
      PlaneNormal () const;

      PlaneNormal_optional&
      PlaneNormal ();

      void
      PlaneNormal (const PlaneNormal_type& x);

      void
      PlaneNormal (const PlaneNormal_optional& x);

      void
      PlaneNormal (::std::auto_ptr< PlaneNormal_type > p);

      // Constructors.
      //
      CharacteristicDirectionalZoneLimitType (const FromPoint_type&,
                                              const ToPoint_type&);

      CharacteristicDirectionalZoneLimitType (::std::auto_ptr< FromPoint_type >,
                                              ::std::auto_ptr< ToPoint_type >);

      CharacteristicDirectionalZoneLimitType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      CharacteristicDirectionalZoneLimitType (const CharacteristicDirectionalZoneLimitType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual CharacteristicDirectionalZoneLimitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicDirectionalZoneLimitType&
      operator= (const CharacteristicDirectionalZoneLimitType& x);

      virtual 
      ~CharacteristicDirectionalZoneLimitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< FromPoint_type > FromPoint_;
      ::xsd::cxx::tree::one< ToPoint_type > ToPoint_;
      StartDirection_optional StartDirection_;
      PlaneNormal_optional PlaneNormal_;
    };

    class CharacteristicRectangularZoneLimitType: public ::xsd::qif2::RectangleType
    {
      public:
      // Constructors.
      //
      CharacteristicRectangularZoneLimitType (const Length_type&,
                                              const CornerPoint_type&,
                                              const Width_type&,
                                              const WidthDirection_type&,
                                              const LengthDirection_type&);

      CharacteristicRectangularZoneLimitType (::std::auto_ptr< Length_type >,
                                              ::std::auto_ptr< CornerPoint_type >,
                                              ::std::auto_ptr< Width_type >,
                                              ::std::auto_ptr< WidthDirection_type >,
                                              ::std::auto_ptr< LengthDirection_type >);

      CharacteristicRectangularZoneLimitType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      CharacteristicRectangularZoneLimitType (const CharacteristicRectangularZoneLimitType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual CharacteristicRectangularZoneLimitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CharacteristicRectangularZoneLimitType ();
    };

    class CharacteristicCircularZoneLimitType: public ::xsd::qif2::CircleType
    {
      public:
      // Constructors.
      //
      CharacteristicCircularZoneLimitType (const CenterPoint_type&,
                                           const Diameter_type&,
                                           const Normal_type&);

      CharacteristicCircularZoneLimitType (::std::auto_ptr< CenterPoint_type >,
                                           ::std::auto_ptr< Diameter_type >,
                                           ::std::auto_ptr< Normal_type >);

      CharacteristicCircularZoneLimitType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      CharacteristicCircularZoneLimitType (const CharacteristicCircularZoneLimitType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual CharacteristicCircularZoneLimitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CharacteristicCircularZoneLimitType ();
    };

    class ThreadCharacteristicItemType: public ::xsd::qif2::CharacteristicItemBaseType
    {
      public:
      // Constructors.
      //
      ThreadCharacteristicItemType (const id_type&,
                                    const Name_type&,
                                    const CharacteristicNominalId_type&);

      ThreadCharacteristicItemType (const id_type&,
                                    const Name_type&,
                                    ::std::auto_ptr< CharacteristicNominalId_type >);

      ThreadCharacteristicItemType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      ThreadCharacteristicItemType (const ThreadCharacteristicItemType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual ThreadCharacteristicItemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ThreadCharacteristicItemType ();
    };

    class ThreadCharacteristicDefinitionType: public ::xsd::qif2::CharacteristicDefinitionBaseType
    {
      public:
      // ThreadSpecificationId
      //
      typedef ::xsd::qif2::QIFReferenceFullType ThreadSpecificationId_type;
      typedef ::xsd::cxx::tree::traits< ThreadSpecificationId_type, char > ThreadSpecificationId_traits;

      const ThreadSpecificationId_type&
      ThreadSpecificationId () const;

      ThreadSpecificationId_type&
      ThreadSpecificationId ();

      void
      ThreadSpecificationId (const ThreadSpecificationId_type& x);

      void
      ThreadSpecificationId (::std::auto_ptr< ThreadSpecificationId_type > p);

      // Constructors.
      //
      ThreadCharacteristicDefinitionType (const id_type&,
                                          const ThreadSpecificationId_type&);

      ThreadCharacteristicDefinitionType (const id_type&,
                                          ::std::auto_ptr< ThreadSpecificationId_type >);

      ThreadCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      ThreadCharacteristicDefinitionType (const ThreadCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual ThreadCharacteristicDefinitionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ThreadCharacteristicDefinitionType&
      operator= (const ThreadCharacteristicDefinitionType& x);

      virtual 
      ~ThreadCharacteristicDefinitionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ThreadSpecificationId_type > ThreadSpecificationId_;
    };

    class ThreadCharacteristicNominalType: public ::xsd::qif2::CharacteristicNominalBaseType
    {
      public:
      // Constructors.
      //
      ThreadCharacteristicNominalType (const id_type&,
                                       const CharacteristicDefinitionId_type&);

      ThreadCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      ThreadCharacteristicNominalType (const ThreadCharacteristicNominalType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual ThreadCharacteristicNominalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ThreadCharacteristicNominalType ();
    };

    class ThreadCharacteristicActualType: public ::xsd::qif2::CharacteristicActualBaseType
    {
      public:
      // PitchDiameter
      //
      typedef ::xsd::qif2::ActualLinearValueType PitchDiameter_type;
      typedef ::xsd::cxx::tree::optional< PitchDiameter_type > PitchDiameter_optional;
      typedef ::xsd::cxx::tree::traits< PitchDiameter_type, char > PitchDiameter_traits;

      const PitchDiameter_optional&
      PitchDiameter () const;

      PitchDiameter_optional&
      PitchDiameter ();

      void
      PitchDiameter (const PitchDiameter_type& x);

      void
      PitchDiameter (const PitchDiameter_optional& x);

      void
      PitchDiameter (::std::auto_ptr< PitchDiameter_type > p);

      // FunctionalSize
      //
      typedef ::xsd::qif2::ActualLinearValueType FunctionalSize_type;
      typedef ::xsd::cxx::tree::optional< FunctionalSize_type > FunctionalSize_optional;
      typedef ::xsd::cxx::tree::traits< FunctionalSize_type, char > FunctionalSize_traits;

      const FunctionalSize_optional&
      FunctionalSize () const;

      FunctionalSize_optional&
      FunctionalSize ();

      void
      FunctionalSize (const FunctionalSize_type& x);

      void
      FunctionalSize (const FunctionalSize_optional& x);

      void
      FunctionalSize (::std::auto_ptr< FunctionalSize_type > p);

      // Constructors.
      //
      ThreadCharacteristicActualType (const id_type&,
                                      const Status_type&,
                                      const CharacteristicItemId_type&);

      ThreadCharacteristicActualType (const id_type&,
                                      ::std::auto_ptr< Status_type >,
                                      ::std::auto_ptr< CharacteristicItemId_type >);

      ThreadCharacteristicActualType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      ThreadCharacteristicActualType (const ThreadCharacteristicActualType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual ThreadCharacteristicActualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ThreadCharacteristicActualType&
      operator= (const ThreadCharacteristicActualType& x);

      virtual 
      ~ThreadCharacteristicActualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      PitchDiameter_optional PitchDiameter_;
      FunctionalSize_optional FunctionalSize_;
    };

    class CharacteristicAspectsListsType: public ::xml_schema::type
    {
      public:
      // FormalStandard
      //
      typedef ::xsd::qif2::FormalStandardType FormalStandard_type;
      typedef ::xsd::cxx::tree::traits< FormalStandard_type, char > FormalStandard_traits;

      const FormalStandard_type&
      FormalStandard () const;

      FormalStandard_type&
      FormalStandard ();

      void
      FormalStandard (const FormalStandard_type& x);

      void
      FormalStandard (::std::auto_ptr< FormalStandard_type > p);

      // CharacteristicDefinitions
      //
      typedef ::xsd::qif2::CharacteristicDefinitionsType CharacteristicDefinitions_type;
      typedef ::xsd::cxx::tree::traits< CharacteristicDefinitions_type, char > CharacteristicDefinitions_traits;

      const CharacteristicDefinitions_type&
      CharacteristicDefinitions () const;

      CharacteristicDefinitions_type&
      CharacteristicDefinitions ();

      void
      CharacteristicDefinitions (const CharacteristicDefinitions_type& x);

      void
      CharacteristicDefinitions (::std::auto_ptr< CharacteristicDefinitions_type > p);

      // DefaultCharacteristicDefinitions
      //
      typedef ::xsd::qif2::CharacteristicDefinitionsType DefaultCharacteristicDefinitions_type;
      typedef ::xsd::cxx::tree::optional< DefaultCharacteristicDefinitions_type > DefaultCharacteristicDefinitions_optional;
      typedef ::xsd::cxx::tree::traits< DefaultCharacteristicDefinitions_type, char > DefaultCharacteristicDefinitions_traits;

      const DefaultCharacteristicDefinitions_optional&
      DefaultCharacteristicDefinitions () const;

      DefaultCharacteristicDefinitions_optional&
      DefaultCharacteristicDefinitions ();

      void
      DefaultCharacteristicDefinitions (const DefaultCharacteristicDefinitions_type& x);

      void
      DefaultCharacteristicDefinitions (const DefaultCharacteristicDefinitions_optional& x);

      void
      DefaultCharacteristicDefinitions (::std::auto_ptr< DefaultCharacteristicDefinitions_type > p);

      // DefaultToleranceDefinitions
      //
      typedef ::xsd::qif2::ToleranceDefinitionsType DefaultToleranceDefinitions_type;
      typedef ::xsd::cxx::tree::optional< DefaultToleranceDefinitions_type > DefaultToleranceDefinitions_optional;
      typedef ::xsd::cxx::tree::traits< DefaultToleranceDefinitions_type, char > DefaultToleranceDefinitions_traits;

      const DefaultToleranceDefinitions_optional&
      DefaultToleranceDefinitions () const;

      DefaultToleranceDefinitions_optional&
      DefaultToleranceDefinitions ();

      void
      DefaultToleranceDefinitions (const DefaultToleranceDefinitions_type& x);

      void
      DefaultToleranceDefinitions (const DefaultToleranceDefinitions_optional& x);

      void
      DefaultToleranceDefinitions (::std::auto_ptr< DefaultToleranceDefinitions_type > p);

      // CharacteristicNominals
      //
      typedef ::xsd::qif2::CharacteristicNominalsType CharacteristicNominals_type;
      typedef ::xsd::cxx::tree::traits< CharacteristicNominals_type, char > CharacteristicNominals_traits;

      const CharacteristicNominals_type&
      CharacteristicNominals () const;

      CharacteristicNominals_type&
      CharacteristicNominals ();

      void
      CharacteristicNominals (const CharacteristicNominals_type& x);

      void
      CharacteristicNominals (::std::auto_ptr< CharacteristicNominals_type > p);

      // CharacteristicItems
      //
      typedef ::xsd::qif2::CharacteristicItemsType CharacteristicItems_type;
      typedef ::xsd::cxx::tree::optional< CharacteristicItems_type > CharacteristicItems_optional;
      typedef ::xsd::cxx::tree::traits< CharacteristicItems_type, char > CharacteristicItems_traits;

      const CharacteristicItems_optional&
      CharacteristicItems () const;

      CharacteristicItems_optional&
      CharacteristicItems ();

      void
      CharacteristicItems (const CharacteristicItems_type& x);

      void
      CharacteristicItems (const CharacteristicItems_optional& x);

      void
      CharacteristicItems (::std::auto_ptr< CharacteristicItems_type > p);

      // CharacteristicGroups
      //
      typedef ::xsd::qif2::CharacteristicGroupsType CharacteristicGroups_type;
      typedef ::xsd::cxx::tree::optional< CharacteristicGroups_type > CharacteristicGroups_optional;
      typedef ::xsd::cxx::tree::traits< CharacteristicGroups_type, char > CharacteristicGroups_traits;

      const CharacteristicGroups_optional&
      CharacteristicGroups () const;

      CharacteristicGroups_optional&
      CharacteristicGroups ();

      void
      CharacteristicGroups (const CharacteristicGroups_type& x);

      void
      CharacteristicGroups (const CharacteristicGroups_optional& x);

      void
      CharacteristicGroups (::std::auto_ptr< CharacteristicGroups_type > p);

      // Constructors.
      //
      CharacteristicAspectsListsType (const FormalStandard_type&,
                                      const CharacteristicDefinitions_type&,
                                      const CharacteristicNominals_type&);

      CharacteristicAspectsListsType (::std::auto_ptr< FormalStandard_type >,
                                      ::std::auto_ptr< CharacteristicDefinitions_type >,
                                      ::std::auto_ptr< CharacteristicNominals_type >);

      CharacteristicAspectsListsType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      CharacteristicAspectsListsType (const CharacteristicAspectsListsType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual CharacteristicAspectsListsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicAspectsListsType&
      operator= (const CharacteristicAspectsListsType& x);

      virtual 
      ~CharacteristicAspectsListsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< FormalStandard_type > FormalStandard_;
      ::xsd::cxx::tree::one< CharacteristicDefinitions_type > CharacteristicDefinitions_;
      DefaultCharacteristicDefinitions_optional DefaultCharacteristicDefinitions_;
      DefaultToleranceDefinitions_optional DefaultToleranceDefinitions_;
      ::xsd::cxx::tree::one< CharacteristicNominals_type > CharacteristicNominals_;
      CharacteristicItems_optional CharacteristicItems_;
      CharacteristicGroups_optional CharacteristicGroups_;
    };

    class MeasuredCharacteristicsType: public ::xml_schema::type
    {
      public:
      // CharacteristicActuals
      //
      typedef ::xsd::qif2::CharacteristicActualsType CharacteristicActuals_type;
      typedef ::xsd::cxx::tree::traits< CharacteristicActuals_type, char > CharacteristicActuals_traits;

      const CharacteristicActuals_type&
      CharacteristicActuals () const;

      CharacteristicActuals_type&
      CharacteristicActuals ();

      void
      CharacteristicActuals (const CharacteristicActuals_type& x);

      void
      CharacteristicActuals (::std::auto_ptr< CharacteristicActuals_type > p);

      // CharacteristicGroupStatuses
      //
      typedef ::xsd::qif2::CharacteristicGroupStatusesType CharacteristicGroupStatuses_type;
      typedef ::xsd::cxx::tree::optional< CharacteristicGroupStatuses_type > CharacteristicGroupStatuses_optional;
      typedef ::xsd::cxx::tree::traits< CharacteristicGroupStatuses_type, char > CharacteristicGroupStatuses_traits;

      const CharacteristicGroupStatuses_optional&
      CharacteristicGroupStatuses () const;

      CharacteristicGroupStatuses_optional&
      CharacteristicGroupStatuses ();

      void
      CharacteristicGroupStatuses (const CharacteristicGroupStatuses_type& x);

      void
      CharacteristicGroupStatuses (const CharacteristicGroupStatuses_optional& x);

      void
      CharacteristicGroupStatuses (::std::auto_ptr< CharacteristicGroupStatuses_type > p);

      // Constructors.
      //
      MeasuredCharacteristicsType (const CharacteristicActuals_type&);

      MeasuredCharacteristicsType (::std::auto_ptr< CharacteristicActuals_type >);

      MeasuredCharacteristicsType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      MeasuredCharacteristicsType (const MeasuredCharacteristicsType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual MeasuredCharacteristicsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      MeasuredCharacteristicsType&
      operator= (const MeasuredCharacteristicsType& x);

      virtual 
      ~MeasuredCharacteristicsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< CharacteristicActuals_type > CharacteristicActuals_;
      CharacteristicGroupStatuses_optional CharacteristicGroupStatuses_;
    };

    class CharacteristicItemsType: public ::xml_schema::type
    {
      public:
      // CharacteristicItem
      //
      typedef ::xsd::qif2::CharacteristicItemBaseType CharacteristicItem_type;
      typedef ::xsd::cxx::tree::sequence< CharacteristicItem_type > CharacteristicItem_sequence;
      typedef CharacteristicItem_sequence::iterator CharacteristicItem_iterator;
      typedef CharacteristicItem_sequence::const_iterator CharacteristicItem_const_iterator;
      typedef ::xsd::cxx::tree::traits< CharacteristicItem_type, char > CharacteristicItem_traits;

      const CharacteristicItem_sequence&
      CharacteristicItem () const;

      CharacteristicItem_sequence&
      CharacteristicItem ();

      void
      CharacteristicItem (const CharacteristicItem_sequence& s);

      // Constructors.
      //
      CharacteristicItemsType ();

      CharacteristicItemsType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      CharacteristicItemsType (const CharacteristicItemsType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual CharacteristicItemsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicItemsType&
      operator= (const CharacteristicItemsType& x);

      virtual 
      ~CharacteristicItemsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CharacteristicItem_sequence CharacteristicItem_;
    };

    class CharacteristicGroupsType: public ::xml_schema::type
    {
      public:
      // CharacteristicGroup
      //
      typedef ::xsd::qif2::CharacteristicGroupType CharacteristicGroup_type;
      typedef ::xsd::cxx::tree::sequence< CharacteristicGroup_type > CharacteristicGroup_sequence;
      typedef CharacteristicGroup_sequence::iterator CharacteristicGroup_iterator;
      typedef CharacteristicGroup_sequence::const_iterator CharacteristicGroup_const_iterator;
      typedef ::xsd::cxx::tree::traits< CharacteristicGroup_type, char > CharacteristicGroup_traits;

      const CharacteristicGroup_sequence&
      CharacteristicGroup () const;

      CharacteristicGroup_sequence&
      CharacteristicGroup ();

      void
      CharacteristicGroup (const CharacteristicGroup_sequence& s);

      // Constructors.
      //
      CharacteristicGroupsType ();

      CharacteristicGroupsType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      CharacteristicGroupsType (const CharacteristicGroupsType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual CharacteristicGroupsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicGroupsType&
      operator= (const CharacteristicGroupsType& x);

      virtual 
      ~CharacteristicGroupsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CharacteristicGroup_sequence CharacteristicGroup_;
    };

    class CharacteristicGroupStatusesType: public ::xml_schema::type
    {
      public:
      // CharacteristicGroupStatus
      //
      typedef ::xsd::qif2::CharacteristicGroupStatusType CharacteristicGroupStatus_type;
      typedef ::xsd::cxx::tree::sequence< CharacteristicGroupStatus_type > CharacteristicGroupStatus_sequence;
      typedef CharacteristicGroupStatus_sequence::iterator CharacteristicGroupStatus_iterator;
      typedef CharacteristicGroupStatus_sequence::const_iterator CharacteristicGroupStatus_const_iterator;
      typedef ::xsd::cxx::tree::traits< CharacteristicGroupStatus_type, char > CharacteristicGroupStatus_traits;

      const CharacteristicGroupStatus_sequence&
      CharacteristicGroupStatus () const;

      CharacteristicGroupStatus_sequence&
      CharacteristicGroupStatus ();

      void
      CharacteristicGroupStatus (const CharacteristicGroupStatus_sequence& s);

      // Constructors.
      //
      CharacteristicGroupStatusesType ();

      CharacteristicGroupStatusesType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      CharacteristicGroupStatusesType (const CharacteristicGroupStatusesType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual CharacteristicGroupStatusesType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicGroupStatusesType&
      operator= (const CharacteristicGroupStatusesType& x);

      virtual 
      ~CharacteristicGroupStatusesType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CharacteristicGroupStatus_sequence CharacteristicGroupStatus_;
    };

    class CharacteristicDefinitionsType: public ::xml_schema::type
    {
      public:
      // CharacteristicDefinition
      //
      typedef ::xsd::qif2::CharacteristicDefinitionBaseType CharacteristicDefinition_type;
      typedef ::xsd::cxx::tree::sequence< CharacteristicDefinition_type > CharacteristicDefinition_sequence;
      typedef CharacteristicDefinition_sequence::iterator CharacteristicDefinition_iterator;
      typedef CharacteristicDefinition_sequence::const_iterator CharacteristicDefinition_const_iterator;
      typedef ::xsd::cxx::tree::traits< CharacteristicDefinition_type, char > CharacteristicDefinition_traits;

      const CharacteristicDefinition_sequence&
      CharacteristicDefinition () const;

      CharacteristicDefinition_sequence&
      CharacteristicDefinition ();

      void
      CharacteristicDefinition (const CharacteristicDefinition_sequence& s);

      // Constructors.
      //
      CharacteristicDefinitionsType ();

      CharacteristicDefinitionsType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      CharacteristicDefinitionsType (const CharacteristicDefinitionsType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual CharacteristicDefinitionsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicDefinitionsType&
      operator= (const CharacteristicDefinitionsType& x);

      virtual 
      ~CharacteristicDefinitionsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CharacteristicDefinition_sequence CharacteristicDefinition_;
    };

    class ToleranceDefinitionsType: public ::xml_schema::type
    {
      public:
      // LinearTolerance
      //
      typedef ::xsd::qif2::LinearToleranceDefinitionType LinearTolerance_type;
      typedef ::xsd::cxx::tree::sequence< LinearTolerance_type > LinearTolerance_sequence;
      typedef LinearTolerance_sequence::iterator LinearTolerance_iterator;
      typedef LinearTolerance_sequence::const_iterator LinearTolerance_const_iterator;
      typedef ::xsd::cxx::tree::traits< LinearTolerance_type, char > LinearTolerance_traits;

      const LinearTolerance_sequence&
      LinearTolerance () const;

      LinearTolerance_sequence&
      LinearTolerance ();

      void
      LinearTolerance (const LinearTolerance_sequence& s);

      // AngularTolerance
      //
      typedef ::xsd::qif2::AngularToleranceDefinitionType AngularTolerance_type;
      typedef ::xsd::cxx::tree::sequence< AngularTolerance_type > AngularTolerance_sequence;
      typedef AngularTolerance_sequence::iterator AngularTolerance_iterator;
      typedef AngularTolerance_sequence::const_iterator AngularTolerance_const_iterator;
      typedef ::xsd::cxx::tree::traits< AngularTolerance_type, char > AngularTolerance_traits;

      const AngularTolerance_sequence&
      AngularTolerance () const;

      AngularTolerance_sequence&
      AngularTolerance ();

      void
      AngularTolerance (const AngularTolerance_sequence& s);

      // Constructors.
      //
      ToleranceDefinitionsType ();

      ToleranceDefinitionsType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      ToleranceDefinitionsType (const ToleranceDefinitionsType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual ToleranceDefinitionsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ToleranceDefinitionsType&
      operator= (const ToleranceDefinitionsType& x);

      virtual 
      ~ToleranceDefinitionsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      LinearTolerance_sequence LinearTolerance_;
      AngularTolerance_sequence AngularTolerance_;
    };

    class CharacteristicNominalsType: public ::xml_schema::type
    {
      public:
      // CharacteristicNominal
      //
      typedef ::xsd::qif2::CharacteristicNominalBaseType CharacteristicNominal_type;
      typedef ::xsd::cxx::tree::sequence< CharacteristicNominal_type > CharacteristicNominal_sequence;
      typedef CharacteristicNominal_sequence::iterator CharacteristicNominal_iterator;
      typedef CharacteristicNominal_sequence::const_iterator CharacteristicNominal_const_iterator;
      typedef ::xsd::cxx::tree::traits< CharacteristicNominal_type, char > CharacteristicNominal_traits;

      const CharacteristicNominal_sequence&
      CharacteristicNominal () const;

      CharacteristicNominal_sequence&
      CharacteristicNominal ();

      void
      CharacteristicNominal (const CharacteristicNominal_sequence& s);

      // Constructors.
      //
      CharacteristicNominalsType ();

      CharacteristicNominalsType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      CharacteristicNominalsType (const CharacteristicNominalsType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual CharacteristicNominalsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicNominalsType&
      operator= (const CharacteristicNominalsType& x);

      virtual 
      ~CharacteristicNominalsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CharacteristicNominal_sequence CharacteristicNominal_;
    };

    class CharacteristicActualsType: public ::xml_schema::type
    {
      public:
      // CharacteristicActual
      //
      typedef ::xsd::qif2::CharacteristicActualBaseType CharacteristicActual_type;
      typedef ::xsd::cxx::tree::sequence< CharacteristicActual_type > CharacteristicActual_sequence;
      typedef CharacteristicActual_sequence::iterator CharacteristicActual_iterator;
      typedef CharacteristicActual_sequence::const_iterator CharacteristicActual_const_iterator;
      typedef ::xsd::cxx::tree::traits< CharacteristicActual_type, char > CharacteristicActual_traits;

      const CharacteristicActual_sequence&
      CharacteristicActual () const;

      CharacteristicActual_sequence&
      CharacteristicActual ();

      void
      CharacteristicActual (const CharacteristicActual_sequence& s);

      // Constructors.
      //
      CharacteristicActualsType ();

      CharacteristicActualsType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      CharacteristicActualsType (const CharacteristicActualsType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual CharacteristicActualsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicActualsType&
      operator= (const CharacteristicActualsType& x);

      virtual 
      ~CharacteristicActualsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CharacteristicActual_sequence CharacteristicActual_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xsd
{
  namespace qif2
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (const ::std::string& uri,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (const ::std::string& uri,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (const ::std::string& uri,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (::std::istream& is,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (::std::istream& is,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (::std::istream& is,
                                             const ::std::string& id,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (::std::istream& is,
                                             const ::std::string& id,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (::std::istream& is,
                                             const ::std::string& id,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (::xercesc::InputSource& is,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (::xercesc::InputSource& is,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (::xercesc::InputSource& is,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (const ::xercesc::DOMDocument& d,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (const ::std::string& uri,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (::std::istream& is,
                                     const ::std::string& id,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (::xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (::xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (::xercesc::InputSource& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (const ::std::string& uri,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (const ::std::string& uri,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (const ::std::string& uri,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (::std::istream& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (::std::istream& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& id,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (::xercesc::InputSource& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (::xercesc::InputSource& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (::xercesc::InputSource& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (const ::std::string& uri,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (const ::std::string& uri,
                                               ::xml_schema::error_handler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (const ::std::string& uri,
                                               ::xercesc::DOMErrorHandler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (::std::istream& is,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (::std::istream& is,
                                               ::xml_schema::error_handler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (::std::istream& is,
                                               ::xercesc::DOMErrorHandler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (::std::istream& is,
                                               const ::std::string& id,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (::std::istream& is,
                                               const ::std::string& id,
                                               ::xml_schema::error_handler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (::std::istream& is,
                                               const ::std::string& id,
                                               ::xercesc::DOMErrorHandler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (::xercesc::InputSource& is,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (::xercesc::InputSource& is,
                                               ::xml_schema::error_handler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (::xercesc::InputSource& is,
                                               ::xercesc::DOMErrorHandler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (::xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (::xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (const ::std::string& uri,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (::std::istream& is,
                                        const ::std::string& id,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (::xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (::xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (::xercesc::InputSource& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (const ::std::string& uri,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& id,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (::xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (::xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (::xercesc::InputSource& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (const ::std::string& uri,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (const ::std::string& uri,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (const ::std::string& uri,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (::std::istream& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (::std::istream& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (::std::istream& is,
                                            const ::std::string& id,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (::xercesc::InputSource& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (::xercesc::InputSource& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (::xercesc::InputSource& is,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (const ::std::string& uri,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (const ::std::string& uri,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (const ::std::string& uri,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (::std::istream& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (::std::istream& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (::std::istream& is,
                                           const ::std::string& id,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (::xercesc::InputSource& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (::xercesc::InputSource& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (::xercesc::InputSource& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (const ::std::string& uri,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& id,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (::xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (::xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (::xercesc::InputSource& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (const ::std::string& uri,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (const ::std::string& uri,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (const ::std::string& uri,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (::std::istream& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (::std::istream& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& id,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (::xercesc::InputSource& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (::xercesc::InputSource& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (::xercesc::InputSource& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (const ::std::string& uri,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (const ::std::string& uri,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (const ::std::string& uri,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (::std::istream& is,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (::std::istream& is,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& id,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& id,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& id,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (::xercesc::InputSource& is,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (::xercesc::InputSource& is,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (::xercesc::InputSource& is,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (const ::std::string& uri,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (const ::std::string& uri,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (const ::std::string& uri,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (::std::istream& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (::std::istream& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& id,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (::xercesc::InputSource& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (::xercesc::InputSource& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (::xercesc::InputSource& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (const ::std::string& uri,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (const ::std::string& uri,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (const ::std::string& uri,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (::std::istream& is,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (::std::istream& is,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (::std::istream& is,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& id,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& id,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& id,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (::xercesc::InputSource& is,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (::xercesc::InputSource& is,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (::xercesc::InputSource& is,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (const ::std::string& uri,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& id,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (::xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (::xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (::xercesc::InputSource& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (const ::std::string& uri,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& id,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (::xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (::xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (::xercesc::InputSource& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (const ::std::string& uri,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (const ::std::string& uri,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (const ::std::string& uri,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (::std::istream& is,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (::std::istream& is,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (::std::istream& is,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& id,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& id,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& id,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (::xercesc::InputSource& is,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (::xercesc::InputSource& is,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (::xercesc::InputSource& is,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (const ::std::string& uri,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (const ::std::string& uri,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (const ::std::string& uri,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (::std::istream& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (::std::istream& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& id,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (::xercesc::InputSource& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (::xercesc::InputSource& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (::xercesc::InputSource& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (const ::std::string& uri,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (const ::std::string& uri,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (const ::std::string& uri,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (::std::istream& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (::std::istream& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& id,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (::xercesc::InputSource& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (::xercesc::InputSource& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (::xercesc::InputSource& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (const ::std::string& uri,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (const ::std::string& uri,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (const ::std::string& uri,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (::std::istream& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (::std::istream& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (::std::istream& is,
                                            const ::std::string& id,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (::xercesc::InputSource& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (::xercesc::InputSource& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (::xercesc::InputSource& is,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (const ::std::string& uri,
                                                      ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (const ::std::string& uri,
                                                      ::xml_schema::error_handler& eh,
                                                      ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (const ::std::string& uri,
                                                      ::xercesc::DOMErrorHandler& eh,
                                                      ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (::std::istream& is,
                                                      ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (::std::istream& is,
                                                      ::xml_schema::error_handler& eh,
                                                      ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (::std::istream& is,
                                                      ::xercesc::DOMErrorHandler& eh,
                                                      ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (::std::istream& is,
                                                      const ::std::string& id,
                                                      ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (::std::istream& is,
                                                      const ::std::string& id,
                                                      ::xml_schema::error_handler& eh,
                                                      ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (::std::istream& is,
                                                      const ::std::string& id,
                                                      ::xercesc::DOMErrorHandler& eh,
                                                      ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (::xercesc::InputSource& is,
                                                      ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (::xercesc::InputSource& is,
                                                      ::xml_schema::error_handler& eh,
                                                      ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (::xercesc::InputSource& is,
                                                      ::xercesc::DOMErrorHandler& eh,
                                                      ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                                      ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                      ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (const ::std::string& uri,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (const ::std::string& uri,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (const ::std::string& uri,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (::std::istream& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (::std::istream& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (::std::istream& is,
                                            const ::std::string& id,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (::xercesc::InputSource& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (::xercesc::InputSource& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (::xercesc::InputSource& is,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (::xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (::xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (const ::std::string& uri,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& id,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (::xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (::xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (::xercesc::InputSource& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (const ::std::string& uri,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (const ::std::string& uri,
                                                  ::xml_schema::error_handler& eh,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (const ::std::string& uri,
                                                  ::xercesc::DOMErrorHandler& eh,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (::std::istream& is,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (::std::istream& is,
                                                  ::xml_schema::error_handler& eh,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (::std::istream& is,
                                                  ::xercesc::DOMErrorHandler& eh,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (::std::istream& is,
                                                  const ::std::string& id,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (::std::istream& is,
                                                  const ::std::string& id,
                                                  ::xml_schema::error_handler& eh,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (::std::istream& is,
                                                  const ::std::string& id,
                                                  ::xercesc::DOMErrorHandler& eh,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (::xercesc::InputSource& is,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (::xercesc::InputSource& is,
                                                  ::xml_schema::error_handler& eh,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (::xercesc::InputSource& is,
                                                  ::xercesc::DOMErrorHandler& eh,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (const ::std::string& uri,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (const ::std::string& uri,
                                               ::xml_schema::error_handler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (const ::std::string& uri,
                                               ::xercesc::DOMErrorHandler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (::std::istream& is,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (::std::istream& is,
                                               ::xml_schema::error_handler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (::std::istream& is,
                                               ::xercesc::DOMErrorHandler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (::std::istream& is,
                                               const ::std::string& id,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (::std::istream& is,
                                               const ::std::string& id,
                                               ::xml_schema::error_handler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (::std::istream& is,
                                               const ::std::string& id,
                                               ::xercesc::DOMErrorHandler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (::xercesc::InputSource& is,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (::xercesc::InputSource& is,
                                               ::xml_schema::error_handler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (::xercesc::InputSource& is,
                                               ::xercesc::DOMErrorHandler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (const ::std::string& uri,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (const ::std::string& uri,
                                                ::xml_schema::error_handler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (const ::std::string& uri,
                                                ::xercesc::DOMErrorHandler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (::std::istream& is,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (::std::istream& is,
                                                ::xml_schema::error_handler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (::std::istream& is,
                                                ::xercesc::DOMErrorHandler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (::std::istream& is,
                                                const ::std::string& id,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (::std::istream& is,
                                                const ::std::string& id,
                                                ::xml_schema::error_handler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (::std::istream& is,
                                                const ::std::string& id,
                                                ::xercesc::DOMErrorHandler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (::xercesc::InputSource& is,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (::xercesc::InputSource& is,
                                                ::xml_schema::error_handler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (::xercesc::InputSource& is,
                                                ::xercesc::DOMErrorHandler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (const ::std::string& uri,
                                                    ::xml_schema::flags f = 0,
                                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (const ::std::string& uri,
                                                    ::xml_schema::error_handler& eh,
                                                    ::xml_schema::flags f = 0,
                                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (const ::std::string& uri,
                                                    ::xercesc::DOMErrorHandler& eh,
                                                    ::xml_schema::flags f = 0,
                                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (::std::istream& is,
                                                    ::xml_schema::flags f = 0,
                                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (::std::istream& is,
                                                    ::xml_schema::error_handler& eh,
                                                    ::xml_schema::flags f = 0,
                                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (::std::istream& is,
                                                    ::xercesc::DOMErrorHandler& eh,
                                                    ::xml_schema::flags f = 0,
                                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (::std::istream& is,
                                                    const ::std::string& id,
                                                    ::xml_schema::flags f = 0,
                                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (::std::istream& is,
                                                    const ::std::string& id,
                                                    ::xml_schema::error_handler& eh,
                                                    ::xml_schema::flags f = 0,
                                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (::std::istream& is,
                                                    const ::std::string& id,
                                                    ::xercesc::DOMErrorHandler& eh,
                                                    ::xml_schema::flags f = 0,
                                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (::xercesc::InputSource& is,
                                                    ::xml_schema::flags f = 0,
                                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (::xercesc::InputSource& is,
                                                    ::xml_schema::error_handler& eh,
                                                    ::xml_schema::flags f = 0,
                                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (::xercesc::InputSource& is,
                                                    ::xercesc::DOMErrorHandler& eh,
                                                    ::xml_schema::flags f = 0,
                                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                                    ::xml_schema::flags f = 0,
                                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                    ::xml_schema::flags f = 0,
                                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (const ::std::string& uri,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (const ::std::string& uri,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (const ::std::string& uri,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (::std::istream& is,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (::std::istream& is,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& id,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& id,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& id,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (::xercesc::InputSource& is,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (::xercesc::InputSource& is,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (::xercesc::InputSource& is,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (const ::std::string& uri,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (const ::std::string& uri,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (const ::std::string& uri,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (::std::istream& is,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (::std::istream& is,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (::std::istream& is,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& id,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& id,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& id,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (::xercesc::InputSource& is,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (::xercesc::InputSource& is,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (::xercesc::InputSource& is,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (const ::std::string& uri,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (const ::std::string& uri,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (const ::std::string& uri,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (::std::istream& is,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (::std::istream& is,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& id,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& id,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& id,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (::xercesc::InputSource& is,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (::xercesc::InputSource& is,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (::xercesc::InputSource& is,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (const ::std::string& uri,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (const ::std::string& uri,
                                                 ::xml_schema::error_handler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (const ::std::string& uri,
                                                 ::xercesc::DOMErrorHandler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (::std::istream& is,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (::std::istream& is,
                                                 ::xml_schema::error_handler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (::std::istream& is,
                                                 ::xercesc::DOMErrorHandler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (::std::istream& is,
                                                 const ::std::string& id,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (::std::istream& is,
                                                 const ::std::string& id,
                                                 ::xml_schema::error_handler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (::std::istream& is,
                                                 const ::std::string& id,
                                                 ::xercesc::DOMErrorHandler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (::xercesc::InputSource& is,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (::xercesc::InputSource& is,
                                                 ::xml_schema::error_handler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (::xercesc::InputSource& is,
                                                 ::xercesc::DOMErrorHandler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (const ::std::string& uri,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (const ::std::string& uri,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (const ::std::string& uri,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (::std::istream& is,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (::std::istream& is,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (::std::istream& is,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& id,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& id,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& id,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (::xercesc::InputSource& is,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (::xercesc::InputSource& is,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (::xercesc::InputSource& is,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (const ::std::string& uri,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (const ::std::string& uri,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (const ::std::string& uri,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (::std::istream& is,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (::std::istream& is,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& id,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& id,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& id,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (::xercesc::InputSource& is,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (::xercesc::InputSource& is,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (::xercesc::InputSource& is,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (const ::std::string& uri,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (const ::std::string& uri,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (const ::std::string& uri,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (::std::istream& is,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (::std::istream& is,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& id,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& id,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& id,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (::xercesc::InputSource& is,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (::xercesc::InputSource& is,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (::xercesc::InputSource& is,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (::xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (::xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (const ::std::string& uri,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (const ::std::string& uri,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (const ::std::string& uri,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (::std::istream& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (::std::istream& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (::std::istream& is,
                                            const ::std::string& id,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (::xercesc::InputSource& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (::xercesc::InputSource& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (::xercesc::InputSource& is,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (const ::std::string& uri,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (::std::istream& is,
                                     const ::std::string& id,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (::xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (::xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (::xercesc::InputSource& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (const ::std::string& uri,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (::std::istream& is,
                                         const ::std::string& id,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (::xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (::xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (::xercesc::InputSource& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (const ::std::string& uri,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (::std::istream& is,
                                        const ::std::string& id,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (::xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (::xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (::xercesc::InputSource& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (::xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (::xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (const ::std::string& uri,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (const ::std::string& uri,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (const ::std::string& uri,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (::std::istream& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (::std::istream& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (::std::istream& is,
                                          const ::std::string& id,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (::xercesc::InputSource& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (::xercesc::InputSource& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (::xercesc::InputSource& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (::xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (::xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (::xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (::xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (::xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (::xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (const ::std::string& uri,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (const ::std::string& uri,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (const ::std::string& uri,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (::std::istream& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (::std::istream& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (::std::istream& is,
                                           const ::std::string& id,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (::xercesc::InputSource& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (::xercesc::InputSource& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (::xercesc::InputSource& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (const ::std::string& uri,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (const ::std::string& uri,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (const ::std::string& uri,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (::std::istream& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (::std::istream& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (::std::istream& is,
                                           const ::std::string& id,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (::xercesc::InputSource& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (::xercesc::InputSource& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (::xercesc::InputSource& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (::xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (::xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (::xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (::xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (::xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (::xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (::xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (::xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (const ::std::string& uri,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (::std::istream& is,
                                         const ::std::string& id,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (::xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (::xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (::xercesc::InputSource& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (const ::std::string& uri,
                                                   ::xml_schema::flags f = 0,
                                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (const ::std::string& uri,
                                                   ::xml_schema::error_handler& eh,
                                                   ::xml_schema::flags f = 0,
                                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (const ::std::string& uri,
                                                   ::xercesc::DOMErrorHandler& eh,
                                                   ::xml_schema::flags f = 0,
                                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (::std::istream& is,
                                                   ::xml_schema::flags f = 0,
                                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (::std::istream& is,
                                                   ::xml_schema::error_handler& eh,
                                                   ::xml_schema::flags f = 0,
                                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (::std::istream& is,
                                                   ::xercesc::DOMErrorHandler& eh,
                                                   ::xml_schema::flags f = 0,
                                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (::std::istream& is,
                                                   const ::std::string& id,
                                                   ::xml_schema::flags f = 0,
                                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (::std::istream& is,
                                                   const ::std::string& id,
                                                   ::xml_schema::error_handler& eh,
                                                   ::xml_schema::flags f = 0,
                                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (::std::istream& is,
                                                   const ::std::string& id,
                                                   ::xercesc::DOMErrorHandler& eh,
                                                   ::xml_schema::flags f = 0,
                                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (::xercesc::InputSource& is,
                                                   ::xml_schema::flags f = 0,
                                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (::xercesc::InputSource& is,
                                                   ::xml_schema::error_handler& eh,
                                                   ::xml_schema::flags f = 0,
                                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (::xercesc::InputSource& is,
                                                   ::xercesc::DOMErrorHandler& eh,
                                                   ::xml_schema::flags f = 0,
                                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                                   ::xml_schema::flags f = 0,
                                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                   ::xml_schema::flags f = 0,
                                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (const ::std::string& uri,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (::std::istream& is,
                                         const ::std::string& id,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (::xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (::xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (::xercesc::InputSource& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (::xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (::xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (const ::std::string& uri,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (const ::std::string& uri,
                                               ::xml_schema::error_handler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (const ::std::string& uri,
                                               ::xercesc::DOMErrorHandler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (::std::istream& is,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (::std::istream& is,
                                               ::xml_schema::error_handler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (::std::istream& is,
                                               ::xercesc::DOMErrorHandler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (::std::istream& is,
                                               const ::std::string& id,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (::std::istream& is,
                                               const ::std::string& id,
                                               ::xml_schema::error_handler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (::std::istream& is,
                                               const ::std::string& id,
                                               ::xercesc::DOMErrorHandler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (::xercesc::InputSource& is,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (::xercesc::InputSource& is,
                                               ::xml_schema::error_handler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (::xercesc::InputSource& is,
                                               ::xercesc::DOMErrorHandler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (const ::std::string& uri,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (const ::std::string& uri,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (const ::std::string& uri,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (::std::istream& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (::std::istream& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (::std::istream& is,
                                            const ::std::string& id,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (::xercesc::InputSource& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (::xercesc::InputSource& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (::xercesc::InputSource& is,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (const ::std::string& uri,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (const ::std::string& uri,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (const ::std::string& uri,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (::std::istream& is,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (::std::istream& is,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (::std::istream& is,
                                             const ::std::string& id,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (::std::istream& is,
                                             const ::std::string& id,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (::std::istream& is,
                                             const ::std::string& id,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (::xercesc::InputSource& is,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (::xercesc::InputSource& is,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (::xercesc::InputSource& is,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (const ::std::string& uri,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (const ::std::string& uri,
                                                 ::xml_schema::error_handler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (const ::std::string& uri,
                                                 ::xercesc::DOMErrorHandler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (::std::istream& is,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (::std::istream& is,
                                                 ::xml_schema::error_handler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (::std::istream& is,
                                                 ::xercesc::DOMErrorHandler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (::std::istream& is,
                                                 const ::std::string& id,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (::std::istream& is,
                                                 const ::std::string& id,
                                                 ::xml_schema::error_handler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (::std::istream& is,
                                                 const ::std::string& id,
                                                 ::xercesc::DOMErrorHandler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (::xercesc::InputSource& is,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (::xercesc::InputSource& is,
                                                 ::xml_schema::error_handler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (::xercesc::InputSource& is,
                                                 ::xercesc::DOMErrorHandler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (const ::std::string& uri,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (const ::std::string& uri,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (const ::std::string& uri,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (::std::istream& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (::std::istream& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (::std::istream& is,
                                          const ::std::string& id,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (::xercesc::InputSource& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (::xercesc::InputSource& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (::xercesc::InputSource& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (const ::std::string& uri,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (const ::std::string& uri,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (const ::std::string& uri,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (::std::istream& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (::std::istream& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (::std::istream& is,
                                           const ::std::string& id,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (::xercesc::InputSource& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (::xercesc::InputSource& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (::xercesc::InputSource& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (const ::std::string& uri,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (const ::std::string& uri,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (const ::std::string& uri,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (::std::istream& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (::std::istream& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (::std::istream& is,
                                          const ::std::string& id,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (::xercesc::InputSource& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (::xercesc::InputSource& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (::xercesc::InputSource& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (const ::std::string& uri,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (const ::std::string& uri,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (const ::std::string& uri,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (::std::istream& is,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (::std::istream& is,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (::std::istream& is,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (::std::istream& is,
                                              const ::std::string& id,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (::std::istream& is,
                                              const ::std::string& id,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (::std::istream& is,
                                              const ::std::string& id,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (::xercesc::InputSource& is,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (::xercesc::InputSource& is,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (::xercesc::InputSource& is,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (const ::std::string& uri,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (const ::std::string& uri,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (const ::std::string& uri,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (::std::istream& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (::std::istream& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (::std::istream& is,
                                           const ::std::string& id,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (::xercesc::InputSource& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (::xercesc::InputSource& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (::xercesc::InputSource& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (const ::std::string& uri,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (const ::std::string& uri,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (const ::std::string& uri,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (::std::istream& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (::std::istream& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (::std::istream& is,
                                          const ::std::string& id,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (::xercesc::InputSource& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (::xercesc::InputSource& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (::xercesc::InputSource& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (const ::std::string& uri,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (const ::std::string& uri,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (const ::std::string& uri,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (::std::istream& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (::std::istream& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (::std::istream& is,
                                          const ::std::string& id,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (::xercesc::InputSource& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (::xercesc::InputSource& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (::xercesc::InputSource& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (const ::std::string& uri,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (const ::std::string& uri,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (const ::std::string& uri,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (::std::istream& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (::std::istream& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (::std::istream& is,
                                           const ::std::string& id,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (::xercesc::InputSource& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (::xercesc::InputSource& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (::xercesc::InputSource& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (const ::xercesc::DOMDocument& d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (const ::std::string& uri,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (::std::istream& is,
                                     const ::std::string& id,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (::xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (::xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (::xercesc::InputSource& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (const ::std::string& uri,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (::std::istream& is,
                                        const ::std::string& id,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (::xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (::xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (::xercesc::InputSource& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (::xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (::xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (const ::std::string& uri,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (::std::istream& is,
                                     const ::std::string& id,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (::xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (::xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (::xercesc::InputSource& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (::xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (::xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (const ::std::string& uri,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (::std::istream& is,
                                         const ::std::string& id,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (::xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (::xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (::xercesc::InputSource& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (::xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (::xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (const ::std::string& uri,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (const ::std::string& uri,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (const ::std::string& uri,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (::std::istream& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (::std::istream& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (::std::istream& is,
                                          const ::std::string& id,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (::xercesc::InputSource& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (::xercesc::InputSource& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (::xercesc::InputSource& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (const ::std::string& uri,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (::std::istream& is,
                                     const ::std::string& id,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (::xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (::xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (::xercesc::InputSource& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (const ::std::string& uri,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (::std::istream& is,
                                     const ::std::string& id,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (::xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (::xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (::xercesc::InputSource& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (const ::std::string& uri,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (const ::std::string& uri,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (const ::std::string& uri,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (::std::istream& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (::std::istream& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (::std::istream& is,
                                          const ::std::string& id,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (::xercesc::InputSource& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (::xercesc::InputSource& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (::xercesc::InputSource& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (::xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (::xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (const ::std::string& uri,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (::std::istream& is,
                                        const ::std::string& id,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (::xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (::xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (::xercesc::InputSource& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (const ::std::string& uri,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (const ::std::string& uri,
                                                  ::xml_schema::error_handler& eh,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (const ::std::string& uri,
                                                  ::xercesc::DOMErrorHandler& eh,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (::std::istream& is,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (::std::istream& is,
                                                  ::xml_schema::error_handler& eh,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (::std::istream& is,
                                                  ::xercesc::DOMErrorHandler& eh,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (::std::istream& is,
                                                  const ::std::string& id,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (::std::istream& is,
                                                  const ::std::string& id,
                                                  ::xml_schema::error_handler& eh,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (::std::istream& is,
                                                  const ::std::string& id,
                                                  ::xercesc::DOMErrorHandler& eh,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (::xercesc::InputSource& is,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (::xercesc::InputSource& is,
                                                  ::xml_schema::error_handler& eh,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (::xercesc::InputSource& is,
                                                  ::xercesc::DOMErrorHandler& eh,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (const ::xercesc::DOMDocument& d,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                  ::xml_schema::flags f = 0,
                                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (const ::std::string& uri,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (::std::istream& is,
                                        const ::std::string& id,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (::xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (::xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (::xercesc::InputSource& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (::xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (::xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (const ::std::string& uri,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (::std::istream& is,
                                     const ::std::string& id,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (::xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (::xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (::xercesc::InputSource& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (const ::std::string& uri,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (const ::std::string& uri,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (const ::std::string& uri,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (::std::istream& is,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (::std::istream& is,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (::std::istream& is,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (::std::istream& is,
                                              const ::std::string& id,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (::std::istream& is,
                                              const ::std::string& id,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (::std::istream& is,
                                              const ::std::string& id,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (::xercesc::InputSource& is,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (::xercesc::InputSource& is,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (::xercesc::InputSource& is,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (const ::xercesc::DOMDocument& d,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (const ::std::string& uri,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (const ::std::string& uri,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (const ::std::string& uri,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (::std::istream& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (::std::istream& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (::std::istream& is,
                                           const ::std::string& id,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (::xercesc::InputSource& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (::xercesc::InputSource& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (::xercesc::InputSource& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (const ::xercesc::DOMDocument& d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (const ::std::string& uri,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (const ::std::string& uri,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (const ::std::string& uri,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (::std::istream& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (::std::istream& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (::std::istream& is,
                                            const ::std::string& id,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (::xercesc::InputSource& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (::xercesc::InputSource& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (::xercesc::InputSource& is,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (const ::xercesc::DOMDocument& d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (const ::std::string& uri,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (const ::std::string& uri,
                                                ::xml_schema::error_handler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (const ::std::string& uri,
                                                ::xercesc::DOMErrorHandler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (::std::istream& is,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (::std::istream& is,
                                                ::xml_schema::error_handler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (::std::istream& is,
                                                ::xercesc::DOMErrorHandler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (::std::istream& is,
                                                const ::std::string& id,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (::std::istream& is,
                                                const ::std::string& id,
                                                ::xml_schema::error_handler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (::std::istream& is,
                                                const ::std::string& id,
                                                ::xercesc::DOMErrorHandler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (::xercesc::InputSource& is,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (::xercesc::InputSource& is,
                                                ::xml_schema::error_handler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (::xercesc::InputSource& is,
                                                ::xercesc::DOMErrorHandler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (const ::xercesc::DOMDocument& d,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (const ::std::string& uri,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (::std::istream& is,
                                         const ::std::string& id,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (::xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (::xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (::xercesc::InputSource& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (const ::std::string& uri,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (const ::std::string& uri,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (const ::std::string& uri,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (::std::istream& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (::std::istream& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (::std::istream& is,
                                          const ::std::string& id,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (::xercesc::InputSource& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (::xercesc::InputSource& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (::xercesc::InputSource& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (const ::std::string& uri,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (::std::istream& is,
                                         const ::std::string& id,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (::xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (::xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (::xercesc::InputSource& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (const ::std::string& uri,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (const ::std::string& uri,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (const ::std::string& uri,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (::std::istream& is,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (::std::istream& is,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (::std::istream& is,
                                             const ::std::string& id,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (::std::istream& is,
                                             const ::std::string& id,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (::std::istream& is,
                                             const ::std::string& id,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (::xercesc::InputSource& is,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (::xercesc::InputSource& is,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (::xercesc::InputSource& is,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (const ::xercesc::DOMDocument& d,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (const ::std::string& uri,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (const ::std::string& uri,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (const ::std::string& uri,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (::std::istream& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (::std::istream& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (::std::istream& is,
                                          const ::std::string& id,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (::xercesc::InputSource& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (::xercesc::InputSource& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (::xercesc::InputSource& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (const ::std::string& uri,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (::std::istream& is,
                                         const ::std::string& id,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (::xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (::xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (::xercesc::InputSource& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (const ::std::string& uri,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (::std::istream& is,
                                         const ::std::string& id,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (::xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (::xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (::xercesc::InputSource& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (const ::std::string& uri,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (::std::istream& is,
                                         const ::std::string& id,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (::xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (::xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (::xercesc::InputSource& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (::xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (::xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (::xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (::xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (const ::std::string& uri,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (::std::istream& is,
                                     const ::std::string& id,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (::xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (::xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (::xercesc::InputSource& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (::xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (::xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (const ::std::string& uri,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (::std::istream& is,
                                        const ::std::string& id,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (::xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (::xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (::xercesc::InputSource& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (const ::std::string& uri,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (::std::istream& is,
                                        const ::std::string& id,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (::xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (::xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (::xercesc::InputSource& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (const ::std::string& uri,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (const ::std::string& uri,
                                                ::xml_schema::error_handler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (const ::std::string& uri,
                                                ::xercesc::DOMErrorHandler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (::std::istream& is,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (::std::istream& is,
                                                ::xml_schema::error_handler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (::std::istream& is,
                                                ::xercesc::DOMErrorHandler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (::std::istream& is,
                                                const ::std::string& id,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (::std::istream& is,
                                                const ::std::string& id,
                                                ::xml_schema::error_handler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (::std::istream& is,
                                                const ::std::string& id,
                                                ::xercesc::DOMErrorHandler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (::xercesc::InputSource& is,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (::xercesc::InputSource& is,
                                                ::xml_schema::error_handler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (::xercesc::InputSource& is,
                                                ::xercesc::DOMErrorHandler& eh,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (const ::xercesc::DOMDocument& d,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                ::xml_schema::flags f = 0,
                                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (::xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (::xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (const ::std::string& uri,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (const ::std::string& uri,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (const ::std::string& uri,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (::std::istream& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (::std::istream& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (::std::istream& is,
                                            const ::std::string& id,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (::xercesc::InputSource& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (::xercesc::InputSource& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (::xercesc::InputSource& is,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (const ::xercesc::DOMDocument& d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (const ::std::string& uri,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (::std::istream& is,
                                         const ::std::string& id,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (::xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (::xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (::xercesc::InputSource& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (const ::std::string& uri,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (const ::std::string& uri,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (const ::std::string& uri,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (::std::istream& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (::std::istream& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (::std::istream& is,
                                          const ::std::string& id,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (::xercesc::InputSource& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (::xercesc::InputSource& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (::xercesc::InputSource& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (const ::std::string& uri,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (const ::std::string& uri,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (const ::std::string& uri,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (::std::istream& is,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (::std::istream& is,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (::std::istream& is,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (::std::istream& is,
                                              const ::std::string& id,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (::std::istream& is,
                                              const ::std::string& id,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (::std::istream& is,
                                              const ::std::string& id,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (::xercesc::InputSource& is,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (::xercesc::InputSource& is,
                                              ::xml_schema::error_handler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (::xercesc::InputSource& is,
                                              ::xercesc::DOMErrorHandler& eh,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (const ::xercesc::DOMDocument& d,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                              ::xml_schema::flags f = 0,
                                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (::xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (::xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (const ::std::string& uri,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (::std::istream& is,
                                        const ::std::string& id,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (::xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (::xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (::xercesc::InputSource& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (::xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (::xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (const ::std::string& uri,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (const ::std::string& uri,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (const ::std::string& uri,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (::std::istream& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (::std::istream& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (::std::istream& is,
                                           const ::std::string& id,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (::xercesc::InputSource& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (::xercesc::InputSource& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (::xercesc::InputSource& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (const ::xercesc::DOMDocument& d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (const ::std::string& uri,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (::std::istream& is,
                                        const ::std::string& id,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (::xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (::xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (::xercesc::InputSource& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (::xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (::xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (::xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (::xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xsd
{
  namespace qif2
  {
    void
    operator<< (::xercesc::DOMElement&, const CharacteristicBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicItemBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const KeyCharacteristicType&);

    void
    operator<< (::xercesc::DOMElement&, const LocationOnDrawingType&);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicDefinitionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicNominalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicActualBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const GeometricCharacteristicDefinitionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const GeometricCharacteristicNominalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const GeometricCharacteristicActualBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const GeometricCharacteristicItemBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const DimensionalCharacteristicDefinitionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const DimensionalCharacteristicNominalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const DimensionalCharacteristicActualBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const DimensionalCharacteristicItemBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const CoordinateCharacteristicDefinitionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const CoordinateCharacteristicNominalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const CoordinateCharacteristicActualBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const CoordinateCharacteristicItemBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedAttributeCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedAttributeCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedAttributeCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedAttributeCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const StringValuesType&);

    void
    operator<< (::xercesc::DOMElement&, const LinearCharacteristicDefinitionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedLinearCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const LinearCharacteristicNominalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedLinearCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const LinearCharacteristicActualBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedLinearCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const LinearCharacteristicItemBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedLinearCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const AngularCharacteristicDefinitionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedAngularCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const AngularCharacteristicNominalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedAngularCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const AngularCharacteristicActualBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedAngularCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const AngularCharacteristicItemBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedAngularCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const TemperatureCharacteristicDefinitionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const TemperatureCharacteristicNominalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const TemperatureCharacteristicActualBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const TemperatureCharacteristicItemBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedTemperatureCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedTemperatureCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedTemperatureCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedTemperatureCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const AreaCharacteristicDefinitionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const AreaCharacteristicNominalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const AreaCharacteristicActualBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const AreaCharacteristicItemBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedAreaCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedAreaCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedAreaCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedAreaCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const ForceCharacteristicDefinitionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const ForceCharacteristicNominalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const ForceCharacteristicActualBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const ForceCharacteristicItemBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedForceCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedForceCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedForceCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedForceCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const MassCharacteristicDefinitionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const MassCharacteristicNominalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const MassCharacteristicActualBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const MassCharacteristicItemBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedMassCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedMassCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedMassCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedMassCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const PressureCharacteristicDefinitionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const PressureCharacteristicNominalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const PressureCharacteristicActualBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const PressureCharacteristicItemBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedPressureCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedPressureCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedPressureCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedPressureCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const SpeedCharacteristicDefinitionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const SpeedCharacteristicNominalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const SpeedCharacteristicActualBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const SpeedCharacteristicItemBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedSpeedCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedSpeedCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedSpeedCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedSpeedCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const TimeCharacteristicDefinitionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const TimeCharacteristicNominalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const TimeCharacteristicActualBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const TimeCharacteristicItemBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedTimeCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedTimeCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedTimeCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedTimeCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedUnitCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedUnitCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedUnitCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedUnitCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const CompositeSegmentDefinitionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const CompositeSegmentActualBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const CompositeSegmentPositionDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const CompositeSegmentPositionActualType&);

    void
    operator<< (::xercesc::DOMElement&, const CompositeSegmentProfileDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const CompositeSegmentProfileActualType&);

    void
    operator<< (::xercesc::DOMElement&, const CompositeSegmentSymmetryDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const CompositeSegmentSymmetryActualType&);

    void
    operator<< (::xercesc::DOMElement&, const OriginReferenceType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceTextureCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceTextureCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceTextureCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceTextureCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const OrientationDiametricalZoneType&);

    void
    operator<< (::xercesc::DOMElement&, const OrientationPlanarZoneType&);

    void
    operator<< (::xercesc::DOMElement&, const OrientationZoneShapeType&);

    void
    operator<< (::xercesc::DOMElement&, const OrientationCharacteristicItemBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const OrientationCharacteristicDefinitionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const OrientationCharacteristicNominalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const OrientationCharacteristicActualBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const AngularityCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const AngularityCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const AngularityCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const AngularityCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const PerpendicularityCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const PerpendicularityCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const PerpendicularityCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const PerpendicularityCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const ParallelismCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const ParallelismCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const ParallelismCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const ParallelismCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const FormCharacteristicDefinitionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const FormCharacteristicNominalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const FormCharacteristicActualBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const FormCharacteristicItemBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const StraightnessDiametricalZoneType&);

    void
    operator<< (::xercesc::DOMAttr&, const StraightnessDiametricalZoneType&);

    void
    operator<< (::xml_schema::list_stream&,
                const StraightnessDiametricalZoneType&);

    void
    operator<< (::xercesc::DOMElement&, const StraightnessNonDiametricalZoneType&);

    void
    operator<< (::xercesc::DOMElement&, const StraightnessZoneShapeType&);

    void
    operator<< (::xercesc::DOMElement&, const StraightnessCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const StraightnessCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const StraightnessCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const StraightnessCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const FlatnessCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const FlatnessCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const FlatnessCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const FlatnessCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const CircularityCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const CircularityCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const CircularityCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const CircularityCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const CylindricityCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const CylindricityCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const CylindricityCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const CylindricityCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const LocationCharacteristicItemBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const LocationCharacteristicDefinitionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const LocationCharacteristicNominalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const LocationCharacteristicActualBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const PositionCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const PositionSphericalZoneType&);

    void
    operator<< (::xercesc::DOMElement&, const PositionDiametricalZoneType&);

    void
    operator<< (::xercesc::DOMElement&, const PositionNonDiametricalZoneType&);

    void
    operator<< (::xercesc::DOMElement&, const PositionZoneShapeType&);

    void
    operator<< (::xercesc::DOMElement&, const PositionCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const PositionCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const PositionCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const AngleCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const AngleCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const AngleCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const AngleCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const AngleFromCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const AngleFromCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const AngleFromCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const AngleFromCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const AngleBetweenCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const AngleBetweenCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const AngleBetweenCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const AngleBetweenCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const LinearCoordinateCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const LinearCoordinateCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const LinearCoordinateCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const LinearCoordinateCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const AngularCoordinateCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const AngularCoordinateCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const AngularCoordinateCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const AngularCoordinateCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const CurveLengthCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const CurveLengthCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const CurveLengthCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const CurveLengthCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const DiameterCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const DiameterCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const DiameterCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const DiameterCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const LengthCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const LengthCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const LengthCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const LengthCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const WidthCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const WidthCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const WidthCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const WidthCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const HeightCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const HeightCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const HeightCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const HeightCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const DepthCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const DepthCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const DepthCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const DepthCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const ThicknessCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const ThicknessCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const ThicknessCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const ThicknessCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const SquareCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const SquareCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const SquareCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const SquareCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const DistanceFromCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const DistanceFromCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const DistanceFromCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const DistanceFromCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const DistanceBetweenCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const DistanceBetweenCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const DistanceBetweenCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const DistanceBetweenCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const RadiusCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const RadiusCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const RadiusCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const RadiusCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const ChordCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const ChordCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const ChordCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const ChordCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const RunoutCharacteristicItemBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const RunoutCharacteristicDefinitionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const RunoutCharacteristicNominalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const RunoutCharacteristicActualBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const CircularRunoutCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const CircularRunoutCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const CircularRunoutCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const CircularRunoutCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const TotalRunoutCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const TotalRunoutCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const TotalRunoutCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const TotalRunoutCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const ConcentricitySphericalZoneType&);

    void
    operator<< (::xercesc::DOMAttr&, const ConcentricitySphericalZoneType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ConcentricitySphericalZoneType&);

    void
    operator<< (::xercesc::DOMElement&, const ConcentricityDiametricalZoneType&);

    void
    operator<< (::xercesc::DOMAttr&, const ConcentricityDiametricalZoneType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ConcentricityDiametricalZoneType&);

    void
    operator<< (::xercesc::DOMElement&, const ConcentricityNonDiametricalZoneType&);

    void
    operator<< (::xercesc::DOMAttr&, const ConcentricityNonDiametricalZoneType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ConcentricityNonDiametricalZoneType&);

    void
    operator<< (::xercesc::DOMElement&, const ConcentricityZoneShapeType&);

    void
    operator<< (::xercesc::DOMElement&, const ConcentricityCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const ConcentricityCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const ConcentricityCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const ConcentricityCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const SymmetryCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const SymmetryCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const SymmetryCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const SymmetryCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const ProfileCharacteristicItemBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const ProfileCharacteristicDefinitionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const ProfileCharacteristicNominalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const ProfileCharacteristicActualBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const LineProfileCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const LineProfileCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const LineProfileCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const LineProfileCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const PointProfileCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const PointProfileCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const PointProfileCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const PointProfileCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceProfileCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceProfileCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceProfileCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceProfileCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceProfileNonUniformCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceProfileNonUniformCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceProfileNonUniformCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceProfileNonUniformCharacteristicActualType&);

    void
    operator<< (::xercesc::DOMElement&, const ZoneRadiiType&);

    void
    operator<< (::xercesc::DOMElement&, const ActualZoneRadiiType&);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicGroupType&);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicManufacturingProcessGroupType&);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicSimultaneityGroupType&);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicStatusEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const CharacteristicStatusEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const CharacteristicStatusEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicStatusType&);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicGroupStatusType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDeviationType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDeviationsType&);

    void
    operator<< (::xercesc::DOMElement&, const ExtentEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const ExtentEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ExtentEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const ExtentType&);

    void
    operator<< (::xercesc::DOMElement&, const PointWithNameType&);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicDirectionalZoneLimitType&);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicRectangularZoneLimitType&);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicCircularZoneLimitType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadCharacteristicItemType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadCharacteristicDefinitionType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadCharacteristicNominalType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadCharacteristicActualType&);

    // Serialize to std::ostream.
    //

    void
    Characteristics (::std::ostream& os,
                     const ::xsd::qif2::CharacteristicAspectsListsType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    Characteristics (::std::ostream& os,
                     const ::xsd::qif2::CharacteristicAspectsListsType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    Characteristics (::std::ostream& os,
                     const ::xsd::qif2::CharacteristicAspectsListsType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Characteristics (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::CharacteristicAspectsListsType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    Characteristics (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::CharacteristicAspectsListsType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    Characteristics (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::CharacteristicAspectsListsType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Characteristics (::xercesc::DOMDocument& d,
                     const ::xsd::qif2::CharacteristicAspectsListsType& x,
                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Characteristics (const ::xsd::qif2::CharacteristicAspectsListsType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicAspectsListsType&);

    void
    operator<< (::xercesc::DOMElement&, const MeasuredCharacteristicsType&);

    // Serialize to std::ostream.
    //

    void
    MeasuredCharacteristics (::std::ostream& os,
                             const ::xsd::qif2::MeasuredCharacteristicsType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    MeasuredCharacteristics (::std::ostream& os,
                             const ::xsd::qif2::MeasuredCharacteristicsType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    MeasuredCharacteristics (::std::ostream& os,
                             const ::xsd::qif2::MeasuredCharacteristicsType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    MeasuredCharacteristics (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::MeasuredCharacteristicsType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    MeasuredCharacteristics (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::MeasuredCharacteristicsType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    MeasuredCharacteristics (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::MeasuredCharacteristicsType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    MeasuredCharacteristics (::xercesc::DOMDocument& d,
                             const ::xsd::qif2::MeasuredCharacteristicsType& x,
                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    MeasuredCharacteristics (const ::xsd::qif2::MeasuredCharacteristicsType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicItemsType&);

    // Serialize to std::ostream.
    //

    void
    CharacteristicGroup (::std::ostream& os,
                         const ::xsd::qif2::CharacteristicGroupType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CharacteristicGroup (::std::ostream& os,
                         const ::xsd::qif2::CharacteristicGroupType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CharacteristicGroup (::std::ostream& os,
                         const ::xsd::qif2::CharacteristicGroupType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CharacteristicGroup (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::CharacteristicGroupType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CharacteristicGroup (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::CharacteristicGroupType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CharacteristicGroup (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::CharacteristicGroupType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CharacteristicGroup (::xercesc::DOMDocument& d,
                         const ::xsd::qif2::CharacteristicGroupType& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CharacteristicGroup (const ::xsd::qif2::CharacteristicGroupType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CharacteristicManufacturingProcessGroup (::std::ostream& os,
                                             const ::xsd::qif2::CharacteristicManufacturingProcessGroupType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    CharacteristicManufacturingProcessGroup (::std::ostream& os,
                                             const ::xsd::qif2::CharacteristicManufacturingProcessGroupType& x, 
                                             ::xml_schema::error_handler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    CharacteristicManufacturingProcessGroup (::std::ostream& os,
                                             const ::xsd::qif2::CharacteristicManufacturingProcessGroupType& x, 
                                             ::xercesc::DOMErrorHandler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CharacteristicManufacturingProcessGroup (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::CharacteristicManufacturingProcessGroupType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    CharacteristicManufacturingProcessGroup (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::CharacteristicManufacturingProcessGroupType& x, 
                                             ::xml_schema::error_handler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    CharacteristicManufacturingProcessGroup (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::CharacteristicManufacturingProcessGroupType& x, 
                                             ::xercesc::DOMErrorHandler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CharacteristicManufacturingProcessGroup (::xercesc::DOMDocument& d,
                                             const ::xsd::qif2::CharacteristicManufacturingProcessGroupType& x,
                                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CharacteristicManufacturingProcessGroup (const ::xsd::qif2::CharacteristicManufacturingProcessGroupType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CharacteristicSimultaneityGroup (::std::ostream& os,
                                     const ::xsd::qif2::CharacteristicSimultaneityGroupType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    CharacteristicSimultaneityGroup (::std::ostream& os,
                                     const ::xsd::qif2::CharacteristicSimultaneityGroupType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    CharacteristicSimultaneityGroup (::std::ostream& os,
                                     const ::xsd::qif2::CharacteristicSimultaneityGroupType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CharacteristicSimultaneityGroup (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::CharacteristicSimultaneityGroupType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    CharacteristicSimultaneityGroup (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::CharacteristicSimultaneityGroupType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    CharacteristicSimultaneityGroup (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::CharacteristicSimultaneityGroupType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CharacteristicSimultaneityGroup (::xercesc::DOMDocument& d,
                                     const ::xsd::qif2::CharacteristicSimultaneityGroupType& x,
                                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CharacteristicSimultaneityGroup (const ::xsd::qif2::CharacteristicSimultaneityGroupType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicGroupsType&);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicGroupStatusesType&);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicDefinitionsType&);

    void
    operator<< (::xercesc::DOMElement&, const ToleranceDefinitionsType&);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicNominalsType&);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicActualsType&);

    // Serialize to std::ostream.
    //

    void
    CharacteristicDefinition (::std::ostream& os,
                              const ::xsd::qif2::CharacteristicDefinitionBaseType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    CharacteristicDefinition (::std::ostream& os,
                              const ::xsd::qif2::CharacteristicDefinitionBaseType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    CharacteristicDefinition (::std::ostream& os,
                              const ::xsd::qif2::CharacteristicDefinitionBaseType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::CharacteristicDefinitionBaseType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    CharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::CharacteristicDefinitionBaseType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    CharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::CharacteristicDefinitionBaseType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CharacteristicDefinition (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::CharacteristicDefinitionBaseType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CharacteristicDefinition (const ::xsd::qif2::CharacteristicDefinitionBaseType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngleBetweenCharacteristicDefinition (::std::ostream& os,
                                          const ::xsd::qif2::AngleBetweenCharacteristicDefinitionType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    AngleBetweenCharacteristicDefinition (::std::ostream& os,
                                          const ::xsd::qif2::AngleBetweenCharacteristicDefinitionType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    AngleBetweenCharacteristicDefinition (::std::ostream& os,
                                          const ::xsd::qif2::AngleBetweenCharacteristicDefinitionType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngleBetweenCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::AngleBetweenCharacteristicDefinitionType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    AngleBetweenCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::AngleBetweenCharacteristicDefinitionType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    AngleBetweenCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::AngleBetweenCharacteristicDefinitionType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngleBetweenCharacteristicDefinition (::xercesc::DOMDocument& d,
                                          const ::xsd::qif2::AngleBetweenCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngleBetweenCharacteristicDefinition (const ::xsd::qif2::AngleBetweenCharacteristicDefinitionType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngleCharacteristicDefinition (::std::ostream& os,
                                   const ::xsd::qif2::AngleCharacteristicDefinitionType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    AngleCharacteristicDefinition (::std::ostream& os,
                                   const ::xsd::qif2::AngleCharacteristicDefinitionType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    AngleCharacteristicDefinition (::std::ostream& os,
                                   const ::xsd::qif2::AngleCharacteristicDefinitionType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngleCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::AngleCharacteristicDefinitionType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    AngleCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::AngleCharacteristicDefinitionType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    AngleCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::AngleCharacteristicDefinitionType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngleCharacteristicDefinition (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::AngleCharacteristicDefinitionType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngleCharacteristicDefinition (const ::xsd::qif2::AngleCharacteristicDefinitionType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngularCoordinateCharacteristicDefinition (::std::ostream& os,
                                               const ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType& x, 
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    void
    AngularCoordinateCharacteristicDefinition (::std::ostream& os,
                                               const ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType& x, 
                                               ::xml_schema::error_handler& eh,
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    void
    AngularCoordinateCharacteristicDefinition (::std::ostream& os,
                                               const ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType& x, 
                                               ::xercesc::DOMErrorHandler& eh,
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngularCoordinateCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                               const ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType& x, 
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    void
    AngularCoordinateCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                               const ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType& x, 
                                               ::xml_schema::error_handler& eh,
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    void
    AngularCoordinateCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                               const ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType& x, 
                                               ::xercesc::DOMErrorHandler& eh,
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngularCoordinateCharacteristicDefinition (::xercesc::DOMDocument& d,
                                               const ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType& x,
                                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngularCoordinateCharacteristicDefinition (const ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType& x, 
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngleFromCharacteristicDefinition (::std::ostream& os,
                                       const ::xsd::qif2::AngleFromCharacteristicDefinitionType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    AngleFromCharacteristicDefinition (::std::ostream& os,
                                       const ::xsd::qif2::AngleFromCharacteristicDefinitionType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    AngleFromCharacteristicDefinition (::std::ostream& os,
                                       const ::xsd::qif2::AngleFromCharacteristicDefinitionType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngleFromCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::AngleFromCharacteristicDefinitionType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    AngleFromCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::AngleFromCharacteristicDefinitionType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    AngleFromCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::AngleFromCharacteristicDefinitionType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngleFromCharacteristicDefinition (::xercesc::DOMDocument& d,
                                       const ::xsd::qif2::AngleFromCharacteristicDefinitionType& x,
                                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngleFromCharacteristicDefinition (const ::xsd::qif2::AngleFromCharacteristicDefinitionType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngularityCharacteristicDefinition (::std::ostream& os,
                                        const ::xsd::qif2::AngularityCharacteristicDefinitionType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    AngularityCharacteristicDefinition (::std::ostream& os,
                                        const ::xsd::qif2::AngularityCharacteristicDefinitionType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    AngularityCharacteristicDefinition (::std::ostream& os,
                                        const ::xsd::qif2::AngularityCharacteristicDefinitionType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngularityCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::AngularityCharacteristicDefinitionType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    AngularityCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::AngularityCharacteristicDefinitionType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    AngularityCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::AngularityCharacteristicDefinitionType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngularityCharacteristicDefinition (::xercesc::DOMDocument& d,
                                        const ::xsd::qif2::AngularityCharacteristicDefinitionType& x,
                                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngularityCharacteristicDefinition (const ::xsd::qif2::AngularityCharacteristicDefinitionType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ChordCharacteristicDefinition (::std::ostream& os,
                                   const ::xsd::qif2::ChordCharacteristicDefinitionType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ChordCharacteristicDefinition (::std::ostream& os,
                                   const ::xsd::qif2::ChordCharacteristicDefinitionType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ChordCharacteristicDefinition (::std::ostream& os,
                                   const ::xsd::qif2::ChordCharacteristicDefinitionType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ChordCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::ChordCharacteristicDefinitionType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ChordCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::ChordCharacteristicDefinitionType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ChordCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::ChordCharacteristicDefinitionType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ChordCharacteristicDefinition (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::ChordCharacteristicDefinitionType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ChordCharacteristicDefinition (const ::xsd::qif2::ChordCharacteristicDefinitionType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CircularityCharacteristicDefinition (::std::ostream& os,
                                         const ::xsd::qif2::CircularityCharacteristicDefinitionType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    CircularityCharacteristicDefinition (::std::ostream& os,
                                         const ::xsd::qif2::CircularityCharacteristicDefinitionType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    CircularityCharacteristicDefinition (::std::ostream& os,
                                         const ::xsd::qif2::CircularityCharacteristicDefinitionType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CircularityCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::CircularityCharacteristicDefinitionType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    CircularityCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::CircularityCharacteristicDefinitionType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    CircularityCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::CircularityCharacteristicDefinitionType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CircularityCharacteristicDefinition (::xercesc::DOMDocument& d,
                                         const ::xsd::qif2::CircularityCharacteristicDefinitionType& x,
                                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CircularityCharacteristicDefinition (const ::xsd::qif2::CircularityCharacteristicDefinitionType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CircularRunoutCharacteristicDefinition (::std::ostream& os,
                                            const ::xsd::qif2::CircularRunoutCharacteristicDefinitionType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    CircularRunoutCharacteristicDefinition (::std::ostream& os,
                                            const ::xsd::qif2::CircularRunoutCharacteristicDefinitionType& x, 
                                            ::xml_schema::error_handler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    CircularRunoutCharacteristicDefinition (::std::ostream& os,
                                            const ::xsd::qif2::CircularRunoutCharacteristicDefinitionType& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CircularRunoutCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::CircularRunoutCharacteristicDefinitionType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    CircularRunoutCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::CircularRunoutCharacteristicDefinitionType& x, 
                                            ::xml_schema::error_handler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    CircularRunoutCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::CircularRunoutCharacteristicDefinitionType& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CircularRunoutCharacteristicDefinition (::xercesc::DOMDocument& d,
                                            const ::xsd::qif2::CircularRunoutCharacteristicDefinitionType& x,
                                            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CircularRunoutCharacteristicDefinition (const ::xsd::qif2::CircularRunoutCharacteristicDefinitionType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ConcentricityCharacteristicDefinition (::std::ostream& os,
                                           const ::xsd::qif2::ConcentricityCharacteristicDefinitionType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    ConcentricityCharacteristicDefinition (::std::ostream& os,
                                           const ::xsd::qif2::ConcentricityCharacteristicDefinitionType& x, 
                                           ::xml_schema::error_handler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    ConcentricityCharacteristicDefinition (::std::ostream& os,
                                           const ::xsd::qif2::ConcentricityCharacteristicDefinitionType& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ConcentricityCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::ConcentricityCharacteristicDefinitionType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    ConcentricityCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::ConcentricityCharacteristicDefinitionType& x, 
                                           ::xml_schema::error_handler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    ConcentricityCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::ConcentricityCharacteristicDefinitionType& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ConcentricityCharacteristicDefinition (::xercesc::DOMDocument& d,
                                           const ::xsd::qif2::ConcentricityCharacteristicDefinitionType& x,
                                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ConcentricityCharacteristicDefinition (const ::xsd::qif2::ConcentricityCharacteristicDefinitionType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CurveLengthCharacteristicDefinition (::std::ostream& os,
                                         const ::xsd::qif2::CurveLengthCharacteristicDefinitionType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    CurveLengthCharacteristicDefinition (::std::ostream& os,
                                         const ::xsd::qif2::CurveLengthCharacteristicDefinitionType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    CurveLengthCharacteristicDefinition (::std::ostream& os,
                                         const ::xsd::qif2::CurveLengthCharacteristicDefinitionType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CurveLengthCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::CurveLengthCharacteristicDefinitionType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    CurveLengthCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::CurveLengthCharacteristicDefinitionType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    CurveLengthCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::CurveLengthCharacteristicDefinitionType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CurveLengthCharacteristicDefinition (::xercesc::DOMDocument& d,
                                         const ::xsd::qif2::CurveLengthCharacteristicDefinitionType& x,
                                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CurveLengthCharacteristicDefinition (const ::xsd::qif2::CurveLengthCharacteristicDefinitionType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CylindricityCharacteristicDefinition (::std::ostream& os,
                                          const ::xsd::qif2::CylindricityCharacteristicDefinitionType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    CylindricityCharacteristicDefinition (::std::ostream& os,
                                          const ::xsd::qif2::CylindricityCharacteristicDefinitionType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    CylindricityCharacteristicDefinition (::std::ostream& os,
                                          const ::xsd::qif2::CylindricityCharacteristicDefinitionType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CylindricityCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::CylindricityCharacteristicDefinitionType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    CylindricityCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::CylindricityCharacteristicDefinitionType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    CylindricityCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::CylindricityCharacteristicDefinitionType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CylindricityCharacteristicDefinition (::xercesc::DOMDocument& d,
                                          const ::xsd::qif2::CylindricityCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CylindricityCharacteristicDefinition (const ::xsd::qif2::CylindricityCharacteristicDefinitionType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    DepthCharacteristicDefinition (::std::ostream& os,
                                   const ::xsd::qif2::DepthCharacteristicDefinitionType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    DepthCharacteristicDefinition (::std::ostream& os,
                                   const ::xsd::qif2::DepthCharacteristicDefinitionType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    DepthCharacteristicDefinition (::std::ostream& os,
                                   const ::xsd::qif2::DepthCharacteristicDefinitionType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    DepthCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::DepthCharacteristicDefinitionType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    DepthCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::DepthCharacteristicDefinitionType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    DepthCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::DepthCharacteristicDefinitionType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    DepthCharacteristicDefinition (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::DepthCharacteristicDefinitionType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DepthCharacteristicDefinition (const ::xsd::qif2::DepthCharacteristicDefinitionType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    DiameterCharacteristicDefinition (::std::ostream& os,
                                      const ::xsd::qif2::DiameterCharacteristicDefinitionType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    DiameterCharacteristicDefinition (::std::ostream& os,
                                      const ::xsd::qif2::DiameterCharacteristicDefinitionType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    DiameterCharacteristicDefinition (::std::ostream& os,
                                      const ::xsd::qif2::DiameterCharacteristicDefinitionType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    DiameterCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::DiameterCharacteristicDefinitionType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    DiameterCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::DiameterCharacteristicDefinitionType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    DiameterCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::DiameterCharacteristicDefinitionType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    DiameterCharacteristicDefinition (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::DiameterCharacteristicDefinitionType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DiameterCharacteristicDefinition (const ::xsd::qif2::DiameterCharacteristicDefinitionType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    DistanceBetweenCharacteristicDefinition (::std::ostream& os,
                                             const ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    DistanceBetweenCharacteristicDefinition (::std::ostream& os,
                                             const ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType& x, 
                                             ::xml_schema::error_handler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    DistanceBetweenCharacteristicDefinition (::std::ostream& os,
                                             const ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType& x, 
                                             ::xercesc::DOMErrorHandler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    DistanceBetweenCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    DistanceBetweenCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType& x, 
                                             ::xml_schema::error_handler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    DistanceBetweenCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType& x, 
                                             ::xercesc::DOMErrorHandler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    DistanceBetweenCharacteristicDefinition (::xercesc::DOMDocument& d,
                                             const ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType& x,
                                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DistanceBetweenCharacteristicDefinition (const ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    DistanceFromCharacteristicDefinition (::std::ostream& os,
                                          const ::xsd::qif2::DistanceFromCharacteristicDefinitionType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    DistanceFromCharacteristicDefinition (::std::ostream& os,
                                          const ::xsd::qif2::DistanceFromCharacteristicDefinitionType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    DistanceFromCharacteristicDefinition (::std::ostream& os,
                                          const ::xsd::qif2::DistanceFromCharacteristicDefinitionType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    DistanceFromCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::DistanceFromCharacteristicDefinitionType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    DistanceFromCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::DistanceFromCharacteristicDefinitionType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    DistanceFromCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::DistanceFromCharacteristicDefinitionType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    DistanceFromCharacteristicDefinition (::xercesc::DOMDocument& d,
                                          const ::xsd::qif2::DistanceFromCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DistanceFromCharacteristicDefinition (const ::xsd::qif2::DistanceFromCharacteristicDefinitionType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FlatnessCharacteristicDefinition (::std::ostream& os,
                                      const ::xsd::qif2::FlatnessCharacteristicDefinitionType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    FlatnessCharacteristicDefinition (::std::ostream& os,
                                      const ::xsd::qif2::FlatnessCharacteristicDefinitionType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    FlatnessCharacteristicDefinition (::std::ostream& os,
                                      const ::xsd::qif2::FlatnessCharacteristicDefinitionType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FlatnessCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::FlatnessCharacteristicDefinitionType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    FlatnessCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::FlatnessCharacteristicDefinitionType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    FlatnessCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::FlatnessCharacteristicDefinitionType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FlatnessCharacteristicDefinition (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::FlatnessCharacteristicDefinitionType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FlatnessCharacteristicDefinition (const ::xsd::qif2::FlatnessCharacteristicDefinitionType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    HeightCharacteristicDefinition (::std::ostream& os,
                                    const ::xsd::qif2::HeightCharacteristicDefinitionType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    HeightCharacteristicDefinition (::std::ostream& os,
                                    const ::xsd::qif2::HeightCharacteristicDefinitionType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    HeightCharacteristicDefinition (::std::ostream& os,
                                    const ::xsd::qif2::HeightCharacteristicDefinitionType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    HeightCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::HeightCharacteristicDefinitionType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    HeightCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::HeightCharacteristicDefinitionType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    HeightCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::HeightCharacteristicDefinitionType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    HeightCharacteristicDefinition (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::HeightCharacteristicDefinitionType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    HeightCharacteristicDefinition (const ::xsd::qif2::HeightCharacteristicDefinitionType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LengthCharacteristicDefinition (::std::ostream& os,
                                    const ::xsd::qif2::LengthCharacteristicDefinitionType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    LengthCharacteristicDefinition (::std::ostream& os,
                                    const ::xsd::qif2::LengthCharacteristicDefinitionType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    LengthCharacteristicDefinition (::std::ostream& os,
                                    const ::xsd::qif2::LengthCharacteristicDefinitionType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LengthCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::LengthCharacteristicDefinitionType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    LengthCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::LengthCharacteristicDefinitionType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    LengthCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::LengthCharacteristicDefinitionType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LengthCharacteristicDefinition (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::LengthCharacteristicDefinitionType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LengthCharacteristicDefinition (const ::xsd::qif2::LengthCharacteristicDefinitionType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LinearCoordinateCharacteristicDefinition (::std::ostream& os,
                                              const ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    LinearCoordinateCharacteristicDefinition (::std::ostream& os,
                                              const ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType& x, 
                                              ::xml_schema::error_handler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    LinearCoordinateCharacteristicDefinition (::std::ostream& os,
                                              const ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType& x, 
                                              ::xercesc::DOMErrorHandler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LinearCoordinateCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                              const ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    LinearCoordinateCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                              const ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType& x, 
                                              ::xml_schema::error_handler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    LinearCoordinateCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                              const ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType& x, 
                                              ::xercesc::DOMErrorHandler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LinearCoordinateCharacteristicDefinition (::xercesc::DOMDocument& d,
                                              const ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType& x,
                                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LinearCoordinateCharacteristicDefinition (const ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LineProfileCharacteristicDefinition (::std::ostream& os,
                                         const ::xsd::qif2::LineProfileCharacteristicDefinitionType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    LineProfileCharacteristicDefinition (::std::ostream& os,
                                         const ::xsd::qif2::LineProfileCharacteristicDefinitionType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    LineProfileCharacteristicDefinition (::std::ostream& os,
                                         const ::xsd::qif2::LineProfileCharacteristicDefinitionType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LineProfileCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::LineProfileCharacteristicDefinitionType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    LineProfileCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::LineProfileCharacteristicDefinitionType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    LineProfileCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::LineProfileCharacteristicDefinitionType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LineProfileCharacteristicDefinition (::xercesc::DOMDocument& d,
                                         const ::xsd::qif2::LineProfileCharacteristicDefinitionType& x,
                                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LineProfileCharacteristicDefinition (const ::xsd::qif2::LineProfileCharacteristicDefinitionType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ParallelismCharacteristicDefinition (::std::ostream& os,
                                         const ::xsd::qif2::ParallelismCharacteristicDefinitionType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    ParallelismCharacteristicDefinition (::std::ostream& os,
                                         const ::xsd::qif2::ParallelismCharacteristicDefinitionType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    ParallelismCharacteristicDefinition (::std::ostream& os,
                                         const ::xsd::qif2::ParallelismCharacteristicDefinitionType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ParallelismCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::ParallelismCharacteristicDefinitionType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    ParallelismCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::ParallelismCharacteristicDefinitionType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    ParallelismCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::ParallelismCharacteristicDefinitionType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ParallelismCharacteristicDefinition (::xercesc::DOMDocument& d,
                                         const ::xsd::qif2::ParallelismCharacteristicDefinitionType& x,
                                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ParallelismCharacteristicDefinition (const ::xsd::qif2::ParallelismCharacteristicDefinitionType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PerpendicularityCharacteristicDefinition (::std::ostream& os,
                                              const ::xsd::qif2::PerpendicularityCharacteristicDefinitionType& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    PerpendicularityCharacteristicDefinition (::std::ostream& os,
                                              const ::xsd::qif2::PerpendicularityCharacteristicDefinitionType& x, 
                                              ::xml_schema::error_handler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    PerpendicularityCharacteristicDefinition (::std::ostream& os,
                                              const ::xsd::qif2::PerpendicularityCharacteristicDefinitionType& x, 
                                              ::xercesc::DOMErrorHandler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PerpendicularityCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                              const ::xsd::qif2::PerpendicularityCharacteristicDefinitionType& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    PerpendicularityCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                              const ::xsd::qif2::PerpendicularityCharacteristicDefinitionType& x, 
                                              ::xml_schema::error_handler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    PerpendicularityCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                              const ::xsd::qif2::PerpendicularityCharacteristicDefinitionType& x, 
                                              ::xercesc::DOMErrorHandler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PerpendicularityCharacteristicDefinition (::xercesc::DOMDocument& d,
                                              const ::xsd::qif2::PerpendicularityCharacteristicDefinitionType& x,
                                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PerpendicularityCharacteristicDefinition (const ::xsd::qif2::PerpendicularityCharacteristicDefinitionType& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PointProfileCharacteristicDefinition (::std::ostream& os,
                                          const ::xsd::qif2::PointProfileCharacteristicDefinitionType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    PointProfileCharacteristicDefinition (::std::ostream& os,
                                          const ::xsd::qif2::PointProfileCharacteristicDefinitionType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    PointProfileCharacteristicDefinition (::std::ostream& os,
                                          const ::xsd::qif2::PointProfileCharacteristicDefinitionType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PointProfileCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::PointProfileCharacteristicDefinitionType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    PointProfileCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::PointProfileCharacteristicDefinitionType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    PointProfileCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::PointProfileCharacteristicDefinitionType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PointProfileCharacteristicDefinition (::xercesc::DOMDocument& d,
                                          const ::xsd::qif2::PointProfileCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PointProfileCharacteristicDefinition (const ::xsd::qif2::PointProfileCharacteristicDefinitionType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PositionCharacteristicDefinition (::std::ostream& os,
                                      const ::xsd::qif2::PositionCharacteristicDefinitionType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    PositionCharacteristicDefinition (::std::ostream& os,
                                      const ::xsd::qif2::PositionCharacteristicDefinitionType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    PositionCharacteristicDefinition (::std::ostream& os,
                                      const ::xsd::qif2::PositionCharacteristicDefinitionType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PositionCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::PositionCharacteristicDefinitionType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    PositionCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::PositionCharacteristicDefinitionType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    PositionCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::PositionCharacteristicDefinitionType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PositionCharacteristicDefinition (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::PositionCharacteristicDefinitionType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PositionCharacteristicDefinition (const ::xsd::qif2::PositionCharacteristicDefinitionType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    RadiusCharacteristicDefinition (::std::ostream& os,
                                    const ::xsd::qif2::RadiusCharacteristicDefinitionType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    RadiusCharacteristicDefinition (::std::ostream& os,
                                    const ::xsd::qif2::RadiusCharacteristicDefinitionType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    RadiusCharacteristicDefinition (::std::ostream& os,
                                    const ::xsd::qif2::RadiusCharacteristicDefinitionType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    RadiusCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::RadiusCharacteristicDefinitionType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    RadiusCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::RadiusCharacteristicDefinitionType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    RadiusCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::RadiusCharacteristicDefinitionType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    RadiusCharacteristicDefinition (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::RadiusCharacteristicDefinitionType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    RadiusCharacteristicDefinition (const ::xsd::qif2::RadiusCharacteristicDefinitionType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SquareCharacteristicDefinition (::std::ostream& os,
                                    const ::xsd::qif2::SquareCharacteristicDefinitionType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    SquareCharacteristicDefinition (::std::ostream& os,
                                    const ::xsd::qif2::SquareCharacteristicDefinitionType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    SquareCharacteristicDefinition (::std::ostream& os,
                                    const ::xsd::qif2::SquareCharacteristicDefinitionType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SquareCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::SquareCharacteristicDefinitionType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    SquareCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::SquareCharacteristicDefinitionType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    SquareCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::SquareCharacteristicDefinitionType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SquareCharacteristicDefinition (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::SquareCharacteristicDefinitionType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SquareCharacteristicDefinition (const ::xsd::qif2::SquareCharacteristicDefinitionType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    StraightnessCharacteristicDefinition (::std::ostream& os,
                                          const ::xsd::qif2::StraightnessCharacteristicDefinitionType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    StraightnessCharacteristicDefinition (::std::ostream& os,
                                          const ::xsd::qif2::StraightnessCharacteristicDefinitionType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    StraightnessCharacteristicDefinition (::std::ostream& os,
                                          const ::xsd::qif2::StraightnessCharacteristicDefinitionType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    StraightnessCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::StraightnessCharacteristicDefinitionType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    StraightnessCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::StraightnessCharacteristicDefinitionType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    StraightnessCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::StraightnessCharacteristicDefinitionType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    StraightnessCharacteristicDefinition (::xercesc::DOMDocument& d,
                                          const ::xsd::qif2::StraightnessCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    StraightnessCharacteristicDefinition (const ::xsd::qif2::StraightnessCharacteristicDefinitionType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SurfaceProfileCharacteristicDefinition (::std::ostream& os,
                                            const ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    SurfaceProfileCharacteristicDefinition (::std::ostream& os,
                                            const ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType& x, 
                                            ::xml_schema::error_handler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    SurfaceProfileCharacteristicDefinition (::std::ostream& os,
                                            const ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SurfaceProfileCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    SurfaceProfileCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType& x, 
                                            ::xml_schema::error_handler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    SurfaceProfileCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SurfaceProfileCharacteristicDefinition (::xercesc::DOMDocument& d,
                                            const ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType& x,
                                            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SurfaceProfileCharacteristicDefinition (const ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SurfaceProfileNonUniformCharacteristicDefinition (::std::ostream& os,
                                                      const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType& x, 
                                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                      const ::std::string& e = "UTF-8",
                                                      ::xml_schema::flags f = 0);

    void
    SurfaceProfileNonUniformCharacteristicDefinition (::std::ostream& os,
                                                      const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType& x, 
                                                      ::xml_schema::error_handler& eh,
                                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                      const ::std::string& e = "UTF-8",
                                                      ::xml_schema::flags f = 0);

    void
    SurfaceProfileNonUniformCharacteristicDefinition (::std::ostream& os,
                                                      const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType& x, 
                                                      ::xercesc::DOMErrorHandler& eh,
                                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                      const ::std::string& e = "UTF-8",
                                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SurfaceProfileNonUniformCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                                      const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType& x, 
                                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                      const ::std::string& e = "UTF-8",
                                                      ::xml_schema::flags f = 0);

    void
    SurfaceProfileNonUniformCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                                      const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType& x, 
                                                      ::xml_schema::error_handler& eh,
                                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                      const ::std::string& e = "UTF-8",
                                                      ::xml_schema::flags f = 0);

    void
    SurfaceProfileNonUniformCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                                      const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType& x, 
                                                      ::xercesc::DOMErrorHandler& eh,
                                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                      const ::std::string& e = "UTF-8",
                                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SurfaceProfileNonUniformCharacteristicDefinition (::xercesc::DOMDocument& d,
                                                      const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType& x,
                                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SurfaceProfileNonUniformCharacteristicDefinition (const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType& x, 
                                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SurfaceTextureCharacteristicDefinition (::std::ostream& os,
                                            const ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    SurfaceTextureCharacteristicDefinition (::std::ostream& os,
                                            const ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType& x, 
                                            ::xml_schema::error_handler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    SurfaceTextureCharacteristicDefinition (::std::ostream& os,
                                            const ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SurfaceTextureCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    SurfaceTextureCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType& x, 
                                            ::xml_schema::error_handler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    SurfaceTextureCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SurfaceTextureCharacteristicDefinition (::xercesc::DOMDocument& d,
                                            const ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType& x,
                                            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SurfaceTextureCharacteristicDefinition (const ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SymmetryCharacteristicDefinition (::std::ostream& os,
                                      const ::xsd::qif2::SymmetryCharacteristicDefinitionType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    SymmetryCharacteristicDefinition (::std::ostream& os,
                                      const ::xsd::qif2::SymmetryCharacteristicDefinitionType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    SymmetryCharacteristicDefinition (::std::ostream& os,
                                      const ::xsd::qif2::SymmetryCharacteristicDefinitionType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SymmetryCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::SymmetryCharacteristicDefinitionType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    SymmetryCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::SymmetryCharacteristicDefinitionType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    SymmetryCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::SymmetryCharacteristicDefinitionType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SymmetryCharacteristicDefinition (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::SymmetryCharacteristicDefinitionType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SymmetryCharacteristicDefinition (const ::xsd::qif2::SymmetryCharacteristicDefinitionType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ThicknessCharacteristicDefinition (::std::ostream& os,
                                       const ::xsd::qif2::ThicknessCharacteristicDefinitionType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    ThicknessCharacteristicDefinition (::std::ostream& os,
                                       const ::xsd::qif2::ThicknessCharacteristicDefinitionType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    ThicknessCharacteristicDefinition (::std::ostream& os,
                                       const ::xsd::qif2::ThicknessCharacteristicDefinitionType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ThicknessCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::ThicknessCharacteristicDefinitionType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    ThicknessCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::ThicknessCharacteristicDefinitionType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    ThicknessCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::ThicknessCharacteristicDefinitionType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ThicknessCharacteristicDefinition (::xercesc::DOMDocument& d,
                                       const ::xsd::qif2::ThicknessCharacteristicDefinitionType& x,
                                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ThicknessCharacteristicDefinition (const ::xsd::qif2::ThicknessCharacteristicDefinitionType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ThreadCharacteristicDefinition (::std::ostream& os,
                                    const ::xsd::qif2::ThreadCharacteristicDefinitionType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    ThreadCharacteristicDefinition (::std::ostream& os,
                                    const ::xsd::qif2::ThreadCharacteristicDefinitionType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    ThreadCharacteristicDefinition (::std::ostream& os,
                                    const ::xsd::qif2::ThreadCharacteristicDefinitionType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ThreadCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::ThreadCharacteristicDefinitionType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    ThreadCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::ThreadCharacteristicDefinitionType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    ThreadCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::ThreadCharacteristicDefinitionType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ThreadCharacteristicDefinition (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::ThreadCharacteristicDefinitionType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ThreadCharacteristicDefinition (const ::xsd::qif2::ThreadCharacteristicDefinitionType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    TotalRunoutCharacteristicDefinition (::std::ostream& os,
                                         const ::xsd::qif2::TotalRunoutCharacteristicDefinitionType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    TotalRunoutCharacteristicDefinition (::std::ostream& os,
                                         const ::xsd::qif2::TotalRunoutCharacteristicDefinitionType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    TotalRunoutCharacteristicDefinition (::std::ostream& os,
                                         const ::xsd::qif2::TotalRunoutCharacteristicDefinitionType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    TotalRunoutCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::TotalRunoutCharacteristicDefinitionType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    TotalRunoutCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::TotalRunoutCharacteristicDefinitionType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    TotalRunoutCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::TotalRunoutCharacteristicDefinitionType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    TotalRunoutCharacteristicDefinition (::xercesc::DOMDocument& d,
                                         const ::xsd::qif2::TotalRunoutCharacteristicDefinitionType& x,
                                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    TotalRunoutCharacteristicDefinition (const ::xsd::qif2::TotalRunoutCharacteristicDefinitionType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedAttributeCharacteristicDefinition (::std::ostream& os,
                                                  const ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType& x, 
                                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                  const ::std::string& e = "UTF-8",
                                                  ::xml_schema::flags f = 0);

    void
    UserDefinedAttributeCharacteristicDefinition (::std::ostream& os,
                                                  const ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType& x, 
                                                  ::xml_schema::error_handler& eh,
                                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                  const ::std::string& e = "UTF-8",
                                                  ::xml_schema::flags f = 0);

    void
    UserDefinedAttributeCharacteristicDefinition (::std::ostream& os,
                                                  const ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType& x, 
                                                  ::xercesc::DOMErrorHandler& eh,
                                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                  const ::std::string& e = "UTF-8",
                                                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedAttributeCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                                  const ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType& x, 
                                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                  const ::std::string& e = "UTF-8",
                                                  ::xml_schema::flags f = 0);

    void
    UserDefinedAttributeCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                                  const ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType& x, 
                                                  ::xml_schema::error_handler& eh,
                                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                  const ::std::string& e = "UTF-8",
                                                  ::xml_schema::flags f = 0);

    void
    UserDefinedAttributeCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                                  const ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType& x, 
                                                  ::xercesc::DOMErrorHandler& eh,
                                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                  const ::std::string& e = "UTF-8",
                                                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedAttributeCharacteristicDefinition (::xercesc::DOMDocument& d,
                                                  const ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType& x,
                                                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedAttributeCharacteristicDefinition (const ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType& x, 
                                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedLinearCharacteristicDefinition (::std::ostream& os,
                                               const ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType& x, 
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    void
    UserDefinedLinearCharacteristicDefinition (::std::ostream& os,
                                               const ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType& x, 
                                               ::xml_schema::error_handler& eh,
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    void
    UserDefinedLinearCharacteristicDefinition (::std::ostream& os,
                                               const ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType& x, 
                                               ::xercesc::DOMErrorHandler& eh,
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedLinearCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                               const ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType& x, 
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    void
    UserDefinedLinearCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                               const ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType& x, 
                                               ::xml_schema::error_handler& eh,
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    void
    UserDefinedLinearCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                               const ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType& x, 
                                               ::xercesc::DOMErrorHandler& eh,
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedLinearCharacteristicDefinition (::xercesc::DOMDocument& d,
                                               const ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType& x,
                                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedLinearCharacteristicDefinition (const ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType& x, 
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedAngularCharacteristicDefinition (::std::ostream& os,
                                                const ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType& x, 
                                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                const ::std::string& e = "UTF-8",
                                                ::xml_schema::flags f = 0);

    void
    UserDefinedAngularCharacteristicDefinition (::std::ostream& os,
                                                const ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType& x, 
                                                ::xml_schema::error_handler& eh,
                                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                const ::std::string& e = "UTF-8",
                                                ::xml_schema::flags f = 0);

    void
    UserDefinedAngularCharacteristicDefinition (::std::ostream& os,
                                                const ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType& x, 
                                                ::xercesc::DOMErrorHandler& eh,
                                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                const ::std::string& e = "UTF-8",
                                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedAngularCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                                const ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType& x, 
                                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                const ::std::string& e = "UTF-8",
                                                ::xml_schema::flags f = 0);

    void
    UserDefinedAngularCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                                const ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType& x, 
                                                ::xml_schema::error_handler& eh,
                                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                const ::std::string& e = "UTF-8",
                                                ::xml_schema::flags f = 0);

    void
    UserDefinedAngularCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                                const ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType& x, 
                                                ::xercesc::DOMErrorHandler& eh,
                                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                const ::std::string& e = "UTF-8",
                                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedAngularCharacteristicDefinition (::xercesc::DOMDocument& d,
                                                const ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType& x,
                                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedAngularCharacteristicDefinition (const ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType& x, 
                                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedTemperatureCharacteristicDefinition (::std::ostream& os,
                                                    const ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType& x, 
                                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                    const ::std::string& e = "UTF-8",
                                                    ::xml_schema::flags f = 0);

    void
    UserDefinedTemperatureCharacteristicDefinition (::std::ostream& os,
                                                    const ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType& x, 
                                                    ::xml_schema::error_handler& eh,
                                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                    const ::std::string& e = "UTF-8",
                                                    ::xml_schema::flags f = 0);

    void
    UserDefinedTemperatureCharacteristicDefinition (::std::ostream& os,
                                                    const ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType& x, 
                                                    ::xercesc::DOMErrorHandler& eh,
                                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                    const ::std::string& e = "UTF-8",
                                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedTemperatureCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                                    const ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType& x, 
                                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                    const ::std::string& e = "UTF-8",
                                                    ::xml_schema::flags f = 0);

    void
    UserDefinedTemperatureCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                                    const ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType& x, 
                                                    ::xml_schema::error_handler& eh,
                                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                    const ::std::string& e = "UTF-8",
                                                    ::xml_schema::flags f = 0);

    void
    UserDefinedTemperatureCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                                    const ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType& x, 
                                                    ::xercesc::DOMErrorHandler& eh,
                                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                    const ::std::string& e = "UTF-8",
                                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedTemperatureCharacteristicDefinition (::xercesc::DOMDocument& d,
                                                    const ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType& x,
                                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedTemperatureCharacteristicDefinition (const ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType& x, 
                                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedAreaCharacteristicDefinition (::std::ostream& os,
                                             const ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedAreaCharacteristicDefinition (::std::ostream& os,
                                             const ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType& x, 
                                             ::xml_schema::error_handler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedAreaCharacteristicDefinition (::std::ostream& os,
                                             const ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType& x, 
                                             ::xercesc::DOMErrorHandler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedAreaCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedAreaCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType& x, 
                                             ::xml_schema::error_handler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedAreaCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType& x, 
                                             ::xercesc::DOMErrorHandler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedAreaCharacteristicDefinition (::xercesc::DOMDocument& d,
                                             const ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType& x,
                                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedAreaCharacteristicDefinition (const ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedForceCharacteristicDefinition (::std::ostream& os,
                                              const ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    UserDefinedForceCharacteristicDefinition (::std::ostream& os,
                                              const ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType& x, 
                                              ::xml_schema::error_handler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    UserDefinedForceCharacteristicDefinition (::std::ostream& os,
                                              const ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType& x, 
                                              ::xercesc::DOMErrorHandler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedForceCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                              const ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    UserDefinedForceCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                              const ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType& x, 
                                              ::xml_schema::error_handler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    UserDefinedForceCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                              const ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType& x, 
                                              ::xercesc::DOMErrorHandler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedForceCharacteristicDefinition (::xercesc::DOMDocument& d,
                                              const ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType& x,
                                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedForceCharacteristicDefinition (const ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedMassCharacteristicDefinition (::std::ostream& os,
                                             const ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedMassCharacteristicDefinition (::std::ostream& os,
                                             const ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType& x, 
                                             ::xml_schema::error_handler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedMassCharacteristicDefinition (::std::ostream& os,
                                             const ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType& x, 
                                             ::xercesc::DOMErrorHandler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedMassCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedMassCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType& x, 
                                             ::xml_schema::error_handler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedMassCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType& x, 
                                             ::xercesc::DOMErrorHandler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedMassCharacteristicDefinition (::xercesc::DOMDocument& d,
                                             const ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType& x,
                                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedMassCharacteristicDefinition (const ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedPressureCharacteristicDefinition (::std::ostream& os,
                                                 const ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType& x, 
                                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::xml_schema::flags f = 0);

    void
    UserDefinedPressureCharacteristicDefinition (::std::ostream& os,
                                                 const ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType& x, 
                                                 ::xml_schema::error_handler& eh,
                                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::xml_schema::flags f = 0);

    void
    UserDefinedPressureCharacteristicDefinition (::std::ostream& os,
                                                 const ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType& x, 
                                                 ::xercesc::DOMErrorHandler& eh,
                                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedPressureCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                                 const ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType& x, 
                                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::xml_schema::flags f = 0);

    void
    UserDefinedPressureCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                                 const ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType& x, 
                                                 ::xml_schema::error_handler& eh,
                                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::xml_schema::flags f = 0);

    void
    UserDefinedPressureCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                                 const ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType& x, 
                                                 ::xercesc::DOMErrorHandler& eh,
                                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedPressureCharacteristicDefinition (::xercesc::DOMDocument& d,
                                                 const ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType& x,
                                                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedPressureCharacteristicDefinition (const ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType& x, 
                                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedSpeedCharacteristicDefinition (::std::ostream& os,
                                              const ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    UserDefinedSpeedCharacteristicDefinition (::std::ostream& os,
                                              const ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType& x, 
                                              ::xml_schema::error_handler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    UserDefinedSpeedCharacteristicDefinition (::std::ostream& os,
                                              const ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType& x, 
                                              ::xercesc::DOMErrorHandler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedSpeedCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                              const ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    UserDefinedSpeedCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                              const ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType& x, 
                                              ::xml_schema::error_handler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    UserDefinedSpeedCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                              const ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType& x, 
                                              ::xercesc::DOMErrorHandler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedSpeedCharacteristicDefinition (::xercesc::DOMDocument& d,
                                              const ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType& x,
                                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedSpeedCharacteristicDefinition (const ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedTimeCharacteristicDefinition (::std::ostream& os,
                                             const ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedTimeCharacteristicDefinition (::std::ostream& os,
                                             const ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType& x, 
                                             ::xml_schema::error_handler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedTimeCharacteristicDefinition (::std::ostream& os,
                                             const ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType& x, 
                                             ::xercesc::DOMErrorHandler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedTimeCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedTimeCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType& x, 
                                             ::xml_schema::error_handler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedTimeCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType& x, 
                                             ::xercesc::DOMErrorHandler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedTimeCharacteristicDefinition (::xercesc::DOMDocument& d,
                                             const ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType& x,
                                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedTimeCharacteristicDefinition (const ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedUnitCharacteristicDefinition (::std::ostream& os,
                                             const ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedUnitCharacteristicDefinition (::std::ostream& os,
                                             const ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType& x, 
                                             ::xml_schema::error_handler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedUnitCharacteristicDefinition (::std::ostream& os,
                                             const ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType& x, 
                                             ::xercesc::DOMErrorHandler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedUnitCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedUnitCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType& x, 
                                             ::xml_schema::error_handler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedUnitCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType& x, 
                                             ::xercesc::DOMErrorHandler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedUnitCharacteristicDefinition (::xercesc::DOMDocument& d,
                                             const ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType& x,
                                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedUnitCharacteristicDefinition (const ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    WidthCharacteristicDefinition (::std::ostream& os,
                                   const ::xsd::qif2::WidthCharacteristicDefinitionType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    WidthCharacteristicDefinition (::std::ostream& os,
                                   const ::xsd::qif2::WidthCharacteristicDefinitionType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    WidthCharacteristicDefinition (::std::ostream& os,
                                   const ::xsd::qif2::WidthCharacteristicDefinitionType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    WidthCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::WidthCharacteristicDefinitionType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    WidthCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::WidthCharacteristicDefinitionType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    WidthCharacteristicDefinition (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::WidthCharacteristicDefinitionType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    WidthCharacteristicDefinition (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::WidthCharacteristicDefinitionType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    WidthCharacteristicDefinition (const ::xsd::qif2::WidthCharacteristicDefinitionType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CharacteristicNominal (::std::ostream& os,
                           const ::xsd::qif2::CharacteristicNominalBaseType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    CharacteristicNominal (::std::ostream& os,
                           const ::xsd::qif2::CharacteristicNominalBaseType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    CharacteristicNominal (::std::ostream& os,
                           const ::xsd::qif2::CharacteristicNominalBaseType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::CharacteristicNominalBaseType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    CharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::CharacteristicNominalBaseType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    CharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::CharacteristicNominalBaseType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CharacteristicNominal (::xercesc::DOMDocument& d,
                           const ::xsd::qif2::CharacteristicNominalBaseType& x,
                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CharacteristicNominal (const ::xsd::qif2::CharacteristicNominalBaseType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngleBetweenCharacteristicNominal (::std::ostream& os,
                                       const ::xsd::qif2::AngleBetweenCharacteristicNominalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    AngleBetweenCharacteristicNominal (::std::ostream& os,
                                       const ::xsd::qif2::AngleBetweenCharacteristicNominalType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    AngleBetweenCharacteristicNominal (::std::ostream& os,
                                       const ::xsd::qif2::AngleBetweenCharacteristicNominalType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngleBetweenCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::AngleBetweenCharacteristicNominalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    AngleBetweenCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::AngleBetweenCharacteristicNominalType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    AngleBetweenCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::AngleBetweenCharacteristicNominalType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngleBetweenCharacteristicNominal (::xercesc::DOMDocument& d,
                                       const ::xsd::qif2::AngleBetweenCharacteristicNominalType& x,
                                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngleBetweenCharacteristicNominal (const ::xsd::qif2::AngleBetweenCharacteristicNominalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngleCharacteristicNominal (::std::ostream& os,
                                const ::xsd::qif2::AngleCharacteristicNominalType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    AngleCharacteristicNominal (::std::ostream& os,
                                const ::xsd::qif2::AngleCharacteristicNominalType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    AngleCharacteristicNominal (::std::ostream& os,
                                const ::xsd::qif2::AngleCharacteristicNominalType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngleCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::AngleCharacteristicNominalType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    AngleCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::AngleCharacteristicNominalType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    AngleCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::AngleCharacteristicNominalType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngleCharacteristicNominal (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::AngleCharacteristicNominalType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngleCharacteristicNominal (const ::xsd::qif2::AngleCharacteristicNominalType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngularCoordinateCharacteristicNominal (::std::ostream& os,
                                            const ::xsd::qif2::AngularCoordinateCharacteristicNominalType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    AngularCoordinateCharacteristicNominal (::std::ostream& os,
                                            const ::xsd::qif2::AngularCoordinateCharacteristicNominalType& x, 
                                            ::xml_schema::error_handler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    AngularCoordinateCharacteristicNominal (::std::ostream& os,
                                            const ::xsd::qif2::AngularCoordinateCharacteristicNominalType& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngularCoordinateCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::AngularCoordinateCharacteristicNominalType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    AngularCoordinateCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::AngularCoordinateCharacteristicNominalType& x, 
                                            ::xml_schema::error_handler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    AngularCoordinateCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::AngularCoordinateCharacteristicNominalType& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngularCoordinateCharacteristicNominal (::xercesc::DOMDocument& d,
                                            const ::xsd::qif2::AngularCoordinateCharacteristicNominalType& x,
                                            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngularCoordinateCharacteristicNominal (const ::xsd::qif2::AngularCoordinateCharacteristicNominalType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngleFromCharacteristicNominal (::std::ostream& os,
                                    const ::xsd::qif2::AngleFromCharacteristicNominalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    AngleFromCharacteristicNominal (::std::ostream& os,
                                    const ::xsd::qif2::AngleFromCharacteristicNominalType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    AngleFromCharacteristicNominal (::std::ostream& os,
                                    const ::xsd::qif2::AngleFromCharacteristicNominalType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngleFromCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::AngleFromCharacteristicNominalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    AngleFromCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::AngleFromCharacteristicNominalType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    AngleFromCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::AngleFromCharacteristicNominalType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngleFromCharacteristicNominal (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::AngleFromCharacteristicNominalType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngleFromCharacteristicNominal (const ::xsd::qif2::AngleFromCharacteristicNominalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngularityCharacteristicNominal (::std::ostream& os,
                                     const ::xsd::qif2::AngularityCharacteristicNominalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    AngularityCharacteristicNominal (::std::ostream& os,
                                     const ::xsd::qif2::AngularityCharacteristicNominalType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    AngularityCharacteristicNominal (::std::ostream& os,
                                     const ::xsd::qif2::AngularityCharacteristicNominalType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngularityCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::AngularityCharacteristicNominalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    AngularityCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::AngularityCharacteristicNominalType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    AngularityCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::AngularityCharacteristicNominalType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngularityCharacteristicNominal (::xercesc::DOMDocument& d,
                                     const ::xsd::qif2::AngularityCharacteristicNominalType& x,
                                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngularityCharacteristicNominal (const ::xsd::qif2::AngularityCharacteristicNominalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ChordCharacteristicNominal (::std::ostream& os,
                                const ::xsd::qif2::ChordCharacteristicNominalType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ChordCharacteristicNominal (::std::ostream& os,
                                const ::xsd::qif2::ChordCharacteristicNominalType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ChordCharacteristicNominal (::std::ostream& os,
                                const ::xsd::qif2::ChordCharacteristicNominalType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ChordCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::ChordCharacteristicNominalType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ChordCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::ChordCharacteristicNominalType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ChordCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::ChordCharacteristicNominalType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ChordCharacteristicNominal (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::ChordCharacteristicNominalType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ChordCharacteristicNominal (const ::xsd::qif2::ChordCharacteristicNominalType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CircularityCharacteristicNominal (::std::ostream& os,
                                      const ::xsd::qif2::CircularityCharacteristicNominalType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    CircularityCharacteristicNominal (::std::ostream& os,
                                      const ::xsd::qif2::CircularityCharacteristicNominalType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    CircularityCharacteristicNominal (::std::ostream& os,
                                      const ::xsd::qif2::CircularityCharacteristicNominalType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CircularityCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::CircularityCharacteristicNominalType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    CircularityCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::CircularityCharacteristicNominalType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    CircularityCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::CircularityCharacteristicNominalType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CircularityCharacteristicNominal (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::CircularityCharacteristicNominalType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CircularityCharacteristicNominal (const ::xsd::qif2::CircularityCharacteristicNominalType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CircularRunoutCharacteristicNominal (::std::ostream& os,
                                         const ::xsd::qif2::CircularRunoutCharacteristicNominalType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    CircularRunoutCharacteristicNominal (::std::ostream& os,
                                         const ::xsd::qif2::CircularRunoutCharacteristicNominalType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    CircularRunoutCharacteristicNominal (::std::ostream& os,
                                         const ::xsd::qif2::CircularRunoutCharacteristicNominalType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CircularRunoutCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::CircularRunoutCharacteristicNominalType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    CircularRunoutCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::CircularRunoutCharacteristicNominalType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    CircularRunoutCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::CircularRunoutCharacteristicNominalType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CircularRunoutCharacteristicNominal (::xercesc::DOMDocument& d,
                                         const ::xsd::qif2::CircularRunoutCharacteristicNominalType& x,
                                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CircularRunoutCharacteristicNominal (const ::xsd::qif2::CircularRunoutCharacteristicNominalType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ConcentricityCharacteristicNominal (::std::ostream& os,
                                        const ::xsd::qif2::ConcentricityCharacteristicNominalType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    ConcentricityCharacteristicNominal (::std::ostream& os,
                                        const ::xsd::qif2::ConcentricityCharacteristicNominalType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    ConcentricityCharacteristicNominal (::std::ostream& os,
                                        const ::xsd::qif2::ConcentricityCharacteristicNominalType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ConcentricityCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::ConcentricityCharacteristicNominalType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    ConcentricityCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::ConcentricityCharacteristicNominalType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    ConcentricityCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::ConcentricityCharacteristicNominalType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ConcentricityCharacteristicNominal (::xercesc::DOMDocument& d,
                                        const ::xsd::qif2::ConcentricityCharacteristicNominalType& x,
                                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ConcentricityCharacteristicNominal (const ::xsd::qif2::ConcentricityCharacteristicNominalType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CurveLengthCharacteristicNominal (::std::ostream& os,
                                      const ::xsd::qif2::CurveLengthCharacteristicNominalType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    CurveLengthCharacteristicNominal (::std::ostream& os,
                                      const ::xsd::qif2::CurveLengthCharacteristicNominalType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    CurveLengthCharacteristicNominal (::std::ostream& os,
                                      const ::xsd::qif2::CurveLengthCharacteristicNominalType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CurveLengthCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::CurveLengthCharacteristicNominalType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    CurveLengthCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::CurveLengthCharacteristicNominalType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    CurveLengthCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::CurveLengthCharacteristicNominalType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CurveLengthCharacteristicNominal (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::CurveLengthCharacteristicNominalType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CurveLengthCharacteristicNominal (const ::xsd::qif2::CurveLengthCharacteristicNominalType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CylindricityCharacteristicNominal (::std::ostream& os,
                                       const ::xsd::qif2::CylindricityCharacteristicNominalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    CylindricityCharacteristicNominal (::std::ostream& os,
                                       const ::xsd::qif2::CylindricityCharacteristicNominalType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    CylindricityCharacteristicNominal (::std::ostream& os,
                                       const ::xsd::qif2::CylindricityCharacteristicNominalType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CylindricityCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::CylindricityCharacteristicNominalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    CylindricityCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::CylindricityCharacteristicNominalType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    CylindricityCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::CylindricityCharacteristicNominalType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CylindricityCharacteristicNominal (::xercesc::DOMDocument& d,
                                       const ::xsd::qif2::CylindricityCharacteristicNominalType& x,
                                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CylindricityCharacteristicNominal (const ::xsd::qif2::CylindricityCharacteristicNominalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    DepthCharacteristicNominal (::std::ostream& os,
                                const ::xsd::qif2::DepthCharacteristicNominalType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    DepthCharacteristicNominal (::std::ostream& os,
                                const ::xsd::qif2::DepthCharacteristicNominalType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    DepthCharacteristicNominal (::std::ostream& os,
                                const ::xsd::qif2::DepthCharacteristicNominalType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    DepthCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::DepthCharacteristicNominalType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    DepthCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::DepthCharacteristicNominalType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    DepthCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::DepthCharacteristicNominalType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    DepthCharacteristicNominal (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::DepthCharacteristicNominalType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DepthCharacteristicNominal (const ::xsd::qif2::DepthCharacteristicNominalType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    DiameterCharacteristicNominal (::std::ostream& os,
                                   const ::xsd::qif2::DiameterCharacteristicNominalType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    DiameterCharacteristicNominal (::std::ostream& os,
                                   const ::xsd::qif2::DiameterCharacteristicNominalType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    DiameterCharacteristicNominal (::std::ostream& os,
                                   const ::xsd::qif2::DiameterCharacteristicNominalType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    DiameterCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::DiameterCharacteristicNominalType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    DiameterCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::DiameterCharacteristicNominalType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    DiameterCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::DiameterCharacteristicNominalType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    DiameterCharacteristicNominal (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::DiameterCharacteristicNominalType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DiameterCharacteristicNominal (const ::xsd::qif2::DiameterCharacteristicNominalType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    DistanceBetweenCharacteristicNominal (::std::ostream& os,
                                          const ::xsd::qif2::DistanceBetweenCharacteristicNominalType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    DistanceBetweenCharacteristicNominal (::std::ostream& os,
                                          const ::xsd::qif2::DistanceBetweenCharacteristicNominalType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    DistanceBetweenCharacteristicNominal (::std::ostream& os,
                                          const ::xsd::qif2::DistanceBetweenCharacteristicNominalType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    DistanceBetweenCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::DistanceBetweenCharacteristicNominalType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    DistanceBetweenCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::DistanceBetweenCharacteristicNominalType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    DistanceBetweenCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::DistanceBetweenCharacteristicNominalType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    DistanceBetweenCharacteristicNominal (::xercesc::DOMDocument& d,
                                          const ::xsd::qif2::DistanceBetweenCharacteristicNominalType& x,
                                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DistanceBetweenCharacteristicNominal (const ::xsd::qif2::DistanceBetweenCharacteristicNominalType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    DistanceFromCharacteristicNominal (::std::ostream& os,
                                       const ::xsd::qif2::DistanceFromCharacteristicNominalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    DistanceFromCharacteristicNominal (::std::ostream& os,
                                       const ::xsd::qif2::DistanceFromCharacteristicNominalType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    DistanceFromCharacteristicNominal (::std::ostream& os,
                                       const ::xsd::qif2::DistanceFromCharacteristicNominalType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    DistanceFromCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::DistanceFromCharacteristicNominalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    DistanceFromCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::DistanceFromCharacteristicNominalType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    DistanceFromCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::DistanceFromCharacteristicNominalType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    DistanceFromCharacteristicNominal (::xercesc::DOMDocument& d,
                                       const ::xsd::qif2::DistanceFromCharacteristicNominalType& x,
                                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DistanceFromCharacteristicNominal (const ::xsd::qif2::DistanceFromCharacteristicNominalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FlatnessCharacteristicNominal (::std::ostream& os,
                                   const ::xsd::qif2::FlatnessCharacteristicNominalType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    FlatnessCharacteristicNominal (::std::ostream& os,
                                   const ::xsd::qif2::FlatnessCharacteristicNominalType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    FlatnessCharacteristicNominal (::std::ostream& os,
                                   const ::xsd::qif2::FlatnessCharacteristicNominalType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FlatnessCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::FlatnessCharacteristicNominalType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    FlatnessCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::FlatnessCharacteristicNominalType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    FlatnessCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::FlatnessCharacteristicNominalType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FlatnessCharacteristicNominal (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::FlatnessCharacteristicNominalType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FlatnessCharacteristicNominal (const ::xsd::qif2::FlatnessCharacteristicNominalType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    HeightCharacteristicNominal (::std::ostream& os,
                                 const ::xsd::qif2::HeightCharacteristicNominalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    HeightCharacteristicNominal (::std::ostream& os,
                                 const ::xsd::qif2::HeightCharacteristicNominalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    HeightCharacteristicNominal (::std::ostream& os,
                                 const ::xsd::qif2::HeightCharacteristicNominalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    HeightCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::HeightCharacteristicNominalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    HeightCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::HeightCharacteristicNominalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    HeightCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::HeightCharacteristicNominalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    HeightCharacteristicNominal (::xercesc::DOMDocument& d,
                                 const ::xsd::qif2::HeightCharacteristicNominalType& x,
                                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    HeightCharacteristicNominal (const ::xsd::qif2::HeightCharacteristicNominalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LengthCharacteristicNominal (::std::ostream& os,
                                 const ::xsd::qif2::LengthCharacteristicNominalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    LengthCharacteristicNominal (::std::ostream& os,
                                 const ::xsd::qif2::LengthCharacteristicNominalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    LengthCharacteristicNominal (::std::ostream& os,
                                 const ::xsd::qif2::LengthCharacteristicNominalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LengthCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::LengthCharacteristicNominalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    LengthCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::LengthCharacteristicNominalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    LengthCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::LengthCharacteristicNominalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LengthCharacteristicNominal (::xercesc::DOMDocument& d,
                                 const ::xsd::qif2::LengthCharacteristicNominalType& x,
                                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LengthCharacteristicNominal (const ::xsd::qif2::LengthCharacteristicNominalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LinearCoordinateCharacteristicNominal (::std::ostream& os,
                                           const ::xsd::qif2::LinearCoordinateCharacteristicNominalType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    LinearCoordinateCharacteristicNominal (::std::ostream& os,
                                           const ::xsd::qif2::LinearCoordinateCharacteristicNominalType& x, 
                                           ::xml_schema::error_handler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    LinearCoordinateCharacteristicNominal (::std::ostream& os,
                                           const ::xsd::qif2::LinearCoordinateCharacteristicNominalType& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LinearCoordinateCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::LinearCoordinateCharacteristicNominalType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    LinearCoordinateCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::LinearCoordinateCharacteristicNominalType& x, 
                                           ::xml_schema::error_handler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    LinearCoordinateCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::LinearCoordinateCharacteristicNominalType& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LinearCoordinateCharacteristicNominal (::xercesc::DOMDocument& d,
                                           const ::xsd::qif2::LinearCoordinateCharacteristicNominalType& x,
                                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LinearCoordinateCharacteristicNominal (const ::xsd::qif2::LinearCoordinateCharacteristicNominalType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LineProfileCharacteristicNominal (::std::ostream& os,
                                      const ::xsd::qif2::LineProfileCharacteristicNominalType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    LineProfileCharacteristicNominal (::std::ostream& os,
                                      const ::xsd::qif2::LineProfileCharacteristicNominalType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    LineProfileCharacteristicNominal (::std::ostream& os,
                                      const ::xsd::qif2::LineProfileCharacteristicNominalType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LineProfileCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::LineProfileCharacteristicNominalType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    LineProfileCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::LineProfileCharacteristicNominalType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    LineProfileCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::LineProfileCharacteristicNominalType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LineProfileCharacteristicNominal (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::LineProfileCharacteristicNominalType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LineProfileCharacteristicNominal (const ::xsd::qif2::LineProfileCharacteristicNominalType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ParallelismCharacteristicNominal (::std::ostream& os,
                                      const ::xsd::qif2::ParallelismCharacteristicNominalType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    ParallelismCharacteristicNominal (::std::ostream& os,
                                      const ::xsd::qif2::ParallelismCharacteristicNominalType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    ParallelismCharacteristicNominal (::std::ostream& os,
                                      const ::xsd::qif2::ParallelismCharacteristicNominalType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ParallelismCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::ParallelismCharacteristicNominalType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    ParallelismCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::ParallelismCharacteristicNominalType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    ParallelismCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::ParallelismCharacteristicNominalType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ParallelismCharacteristicNominal (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::ParallelismCharacteristicNominalType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ParallelismCharacteristicNominal (const ::xsd::qif2::ParallelismCharacteristicNominalType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PerpendicularityCharacteristicNominal (::std::ostream& os,
                                           const ::xsd::qif2::PerpendicularityCharacteristicNominalType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    PerpendicularityCharacteristicNominal (::std::ostream& os,
                                           const ::xsd::qif2::PerpendicularityCharacteristicNominalType& x, 
                                           ::xml_schema::error_handler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    PerpendicularityCharacteristicNominal (::std::ostream& os,
                                           const ::xsd::qif2::PerpendicularityCharacteristicNominalType& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PerpendicularityCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::PerpendicularityCharacteristicNominalType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    PerpendicularityCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::PerpendicularityCharacteristicNominalType& x, 
                                           ::xml_schema::error_handler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    PerpendicularityCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::PerpendicularityCharacteristicNominalType& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PerpendicularityCharacteristicNominal (::xercesc::DOMDocument& d,
                                           const ::xsd::qif2::PerpendicularityCharacteristicNominalType& x,
                                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PerpendicularityCharacteristicNominal (const ::xsd::qif2::PerpendicularityCharacteristicNominalType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PointProfileCharacteristicNominal (::std::ostream& os,
                                       const ::xsd::qif2::PointProfileCharacteristicNominalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    PointProfileCharacteristicNominal (::std::ostream& os,
                                       const ::xsd::qif2::PointProfileCharacteristicNominalType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    PointProfileCharacteristicNominal (::std::ostream& os,
                                       const ::xsd::qif2::PointProfileCharacteristicNominalType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PointProfileCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::PointProfileCharacteristicNominalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    PointProfileCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::PointProfileCharacteristicNominalType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    PointProfileCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::PointProfileCharacteristicNominalType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PointProfileCharacteristicNominal (::xercesc::DOMDocument& d,
                                       const ::xsd::qif2::PointProfileCharacteristicNominalType& x,
                                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PointProfileCharacteristicNominal (const ::xsd::qif2::PointProfileCharacteristicNominalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PositionCharacteristicNominal (::std::ostream& os,
                                   const ::xsd::qif2::PositionCharacteristicNominalType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    PositionCharacteristicNominal (::std::ostream& os,
                                   const ::xsd::qif2::PositionCharacteristicNominalType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    PositionCharacteristicNominal (::std::ostream& os,
                                   const ::xsd::qif2::PositionCharacteristicNominalType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PositionCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::PositionCharacteristicNominalType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    PositionCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::PositionCharacteristicNominalType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    PositionCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::PositionCharacteristicNominalType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PositionCharacteristicNominal (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::PositionCharacteristicNominalType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PositionCharacteristicNominal (const ::xsd::qif2::PositionCharacteristicNominalType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    RadiusCharacteristicNominal (::std::ostream& os,
                                 const ::xsd::qif2::RadiusCharacteristicNominalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    RadiusCharacteristicNominal (::std::ostream& os,
                                 const ::xsd::qif2::RadiusCharacteristicNominalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    RadiusCharacteristicNominal (::std::ostream& os,
                                 const ::xsd::qif2::RadiusCharacteristicNominalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    RadiusCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::RadiusCharacteristicNominalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    RadiusCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::RadiusCharacteristicNominalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    RadiusCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::RadiusCharacteristicNominalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    RadiusCharacteristicNominal (::xercesc::DOMDocument& d,
                                 const ::xsd::qif2::RadiusCharacteristicNominalType& x,
                                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    RadiusCharacteristicNominal (const ::xsd::qif2::RadiusCharacteristicNominalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SquareCharacteristicNominal (::std::ostream& os,
                                 const ::xsd::qif2::SquareCharacteristicNominalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    SquareCharacteristicNominal (::std::ostream& os,
                                 const ::xsd::qif2::SquareCharacteristicNominalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    SquareCharacteristicNominal (::std::ostream& os,
                                 const ::xsd::qif2::SquareCharacteristicNominalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SquareCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::SquareCharacteristicNominalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    SquareCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::SquareCharacteristicNominalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    SquareCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::SquareCharacteristicNominalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SquareCharacteristicNominal (::xercesc::DOMDocument& d,
                                 const ::xsd::qif2::SquareCharacteristicNominalType& x,
                                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SquareCharacteristicNominal (const ::xsd::qif2::SquareCharacteristicNominalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    StraightnessCharacteristicNominal (::std::ostream& os,
                                       const ::xsd::qif2::StraightnessCharacteristicNominalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    StraightnessCharacteristicNominal (::std::ostream& os,
                                       const ::xsd::qif2::StraightnessCharacteristicNominalType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    StraightnessCharacteristicNominal (::std::ostream& os,
                                       const ::xsd::qif2::StraightnessCharacteristicNominalType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    StraightnessCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::StraightnessCharacteristicNominalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    StraightnessCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::StraightnessCharacteristicNominalType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    StraightnessCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::StraightnessCharacteristicNominalType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    StraightnessCharacteristicNominal (::xercesc::DOMDocument& d,
                                       const ::xsd::qif2::StraightnessCharacteristicNominalType& x,
                                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    StraightnessCharacteristicNominal (const ::xsd::qif2::StraightnessCharacteristicNominalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SurfaceProfileCharacteristicNominal (::std::ostream& os,
                                         const ::xsd::qif2::SurfaceProfileCharacteristicNominalType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    SurfaceProfileCharacteristicNominal (::std::ostream& os,
                                         const ::xsd::qif2::SurfaceProfileCharacteristicNominalType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    SurfaceProfileCharacteristicNominal (::std::ostream& os,
                                         const ::xsd::qif2::SurfaceProfileCharacteristicNominalType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SurfaceProfileCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::SurfaceProfileCharacteristicNominalType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    SurfaceProfileCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::SurfaceProfileCharacteristicNominalType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    SurfaceProfileCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::SurfaceProfileCharacteristicNominalType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SurfaceProfileCharacteristicNominal (::xercesc::DOMDocument& d,
                                         const ::xsd::qif2::SurfaceProfileCharacteristicNominalType& x,
                                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SurfaceProfileCharacteristicNominal (const ::xsd::qif2::SurfaceProfileCharacteristicNominalType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SurfaceProfileNonUniformCharacteristicNominal (::std::ostream& os,
                                                   const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType& x, 
                                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                   const ::std::string& e = "UTF-8",
                                                   ::xml_schema::flags f = 0);

    void
    SurfaceProfileNonUniformCharacteristicNominal (::std::ostream& os,
                                                   const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType& x, 
                                                   ::xml_schema::error_handler& eh,
                                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                   const ::std::string& e = "UTF-8",
                                                   ::xml_schema::flags f = 0);

    void
    SurfaceProfileNonUniformCharacteristicNominal (::std::ostream& os,
                                                   const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType& x, 
                                                   ::xercesc::DOMErrorHandler& eh,
                                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                   const ::std::string& e = "UTF-8",
                                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SurfaceProfileNonUniformCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                                   const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType& x, 
                                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                   const ::std::string& e = "UTF-8",
                                                   ::xml_schema::flags f = 0);

    void
    SurfaceProfileNonUniformCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                                   const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType& x, 
                                                   ::xml_schema::error_handler& eh,
                                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                   const ::std::string& e = "UTF-8",
                                                   ::xml_schema::flags f = 0);

    void
    SurfaceProfileNonUniformCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                                   const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType& x, 
                                                   ::xercesc::DOMErrorHandler& eh,
                                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                   const ::std::string& e = "UTF-8",
                                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SurfaceProfileNonUniformCharacteristicNominal (::xercesc::DOMDocument& d,
                                                   const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType& x,
                                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SurfaceProfileNonUniformCharacteristicNominal (const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType& x, 
                                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SurfaceTextureCharacteristicNominal (::std::ostream& os,
                                         const ::xsd::qif2::SurfaceTextureCharacteristicNominalType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    SurfaceTextureCharacteristicNominal (::std::ostream& os,
                                         const ::xsd::qif2::SurfaceTextureCharacteristicNominalType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    SurfaceTextureCharacteristicNominal (::std::ostream& os,
                                         const ::xsd::qif2::SurfaceTextureCharacteristicNominalType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SurfaceTextureCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::SurfaceTextureCharacteristicNominalType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    SurfaceTextureCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::SurfaceTextureCharacteristicNominalType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    SurfaceTextureCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::SurfaceTextureCharacteristicNominalType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SurfaceTextureCharacteristicNominal (::xercesc::DOMDocument& d,
                                         const ::xsd::qif2::SurfaceTextureCharacteristicNominalType& x,
                                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SurfaceTextureCharacteristicNominal (const ::xsd::qif2::SurfaceTextureCharacteristicNominalType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SymmetryCharacteristicNominal (::std::ostream& os,
                                   const ::xsd::qif2::SymmetryCharacteristicNominalType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    SymmetryCharacteristicNominal (::std::ostream& os,
                                   const ::xsd::qif2::SymmetryCharacteristicNominalType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    SymmetryCharacteristicNominal (::std::ostream& os,
                                   const ::xsd::qif2::SymmetryCharacteristicNominalType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SymmetryCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::SymmetryCharacteristicNominalType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    SymmetryCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::SymmetryCharacteristicNominalType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    SymmetryCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::SymmetryCharacteristicNominalType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SymmetryCharacteristicNominal (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::SymmetryCharacteristicNominalType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SymmetryCharacteristicNominal (const ::xsd::qif2::SymmetryCharacteristicNominalType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ThicknessCharacteristicNominal (::std::ostream& os,
                                    const ::xsd::qif2::ThicknessCharacteristicNominalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    ThicknessCharacteristicNominal (::std::ostream& os,
                                    const ::xsd::qif2::ThicknessCharacteristicNominalType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    ThicknessCharacteristicNominal (::std::ostream& os,
                                    const ::xsd::qif2::ThicknessCharacteristicNominalType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ThicknessCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::ThicknessCharacteristicNominalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    ThicknessCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::ThicknessCharacteristicNominalType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    ThicknessCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::ThicknessCharacteristicNominalType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ThicknessCharacteristicNominal (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::ThicknessCharacteristicNominalType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ThicknessCharacteristicNominal (const ::xsd::qif2::ThicknessCharacteristicNominalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ThreadCharacteristicNominal (::std::ostream& os,
                                 const ::xsd::qif2::ThreadCharacteristicNominalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    ThreadCharacteristicNominal (::std::ostream& os,
                                 const ::xsd::qif2::ThreadCharacteristicNominalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    ThreadCharacteristicNominal (::std::ostream& os,
                                 const ::xsd::qif2::ThreadCharacteristicNominalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ThreadCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::ThreadCharacteristicNominalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    ThreadCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::ThreadCharacteristicNominalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    ThreadCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::ThreadCharacteristicNominalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ThreadCharacteristicNominal (::xercesc::DOMDocument& d,
                                 const ::xsd::qif2::ThreadCharacteristicNominalType& x,
                                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ThreadCharacteristicNominal (const ::xsd::qif2::ThreadCharacteristicNominalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    TotalRunoutCharacteristicNominal (::std::ostream& os,
                                      const ::xsd::qif2::TotalRunoutCharacteristicNominalType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    TotalRunoutCharacteristicNominal (::std::ostream& os,
                                      const ::xsd::qif2::TotalRunoutCharacteristicNominalType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    TotalRunoutCharacteristicNominal (::std::ostream& os,
                                      const ::xsd::qif2::TotalRunoutCharacteristicNominalType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    TotalRunoutCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::TotalRunoutCharacteristicNominalType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    TotalRunoutCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::TotalRunoutCharacteristicNominalType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    TotalRunoutCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::TotalRunoutCharacteristicNominalType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    TotalRunoutCharacteristicNominal (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::TotalRunoutCharacteristicNominalType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    TotalRunoutCharacteristicNominal (const ::xsd::qif2::TotalRunoutCharacteristicNominalType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedAttributeCharacteristicNominal (::std::ostream& os,
                                               const ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType& x, 
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    void
    UserDefinedAttributeCharacteristicNominal (::std::ostream& os,
                                               const ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType& x, 
                                               ::xml_schema::error_handler& eh,
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    void
    UserDefinedAttributeCharacteristicNominal (::std::ostream& os,
                                               const ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType& x, 
                                               ::xercesc::DOMErrorHandler& eh,
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedAttributeCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                               const ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType& x, 
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    void
    UserDefinedAttributeCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                               const ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType& x, 
                                               ::xml_schema::error_handler& eh,
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    void
    UserDefinedAttributeCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                               const ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType& x, 
                                               ::xercesc::DOMErrorHandler& eh,
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedAttributeCharacteristicNominal (::xercesc::DOMDocument& d,
                                               const ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType& x,
                                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedAttributeCharacteristicNominal (const ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType& x, 
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedLinearCharacteristicNominal (::std::ostream& os,
                                            const ::xsd::qif2::UserDefinedLinearCharacteristicNominalType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    UserDefinedLinearCharacteristicNominal (::std::ostream& os,
                                            const ::xsd::qif2::UserDefinedLinearCharacteristicNominalType& x, 
                                            ::xml_schema::error_handler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    UserDefinedLinearCharacteristicNominal (::std::ostream& os,
                                            const ::xsd::qif2::UserDefinedLinearCharacteristicNominalType& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedLinearCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::UserDefinedLinearCharacteristicNominalType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    UserDefinedLinearCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::UserDefinedLinearCharacteristicNominalType& x, 
                                            ::xml_schema::error_handler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    UserDefinedLinearCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::UserDefinedLinearCharacteristicNominalType& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedLinearCharacteristicNominal (::xercesc::DOMDocument& d,
                                            const ::xsd::qif2::UserDefinedLinearCharacteristicNominalType& x,
                                            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedLinearCharacteristicNominal (const ::xsd::qif2::UserDefinedLinearCharacteristicNominalType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedAngularCharacteristicNominal (::std::ostream& os,
                                             const ::xsd::qif2::UserDefinedAngularCharacteristicNominalType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedAngularCharacteristicNominal (::std::ostream& os,
                                             const ::xsd::qif2::UserDefinedAngularCharacteristicNominalType& x, 
                                             ::xml_schema::error_handler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedAngularCharacteristicNominal (::std::ostream& os,
                                             const ::xsd::qif2::UserDefinedAngularCharacteristicNominalType& x, 
                                             ::xercesc::DOMErrorHandler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedAngularCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::UserDefinedAngularCharacteristicNominalType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedAngularCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::UserDefinedAngularCharacteristicNominalType& x, 
                                             ::xml_schema::error_handler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedAngularCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::UserDefinedAngularCharacteristicNominalType& x, 
                                             ::xercesc::DOMErrorHandler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedAngularCharacteristicNominal (::xercesc::DOMDocument& d,
                                             const ::xsd::qif2::UserDefinedAngularCharacteristicNominalType& x,
                                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedAngularCharacteristicNominal (const ::xsd::qif2::UserDefinedAngularCharacteristicNominalType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedTemperatureCharacteristicNominal (::std::ostream& os,
                                                 const ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType& x, 
                                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::xml_schema::flags f = 0);

    void
    UserDefinedTemperatureCharacteristicNominal (::std::ostream& os,
                                                 const ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType& x, 
                                                 ::xml_schema::error_handler& eh,
                                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::xml_schema::flags f = 0);

    void
    UserDefinedTemperatureCharacteristicNominal (::std::ostream& os,
                                                 const ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType& x, 
                                                 ::xercesc::DOMErrorHandler& eh,
                                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedTemperatureCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                                 const ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType& x, 
                                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::xml_schema::flags f = 0);

    void
    UserDefinedTemperatureCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                                 const ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType& x, 
                                                 ::xml_schema::error_handler& eh,
                                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::xml_schema::flags f = 0);

    void
    UserDefinedTemperatureCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                                 const ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType& x, 
                                                 ::xercesc::DOMErrorHandler& eh,
                                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedTemperatureCharacteristicNominal (::xercesc::DOMDocument& d,
                                                 const ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType& x,
                                                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedTemperatureCharacteristicNominal (const ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType& x, 
                                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedAreaCharacteristicNominal (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedAreaCharacteristicNominalType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedAreaCharacteristicNominal (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedAreaCharacteristicNominalType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedAreaCharacteristicNominal (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedAreaCharacteristicNominalType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedAreaCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedAreaCharacteristicNominalType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedAreaCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedAreaCharacteristicNominalType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedAreaCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedAreaCharacteristicNominalType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedAreaCharacteristicNominal (::xercesc::DOMDocument& d,
                                          const ::xsd::qif2::UserDefinedAreaCharacteristicNominalType& x,
                                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedAreaCharacteristicNominal (const ::xsd::qif2::UserDefinedAreaCharacteristicNominalType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedForceCharacteristicNominal (::std::ostream& os,
                                           const ::xsd::qif2::UserDefinedForceCharacteristicNominalType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    UserDefinedForceCharacteristicNominal (::std::ostream& os,
                                           const ::xsd::qif2::UserDefinedForceCharacteristicNominalType& x, 
                                           ::xml_schema::error_handler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    UserDefinedForceCharacteristicNominal (::std::ostream& os,
                                           const ::xsd::qif2::UserDefinedForceCharacteristicNominalType& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedForceCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::UserDefinedForceCharacteristicNominalType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    UserDefinedForceCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::UserDefinedForceCharacteristicNominalType& x, 
                                           ::xml_schema::error_handler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    UserDefinedForceCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::UserDefinedForceCharacteristicNominalType& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedForceCharacteristicNominal (::xercesc::DOMDocument& d,
                                           const ::xsd::qif2::UserDefinedForceCharacteristicNominalType& x,
                                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedForceCharacteristicNominal (const ::xsd::qif2::UserDefinedForceCharacteristicNominalType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedMassCharacteristicNominal (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedMassCharacteristicNominalType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedMassCharacteristicNominal (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedMassCharacteristicNominalType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedMassCharacteristicNominal (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedMassCharacteristicNominalType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedMassCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedMassCharacteristicNominalType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedMassCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedMassCharacteristicNominalType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedMassCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedMassCharacteristicNominalType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedMassCharacteristicNominal (::xercesc::DOMDocument& d,
                                          const ::xsd::qif2::UserDefinedMassCharacteristicNominalType& x,
                                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedMassCharacteristicNominal (const ::xsd::qif2::UserDefinedMassCharacteristicNominalType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedPressureCharacteristicNominal (::std::ostream& os,
                                              const ::xsd::qif2::UserDefinedPressureCharacteristicNominalType& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    UserDefinedPressureCharacteristicNominal (::std::ostream& os,
                                              const ::xsd::qif2::UserDefinedPressureCharacteristicNominalType& x, 
                                              ::xml_schema::error_handler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    UserDefinedPressureCharacteristicNominal (::std::ostream& os,
                                              const ::xsd::qif2::UserDefinedPressureCharacteristicNominalType& x, 
                                              ::xercesc::DOMErrorHandler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedPressureCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                              const ::xsd::qif2::UserDefinedPressureCharacteristicNominalType& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    UserDefinedPressureCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                              const ::xsd::qif2::UserDefinedPressureCharacteristicNominalType& x, 
                                              ::xml_schema::error_handler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    UserDefinedPressureCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                              const ::xsd::qif2::UserDefinedPressureCharacteristicNominalType& x, 
                                              ::xercesc::DOMErrorHandler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedPressureCharacteristicNominal (::xercesc::DOMDocument& d,
                                              const ::xsd::qif2::UserDefinedPressureCharacteristicNominalType& x,
                                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedPressureCharacteristicNominal (const ::xsd::qif2::UserDefinedPressureCharacteristicNominalType& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedSpeedCharacteristicNominal (::std::ostream& os,
                                           const ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    UserDefinedSpeedCharacteristicNominal (::std::ostream& os,
                                           const ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType& x, 
                                           ::xml_schema::error_handler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    UserDefinedSpeedCharacteristicNominal (::std::ostream& os,
                                           const ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedSpeedCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    UserDefinedSpeedCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType& x, 
                                           ::xml_schema::error_handler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    UserDefinedSpeedCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedSpeedCharacteristicNominal (::xercesc::DOMDocument& d,
                                           const ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType& x,
                                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedSpeedCharacteristicNominal (const ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedTimeCharacteristicNominal (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedTimeCharacteristicNominalType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedTimeCharacteristicNominal (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedTimeCharacteristicNominalType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedTimeCharacteristicNominal (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedTimeCharacteristicNominalType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedTimeCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedTimeCharacteristicNominalType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedTimeCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedTimeCharacteristicNominalType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedTimeCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedTimeCharacteristicNominalType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedTimeCharacteristicNominal (::xercesc::DOMDocument& d,
                                          const ::xsd::qif2::UserDefinedTimeCharacteristicNominalType& x,
                                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedTimeCharacteristicNominal (const ::xsd::qif2::UserDefinedTimeCharacteristicNominalType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedUnitCharacteristicNominal (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedUnitCharacteristicNominalType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedUnitCharacteristicNominal (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedUnitCharacteristicNominalType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedUnitCharacteristicNominal (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedUnitCharacteristicNominalType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedUnitCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedUnitCharacteristicNominalType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedUnitCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedUnitCharacteristicNominalType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedUnitCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedUnitCharacteristicNominalType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedUnitCharacteristicNominal (::xercesc::DOMDocument& d,
                                          const ::xsd::qif2::UserDefinedUnitCharacteristicNominalType& x,
                                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedUnitCharacteristicNominal (const ::xsd::qif2::UserDefinedUnitCharacteristicNominalType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    WidthCharacteristicNominal (::std::ostream& os,
                                const ::xsd::qif2::WidthCharacteristicNominalType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    WidthCharacteristicNominal (::std::ostream& os,
                                const ::xsd::qif2::WidthCharacteristicNominalType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    WidthCharacteristicNominal (::std::ostream& os,
                                const ::xsd::qif2::WidthCharacteristicNominalType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    WidthCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::WidthCharacteristicNominalType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    WidthCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::WidthCharacteristicNominalType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    WidthCharacteristicNominal (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::WidthCharacteristicNominalType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    WidthCharacteristicNominal (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::WidthCharacteristicNominalType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    WidthCharacteristicNominal (const ::xsd::qif2::WidthCharacteristicNominalType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CharacteristicActual (::std::ostream& os,
                          const ::xsd::qif2::CharacteristicActualBaseType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    CharacteristicActual (::std::ostream& os,
                          const ::xsd::qif2::CharacteristicActualBaseType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    CharacteristicActual (::std::ostream& os,
                          const ::xsd::qif2::CharacteristicActualBaseType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CharacteristicActual (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::CharacteristicActualBaseType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    CharacteristicActual (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::CharacteristicActualBaseType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    CharacteristicActual (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::CharacteristicActualBaseType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CharacteristicActual (::xercesc::DOMDocument& d,
                          const ::xsd::qif2::CharacteristicActualBaseType& x,
                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CharacteristicActual (const ::xsd::qif2::CharacteristicActualBaseType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngleBetweenCharacteristicActual (::std::ostream& os,
                                      const ::xsd::qif2::AngleBetweenCharacteristicActualType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    AngleBetweenCharacteristicActual (::std::ostream& os,
                                      const ::xsd::qif2::AngleBetweenCharacteristicActualType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    AngleBetweenCharacteristicActual (::std::ostream& os,
                                      const ::xsd::qif2::AngleBetweenCharacteristicActualType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngleBetweenCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::AngleBetweenCharacteristicActualType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    AngleBetweenCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::AngleBetweenCharacteristicActualType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    AngleBetweenCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::AngleBetweenCharacteristicActualType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngleBetweenCharacteristicActual (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::AngleBetweenCharacteristicActualType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngleBetweenCharacteristicActual (const ::xsd::qif2::AngleBetweenCharacteristicActualType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngleCharacteristicActual (::std::ostream& os,
                               const ::xsd::qif2::AngleCharacteristicActualType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    AngleCharacteristicActual (::std::ostream& os,
                               const ::xsd::qif2::AngleCharacteristicActualType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    AngleCharacteristicActual (::std::ostream& os,
                               const ::xsd::qif2::AngleCharacteristicActualType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngleCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::AngleCharacteristicActualType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    AngleCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::AngleCharacteristicActualType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    AngleCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::AngleCharacteristicActualType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngleCharacteristicActual (::xercesc::DOMDocument& d,
                               const ::xsd::qif2::AngleCharacteristicActualType& x,
                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngleCharacteristicActual (const ::xsd::qif2::AngleCharacteristicActualType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngularCoordinateCharacteristicActual (::std::ostream& os,
                                           const ::xsd::qif2::AngularCoordinateCharacteristicActualType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    AngularCoordinateCharacteristicActual (::std::ostream& os,
                                           const ::xsd::qif2::AngularCoordinateCharacteristicActualType& x, 
                                           ::xml_schema::error_handler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    AngularCoordinateCharacteristicActual (::std::ostream& os,
                                           const ::xsd::qif2::AngularCoordinateCharacteristicActualType& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngularCoordinateCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::AngularCoordinateCharacteristicActualType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    AngularCoordinateCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::AngularCoordinateCharacteristicActualType& x, 
                                           ::xml_schema::error_handler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    AngularCoordinateCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::AngularCoordinateCharacteristicActualType& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngularCoordinateCharacteristicActual (::xercesc::DOMDocument& d,
                                           const ::xsd::qif2::AngularCoordinateCharacteristicActualType& x,
                                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngularCoordinateCharacteristicActual (const ::xsd::qif2::AngularCoordinateCharacteristicActualType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngleFromCharacteristicActual (::std::ostream& os,
                                   const ::xsd::qif2::AngleFromCharacteristicActualType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    AngleFromCharacteristicActual (::std::ostream& os,
                                   const ::xsd::qif2::AngleFromCharacteristicActualType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    AngleFromCharacteristicActual (::std::ostream& os,
                                   const ::xsd::qif2::AngleFromCharacteristicActualType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngleFromCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::AngleFromCharacteristicActualType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    AngleFromCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::AngleFromCharacteristicActualType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    AngleFromCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::AngleFromCharacteristicActualType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngleFromCharacteristicActual (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::AngleFromCharacteristicActualType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngleFromCharacteristicActual (const ::xsd::qif2::AngleFromCharacteristicActualType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngularityCharacteristicActual (::std::ostream& os,
                                    const ::xsd::qif2::AngularityCharacteristicActualType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    AngularityCharacteristicActual (::std::ostream& os,
                                    const ::xsd::qif2::AngularityCharacteristicActualType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    AngularityCharacteristicActual (::std::ostream& os,
                                    const ::xsd::qif2::AngularityCharacteristicActualType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngularityCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::AngularityCharacteristicActualType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    AngularityCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::AngularityCharacteristicActualType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    AngularityCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::AngularityCharacteristicActualType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngularityCharacteristicActual (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::AngularityCharacteristicActualType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngularityCharacteristicActual (const ::xsd::qif2::AngularityCharacteristicActualType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ChordCharacteristicActual (::std::ostream& os,
                               const ::xsd::qif2::ChordCharacteristicActualType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ChordCharacteristicActual (::std::ostream& os,
                               const ::xsd::qif2::ChordCharacteristicActualType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ChordCharacteristicActual (::std::ostream& os,
                               const ::xsd::qif2::ChordCharacteristicActualType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ChordCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::ChordCharacteristicActualType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ChordCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::ChordCharacteristicActualType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ChordCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::ChordCharacteristicActualType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ChordCharacteristicActual (::xercesc::DOMDocument& d,
                               const ::xsd::qif2::ChordCharacteristicActualType& x,
                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ChordCharacteristicActual (const ::xsd::qif2::ChordCharacteristicActualType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CircularityCharacteristicActual (::std::ostream& os,
                                     const ::xsd::qif2::CircularityCharacteristicActualType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    CircularityCharacteristicActual (::std::ostream& os,
                                     const ::xsd::qif2::CircularityCharacteristicActualType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    CircularityCharacteristicActual (::std::ostream& os,
                                     const ::xsd::qif2::CircularityCharacteristicActualType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CircularityCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::CircularityCharacteristicActualType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    CircularityCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::CircularityCharacteristicActualType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    CircularityCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::CircularityCharacteristicActualType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CircularityCharacteristicActual (::xercesc::DOMDocument& d,
                                     const ::xsd::qif2::CircularityCharacteristicActualType& x,
                                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CircularityCharacteristicActual (const ::xsd::qif2::CircularityCharacteristicActualType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CircularRunoutCharacteristicActual (::std::ostream& os,
                                        const ::xsd::qif2::CircularRunoutCharacteristicActualType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    CircularRunoutCharacteristicActual (::std::ostream& os,
                                        const ::xsd::qif2::CircularRunoutCharacteristicActualType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    CircularRunoutCharacteristicActual (::std::ostream& os,
                                        const ::xsd::qif2::CircularRunoutCharacteristicActualType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CircularRunoutCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::CircularRunoutCharacteristicActualType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    CircularRunoutCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::CircularRunoutCharacteristicActualType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    CircularRunoutCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::CircularRunoutCharacteristicActualType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CircularRunoutCharacteristicActual (::xercesc::DOMDocument& d,
                                        const ::xsd::qif2::CircularRunoutCharacteristicActualType& x,
                                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CircularRunoutCharacteristicActual (const ::xsd::qif2::CircularRunoutCharacteristicActualType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ConcentricityCharacteristicActual (::std::ostream& os,
                                       const ::xsd::qif2::ConcentricityCharacteristicActualType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    ConcentricityCharacteristicActual (::std::ostream& os,
                                       const ::xsd::qif2::ConcentricityCharacteristicActualType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    ConcentricityCharacteristicActual (::std::ostream& os,
                                       const ::xsd::qif2::ConcentricityCharacteristicActualType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ConcentricityCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::ConcentricityCharacteristicActualType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    ConcentricityCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::ConcentricityCharacteristicActualType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    ConcentricityCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::ConcentricityCharacteristicActualType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ConcentricityCharacteristicActual (::xercesc::DOMDocument& d,
                                       const ::xsd::qif2::ConcentricityCharacteristicActualType& x,
                                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ConcentricityCharacteristicActual (const ::xsd::qif2::ConcentricityCharacteristicActualType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CurveLengthCharacteristicActual (::std::ostream& os,
                                     const ::xsd::qif2::CurveLengthCharacteristicActualType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    CurveLengthCharacteristicActual (::std::ostream& os,
                                     const ::xsd::qif2::CurveLengthCharacteristicActualType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    CurveLengthCharacteristicActual (::std::ostream& os,
                                     const ::xsd::qif2::CurveLengthCharacteristicActualType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CurveLengthCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::CurveLengthCharacteristicActualType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    CurveLengthCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::CurveLengthCharacteristicActualType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    CurveLengthCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::CurveLengthCharacteristicActualType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CurveLengthCharacteristicActual (::xercesc::DOMDocument& d,
                                     const ::xsd::qif2::CurveLengthCharacteristicActualType& x,
                                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CurveLengthCharacteristicActual (const ::xsd::qif2::CurveLengthCharacteristicActualType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CylindricityCharacteristicActual (::std::ostream& os,
                                      const ::xsd::qif2::CylindricityCharacteristicActualType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    CylindricityCharacteristicActual (::std::ostream& os,
                                      const ::xsd::qif2::CylindricityCharacteristicActualType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    CylindricityCharacteristicActual (::std::ostream& os,
                                      const ::xsd::qif2::CylindricityCharacteristicActualType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CylindricityCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::CylindricityCharacteristicActualType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    CylindricityCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::CylindricityCharacteristicActualType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    CylindricityCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::CylindricityCharacteristicActualType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CylindricityCharacteristicActual (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::CylindricityCharacteristicActualType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CylindricityCharacteristicActual (const ::xsd::qif2::CylindricityCharacteristicActualType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    DepthCharacteristicActual (::std::ostream& os,
                               const ::xsd::qif2::DepthCharacteristicActualType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    DepthCharacteristicActual (::std::ostream& os,
                               const ::xsd::qif2::DepthCharacteristicActualType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    DepthCharacteristicActual (::std::ostream& os,
                               const ::xsd::qif2::DepthCharacteristicActualType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    DepthCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::DepthCharacteristicActualType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    DepthCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::DepthCharacteristicActualType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    DepthCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::DepthCharacteristicActualType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    DepthCharacteristicActual (::xercesc::DOMDocument& d,
                               const ::xsd::qif2::DepthCharacteristicActualType& x,
                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DepthCharacteristicActual (const ::xsd::qif2::DepthCharacteristicActualType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    DiameterCharacteristicActual (::std::ostream& os,
                                  const ::xsd::qif2::DiameterCharacteristicActualType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    DiameterCharacteristicActual (::std::ostream& os,
                                  const ::xsd::qif2::DiameterCharacteristicActualType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    DiameterCharacteristicActual (::std::ostream& os,
                                  const ::xsd::qif2::DiameterCharacteristicActualType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    DiameterCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::DiameterCharacteristicActualType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    DiameterCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::DiameterCharacteristicActualType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    DiameterCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::DiameterCharacteristicActualType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    DiameterCharacteristicActual (::xercesc::DOMDocument& d,
                                  const ::xsd::qif2::DiameterCharacteristicActualType& x,
                                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DiameterCharacteristicActual (const ::xsd::qif2::DiameterCharacteristicActualType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    DistanceBetweenCharacteristicActual (::std::ostream& os,
                                         const ::xsd::qif2::DistanceBetweenCharacteristicActualType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    DistanceBetweenCharacteristicActual (::std::ostream& os,
                                         const ::xsd::qif2::DistanceBetweenCharacteristicActualType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    DistanceBetweenCharacteristicActual (::std::ostream& os,
                                         const ::xsd::qif2::DistanceBetweenCharacteristicActualType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    DistanceBetweenCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::DistanceBetweenCharacteristicActualType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    DistanceBetweenCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::DistanceBetweenCharacteristicActualType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    DistanceBetweenCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::DistanceBetweenCharacteristicActualType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    DistanceBetweenCharacteristicActual (::xercesc::DOMDocument& d,
                                         const ::xsd::qif2::DistanceBetweenCharacteristicActualType& x,
                                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DistanceBetweenCharacteristicActual (const ::xsd::qif2::DistanceBetweenCharacteristicActualType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    DistanceFromCharacteristicActual (::std::ostream& os,
                                      const ::xsd::qif2::DistanceFromCharacteristicActualType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    DistanceFromCharacteristicActual (::std::ostream& os,
                                      const ::xsd::qif2::DistanceFromCharacteristicActualType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    DistanceFromCharacteristicActual (::std::ostream& os,
                                      const ::xsd::qif2::DistanceFromCharacteristicActualType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    DistanceFromCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::DistanceFromCharacteristicActualType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    DistanceFromCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::DistanceFromCharacteristicActualType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    DistanceFromCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::DistanceFromCharacteristicActualType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    DistanceFromCharacteristicActual (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::DistanceFromCharacteristicActualType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DistanceFromCharacteristicActual (const ::xsd::qif2::DistanceFromCharacteristicActualType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FlatnessCharacteristicActual (::std::ostream& os,
                                  const ::xsd::qif2::FlatnessCharacteristicActualType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    FlatnessCharacteristicActual (::std::ostream& os,
                                  const ::xsd::qif2::FlatnessCharacteristicActualType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    FlatnessCharacteristicActual (::std::ostream& os,
                                  const ::xsd::qif2::FlatnessCharacteristicActualType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FlatnessCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::FlatnessCharacteristicActualType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    FlatnessCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::FlatnessCharacteristicActualType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    FlatnessCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::FlatnessCharacteristicActualType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FlatnessCharacteristicActual (::xercesc::DOMDocument& d,
                                  const ::xsd::qif2::FlatnessCharacteristicActualType& x,
                                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FlatnessCharacteristicActual (const ::xsd::qif2::FlatnessCharacteristicActualType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    HeightCharacteristicActual (::std::ostream& os,
                                const ::xsd::qif2::HeightCharacteristicActualType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    HeightCharacteristicActual (::std::ostream& os,
                                const ::xsd::qif2::HeightCharacteristicActualType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    HeightCharacteristicActual (::std::ostream& os,
                                const ::xsd::qif2::HeightCharacteristicActualType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    HeightCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::HeightCharacteristicActualType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    HeightCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::HeightCharacteristicActualType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    HeightCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::HeightCharacteristicActualType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    HeightCharacteristicActual (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::HeightCharacteristicActualType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    HeightCharacteristicActual (const ::xsd::qif2::HeightCharacteristicActualType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LengthCharacteristicActual (::std::ostream& os,
                                const ::xsd::qif2::LengthCharacteristicActualType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    LengthCharacteristicActual (::std::ostream& os,
                                const ::xsd::qif2::LengthCharacteristicActualType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    LengthCharacteristicActual (::std::ostream& os,
                                const ::xsd::qif2::LengthCharacteristicActualType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LengthCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::LengthCharacteristicActualType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    LengthCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::LengthCharacteristicActualType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    LengthCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::LengthCharacteristicActualType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LengthCharacteristicActual (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::LengthCharacteristicActualType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LengthCharacteristicActual (const ::xsd::qif2::LengthCharacteristicActualType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LinearCoordinateCharacteristicActual (::std::ostream& os,
                                          const ::xsd::qif2::LinearCoordinateCharacteristicActualType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    LinearCoordinateCharacteristicActual (::std::ostream& os,
                                          const ::xsd::qif2::LinearCoordinateCharacteristicActualType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    LinearCoordinateCharacteristicActual (::std::ostream& os,
                                          const ::xsd::qif2::LinearCoordinateCharacteristicActualType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LinearCoordinateCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::LinearCoordinateCharacteristicActualType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    LinearCoordinateCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::LinearCoordinateCharacteristicActualType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    LinearCoordinateCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::LinearCoordinateCharacteristicActualType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LinearCoordinateCharacteristicActual (::xercesc::DOMDocument& d,
                                          const ::xsd::qif2::LinearCoordinateCharacteristicActualType& x,
                                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LinearCoordinateCharacteristicActual (const ::xsd::qif2::LinearCoordinateCharacteristicActualType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LineProfileCharacteristicActual (::std::ostream& os,
                                     const ::xsd::qif2::LineProfileCharacteristicActualType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    LineProfileCharacteristicActual (::std::ostream& os,
                                     const ::xsd::qif2::LineProfileCharacteristicActualType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    LineProfileCharacteristicActual (::std::ostream& os,
                                     const ::xsd::qif2::LineProfileCharacteristicActualType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LineProfileCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::LineProfileCharacteristicActualType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    LineProfileCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::LineProfileCharacteristicActualType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    LineProfileCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::LineProfileCharacteristicActualType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LineProfileCharacteristicActual (::xercesc::DOMDocument& d,
                                     const ::xsd::qif2::LineProfileCharacteristicActualType& x,
                                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LineProfileCharacteristicActual (const ::xsd::qif2::LineProfileCharacteristicActualType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ParallelismCharacteristicActual (::std::ostream& os,
                                     const ::xsd::qif2::ParallelismCharacteristicActualType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    ParallelismCharacteristicActual (::std::ostream& os,
                                     const ::xsd::qif2::ParallelismCharacteristicActualType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    ParallelismCharacteristicActual (::std::ostream& os,
                                     const ::xsd::qif2::ParallelismCharacteristicActualType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ParallelismCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::ParallelismCharacteristicActualType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    ParallelismCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::ParallelismCharacteristicActualType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    ParallelismCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::ParallelismCharacteristicActualType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ParallelismCharacteristicActual (::xercesc::DOMDocument& d,
                                     const ::xsd::qif2::ParallelismCharacteristicActualType& x,
                                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ParallelismCharacteristicActual (const ::xsd::qif2::ParallelismCharacteristicActualType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PerpendicularityCharacteristicActual (::std::ostream& os,
                                          const ::xsd::qif2::PerpendicularityCharacteristicActualType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    PerpendicularityCharacteristicActual (::std::ostream& os,
                                          const ::xsd::qif2::PerpendicularityCharacteristicActualType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    PerpendicularityCharacteristicActual (::std::ostream& os,
                                          const ::xsd::qif2::PerpendicularityCharacteristicActualType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PerpendicularityCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::PerpendicularityCharacteristicActualType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    PerpendicularityCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::PerpendicularityCharacteristicActualType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    PerpendicularityCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::PerpendicularityCharacteristicActualType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PerpendicularityCharacteristicActual (::xercesc::DOMDocument& d,
                                          const ::xsd::qif2::PerpendicularityCharacteristicActualType& x,
                                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PerpendicularityCharacteristicActual (const ::xsd::qif2::PerpendicularityCharacteristicActualType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PointProfileCharacteristicActual (::std::ostream& os,
                                      const ::xsd::qif2::PointProfileCharacteristicActualType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    PointProfileCharacteristicActual (::std::ostream& os,
                                      const ::xsd::qif2::PointProfileCharacteristicActualType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    PointProfileCharacteristicActual (::std::ostream& os,
                                      const ::xsd::qif2::PointProfileCharacteristicActualType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PointProfileCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::PointProfileCharacteristicActualType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    PointProfileCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::PointProfileCharacteristicActualType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    PointProfileCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::PointProfileCharacteristicActualType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PointProfileCharacteristicActual (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::PointProfileCharacteristicActualType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PointProfileCharacteristicActual (const ::xsd::qif2::PointProfileCharacteristicActualType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PositionCharacteristicActual (::std::ostream& os,
                                  const ::xsd::qif2::PositionCharacteristicActualType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    PositionCharacteristicActual (::std::ostream& os,
                                  const ::xsd::qif2::PositionCharacteristicActualType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    PositionCharacteristicActual (::std::ostream& os,
                                  const ::xsd::qif2::PositionCharacteristicActualType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PositionCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::PositionCharacteristicActualType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    PositionCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::PositionCharacteristicActualType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    PositionCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::PositionCharacteristicActualType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PositionCharacteristicActual (::xercesc::DOMDocument& d,
                                  const ::xsd::qif2::PositionCharacteristicActualType& x,
                                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PositionCharacteristicActual (const ::xsd::qif2::PositionCharacteristicActualType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    RadiusCharacteristicActual (::std::ostream& os,
                                const ::xsd::qif2::RadiusCharacteristicActualType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    RadiusCharacteristicActual (::std::ostream& os,
                                const ::xsd::qif2::RadiusCharacteristicActualType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    RadiusCharacteristicActual (::std::ostream& os,
                                const ::xsd::qif2::RadiusCharacteristicActualType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    RadiusCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::RadiusCharacteristicActualType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    RadiusCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::RadiusCharacteristicActualType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    RadiusCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::RadiusCharacteristicActualType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    RadiusCharacteristicActual (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::RadiusCharacteristicActualType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    RadiusCharacteristicActual (const ::xsd::qif2::RadiusCharacteristicActualType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SquareCharacteristicActual (::std::ostream& os,
                                const ::xsd::qif2::SquareCharacteristicActualType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    SquareCharacteristicActual (::std::ostream& os,
                                const ::xsd::qif2::SquareCharacteristicActualType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    SquareCharacteristicActual (::std::ostream& os,
                                const ::xsd::qif2::SquareCharacteristicActualType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SquareCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::SquareCharacteristicActualType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    SquareCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::SquareCharacteristicActualType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    SquareCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::SquareCharacteristicActualType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SquareCharacteristicActual (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::SquareCharacteristicActualType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SquareCharacteristicActual (const ::xsd::qif2::SquareCharacteristicActualType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    StraightnessCharacteristicActual (::std::ostream& os,
                                      const ::xsd::qif2::StraightnessCharacteristicActualType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    StraightnessCharacteristicActual (::std::ostream& os,
                                      const ::xsd::qif2::StraightnessCharacteristicActualType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    StraightnessCharacteristicActual (::std::ostream& os,
                                      const ::xsd::qif2::StraightnessCharacteristicActualType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    StraightnessCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::StraightnessCharacteristicActualType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    StraightnessCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::StraightnessCharacteristicActualType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    StraightnessCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::StraightnessCharacteristicActualType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    StraightnessCharacteristicActual (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::StraightnessCharacteristicActualType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    StraightnessCharacteristicActual (const ::xsd::qif2::StraightnessCharacteristicActualType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SurfaceProfileCharacteristicActual (::std::ostream& os,
                                        const ::xsd::qif2::SurfaceProfileCharacteristicActualType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    SurfaceProfileCharacteristicActual (::std::ostream& os,
                                        const ::xsd::qif2::SurfaceProfileCharacteristicActualType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    SurfaceProfileCharacteristicActual (::std::ostream& os,
                                        const ::xsd::qif2::SurfaceProfileCharacteristicActualType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SurfaceProfileCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::SurfaceProfileCharacteristicActualType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    SurfaceProfileCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::SurfaceProfileCharacteristicActualType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    SurfaceProfileCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::SurfaceProfileCharacteristicActualType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SurfaceProfileCharacteristicActual (::xercesc::DOMDocument& d,
                                        const ::xsd::qif2::SurfaceProfileCharacteristicActualType& x,
                                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SurfaceProfileCharacteristicActual (const ::xsd::qif2::SurfaceProfileCharacteristicActualType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SurfaceProfileNonUniformCharacteristicActual (::std::ostream& os,
                                                  const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType& x, 
                                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                  const ::std::string& e = "UTF-8",
                                                  ::xml_schema::flags f = 0);

    void
    SurfaceProfileNonUniformCharacteristicActual (::std::ostream& os,
                                                  const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType& x, 
                                                  ::xml_schema::error_handler& eh,
                                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                  const ::std::string& e = "UTF-8",
                                                  ::xml_schema::flags f = 0);

    void
    SurfaceProfileNonUniformCharacteristicActual (::std::ostream& os,
                                                  const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType& x, 
                                                  ::xercesc::DOMErrorHandler& eh,
                                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                  const ::std::string& e = "UTF-8",
                                                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SurfaceProfileNonUniformCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                                  const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType& x, 
                                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                  const ::std::string& e = "UTF-8",
                                                  ::xml_schema::flags f = 0);

    void
    SurfaceProfileNonUniformCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                                  const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType& x, 
                                                  ::xml_schema::error_handler& eh,
                                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                  const ::std::string& e = "UTF-8",
                                                  ::xml_schema::flags f = 0);

    void
    SurfaceProfileNonUniformCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                                  const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType& x, 
                                                  ::xercesc::DOMErrorHandler& eh,
                                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                  const ::std::string& e = "UTF-8",
                                                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SurfaceProfileNonUniformCharacteristicActual (::xercesc::DOMDocument& d,
                                                  const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType& x,
                                                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SurfaceProfileNonUniformCharacteristicActual (const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType& x, 
                                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SurfaceTextureCharacteristicActual (::std::ostream& os,
                                        const ::xsd::qif2::SurfaceTextureCharacteristicActualType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    SurfaceTextureCharacteristicActual (::std::ostream& os,
                                        const ::xsd::qif2::SurfaceTextureCharacteristicActualType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    SurfaceTextureCharacteristicActual (::std::ostream& os,
                                        const ::xsd::qif2::SurfaceTextureCharacteristicActualType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SurfaceTextureCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::SurfaceTextureCharacteristicActualType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    SurfaceTextureCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::SurfaceTextureCharacteristicActualType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    SurfaceTextureCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::SurfaceTextureCharacteristicActualType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SurfaceTextureCharacteristicActual (::xercesc::DOMDocument& d,
                                        const ::xsd::qif2::SurfaceTextureCharacteristicActualType& x,
                                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SurfaceTextureCharacteristicActual (const ::xsd::qif2::SurfaceTextureCharacteristicActualType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SymmetryCharacteristicActual (::std::ostream& os,
                                  const ::xsd::qif2::SymmetryCharacteristicActualType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    SymmetryCharacteristicActual (::std::ostream& os,
                                  const ::xsd::qif2::SymmetryCharacteristicActualType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    SymmetryCharacteristicActual (::std::ostream& os,
                                  const ::xsd::qif2::SymmetryCharacteristicActualType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SymmetryCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::SymmetryCharacteristicActualType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    SymmetryCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::SymmetryCharacteristicActualType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    SymmetryCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::SymmetryCharacteristicActualType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SymmetryCharacteristicActual (::xercesc::DOMDocument& d,
                                  const ::xsd::qif2::SymmetryCharacteristicActualType& x,
                                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SymmetryCharacteristicActual (const ::xsd::qif2::SymmetryCharacteristicActualType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ThicknessCharacteristicActual (::std::ostream& os,
                                   const ::xsd::qif2::ThicknessCharacteristicActualType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ThicknessCharacteristicActual (::std::ostream& os,
                                   const ::xsd::qif2::ThicknessCharacteristicActualType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ThicknessCharacteristicActual (::std::ostream& os,
                                   const ::xsd::qif2::ThicknessCharacteristicActualType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ThicknessCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::ThicknessCharacteristicActualType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ThicknessCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::ThicknessCharacteristicActualType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ThicknessCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::ThicknessCharacteristicActualType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ThicknessCharacteristicActual (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::ThicknessCharacteristicActualType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ThicknessCharacteristicActual (const ::xsd::qif2::ThicknessCharacteristicActualType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ThreadCharacteristicActual (::std::ostream& os,
                                const ::xsd::qif2::ThreadCharacteristicActualType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ThreadCharacteristicActual (::std::ostream& os,
                                const ::xsd::qif2::ThreadCharacteristicActualType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ThreadCharacteristicActual (::std::ostream& os,
                                const ::xsd::qif2::ThreadCharacteristicActualType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ThreadCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::ThreadCharacteristicActualType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ThreadCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::ThreadCharacteristicActualType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ThreadCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::ThreadCharacteristicActualType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ThreadCharacteristicActual (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::ThreadCharacteristicActualType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ThreadCharacteristicActual (const ::xsd::qif2::ThreadCharacteristicActualType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    TotalRunoutCharacteristicActual (::std::ostream& os,
                                     const ::xsd::qif2::TotalRunoutCharacteristicActualType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    TotalRunoutCharacteristicActual (::std::ostream& os,
                                     const ::xsd::qif2::TotalRunoutCharacteristicActualType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    TotalRunoutCharacteristicActual (::std::ostream& os,
                                     const ::xsd::qif2::TotalRunoutCharacteristicActualType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    TotalRunoutCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::TotalRunoutCharacteristicActualType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    TotalRunoutCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::TotalRunoutCharacteristicActualType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    TotalRunoutCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::TotalRunoutCharacteristicActualType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    TotalRunoutCharacteristicActual (::xercesc::DOMDocument& d,
                                     const ::xsd::qif2::TotalRunoutCharacteristicActualType& x,
                                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    TotalRunoutCharacteristicActual (const ::xsd::qif2::TotalRunoutCharacteristicActualType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedAttributeCharacteristicActual (::std::ostream& os,
                                              const ::xsd::qif2::UserDefinedAttributeCharacteristicActualType& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    UserDefinedAttributeCharacteristicActual (::std::ostream& os,
                                              const ::xsd::qif2::UserDefinedAttributeCharacteristicActualType& x, 
                                              ::xml_schema::error_handler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    UserDefinedAttributeCharacteristicActual (::std::ostream& os,
                                              const ::xsd::qif2::UserDefinedAttributeCharacteristicActualType& x, 
                                              ::xercesc::DOMErrorHandler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedAttributeCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                              const ::xsd::qif2::UserDefinedAttributeCharacteristicActualType& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    UserDefinedAttributeCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                              const ::xsd::qif2::UserDefinedAttributeCharacteristicActualType& x, 
                                              ::xml_schema::error_handler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    UserDefinedAttributeCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                              const ::xsd::qif2::UserDefinedAttributeCharacteristicActualType& x, 
                                              ::xercesc::DOMErrorHandler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedAttributeCharacteristicActual (::xercesc::DOMDocument& d,
                                              const ::xsd::qif2::UserDefinedAttributeCharacteristicActualType& x,
                                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedAttributeCharacteristicActual (const ::xsd::qif2::UserDefinedAttributeCharacteristicActualType& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedLinearCharacteristicActual (::std::ostream& os,
                                           const ::xsd::qif2::UserDefinedLinearCharacteristicActualType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    UserDefinedLinearCharacteristicActual (::std::ostream& os,
                                           const ::xsd::qif2::UserDefinedLinearCharacteristicActualType& x, 
                                           ::xml_schema::error_handler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    UserDefinedLinearCharacteristicActual (::std::ostream& os,
                                           const ::xsd::qif2::UserDefinedLinearCharacteristicActualType& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedLinearCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::UserDefinedLinearCharacteristicActualType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    UserDefinedLinearCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::UserDefinedLinearCharacteristicActualType& x, 
                                           ::xml_schema::error_handler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    UserDefinedLinearCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::UserDefinedLinearCharacteristicActualType& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedLinearCharacteristicActual (::xercesc::DOMDocument& d,
                                           const ::xsd::qif2::UserDefinedLinearCharacteristicActualType& x,
                                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedLinearCharacteristicActual (const ::xsd::qif2::UserDefinedLinearCharacteristicActualType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedAngularCharacteristicActual (::std::ostream& os,
                                            const ::xsd::qif2::UserDefinedAngularCharacteristicActualType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    UserDefinedAngularCharacteristicActual (::std::ostream& os,
                                            const ::xsd::qif2::UserDefinedAngularCharacteristicActualType& x, 
                                            ::xml_schema::error_handler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    UserDefinedAngularCharacteristicActual (::std::ostream& os,
                                            const ::xsd::qif2::UserDefinedAngularCharacteristicActualType& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedAngularCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::UserDefinedAngularCharacteristicActualType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    UserDefinedAngularCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::UserDefinedAngularCharacteristicActualType& x, 
                                            ::xml_schema::error_handler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    UserDefinedAngularCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::UserDefinedAngularCharacteristicActualType& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedAngularCharacteristicActual (::xercesc::DOMDocument& d,
                                            const ::xsd::qif2::UserDefinedAngularCharacteristicActualType& x,
                                            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedAngularCharacteristicActual (const ::xsd::qif2::UserDefinedAngularCharacteristicActualType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedTemperatureCharacteristicActual (::std::ostream& os,
                                                const ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType& x, 
                                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                const ::std::string& e = "UTF-8",
                                                ::xml_schema::flags f = 0);

    void
    UserDefinedTemperatureCharacteristicActual (::std::ostream& os,
                                                const ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType& x, 
                                                ::xml_schema::error_handler& eh,
                                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                const ::std::string& e = "UTF-8",
                                                ::xml_schema::flags f = 0);

    void
    UserDefinedTemperatureCharacteristicActual (::std::ostream& os,
                                                const ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType& x, 
                                                ::xercesc::DOMErrorHandler& eh,
                                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                const ::std::string& e = "UTF-8",
                                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedTemperatureCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                                const ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType& x, 
                                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                const ::std::string& e = "UTF-8",
                                                ::xml_schema::flags f = 0);

    void
    UserDefinedTemperatureCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                                const ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType& x, 
                                                ::xml_schema::error_handler& eh,
                                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                const ::std::string& e = "UTF-8",
                                                ::xml_schema::flags f = 0);

    void
    UserDefinedTemperatureCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                                const ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType& x, 
                                                ::xercesc::DOMErrorHandler& eh,
                                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                const ::std::string& e = "UTF-8",
                                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedTemperatureCharacteristicActual (::xercesc::DOMDocument& d,
                                                const ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType& x,
                                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedTemperatureCharacteristicActual (const ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType& x, 
                                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedAreaCharacteristicActual (::std::ostream& os,
                                         const ::xsd::qif2::UserDefinedAreaCharacteristicActualType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedAreaCharacteristicActual (::std::ostream& os,
                                         const ::xsd::qif2::UserDefinedAreaCharacteristicActualType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedAreaCharacteristicActual (::std::ostream& os,
                                         const ::xsd::qif2::UserDefinedAreaCharacteristicActualType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedAreaCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::UserDefinedAreaCharacteristicActualType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedAreaCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::UserDefinedAreaCharacteristicActualType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedAreaCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::UserDefinedAreaCharacteristicActualType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedAreaCharacteristicActual (::xercesc::DOMDocument& d,
                                         const ::xsd::qif2::UserDefinedAreaCharacteristicActualType& x,
                                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedAreaCharacteristicActual (const ::xsd::qif2::UserDefinedAreaCharacteristicActualType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedForceCharacteristicActual (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedForceCharacteristicActualType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedForceCharacteristicActual (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedForceCharacteristicActualType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedForceCharacteristicActual (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedForceCharacteristicActualType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedForceCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedForceCharacteristicActualType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedForceCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedForceCharacteristicActualType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedForceCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedForceCharacteristicActualType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedForceCharacteristicActual (::xercesc::DOMDocument& d,
                                          const ::xsd::qif2::UserDefinedForceCharacteristicActualType& x,
                                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedForceCharacteristicActual (const ::xsd::qif2::UserDefinedForceCharacteristicActualType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedMassCharacteristicActual (::std::ostream& os,
                                         const ::xsd::qif2::UserDefinedMassCharacteristicActualType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedMassCharacteristicActual (::std::ostream& os,
                                         const ::xsd::qif2::UserDefinedMassCharacteristicActualType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedMassCharacteristicActual (::std::ostream& os,
                                         const ::xsd::qif2::UserDefinedMassCharacteristicActualType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedMassCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::UserDefinedMassCharacteristicActualType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedMassCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::UserDefinedMassCharacteristicActualType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedMassCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::UserDefinedMassCharacteristicActualType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedMassCharacteristicActual (::xercesc::DOMDocument& d,
                                         const ::xsd::qif2::UserDefinedMassCharacteristicActualType& x,
                                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedMassCharacteristicActual (const ::xsd::qif2::UserDefinedMassCharacteristicActualType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedPressureCharacteristicActual (::std::ostream& os,
                                             const ::xsd::qif2::UserDefinedPressureCharacteristicActualType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedPressureCharacteristicActual (::std::ostream& os,
                                             const ::xsd::qif2::UserDefinedPressureCharacteristicActualType& x, 
                                             ::xml_schema::error_handler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedPressureCharacteristicActual (::std::ostream& os,
                                             const ::xsd::qif2::UserDefinedPressureCharacteristicActualType& x, 
                                             ::xercesc::DOMErrorHandler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedPressureCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::UserDefinedPressureCharacteristicActualType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedPressureCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::UserDefinedPressureCharacteristicActualType& x, 
                                             ::xml_schema::error_handler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedPressureCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::UserDefinedPressureCharacteristicActualType& x, 
                                             ::xercesc::DOMErrorHandler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedPressureCharacteristicActual (::xercesc::DOMDocument& d,
                                             const ::xsd::qif2::UserDefinedPressureCharacteristicActualType& x,
                                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedPressureCharacteristicActual (const ::xsd::qif2::UserDefinedPressureCharacteristicActualType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedSpeedCharacteristicActual (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedSpeedCharacteristicActualType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedSpeedCharacteristicActual (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedSpeedCharacteristicActualType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedSpeedCharacteristicActual (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedSpeedCharacteristicActualType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedSpeedCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedSpeedCharacteristicActualType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedSpeedCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedSpeedCharacteristicActualType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedSpeedCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedSpeedCharacteristicActualType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedSpeedCharacteristicActual (::xercesc::DOMDocument& d,
                                          const ::xsd::qif2::UserDefinedSpeedCharacteristicActualType& x,
                                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedSpeedCharacteristicActual (const ::xsd::qif2::UserDefinedSpeedCharacteristicActualType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedTimeCharacteristicActual (::std::ostream& os,
                                         const ::xsd::qif2::UserDefinedTimeCharacteristicActualType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedTimeCharacteristicActual (::std::ostream& os,
                                         const ::xsd::qif2::UserDefinedTimeCharacteristicActualType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedTimeCharacteristicActual (::std::ostream& os,
                                         const ::xsd::qif2::UserDefinedTimeCharacteristicActualType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedTimeCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::UserDefinedTimeCharacteristicActualType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedTimeCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::UserDefinedTimeCharacteristicActualType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedTimeCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::UserDefinedTimeCharacteristicActualType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedTimeCharacteristicActual (::xercesc::DOMDocument& d,
                                         const ::xsd::qif2::UserDefinedTimeCharacteristicActualType& x,
                                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedTimeCharacteristicActual (const ::xsd::qif2::UserDefinedTimeCharacteristicActualType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedUnitCharacteristicActual (::std::ostream& os,
                                         const ::xsd::qif2::UserDefinedUnitCharacteristicActualType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedUnitCharacteristicActual (::std::ostream& os,
                                         const ::xsd::qif2::UserDefinedUnitCharacteristicActualType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedUnitCharacteristicActual (::std::ostream& os,
                                         const ::xsd::qif2::UserDefinedUnitCharacteristicActualType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedUnitCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::UserDefinedUnitCharacteristicActualType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedUnitCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::UserDefinedUnitCharacteristicActualType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedUnitCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::UserDefinedUnitCharacteristicActualType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedUnitCharacteristicActual (::xercesc::DOMDocument& d,
                                         const ::xsd::qif2::UserDefinedUnitCharacteristicActualType& x,
                                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedUnitCharacteristicActual (const ::xsd::qif2::UserDefinedUnitCharacteristicActualType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    WidthCharacteristicActual (::std::ostream& os,
                               const ::xsd::qif2::WidthCharacteristicActualType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    WidthCharacteristicActual (::std::ostream& os,
                               const ::xsd::qif2::WidthCharacteristicActualType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    WidthCharacteristicActual (::std::ostream& os,
                               const ::xsd::qif2::WidthCharacteristicActualType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    WidthCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::WidthCharacteristicActualType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    WidthCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::WidthCharacteristicActualType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    WidthCharacteristicActual (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::WidthCharacteristicActualType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    WidthCharacteristicActual (::xercesc::DOMDocument& d,
                               const ::xsd::qif2::WidthCharacteristicActualType& x,
                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    WidthCharacteristicActual (const ::xsd::qif2::WidthCharacteristicActualType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CharacteristicItem (::std::ostream& os,
                        const ::xsd::qif2::CharacteristicItemBaseType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    CharacteristicItem (::std::ostream& os,
                        const ::xsd::qif2::CharacteristicItemBaseType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    CharacteristicItem (::std::ostream& os,
                        const ::xsd::qif2::CharacteristicItemBaseType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CharacteristicItem (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::CharacteristicItemBaseType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    CharacteristicItem (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::CharacteristicItemBaseType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    CharacteristicItem (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::CharacteristicItemBaseType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CharacteristicItem (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::CharacteristicItemBaseType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CharacteristicItem (const ::xsd::qif2::CharacteristicItemBaseType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngleBetweenCharacteristicItem (::std::ostream& os,
                                    const ::xsd::qif2::AngleBetweenCharacteristicItemType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    AngleBetweenCharacteristicItem (::std::ostream& os,
                                    const ::xsd::qif2::AngleBetweenCharacteristicItemType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    AngleBetweenCharacteristicItem (::std::ostream& os,
                                    const ::xsd::qif2::AngleBetweenCharacteristicItemType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngleBetweenCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::AngleBetweenCharacteristicItemType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    AngleBetweenCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::AngleBetweenCharacteristicItemType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    AngleBetweenCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::AngleBetweenCharacteristicItemType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngleBetweenCharacteristicItem (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::AngleBetweenCharacteristicItemType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngleBetweenCharacteristicItem (const ::xsd::qif2::AngleBetweenCharacteristicItemType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngleCharacteristicItem (::std::ostream& os,
                             const ::xsd::qif2::AngleCharacteristicItemType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    AngleCharacteristicItem (::std::ostream& os,
                             const ::xsd::qif2::AngleCharacteristicItemType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    AngleCharacteristicItem (::std::ostream& os,
                             const ::xsd::qif2::AngleCharacteristicItemType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngleCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::AngleCharacteristicItemType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    AngleCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::AngleCharacteristicItemType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    AngleCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::AngleCharacteristicItemType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngleCharacteristicItem (::xercesc::DOMDocument& d,
                             const ::xsd::qif2::AngleCharacteristicItemType& x,
                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngleCharacteristicItem (const ::xsd::qif2::AngleCharacteristicItemType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngularCoordinateCharacteristicItem (::std::ostream& os,
                                         const ::xsd::qif2::AngularCoordinateCharacteristicItemType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    AngularCoordinateCharacteristicItem (::std::ostream& os,
                                         const ::xsd::qif2::AngularCoordinateCharacteristicItemType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    AngularCoordinateCharacteristicItem (::std::ostream& os,
                                         const ::xsd::qif2::AngularCoordinateCharacteristicItemType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngularCoordinateCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::AngularCoordinateCharacteristicItemType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    AngularCoordinateCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::AngularCoordinateCharacteristicItemType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    AngularCoordinateCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::AngularCoordinateCharacteristicItemType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngularCoordinateCharacteristicItem (::xercesc::DOMDocument& d,
                                         const ::xsd::qif2::AngularCoordinateCharacteristicItemType& x,
                                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngularCoordinateCharacteristicItem (const ::xsd::qif2::AngularCoordinateCharacteristicItemType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngleFromCharacteristicItem (::std::ostream& os,
                                 const ::xsd::qif2::AngleFromCharacteristicItemType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    AngleFromCharacteristicItem (::std::ostream& os,
                                 const ::xsd::qif2::AngleFromCharacteristicItemType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    AngleFromCharacteristicItem (::std::ostream& os,
                                 const ::xsd::qif2::AngleFromCharacteristicItemType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngleFromCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::AngleFromCharacteristicItemType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    AngleFromCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::AngleFromCharacteristicItemType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    AngleFromCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::AngleFromCharacteristicItemType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngleFromCharacteristicItem (::xercesc::DOMDocument& d,
                                 const ::xsd::qif2::AngleFromCharacteristicItemType& x,
                                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngleFromCharacteristicItem (const ::xsd::qif2::AngleFromCharacteristicItemType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngularityCharacteristicItem (::std::ostream& os,
                                  const ::xsd::qif2::AngularityCharacteristicItemType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    AngularityCharacteristicItem (::std::ostream& os,
                                  const ::xsd::qif2::AngularityCharacteristicItemType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    AngularityCharacteristicItem (::std::ostream& os,
                                  const ::xsd::qif2::AngularityCharacteristicItemType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngularityCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::AngularityCharacteristicItemType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    AngularityCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::AngularityCharacteristicItemType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    AngularityCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::AngularityCharacteristicItemType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngularityCharacteristicItem (::xercesc::DOMDocument& d,
                                  const ::xsd::qif2::AngularityCharacteristicItemType& x,
                                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngularityCharacteristicItem (const ::xsd::qif2::AngularityCharacteristicItemType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ChordCharacteristicItem (::std::ostream& os,
                             const ::xsd::qif2::ChordCharacteristicItemType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    ChordCharacteristicItem (::std::ostream& os,
                             const ::xsd::qif2::ChordCharacteristicItemType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    ChordCharacteristicItem (::std::ostream& os,
                             const ::xsd::qif2::ChordCharacteristicItemType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ChordCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::ChordCharacteristicItemType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    ChordCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::ChordCharacteristicItemType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    ChordCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::ChordCharacteristicItemType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ChordCharacteristicItem (::xercesc::DOMDocument& d,
                             const ::xsd::qif2::ChordCharacteristicItemType& x,
                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ChordCharacteristicItem (const ::xsd::qif2::ChordCharacteristicItemType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CircularityCharacteristicItem (::std::ostream& os,
                                   const ::xsd::qif2::CircularityCharacteristicItemType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    CircularityCharacteristicItem (::std::ostream& os,
                                   const ::xsd::qif2::CircularityCharacteristicItemType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    CircularityCharacteristicItem (::std::ostream& os,
                                   const ::xsd::qif2::CircularityCharacteristicItemType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CircularityCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::CircularityCharacteristicItemType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    CircularityCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::CircularityCharacteristicItemType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    CircularityCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::CircularityCharacteristicItemType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CircularityCharacteristicItem (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::CircularityCharacteristicItemType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CircularityCharacteristicItem (const ::xsd::qif2::CircularityCharacteristicItemType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CircularRunoutCharacteristicItem (::std::ostream& os,
                                      const ::xsd::qif2::CircularRunoutCharacteristicItemType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    CircularRunoutCharacteristicItem (::std::ostream& os,
                                      const ::xsd::qif2::CircularRunoutCharacteristicItemType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    CircularRunoutCharacteristicItem (::std::ostream& os,
                                      const ::xsd::qif2::CircularRunoutCharacteristicItemType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CircularRunoutCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::CircularRunoutCharacteristicItemType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    CircularRunoutCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::CircularRunoutCharacteristicItemType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    CircularRunoutCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::CircularRunoutCharacteristicItemType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CircularRunoutCharacteristicItem (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::CircularRunoutCharacteristicItemType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CircularRunoutCharacteristicItem (const ::xsd::qif2::CircularRunoutCharacteristicItemType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ConcentricityCharacteristicItem (::std::ostream& os,
                                     const ::xsd::qif2::ConcentricityCharacteristicItemType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    ConcentricityCharacteristicItem (::std::ostream& os,
                                     const ::xsd::qif2::ConcentricityCharacteristicItemType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    ConcentricityCharacteristicItem (::std::ostream& os,
                                     const ::xsd::qif2::ConcentricityCharacteristicItemType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ConcentricityCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::ConcentricityCharacteristicItemType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    ConcentricityCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::ConcentricityCharacteristicItemType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    ConcentricityCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::ConcentricityCharacteristicItemType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ConcentricityCharacteristicItem (::xercesc::DOMDocument& d,
                                     const ::xsd::qif2::ConcentricityCharacteristicItemType& x,
                                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ConcentricityCharacteristicItem (const ::xsd::qif2::ConcentricityCharacteristicItemType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CurveLengthCharacteristicItem (::std::ostream& os,
                                   const ::xsd::qif2::CurveLengthCharacteristicItemType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    CurveLengthCharacteristicItem (::std::ostream& os,
                                   const ::xsd::qif2::CurveLengthCharacteristicItemType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    CurveLengthCharacteristicItem (::std::ostream& os,
                                   const ::xsd::qif2::CurveLengthCharacteristicItemType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CurveLengthCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::CurveLengthCharacteristicItemType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    CurveLengthCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::CurveLengthCharacteristicItemType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    CurveLengthCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::CurveLengthCharacteristicItemType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CurveLengthCharacteristicItem (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::CurveLengthCharacteristicItemType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CurveLengthCharacteristicItem (const ::xsd::qif2::CurveLengthCharacteristicItemType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CylindricityCharacteristicItem (::std::ostream& os,
                                    const ::xsd::qif2::CylindricityCharacteristicItemType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    CylindricityCharacteristicItem (::std::ostream& os,
                                    const ::xsd::qif2::CylindricityCharacteristicItemType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    CylindricityCharacteristicItem (::std::ostream& os,
                                    const ::xsd::qif2::CylindricityCharacteristicItemType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CylindricityCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::CylindricityCharacteristicItemType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    CylindricityCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::CylindricityCharacteristicItemType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    CylindricityCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::CylindricityCharacteristicItemType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CylindricityCharacteristicItem (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::CylindricityCharacteristicItemType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CylindricityCharacteristicItem (const ::xsd::qif2::CylindricityCharacteristicItemType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    DepthCharacteristicItem (::std::ostream& os,
                             const ::xsd::qif2::DepthCharacteristicItemType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    DepthCharacteristicItem (::std::ostream& os,
                             const ::xsd::qif2::DepthCharacteristicItemType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    DepthCharacteristicItem (::std::ostream& os,
                             const ::xsd::qif2::DepthCharacteristicItemType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    DepthCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::DepthCharacteristicItemType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    DepthCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::DepthCharacteristicItemType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    DepthCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::DepthCharacteristicItemType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    DepthCharacteristicItem (::xercesc::DOMDocument& d,
                             const ::xsd::qif2::DepthCharacteristicItemType& x,
                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DepthCharacteristicItem (const ::xsd::qif2::DepthCharacteristicItemType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    DiameterCharacteristicItem (::std::ostream& os,
                                const ::xsd::qif2::DiameterCharacteristicItemType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    DiameterCharacteristicItem (::std::ostream& os,
                                const ::xsd::qif2::DiameterCharacteristicItemType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    DiameterCharacteristicItem (::std::ostream& os,
                                const ::xsd::qif2::DiameterCharacteristicItemType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    DiameterCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::DiameterCharacteristicItemType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    DiameterCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::DiameterCharacteristicItemType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    DiameterCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::DiameterCharacteristicItemType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    DiameterCharacteristicItem (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::DiameterCharacteristicItemType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DiameterCharacteristicItem (const ::xsd::qif2::DiameterCharacteristicItemType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    DistanceBetweenCharacteristicItem (::std::ostream& os,
                                       const ::xsd::qif2::DistanceBetweenCharacteristicItemType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    DistanceBetweenCharacteristicItem (::std::ostream& os,
                                       const ::xsd::qif2::DistanceBetweenCharacteristicItemType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    DistanceBetweenCharacteristicItem (::std::ostream& os,
                                       const ::xsd::qif2::DistanceBetweenCharacteristicItemType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    DistanceBetweenCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::DistanceBetweenCharacteristicItemType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    DistanceBetweenCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::DistanceBetweenCharacteristicItemType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    DistanceBetweenCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::DistanceBetweenCharacteristicItemType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    DistanceBetweenCharacteristicItem (::xercesc::DOMDocument& d,
                                       const ::xsd::qif2::DistanceBetweenCharacteristicItemType& x,
                                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DistanceBetweenCharacteristicItem (const ::xsd::qif2::DistanceBetweenCharacteristicItemType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    DistanceFromCharacteristicItem (::std::ostream& os,
                                    const ::xsd::qif2::DistanceFromCharacteristicItemType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    DistanceFromCharacteristicItem (::std::ostream& os,
                                    const ::xsd::qif2::DistanceFromCharacteristicItemType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    DistanceFromCharacteristicItem (::std::ostream& os,
                                    const ::xsd::qif2::DistanceFromCharacteristicItemType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    DistanceFromCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::DistanceFromCharacteristicItemType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    DistanceFromCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::DistanceFromCharacteristicItemType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    DistanceFromCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::DistanceFromCharacteristicItemType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    DistanceFromCharacteristicItem (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::DistanceFromCharacteristicItemType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DistanceFromCharacteristicItem (const ::xsd::qif2::DistanceFromCharacteristicItemType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FlatnessCharacteristicItem (::std::ostream& os,
                                const ::xsd::qif2::FlatnessCharacteristicItemType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    FlatnessCharacteristicItem (::std::ostream& os,
                                const ::xsd::qif2::FlatnessCharacteristicItemType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    FlatnessCharacteristicItem (::std::ostream& os,
                                const ::xsd::qif2::FlatnessCharacteristicItemType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FlatnessCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::FlatnessCharacteristicItemType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    FlatnessCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::FlatnessCharacteristicItemType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    FlatnessCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::FlatnessCharacteristicItemType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FlatnessCharacteristicItem (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::FlatnessCharacteristicItemType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FlatnessCharacteristicItem (const ::xsd::qif2::FlatnessCharacteristicItemType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    HeightCharacteristicItem (::std::ostream& os,
                              const ::xsd::qif2::HeightCharacteristicItemType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    HeightCharacteristicItem (::std::ostream& os,
                              const ::xsd::qif2::HeightCharacteristicItemType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    HeightCharacteristicItem (::std::ostream& os,
                              const ::xsd::qif2::HeightCharacteristicItemType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    HeightCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::HeightCharacteristicItemType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    HeightCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::HeightCharacteristicItemType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    HeightCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::HeightCharacteristicItemType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    HeightCharacteristicItem (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::HeightCharacteristicItemType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    HeightCharacteristicItem (const ::xsd::qif2::HeightCharacteristicItemType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LengthCharacteristicItem (::std::ostream& os,
                              const ::xsd::qif2::LengthCharacteristicItemType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    LengthCharacteristicItem (::std::ostream& os,
                              const ::xsd::qif2::LengthCharacteristicItemType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    LengthCharacteristicItem (::std::ostream& os,
                              const ::xsd::qif2::LengthCharacteristicItemType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LengthCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::LengthCharacteristicItemType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    LengthCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::LengthCharacteristicItemType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    LengthCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::LengthCharacteristicItemType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LengthCharacteristicItem (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::LengthCharacteristicItemType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LengthCharacteristicItem (const ::xsd::qif2::LengthCharacteristicItemType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LinearCoordinateCharacteristicItem (::std::ostream& os,
                                        const ::xsd::qif2::LinearCoordinateCharacteristicItemType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    LinearCoordinateCharacteristicItem (::std::ostream& os,
                                        const ::xsd::qif2::LinearCoordinateCharacteristicItemType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    LinearCoordinateCharacteristicItem (::std::ostream& os,
                                        const ::xsd::qif2::LinearCoordinateCharacteristicItemType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LinearCoordinateCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::LinearCoordinateCharacteristicItemType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    LinearCoordinateCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::LinearCoordinateCharacteristicItemType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    LinearCoordinateCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::LinearCoordinateCharacteristicItemType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LinearCoordinateCharacteristicItem (::xercesc::DOMDocument& d,
                                        const ::xsd::qif2::LinearCoordinateCharacteristicItemType& x,
                                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LinearCoordinateCharacteristicItem (const ::xsd::qif2::LinearCoordinateCharacteristicItemType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LineProfileCharacteristicItem (::std::ostream& os,
                                   const ::xsd::qif2::LineProfileCharacteristicItemType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    LineProfileCharacteristicItem (::std::ostream& os,
                                   const ::xsd::qif2::LineProfileCharacteristicItemType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    LineProfileCharacteristicItem (::std::ostream& os,
                                   const ::xsd::qif2::LineProfileCharacteristicItemType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LineProfileCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::LineProfileCharacteristicItemType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    LineProfileCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::LineProfileCharacteristicItemType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    LineProfileCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::LineProfileCharacteristicItemType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LineProfileCharacteristicItem (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::LineProfileCharacteristicItemType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LineProfileCharacteristicItem (const ::xsd::qif2::LineProfileCharacteristicItemType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ParallelismCharacteristicItem (::std::ostream& os,
                                   const ::xsd::qif2::ParallelismCharacteristicItemType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ParallelismCharacteristicItem (::std::ostream& os,
                                   const ::xsd::qif2::ParallelismCharacteristicItemType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ParallelismCharacteristicItem (::std::ostream& os,
                                   const ::xsd::qif2::ParallelismCharacteristicItemType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ParallelismCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::ParallelismCharacteristicItemType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ParallelismCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::ParallelismCharacteristicItemType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ParallelismCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::ParallelismCharacteristicItemType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ParallelismCharacteristicItem (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::ParallelismCharacteristicItemType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ParallelismCharacteristicItem (const ::xsd::qif2::ParallelismCharacteristicItemType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PerpendicularityCharacteristicItem (::std::ostream& os,
                                        const ::xsd::qif2::PerpendicularityCharacteristicItemType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    PerpendicularityCharacteristicItem (::std::ostream& os,
                                        const ::xsd::qif2::PerpendicularityCharacteristicItemType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    PerpendicularityCharacteristicItem (::std::ostream& os,
                                        const ::xsd::qif2::PerpendicularityCharacteristicItemType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PerpendicularityCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::PerpendicularityCharacteristicItemType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    PerpendicularityCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::PerpendicularityCharacteristicItemType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    PerpendicularityCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::PerpendicularityCharacteristicItemType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PerpendicularityCharacteristicItem (::xercesc::DOMDocument& d,
                                        const ::xsd::qif2::PerpendicularityCharacteristicItemType& x,
                                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PerpendicularityCharacteristicItem (const ::xsd::qif2::PerpendicularityCharacteristicItemType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PointProfileCharacteristicItem (::std::ostream& os,
                                    const ::xsd::qif2::PointProfileCharacteristicItemType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    PointProfileCharacteristicItem (::std::ostream& os,
                                    const ::xsd::qif2::PointProfileCharacteristicItemType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    PointProfileCharacteristicItem (::std::ostream& os,
                                    const ::xsd::qif2::PointProfileCharacteristicItemType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PointProfileCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::PointProfileCharacteristicItemType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    PointProfileCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::PointProfileCharacteristicItemType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    PointProfileCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::PointProfileCharacteristicItemType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PointProfileCharacteristicItem (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::PointProfileCharacteristicItemType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PointProfileCharacteristicItem (const ::xsd::qif2::PointProfileCharacteristicItemType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PositionCharacteristicItem (::std::ostream& os,
                                const ::xsd::qif2::PositionCharacteristicItemType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    PositionCharacteristicItem (::std::ostream& os,
                                const ::xsd::qif2::PositionCharacteristicItemType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    PositionCharacteristicItem (::std::ostream& os,
                                const ::xsd::qif2::PositionCharacteristicItemType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PositionCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::PositionCharacteristicItemType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    PositionCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::PositionCharacteristicItemType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    PositionCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::PositionCharacteristicItemType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PositionCharacteristicItem (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::PositionCharacteristicItemType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PositionCharacteristicItem (const ::xsd::qif2::PositionCharacteristicItemType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    RadiusCharacteristicItem (::std::ostream& os,
                              const ::xsd::qif2::RadiusCharacteristicItemType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    RadiusCharacteristicItem (::std::ostream& os,
                              const ::xsd::qif2::RadiusCharacteristicItemType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    RadiusCharacteristicItem (::std::ostream& os,
                              const ::xsd::qif2::RadiusCharacteristicItemType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    RadiusCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::RadiusCharacteristicItemType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    RadiusCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::RadiusCharacteristicItemType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    RadiusCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::RadiusCharacteristicItemType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    RadiusCharacteristicItem (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::RadiusCharacteristicItemType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    RadiusCharacteristicItem (const ::xsd::qif2::RadiusCharacteristicItemType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SquareCharacteristicItem (::std::ostream& os,
                              const ::xsd::qif2::SquareCharacteristicItemType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    SquareCharacteristicItem (::std::ostream& os,
                              const ::xsd::qif2::SquareCharacteristicItemType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    SquareCharacteristicItem (::std::ostream& os,
                              const ::xsd::qif2::SquareCharacteristicItemType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SquareCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::SquareCharacteristicItemType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    SquareCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::SquareCharacteristicItemType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    SquareCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::SquareCharacteristicItemType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SquareCharacteristicItem (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::SquareCharacteristicItemType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SquareCharacteristicItem (const ::xsd::qif2::SquareCharacteristicItemType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    StraightnessCharacteristicItem (::std::ostream& os,
                                    const ::xsd::qif2::StraightnessCharacteristicItemType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    StraightnessCharacteristicItem (::std::ostream& os,
                                    const ::xsd::qif2::StraightnessCharacteristicItemType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    StraightnessCharacteristicItem (::std::ostream& os,
                                    const ::xsd::qif2::StraightnessCharacteristicItemType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    StraightnessCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::StraightnessCharacteristicItemType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    StraightnessCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::StraightnessCharacteristicItemType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    StraightnessCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::StraightnessCharacteristicItemType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    StraightnessCharacteristicItem (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::StraightnessCharacteristicItemType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    StraightnessCharacteristicItem (const ::xsd::qif2::StraightnessCharacteristicItemType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SurfaceProfileCharacteristicItem (::std::ostream& os,
                                      const ::xsd::qif2::SurfaceProfileCharacteristicItemType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    SurfaceProfileCharacteristicItem (::std::ostream& os,
                                      const ::xsd::qif2::SurfaceProfileCharacteristicItemType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    SurfaceProfileCharacteristicItem (::std::ostream& os,
                                      const ::xsd::qif2::SurfaceProfileCharacteristicItemType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SurfaceProfileCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::SurfaceProfileCharacteristicItemType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    SurfaceProfileCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::SurfaceProfileCharacteristicItemType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    SurfaceProfileCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::SurfaceProfileCharacteristicItemType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SurfaceProfileCharacteristicItem (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::SurfaceProfileCharacteristicItemType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SurfaceProfileCharacteristicItem (const ::xsd::qif2::SurfaceProfileCharacteristicItemType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SurfaceProfileNonUniformCharacteristicItem (::std::ostream& os,
                                                const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType& x, 
                                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                const ::std::string& e = "UTF-8",
                                                ::xml_schema::flags f = 0);

    void
    SurfaceProfileNonUniformCharacteristicItem (::std::ostream& os,
                                                const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType& x, 
                                                ::xml_schema::error_handler& eh,
                                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                const ::std::string& e = "UTF-8",
                                                ::xml_schema::flags f = 0);

    void
    SurfaceProfileNonUniformCharacteristicItem (::std::ostream& os,
                                                const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType& x, 
                                                ::xercesc::DOMErrorHandler& eh,
                                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                const ::std::string& e = "UTF-8",
                                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SurfaceProfileNonUniformCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                                const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType& x, 
                                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                const ::std::string& e = "UTF-8",
                                                ::xml_schema::flags f = 0);

    void
    SurfaceProfileNonUniformCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                                const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType& x, 
                                                ::xml_schema::error_handler& eh,
                                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                const ::std::string& e = "UTF-8",
                                                ::xml_schema::flags f = 0);

    void
    SurfaceProfileNonUniformCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                                const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType& x, 
                                                ::xercesc::DOMErrorHandler& eh,
                                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                const ::std::string& e = "UTF-8",
                                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SurfaceProfileNonUniformCharacteristicItem (::xercesc::DOMDocument& d,
                                                const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType& x,
                                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SurfaceProfileNonUniformCharacteristicItem (const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType& x, 
                                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SurfaceTextureCharacteristicItem (::std::ostream& os,
                                      const ::xsd::qif2::SurfaceTextureCharacteristicItemType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    SurfaceTextureCharacteristicItem (::std::ostream& os,
                                      const ::xsd::qif2::SurfaceTextureCharacteristicItemType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    SurfaceTextureCharacteristicItem (::std::ostream& os,
                                      const ::xsd::qif2::SurfaceTextureCharacteristicItemType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SurfaceTextureCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::SurfaceTextureCharacteristicItemType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    SurfaceTextureCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::SurfaceTextureCharacteristicItemType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    SurfaceTextureCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::SurfaceTextureCharacteristicItemType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SurfaceTextureCharacteristicItem (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::SurfaceTextureCharacteristicItemType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SurfaceTextureCharacteristicItem (const ::xsd::qif2::SurfaceTextureCharacteristicItemType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SymmetryCharacteristicItem (::std::ostream& os,
                                const ::xsd::qif2::SymmetryCharacteristicItemType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    SymmetryCharacteristicItem (::std::ostream& os,
                                const ::xsd::qif2::SymmetryCharacteristicItemType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    SymmetryCharacteristicItem (::std::ostream& os,
                                const ::xsd::qif2::SymmetryCharacteristicItemType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SymmetryCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::SymmetryCharacteristicItemType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    SymmetryCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::SymmetryCharacteristicItemType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    SymmetryCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::SymmetryCharacteristicItemType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SymmetryCharacteristicItem (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::SymmetryCharacteristicItemType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SymmetryCharacteristicItem (const ::xsd::qif2::SymmetryCharacteristicItemType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ThicknessCharacteristicItem (::std::ostream& os,
                                 const ::xsd::qif2::ThicknessCharacteristicItemType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    ThicknessCharacteristicItem (::std::ostream& os,
                                 const ::xsd::qif2::ThicknessCharacteristicItemType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    ThicknessCharacteristicItem (::std::ostream& os,
                                 const ::xsd::qif2::ThicknessCharacteristicItemType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ThicknessCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::ThicknessCharacteristicItemType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    ThicknessCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::ThicknessCharacteristicItemType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    ThicknessCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::ThicknessCharacteristicItemType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ThicknessCharacteristicItem (::xercesc::DOMDocument& d,
                                 const ::xsd::qif2::ThicknessCharacteristicItemType& x,
                                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ThicknessCharacteristicItem (const ::xsd::qif2::ThicknessCharacteristicItemType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ThreadCharacteristicItem (::std::ostream& os,
                              const ::xsd::qif2::ThreadCharacteristicItemType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    ThreadCharacteristicItem (::std::ostream& os,
                              const ::xsd::qif2::ThreadCharacteristicItemType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    ThreadCharacteristicItem (::std::ostream& os,
                              const ::xsd::qif2::ThreadCharacteristicItemType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ThreadCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::ThreadCharacteristicItemType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    ThreadCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::ThreadCharacteristicItemType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    ThreadCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::ThreadCharacteristicItemType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ThreadCharacteristicItem (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::ThreadCharacteristicItemType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ThreadCharacteristicItem (const ::xsd::qif2::ThreadCharacteristicItemType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    TotalRunoutCharacteristicItem (::std::ostream& os,
                                   const ::xsd::qif2::TotalRunoutCharacteristicItemType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    TotalRunoutCharacteristicItem (::std::ostream& os,
                                   const ::xsd::qif2::TotalRunoutCharacteristicItemType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    TotalRunoutCharacteristicItem (::std::ostream& os,
                                   const ::xsd::qif2::TotalRunoutCharacteristicItemType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    TotalRunoutCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::TotalRunoutCharacteristicItemType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    TotalRunoutCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::TotalRunoutCharacteristicItemType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    TotalRunoutCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::TotalRunoutCharacteristicItemType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    TotalRunoutCharacteristicItem (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::TotalRunoutCharacteristicItemType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    TotalRunoutCharacteristicItem (const ::xsd::qif2::TotalRunoutCharacteristicItemType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedAttributeCharacteristicItem (::std::ostream& os,
                                            const ::xsd::qif2::UserDefinedAttributeCharacteristicItemType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    UserDefinedAttributeCharacteristicItem (::std::ostream& os,
                                            const ::xsd::qif2::UserDefinedAttributeCharacteristicItemType& x, 
                                            ::xml_schema::error_handler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    UserDefinedAttributeCharacteristicItem (::std::ostream& os,
                                            const ::xsd::qif2::UserDefinedAttributeCharacteristicItemType& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedAttributeCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::UserDefinedAttributeCharacteristicItemType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    UserDefinedAttributeCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::UserDefinedAttributeCharacteristicItemType& x, 
                                            ::xml_schema::error_handler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    UserDefinedAttributeCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::UserDefinedAttributeCharacteristicItemType& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedAttributeCharacteristicItem (::xercesc::DOMDocument& d,
                                            const ::xsd::qif2::UserDefinedAttributeCharacteristicItemType& x,
                                            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedAttributeCharacteristicItem (const ::xsd::qif2::UserDefinedAttributeCharacteristicItemType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedLinearCharacteristicItem (::std::ostream& os,
                                         const ::xsd::qif2::UserDefinedLinearCharacteristicItemType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedLinearCharacteristicItem (::std::ostream& os,
                                         const ::xsd::qif2::UserDefinedLinearCharacteristicItemType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedLinearCharacteristicItem (::std::ostream& os,
                                         const ::xsd::qif2::UserDefinedLinearCharacteristicItemType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedLinearCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::UserDefinedLinearCharacteristicItemType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedLinearCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::UserDefinedLinearCharacteristicItemType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedLinearCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::UserDefinedLinearCharacteristicItemType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedLinearCharacteristicItem (::xercesc::DOMDocument& d,
                                         const ::xsd::qif2::UserDefinedLinearCharacteristicItemType& x,
                                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedLinearCharacteristicItem (const ::xsd::qif2::UserDefinedLinearCharacteristicItemType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedAngularCharacteristicItem (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedAngularCharacteristicItemType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedAngularCharacteristicItem (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedAngularCharacteristicItemType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedAngularCharacteristicItem (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedAngularCharacteristicItemType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedAngularCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedAngularCharacteristicItemType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedAngularCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedAngularCharacteristicItemType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedAngularCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedAngularCharacteristicItemType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedAngularCharacteristicItem (::xercesc::DOMDocument& d,
                                          const ::xsd::qif2::UserDefinedAngularCharacteristicItemType& x,
                                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedAngularCharacteristicItem (const ::xsd::qif2::UserDefinedAngularCharacteristicItemType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedTemperatureCharacteristicItem (::std::ostream& os,
                                              const ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    UserDefinedTemperatureCharacteristicItem (::std::ostream& os,
                                              const ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType& x, 
                                              ::xml_schema::error_handler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    UserDefinedTemperatureCharacteristicItem (::std::ostream& os,
                                              const ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType& x, 
                                              ::xercesc::DOMErrorHandler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedTemperatureCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                              const ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    UserDefinedTemperatureCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                              const ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType& x, 
                                              ::xml_schema::error_handler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    void
    UserDefinedTemperatureCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                              const ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType& x, 
                                              ::xercesc::DOMErrorHandler& eh,
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              const ::std::string& e = "UTF-8",
                                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedTemperatureCharacteristicItem (::xercesc::DOMDocument& d,
                                              const ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType& x,
                                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedTemperatureCharacteristicItem (const ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType& x, 
                                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedAreaCharacteristicItem (::std::ostream& os,
                                       const ::xsd::qif2::UserDefinedAreaCharacteristicItemType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    UserDefinedAreaCharacteristicItem (::std::ostream& os,
                                       const ::xsd::qif2::UserDefinedAreaCharacteristicItemType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    UserDefinedAreaCharacteristicItem (::std::ostream& os,
                                       const ::xsd::qif2::UserDefinedAreaCharacteristicItemType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedAreaCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::UserDefinedAreaCharacteristicItemType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    UserDefinedAreaCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::UserDefinedAreaCharacteristicItemType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    UserDefinedAreaCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::UserDefinedAreaCharacteristicItemType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedAreaCharacteristicItem (::xercesc::DOMDocument& d,
                                       const ::xsd::qif2::UserDefinedAreaCharacteristicItemType& x,
                                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedAreaCharacteristicItem (const ::xsd::qif2::UserDefinedAreaCharacteristicItemType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedForceCharacteristicItem (::std::ostream& os,
                                        const ::xsd::qif2::UserDefinedForceCharacteristicItemType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedForceCharacteristicItem (::std::ostream& os,
                                        const ::xsd::qif2::UserDefinedForceCharacteristicItemType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedForceCharacteristicItem (::std::ostream& os,
                                        const ::xsd::qif2::UserDefinedForceCharacteristicItemType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedForceCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::UserDefinedForceCharacteristicItemType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedForceCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::UserDefinedForceCharacteristicItemType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedForceCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::UserDefinedForceCharacteristicItemType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedForceCharacteristicItem (::xercesc::DOMDocument& d,
                                        const ::xsd::qif2::UserDefinedForceCharacteristicItemType& x,
                                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedForceCharacteristicItem (const ::xsd::qif2::UserDefinedForceCharacteristicItemType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedMassCharacteristicItem (::std::ostream& os,
                                       const ::xsd::qif2::UserDefinedMassCharacteristicItemType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    UserDefinedMassCharacteristicItem (::std::ostream& os,
                                       const ::xsd::qif2::UserDefinedMassCharacteristicItemType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    UserDefinedMassCharacteristicItem (::std::ostream& os,
                                       const ::xsd::qif2::UserDefinedMassCharacteristicItemType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedMassCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::UserDefinedMassCharacteristicItemType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    UserDefinedMassCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::UserDefinedMassCharacteristicItemType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    UserDefinedMassCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::UserDefinedMassCharacteristicItemType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedMassCharacteristicItem (::xercesc::DOMDocument& d,
                                       const ::xsd::qif2::UserDefinedMassCharacteristicItemType& x,
                                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedMassCharacteristicItem (const ::xsd::qif2::UserDefinedMassCharacteristicItemType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedPressureCharacteristicItem (::std::ostream& os,
                                           const ::xsd::qif2::UserDefinedPressureCharacteristicItemType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    UserDefinedPressureCharacteristicItem (::std::ostream& os,
                                           const ::xsd::qif2::UserDefinedPressureCharacteristicItemType& x, 
                                           ::xml_schema::error_handler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    UserDefinedPressureCharacteristicItem (::std::ostream& os,
                                           const ::xsd::qif2::UserDefinedPressureCharacteristicItemType& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedPressureCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::UserDefinedPressureCharacteristicItemType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    UserDefinedPressureCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::UserDefinedPressureCharacteristicItemType& x, 
                                           ::xml_schema::error_handler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    UserDefinedPressureCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::UserDefinedPressureCharacteristicItemType& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedPressureCharacteristicItem (::xercesc::DOMDocument& d,
                                           const ::xsd::qif2::UserDefinedPressureCharacteristicItemType& x,
                                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedPressureCharacteristicItem (const ::xsd::qif2::UserDefinedPressureCharacteristicItemType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedSpeedCharacteristicItem (::std::ostream& os,
                                        const ::xsd::qif2::UserDefinedSpeedCharacteristicItemType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedSpeedCharacteristicItem (::std::ostream& os,
                                        const ::xsd::qif2::UserDefinedSpeedCharacteristicItemType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedSpeedCharacteristicItem (::std::ostream& os,
                                        const ::xsd::qif2::UserDefinedSpeedCharacteristicItemType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedSpeedCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::UserDefinedSpeedCharacteristicItemType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedSpeedCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::UserDefinedSpeedCharacteristicItemType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedSpeedCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::UserDefinedSpeedCharacteristicItemType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedSpeedCharacteristicItem (::xercesc::DOMDocument& d,
                                        const ::xsd::qif2::UserDefinedSpeedCharacteristicItemType& x,
                                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedSpeedCharacteristicItem (const ::xsd::qif2::UserDefinedSpeedCharacteristicItemType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedTimeCharacteristicItem (::std::ostream& os,
                                       const ::xsd::qif2::UserDefinedTimeCharacteristicItemType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    UserDefinedTimeCharacteristicItem (::std::ostream& os,
                                       const ::xsd::qif2::UserDefinedTimeCharacteristicItemType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    UserDefinedTimeCharacteristicItem (::std::ostream& os,
                                       const ::xsd::qif2::UserDefinedTimeCharacteristicItemType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedTimeCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::UserDefinedTimeCharacteristicItemType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    UserDefinedTimeCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::UserDefinedTimeCharacteristicItemType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    UserDefinedTimeCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::UserDefinedTimeCharacteristicItemType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedTimeCharacteristicItem (::xercesc::DOMDocument& d,
                                       const ::xsd::qif2::UserDefinedTimeCharacteristicItemType& x,
                                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedTimeCharacteristicItem (const ::xsd::qif2::UserDefinedTimeCharacteristicItemType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedUnitCharacteristicItem (::std::ostream& os,
                                       const ::xsd::qif2::UserDefinedUnitCharacteristicItemType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    UserDefinedUnitCharacteristicItem (::std::ostream& os,
                                       const ::xsd::qif2::UserDefinedUnitCharacteristicItemType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    UserDefinedUnitCharacteristicItem (::std::ostream& os,
                                       const ::xsd::qif2::UserDefinedUnitCharacteristicItemType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedUnitCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::UserDefinedUnitCharacteristicItemType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    UserDefinedUnitCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::UserDefinedUnitCharacteristicItemType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    UserDefinedUnitCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::UserDefinedUnitCharacteristicItemType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedUnitCharacteristicItem (::xercesc::DOMDocument& d,
                                       const ::xsd::qif2::UserDefinedUnitCharacteristicItemType& x,
                                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedUnitCharacteristicItem (const ::xsd::qif2::UserDefinedUnitCharacteristicItemType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    WidthCharacteristicItem (::std::ostream& os,
                             const ::xsd::qif2::WidthCharacteristicItemType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    WidthCharacteristicItem (::std::ostream& os,
                             const ::xsd::qif2::WidthCharacteristicItemType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    WidthCharacteristicItem (::std::ostream& os,
                             const ::xsd::qif2::WidthCharacteristicItemType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    WidthCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::WidthCharacteristicItemType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    WidthCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::WidthCharacteristicItemType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    WidthCharacteristicItem (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::WidthCharacteristicItemType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    WidthCharacteristicItem (::xercesc::DOMDocument& d,
                             const ::xsd::qif2::WidthCharacteristicItemType& x,
                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    WidthCharacteristicItem (const ::xsd::qif2::WidthCharacteristicItemType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CHARACTERISTICS_HXX

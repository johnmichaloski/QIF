// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Visualization.hxx"

namespace xsd
{
  namespace qif2
  {
    // VisualizationSetType
    // 

    const VisualizationSetType::Fonts_type& VisualizationSetType::
    Fonts () const
    {
      return this->Fonts_.get ();
    }

    VisualizationSetType::Fonts_type& VisualizationSetType::
    Fonts ()
    {
      return this->Fonts_.get ();
    }

    void VisualizationSetType::
    Fonts (const Fonts_type& x)
    {
      this->Fonts_.set (x);
    }

    void VisualizationSetType::
    Fonts (::std::auto_ptr< Fonts_type > x)
    {
      this->Fonts_.set (x);
    }

    const VisualizationSetType::PMIDisplaySet_type& VisualizationSetType::
    PMIDisplaySet () const
    {
      return this->PMIDisplaySet_.get ();
    }

    VisualizationSetType::PMIDisplaySet_type& VisualizationSetType::
    PMIDisplaySet ()
    {
      return this->PMIDisplaySet_.get ();
    }

    void VisualizationSetType::
    PMIDisplaySet (const PMIDisplaySet_type& x)
    {
      this->PMIDisplaySet_.set (x);
    }

    void VisualizationSetType::
    PMIDisplaySet (::std::auto_ptr< PMIDisplaySet_type > x)
    {
      this->PMIDisplaySet_.set (x);
    }


    // FontsType
    // 

    const FontsType::Font_sequence& FontsType::
    Font () const
    {
      return this->Font_;
    }

    FontsType::Font_sequence& FontsType::
    Font ()
    {
      return this->Font_;
    }

    void FontsType::
    Font (const Font_sequence& s)
    {
      this->Font_ = s;
    }

    const FontsType::N_type& FontsType::
    N () const
    {
      return this->N_.get ();
    }

    FontsType::N_type& FontsType::
    N ()
    {
      return this->N_.get ();
    }

    void FontsType::
    N (const N_type& x)
    {
      this->N_.set (x);
    }

    void FontsType::
    N (::std::auto_ptr< N_type > x)
    {
      this->N_.set (x);
    }


    // FontType
    // 

    const FontType::Attributes_optional& FontType::
    Attributes () const
    {
      return this->Attributes_;
    }

    FontType::Attributes_optional& FontType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void FontType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void FontType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void FontType::
    Attributes (::std::auto_ptr< Attributes_type > x)
    {
      this->Attributes_.set (x);
    }

    const FontType::Name_type& FontType::
    Name () const
    {
      return this->Name_.get ();
    }

    FontType::Name_type& FontType::
    Name ()
    {
      return this->Name_.get ();
    }

    void FontType::
    Name (const Name_type& x)
    {
      this->Name_.set (x);
    }

    void FontType::
    Name (::std::auto_ptr< Name_type > x)
    {
      this->Name_.set (x);
    }

    const FontType::Size_type& FontType::
    Size () const
    {
      return this->Size_.get ();
    }

    FontType::Size_type& FontType::
    Size ()
    {
      return this->Size_.get ();
    }

    void FontType::
    Size (const Size_type& x)
    {
      this->Size_.set (x);
    }

    void FontType::
    Size (::std::auto_ptr< Size_type > x)
    {
      this->Size_.set (x);
    }

    const FontType::index_type& FontType::
    index () const
    {
      return this->index_.get ();
    }

    FontType::index_type& FontType::
    index ()
    {
      return this->index_.get ();
    }

    void FontType::
    index (const index_type& x)
    {
      this->index_.set (x);
    }

    const FontType::bold_type& FontType::
    bold () const
    {
      return this->bold_.get ();
    }

    FontType::bold_type& FontType::
    bold ()
    {
      return this->bold_.get ();
    }

    void FontType::
    bold (const bold_type& x)
    {
      this->bold_.set (x);
    }

    FontType::bold_type FontType::
    bold_default_value ()
    {
      return bold_type (false);
    }

    const FontType::italic_type& FontType::
    italic () const
    {
      return this->italic_.get ();
    }

    FontType::italic_type& FontType::
    italic ()
    {
      return this->italic_.get ();
    }

    void FontType::
    italic (const italic_type& x)
    {
      this->italic_.set (x);
    }

    FontType::italic_type FontType::
    italic_default_value ()
    {
      return italic_type (false);
    }

    const FontType::underline_type& FontType::
    underline () const
    {
      return this->underline_.get ();
    }

    FontType::underline_type& FontType::
    underline ()
    {
      return this->underline_.get ();
    }

    void FontType::
    underline (const underline_type& x)
    {
      this->underline_.set (x);
    }

    FontType::underline_type FontType::
    underline_default_value ()
    {
      return underline_type (false);
    }


    // PMIDisplaySetType
    // 

    const PMIDisplaySetType::PMIDisplay_sequence& PMIDisplaySetType::
    PMIDisplay () const
    {
      return this->PMIDisplay_;
    }

    PMIDisplaySetType::PMIDisplay_sequence& PMIDisplaySetType::
    PMIDisplay ()
    {
      return this->PMIDisplay_;
    }

    void PMIDisplaySetType::
    PMIDisplay (const PMIDisplay_sequence& s)
    {
      this->PMIDisplay_ = s;
    }


    // PMIDisplayType
    // 

    const PMIDisplayType::Attributes_optional& PMIDisplayType::
    Attributes () const
    {
      return this->Attributes_;
    }

    PMIDisplayType::Attributes_optional& PMIDisplayType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void PMIDisplayType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void PMIDisplayType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void PMIDisplayType::
    Attributes (::std::auto_ptr< Attributes_type > x)
    {
      this->Attributes_.set (x);
    }

    const PMIDisplayType::Color_optional& PMIDisplayType::
    Color () const
    {
      return this->Color_;
    }

    PMIDisplayType::Color_optional& PMIDisplayType::
    Color ()
    {
      return this->Color_;
    }

    void PMIDisplayType::
    Color (const Color_type& x)
    {
      this->Color_.set (x);
    }

    void PMIDisplayType::
    Color (const Color_optional& x)
    {
      this->Color_ = x;
    }

    void PMIDisplayType::
    Color (::std::auto_ptr< Color_type > x)
    {
      this->Color_.set (x);
    }

    const PMIDisplayType::Plane_optional& PMIDisplayType::
    Plane () const
    {
      return this->Plane_;
    }

    PMIDisplayType::Plane_optional& PMIDisplayType::
    Plane ()
    {
      return this->Plane_;
    }

    void PMIDisplayType::
    Plane (const Plane_type& x)
    {
      this->Plane_.set (x);
    }

    void PMIDisplayType::
    Plane (const Plane_optional& x)
    {
      this->Plane_ = x;
    }

    void PMIDisplayType::
    Plane (::std::auto_ptr< Plane_type > x)
    {
      this->Plane_.set (x);
    }

    const PMIDisplayType::Texts_optional& PMIDisplayType::
    Texts () const
    {
      return this->Texts_;
    }

    PMIDisplayType::Texts_optional& PMIDisplayType::
    Texts ()
    {
      return this->Texts_;
    }

    void PMIDisplayType::
    Texts (const Texts_type& x)
    {
      this->Texts_.set (x);
    }

    void PMIDisplayType::
    Texts (const Texts_optional& x)
    {
      this->Texts_ = x;
    }

    void PMIDisplayType::
    Texts (::std::auto_ptr< Texts_type > x)
    {
      this->Texts_.set (x);
    }

    const PMIDisplayType::Leader_sequence& PMIDisplayType::
    Leader () const
    {
      return this->Leader_;
    }

    PMIDisplayType::Leader_sequence& PMIDisplayType::
    Leader ()
    {
      return this->Leader_;
    }

    void PMIDisplayType::
    Leader (const Leader_sequence& s)
    {
      this->Leader_ = s;
    }

    const PMIDisplayType::WitnessLines_optional& PMIDisplayType::
    WitnessLines () const
    {
      return this->WitnessLines_;
    }

    PMIDisplayType::WitnessLines_optional& PMIDisplayType::
    WitnessLines ()
    {
      return this->WitnessLines_;
    }

    void PMIDisplayType::
    WitnessLines (const WitnessLines_type& x)
    {
      this->WitnessLines_.set (x);
    }

    void PMIDisplayType::
    WitnessLines (const WitnessLines_optional& x)
    {
      this->WitnessLines_ = x;
    }

    void PMIDisplayType::
    WitnessLines (::std::auto_ptr< WitnessLines_type > x)
    {
      this->WitnessLines_.set (x);
    }

    const PMIDisplayType::Frames_optional& PMIDisplayType::
    Frames () const
    {
      return this->Frames_;
    }

    PMIDisplayType::Frames_optional& PMIDisplayType::
    Frames ()
    {
      return this->Frames_;
    }

    void PMIDisplayType::
    Frames (const Frames_type& x)
    {
      this->Frames_.set (x);
    }

    void PMIDisplayType::
    Frames (const Frames_optional& x)
    {
      this->Frames_ = x;
    }

    void PMIDisplayType::
    Frames (::std::auto_ptr< Frames_type > x)
    {
      this->Frames_.set (x);
    }

    const PMIDisplayType::Balloon_optional& PMIDisplayType::
    Balloon () const
    {
      return this->Balloon_;
    }

    PMIDisplayType::Balloon_optional& PMIDisplayType::
    Balloon ()
    {
      return this->Balloon_;
    }

    void PMIDisplayType::
    Balloon (const Balloon_type& x)
    {
      this->Balloon_.set (x);
    }

    void PMIDisplayType::
    Balloon (const Balloon_optional& x)
    {
      this->Balloon_ = x;
    }

    void PMIDisplayType::
    Balloon (::std::auto_ptr< Balloon_type > x)
    {
      this->Balloon_.set (x);
    }

    const PMIDisplayType::Reference_type& PMIDisplayType::
    Reference () const
    {
      return this->Reference_.get ();
    }

    PMIDisplayType::Reference_type& PMIDisplayType::
    Reference ()
    {
      return this->Reference_.get ();
    }

    void PMIDisplayType::
    Reference (const Reference_type& x)
    {
      this->Reference_.set (x);
    }

    void PMIDisplayType::
    Reference (::std::auto_ptr< Reference_type > x)
    {
      this->Reference_.set (x);
    }


    // LeaderType
    // 

    const LeaderType::HeadForm_type& LeaderType::
    HeadForm () const
    {
      return this->HeadForm_.get ();
    }

    LeaderType::HeadForm_type& LeaderType::
    HeadForm ()
    {
      return this->HeadForm_.get ();
    }

    void LeaderType::
    HeadForm (const HeadForm_type& x)
    {
      this->HeadForm_.set (x);
    }

    void LeaderType::
    HeadForm (::std::auto_ptr< HeadForm_type > x)
    {
      this->HeadForm_.set (x);
    }

    const LeaderType::HeadHeight_type& LeaderType::
    HeadHeight () const
    {
      return this->HeadHeight_.get ();
    }

    LeaderType::HeadHeight_type& LeaderType::
    HeadHeight ()
    {
      return this->HeadHeight_.get ();
    }

    void LeaderType::
    HeadHeight (const HeadHeight_type& x)
    {
      this->HeadHeight_.set (x);
    }


    // LeaderExtendType
    // 

    const LeaderExtendType::PointExtension_type& LeaderExtendType::
    PointExtension () const
    {
      return this->PointExtension_.get ();
    }

    LeaderExtendType::PointExtension_type& LeaderExtendType::
    PointExtension ()
    {
      return this->PointExtension_.get ();
    }

    void LeaderExtendType::
    PointExtension (const PointExtension_type& x)
    {
      this->PointExtension_.set (x);
    }

    void LeaderExtendType::
    PointExtension (::std::auto_ptr< PointExtension_type > x)
    {
      this->PointExtension_.set (x);
    }


    // LeaderDoubleHeadType
    // 

    const LeaderDoubleHeadType::HeadForm2_type& LeaderDoubleHeadType::
    HeadForm2 () const
    {
      return this->HeadForm2_.get ();
    }

    LeaderDoubleHeadType::HeadForm2_type& LeaderDoubleHeadType::
    HeadForm2 ()
    {
      return this->HeadForm2_.get ();
    }

    void LeaderDoubleHeadType::
    HeadForm2 (const HeadForm2_type& x)
    {
      this->HeadForm2_.set (x);
    }

    void LeaderDoubleHeadType::
    HeadForm2 (::std::auto_ptr< HeadForm2_type > x)
    {
      this->HeadForm2_.set (x);
    }

    const LeaderDoubleHeadType::PointConnection_type& LeaderDoubleHeadType::
    PointConnection () const
    {
      return this->PointConnection_.get ();
    }

    LeaderDoubleHeadType::PointConnection_type& LeaderDoubleHeadType::
    PointConnection ()
    {
      return this->PointConnection_.get ();
    }

    void LeaderDoubleHeadType::
    PointConnection (const PointConnection_type& x)
    {
      this->PointConnection_.set (x);
    }

    void LeaderDoubleHeadType::
    PointConnection (::std::auto_ptr< PointConnection_type > x)
    {
      this->PointConnection_.set (x);
    }


    // LeaderDoubleHeadExtendType
    // 

    const LeaderDoubleHeadExtendType::PointExtension_type& LeaderDoubleHeadExtendType::
    PointExtension () const
    {
      return this->PointExtension_.get ();
    }

    LeaderDoubleHeadExtendType::PointExtension_type& LeaderDoubleHeadExtendType::
    PointExtension ()
    {
      return this->PointExtension_.get ();
    }

    void LeaderDoubleHeadExtendType::
    PointExtension (const PointExtension_type& x)
    {
      this->PointExtension_.set (x);
    }

    void LeaderDoubleHeadExtendType::
    PointExtension (::std::auto_ptr< PointExtension_type > x)
    {
      this->PointExtension_.set (x);
    }


    // LeaderCircularType
    // 

    const LeaderCircularType::Center_type& LeaderCircularType::
    Center () const
    {
      return this->Center_.get ();
    }

    LeaderCircularType::Center_type& LeaderCircularType::
    Center ()
    {
      return this->Center_.get ();
    }

    void LeaderCircularType::
    Center (const Center_type& x)
    {
      this->Center_.set (x);
    }

    void LeaderCircularType::
    Center (::std::auto_ptr< Center_type > x)
    {
      this->Center_.set (x);
    }


    // LeaderDoubleHeadCircularType
    // 

    const LeaderDoubleHeadCircularType::Center_type& LeaderDoubleHeadCircularType::
    Center () const
    {
      return this->Center_.get ();
    }

    LeaderDoubleHeadCircularType::Center_type& LeaderDoubleHeadCircularType::
    Center ()
    {
      return this->Center_.get ();
    }

    void LeaderDoubleHeadCircularType::
    Center (const Center_type& x)
    {
      this->Center_.set (x);
    }

    void LeaderDoubleHeadCircularType::
    Center (::std::auto_ptr< Center_type > x)
    {
      this->Center_.set (x);
    }


    // BalloonType
    // 

    const BalloonType::sub_optional& BalloonType::
    sub () const
    {
      return this->sub_;
    }

    BalloonType::sub_optional& BalloonType::
    sub ()
    {
      return this->sub_;
    }

    void BalloonType::
    sub (const sub_type& x)
    {
      this->sub_.set (x);
    }

    void BalloonType::
    sub (const sub_optional& x)
    {
      this->sub_ = x;
    }

    void BalloonType::
    sub (::std::auto_ptr< sub_type > x)
    {
      this->sub_.set (x);
    }


    // TextsType
    // 

    const TextsType::Text_sequence& TextsType::
    Text () const
    {
      return this->Text_;
    }

    TextsType::Text_sequence& TextsType::
    Text ()
    {
      return this->Text_;
    }

    void TextsType::
    Text (const Text_sequence& s)
    {
      this->Text_ = s;
    }

    const TextsType::fontIndex_type& TextsType::
    fontIndex () const
    {
      return this->fontIndex_.get ();
    }

    TextsType::fontIndex_type& TextsType::
    fontIndex ()
    {
      return this->fontIndex_.get ();
    }

    void TextsType::
    fontIndex (const fontIndex_type& x)
    {
      this->fontIndex_.set (x);
    }

    const TextsType::lineHeight_optional& TextsType::
    lineHeight () const
    {
      return this->lineHeight_;
    }

    TextsType::lineHeight_optional& TextsType::
    lineHeight ()
    {
      return this->lineHeight_;
    }

    void TextsType::
    lineHeight (const lineHeight_type& x)
    {
      this->lineHeight_.set (x);
    }

    void TextsType::
    lineHeight (const lineHeight_optional& x)
    {
      this->lineHeight_ = x;
    }

    const TextsType::N_type& TextsType::
    N () const
    {
      return this->N_.get ();
    }

    TextsType::N_type& TextsType::
    N ()
    {
      return this->N_.get ();
    }

    void TextsType::
    N (const N_type& x)
    {
      this->N_.set (x);
    }

    void TextsType::
    N (::std::auto_ptr< N_type > x)
    {
      this->N_.set (x);
    }


    // FramesType
    // 

    const FramesType::Frame_sequence& FramesType::
    Frame () const
    {
      return this->Frame_;
    }

    FramesType::Frame_sequence& FramesType::
    Frame ()
    {
      return this->Frame_;
    }

    void FramesType::
    Frame (const Frame_sequence& s)
    {
      this->Frame_ = s;
    }

    const FramesType::N_type& FramesType::
    N () const
    {
      return this->N_.get ();
    }

    FramesType::N_type& FramesType::
    N ()
    {
      return this->N_.get ();
    }

    void FramesType::
    N (const N_type& x)
    {
      this->N_.set (x);
    }

    void FramesType::
    N (::std::auto_ptr< N_type > x)
    {
      this->N_.set (x);
    }


    // TextType
    // 

    const TextType::Data_type& TextType::
    Data () const
    {
      return this->Data_.get ();
    }

    TextType::Data_type& TextType::
    Data ()
    {
      return this->Data_.get ();
    }

    void TextType::
    Data (const Data_type& x)
    {
      this->Data_.set (x);
    }

    void TextType::
    Data (::std::auto_ptr< Data_type > x)
    {
      this->Data_.set (x);
    }

    const TextType::XY_type& TextType::
    XY () const
    {
      return this->XY_.get ();
    }

    TextType::XY_type& TextType::
    XY ()
    {
      return this->XY_.get ();
    }

    void TextType::
    XY (const XY_type& x)
    {
      this->XY_.set (x);
    }

    void TextType::
    XY (::std::auto_ptr< XY_type > x)
    {
      this->XY_.set (x);
    }


    // WitnessLinesType
    // 

    const WitnessLinesType::Segment1_type& WitnessLinesType::
    Segment1 () const
    {
      return this->Segment1_.get ();
    }

    WitnessLinesType::Segment1_type& WitnessLinesType::
    Segment1 ()
    {
      return this->Segment1_.get ();
    }

    void WitnessLinesType::
    Segment1 (const Segment1_type& x)
    {
      this->Segment1_.set (x);
    }

    void WitnessLinesType::
    Segment1 (::std::auto_ptr< Segment1_type > x)
    {
      this->Segment1_.set (x);
    }

    const WitnessLinesType::Segment2_type& WitnessLinesType::
    Segment2 () const
    {
      return this->Segment2_.get ();
    }

    WitnessLinesType::Segment2_type& WitnessLinesType::
    Segment2 ()
    {
      return this->Segment2_.get ();
    }

    void WitnessLinesType::
    Segment2 (const Segment2_type& x)
    {
      this->Segment2_.set (x);
    }

    void WitnessLinesType::
    Segment2 (::std::auto_ptr< Segment2_type > x)
    {
      this->Segment2_.set (x);
    }

    const WitnessLinesType::width_type& WitnessLinesType::
    width () const
    {
      return this->width_.get ();
    }

    WitnessLinesType::width_type& WitnessLinesType::
    width ()
    {
      return this->width_.get ();
    }

    void WitnessLinesType::
    width (const width_type& x)
    {
      this->width_.set (x);
    }


    // FrameType
    // 

    const FrameType::XY_type& FrameType::
    XY () const
    {
      return this->XY_.get ();
    }

    FrameType::XY_type& FrameType::
    XY ()
    {
      return this->XY_.get ();
    }

    void FrameType::
    XY (const XY_type& x)
    {
      this->XY_.set (x);
    }

    void FrameType::
    XY (::std::auto_ptr< XY_type > x)
    {
      this->XY_.set (x);
    }


    // FrameRectangularType
    // 

    const FrameRectangularType::Width_type& FrameRectangularType::
    Width () const
    {
      return this->Width_.get ();
    }

    FrameRectangularType::Width_type& FrameRectangularType::
    Width ()
    {
      return this->Width_.get ();
    }

    void FrameRectangularType::
    Width (const Width_type& x)
    {
      this->Width_.set (x);
    }

    const FrameRectangularType::Height_type& FrameRectangularType::
    Height () const
    {
      return this->Height_.get ();
    }

    FrameRectangularType::Height_type& FrameRectangularType::
    Height ()
    {
      return this->Height_.get ();
    }

    void FrameRectangularType::
    Height (const Height_type& x)
    {
      this->Height_.set (x);
    }


    // FrameCircularType
    // 

    const FrameCircularType::Radius_type& FrameCircularType::
    Radius () const
    {
      return this->Radius_.get ();
    }

    FrameCircularType::Radius_type& FrameCircularType::
    Radius ()
    {
      return this->Radius_.get ();
    }

    void FrameCircularType::
    Radius (const Radius_type& x)
    {
      this->Radius_.set (x);
    }

    const FrameCircularType::crossed_type& FrameCircularType::
    crossed () const
    {
      return this->crossed_.get ();
    }

    FrameCircularType::crossed_type& FrameCircularType::
    crossed ()
    {
      return this->crossed_.get ();
    }

    void FrameCircularType::
    crossed (const crossed_type& x)
    {
      this->crossed_.set (x);
    }

    FrameCircularType::crossed_type FrameCircularType::
    crossed_default_value ()
    {
      return crossed_type (true);
    }


    // FrameFlagType
    // 

    const FrameFlagType::right_type& FrameFlagType::
    right () const
    {
      return this->right_.get ();
    }

    FrameFlagType::right_type& FrameFlagType::
    right ()
    {
      return this->right_.get ();
    }

    void FrameFlagType::
    right (const right_type& x)
    {
      this->right_.set (x);
    }

    FrameFlagType::right_type FrameFlagType::
    right_default_value ()
    {
      return right_type (true);
    }


    // FrameIrregularFormType
    // 

    const FrameIrregularFormType::Points_type& FrameIrregularFormType::
    Points () const
    {
      return this->Points_.get ();
    }

    FrameIrregularFormType::Points_type& FrameIrregularFormType::
    Points ()
    {
      return this->Points_.get ();
    }

    void FrameIrregularFormType::
    Points (const Points_type& x)
    {
      this->Points_.set (x);
    }

    void FrameIrregularFormType::
    Points (::std::auto_ptr< Points_type > x)
    {
      this->Points_.set (x);
    }


    // LeaderHeadFormEnumType
    // 

    LeaderHeadFormEnumType::
    LeaderHeadFormEnumType (value v)
    : ::xml_schema::string (_xsd_LeaderHeadFormEnumType_literals_[v])
    {
    }

    LeaderHeadFormEnumType::
    LeaderHeadFormEnumType (const char* v)
    : ::xml_schema::string (v)
    {
    }

    LeaderHeadFormEnumType::
    LeaderHeadFormEnumType (const ::std::string& v)
    : ::xml_schema::string (v)
    {
    }

    LeaderHeadFormEnumType::
    LeaderHeadFormEnumType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    LeaderHeadFormEnumType::
    LeaderHeadFormEnumType (const LeaderHeadFormEnumType& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    LeaderHeadFormEnumType& LeaderHeadFormEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_LeaderHeadFormEnumType_literals_[v]);

      return *this;
    }


    // ViewSetType
    // 

    const ViewSetType::ViewBase_sequence& ViewSetType::
    ViewBase () const
    {
      return this->ViewBase_;
    }

    ViewSetType::ViewBase_sequence& ViewSetType::
    ViewBase ()
    {
      return this->ViewBase_;
    }

    void ViewSetType::
    ViewBase (const ViewBase_sequence& s)
    {
      this->ViewBase_ = s;
    }

    const ViewSetType::N_type& ViewSetType::
    N () const
    {
      return this->N_.get ();
    }

    ViewSetType::N_type& ViewSetType::
    N ()
    {
      return this->N_.get ();
    }

    void ViewSetType::
    N (const N_type& x)
    {
      this->N_.set (x);
    }

    void ViewSetType::
    N (::std::auto_ptr< N_type > x)
    {
      this->N_.set (x);
    }


    // ViewBaseType
    // 


    // CameraBaseType
    // 

    const CameraBaseType::ViewPlaneOrigin_type& CameraBaseType::
    ViewPlaneOrigin () const
    {
      return this->ViewPlaneOrigin_.get ();
    }

    CameraBaseType::ViewPlaneOrigin_type& CameraBaseType::
    ViewPlaneOrigin ()
    {
      return this->ViewPlaneOrigin_.get ();
    }

    void CameraBaseType::
    ViewPlaneOrigin (const ViewPlaneOrigin_type& x)
    {
      this->ViewPlaneOrigin_.set (x);
    }

    void CameraBaseType::
    ViewPlaneOrigin (::std::auto_ptr< ViewPlaneOrigin_type > x)
    {
      this->ViewPlaneOrigin_.set (x);
    }

    const CameraBaseType::Orientation_type& CameraBaseType::
    Orientation () const
    {
      return this->Orientation_.get ();
    }

    CameraBaseType::Orientation_type& CameraBaseType::
    Orientation ()
    {
      return this->Orientation_.get ();
    }

    void CameraBaseType::
    Orientation (const Orientation_type& x)
    {
      this->Orientation_.set (x);
    }

    void CameraBaseType::
    Orientation (::std::auto_ptr< Orientation_type > x)
    {
      this->Orientation_.set (x);
    }

    const CameraBaseType::Ratio_type& CameraBaseType::
    Ratio () const
    {
      return this->Ratio_.get ();
    }

    CameraBaseType::Ratio_type& CameraBaseType::
    Ratio ()
    {
      return this->Ratio_.get ();
    }

    void CameraBaseType::
    Ratio (const Ratio_type& x)
    {
      this->Ratio_.set (x);
    }

    const CameraBaseType::Near_type& CameraBaseType::
    Near () const
    {
      return this->Near_.get ();
    }

    CameraBaseType::Near_type& CameraBaseType::
    Near ()
    {
      return this->Near_.get ();
    }

    void CameraBaseType::
    Near (const Near_type& x)
    {
      this->Near_.set (x);
    }

    const CameraBaseType::Far_type& CameraBaseType::
    Far () const
    {
      return this->Far_.get ();
    }

    CameraBaseType::Far_type& CameraBaseType::
    Far ()
    {
      return this->Far_.get ();
    }

    void CameraBaseType::
    Far (const Far_type& x)
    {
      this->Far_.set (x);
    }

    const CameraBaseType::Height_type& CameraBaseType::
    Height () const
    {
      return this->Height_.get ();
    }

    CameraBaseType::Height_type& CameraBaseType::
    Height ()
    {
      return this->Height_.get ();
    }

    void CameraBaseType::
    Height (const Height_type& x)
    {
      this->Height_.set (x);
    }


    // CameraFormEnumType
    // 

    CameraFormEnumType::
    CameraFormEnumType (value v)
    : ::xml_schema::string (_xsd_CameraFormEnumType_literals_[v])
    {
    }

    CameraFormEnumType::
    CameraFormEnumType (const char* v)
    : ::xml_schema::string (v)
    {
    }

    CameraFormEnumType::
    CameraFormEnumType (const ::std::string& v)
    : ::xml_schema::string (v)
    {
    }

    CameraFormEnumType::
    CameraFormEnumType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    CameraFormEnumType::
    CameraFormEnumType (const CameraFormEnumType& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    CameraFormEnumType& CameraFormEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_CameraFormEnumType_literals_[v]);

      return *this;
    }


    // CameraType
    // 

    const CameraType::form_type& CameraType::
    form () const
    {
      return this->form_.get ();
    }

    CameraType::form_type& CameraType::
    form ()
    {
      return this->form_.get ();
    }

    void CameraType::
    form (const form_type& x)
    {
      this->form_.set (x);
    }

    void CameraType::
    form (::std::auto_ptr< form_type > x)
    {
      this->form_.set (x);
    }

    const CameraType::form_type& CameraType::
    form_default_value ()
    {
      return form_default_value_;
    }


    // SavedViewType
    // 

    const SavedViewType::AnnotationVisibleIds_optional& SavedViewType::
    AnnotationVisibleIds () const
    {
      return this->AnnotationVisibleIds_;
    }

    SavedViewType::AnnotationVisibleIds_optional& SavedViewType::
    AnnotationVisibleIds ()
    {
      return this->AnnotationVisibleIds_;
    }

    void SavedViewType::
    AnnotationVisibleIds (const AnnotationVisibleIds_type& x)
    {
      this->AnnotationVisibleIds_.set (x);
    }

    void SavedViewType::
    AnnotationVisibleIds (const AnnotationVisibleIds_optional& x)
    {
      this->AnnotationVisibleIds_ = x;
    }

    void SavedViewType::
    AnnotationVisibleIds (::std::auto_ptr< AnnotationVisibleIds_type > x)
    {
      this->AnnotationVisibleIds_.set (x);
    }

    const SavedViewType::AnnotationHiddenIds_optional& SavedViewType::
    AnnotationHiddenIds () const
    {
      return this->AnnotationHiddenIds_;
    }

    SavedViewType::AnnotationHiddenIds_optional& SavedViewType::
    AnnotationHiddenIds ()
    {
      return this->AnnotationHiddenIds_;
    }

    void SavedViewType::
    AnnotationHiddenIds (const AnnotationHiddenIds_type& x)
    {
      this->AnnotationHiddenIds_.set (x);
    }

    void SavedViewType::
    AnnotationHiddenIds (const AnnotationHiddenIds_optional& x)
    {
      this->AnnotationHiddenIds_ = x;
    }

    void SavedViewType::
    AnnotationHiddenIds (::std::auto_ptr< AnnotationHiddenIds_type > x)
    {
      this->AnnotationHiddenIds_.set (x);
    }

    const SavedViewType::BodyIds_optional& SavedViewType::
    BodyIds () const
    {
      return this->BodyIds_;
    }

    SavedViewType::BodyIds_optional& SavedViewType::
    BodyIds ()
    {
      return this->BodyIds_;
    }

    void SavedViewType::
    BodyIds (const BodyIds_type& x)
    {
      this->BodyIds_.set (x);
    }

    void SavedViewType::
    BodyIds (const BodyIds_optional& x)
    {
      this->BodyIds_ = x;
    }

    void SavedViewType::
    BodyIds (::std::auto_ptr< BodyIds_type > x)
    {
      this->BodyIds_.set (x);
    }

    const SavedViewType::ComponentIds_optional& SavedViewType::
    ComponentIds () const
    {
      return this->ComponentIds_;
    }

    SavedViewType::ComponentIds_optional& SavedViewType::
    ComponentIds ()
    {
      return this->ComponentIds_;
    }

    void SavedViewType::
    ComponentIds (const ComponentIds_type& x)
    {
      this->ComponentIds_.set (x);
    }

    void SavedViewType::
    ComponentIds (const ComponentIds_optional& x)
    {
      this->ComponentIds_ = x;
    }

    void SavedViewType::
    ComponentIds (::std::auto_ptr< ComponentIds_type > x)
    {
      this->ComponentIds_.set (x);
    }

    const SavedViewType::PlaneClippingIds_optional& SavedViewType::
    PlaneClippingIds () const
    {
      return this->PlaneClippingIds_;
    }

    SavedViewType::PlaneClippingIds_optional& SavedViewType::
    PlaneClippingIds ()
    {
      return this->PlaneClippingIds_;
    }

    void SavedViewType::
    PlaneClippingIds (const PlaneClippingIds_type& x)
    {
      this->PlaneClippingIds_.set (x);
    }

    void SavedViewType::
    PlaneClippingIds (const PlaneClippingIds_optional& x)
    {
      this->PlaneClippingIds_ = x;
    }

    void SavedViewType::
    PlaneClippingIds (::std::auto_ptr< PlaneClippingIds_type > x)
    {
      this->PlaneClippingIds_.set (x);
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace xsd
{
  namespace qif2
  {
    // VisualizationSetType
    //

    VisualizationSetType::
    VisualizationSetType (const Fonts_type& Fonts,
                          const PMIDisplaySet_type& PMIDisplaySet)
    : ::xml_schema::type (),
      Fonts_ (Fonts, this),
      PMIDisplaySet_ (PMIDisplaySet, this)
    {
    }

    VisualizationSetType::
    VisualizationSetType (::std::auto_ptr< Fonts_type > Fonts,
                          ::std::auto_ptr< PMIDisplaySet_type > PMIDisplaySet)
    : ::xml_schema::type (),
      Fonts_ (Fonts, this),
      PMIDisplaySet_ (PMIDisplaySet, this)
    {
    }

    VisualizationSetType::
    VisualizationSetType (const VisualizationSetType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Fonts_ (x.Fonts_, f, this),
      PMIDisplaySet_ (x.PMIDisplaySet_, f, this)
    {
    }

    VisualizationSetType::
    VisualizationSetType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Fonts_ (this),
      PMIDisplaySet_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void VisualizationSetType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Fonts
        //
        if (n.name () == "Fonts" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Fonts_type > r (
            Fonts_traits::create (i, f, this));

          if (!Fonts_.present ())
          {
            this->Fonts_.set (r);
            continue;
          }
        }

        // PMIDisplaySet
        //
        if (n.name () == "PMIDisplaySet" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PMIDisplaySet_type > r (
            PMIDisplaySet_traits::create (i, f, this));

          if (!PMIDisplaySet_.present ())
          {
            this->PMIDisplaySet_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Fonts_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Fonts",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!PMIDisplaySet_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "PMIDisplaySet",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    VisualizationSetType* VisualizationSetType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class VisualizationSetType (*this, f, c);
    }

    VisualizationSetType& VisualizationSetType::
    operator= (const VisualizationSetType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Fonts_ = x.Fonts_;
        this->PMIDisplaySet_ = x.PMIDisplaySet_;
      }

      return *this;
    }

    VisualizationSetType::
    ~VisualizationSetType ()
    {
    }

    // FontsType
    //

    FontsType::
    FontsType (const N_type& N)
    : ::xml_schema::type (),
      Font_ (this),
      N_ (N, this)
    {
    }

    FontsType::
    FontsType (const FontsType& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Font_ (x.Font_, f, this),
      N_ (x.N_, f, this)
    {
    }

    FontsType::
    FontsType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Font_ (this),
      N_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void FontsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Font
        //
        if (n.name () == "Font" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Font_type > r (
            Font_traits::create (i, f, this));

          this->Font_.push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "N" && n.namespace_ ().empty ())
        {
          this->N_.set (N_traits::create (i, f, this));
          continue;
        }
      }

      if (!N_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "N",
          "");
      }
    }

    FontsType* FontsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FontsType (*this, f, c);
    }

    FontsType& FontsType::
    operator= (const FontsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Font_ = x.Font_;
        this->N_ = x.N_;
      }

      return *this;
    }

    FontsType::
    ~FontsType ()
    {
    }

    // FontType
    //

    FontType::
    FontType (const Name_type& Name,
              const Size_type& Size,
              const index_type& index)
    : ::xml_schema::type (),
      Attributes_ (this),
      Name_ (Name, this),
      Size_ (Size, this),
      index_ (index, this),
      bold_ (bold_default_value (), this),
      italic_ (italic_default_value (), this),
      underline_ (underline_default_value (), this)
    {
    }

    FontType::
    FontType (const FontType& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Attributes_ (x.Attributes_, f, this),
      Name_ (x.Name_, f, this),
      Size_ (x.Size_, f, this),
      index_ (x.index_, f, this),
      bold_ (x.bold_, f, this),
      italic_ (x.italic_, f, this),
      underline_ (x.underline_, f, this)
    {
    }

    FontType::
    FontType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Attributes_ (this),
      Name_ (this),
      Size_ (this),
      index_ (this),
      bold_ (this),
      italic_ (this),
      underline_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void FontType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Attributes
        //
        if (n.name () == "Attributes" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (r);
            continue;
          }
        }

        // Name
        //
        if (n.name () == "Name" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Name_type > r (
            Name_traits::create (i, f, this));

          if (!Name_.present ())
          {
            this->Name_.set (r);
            continue;
          }
        }

        // Size
        //
        if (n.name () == "Size" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Size_type > r (
            Size_traits::create (i, f, this));

          if (!Size_.present ())
          {
            this->Size_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Name_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Name",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Size_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Size",
          "http://qifstandards.org/xsd/qif2");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "index" && n.namespace_ ().empty ())
        {
          this->index_.set (index_traits::create (i, f, this));
          continue;
        }

        if (n.name () == "bold" && n.namespace_ ().empty ())
        {
          this->bold_.set (bold_traits::create (i, f, this));
          continue;
        }

        if (n.name () == "italic" && n.namespace_ ().empty ())
        {
          this->italic_.set (italic_traits::create (i, f, this));
          continue;
        }

        if (n.name () == "underline" && n.namespace_ ().empty ())
        {
          this->underline_.set (underline_traits::create (i, f, this));
          continue;
        }
      }

      if (!index_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "index",
          "");
      }

      if (!bold_.present ())
      {
        this->bold_.set (bold_default_value ());
      }

      if (!italic_.present ())
      {
        this->italic_.set (italic_default_value ());
      }

      if (!underline_.present ())
      {
        this->underline_.set (underline_default_value ());
      }
    }

    FontType* FontType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FontType (*this, f, c);
    }

    FontType& FontType::
    operator= (const FontType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Attributes_ = x.Attributes_;
        this->Name_ = x.Name_;
        this->Size_ = x.Size_;
        this->index_ = x.index_;
        this->bold_ = x.bold_;
        this->italic_ = x.italic_;
        this->underline_ = x.underline_;
      }

      return *this;
    }

    FontType::
    ~FontType ()
    {
    }

    // PMIDisplaySetType
    //

    PMIDisplaySetType::
    PMIDisplaySetType ()
    : ::xml_schema::type (),
      PMIDisplay_ (this)
    {
    }

    PMIDisplaySetType::
    PMIDisplaySetType (const PMIDisplaySetType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      PMIDisplay_ (x.PMIDisplay_, f, this)
    {
    }

    PMIDisplaySetType::
    PMIDisplaySetType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      PMIDisplay_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void PMIDisplaySetType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // PMIDisplay
        //
        if (n.name () == "PMIDisplay" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PMIDisplay_type > r (
            PMIDisplay_traits::create (i, f, this));

          this->PMIDisplay_.push_back (r);
          continue;
        }

        break;
      }
    }

    PMIDisplaySetType* PMIDisplaySetType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PMIDisplaySetType (*this, f, c);
    }

    PMIDisplaySetType& PMIDisplaySetType::
    operator= (const PMIDisplaySetType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->PMIDisplay_ = x.PMIDisplay_;
      }

      return *this;
    }

    PMIDisplaySetType::
    ~PMIDisplaySetType ()
    {
    }

    // PMIDisplayType
    //

    PMIDisplayType::
    PMIDisplayType (const Reference_type& Reference)
    : ::xml_schema::type (),
      Attributes_ (this),
      Color_ (this),
      Plane_ (this),
      Texts_ (this),
      Leader_ (this),
      WitnessLines_ (this),
      Frames_ (this),
      Balloon_ (this),
      Reference_ (Reference, this)
    {
    }

    PMIDisplayType::
    PMIDisplayType (::std::auto_ptr< Reference_type > Reference)
    : ::xml_schema::type (),
      Attributes_ (this),
      Color_ (this),
      Plane_ (this),
      Texts_ (this),
      Leader_ (this),
      WitnessLines_ (this),
      Frames_ (this),
      Balloon_ (this),
      Reference_ (Reference, this)
    {
    }

    PMIDisplayType::
    PMIDisplayType (const PMIDisplayType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Attributes_ (x.Attributes_, f, this),
      Color_ (x.Color_, f, this),
      Plane_ (x.Plane_, f, this),
      Texts_ (x.Texts_, f, this),
      Leader_ (x.Leader_, f, this),
      WitnessLines_ (x.WitnessLines_, f, this),
      Frames_ (x.Frames_, f, this),
      Balloon_ (x.Balloon_, f, this),
      Reference_ (x.Reference_, f, this)
    {
    }

    PMIDisplayType::
    PMIDisplayType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Attributes_ (this),
      Color_ (this),
      Plane_ (this),
      Texts_ (this),
      Leader_ (this),
      WitnessLines_ (this),
      Frames_ (this),
      Balloon_ (this),
      Reference_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void PMIDisplayType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Attributes
        //
        if (n.name () == "Attributes" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (r);
            continue;
          }
        }

        // Color
        //
        if (n.name () == "Color" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Color_type > r (
            Color_traits::create (i, f, this));

          if (!this->Color_)
          {
            this->Color_.set (r);
            continue;
          }
        }

        // Plane
        //
        if (n.name () == "Plane" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Plane_type > r (
            Plane_traits::create (i, f, this));

          if (!this->Plane_)
          {
            this->Plane_.set (r);
            continue;
          }
        }

        // Texts
        //
        if (n.name () == "Texts" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Texts_type > r (
            Texts_traits::create (i, f, this));

          if (!this->Texts_)
          {
            this->Texts_.set (r);
            continue;
          }
        }

        // Leader
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Leader",
              "http://qifstandards.org/xsd/qif2",
              &::xsd::cxx::tree::factory_impl< Leader_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< Leader_type > r (
              dynamic_cast< Leader_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->Leader_.push_back (r);
            continue;
          }
        }

        // WitnessLines
        //
        if (n.name () == "WitnessLines" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< WitnessLines_type > r (
            WitnessLines_traits::create (i, f, this));

          if (!this->WitnessLines_)
          {
            this->WitnessLines_.set (r);
            continue;
          }
        }

        // Frames
        //
        if (n.name () == "Frames" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Frames_type > r (
            Frames_traits::create (i, f, this));

          if (!this->Frames_)
          {
            this->Frames_.set (r);
            continue;
          }
        }

        // Balloon
        //
        if (n.name () == "Balloon" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Balloon_type > r (
            Balloon_traits::create (i, f, this));

          if (!this->Balloon_)
          {
            this->Balloon_.set (r);
            continue;
          }
        }

        // Reference
        //
        if (n.name () == "Reference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Reference_type > r (
            Reference_traits::create (i, f, this));

          if (!Reference_.present ())
          {
            this->Reference_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Reference_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Reference",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    PMIDisplayType* PMIDisplayType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PMIDisplayType (*this, f, c);
    }

    PMIDisplayType& PMIDisplayType::
    operator= (const PMIDisplayType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Attributes_ = x.Attributes_;
        this->Color_ = x.Color_;
        this->Plane_ = x.Plane_;
        this->Texts_ = x.Texts_;
        this->Leader_ = x.Leader_;
        this->WitnessLines_ = x.WitnessLines_;
        this->Frames_ = x.Frames_;
        this->Balloon_ = x.Balloon_;
        this->Reference_ = x.Reference_;
      }

      return *this;
    }

    PMIDisplayType::
    ~PMIDisplayType ()
    {
    }

    // LeaderType
    //

    LeaderType::
    LeaderType (const StartPoint_type& StartPoint,
                const EndPoint_type& EndPoint,
                const HeadForm_type& HeadForm,
                const HeadHeight_type& HeadHeight)
    : ::xsd::qif2::LineSegment2dType (StartPoint,
                                      EndPoint),
      HeadForm_ (HeadForm, this),
      HeadHeight_ (HeadHeight, this)
    {
    }

    LeaderType::
    LeaderType (const LeaderType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xsd::qif2::LineSegment2dType (x, f, c),
      HeadForm_ (x.HeadForm_, f, this),
      HeadHeight_ (x.HeadHeight_, f, this)
    {
    }

    LeaderType::
    LeaderType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xsd::qif2::LineSegment2dType (e, f | ::xml_schema::flags::base, c),
      HeadForm_ (this),
      HeadHeight_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void LeaderType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LineSegment2dType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // HeadForm
        //
        if (n.name () == "HeadForm" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< HeadForm_type > r (
            HeadForm_traits::create (i, f, this));

          if (!HeadForm_.present ())
          {
            this->HeadForm_.set (r);
            continue;
          }
        }

        // HeadHeight
        //
        if (n.name () == "HeadHeight" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!HeadHeight_.present ())
          {
            this->HeadHeight_.set (HeadHeight_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!HeadForm_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "HeadForm",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!HeadHeight_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "HeadHeight",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    LeaderType* LeaderType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LeaderType (*this, f, c);
    }

    LeaderType& LeaderType::
    operator= (const LeaderType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::LineSegment2dType& > (*this) = x;
        this->HeadForm_ = x.HeadForm_;
        this->HeadHeight_ = x.HeadHeight_;
      }

      return *this;
    }

    LeaderType::
    ~LeaderType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, LeaderType >
    _xsd_LeaderType_type_factory_init (
      "LeaderType",
      "http://qifstandards.org/xsd/qif2");

    // LeaderExtendType
    //

    LeaderExtendType::
    LeaderExtendType (const StartPoint_type& StartPoint,
                      const EndPoint_type& EndPoint,
                      const HeadForm_type& HeadForm,
                      const HeadHeight_type& HeadHeight,
                      const PointExtension_type& PointExtension)
    : ::xsd::qif2::LeaderType (StartPoint,
                               EndPoint,
                               HeadForm,
                               HeadHeight),
      PointExtension_ (PointExtension, this)
    {
    }

    LeaderExtendType::
    LeaderExtendType (const LeaderExtendType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::LeaderType (x, f, c),
      PointExtension_ (x.PointExtension_, f, this)
    {
    }

    LeaderExtendType::
    LeaderExtendType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::LeaderType (e, f | ::xml_schema::flags::base, c),
      PointExtension_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void LeaderExtendType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LeaderType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // PointExtension
        //
        if (n.name () == "PointExtension" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PointExtension_type > r (
            PointExtension_traits::create (i, f, this));

          if (!PointExtension_.present ())
          {
            this->PointExtension_.set (r);
            continue;
          }
        }

        break;
      }

      if (!PointExtension_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "PointExtension",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    LeaderExtendType* LeaderExtendType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LeaderExtendType (*this, f, c);
    }

    LeaderExtendType& LeaderExtendType::
    operator= (const LeaderExtendType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::LeaderType& > (*this) = x;
        this->PointExtension_ = x.PointExtension_;
      }

      return *this;
    }

    LeaderExtendType::
    ~LeaderExtendType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, LeaderExtendType >
    _xsd_LeaderExtendType_type_factory_init (
      "LeaderExtendType",
      "http://qifstandards.org/xsd/qif2");

    // LeaderDoubleHeadType
    //

    LeaderDoubleHeadType::
    LeaderDoubleHeadType (const StartPoint_type& StartPoint,
                          const EndPoint_type& EndPoint,
                          const HeadForm_type& HeadForm,
                          const HeadHeight_type& HeadHeight,
                          const HeadForm2_type& HeadForm2,
                          const PointConnection_type& PointConnection)
    : ::xsd::qif2::LeaderType (StartPoint,
                               EndPoint,
                               HeadForm,
                               HeadHeight),
      HeadForm2_ (HeadForm2, this),
      PointConnection_ (PointConnection, this)
    {
    }

    LeaderDoubleHeadType::
    LeaderDoubleHeadType (const LeaderDoubleHeadType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::LeaderType (x, f, c),
      HeadForm2_ (x.HeadForm2_, f, this),
      PointConnection_ (x.PointConnection_, f, this)
    {
    }

    LeaderDoubleHeadType::
    LeaderDoubleHeadType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::LeaderType (e, f | ::xml_schema::flags::base, c),
      HeadForm2_ (this),
      PointConnection_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void LeaderDoubleHeadType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LeaderType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // HeadForm2
        //
        if (n.name () == "HeadForm2" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< HeadForm2_type > r (
            HeadForm2_traits::create (i, f, this));

          if (!HeadForm2_.present ())
          {
            this->HeadForm2_.set (r);
            continue;
          }
        }

        // PointConnection
        //
        if (n.name () == "PointConnection" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PointConnection_type > r (
            PointConnection_traits::create (i, f, this));

          if (!PointConnection_.present ())
          {
            this->PointConnection_.set (r);
            continue;
          }
        }

        break;
      }

      if (!HeadForm2_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "HeadForm2",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!PointConnection_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "PointConnection",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    LeaderDoubleHeadType* LeaderDoubleHeadType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LeaderDoubleHeadType (*this, f, c);
    }

    LeaderDoubleHeadType& LeaderDoubleHeadType::
    operator= (const LeaderDoubleHeadType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::LeaderType& > (*this) = x;
        this->HeadForm2_ = x.HeadForm2_;
        this->PointConnection_ = x.PointConnection_;
      }

      return *this;
    }

    LeaderDoubleHeadType::
    ~LeaderDoubleHeadType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, LeaderDoubleHeadType >
    _xsd_LeaderDoubleHeadType_type_factory_init (
      "LeaderDoubleHeadType",
      "http://qifstandards.org/xsd/qif2");

    // LeaderDoubleHeadExtendType
    //

    LeaderDoubleHeadExtendType::
    LeaderDoubleHeadExtendType (const StartPoint_type& StartPoint,
                                const EndPoint_type& EndPoint,
                                const HeadForm_type& HeadForm,
                                const HeadHeight_type& HeadHeight,
                                const HeadForm2_type& HeadForm2,
                                const PointConnection_type& PointConnection,
                                const PointExtension_type& PointExtension)
    : ::xsd::qif2::LeaderDoubleHeadType (StartPoint,
                                         EndPoint,
                                         HeadForm,
                                         HeadHeight,
                                         HeadForm2,
                                         PointConnection),
      PointExtension_ (PointExtension, this)
    {
    }

    LeaderDoubleHeadExtendType::
    LeaderDoubleHeadExtendType (const LeaderDoubleHeadExtendType& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xsd::qif2::LeaderDoubleHeadType (x, f, c),
      PointExtension_ (x.PointExtension_, f, this)
    {
    }

    LeaderDoubleHeadExtendType::
    LeaderDoubleHeadExtendType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xsd::qif2::LeaderDoubleHeadType (e, f | ::xml_schema::flags::base, c),
      PointExtension_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void LeaderDoubleHeadExtendType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LeaderDoubleHeadType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // PointExtension
        //
        if (n.name () == "PointExtension" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PointExtension_type > r (
            PointExtension_traits::create (i, f, this));

          if (!PointExtension_.present ())
          {
            this->PointExtension_.set (r);
            continue;
          }
        }

        break;
      }

      if (!PointExtension_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "PointExtension",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    LeaderDoubleHeadExtendType* LeaderDoubleHeadExtendType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LeaderDoubleHeadExtendType (*this, f, c);
    }

    LeaderDoubleHeadExtendType& LeaderDoubleHeadExtendType::
    operator= (const LeaderDoubleHeadExtendType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::LeaderDoubleHeadType& > (*this) = x;
        this->PointExtension_ = x.PointExtension_;
      }

      return *this;
    }

    LeaderDoubleHeadExtendType::
    ~LeaderDoubleHeadExtendType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, LeaderDoubleHeadExtendType >
    _xsd_LeaderDoubleHeadExtendType_type_factory_init (
      "LeaderDoubleHeadExtendType",
      "http://qifstandards.org/xsd/qif2");

    // LeaderCircularType
    //

    LeaderCircularType::
    LeaderCircularType (const StartPoint_type& StartPoint,
                        const EndPoint_type& EndPoint,
                        const HeadForm_type& HeadForm,
                        const HeadHeight_type& HeadHeight,
                        const Center_type& Center)
    : ::xsd::qif2::LeaderType (StartPoint,
                               EndPoint,
                               HeadForm,
                               HeadHeight),
      Center_ (Center, this)
    {
    }

    LeaderCircularType::
    LeaderCircularType (const LeaderCircularType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::LeaderType (x, f, c),
      Center_ (x.Center_, f, this)
    {
    }

    LeaderCircularType::
    LeaderCircularType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::LeaderType (e, f | ::xml_schema::flags::base, c),
      Center_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void LeaderCircularType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LeaderType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Center
        //
        if (n.name () == "Center" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Center_type > r (
            Center_traits::create (i, f, this));

          if (!Center_.present ())
          {
            this->Center_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Center_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Center",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    LeaderCircularType* LeaderCircularType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LeaderCircularType (*this, f, c);
    }

    LeaderCircularType& LeaderCircularType::
    operator= (const LeaderCircularType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::LeaderType& > (*this) = x;
        this->Center_ = x.Center_;
      }

      return *this;
    }

    LeaderCircularType::
    ~LeaderCircularType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, LeaderCircularType >
    _xsd_LeaderCircularType_type_factory_init (
      "LeaderCircularType",
      "http://qifstandards.org/xsd/qif2");

    // LeaderDoubleHeadCircularType
    //

    LeaderDoubleHeadCircularType::
    LeaderDoubleHeadCircularType (const StartPoint_type& StartPoint,
                                  const EndPoint_type& EndPoint,
                                  const HeadForm_type& HeadForm,
                                  const HeadHeight_type& HeadHeight,
                                  const HeadForm2_type& HeadForm2,
                                  const PointConnection_type& PointConnection,
                                  const Center_type& Center)
    : ::xsd::qif2::LeaderDoubleHeadType (StartPoint,
                                         EndPoint,
                                         HeadForm,
                                         HeadHeight,
                                         HeadForm2,
                                         PointConnection),
      Center_ (Center, this)
    {
    }

    LeaderDoubleHeadCircularType::
    LeaderDoubleHeadCircularType (const LeaderDoubleHeadCircularType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif2::LeaderDoubleHeadType (x, f, c),
      Center_ (x.Center_, f, this)
    {
    }

    LeaderDoubleHeadCircularType::
    LeaderDoubleHeadCircularType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif2::LeaderDoubleHeadType (e, f | ::xml_schema::flags::base, c),
      Center_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void LeaderDoubleHeadCircularType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LeaderDoubleHeadType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Center
        //
        if (n.name () == "Center" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Center_type > r (
            Center_traits::create (i, f, this));

          if (!Center_.present ())
          {
            this->Center_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Center_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Center",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    LeaderDoubleHeadCircularType* LeaderDoubleHeadCircularType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LeaderDoubleHeadCircularType (*this, f, c);
    }

    LeaderDoubleHeadCircularType& LeaderDoubleHeadCircularType::
    operator= (const LeaderDoubleHeadCircularType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::LeaderDoubleHeadType& > (*this) = x;
        this->Center_ = x.Center_;
      }

      return *this;
    }

    LeaderDoubleHeadCircularType::
    ~LeaderDoubleHeadCircularType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, LeaderDoubleHeadCircularType >
    _xsd_LeaderDoubleHeadCircularType_type_factory_init (
      "LeaderDoubleHeadCircularType",
      "http://qifstandards.org/xsd/qif2");

    // BalloonType
    //

    BalloonType::
    BalloonType (const ::xml_schema::unsigned_int& _xsd_unsigned_int_base)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, char, ::xml_schema::simple_type > (_xsd_unsigned_int_base),
      sub_ (this)
    {
    }

    BalloonType::
    BalloonType (const BalloonType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, char, ::xml_schema::simple_type > (x, f, c),
      sub_ (x.sub_, f, this)
    {
    }

    BalloonType::
    BalloonType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, char, ::xml_schema::simple_type > (e, f | ::xml_schema::flags::base, c),
      sub_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
        this->parse (p, f);
      }
    }

    void BalloonType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "sub" && n.namespace_ ().empty ())
        {
          this->sub_.set (sub_traits::create (i, f, this));
          continue;
        }
      }
    }

    BalloonType* BalloonType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class BalloonType (*this, f, c);
    }

    BalloonType& BalloonType::
    operator= (const BalloonType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, char, ::xml_schema::simple_type >& > (*this) = x;
        this->sub_ = x.sub_;
      }

      return *this;
    }

    BalloonType::
    ~BalloonType ()
    {
    }

    // TextsType
    //

    TextsType::
    TextsType (const fontIndex_type& fontIndex,
               const N_type& N)
    : ::xml_schema::type (),
      Text_ (this),
      fontIndex_ (fontIndex, this),
      lineHeight_ (this),
      N_ (N, this)
    {
    }

    TextsType::
    TextsType (const TextsType& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Text_ (x.Text_, f, this),
      fontIndex_ (x.fontIndex_, f, this),
      lineHeight_ (x.lineHeight_, f, this),
      N_ (x.N_, f, this)
    {
    }

    TextsType::
    TextsType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Text_ (this),
      fontIndex_ (this),
      lineHeight_ (this),
      N_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void TextsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Text
        //
        if (n.name () == "Text" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Text_type > r (
            Text_traits::create (i, f, this));

          this->Text_.push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "fontIndex" && n.namespace_ ().empty ())
        {
          this->fontIndex_.set (fontIndex_traits::create (i, f, this));
          continue;
        }

        if (n.name () == "lineHeight" && n.namespace_ ().empty ())
        {
          this->lineHeight_.set (lineHeight_traits::create (i, f, this));
          continue;
        }

        if (n.name () == "N" && n.namespace_ ().empty ())
        {
          this->N_.set (N_traits::create (i, f, this));
          continue;
        }
      }

      if (!fontIndex_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "fontIndex",
          "");
      }

      if (!N_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "N",
          "");
      }
    }

    TextsType* TextsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TextsType (*this, f, c);
    }

    TextsType& TextsType::
    operator= (const TextsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Text_ = x.Text_;
        this->fontIndex_ = x.fontIndex_;
        this->lineHeight_ = x.lineHeight_;
        this->N_ = x.N_;
      }

      return *this;
    }

    TextsType::
    ~TextsType ()
    {
    }

    // FramesType
    //

    FramesType::
    FramesType (const N_type& N)
    : ::xml_schema::type (),
      Frame_ (this),
      N_ (N, this)
    {
    }

    FramesType::
    FramesType (const FramesType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Frame_ (x.Frame_, f, this),
      N_ (x.N_, f, this)
    {
    }

    FramesType::
    FramesType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Frame_ (this),
      N_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void FramesType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Frame
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Frame",
              "http://qifstandards.org/xsd/qif2",
              &::xsd::cxx::tree::factory_impl< Frame_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< Frame_type > r (
              dynamic_cast< Frame_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->Frame_.push_back (r);
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "N" && n.namespace_ ().empty ())
        {
          this->N_.set (N_traits::create (i, f, this));
          continue;
        }
      }

      if (!N_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "N",
          "");
      }
    }

    FramesType* FramesType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FramesType (*this, f, c);
    }

    FramesType& FramesType::
    operator= (const FramesType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Frame_ = x.Frame_;
        this->N_ = x.N_;
      }

      return *this;
    }

    FramesType::
    ~FramesType ()
    {
    }

    // TextType
    //

    TextType::
    TextType (const Data_type& Data,
              const XY_type& XY)
    : ::xml_schema::type (),
      Data_ (Data, this),
      XY_ (XY, this)
    {
    }

    TextType::
    TextType (const TextType& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Data_ (x.Data_, f, this),
      XY_ (x.XY_, f, this)
    {
    }

    TextType::
    TextType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Data_ (this),
      XY_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void TextType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Data
        //
        if (n.name () == "Data" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Data_type > r (
            Data_traits::create (i, f, this));

          if (!Data_.present ())
          {
            this->Data_.set (r);
            continue;
          }
        }

        // XY
        //
        if (n.name () == "XY" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< XY_type > r (
            XY_traits::create (i, f, this));

          if (!XY_.present ())
          {
            this->XY_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Data_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Data",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!XY_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "XY",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    TextType* TextType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TextType (*this, f, c);
    }

    TextType& TextType::
    operator= (const TextType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Data_ = x.Data_;
        this->XY_ = x.XY_;
      }

      return *this;
    }

    TextType::
    ~TextType ()
    {
    }

    // WitnessLinesType
    //

    WitnessLinesType::
    WitnessLinesType (const Segment1_type& Segment1,
                      const Segment2_type& Segment2,
                      const width_type& width)
    : ::xml_schema::type (),
      Segment1_ (Segment1, this),
      Segment2_ (Segment2, this),
      width_ (width, this)
    {
    }

    WitnessLinesType::
    WitnessLinesType (::std::auto_ptr< Segment1_type > Segment1,
                      ::std::auto_ptr< Segment2_type > Segment2,
                      const width_type& width)
    : ::xml_schema::type (),
      Segment1_ (Segment1, this),
      Segment2_ (Segment2, this),
      width_ (width, this)
    {
    }

    WitnessLinesType::
    WitnessLinesType (const WitnessLinesType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Segment1_ (x.Segment1_, f, this),
      Segment2_ (x.Segment2_, f, this),
      width_ (x.width_, f, this)
    {
    }

    WitnessLinesType::
    WitnessLinesType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Segment1_ (this),
      Segment2_ (this),
      width_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WitnessLinesType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Segment1
        //
        if (n.name () == "Segment1" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Segment1_type > r (
            Segment1_traits::create (i, f, this));

          if (!Segment1_.present ())
          {
            this->Segment1_.set (r);
            continue;
          }
        }

        // Segment2
        //
        if (n.name () == "Segment2" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Segment2_type > r (
            Segment2_traits::create (i, f, this));

          if (!Segment2_.present ())
          {
            this->Segment2_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Segment1_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Segment1",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Segment2_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Segment2",
          "http://qifstandards.org/xsd/qif2");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "width" && n.namespace_ ().empty ())
        {
          this->width_.set (width_traits::create (i, f, this));
          continue;
        }
      }

      if (!width_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "width",
          "");
      }
    }

    WitnessLinesType* WitnessLinesType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WitnessLinesType (*this, f, c);
    }

    WitnessLinesType& WitnessLinesType::
    operator= (const WitnessLinesType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Segment1_ = x.Segment1_;
        this->Segment2_ = x.Segment2_;
        this->width_ = x.width_;
      }

      return *this;
    }

    WitnessLinesType::
    ~WitnessLinesType ()
    {
    }

    // FrameType
    //

    FrameType::
    FrameType (const XY_type& XY)
    : ::xml_schema::type (),
      XY_ (XY, this)
    {
    }

    FrameType::
    FrameType (const FrameType& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      XY_ (x.XY_, f, this)
    {
    }

    FrameType::
    FrameType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      XY_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void FrameType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // XY
        //
        if (n.name () == "XY" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< XY_type > r (
            XY_traits::create (i, f, this));

          if (!XY_.present ())
          {
            this->XY_.set (r);
            continue;
          }
        }

        break;
      }

      if (!XY_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "XY",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    FrameType* FrameType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FrameType (*this, f, c);
    }

    FrameType& FrameType::
    operator= (const FrameType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->XY_ = x.XY_;
      }

      return *this;
    }

    FrameType::
    ~FrameType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, FrameType >
    _xsd_FrameType_type_factory_init (
      "FrameType",
      "http://qifstandards.org/xsd/qif2");

    // FrameRectangularType
    //

    FrameRectangularType::
    FrameRectangularType (const XY_type& XY,
                          const Width_type& Width,
                          const Height_type& Height)
    : ::xsd::qif2::FrameType (XY),
      Width_ (Width, this),
      Height_ (Height, this)
    {
    }

    FrameRectangularType::
    FrameRectangularType (const FrameRectangularType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::FrameType (x, f, c),
      Width_ (x.Width_, f, this),
      Height_ (x.Height_, f, this)
    {
    }

    FrameRectangularType::
    FrameRectangularType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::FrameType (e, f | ::xml_schema::flags::base, c),
      Width_ (this),
      Height_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void FrameRectangularType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::FrameType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Width
        //
        if (n.name () == "Width" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!Width_.present ())
          {
            this->Width_.set (Width_traits::create (i, f, this));
            continue;
          }
        }

        // Height
        //
        if (n.name () == "Height" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!Height_.present ())
          {
            this->Height_.set (Height_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!Width_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Width",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Height_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Height",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    FrameRectangularType* FrameRectangularType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FrameRectangularType (*this, f, c);
    }

    FrameRectangularType& FrameRectangularType::
    operator= (const FrameRectangularType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::FrameType& > (*this) = x;
        this->Width_ = x.Width_;
        this->Height_ = x.Height_;
      }

      return *this;
    }

    FrameRectangularType::
    ~FrameRectangularType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, FrameRectangularType >
    _xsd_FrameRectangularType_type_factory_init (
      "FrameRectangularType",
      "http://qifstandards.org/xsd/qif2");

    // FrameCircularType
    //

    FrameCircularType::
    FrameCircularType (const XY_type& XY,
                       const Radius_type& Radius)
    : ::xsd::qif2::FrameType (XY),
      Radius_ (Radius, this),
      crossed_ (crossed_default_value (), this)
    {
    }

    FrameCircularType::
    FrameCircularType (const FrameCircularType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::FrameType (x, f, c),
      Radius_ (x.Radius_, f, this),
      crossed_ (x.crossed_, f, this)
    {
    }

    FrameCircularType::
    FrameCircularType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::FrameType (e, f | ::xml_schema::flags::base, c),
      Radius_ (this),
      crossed_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void FrameCircularType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::FrameType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Radius
        //
        if (n.name () == "Radius" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!Radius_.present ())
          {
            this->Radius_.set (Radius_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!Radius_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Radius",
          "http://qifstandards.org/xsd/qif2");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "crossed" && n.namespace_ ().empty ())
        {
          this->crossed_.set (crossed_traits::create (i, f, this));
          continue;
        }
      }

      if (!crossed_.present ())
      {
        this->crossed_.set (crossed_default_value ());
      }
    }

    FrameCircularType* FrameCircularType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FrameCircularType (*this, f, c);
    }

    FrameCircularType& FrameCircularType::
    operator= (const FrameCircularType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::FrameType& > (*this) = x;
        this->Radius_ = x.Radius_;
        this->crossed_ = x.crossed_;
      }

      return *this;
    }

    FrameCircularType::
    ~FrameCircularType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, FrameCircularType >
    _xsd_FrameCircularType_type_factory_init (
      "FrameCircularType",
      "http://qifstandards.org/xsd/qif2");

    // FrameFlagType
    //

    FrameFlagType::
    FrameFlagType (const XY_type& XY,
                   const Width_type& Width,
                   const Height_type& Height)
    : ::xsd::qif2::FrameRectangularType (XY,
                                         Width,
                                         Height),
      right_ (right_default_value (), this)
    {
    }

    FrameFlagType::
    FrameFlagType (const FrameFlagType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xsd::qif2::FrameRectangularType (x, f, c),
      right_ (x.right_, f, this)
    {
    }

    FrameFlagType::
    FrameFlagType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xsd::qif2::FrameRectangularType (e, f | ::xml_schema::flags::base, c),
      right_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void FrameFlagType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::FrameRectangularType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "right" && n.namespace_ ().empty ())
        {
          this->right_.set (right_traits::create (i, f, this));
          continue;
        }
      }

      if (!right_.present ())
      {
        this->right_.set (right_default_value ());
      }
    }

    FrameFlagType* FrameFlagType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FrameFlagType (*this, f, c);
    }

    FrameFlagType& FrameFlagType::
    operator= (const FrameFlagType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::FrameRectangularType& > (*this) = x;
        this->right_ = x.right_;
      }

      return *this;
    }

    FrameFlagType::
    ~FrameFlagType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, FrameFlagType >
    _xsd_FrameFlagType_type_factory_init (
      "FrameFlagType",
      "http://qifstandards.org/xsd/qif2");

    // FrameIrregularFormType
    //

    FrameIrregularFormType::
    FrameIrregularFormType (const XY_type& XY,
                            const Points_type& Points)
    : ::xsd::qif2::FrameType (XY),
      Points_ (Points, this)
    {
    }

    FrameIrregularFormType::
    FrameIrregularFormType (const XY_type& XY,
                            ::std::auto_ptr< Points_type > Points)
    : ::xsd::qif2::FrameType (XY),
      Points_ (Points, this)
    {
    }

    FrameIrregularFormType::
    FrameIrregularFormType (const FrameIrregularFormType& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xsd::qif2::FrameType (x, f, c),
      Points_ (x.Points_, f, this)
    {
    }

    FrameIrregularFormType::
    FrameIrregularFormType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xsd::qif2::FrameType (e, f | ::xml_schema::flags::base, c),
      Points_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void FrameIrregularFormType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::FrameType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Points
        //
        if (n.name () == "Points" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Points_type > r (
            Points_traits::create (i, f, this));

          if (!Points_.present ())
          {
            this->Points_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Points_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Points",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    FrameIrregularFormType* FrameIrregularFormType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FrameIrregularFormType (*this, f, c);
    }

    FrameIrregularFormType& FrameIrregularFormType::
    operator= (const FrameIrregularFormType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::FrameType& > (*this) = x;
        this->Points_ = x.Points_;
      }

      return *this;
    }

    FrameIrregularFormType::
    ~FrameIrregularFormType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, FrameIrregularFormType >
    _xsd_FrameIrregularFormType_type_factory_init (
      "FrameIrregularFormType",
      "http://qifstandards.org/xsd/qif2");

    // LeaderHeadFormEnumType
    //

    LeaderHeadFormEnumType::
    LeaderHeadFormEnumType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_LeaderHeadFormEnumType_convert ();
    }

    LeaderHeadFormEnumType::
    LeaderHeadFormEnumType (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_LeaderHeadFormEnumType_convert ();
    }

    LeaderHeadFormEnumType::
    LeaderHeadFormEnumType (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_LeaderHeadFormEnumType_convert ();
    }

    LeaderHeadFormEnumType* LeaderHeadFormEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LeaderHeadFormEnumType (*this, f, c);
    }

    LeaderHeadFormEnumType::value LeaderHeadFormEnumType::
    _xsd_LeaderHeadFormEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_LeaderHeadFormEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_LeaderHeadFormEnumType_indexes_,
                        _xsd_LeaderHeadFormEnumType_indexes_ + 15,
                        *this,
                        c));

      if (i == _xsd_LeaderHeadFormEnumType_indexes_ + 15 || _xsd_LeaderHeadFormEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const LeaderHeadFormEnumType::
    _xsd_LeaderHeadFormEnumType_literals_[15] =
    {
      "NONE",
      "ARROW_OPEN",
      "ARROW_UNFILLED",
      "ARROW_BLANKED",
      "ARROW_FILLED",
      "TRIANGLE_BLANKED",
      "TRIANGLE_FILLED",
      "DOT_BLANKED",
      "DOT_FILLED",
      "BOX_BLANKED",
      "BOX_FILLED",
      "DIMENSION_ORIGIN",
      "SYMBOL_SLASH",
      "SYMBOL_INTEGRAL",
      "SYMBOL_CROSS"
    };

    const LeaderHeadFormEnumType::value LeaderHeadFormEnumType::
    _xsd_LeaderHeadFormEnumType_indexes_[15] =
    {
      ::xsd::qif2::LeaderHeadFormEnumType::ARROW_BLANKED,
      ::xsd::qif2::LeaderHeadFormEnumType::ARROW_FILLED,
      ::xsd::qif2::LeaderHeadFormEnumType::ARROW_OPEN,
      ::xsd::qif2::LeaderHeadFormEnumType::ARROW_UNFILLED,
      ::xsd::qif2::LeaderHeadFormEnumType::BOX_BLANKED,
      ::xsd::qif2::LeaderHeadFormEnumType::BOX_FILLED,
      ::xsd::qif2::LeaderHeadFormEnumType::DIMENSION_ORIGIN,
      ::xsd::qif2::LeaderHeadFormEnumType::DOT_BLANKED,
      ::xsd::qif2::LeaderHeadFormEnumType::DOT_FILLED,
      ::xsd::qif2::LeaderHeadFormEnumType::NONE,
      ::xsd::qif2::LeaderHeadFormEnumType::SYMBOL_CROSS,
      ::xsd::qif2::LeaderHeadFormEnumType::SYMBOL_INTEGRAL,
      ::xsd::qif2::LeaderHeadFormEnumType::SYMBOL_SLASH,
      ::xsd::qif2::LeaderHeadFormEnumType::TRIANGLE_BLANKED,
      ::xsd::qif2::LeaderHeadFormEnumType::TRIANGLE_FILLED
    };

    // ViewSetType
    //

    ViewSetType::
    ViewSetType (const N_type& N)
    : ::xml_schema::type (),
      ViewBase_ (this),
      N_ (N, this)
    {
    }

    ViewSetType::
    ViewSetType (const ViewSetType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ViewBase_ (x.ViewBase_, f, this),
      N_ (x.N_, f, this)
    {
    }

    ViewSetType::
    ViewSetType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ViewBase_ (this),
      N_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ViewSetType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ViewBase
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "ViewBase",
              "http://qifstandards.org/xsd/qif2",
              &::xsd::cxx::tree::factory_impl< ViewBase_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< ViewBase_type > r (
              dynamic_cast< ViewBase_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->ViewBase_.push_back (r);
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "N" && n.namespace_ ().empty ())
        {
          this->N_.set (N_traits::create (i, f, this));
          continue;
        }
      }

      if (!N_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "N",
          "");
      }
    }

    ViewSetType* ViewSetType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ViewSetType (*this, f, c);
    }

    ViewSetType& ViewSetType::
    operator= (const ViewSetType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->ViewBase_ = x.ViewBase_;
        this->N_ = x.N_;
      }

      return *this;
    }

    ViewSetType::
    ~ViewSetType ()
    {
    }

    // ViewBaseType
    //

    ViewBaseType::
    ViewBaseType (const id_type& id)
    : ::xsd::qif2::NodeWithIdBaseType (id)
    {
    }

    ViewBaseType::
    ViewBaseType (const ViewBaseType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xsd::qif2::NodeWithIdBaseType (x, f, c)
    {
    }

    ViewBaseType::
    ViewBaseType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xsd::qif2::NodeWithIdBaseType (e, f, c)
    {
    }

    ViewBaseType* ViewBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ViewBaseType (*this, f, c);
    }

    ViewBaseType::
    ~ViewBaseType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, ViewBaseType >
    _xsd_ViewBaseType_type_factory_init (
      "ViewBaseType",
      "http://qifstandards.org/xsd/qif2");

    // CameraBaseType
    //

    CameraBaseType::
    CameraBaseType (const id_type& id,
                    const ViewPlaneOrigin_type& ViewPlaneOrigin,
                    const Orientation_type& Orientation,
                    const Ratio_type& Ratio,
                    const Near_type& Near,
                    const Far_type& Far,
                    const Height_type& Height)
    : ::xsd::qif2::ViewBaseType (id),
      ViewPlaneOrigin_ (ViewPlaneOrigin, this),
      Orientation_ (Orientation, this),
      Ratio_ (Ratio, this),
      Near_ (Near, this),
      Far_ (Far, this),
      Height_ (Height, this)
    {
    }

    CameraBaseType::
    CameraBaseType (const id_type& id,
                    const ViewPlaneOrigin_type& ViewPlaneOrigin,
                    ::std::auto_ptr< Orientation_type > Orientation,
                    const Ratio_type& Ratio,
                    const Near_type& Near,
                    const Far_type& Far,
                    const Height_type& Height)
    : ::xsd::qif2::ViewBaseType (id),
      ViewPlaneOrigin_ (ViewPlaneOrigin, this),
      Orientation_ (Orientation, this),
      Ratio_ (Ratio, this),
      Near_ (Near, this),
      Far_ (Far, this),
      Height_ (Height, this)
    {
    }

    CameraBaseType::
    CameraBaseType (const CameraBaseType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::qif2::ViewBaseType (x, f, c),
      ViewPlaneOrigin_ (x.ViewPlaneOrigin_, f, this),
      Orientation_ (x.Orientation_, f, this),
      Ratio_ (x.Ratio_, f, this),
      Near_ (x.Near_, f, this),
      Far_ (x.Far_, f, this),
      Height_ (x.Height_, f, this)
    {
    }

    CameraBaseType::
    CameraBaseType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::qif2::ViewBaseType (e, f | ::xml_schema::flags::base, c),
      ViewPlaneOrigin_ (this),
      Orientation_ (this),
      Ratio_ (this),
      Near_ (this),
      Far_ (this),
      Height_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CameraBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::ViewBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ViewPlaneOrigin
        //
        if (n.name () == "ViewPlaneOrigin" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ViewPlaneOrigin_type > r (
            ViewPlaneOrigin_traits::create (i, f, this));

          if (!ViewPlaneOrigin_.present ())
          {
            this->ViewPlaneOrigin_.set (r);
            continue;
          }
        }

        // Orientation
        //
        if (n.name () == "Orientation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Orientation_type > r (
            Orientation_traits::create (i, f, this));

          if (!Orientation_.present ())
          {
            this->Orientation_.set (r);
            continue;
          }
        }

        // Ratio
        //
        if (n.name () == "Ratio" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!Ratio_.present ())
          {
            this->Ratio_.set (Ratio_traits::create (i, f, this));
            continue;
          }
        }

        // Near
        //
        if (n.name () == "Near" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!Near_.present ())
          {
            this->Near_.set (Near_traits::create (i, f, this));
            continue;
          }
        }

        // Far
        //
        if (n.name () == "Far" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!Far_.present ())
          {
            this->Far_.set (Far_traits::create (i, f, this));
            continue;
          }
        }

        // Height
        //
        if (n.name () == "Height" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!Height_.present ())
          {
            this->Height_.set (Height_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!ViewPlaneOrigin_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ViewPlaneOrigin",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Orientation_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Orientation",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Ratio_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Ratio",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Near_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Near",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Far_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Far",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Height_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Height",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    CameraBaseType* CameraBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CameraBaseType (*this, f, c);
    }

    CameraBaseType& CameraBaseType::
    operator= (const CameraBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::ViewBaseType& > (*this) = x;
        this->ViewPlaneOrigin_ = x.ViewPlaneOrigin_;
        this->Orientation_ = x.Orientation_;
        this->Ratio_ = x.Ratio_;
        this->Near_ = x.Near_;
        this->Far_ = x.Far_;
        this->Height_ = x.Height_;
      }

      return *this;
    }

    CameraBaseType::
    ~CameraBaseType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, CameraBaseType >
    _xsd_CameraBaseType_type_factory_init (
      "CameraBaseType",
      "http://qifstandards.org/xsd/qif2");

    // CameraFormEnumType
    //

    CameraFormEnumType::
    CameraFormEnumType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_CameraFormEnumType_convert ();
    }

    CameraFormEnumType::
    CameraFormEnumType (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_CameraFormEnumType_convert ();
    }

    CameraFormEnumType::
    CameraFormEnumType (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_CameraFormEnumType_convert ();
    }

    CameraFormEnumType* CameraFormEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CameraFormEnumType (*this, f, c);
    }

    CameraFormEnumType::value CameraFormEnumType::
    _xsd_CameraFormEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CameraFormEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_CameraFormEnumType_indexes_,
                        _xsd_CameraFormEnumType_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_CameraFormEnumType_indexes_ + 2 || _xsd_CameraFormEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const CameraFormEnumType::
    _xsd_CameraFormEnumType_literals_[2] =
    {
      "ORTHOGRAPHIC",
      "PERSPECTIVE"
    };

    const CameraFormEnumType::value CameraFormEnumType::
    _xsd_CameraFormEnumType_indexes_[2] =
    {
      ::xsd::qif2::CameraFormEnumType::ORTHOGRAPHIC,
      ::xsd::qif2::CameraFormEnumType::PERSPECTIVE
    };

    // CameraType
    //

    const CameraType::form_type CameraType::form_default_value_ (
      "ORTHOGRAPHIC");

    CameraType::
    CameraType (const id_type& id,
                const ViewPlaneOrigin_type& ViewPlaneOrigin,
                const Orientation_type& Orientation,
                const Ratio_type& Ratio,
                const Near_type& Near,
                const Far_type& Far,
                const Height_type& Height)
    : ::xsd::qif2::CameraBaseType (id,
                                   ViewPlaneOrigin,
                                   Orientation,
                                   Ratio,
                                   Near,
                                   Far,
                                   Height),
      form_ (form_default_value (), this)
    {
    }

    CameraType::
    CameraType (const id_type& id,
                const ViewPlaneOrigin_type& ViewPlaneOrigin,
                ::std::auto_ptr< Orientation_type > Orientation,
                const Ratio_type& Ratio,
                const Near_type& Near,
                const Far_type& Far,
                const Height_type& Height)
    : ::xsd::qif2::CameraBaseType (id,
                                   ViewPlaneOrigin,
                                   Orientation,
                                   Ratio,
                                   Near,
                                   Far,
                                   Height),
      form_ (form_default_value (), this)
    {
    }

    CameraType::
    CameraType (const CameraType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xsd::qif2::CameraBaseType (x, f, c),
      form_ (x.form_, f, this)
    {
    }

    CameraType::
    CameraType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xsd::qif2::CameraBaseType (e, f | ::xml_schema::flags::base, c),
      form_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CameraType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CameraBaseType::parse (p, f);

      p.reset_attributes ();

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "form" && n.namespace_ ().empty ())
        {
          this->form_.set (form_traits::create (i, f, this));
          continue;
        }
      }

      if (!form_.present ())
      {
        this->form_.set (form_default_value ());
      }
    }

    CameraType* CameraType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CameraType (*this, f, c);
    }

    CameraType& CameraType::
    operator= (const CameraType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::CameraBaseType& > (*this) = x;
        this->form_ = x.form_;
      }

      return *this;
    }

    CameraType::
    ~CameraType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, CameraType >
    _xsd_CameraType_type_factory_init (
      "CameraType",
      "http://qifstandards.org/xsd/qif2");

    // SavedViewType
    //

    SavedViewType::
    SavedViewType (const id_type& id,
                   const ViewPlaneOrigin_type& ViewPlaneOrigin,
                   const Orientation_type& Orientation,
                   const Ratio_type& Ratio,
                   const Near_type& Near,
                   const Far_type& Far,
                   const Height_type& Height)
    : ::xsd::qif2::CameraBaseType (id,
                                   ViewPlaneOrigin,
                                   Orientation,
                                   Ratio,
                                   Near,
                                   Far,
                                   Height),
      AnnotationVisibleIds_ (this),
      AnnotationHiddenIds_ (this),
      BodyIds_ (this),
      ComponentIds_ (this),
      PlaneClippingIds_ (this)
    {
    }

    SavedViewType::
    SavedViewType (const id_type& id,
                   const ViewPlaneOrigin_type& ViewPlaneOrigin,
                   ::std::auto_ptr< Orientation_type > Orientation,
                   const Ratio_type& Ratio,
                   const Near_type& Near,
                   const Far_type& Far,
                   const Height_type& Height)
    : ::xsd::qif2::CameraBaseType (id,
                                   ViewPlaneOrigin,
                                   Orientation,
                                   Ratio,
                                   Near,
                                   Far,
                                   Height),
      AnnotationVisibleIds_ (this),
      AnnotationHiddenIds_ (this),
      BodyIds_ (this),
      ComponentIds_ (this),
      PlaneClippingIds_ (this)
    {
    }

    SavedViewType::
    SavedViewType (const SavedViewType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xsd::qif2::CameraBaseType (x, f, c),
      AnnotationVisibleIds_ (x.AnnotationVisibleIds_, f, this),
      AnnotationHiddenIds_ (x.AnnotationHiddenIds_, f, this),
      BodyIds_ (x.BodyIds_, f, this),
      ComponentIds_ (x.ComponentIds_, f, this),
      PlaneClippingIds_ (x.PlaneClippingIds_, f, this)
    {
    }

    SavedViewType::
    SavedViewType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xsd::qif2::CameraBaseType (e, f | ::xml_schema::flags::base, c),
      AnnotationVisibleIds_ (this),
      AnnotationHiddenIds_ (this),
      BodyIds_ (this),
      ComponentIds_ (this),
      PlaneClippingIds_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void SavedViewType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CameraBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // AnnotationVisibleIds
        //
        if (n.name () == "AnnotationVisibleIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AnnotationVisibleIds_type > r (
            AnnotationVisibleIds_traits::create (i, f, this));

          if (!this->AnnotationVisibleIds_)
          {
            this->AnnotationVisibleIds_.set (r);
            continue;
          }
        }

        // AnnotationHiddenIds
        //
        if (n.name () == "AnnotationHiddenIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AnnotationHiddenIds_type > r (
            AnnotationHiddenIds_traits::create (i, f, this));

          if (!this->AnnotationHiddenIds_)
          {
            this->AnnotationHiddenIds_.set (r);
            continue;
          }
        }

        // BodyIds
        //
        if (n.name () == "BodyIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< BodyIds_type > r (
            BodyIds_traits::create (i, f, this));

          if (!this->BodyIds_)
          {
            this->BodyIds_.set (r);
            continue;
          }
        }

        // ComponentIds
        //
        if (n.name () == "ComponentIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ComponentIds_type > r (
            ComponentIds_traits::create (i, f, this));

          if (!this->ComponentIds_)
          {
            this->ComponentIds_.set (r);
            continue;
          }
        }

        // PlaneClippingIds
        //
        if (n.name () == "PlaneClippingIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PlaneClippingIds_type > r (
            PlaneClippingIds_traits::create (i, f, this));

          if (!this->PlaneClippingIds_)
          {
            this->PlaneClippingIds_.set (r);
            continue;
          }
        }

        break;
      }
    }

    SavedViewType* SavedViewType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SavedViewType (*this, f, c);
    }

    SavedViewType& SavedViewType::
    operator= (const SavedViewType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::CameraBaseType& > (*this) = x;
        this->AnnotationVisibleIds_ = x.AnnotationVisibleIds_;
        this->AnnotationHiddenIds_ = x.AnnotationHiddenIds_;
        this->BodyIds_ = x.BodyIds_;
        this->ComponentIds_ = x.ComponentIds_;
        this->PlaneClippingIds_ = x.PlaneClippingIds_;
      }

      return *this;
    }

    SavedViewType::
    ~SavedViewType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, SavedViewType >
    _xsd_SavedViewType_type_factory_init (
      "SavedViewType",
      "http://qifstandards.org/xsd/qif2");

    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::FrameRectangularType >
    _xsd_FrameRectangular_element_factory_init (
      "Frame",
      "http://qifstandards.org/xsd/qif2",
      "FrameRectangular",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::FrameCircularType >
    _xsd_FrameCircular_element_factory_init (
      "Frame",
      "http://qifstandards.org/xsd/qif2",
      "FrameCircular",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::FrameFlagType >
    _xsd_FrameFlag_element_factory_init (
      "Frame",
      "http://qifstandards.org/xsd/qif2",
      "FrameFlag",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::FrameIrregularFormType >
    _xsd_FrameIrregularForm_element_factory_init (
      "Frame",
      "http://qifstandards.org/xsd/qif2",
      "FrameIrregularForm",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::LeaderExtendType >
    _xsd_LeaderExtend_element_factory_init (
      "Leader",
      "http://qifstandards.org/xsd/qif2",
      "LeaderExtend",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::LeaderCircularType >
    _xsd_LeaderCircular_element_factory_init (
      "Leader",
      "http://qifstandards.org/xsd/qif2",
      "LeaderCircular",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::LeaderDoubleHeadType >
    _xsd_LeaderDoubleHead_element_factory_init (
      "Leader",
      "http://qifstandards.org/xsd/qif2",
      "LeaderDoubleHead",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::LeaderDoubleHeadCircularType >
    _xsd_LeaderDoubleHeadCircular_element_factory_init (
      "Leader",
      "http://qifstandards.org/xsd/qif2",
      "LeaderDoubleHeadCircular",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::LeaderDoubleHeadExtendType >
    _xsd_LeaderDoubleHeadExtend_element_factory_init (
      "Leader",
      "http://qifstandards.org/xsd/qif2",
      "LeaderDoubleHeadExtend",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::CameraType >
    _xsd_Camera_element_factory_init (
      "ViewBase",
      "http://qifstandards.org/xsd/qif2",
      "Camera",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::SavedViewType >
    _xsd_SavedView_element_factory_init (
      "ViewBase",
      "http://qifstandards.org/xsd/qif2",
      "SavedView",
      "http://qifstandards.org/xsd/qif2");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xsd
{
  namespace qif2
  {
    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::FramesType > (
        ::xsd::qif2::Frames (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FramesType > (
        ::xsd::qif2::Frames (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FramesType > (
        ::xsd::qif2::Frames (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Frames (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Frames (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Frames (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Frames (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Frames (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Frames (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::FramesType > (
        ::xsd::qif2::Frames (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FramesType > (
        ::xsd::qif2::Frames (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FramesType > (
        ::xsd::qif2::Frames (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (const ::xercesc::DOMDocument& doc,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::FramesType > (
          ::xsd::qif2::Frames (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Frames" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FramesType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FramesType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Frames",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FramesType >
    Frames (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Frames" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FramesType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FramesType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Frames",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameType > (
        ::xsd::qif2::Frame (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameType > (
        ::xsd::qif2::Frame (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameType > (
        ::xsd::qif2::Frame (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Frame (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Frame (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Frame (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Frame (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Frame (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Frame (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameType > (
        ::xsd::qif2::Frame (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameType > (
        ::xsd::qif2::Frame (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameType > (
        ::xsd::qif2::Frame (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (const ::xercesc::DOMDocument& doc,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::FrameType > (
          ::xsd::qif2::Frame (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Frame",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::FrameType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::FrameType > r (
          dynamic_cast< ::xsd::qif2::FrameType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Frame",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FrameType >
    Frame (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Frame",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::FrameType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::FrameType > r (
          dynamic_cast< ::xsd::qif2::FrameType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Frame",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameRectangularType > (
        ::xsd::qif2::FrameRectangular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameRectangularType > (
        ::xsd::qif2::FrameRectangular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameRectangularType > (
        ::xsd::qif2::FrameRectangular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FrameRectangular (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FrameRectangular (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FrameRectangular (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FrameRectangular (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FrameRectangular (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FrameRectangular (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameRectangularType > (
        ::xsd::qif2::FrameRectangular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameRectangularType > (
        ::xsd::qif2::FrameRectangular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameRectangularType > (
        ::xsd::qif2::FrameRectangular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::FrameRectangularType > (
          ::xsd::qif2::FrameRectangular (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "FrameRectangular",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::FrameRectangularType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::FrameRectangularType > r (
          dynamic_cast< ::xsd::qif2::FrameRectangularType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FrameRectangular",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FrameRectangularType >
    FrameRectangular (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "FrameRectangular",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::FrameRectangularType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::FrameRectangularType > r (
          dynamic_cast< ::xsd::qif2::FrameRectangularType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FrameRectangular",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameCircularType > (
        ::xsd::qif2::FrameCircular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameCircularType > (
        ::xsd::qif2::FrameCircular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameCircularType > (
        ::xsd::qif2::FrameCircular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FrameCircular (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FrameCircular (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FrameCircular (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FrameCircular (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FrameCircular (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FrameCircular (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameCircularType > (
        ::xsd::qif2::FrameCircular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameCircularType > (
        ::xsd::qif2::FrameCircular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameCircularType > (
        ::xsd::qif2::FrameCircular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::FrameCircularType > (
          ::xsd::qif2::FrameCircular (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "FrameCircular",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::FrameCircularType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::FrameCircularType > r (
          dynamic_cast< ::xsd::qif2::FrameCircularType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FrameCircular",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FrameCircularType >
    FrameCircular (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "FrameCircular",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::FrameCircularType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::FrameCircularType > r (
          dynamic_cast< ::xsd::qif2::FrameCircularType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FrameCircular",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameFlagType > (
        ::xsd::qif2::FrameFlag (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameFlagType > (
        ::xsd::qif2::FrameFlag (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameFlagType > (
        ::xsd::qif2::FrameFlag (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FrameFlag (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FrameFlag (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FrameFlag (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FrameFlag (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FrameFlag (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FrameFlag (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameFlagType > (
        ::xsd::qif2::FrameFlag (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameFlagType > (
        ::xsd::qif2::FrameFlag (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameFlagType > (
        ::xsd::qif2::FrameFlag (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (const ::xercesc::DOMDocument& doc,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::FrameFlagType > (
          ::xsd::qif2::FrameFlag (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "FrameFlag",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::FrameFlagType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::FrameFlagType > r (
          dynamic_cast< ::xsd::qif2::FrameFlagType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FrameFlag",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FrameFlagType >
    FrameFlag (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "FrameFlag",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::FrameFlagType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::FrameFlagType > r (
          dynamic_cast< ::xsd::qif2::FrameFlagType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FrameFlag",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType > (
        ::xsd::qif2::FrameIrregularForm (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType > (
        ::xsd::qif2::FrameIrregularForm (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType > (
        ::xsd::qif2::FrameIrregularForm (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FrameIrregularForm (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FrameIrregularForm (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FrameIrregularForm (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FrameIrregularForm (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FrameIrregularForm (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FrameIrregularForm (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType > (
        ::xsd::qif2::FrameIrregularForm (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType > (
        ::xsd::qif2::FrameIrregularForm (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType > (
        ::xsd::qif2::FrameIrregularForm (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType > (
          ::xsd::qif2::FrameIrregularForm (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "FrameIrregularForm",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::FrameIrregularFormType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType > r (
          dynamic_cast< ::xsd::qif2::FrameIrregularFormType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FrameIrregularForm",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType >
    FrameIrregularForm (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "FrameIrregularForm",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::FrameIrregularFormType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::FrameIrregularFormType > r (
          dynamic_cast< ::xsd::qif2::FrameIrregularFormType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FrameIrregularForm",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderType > (
        ::xsd::qif2::Leader (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderType > (
        ::xsd::qif2::Leader (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderType > (
        ::xsd::qif2::Leader (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Leader (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Leader (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Leader (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Leader (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Leader (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Leader (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderType > (
        ::xsd::qif2::Leader (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderType > (
        ::xsd::qif2::Leader (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderType > (
        ::xsd::qif2::Leader (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (const ::xercesc::DOMDocument& doc,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::LeaderType > (
          ::xsd::qif2::Leader (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Leader",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::LeaderType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::LeaderType > r (
          dynamic_cast< ::xsd::qif2::LeaderType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Leader",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderType >
    Leader (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Leader",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::LeaderType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::LeaderType > r (
          dynamic_cast< ::xsd::qif2::LeaderType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Leader",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderExtendType > (
        ::xsd::qif2::LeaderExtend (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderExtendType > (
        ::xsd::qif2::LeaderExtend (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderExtendType > (
        ::xsd::qif2::LeaderExtend (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LeaderExtend (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LeaderExtend (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LeaderExtend (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LeaderExtend (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LeaderExtend (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LeaderExtend (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderExtendType > (
        ::xsd::qif2::LeaderExtend (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderExtendType > (
        ::xsd::qif2::LeaderExtend (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderExtendType > (
        ::xsd::qif2::LeaderExtend (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::LeaderExtendType > (
          ::xsd::qif2::LeaderExtend (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "LeaderExtend",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::LeaderExtendType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::LeaderExtendType > r (
          dynamic_cast< ::xsd::qif2::LeaderExtendType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LeaderExtend",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderExtendType >
    LeaderExtend (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "LeaderExtend",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::LeaderExtendType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::LeaderExtendType > r (
          dynamic_cast< ::xsd::qif2::LeaderExtendType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LeaderExtend",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderCircularType > (
        ::xsd::qif2::LeaderCircular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderCircularType > (
        ::xsd::qif2::LeaderCircular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderCircularType > (
        ::xsd::qif2::LeaderCircular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LeaderCircular (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LeaderCircular (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LeaderCircular (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LeaderCircular (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LeaderCircular (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LeaderCircular (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderCircularType > (
        ::xsd::qif2::LeaderCircular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderCircularType > (
        ::xsd::qif2::LeaderCircular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderCircularType > (
        ::xsd::qif2::LeaderCircular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::LeaderCircularType > (
          ::xsd::qif2::LeaderCircular (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "LeaderCircular",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::LeaderCircularType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::LeaderCircularType > r (
          dynamic_cast< ::xsd::qif2::LeaderCircularType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LeaderCircular",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderCircularType >
    LeaderCircular (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "LeaderCircular",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::LeaderCircularType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::LeaderCircularType > r (
          dynamic_cast< ::xsd::qif2::LeaderCircularType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LeaderCircular",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType > (
        ::xsd::qif2::LeaderDoubleHead (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType > (
        ::xsd::qif2::LeaderDoubleHead (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType > (
        ::xsd::qif2::LeaderDoubleHead (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LeaderDoubleHead (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LeaderDoubleHead (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LeaderDoubleHead (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LeaderDoubleHead (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LeaderDoubleHead (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LeaderDoubleHead (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType > (
        ::xsd::qif2::LeaderDoubleHead (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType > (
        ::xsd::qif2::LeaderDoubleHead (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType > (
        ::xsd::qif2::LeaderDoubleHead (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType > (
          ::xsd::qif2::LeaderDoubleHead (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "LeaderDoubleHead",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::LeaderDoubleHeadType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType > r (
          dynamic_cast< ::xsd::qif2::LeaderDoubleHeadType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LeaderDoubleHead",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType >
    LeaderDoubleHead (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "LeaderDoubleHead",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::LeaderDoubleHeadType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadType > r (
          dynamic_cast< ::xsd::qif2::LeaderDoubleHeadType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LeaderDoubleHead",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType > (
        ::xsd::qif2::LeaderDoubleHeadCircular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType > (
        ::xsd::qif2::LeaderDoubleHeadCircular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType > (
        ::xsd::qif2::LeaderDoubleHeadCircular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LeaderDoubleHeadCircular (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LeaderDoubleHeadCircular (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LeaderDoubleHeadCircular (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LeaderDoubleHeadCircular (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LeaderDoubleHeadCircular (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LeaderDoubleHeadCircular (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType > (
        ::xsd::qif2::LeaderDoubleHeadCircular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType > (
        ::xsd::qif2::LeaderDoubleHeadCircular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType > (
        ::xsd::qif2::LeaderDoubleHeadCircular (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (const ::xercesc::DOMDocument& doc,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType > (
          ::xsd::qif2::LeaderDoubleHeadCircular (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "LeaderDoubleHeadCircular",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::LeaderDoubleHeadCircularType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType > r (
          dynamic_cast< ::xsd::qif2::LeaderDoubleHeadCircularType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LeaderDoubleHeadCircular",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType >
    LeaderDoubleHeadCircular (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "LeaderDoubleHeadCircular",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::LeaderDoubleHeadCircularType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadCircularType > r (
          dynamic_cast< ::xsd::qif2::LeaderDoubleHeadCircularType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LeaderDoubleHeadCircular",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType > (
        ::xsd::qif2::LeaderDoubleHeadExtend (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType > (
        ::xsd::qif2::LeaderDoubleHeadExtend (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType > (
        ::xsd::qif2::LeaderDoubleHeadExtend (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LeaderDoubleHeadExtend (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LeaderDoubleHeadExtend (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LeaderDoubleHeadExtend (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LeaderDoubleHeadExtend (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LeaderDoubleHeadExtend (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LeaderDoubleHeadExtend (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType > (
        ::xsd::qif2::LeaderDoubleHeadExtend (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType > (
        ::xsd::qif2::LeaderDoubleHeadExtend (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType > (
        ::xsd::qif2::LeaderDoubleHeadExtend (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType > (
          ::xsd::qif2::LeaderDoubleHeadExtend (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "LeaderDoubleHeadExtend",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::LeaderDoubleHeadExtendType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType > r (
          dynamic_cast< ::xsd::qif2::LeaderDoubleHeadExtendType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LeaderDoubleHeadExtend",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType >
    LeaderDoubleHeadExtend (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "LeaderDoubleHeadExtend",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::LeaderDoubleHeadExtendType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::LeaderDoubleHeadExtendType > r (
          dynamic_cast< ::xsd::qif2::LeaderDoubleHeadExtendType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LeaderDoubleHeadExtend",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::WitnessLinesType > (
        ::xsd::qif2::WitnessLines (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::WitnessLinesType > (
        ::xsd::qif2::WitnessLines (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::WitnessLinesType > (
        ::xsd::qif2::WitnessLines (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::WitnessLines (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::WitnessLines (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::WitnessLines (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::WitnessLines (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::WitnessLines (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::WitnessLines (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::WitnessLinesType > (
        ::xsd::qif2::WitnessLines (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::WitnessLinesType > (
        ::xsd::qif2::WitnessLines (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::WitnessLinesType > (
        ::xsd::qif2::WitnessLines (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::WitnessLinesType > (
          ::xsd::qif2::WitnessLines (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "WitnessLines" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::WitnessLinesType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::WitnessLinesType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "WitnessLines",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::WitnessLinesType >
    WitnessLines (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "WitnessLines" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::WitnessLinesType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::WitnessLinesType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "WitnessLines",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::TextsType > (
        ::xsd::qif2::Texts (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::TextsType > (
        ::xsd::qif2::Texts (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::TextsType > (
        ::xsd::qif2::Texts (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Texts (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Texts (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Texts (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Texts (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Texts (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Texts (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::TextsType > (
        ::xsd::qif2::Texts (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::TextsType > (
        ::xsd::qif2::Texts (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::TextsType > (
        ::xsd::qif2::Texts (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (const ::xercesc::DOMDocument& doc,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::TextsType > (
          ::xsd::qif2::Texts (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Texts" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::TextsType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::TextsType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Texts",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::TextsType >
    Texts (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Texts" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::TextsType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::TextsType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Texts",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::TextType > (
        ::xsd::qif2::Text (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::TextType > (
        ::xsd::qif2::Text (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::TextType > (
        ::xsd::qif2::Text (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Text (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Text (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Text (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Text (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Text (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Text (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::TextType > (
        ::xsd::qif2::Text (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::TextType > (
        ::xsd::qif2::Text (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::TextType > (
        ::xsd::qif2::Text (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (const ::xercesc::DOMDocument& doc,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::TextType > (
          ::xsd::qif2::Text (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Text" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::TextType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::TextType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Text",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::TextType >
    Text (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Text" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::TextType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::TextType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Text",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::VisualizationSetType > (
        ::xsd::qif2::VisualizationSet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::VisualizationSetType > (
        ::xsd::qif2::VisualizationSet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::VisualizationSetType > (
        ::xsd::qif2::VisualizationSet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::VisualizationSet (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::VisualizationSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::VisualizationSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::VisualizationSet (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::VisualizationSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::VisualizationSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::VisualizationSetType > (
        ::xsd::qif2::VisualizationSet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::VisualizationSetType > (
        ::xsd::qif2::VisualizationSet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::VisualizationSetType > (
        ::xsd::qif2::VisualizationSet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::VisualizationSetType > (
          ::xsd::qif2::VisualizationSet (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "VisualizationSet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::VisualizationSetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::VisualizationSetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "VisualizationSet",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::VisualizationSetType >
    VisualizationSet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "VisualizationSet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::VisualizationSetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::VisualizationSetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "VisualizationSet",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType > (
        ::xsd::qif2::PMIDisplaySet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType > (
        ::xsd::qif2::PMIDisplaySet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType > (
        ::xsd::qif2::PMIDisplaySet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PMIDisplaySet (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PMIDisplaySet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PMIDisplaySet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PMIDisplaySet (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PMIDisplaySet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PMIDisplaySet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType > (
        ::xsd::qif2::PMIDisplaySet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType > (
        ::xsd::qif2::PMIDisplaySet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType > (
        ::xsd::qif2::PMIDisplaySet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType > (
          ::xsd::qif2::PMIDisplaySet (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "PMIDisplaySet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PMIDisplaySetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PMIDisplaySet",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType >
    PMIDisplaySet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "PMIDisplaySet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PMIDisplaySetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PMIDisplaySetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PMIDisplaySet",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::FontsType > (
        ::xsd::qif2::Fonts (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FontsType > (
        ::xsd::qif2::Fonts (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FontsType > (
        ::xsd::qif2::Fonts (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Fonts (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Fonts (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Fonts (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Fonts (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Fonts (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Fonts (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::FontsType > (
        ::xsd::qif2::Fonts (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FontsType > (
        ::xsd::qif2::Fonts (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FontsType > (
        ::xsd::qif2::Fonts (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (const ::xercesc::DOMDocument& doc,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::FontsType > (
          ::xsd::qif2::Fonts (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Fonts" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FontsType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FontsType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Fonts",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FontsType >
    Fonts (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Fonts" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FontsType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FontsType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Fonts",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::ViewSetType > (
        ::xsd::qif2::ViewSet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ViewSetType > (
        ::xsd::qif2::ViewSet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ViewSetType > (
        ::xsd::qif2::ViewSet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ViewSet (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ViewSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ViewSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ViewSet (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ViewSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ViewSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::ViewSetType > (
        ::xsd::qif2::ViewSet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ViewSetType > (
        ::xsd::qif2::ViewSet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ViewSetType > (
        ::xsd::qif2::ViewSet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::ViewSetType > (
          ::xsd::qif2::ViewSet (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ViewSet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ViewSetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ViewSetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ViewSet",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ViewSetType >
    ViewSet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ViewSet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ViewSetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ViewSetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ViewSet",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::ViewBaseType > (
        ::xsd::qif2::ViewBase (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ViewBaseType > (
        ::xsd::qif2::ViewBase (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ViewBaseType > (
        ::xsd::qif2::ViewBase (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ViewBase (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ViewBase (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ViewBase (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ViewBase (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ViewBase (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ViewBase (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::ViewBaseType > (
        ::xsd::qif2::ViewBase (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ViewBaseType > (
        ::xsd::qif2::ViewBase (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ViewBaseType > (
        ::xsd::qif2::ViewBase (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (const ::xercesc::DOMDocument& doc,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::ViewBaseType > (
          ::xsd::qif2::ViewBase (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "ViewBase",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::ViewBaseType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::ViewBaseType > r (
          dynamic_cast< ::xsd::qif2::ViewBaseType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ViewBase",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ViewBaseType >
    ViewBase (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "ViewBase",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::ViewBaseType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::ViewBaseType > r (
          dynamic_cast< ::xsd::qif2::ViewBaseType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ViewBase",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::CameraType > (
        ::xsd::qif2::Camera (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::CameraType > (
        ::xsd::qif2::Camera (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::CameraType > (
        ::xsd::qif2::Camera (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Camera (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Camera (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Camera (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Camera (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Camera (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Camera (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::CameraType > (
        ::xsd::qif2::Camera (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::CameraType > (
        ::xsd::qif2::Camera (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::CameraType > (
        ::xsd::qif2::Camera (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (const ::xercesc::DOMDocument& doc,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::CameraType > (
          ::xsd::qif2::Camera (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Camera",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::CameraType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::CameraType > r (
          dynamic_cast< ::xsd::qif2::CameraType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Camera",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CameraType >
    Camera (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Camera",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::CameraType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::CameraType > r (
          dynamic_cast< ::xsd::qif2::CameraType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Camera",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::SavedViewType > (
        ::xsd::qif2::SavedView (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::SavedViewType > (
        ::xsd::qif2::SavedView (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::SavedViewType > (
        ::xsd::qif2::SavedView (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SavedView (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SavedView (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SavedView (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SavedView (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SavedView (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SavedView (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::SavedViewType > (
        ::xsd::qif2::SavedView (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::SavedViewType > (
        ::xsd::qif2::SavedView (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::SavedViewType > (
        ::xsd::qif2::SavedView (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (const ::xercesc::DOMDocument& doc,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::SavedViewType > (
          ::xsd::qif2::SavedView (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "SavedView",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::SavedViewType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::SavedViewType > r (
          dynamic_cast< ::xsd::qif2::SavedViewType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SavedView",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SavedViewType >
    SavedView (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "SavedView",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::SavedViewType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::SavedViewType > r (
          dynamic_cast< ::xsd::qif2::SavedViewType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SavedView",
        "http://qifstandards.org/xsd/qif2");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace xsd
{
  namespace qif2
  {
    void
    operator<< (::xercesc::DOMElement& e, const VisualizationSetType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Fonts
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Fonts",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.Fonts ();
      }

      // PMIDisplaySet
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PMIDisplaySet",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.PMIDisplaySet ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const FontsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Font
      //
      for (FontsType::Font_const_iterator
           b (i.Font ().begin ()), n (i.Font ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Font",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // N
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "N",
            e));

        a << i.N ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const FontType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Attributes
      //
      if (i.Attributes ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Attributes",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Attributes ();
      }

      // Name
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Name",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.Name ();
      }

      // Size
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Size",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.Size ();
      }

      // index
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "index",
            e));

        a << i.index ();
      }

      // bold
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "bold",
            e));

        a << i.bold ();
      }

      // italic
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "italic",
            e));

        a << i.italic ();
      }

      // underline
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "underline",
            e));

        a << i.underline ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const PMIDisplaySetType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // PMIDisplay
      //
      for (PMIDisplaySetType::PMIDisplay_const_iterator
           b (i.PMIDisplay ().begin ()), n (i.PMIDisplay ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PMIDisplay",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const PMIDisplayType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Attributes
      //
      if (i.Attributes ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Attributes",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Attributes ();
      }

      // Color
      //
      if (i.Color ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Color",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Color ();
      }

      // Plane
      //
      if (i.Plane ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Plane",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Plane ();
      }

      // Texts
      //
      if (i.Texts ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Texts",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Texts ();
      }

      // Leader
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (PMIDisplayType::Leader_const_iterator
             b (i.Leader ().begin ()), n (i.Leader ().end ());
             b != n; ++b)
        {
          if (typeid (PMIDisplayType::Leader_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Leader",
                "http://qifstandards.org/xsd/qif2",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "Leader",
              "http://qifstandards.org/xsd/qif2",
              true, true, e, *b);
        }
      }

      // WitnessLines
      //
      if (i.WitnessLines ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "WitnessLines",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.WitnessLines ();
      }

      // Frames
      //
      if (i.Frames ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Frames",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Frames ();
      }

      // Balloon
      //
      if (i.Balloon ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Balloon",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Balloon ();
      }

      // Reference
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Reference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.Reference ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const LeaderType& i)
    {
      e << static_cast< const ::xsd::qif2::LineSegment2dType& > (i);

      // HeadForm
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "HeadForm",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.HeadForm ();
      }

      // HeadHeight
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "HeadHeight",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << ::xml_schema::as_double(i.HeadHeight ());
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LeaderType >
    _xsd_LeaderType_type_serializer_init (
      "LeaderType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const LeaderExtendType& i)
    {
      e << static_cast< const ::xsd::qif2::LeaderType& > (i);

      // PointExtension
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PointExtension",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.PointExtension ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LeaderExtendType >
    _xsd_LeaderExtendType_type_serializer_init (
      "LeaderExtendType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const LeaderDoubleHeadType& i)
    {
      e << static_cast< const ::xsd::qif2::LeaderType& > (i);

      // HeadForm2
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "HeadForm2",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.HeadForm2 ();
      }

      // PointConnection
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PointConnection",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.PointConnection ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LeaderDoubleHeadType >
    _xsd_LeaderDoubleHeadType_type_serializer_init (
      "LeaderDoubleHeadType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const LeaderDoubleHeadExtendType& i)
    {
      e << static_cast< const ::xsd::qif2::LeaderDoubleHeadType& > (i);

      // PointExtension
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PointExtension",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.PointExtension ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LeaderDoubleHeadExtendType >
    _xsd_LeaderDoubleHeadExtendType_type_serializer_init (
      "LeaderDoubleHeadExtendType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const LeaderCircularType& i)
    {
      e << static_cast< const ::xsd::qif2::LeaderType& > (i);

      // Center
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Center",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.Center ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LeaderCircularType >
    _xsd_LeaderCircularType_type_serializer_init (
      "LeaderCircularType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const LeaderDoubleHeadCircularType& i)
    {
      e << static_cast< const ::xsd::qif2::LeaderDoubleHeadType& > (i);

      // Center
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Center",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.Center ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LeaderDoubleHeadCircularType >
    _xsd_LeaderDoubleHeadCircularType_type_serializer_init (
      "LeaderDoubleHeadCircularType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const BalloonType& i)
    {
      e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, char, ::xml_schema::simple_type >& > (i);

      // sub
      //
      if (i.sub ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "sub",
            e));

        a << *i.sub ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const TextsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Text
      //
      for (TextsType::Text_const_iterator
           b (i.Text ().begin ()), n (i.Text ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Text",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // fontIndex
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "fontIndex",
            e));

        a << i.fontIndex ();
      }

      // lineHeight
      //
      if (i.lineHeight ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "lineHeight",
            e));

        a << ::xml_schema::as_double(*i.lineHeight ());
      }

      // N
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "N",
            e));

        a << i.N ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const FramesType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Frame
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (FramesType::Frame_const_iterator
             b (i.Frame ().begin ()), n (i.Frame ().end ());
             b != n; ++b)
        {
          if (typeid (FramesType::Frame_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Frame",
                "http://qifstandards.org/xsd/qif2",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "Frame",
              "http://qifstandards.org/xsd/qif2",
              true, true, e, *b);
        }
      }

      // N
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "N",
            e));

        a << i.N ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const TextType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Data
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Data",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.Data ();
      }

      // XY
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "XY",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.XY ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const WitnessLinesType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Segment1
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Segment1",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.Segment1 ();
      }

      // Segment2
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Segment2",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.Segment2 ();
      }

      // width
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "width",
            e));

        a << ::xml_schema::as_double(i.width ());
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const FrameType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // XY
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "XY",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.XY ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FrameType >
    _xsd_FrameType_type_serializer_init (
      "FrameType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const FrameRectangularType& i)
    {
      e << static_cast< const ::xsd::qif2::FrameType& > (i);

      // Width
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Width",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << ::xml_schema::as_double(i.Width ());
      }

      // Height
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Height",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << ::xml_schema::as_double(i.Height ());
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FrameRectangularType >
    _xsd_FrameRectangularType_type_serializer_init (
      "FrameRectangularType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const FrameCircularType& i)
    {
      e << static_cast< const ::xsd::qif2::FrameType& > (i);

      // Radius
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Radius",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << ::xml_schema::as_double(i.Radius ());
      }

      // crossed
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "crossed",
            e));

        a << i.crossed ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FrameCircularType >
    _xsd_FrameCircularType_type_serializer_init (
      "FrameCircularType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const FrameFlagType& i)
    {
      e << static_cast< const ::xsd::qif2::FrameRectangularType& > (i);

      // right
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "right",
            e));

        a << i.right ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FrameFlagType >
    _xsd_FrameFlagType_type_serializer_init (
      "FrameFlagType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const FrameIrregularFormType& i)
    {
      e << static_cast< const ::xsd::qif2::FrameType& > (i);

      // Points
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Points",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.Points ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FrameIrregularFormType >
    _xsd_FrameIrregularFormType_type_serializer_init (
      "FrameIrregularFormType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const LeaderHeadFormEnumType& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const LeaderHeadFormEnumType& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const LeaderHeadFormEnumType& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const ViewSetType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // ViewBase
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (ViewSetType::ViewBase_const_iterator
             b (i.ViewBase ().begin ()), n (i.ViewBase ().end ());
             b != n; ++b)
        {
          if (typeid (ViewSetType::ViewBase_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ViewBase",
                "http://qifstandards.org/xsd/qif2",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "ViewBase",
              "http://qifstandards.org/xsd/qif2",
              true, true, e, *b);
        }
      }

      // N
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "N",
            e));

        a << i.N ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const ViewBaseType& i)
    {
      e << static_cast< const ::xsd::qif2::NodeWithIdBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ViewBaseType >
    _xsd_ViewBaseType_type_serializer_init (
      "ViewBaseType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const CameraBaseType& i)
    {
      e << static_cast< const ::xsd::qif2::ViewBaseType& > (i);

      // ViewPlaneOrigin
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ViewPlaneOrigin",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.ViewPlaneOrigin ();
      }

      // Orientation
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Orientation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.Orientation ();
      }

      // Ratio
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Ratio",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << ::xml_schema::as_double(i.Ratio ());
      }

      // Near
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Near",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << ::xml_schema::as_double(i.Near ());
      }

      // Far
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Far",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << ::xml_schema::as_double(i.Far ());
      }

      // Height
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Height",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << ::xml_schema::as_double(i.Height ());
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CameraBaseType >
    _xsd_CameraBaseType_type_serializer_init (
      "CameraBaseType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const CameraFormEnumType& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const CameraFormEnumType& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const CameraFormEnumType& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const CameraType& i)
    {
      e << static_cast< const ::xsd::qif2::CameraBaseType& > (i);

      // form
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "form",
            e));

        a << i.form ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CameraType >
    _xsd_CameraType_type_serializer_init (
      "CameraType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const SavedViewType& i)
    {
      e << static_cast< const ::xsd::qif2::CameraBaseType& > (i);

      // AnnotationVisibleIds
      //
      if (i.AnnotationVisibleIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AnnotationVisibleIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.AnnotationVisibleIds ();
      }

      // AnnotationHiddenIds
      //
      if (i.AnnotationHiddenIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AnnotationHiddenIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.AnnotationHiddenIds ();
      }

      // BodyIds
      //
      if (i.BodyIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "BodyIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.BodyIds ();
      }

      // ComponentIds
      //
      if (i.ComponentIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ComponentIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ComponentIds ();
      }

      // PlaneClippingIds
      //
      if (i.PlaneClippingIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PlaneClippingIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.PlaneClippingIds ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SavedViewType >
    _xsd_SavedViewType_type_serializer_init (
      "SavedViewType",
      "http://qifstandards.org/xsd/qif2");


    void
    Frames (::std::ostream& o,
            const ::xsd::qif2::FramesType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Frames (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    Frames (::std::ostream& o,
            const ::xsd::qif2::FramesType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Frames (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Frames (::std::ostream& o,
            const ::xsd::qif2::FramesType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Frames (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Frames (::xercesc::XMLFormatTarget& t,
            const ::xsd::qif2::FramesType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Frames (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    Frames (::xercesc::XMLFormatTarget& t,
            const ::xsd::qif2::FramesType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Frames (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Frames (::xercesc::XMLFormatTarget& t,
            const ::xsd::qif2::FramesType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Frames (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Frames (::xercesc::DOMDocument& d,
            const ::xsd::qif2::FramesType& s,
            ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Frames" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Frames",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Frames (const ::xsd::qif2::FramesType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Frames",
          "http://qifstandards.org/xsd/qif2",
          m, f));

      ::xsd::qif2::Frames (*d, s, f);
      return d;
    }

    void
    Frame (::std::ostream& o,
           const ::xsd::qif2::FrameType& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Frame (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    Frame (::std::ostream& o,
           const ::xsd::qif2::FrameType& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Frame (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Frame (::std::ostream& o,
           const ::xsd::qif2::FrameType& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Frame (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Frame (::xercesc::XMLFormatTarget& t,
           const ::xsd::qif2::FrameType& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Frame (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    Frame (::xercesc::XMLFormatTarget& t,
           const ::xsd::qif2::FrameType& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Frame (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Frame (::xercesc::XMLFormatTarget& t,
           const ::xsd::qif2::FrameType& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Frame (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Frame (::xercesc::DOMDocument& d,
           const ::xsd::qif2::FrameType& s,
           ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::FrameType) == typeid (s))
      {
        if (n.name () == "Frame" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Frame",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "Frame",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Frame (const ::xsd::qif2::FrameType& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::FrameType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "Frame",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "Frame",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::Frame (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::FrameRectangularType >
    _xsd_FrameRectangular_element_serializer_init (
      "Frame",
      "http://qifstandards.org/xsd/qif2",
      "FrameRectangular",
      "http://qifstandards.org/xsd/qif2");


    void
    FrameRectangular (::std::ostream& o,
                      const ::xsd::qif2::FrameRectangularType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameRectangular (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    FrameRectangular (::std::ostream& o,
                      const ::xsd::qif2::FrameRectangularType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameRectangular (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FrameRectangular (::std::ostream& o,
                      const ::xsd::qif2::FrameRectangularType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameRectangular (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FrameRectangular (::xercesc::XMLFormatTarget& t,
                      const ::xsd::qif2::FrameRectangularType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameRectangular (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    FrameRectangular (::xercesc::XMLFormatTarget& t,
                      const ::xsd::qif2::FrameRectangularType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameRectangular (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FrameRectangular (::xercesc::XMLFormatTarget& t,
                      const ::xsd::qif2::FrameRectangularType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameRectangular (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FrameRectangular (::xercesc::DOMDocument& d,
                      const ::xsd::qif2::FrameRectangularType& s,
                      ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::FrameRectangularType) == typeid (s))
      {
        if (n.name () == "FrameRectangular" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "FrameRectangular",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "FrameRectangular",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FrameRectangular (const ::xsd::qif2::FrameRectangularType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::FrameRectangularType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "FrameRectangular",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "FrameRectangular",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::FrameRectangular (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::FrameCircularType >
    _xsd_FrameCircular_element_serializer_init (
      "Frame",
      "http://qifstandards.org/xsd/qif2",
      "FrameCircular",
      "http://qifstandards.org/xsd/qif2");


    void
    FrameCircular (::std::ostream& o,
                   const ::xsd::qif2::FrameCircularType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameCircular (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    FrameCircular (::std::ostream& o,
                   const ::xsd::qif2::FrameCircularType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameCircular (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FrameCircular (::std::ostream& o,
                   const ::xsd::qif2::FrameCircularType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameCircular (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FrameCircular (::xercesc::XMLFormatTarget& t,
                   const ::xsd::qif2::FrameCircularType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameCircular (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    FrameCircular (::xercesc::XMLFormatTarget& t,
                   const ::xsd::qif2::FrameCircularType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameCircular (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FrameCircular (::xercesc::XMLFormatTarget& t,
                   const ::xsd::qif2::FrameCircularType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameCircular (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FrameCircular (::xercesc::DOMDocument& d,
                   const ::xsd::qif2::FrameCircularType& s,
                   ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::FrameCircularType) == typeid (s))
      {
        if (n.name () == "FrameCircular" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "FrameCircular",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "FrameCircular",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FrameCircular (const ::xsd::qif2::FrameCircularType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::FrameCircularType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "FrameCircular",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "FrameCircular",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::FrameCircular (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::FrameFlagType >
    _xsd_FrameFlag_element_serializer_init (
      "Frame",
      "http://qifstandards.org/xsd/qif2",
      "FrameFlag",
      "http://qifstandards.org/xsd/qif2");


    void
    FrameFlag (::std::ostream& o,
               const ::xsd::qif2::FrameFlagType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameFlag (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    FrameFlag (::std::ostream& o,
               const ::xsd::qif2::FrameFlagType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameFlag (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FrameFlag (::std::ostream& o,
               const ::xsd::qif2::FrameFlagType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameFlag (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FrameFlag (::xercesc::XMLFormatTarget& t,
               const ::xsd::qif2::FrameFlagType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameFlag (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    FrameFlag (::xercesc::XMLFormatTarget& t,
               const ::xsd::qif2::FrameFlagType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameFlag (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FrameFlag (::xercesc::XMLFormatTarget& t,
               const ::xsd::qif2::FrameFlagType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameFlag (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FrameFlag (::xercesc::DOMDocument& d,
               const ::xsd::qif2::FrameFlagType& s,
               ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::FrameFlagType) == typeid (s))
      {
        if (n.name () == "FrameFlag" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "FrameFlag",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "FrameFlag",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FrameFlag (const ::xsd::qif2::FrameFlagType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::FrameFlagType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "FrameFlag",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "FrameFlag",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::FrameFlag (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::FrameIrregularFormType >
    _xsd_FrameIrregularForm_element_serializer_init (
      "Frame",
      "http://qifstandards.org/xsd/qif2",
      "FrameIrregularForm",
      "http://qifstandards.org/xsd/qif2");


    void
    FrameIrregularForm (::std::ostream& o,
                        const ::xsd::qif2::FrameIrregularFormType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameIrregularForm (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    FrameIrregularForm (::std::ostream& o,
                        const ::xsd::qif2::FrameIrregularFormType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameIrregularForm (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FrameIrregularForm (::std::ostream& o,
                        const ::xsd::qif2::FrameIrregularFormType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameIrregularForm (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FrameIrregularForm (::xercesc::XMLFormatTarget& t,
                        const ::xsd::qif2::FrameIrregularFormType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameIrregularForm (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    FrameIrregularForm (::xercesc::XMLFormatTarget& t,
                        const ::xsd::qif2::FrameIrregularFormType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameIrregularForm (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FrameIrregularForm (::xercesc::XMLFormatTarget& t,
                        const ::xsd::qif2::FrameIrregularFormType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FrameIrregularForm (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FrameIrregularForm (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::FrameIrregularFormType& s,
                        ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::FrameIrregularFormType) == typeid (s))
      {
        if (n.name () == "FrameIrregularForm" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "FrameIrregularForm",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "FrameIrregularForm",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FrameIrregularForm (const ::xsd::qif2::FrameIrregularFormType& s,
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::FrameIrregularFormType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "FrameIrregularForm",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "FrameIrregularForm",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::FrameIrregularForm (*d, s, f);
      return d;
    }

    void
    Leader (::std::ostream& o,
            const ::xsd::qif2::LeaderType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Leader (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    Leader (::std::ostream& o,
            const ::xsd::qif2::LeaderType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Leader (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Leader (::std::ostream& o,
            const ::xsd::qif2::LeaderType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Leader (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Leader (::xercesc::XMLFormatTarget& t,
            const ::xsd::qif2::LeaderType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Leader (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    Leader (::xercesc::XMLFormatTarget& t,
            const ::xsd::qif2::LeaderType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Leader (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Leader (::xercesc::XMLFormatTarget& t,
            const ::xsd::qif2::LeaderType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Leader (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Leader (::xercesc::DOMDocument& d,
            const ::xsd::qif2::LeaderType& s,
            ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::LeaderType) == typeid (s))
      {
        if (n.name () == "Leader" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Leader",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "Leader",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Leader (const ::xsd::qif2::LeaderType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::LeaderType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "Leader",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "Leader",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::Leader (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::LeaderExtendType >
    _xsd_LeaderExtend_element_serializer_init (
      "Leader",
      "http://qifstandards.org/xsd/qif2",
      "LeaderExtend",
      "http://qifstandards.org/xsd/qif2");


    void
    LeaderExtend (::std::ostream& o,
                  const ::xsd::qif2::LeaderExtendType& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderExtend (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    LeaderExtend (::std::ostream& o,
                  const ::xsd::qif2::LeaderExtendType& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderExtend (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LeaderExtend (::std::ostream& o,
                  const ::xsd::qif2::LeaderExtendType& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderExtend (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LeaderExtend (::xercesc::XMLFormatTarget& t,
                  const ::xsd::qif2::LeaderExtendType& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderExtend (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    LeaderExtend (::xercesc::XMLFormatTarget& t,
                  const ::xsd::qif2::LeaderExtendType& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderExtend (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LeaderExtend (::xercesc::XMLFormatTarget& t,
                  const ::xsd::qif2::LeaderExtendType& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderExtend (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LeaderExtend (::xercesc::DOMDocument& d,
                  const ::xsd::qif2::LeaderExtendType& s,
                  ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::LeaderExtendType) == typeid (s))
      {
        if (n.name () == "LeaderExtend" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "LeaderExtend",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "LeaderExtend",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LeaderExtend (const ::xsd::qif2::LeaderExtendType& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::LeaderExtendType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "LeaderExtend",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "LeaderExtend",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::LeaderExtend (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::LeaderCircularType >
    _xsd_LeaderCircular_element_serializer_init (
      "Leader",
      "http://qifstandards.org/xsd/qif2",
      "LeaderCircular",
      "http://qifstandards.org/xsd/qif2");


    void
    LeaderCircular (::std::ostream& o,
                    const ::xsd::qif2::LeaderCircularType& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderCircular (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    LeaderCircular (::std::ostream& o,
                    const ::xsd::qif2::LeaderCircularType& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderCircular (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LeaderCircular (::std::ostream& o,
                    const ::xsd::qif2::LeaderCircularType& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderCircular (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LeaderCircular (::xercesc::XMLFormatTarget& t,
                    const ::xsd::qif2::LeaderCircularType& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderCircular (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    LeaderCircular (::xercesc::XMLFormatTarget& t,
                    const ::xsd::qif2::LeaderCircularType& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderCircular (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LeaderCircular (::xercesc::XMLFormatTarget& t,
                    const ::xsd::qif2::LeaderCircularType& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderCircular (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LeaderCircular (::xercesc::DOMDocument& d,
                    const ::xsd::qif2::LeaderCircularType& s,
                    ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::LeaderCircularType) == typeid (s))
      {
        if (n.name () == "LeaderCircular" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "LeaderCircular",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "LeaderCircular",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LeaderCircular (const ::xsd::qif2::LeaderCircularType& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::LeaderCircularType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "LeaderCircular",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "LeaderCircular",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::LeaderCircular (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::LeaderDoubleHeadType >
    _xsd_LeaderDoubleHead_element_serializer_init (
      "Leader",
      "http://qifstandards.org/xsd/qif2",
      "LeaderDoubleHead",
      "http://qifstandards.org/xsd/qif2");


    void
    LeaderDoubleHead (::std::ostream& o,
                      const ::xsd::qif2::LeaderDoubleHeadType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderDoubleHead (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    LeaderDoubleHead (::std::ostream& o,
                      const ::xsd::qif2::LeaderDoubleHeadType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderDoubleHead (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LeaderDoubleHead (::std::ostream& o,
                      const ::xsd::qif2::LeaderDoubleHeadType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderDoubleHead (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LeaderDoubleHead (::xercesc::XMLFormatTarget& t,
                      const ::xsd::qif2::LeaderDoubleHeadType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderDoubleHead (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    LeaderDoubleHead (::xercesc::XMLFormatTarget& t,
                      const ::xsd::qif2::LeaderDoubleHeadType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderDoubleHead (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LeaderDoubleHead (::xercesc::XMLFormatTarget& t,
                      const ::xsd::qif2::LeaderDoubleHeadType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderDoubleHead (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LeaderDoubleHead (::xercesc::DOMDocument& d,
                      const ::xsd::qif2::LeaderDoubleHeadType& s,
                      ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::LeaderDoubleHeadType) == typeid (s))
      {
        if (n.name () == "LeaderDoubleHead" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "LeaderDoubleHead",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "LeaderDoubleHead",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LeaderDoubleHead (const ::xsd::qif2::LeaderDoubleHeadType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::LeaderDoubleHeadType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "LeaderDoubleHead",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "LeaderDoubleHead",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::LeaderDoubleHead (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::LeaderDoubleHeadCircularType >
    _xsd_LeaderDoubleHeadCircular_element_serializer_init (
      "Leader",
      "http://qifstandards.org/xsd/qif2",
      "LeaderDoubleHeadCircular",
      "http://qifstandards.org/xsd/qif2");


    void
    LeaderDoubleHeadCircular (::std::ostream& o,
                              const ::xsd::qif2::LeaderDoubleHeadCircularType& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderDoubleHeadCircular (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    LeaderDoubleHeadCircular (::std::ostream& o,
                              const ::xsd::qif2::LeaderDoubleHeadCircularType& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderDoubleHeadCircular (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LeaderDoubleHeadCircular (::std::ostream& o,
                              const ::xsd::qif2::LeaderDoubleHeadCircularType& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderDoubleHeadCircular (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LeaderDoubleHeadCircular (::xercesc::XMLFormatTarget& t,
                              const ::xsd::qif2::LeaderDoubleHeadCircularType& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderDoubleHeadCircular (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    LeaderDoubleHeadCircular (::xercesc::XMLFormatTarget& t,
                              const ::xsd::qif2::LeaderDoubleHeadCircularType& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderDoubleHeadCircular (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LeaderDoubleHeadCircular (::xercesc::XMLFormatTarget& t,
                              const ::xsd::qif2::LeaderDoubleHeadCircularType& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderDoubleHeadCircular (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LeaderDoubleHeadCircular (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::LeaderDoubleHeadCircularType& s,
                              ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::LeaderDoubleHeadCircularType) == typeid (s))
      {
        if (n.name () == "LeaderDoubleHeadCircular" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "LeaderDoubleHeadCircular",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "LeaderDoubleHeadCircular",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LeaderDoubleHeadCircular (const ::xsd::qif2::LeaderDoubleHeadCircularType& s,
                              const ::xml_schema::namespace_infomap& m,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::LeaderDoubleHeadCircularType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "LeaderDoubleHeadCircular",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "LeaderDoubleHeadCircular",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::LeaderDoubleHeadCircular (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::LeaderDoubleHeadExtendType >
    _xsd_LeaderDoubleHeadExtend_element_serializer_init (
      "Leader",
      "http://qifstandards.org/xsd/qif2",
      "LeaderDoubleHeadExtend",
      "http://qifstandards.org/xsd/qif2");


    void
    LeaderDoubleHeadExtend (::std::ostream& o,
                            const ::xsd::qif2::LeaderDoubleHeadExtendType& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderDoubleHeadExtend (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    LeaderDoubleHeadExtend (::std::ostream& o,
                            const ::xsd::qif2::LeaderDoubleHeadExtendType& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderDoubleHeadExtend (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LeaderDoubleHeadExtend (::std::ostream& o,
                            const ::xsd::qif2::LeaderDoubleHeadExtendType& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderDoubleHeadExtend (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LeaderDoubleHeadExtend (::xercesc::XMLFormatTarget& t,
                            const ::xsd::qif2::LeaderDoubleHeadExtendType& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderDoubleHeadExtend (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    LeaderDoubleHeadExtend (::xercesc::XMLFormatTarget& t,
                            const ::xsd::qif2::LeaderDoubleHeadExtendType& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderDoubleHeadExtend (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LeaderDoubleHeadExtend (::xercesc::XMLFormatTarget& t,
                            const ::xsd::qif2::LeaderDoubleHeadExtendType& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LeaderDoubleHeadExtend (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LeaderDoubleHeadExtend (::xercesc::DOMDocument& d,
                            const ::xsd::qif2::LeaderDoubleHeadExtendType& s,
                            ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::LeaderDoubleHeadExtendType) == typeid (s))
      {
        if (n.name () == "LeaderDoubleHeadExtend" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "LeaderDoubleHeadExtend",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "LeaderDoubleHeadExtend",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LeaderDoubleHeadExtend (const ::xsd::qif2::LeaderDoubleHeadExtendType& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::LeaderDoubleHeadExtendType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "LeaderDoubleHeadExtend",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "LeaderDoubleHeadExtend",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::LeaderDoubleHeadExtend (*d, s, f);
      return d;
    }

    void
    WitnessLines (::std::ostream& o,
                  const ::xsd::qif2::WitnessLinesType& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::WitnessLines (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    WitnessLines (::std::ostream& o,
                  const ::xsd::qif2::WitnessLinesType& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::WitnessLines (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    WitnessLines (::std::ostream& o,
                  const ::xsd::qif2::WitnessLinesType& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::WitnessLines (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    WitnessLines (::xercesc::XMLFormatTarget& t,
                  const ::xsd::qif2::WitnessLinesType& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::WitnessLines (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    WitnessLines (::xercesc::XMLFormatTarget& t,
                  const ::xsd::qif2::WitnessLinesType& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::WitnessLines (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    WitnessLines (::xercesc::XMLFormatTarget& t,
                  const ::xsd::qif2::WitnessLinesType& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::WitnessLines (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    WitnessLines (::xercesc::DOMDocument& d,
                  const ::xsd::qif2::WitnessLinesType& s,
                  ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "WitnessLines" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "WitnessLines",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    WitnessLines (const ::xsd::qif2::WitnessLinesType& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "WitnessLines",
          "http://qifstandards.org/xsd/qif2",
          m, f));

      ::xsd::qif2::WitnessLines (*d, s, f);
      return d;
    }

    void
    Texts (::std::ostream& o,
           const ::xsd::qif2::TextsType& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Texts (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    Texts (::std::ostream& o,
           const ::xsd::qif2::TextsType& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Texts (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Texts (::std::ostream& o,
           const ::xsd::qif2::TextsType& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Texts (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Texts (::xercesc::XMLFormatTarget& t,
           const ::xsd::qif2::TextsType& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Texts (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    Texts (::xercesc::XMLFormatTarget& t,
           const ::xsd::qif2::TextsType& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Texts (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Texts (::xercesc::XMLFormatTarget& t,
           const ::xsd::qif2::TextsType& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Texts (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Texts (::xercesc::DOMDocument& d,
           const ::xsd::qif2::TextsType& s,
           ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Texts" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Texts",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Texts (const ::xsd::qif2::TextsType& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Texts",
          "http://qifstandards.org/xsd/qif2",
          m, f));

      ::xsd::qif2::Texts (*d, s, f);
      return d;
    }

    void
    Text (::std::ostream& o,
          const ::xsd::qif2::TextType& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Text (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    Text (::std::ostream& o,
          const ::xsd::qif2::TextType& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Text (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Text (::std::ostream& o,
          const ::xsd::qif2::TextType& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Text (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Text (::xercesc::XMLFormatTarget& t,
          const ::xsd::qif2::TextType& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Text (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    Text (::xercesc::XMLFormatTarget& t,
          const ::xsd::qif2::TextType& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Text (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Text (::xercesc::XMLFormatTarget& t,
          const ::xsd::qif2::TextType& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Text (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Text (::xercesc::DOMDocument& d,
          const ::xsd::qif2::TextType& s,
          ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Text" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Text",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Text (const ::xsd::qif2::TextType& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Text",
          "http://qifstandards.org/xsd/qif2",
          m, f));

      ::xsd::qif2::Text (*d, s, f);
      return d;
    }

    void
    VisualizationSet (::std::ostream& o,
                      const ::xsd::qif2::VisualizationSetType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::VisualizationSet (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    VisualizationSet (::std::ostream& o,
                      const ::xsd::qif2::VisualizationSetType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::VisualizationSet (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    VisualizationSet (::std::ostream& o,
                      const ::xsd::qif2::VisualizationSetType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::VisualizationSet (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    VisualizationSet (::xercesc::XMLFormatTarget& t,
                      const ::xsd::qif2::VisualizationSetType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::VisualizationSet (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    VisualizationSet (::xercesc::XMLFormatTarget& t,
                      const ::xsd::qif2::VisualizationSetType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::VisualizationSet (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    VisualizationSet (::xercesc::XMLFormatTarget& t,
                      const ::xsd::qif2::VisualizationSetType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::VisualizationSet (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    VisualizationSet (::xercesc::DOMDocument& d,
                      const ::xsd::qif2::VisualizationSetType& s,
                      ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "VisualizationSet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "VisualizationSet",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    VisualizationSet (const ::xsd::qif2::VisualizationSetType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "VisualizationSet",
          "http://qifstandards.org/xsd/qif2",
          m, f));

      ::xsd::qif2::VisualizationSet (*d, s, f);
      return d;
    }

    void
    PMIDisplaySet (::std::ostream& o,
                   const ::xsd::qif2::PMIDisplaySetType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::PMIDisplaySet (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    PMIDisplaySet (::std::ostream& o,
                   const ::xsd::qif2::PMIDisplaySetType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::PMIDisplaySet (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    PMIDisplaySet (::std::ostream& o,
                   const ::xsd::qif2::PMIDisplaySetType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::PMIDisplaySet (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    PMIDisplaySet (::xercesc::XMLFormatTarget& t,
                   const ::xsd::qif2::PMIDisplaySetType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::PMIDisplaySet (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    PMIDisplaySet (::xercesc::XMLFormatTarget& t,
                   const ::xsd::qif2::PMIDisplaySetType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::PMIDisplaySet (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    PMIDisplaySet (::xercesc::XMLFormatTarget& t,
                   const ::xsd::qif2::PMIDisplaySetType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::PMIDisplaySet (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    PMIDisplaySet (::xercesc::DOMDocument& d,
                   const ::xsd::qif2::PMIDisplaySetType& s,
                   ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "PMIDisplaySet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PMIDisplaySet",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PMIDisplaySet (const ::xsd::qif2::PMIDisplaySetType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "PMIDisplaySet",
          "http://qifstandards.org/xsd/qif2",
          m, f));

      ::xsd::qif2::PMIDisplaySet (*d, s, f);
      return d;
    }

    void
    Fonts (::std::ostream& o,
           const ::xsd::qif2::FontsType& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Fonts (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    Fonts (::std::ostream& o,
           const ::xsd::qif2::FontsType& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Fonts (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Fonts (::std::ostream& o,
           const ::xsd::qif2::FontsType& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Fonts (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Fonts (::xercesc::XMLFormatTarget& t,
           const ::xsd::qif2::FontsType& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Fonts (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    Fonts (::xercesc::XMLFormatTarget& t,
           const ::xsd::qif2::FontsType& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Fonts (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Fonts (::xercesc::XMLFormatTarget& t,
           const ::xsd::qif2::FontsType& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Fonts (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Fonts (::xercesc::DOMDocument& d,
           const ::xsd::qif2::FontsType& s,
           ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Fonts" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Fonts",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Fonts (const ::xsd::qif2::FontsType& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Fonts",
          "http://qifstandards.org/xsd/qif2",
          m, f));

      ::xsd::qif2::Fonts (*d, s, f);
      return d;
    }

    void
    ViewSet (::std::ostream& o,
             const ::xsd::qif2::ViewSetType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ViewSet (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ViewSet (::std::ostream& o,
             const ::xsd::qif2::ViewSetType& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ViewSet (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ViewSet (::std::ostream& o,
             const ::xsd::qif2::ViewSetType& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ViewSet (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ViewSet (::xercesc::XMLFormatTarget& t,
             const ::xsd::qif2::ViewSetType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ViewSet (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ViewSet (::xercesc::XMLFormatTarget& t,
             const ::xsd::qif2::ViewSetType& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ViewSet (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ViewSet (::xercesc::XMLFormatTarget& t,
             const ::xsd::qif2::ViewSetType& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ViewSet (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ViewSet (::xercesc::DOMDocument& d,
             const ::xsd::qif2::ViewSetType& s,
             ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ViewSet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ViewSet",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ViewSet (const ::xsd::qif2::ViewSetType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "ViewSet",
          "http://qifstandards.org/xsd/qif2",
          m, f));

      ::xsd::qif2::ViewSet (*d, s, f);
      return d;
    }

    void
    ViewBase (::std::ostream& o,
              const ::xsd::qif2::ViewBaseType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ViewBase (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ViewBase (::std::ostream& o,
              const ::xsd::qif2::ViewBaseType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ViewBase (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ViewBase (::std::ostream& o,
              const ::xsd::qif2::ViewBaseType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ViewBase (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ViewBase (::xercesc::XMLFormatTarget& t,
              const ::xsd::qif2::ViewBaseType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ViewBase (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ViewBase (::xercesc::XMLFormatTarget& t,
              const ::xsd::qif2::ViewBaseType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ViewBase (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ViewBase (::xercesc::XMLFormatTarget& t,
              const ::xsd::qif2::ViewBaseType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ViewBase (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ViewBase (::xercesc::DOMDocument& d,
              const ::xsd::qif2::ViewBaseType& s,
              ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::ViewBaseType) == typeid (s))
      {
        if (n.name () == "ViewBase" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ViewBase",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "ViewBase",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ViewBase (const ::xsd::qif2::ViewBaseType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::ViewBaseType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "ViewBase",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "ViewBase",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::ViewBase (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::CameraType >
    _xsd_Camera_element_serializer_init (
      "ViewBase",
      "http://qifstandards.org/xsd/qif2",
      "Camera",
      "http://qifstandards.org/xsd/qif2");


    void
    Camera (::std::ostream& o,
            const ::xsd::qif2::CameraType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Camera (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    Camera (::std::ostream& o,
            const ::xsd::qif2::CameraType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Camera (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Camera (::std::ostream& o,
            const ::xsd::qif2::CameraType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Camera (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Camera (::xercesc::XMLFormatTarget& t,
            const ::xsd::qif2::CameraType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Camera (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    Camera (::xercesc::XMLFormatTarget& t,
            const ::xsd::qif2::CameraType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Camera (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Camera (::xercesc::XMLFormatTarget& t,
            const ::xsd::qif2::CameraType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Camera (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Camera (::xercesc::DOMDocument& d,
            const ::xsd::qif2::CameraType& s,
            ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::CameraType) == typeid (s))
      {
        if (n.name () == "Camera" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Camera",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "Camera",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Camera (const ::xsd::qif2::CameraType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::CameraType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "Camera",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "Camera",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::Camera (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::SavedViewType >
    _xsd_SavedView_element_serializer_init (
      "ViewBase",
      "http://qifstandards.org/xsd/qif2",
      "SavedView",
      "http://qifstandards.org/xsd/qif2");


    void
    SavedView (::std::ostream& o,
               const ::xsd::qif2::SavedViewType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::SavedView (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    SavedView (::std::ostream& o,
               const ::xsd::qif2::SavedViewType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::SavedView (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    SavedView (::std::ostream& o,
               const ::xsd::qif2::SavedViewType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::SavedView (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    SavedView (::xercesc::XMLFormatTarget& t,
               const ::xsd::qif2::SavedViewType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::SavedView (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    SavedView (::xercesc::XMLFormatTarget& t,
               const ::xsd::qif2::SavedViewType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::SavedView (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    SavedView (::xercesc::XMLFormatTarget& t,
               const ::xsd::qif2::SavedViewType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::SavedView (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    SavedView (::xercesc::DOMDocument& d,
               const ::xsd::qif2::SavedViewType& s,
               ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::SavedViewType) == typeid (s))
      {
        if (n.name () == "SavedView" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SavedView",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "SavedView",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SavedView (const ::xsd::qif2::SavedViewType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::SavedViewType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "SavedView",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "SavedView",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::SavedView (*d, s, f);
      return d;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


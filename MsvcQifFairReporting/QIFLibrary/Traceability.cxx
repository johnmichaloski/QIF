// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Traceability.hxx"

namespace xsd
{
  namespace qif2
  {
    // InspectionProgramType
    // 

    const InspectionProgramType::File_type& InspectionProgramType::
    File () const
    {
      return this->File_.get ();
    }

    InspectionProgramType::File_type& InspectionProgramType::
    File ()
    {
      return this->File_.get ();
    }

    void InspectionProgramType::
    File (const File_type& x)
    {
      this->File_.set (x);
    }

    void InspectionProgramType::
    File (::std::auto_ptr< File_type > x)
    {
      this->File_.set (x);
    }

    const InspectionProgramType::Description_optional& InspectionProgramType::
    Description () const
    {
      return this->Description_;
    }

    InspectionProgramType::Description_optional& InspectionProgramType::
    Description ()
    {
      return this->Description_;
    }

    void InspectionProgramType::
    Description (const Description_type& x)
    {
      this->Description_.set (x);
    }

    void InspectionProgramType::
    Description (const Description_optional& x)
    {
      this->Description_ = x;
    }

    void InspectionProgramType::
    Description (::std::auto_ptr< Description_type > x)
    {
      this->Description_.set (x);
    }

    const InspectionProgramType::FormalStandard_type& InspectionProgramType::
    FormalStandard () const
    {
      return this->FormalStandard_.get ();
    }

    InspectionProgramType::FormalStandard_type& InspectionProgramType::
    FormalStandard ()
    {
      return this->FormalStandard_.get ();
    }

    void InspectionProgramType::
    FormalStandard (const FormalStandard_type& x)
    {
      this->FormalStandard_.set (x);
    }

    void InspectionProgramType::
    FormalStandard (::std::auto_ptr< FormalStandard_type > x)
    {
      this->FormalStandard_.set (x);
    }

    const InspectionProgramType::Author_type& InspectionProgramType::
    Author () const
    {
      return this->Author_.get ();
    }

    InspectionProgramType::Author_type& InspectionProgramType::
    Author ()
    {
      return this->Author_.get ();
    }

    void InspectionProgramType::
    Author (const Author_type& x)
    {
      this->Author_.set (x);
    }

    void InspectionProgramType::
    Author (::std::auto_ptr< Author_type > x)
    {
      this->Author_.set (x);
    }


    // InspectionSoftwareItemsType
    // 

    const InspectionSoftwareItemsType::InspectionProgramGenerationSoftware_sequence& InspectionSoftwareItemsType::
    InspectionProgramGenerationSoftware () const
    {
      return this->InspectionProgramGenerationSoftware_;
    }

    InspectionSoftwareItemsType::InspectionProgramGenerationSoftware_sequence& InspectionSoftwareItemsType::
    InspectionProgramGenerationSoftware ()
    {
      return this->InspectionProgramGenerationSoftware_;
    }

    void InspectionSoftwareItemsType::
    InspectionProgramGenerationSoftware (const InspectionProgramGenerationSoftware_sequence& s)
    {
      this->InspectionProgramGenerationSoftware_ = s;
    }

    const InspectionSoftwareItemsType::InspectionProgramExecutionSoftware_sequence& InspectionSoftwareItemsType::
    InspectionProgramExecutionSoftware () const
    {
      return this->InspectionProgramExecutionSoftware_;
    }

    InspectionSoftwareItemsType::InspectionProgramExecutionSoftware_sequence& InspectionSoftwareItemsType::
    InspectionProgramExecutionSoftware ()
    {
      return this->InspectionProgramExecutionSoftware_;
    }

    void InspectionSoftwareItemsType::
    InspectionProgramExecutionSoftware (const InspectionProgramExecutionSoftware_sequence& s)
    {
      this->InspectionProgramExecutionSoftware_ = s;
    }

    const InspectionSoftwareItemsType::AnalysisSoftware_sequence& InspectionSoftwareItemsType::
    AnalysisSoftware () const
    {
      return this->AnalysisSoftware_;
    }

    InspectionSoftwareItemsType::AnalysisSoftware_sequence& InspectionSoftwareItemsType::
    AnalysisSoftware ()
    {
      return this->AnalysisSoftware_;
    }

    void InspectionSoftwareItemsType::
    AnalysisSoftware (const AnalysisSoftware_sequence& s)
    {
      this->AnalysisSoftware_ = s;
    }

    const InspectionSoftwareItemsType::CADSoftware_sequence& InspectionSoftwareItemsType::
    CADSoftware () const
    {
      return this->CADSoftware_;
    }

    InspectionSoftwareItemsType::CADSoftware_sequence& InspectionSoftwareItemsType::
    CADSoftware ()
    {
      return this->CADSoftware_;
    }

    void InspectionSoftwareItemsType::
    CADSoftware (const CADSoftware_sequence& s)
    {
      this->CADSoftware_ = s;
    }

    const InspectionSoftwareItemsType::DMESoftware_sequence& InspectionSoftwareItemsType::
    DMESoftware () const
    {
      return this->DMESoftware_;
    }

    InspectionSoftwareItemsType::DMESoftware_sequence& InspectionSoftwareItemsType::
    DMESoftware ()
    {
      return this->DMESoftware_;
    }

    void InspectionSoftwareItemsType::
    DMESoftware (const DMESoftware_sequence& s)
    {
      this->DMESoftware_ = s;
    }


    // EnvironmentType
    // 

    const EnvironmentType::Attributes_optional& EnvironmentType::
    Attributes () const
    {
      return this->Attributes_;
    }

    EnvironmentType::Attributes_optional& EnvironmentType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void EnvironmentType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void EnvironmentType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void EnvironmentType::
    Attributes (::std::auto_ptr< Attributes_type > x)
    {
      this->Attributes_.set (x);
    }

    const EnvironmentType::ObjectTemperature_optional& EnvironmentType::
    ObjectTemperature () const
    {
      return this->ObjectTemperature_;
    }

    EnvironmentType::ObjectTemperature_optional& EnvironmentType::
    ObjectTemperature ()
    {
      return this->ObjectTemperature_;
    }

    void EnvironmentType::
    ObjectTemperature (const ObjectTemperature_type& x)
    {
      this->ObjectTemperature_.set (x);
    }

    void EnvironmentType::
    ObjectTemperature (const ObjectTemperature_optional& x)
    {
      this->ObjectTemperature_ = x;
    }

    void EnvironmentType::
    ObjectTemperature (::std::auto_ptr< ObjectTemperature_type > x)
    {
      this->ObjectTemperature_.set (x);
    }

    const EnvironmentType::AmbientTemperature_optional& EnvironmentType::
    AmbientTemperature () const
    {
      return this->AmbientTemperature_;
    }

    EnvironmentType::AmbientTemperature_optional& EnvironmentType::
    AmbientTemperature ()
    {
      return this->AmbientTemperature_;
    }

    void EnvironmentType::
    AmbientTemperature (const AmbientTemperature_type& x)
    {
      this->AmbientTemperature_.set (x);
    }

    void EnvironmentType::
    AmbientTemperature (const AmbientTemperature_optional& x)
    {
      this->AmbientTemperature_ = x;
    }

    void EnvironmentType::
    AmbientTemperature (::std::auto_ptr< AmbientTemperature_type > x)
    {
      this->AmbientTemperature_.set (x);
    }

    const EnvironmentType::RelativeHumidity_optional& EnvironmentType::
    RelativeHumidity () const
    {
      return this->RelativeHumidity_;
    }

    EnvironmentType::RelativeHumidity_optional& EnvironmentType::
    RelativeHumidity ()
    {
      return this->RelativeHumidity_;
    }

    void EnvironmentType::
    RelativeHumidity (const RelativeHumidity_type& x)
    {
      this->RelativeHumidity_.set (x);
    }

    void EnvironmentType::
    RelativeHumidity (const RelativeHumidity_optional& x)
    {
      this->RelativeHumidity_ = x;
    }

    void EnvironmentType::
    RelativeHumidity (::std::auto_ptr< RelativeHumidity_type > x)
    {
      this->RelativeHumidity_.set (x);
    }

    const EnvironmentType::DateAndTime_type& EnvironmentType::
    DateAndTime () const
    {
      return this->DateAndTime_.get ();
    }

    EnvironmentType::DateAndTime_type& EnvironmentType::
    DateAndTime ()
    {
      return this->DateAndTime_.get ();
    }

    void EnvironmentType::
    DateAndTime (const DateAndTime_type& x)
    {
      this->DateAndTime_.set (x);
    }

    void EnvironmentType::
    DateAndTime (::std::auto_ptr< DateAndTime_type > x)
    {
      this->DateAndTime_.set (x);
    }

    const EnvironmentType::TimeDescription_optional& EnvironmentType::
    TimeDescription () const
    {
      return this->TimeDescription_;
    }

    EnvironmentType::TimeDescription_optional& EnvironmentType::
    TimeDescription ()
    {
      return this->TimeDescription_;
    }

    void EnvironmentType::
    TimeDescription (const TimeDescription_type& x)
    {
      this->TimeDescription_.set (x);
    }

    void EnvironmentType::
    TimeDescription (const TimeDescription_optional& x)
    {
      this->TimeDescription_ = x;
    }

    void EnvironmentType::
    TimeDescription (::std::auto_ptr< TimeDescription_type > x)
    {
      this->TimeDescription_.set (x);
    }


    // EnvironmentsType
    // 

    const EnvironmentsType::Environment_sequence& EnvironmentsType::
    Environment () const
    {
      return this->Environment_;
    }

    EnvironmentsType::Environment_sequence& EnvironmentsType::
    Environment ()
    {
      return this->Environment_;
    }

    void EnvironmentsType::
    Environment (const Environment_sequence& s)
    {
      this->Environment_ = s;
    }


    // InspectionTraceabilityType
    // 

    const InspectionTraceabilityType::InspectingOrganization_optional& InspectionTraceabilityType::
    InspectingOrganization () const
    {
      return this->InspectingOrganization_;
    }

    InspectionTraceabilityType::InspectingOrganization_optional& InspectionTraceabilityType::
    InspectingOrganization ()
    {
      return this->InspectingOrganization_;
    }

    void InspectionTraceabilityType::
    InspectingOrganization (const InspectingOrganization_type& x)
    {
      this->InspectingOrganization_.set (x);
    }

    void InspectionTraceabilityType::
    InspectingOrganization (const InspectingOrganization_optional& x)
    {
      this->InspectingOrganization_ = x;
    }

    void InspectionTraceabilityType::
    InspectingOrganization (::std::auto_ptr< InspectingOrganization_type > x)
    {
      this->InspectingOrganization_.set (x);
    }

    const InspectionTraceabilityType::CustomerOrganization_optional& InspectionTraceabilityType::
    CustomerOrganization () const
    {
      return this->CustomerOrganization_;
    }

    InspectionTraceabilityType::CustomerOrganization_optional& InspectionTraceabilityType::
    CustomerOrganization ()
    {
      return this->CustomerOrganization_;
    }

    void InspectionTraceabilityType::
    CustomerOrganization (const CustomerOrganization_type& x)
    {
      this->CustomerOrganization_.set (x);
    }

    void InspectionTraceabilityType::
    CustomerOrganization (const CustomerOrganization_optional& x)
    {
      this->CustomerOrganization_ = x;
    }

    void InspectionTraceabilityType::
    CustomerOrganization (::std::auto_ptr< CustomerOrganization_type > x)
    {
      this->CustomerOrganization_.set (x);
    }

    const InspectionTraceabilityType::SupplierCode_optional& InspectionTraceabilityType::
    SupplierCode () const
    {
      return this->SupplierCode_;
    }

    InspectionTraceabilityType::SupplierCode_optional& InspectionTraceabilityType::
    SupplierCode ()
    {
      return this->SupplierCode_;
    }

    void InspectionTraceabilityType::
    SupplierCode (const SupplierCode_type& x)
    {
      this->SupplierCode_.set (x);
    }

    void InspectionTraceabilityType::
    SupplierCode (const SupplierCode_optional& x)
    {
      this->SupplierCode_ = x;
    }

    void InspectionTraceabilityType::
    SupplierCode (::std::auto_ptr< SupplierCode_type > x)
    {
      this->SupplierCode_.set (x);
    }

    const InspectionTraceabilityType::PurchaseOrderNumber_optional& InspectionTraceabilityType::
    PurchaseOrderNumber () const
    {
      return this->PurchaseOrderNumber_;
    }

    InspectionTraceabilityType::PurchaseOrderNumber_optional& InspectionTraceabilityType::
    PurchaseOrderNumber ()
    {
      return this->PurchaseOrderNumber_;
    }

    void InspectionTraceabilityType::
    PurchaseOrderNumber (const PurchaseOrderNumber_type& x)
    {
      this->PurchaseOrderNumber_.set (x);
    }

    void InspectionTraceabilityType::
    PurchaseOrderNumber (const PurchaseOrderNumber_optional& x)
    {
      this->PurchaseOrderNumber_ = x;
    }

    void InspectionTraceabilityType::
    PurchaseOrderNumber (::std::auto_ptr< PurchaseOrderNumber_type > x)
    {
      this->PurchaseOrderNumber_.set (x);
    }

    const InspectionTraceabilityType::OrderNumber_optional& InspectionTraceabilityType::
    OrderNumber () const
    {
      return this->OrderNumber_;
    }

    InspectionTraceabilityType::OrderNumber_optional& InspectionTraceabilityType::
    OrderNumber ()
    {
      return this->OrderNumber_;
    }

    void InspectionTraceabilityType::
    OrderNumber (const OrderNumber_type& x)
    {
      this->OrderNumber_.set (x);
    }

    void InspectionTraceabilityType::
    OrderNumber (const OrderNumber_optional& x)
    {
      this->OrderNumber_ = x;
    }

    void InspectionTraceabilityType::
    OrderNumber (::std::auto_ptr< OrderNumber_type > x)
    {
      this->OrderNumber_.set (x);
    }

    const InspectionTraceabilityType::ReportNumber_optional& InspectionTraceabilityType::
    ReportNumber () const
    {
      return this->ReportNumber_;
    }

    InspectionTraceabilityType::ReportNumber_optional& InspectionTraceabilityType::
    ReportNumber ()
    {
      return this->ReportNumber_;
    }

    void InspectionTraceabilityType::
    ReportNumber (const ReportNumber_type& x)
    {
      this->ReportNumber_.set (x);
    }

    void InspectionTraceabilityType::
    ReportNumber (const ReportNumber_optional& x)
    {
      this->ReportNumber_ = x;
    }

    void InspectionTraceabilityType::
    ReportNumber (::std::auto_ptr< ReportNumber_type > x)
    {
      this->ReportNumber_.set (x);
    }

    const InspectionTraceabilityType::InspectionScope_optional& InspectionTraceabilityType::
    InspectionScope () const
    {
      return this->InspectionScope_;
    }

    InspectionTraceabilityType::InspectionScope_optional& InspectionTraceabilityType::
    InspectionScope ()
    {
      return this->InspectionScope_;
    }

    void InspectionTraceabilityType::
    InspectionScope (const InspectionScope_type& x)
    {
      this->InspectionScope_.set (x);
    }

    void InspectionTraceabilityType::
    InspectionScope (const InspectionScope_optional& x)
    {
      this->InspectionScope_ = x;
    }

    void InspectionTraceabilityType::
    InspectionScope (::std::auto_ptr< InspectionScope_type > x)
    {
      this->InspectionScope_.set (x);
    }

    const InspectionTraceabilityType::InspectionMode_optional& InspectionTraceabilityType::
    InspectionMode () const
    {
      return this->InspectionMode_;
    }

    InspectionTraceabilityType::InspectionMode_optional& InspectionTraceabilityType::
    InspectionMode ()
    {
      return this->InspectionMode_;
    }

    void InspectionTraceabilityType::
    InspectionMode (const InspectionMode_type& x)
    {
      this->InspectionMode_.set (x);
    }

    void InspectionTraceabilityType::
    InspectionMode (const InspectionMode_optional& x)
    {
      this->InspectionMode_ = x;
    }

    void InspectionTraceabilityType::
    InspectionMode (::std::auto_ptr< InspectionMode_type > x)
    {
      this->InspectionMode_.set (x);
    }

    const InspectionTraceabilityType::PartialInspection_optional& InspectionTraceabilityType::
    PartialInspection () const
    {
      return this->PartialInspection_;
    }

    InspectionTraceabilityType::PartialInspection_optional& InspectionTraceabilityType::
    PartialInspection ()
    {
      return this->PartialInspection_;
    }

    void InspectionTraceabilityType::
    PartialInspection (const PartialInspection_type& x)
    {
      this->PartialInspection_.set (x);
    }

    void InspectionTraceabilityType::
    PartialInspection (const PartialInspection_optional& x)
    {
      this->PartialInspection_ = x;
    }

    void InspectionTraceabilityType::
    PartialInspection (::std::auto_ptr< PartialInspection_type > x)
    {
      this->PartialInspection_.set (x);
    }

    const InspectionTraceabilityType::NotableEvents_optional& InspectionTraceabilityType::
    NotableEvents () const
    {
      return this->NotableEvents_;
    }

    InspectionTraceabilityType::NotableEvents_optional& InspectionTraceabilityType::
    NotableEvents ()
    {
      return this->NotableEvents_;
    }

    void InspectionTraceabilityType::
    NotableEvents (const NotableEvents_type& x)
    {
      this->NotableEvents_.set (x);
    }

    void InspectionTraceabilityType::
    NotableEvents (const NotableEvents_optional& x)
    {
      this->NotableEvents_ = x;
    }

    void InspectionTraceabilityType::
    NotableEvents (::std::auto_ptr< NotableEvents_type > x)
    {
      this->NotableEvents_.set (x);
    }

    const InspectionTraceabilityType::NotedEvents_optional& InspectionTraceabilityType::
    NotedEvents () const
    {
      return this->NotedEvents_;
    }

    InspectionTraceabilityType::NotedEvents_optional& InspectionTraceabilityType::
    NotedEvents ()
    {
      return this->NotedEvents_;
    }

    void InspectionTraceabilityType::
    NotedEvents (const NotedEvents_type& x)
    {
      this->NotedEvents_.set (x);
    }

    void InspectionTraceabilityType::
    NotedEvents (const NotedEvents_optional& x)
    {
      this->NotedEvents_ = x;
    }

    void InspectionTraceabilityType::
    NotedEvents (::std::auto_ptr< NotedEvents_type > x)
    {
      this->NotedEvents_.set (x);
    }

    const InspectionTraceabilityType::InspectionStart_optional& InspectionTraceabilityType::
    InspectionStart () const
    {
      return this->InspectionStart_;
    }

    InspectionTraceabilityType::InspectionStart_optional& InspectionTraceabilityType::
    InspectionStart ()
    {
      return this->InspectionStart_;
    }

    void InspectionTraceabilityType::
    InspectionStart (const InspectionStart_type& x)
    {
      this->InspectionStart_.set (x);
    }

    void InspectionTraceabilityType::
    InspectionStart (const InspectionStart_optional& x)
    {
      this->InspectionStart_ = x;
    }

    void InspectionTraceabilityType::
    InspectionStart (::std::auto_ptr< InspectionStart_type > x)
    {
      this->InspectionStart_.set (x);
    }

    const InspectionTraceabilityType::InspectionEnd_optional& InspectionTraceabilityType::
    InspectionEnd () const
    {
      return this->InspectionEnd_;
    }

    InspectionTraceabilityType::InspectionEnd_optional& InspectionTraceabilityType::
    InspectionEnd ()
    {
      return this->InspectionEnd_;
    }

    void InspectionTraceabilityType::
    InspectionEnd (const InspectionEnd_type& x)
    {
      this->InspectionEnd_.set (x);
    }

    void InspectionTraceabilityType::
    InspectionEnd (const InspectionEnd_optional& x)
    {
      this->InspectionEnd_ = x;
    }

    void InspectionTraceabilityType::
    InspectionEnd (::std::auto_ptr< InspectionEnd_type > x)
    {
      this->InspectionEnd_.set (x);
    }

    const InspectionTraceabilityType::InspectionSoftwareItems_optional& InspectionTraceabilityType::
    InspectionSoftwareItems () const
    {
      return this->InspectionSoftwareItems_;
    }

    InspectionTraceabilityType::InspectionSoftwareItems_optional& InspectionTraceabilityType::
    InspectionSoftwareItems ()
    {
      return this->InspectionSoftwareItems_;
    }

    void InspectionTraceabilityType::
    InspectionSoftwareItems (const InspectionSoftwareItems_type& x)
    {
      this->InspectionSoftwareItems_.set (x);
    }

    void InspectionTraceabilityType::
    InspectionSoftwareItems (const InspectionSoftwareItems_optional& x)
    {
      this->InspectionSoftwareItems_ = x;
    }

    void InspectionTraceabilityType::
    InspectionSoftwareItems (::std::auto_ptr< InspectionSoftwareItems_type > x)
    {
      this->InspectionSoftwareItems_.set (x);
    }

    const InspectionTraceabilityType::InspectionProgram_optional& InspectionTraceabilityType::
    InspectionProgram () const
    {
      return this->InspectionProgram_;
    }

    InspectionTraceabilityType::InspectionProgram_optional& InspectionTraceabilityType::
    InspectionProgram ()
    {
      return this->InspectionProgram_;
    }

    void InspectionTraceabilityType::
    InspectionProgram (const InspectionProgram_type& x)
    {
      this->InspectionProgram_.set (x);
    }

    void InspectionTraceabilityType::
    InspectionProgram (const InspectionProgram_optional& x)
    {
      this->InspectionProgram_ = x;
    }

    void InspectionTraceabilityType::
    InspectionProgram (::std::auto_ptr< InspectionProgram_type > x)
    {
      this->InspectionProgram_.set (x);
    }

    const InspectionTraceabilityType::InspectionOperator_optional& InspectionTraceabilityType::
    InspectionOperator () const
    {
      return this->InspectionOperator_;
    }

    InspectionTraceabilityType::InspectionOperator_optional& InspectionTraceabilityType::
    InspectionOperator ()
    {
      return this->InspectionOperator_;
    }

    void InspectionTraceabilityType::
    InspectionOperator (const InspectionOperator_type& x)
    {
      this->InspectionOperator_.set (x);
    }

    void InspectionTraceabilityType::
    InspectionOperator (const InspectionOperator_optional& x)
    {
      this->InspectionOperator_ = x;
    }

    void InspectionTraceabilityType::
    InspectionOperator (::std::auto_ptr< InspectionOperator_type > x)
    {
      this->InspectionOperator_.set (x);
    }

    const InspectionTraceabilityType::ReportPreparer_optional& InspectionTraceabilityType::
    ReportPreparer () const
    {
      return this->ReportPreparer_;
    }

    InspectionTraceabilityType::ReportPreparer_optional& InspectionTraceabilityType::
    ReportPreparer ()
    {
      return this->ReportPreparer_;
    }

    void InspectionTraceabilityType::
    ReportPreparer (const ReportPreparer_type& x)
    {
      this->ReportPreparer_.set (x);
    }

    void InspectionTraceabilityType::
    ReportPreparer (const ReportPreparer_optional& x)
    {
      this->ReportPreparer_ = x;
    }

    void InspectionTraceabilityType::
    ReportPreparer (::std::auto_ptr< ReportPreparer_type > x)
    {
      this->ReportPreparer_.set (x);
    }

    const InspectionTraceabilityType::ReportPreparationDate_optional& InspectionTraceabilityType::
    ReportPreparationDate () const
    {
      return this->ReportPreparationDate_;
    }

    InspectionTraceabilityType::ReportPreparationDate_optional& InspectionTraceabilityType::
    ReportPreparationDate ()
    {
      return this->ReportPreparationDate_;
    }

    void InspectionTraceabilityType::
    ReportPreparationDate (const ReportPreparationDate_type& x)
    {
      this->ReportPreparationDate_.set (x);
    }

    void InspectionTraceabilityType::
    ReportPreparationDate (const ReportPreparationDate_optional& x)
    {
      this->ReportPreparationDate_ = x;
    }

    void InspectionTraceabilityType::
    ReportPreparationDate (::std::auto_ptr< ReportPreparationDate_type > x)
    {
      this->ReportPreparationDate_.set (x);
    }

    const InspectionTraceabilityType::ReportType_optional& InspectionTraceabilityType::
    ReportType () const
    {
      return this->ReportType_;
    }

    InspectionTraceabilityType::ReportType_optional& InspectionTraceabilityType::
    ReportType ()
    {
      return this->ReportType_;
    }

    void InspectionTraceabilityType::
    ReportType (const ReportType_type& x)
    {
      this->ReportType_.set (x);
    }

    void InspectionTraceabilityType::
    ReportType (const ReportType_optional& x)
    {
      this->ReportType_ = x;
    }

    void InspectionTraceabilityType::
    ReportType (::std::auto_ptr< ReportType_type > x)
    {
      this->ReportType_.set (x);
    }

    const InspectionTraceabilityType::SecurityClassification_optional& InspectionTraceabilityType::
    SecurityClassification () const
    {
      return this->SecurityClassification_;
    }

    InspectionTraceabilityType::SecurityClassification_optional& InspectionTraceabilityType::
    SecurityClassification ()
    {
      return this->SecurityClassification_;
    }

    void InspectionTraceabilityType::
    SecurityClassification (const SecurityClassification_type& x)
    {
      this->SecurityClassification_.set (x);
    }

    void InspectionTraceabilityType::
    SecurityClassification (const SecurityClassification_optional& x)
    {
      this->SecurityClassification_ = x;
    }

    void InspectionTraceabilityType::
    SecurityClassification (::std::auto_ptr< SecurityClassification_type > x)
    {
      this->SecurityClassification_.set (x);
    }

    const InspectionTraceabilityType::PlantLocation_optional& InspectionTraceabilityType::
    PlantLocation () const
    {
      return this->PlantLocation_;
    }

    InspectionTraceabilityType::PlantLocation_optional& InspectionTraceabilityType::
    PlantLocation ()
    {
      return this->PlantLocation_;
    }

    void InspectionTraceabilityType::
    PlantLocation (const PlantLocation_type& x)
    {
      this->PlantLocation_.set (x);
    }

    void InspectionTraceabilityType::
    PlantLocation (const PlantLocation_optional& x)
    {
      this->PlantLocation_ = x;
    }

    void InspectionTraceabilityType::
    PlantLocation (::std::auto_ptr< PlantLocation_type > x)
    {
      this->PlantLocation_.set (x);
    }

    const InspectionTraceabilityType::ReferencedQIFPlanInstance_optional& InspectionTraceabilityType::
    ReferencedQIFPlanInstance () const
    {
      return this->ReferencedQIFPlanInstance_;
    }

    InspectionTraceabilityType::ReferencedQIFPlanInstance_optional& InspectionTraceabilityType::
    ReferencedQIFPlanInstance ()
    {
      return this->ReferencedQIFPlanInstance_;
    }

    void InspectionTraceabilityType::
    ReferencedQIFPlanInstance (const ReferencedQIFPlanInstance_type& x)
    {
      this->ReferencedQIFPlanInstance_.set (x);
    }

    void InspectionTraceabilityType::
    ReferencedQIFPlanInstance (const ReferencedQIFPlanInstance_optional& x)
    {
      this->ReferencedQIFPlanInstance_ = x;
    }

    void InspectionTraceabilityType::
    ReferencedQIFPlanInstance (::std::auto_ptr< ReferencedQIFPlanInstance_type > x)
    {
      this->ReferencedQIFPlanInstance_.set (x);
    }

    const InspectionTraceabilityType::ReferencedQIFPlan_optional& InspectionTraceabilityType::
    ReferencedQIFPlan () const
    {
      return this->ReferencedQIFPlan_;
    }

    InspectionTraceabilityType::ReferencedQIFPlan_optional& InspectionTraceabilityType::
    ReferencedQIFPlan ()
    {
      return this->ReferencedQIFPlan_;
    }

    void InspectionTraceabilityType::
    ReferencedQIFPlan (const ReferencedQIFPlan_type& x)
    {
      this->ReferencedQIFPlan_.set (x);
    }

    void InspectionTraceabilityType::
    ReferencedQIFPlan (const ReferencedQIFPlan_optional& x)
    {
      this->ReferencedQIFPlan_ = x;
    }

    void InspectionTraceabilityType::
    ReferencedQIFPlan (::std::auto_ptr< ReferencedQIFPlan_type > x)
    {
      this->ReferencedQIFPlan_.set (x);
    }

    const InspectionTraceabilityType::ReferencedQIFPlan_type& InspectionTraceabilityType::
    ReferencedQIFPlan_default_value ()
    {
      return ReferencedQIFPlan_default_value_;
    }

    const InspectionTraceabilityType::Errors_optional& InspectionTraceabilityType::
    Errors () const
    {
      return this->Errors_;
    }

    InspectionTraceabilityType::Errors_optional& InspectionTraceabilityType::
    Errors ()
    {
      return this->Errors_;
    }

    void InspectionTraceabilityType::
    Errors (const Errors_type& x)
    {
      this->Errors_.set (x);
    }

    void InspectionTraceabilityType::
    Errors (const Errors_optional& x)
    {
      this->Errors_ = x;
    }

    void InspectionTraceabilityType::
    Errors (::std::auto_ptr< Errors_type > x)
    {
      this->Errors_.set (x);
    }


    // PreInspectionTraceabilityType
    // 

    const PreInspectionTraceabilityType::InspectingOrganization_optional& PreInspectionTraceabilityType::
    InspectingOrganization () const
    {
      return this->InspectingOrganization_;
    }

    PreInspectionTraceabilityType::InspectingOrganization_optional& PreInspectionTraceabilityType::
    InspectingOrganization ()
    {
      return this->InspectingOrganization_;
    }

    void PreInspectionTraceabilityType::
    InspectingOrganization (const InspectingOrganization_type& x)
    {
      this->InspectingOrganization_.set (x);
    }

    void PreInspectionTraceabilityType::
    InspectingOrganization (const InspectingOrganization_optional& x)
    {
      this->InspectingOrganization_ = x;
    }

    void PreInspectionTraceabilityType::
    InspectingOrganization (::std::auto_ptr< InspectingOrganization_type > x)
    {
      this->InspectingOrganization_.set (x);
    }

    const PreInspectionTraceabilityType::CustomerOrganization_optional& PreInspectionTraceabilityType::
    CustomerOrganization () const
    {
      return this->CustomerOrganization_;
    }

    PreInspectionTraceabilityType::CustomerOrganization_optional& PreInspectionTraceabilityType::
    CustomerOrganization ()
    {
      return this->CustomerOrganization_;
    }

    void PreInspectionTraceabilityType::
    CustomerOrganization (const CustomerOrganization_type& x)
    {
      this->CustomerOrganization_.set (x);
    }

    void PreInspectionTraceabilityType::
    CustomerOrganization (const CustomerOrganization_optional& x)
    {
      this->CustomerOrganization_ = x;
    }

    void PreInspectionTraceabilityType::
    CustomerOrganization (::std::auto_ptr< CustomerOrganization_type > x)
    {
      this->CustomerOrganization_.set (x);
    }

    const PreInspectionTraceabilityType::SupplierCode_optional& PreInspectionTraceabilityType::
    SupplierCode () const
    {
      return this->SupplierCode_;
    }

    PreInspectionTraceabilityType::SupplierCode_optional& PreInspectionTraceabilityType::
    SupplierCode ()
    {
      return this->SupplierCode_;
    }

    void PreInspectionTraceabilityType::
    SupplierCode (const SupplierCode_type& x)
    {
      this->SupplierCode_.set (x);
    }

    void PreInspectionTraceabilityType::
    SupplierCode (const SupplierCode_optional& x)
    {
      this->SupplierCode_ = x;
    }

    void PreInspectionTraceabilityType::
    SupplierCode (::std::auto_ptr< SupplierCode_type > x)
    {
      this->SupplierCode_.set (x);
    }

    const PreInspectionTraceabilityType::PurchaseOrderNumber_optional& PreInspectionTraceabilityType::
    PurchaseOrderNumber () const
    {
      return this->PurchaseOrderNumber_;
    }

    PreInspectionTraceabilityType::PurchaseOrderNumber_optional& PreInspectionTraceabilityType::
    PurchaseOrderNumber ()
    {
      return this->PurchaseOrderNumber_;
    }

    void PreInspectionTraceabilityType::
    PurchaseOrderNumber (const PurchaseOrderNumber_type& x)
    {
      this->PurchaseOrderNumber_.set (x);
    }

    void PreInspectionTraceabilityType::
    PurchaseOrderNumber (const PurchaseOrderNumber_optional& x)
    {
      this->PurchaseOrderNumber_ = x;
    }

    void PreInspectionTraceabilityType::
    PurchaseOrderNumber (::std::auto_ptr< PurchaseOrderNumber_type > x)
    {
      this->PurchaseOrderNumber_.set (x);
    }

    const PreInspectionTraceabilityType::OrderNumber_optional& PreInspectionTraceabilityType::
    OrderNumber () const
    {
      return this->OrderNumber_;
    }

    PreInspectionTraceabilityType::OrderNumber_optional& PreInspectionTraceabilityType::
    OrderNumber ()
    {
      return this->OrderNumber_;
    }

    void PreInspectionTraceabilityType::
    OrderNumber (const OrderNumber_type& x)
    {
      this->OrderNumber_.set (x);
    }

    void PreInspectionTraceabilityType::
    OrderNumber (const OrderNumber_optional& x)
    {
      this->OrderNumber_ = x;
    }

    void PreInspectionTraceabilityType::
    OrderNumber (::std::auto_ptr< OrderNumber_type > x)
    {
      this->OrderNumber_.set (x);
    }

    const PreInspectionTraceabilityType::AsmPathIds_optional& PreInspectionTraceabilityType::
    AsmPathIds () const
    {
      return this->AsmPathIds_;
    }

    PreInspectionTraceabilityType::AsmPathIds_optional& PreInspectionTraceabilityType::
    AsmPathIds ()
    {
      return this->AsmPathIds_;
    }

    void PreInspectionTraceabilityType::
    AsmPathIds (const AsmPathIds_type& x)
    {
      this->AsmPathIds_.set (x);
    }

    void PreInspectionTraceabilityType::
    AsmPathIds (const AsmPathIds_optional& x)
    {
      this->AsmPathIds_ = x;
    }

    void PreInspectionTraceabilityType::
    AsmPathIds (::std::auto_ptr< AsmPathIds_type > x)
    {
      this->AsmPathIds_.set (x);
    }

    const PreInspectionTraceabilityType::ReportNumber_optional& PreInspectionTraceabilityType::
    ReportNumber () const
    {
      return this->ReportNumber_;
    }

    PreInspectionTraceabilityType::ReportNumber_optional& PreInspectionTraceabilityType::
    ReportNumber ()
    {
      return this->ReportNumber_;
    }

    void PreInspectionTraceabilityType::
    ReportNumber (const ReportNumber_type& x)
    {
      this->ReportNumber_.set (x);
    }

    void PreInspectionTraceabilityType::
    ReportNumber (const ReportNumber_optional& x)
    {
      this->ReportNumber_ = x;
    }

    void PreInspectionTraceabilityType::
    ReportNumber (::std::auto_ptr< ReportNumber_type > x)
    {
      this->ReportNumber_.set (x);
    }

    const PreInspectionTraceabilityType::InspectionScope_optional& PreInspectionTraceabilityType::
    InspectionScope () const
    {
      return this->InspectionScope_;
    }

    PreInspectionTraceabilityType::InspectionScope_optional& PreInspectionTraceabilityType::
    InspectionScope ()
    {
      return this->InspectionScope_;
    }

    void PreInspectionTraceabilityType::
    InspectionScope (const InspectionScope_type& x)
    {
      this->InspectionScope_.set (x);
    }

    void PreInspectionTraceabilityType::
    InspectionScope (const InspectionScope_optional& x)
    {
      this->InspectionScope_ = x;
    }

    void PreInspectionTraceabilityType::
    InspectionScope (::std::auto_ptr< InspectionScope_type > x)
    {
      this->InspectionScope_.set (x);
    }

    const PreInspectionTraceabilityType::InspectionMode_optional& PreInspectionTraceabilityType::
    InspectionMode () const
    {
      return this->InspectionMode_;
    }

    PreInspectionTraceabilityType::InspectionMode_optional& PreInspectionTraceabilityType::
    InspectionMode ()
    {
      return this->InspectionMode_;
    }

    void PreInspectionTraceabilityType::
    InspectionMode (const InspectionMode_type& x)
    {
      this->InspectionMode_.set (x);
    }

    void PreInspectionTraceabilityType::
    InspectionMode (const InspectionMode_optional& x)
    {
      this->InspectionMode_ = x;
    }

    void PreInspectionTraceabilityType::
    InspectionMode (::std::auto_ptr< InspectionMode_type > x)
    {
      this->InspectionMode_.set (x);
    }

    const PreInspectionTraceabilityType::PartialInspection_optional& PreInspectionTraceabilityType::
    PartialInspection () const
    {
      return this->PartialInspection_;
    }

    PreInspectionTraceabilityType::PartialInspection_optional& PreInspectionTraceabilityType::
    PartialInspection ()
    {
      return this->PartialInspection_;
    }

    void PreInspectionTraceabilityType::
    PartialInspection (const PartialInspection_type& x)
    {
      this->PartialInspection_.set (x);
    }

    void PreInspectionTraceabilityType::
    PartialInspection (const PartialInspection_optional& x)
    {
      this->PartialInspection_ = x;
    }

    void PreInspectionTraceabilityType::
    PartialInspection (::std::auto_ptr< PartialInspection_type > x)
    {
      this->PartialInspection_.set (x);
    }

    const PreInspectionTraceabilityType::NotableEvents_optional& PreInspectionTraceabilityType::
    NotableEvents () const
    {
      return this->NotableEvents_;
    }

    PreInspectionTraceabilityType::NotableEvents_optional& PreInspectionTraceabilityType::
    NotableEvents ()
    {
      return this->NotableEvents_;
    }

    void PreInspectionTraceabilityType::
    NotableEvents (const NotableEvents_type& x)
    {
      this->NotableEvents_.set (x);
    }

    void PreInspectionTraceabilityType::
    NotableEvents (const NotableEvents_optional& x)
    {
      this->NotableEvents_ = x;
    }

    void PreInspectionTraceabilityType::
    NotableEvents (::std::auto_ptr< NotableEvents_type > x)
    {
      this->NotableEvents_.set (x);
    }

    const PreInspectionTraceabilityType::InspectionSoftwareItems_optional& PreInspectionTraceabilityType::
    InspectionSoftwareItems () const
    {
      return this->InspectionSoftwareItems_;
    }

    PreInspectionTraceabilityType::InspectionSoftwareItems_optional& PreInspectionTraceabilityType::
    InspectionSoftwareItems ()
    {
      return this->InspectionSoftwareItems_;
    }

    void PreInspectionTraceabilityType::
    InspectionSoftwareItems (const InspectionSoftwareItems_type& x)
    {
      this->InspectionSoftwareItems_.set (x);
    }

    void PreInspectionTraceabilityType::
    InspectionSoftwareItems (const InspectionSoftwareItems_optional& x)
    {
      this->InspectionSoftwareItems_ = x;
    }

    void PreInspectionTraceabilityType::
    InspectionSoftwareItems (::std::auto_ptr< InspectionSoftwareItems_type > x)
    {
      this->InspectionSoftwareItems_.set (x);
    }

    const PreInspectionTraceabilityType::InspectionProgram_optional& PreInspectionTraceabilityType::
    InspectionProgram () const
    {
      return this->InspectionProgram_;
    }

    PreInspectionTraceabilityType::InspectionProgram_optional& PreInspectionTraceabilityType::
    InspectionProgram ()
    {
      return this->InspectionProgram_;
    }

    void PreInspectionTraceabilityType::
    InspectionProgram (const InspectionProgram_type& x)
    {
      this->InspectionProgram_.set (x);
    }

    void PreInspectionTraceabilityType::
    InspectionProgram (const InspectionProgram_optional& x)
    {
      this->InspectionProgram_ = x;
    }

    void PreInspectionTraceabilityType::
    InspectionProgram (::std::auto_ptr< InspectionProgram_type > x)
    {
      this->InspectionProgram_.set (x);
    }

    const PreInspectionTraceabilityType::SecurityClassification_optional& PreInspectionTraceabilityType::
    SecurityClassification () const
    {
      return this->SecurityClassification_;
    }

    PreInspectionTraceabilityType::SecurityClassification_optional& PreInspectionTraceabilityType::
    SecurityClassification ()
    {
      return this->SecurityClassification_;
    }

    void PreInspectionTraceabilityType::
    SecurityClassification (const SecurityClassification_type& x)
    {
      this->SecurityClassification_.set (x);
    }

    void PreInspectionTraceabilityType::
    SecurityClassification (const SecurityClassification_optional& x)
    {
      this->SecurityClassification_ = x;
    }

    void PreInspectionTraceabilityType::
    SecurityClassification (::std::auto_ptr< SecurityClassification_type > x)
    {
      this->SecurityClassification_.set (x);
    }

    const PreInspectionTraceabilityType::PlantLocation_optional& PreInspectionTraceabilityType::
    PlantLocation () const
    {
      return this->PlantLocation_;
    }

    PreInspectionTraceabilityType::PlantLocation_optional& PreInspectionTraceabilityType::
    PlantLocation ()
    {
      return this->PlantLocation_;
    }

    void PreInspectionTraceabilityType::
    PlantLocation (const PlantLocation_type& x)
    {
      this->PlantLocation_.set (x);
    }

    void PreInspectionTraceabilityType::
    PlantLocation (const PlantLocation_optional& x)
    {
      this->PlantLocation_ = x;
    }

    void PreInspectionTraceabilityType::
    PlantLocation (::std::auto_ptr< PlantLocation_type > x)
    {
      this->PlantLocation_.set (x);
    }

    const PreInspectionTraceabilityType::ReferencedQIFPlanInstance_optional& PreInspectionTraceabilityType::
    ReferencedQIFPlanInstance () const
    {
      return this->ReferencedQIFPlanInstance_;
    }

    PreInspectionTraceabilityType::ReferencedQIFPlanInstance_optional& PreInspectionTraceabilityType::
    ReferencedQIFPlanInstance ()
    {
      return this->ReferencedQIFPlanInstance_;
    }

    void PreInspectionTraceabilityType::
    ReferencedQIFPlanInstance (const ReferencedQIFPlanInstance_type& x)
    {
      this->ReferencedQIFPlanInstance_.set (x);
    }

    void PreInspectionTraceabilityType::
    ReferencedQIFPlanInstance (const ReferencedQIFPlanInstance_optional& x)
    {
      this->ReferencedQIFPlanInstance_ = x;
    }

    void PreInspectionTraceabilityType::
    ReferencedQIFPlanInstance (::std::auto_ptr< ReferencedQIFPlanInstance_type > x)
    {
      this->ReferencedQIFPlanInstance_.set (x);
    }

    const PreInspectionTraceabilityType::ReferencedQIFPlan_optional& PreInspectionTraceabilityType::
    ReferencedQIFPlan () const
    {
      return this->ReferencedQIFPlan_;
    }

    PreInspectionTraceabilityType::ReferencedQIFPlan_optional& PreInspectionTraceabilityType::
    ReferencedQIFPlan ()
    {
      return this->ReferencedQIFPlan_;
    }

    void PreInspectionTraceabilityType::
    ReferencedQIFPlan (const ReferencedQIFPlan_type& x)
    {
      this->ReferencedQIFPlan_.set (x);
    }

    void PreInspectionTraceabilityType::
    ReferencedQIFPlan (const ReferencedQIFPlan_optional& x)
    {
      this->ReferencedQIFPlan_ = x;
    }

    void PreInspectionTraceabilityType::
    ReferencedQIFPlan (::std::auto_ptr< ReferencedQIFPlan_type > x)
    {
      this->ReferencedQIFPlan_.set (x);
    }

    const PreInspectionTraceabilityType::ReferencedQIFPlan_type& PreInspectionTraceabilityType::
    ReferencedQIFPlan_default_value ()
    {
      return ReferencedQIFPlan_default_value_;
    }

    const PreInspectionTraceabilityType::FormalStandard_type& PreInspectionTraceabilityType::
    FormalStandard () const
    {
      return this->FormalStandard_.get ();
    }

    PreInspectionTraceabilityType::FormalStandard_type& PreInspectionTraceabilityType::
    FormalStandard ()
    {
      return this->FormalStandard_.get ();
    }

    void PreInspectionTraceabilityType::
    FormalStandard (const FormalStandard_type& x)
    {
      this->FormalStandard_.set (x);
    }

    void PreInspectionTraceabilityType::
    FormalStandard (::std::auto_ptr< FormalStandard_type > x)
    {
      this->FormalStandard_.set (x);
    }


    // ProductTraceabilityType
    // 

    const ProductTraceabilityType::ReportNumber_optional& ProductTraceabilityType::
    ReportNumber () const
    {
      return this->ReportNumber_;
    }

    ProductTraceabilityType::ReportNumber_optional& ProductTraceabilityType::
    ReportNumber ()
    {
      return this->ReportNumber_;
    }

    void ProductTraceabilityType::
    ReportNumber (const ReportNumber_type& x)
    {
      this->ReportNumber_.set (x);
    }

    void ProductTraceabilityType::
    ReportNumber (const ReportNumber_optional& x)
    {
      this->ReportNumber_ = x;
    }

    void ProductTraceabilityType::
    ReportNumber (::std::auto_ptr< ReportNumber_type > x)
    {
      this->ReportNumber_.set (x);
    }

    const ProductTraceabilityType::ManufacturingProcessId_optional& ProductTraceabilityType::
    ManufacturingProcessId () const
    {
      return this->ManufacturingProcessId_;
    }

    ProductTraceabilityType::ManufacturingProcessId_optional& ProductTraceabilityType::
    ManufacturingProcessId ()
    {
      return this->ManufacturingProcessId_;
    }

    void ProductTraceabilityType::
    ManufacturingProcessId (const ManufacturingProcessId_type& x)
    {
      this->ManufacturingProcessId_.set (x);
    }

    void ProductTraceabilityType::
    ManufacturingProcessId (const ManufacturingProcessId_optional& x)
    {
      this->ManufacturingProcessId_ = x;
    }

    void ProductTraceabilityType::
    ManufacturingProcessId (::std::auto_ptr< ManufacturingProcessId_type > x)
    {
      this->ManufacturingProcessId_.set (x);
    }

    const ProductTraceabilityType::FixtureId_optional& ProductTraceabilityType::
    FixtureId () const
    {
      return this->FixtureId_;
    }

    ProductTraceabilityType::FixtureId_optional& ProductTraceabilityType::
    FixtureId ()
    {
      return this->FixtureId_;
    }

    void ProductTraceabilityType::
    FixtureId (const FixtureId_type& x)
    {
      this->FixtureId_.set (x);
    }

    void ProductTraceabilityType::
    FixtureId (const FixtureId_optional& x)
    {
      this->FixtureId_ = x;
    }

    void ProductTraceabilityType::
    FixtureId (::std::auto_ptr< FixtureId_type > x)
    {
      this->FixtureId_.set (x);
    }

    const ProductTraceabilityType::NotableEventIds_optional& ProductTraceabilityType::
    NotableEventIds () const
    {
      return this->NotableEventIds_;
    }

    ProductTraceabilityType::NotableEventIds_optional& ProductTraceabilityType::
    NotableEventIds ()
    {
      return this->NotableEventIds_;
    }

    void ProductTraceabilityType::
    NotableEventIds (const NotableEventIds_type& x)
    {
      this->NotableEventIds_.set (x);
    }

    void ProductTraceabilityType::
    NotableEventIds (const NotableEventIds_optional& x)
    {
      this->NotableEventIds_ = x;
    }

    void ProductTraceabilityType::
    NotableEventIds (::std::auto_ptr< NotableEventIds_type > x)
    {
      this->NotableEventIds_.set (x);
    }

    const ProductTraceabilityType::InspectionSoftwareItems_optional& ProductTraceabilityType::
    InspectionSoftwareItems () const
    {
      return this->InspectionSoftwareItems_;
    }

    ProductTraceabilityType::InspectionSoftwareItems_optional& ProductTraceabilityType::
    InspectionSoftwareItems ()
    {
      return this->InspectionSoftwareItems_;
    }

    void ProductTraceabilityType::
    InspectionSoftwareItems (const InspectionSoftwareItems_type& x)
    {
      this->InspectionSoftwareItems_.set (x);
    }

    void ProductTraceabilityType::
    InspectionSoftwareItems (const InspectionSoftwareItems_optional& x)
    {
      this->InspectionSoftwareItems_ = x;
    }

    void ProductTraceabilityType::
    InspectionSoftwareItems (::std::auto_ptr< InspectionSoftwareItems_type > x)
    {
      this->InspectionSoftwareItems_.set (x);
    }

    const ProductTraceabilityType::InspectionProgram_optional& ProductTraceabilityType::
    InspectionProgram () const
    {
      return this->InspectionProgram_;
    }

    ProductTraceabilityType::InspectionProgram_optional& ProductTraceabilityType::
    InspectionProgram ()
    {
      return this->InspectionProgram_;
    }

    void ProductTraceabilityType::
    InspectionProgram (const InspectionProgram_type& x)
    {
      this->InspectionProgram_.set (x);
    }

    void ProductTraceabilityType::
    InspectionProgram (const InspectionProgram_optional& x)
    {
      this->InspectionProgram_ = x;
    }

    void ProductTraceabilityType::
    InspectionProgram (::std::auto_ptr< InspectionProgram_type > x)
    {
      this->InspectionProgram_.set (x);
    }

    const ProductTraceabilityType::MeasurementDeviceIds_optional& ProductTraceabilityType::
    MeasurementDeviceIds () const
    {
      return this->MeasurementDeviceIds_;
    }

    ProductTraceabilityType::MeasurementDeviceIds_optional& ProductTraceabilityType::
    MeasurementDeviceIds ()
    {
      return this->MeasurementDeviceIds_;
    }

    void ProductTraceabilityType::
    MeasurementDeviceIds (const MeasurementDeviceIds_type& x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    void ProductTraceabilityType::
    MeasurementDeviceIds (const MeasurementDeviceIds_optional& x)
    {
      this->MeasurementDeviceIds_ = x;
    }

    void ProductTraceabilityType::
    MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > x)
    {
      this->MeasurementDeviceIds_.set (x);
    }


    // ActualProductTraceabilityType
    // 

    const ActualProductTraceabilityType::SampleNumber_optional& ActualProductTraceabilityType::
    SampleNumber () const
    {
      return this->SampleNumber_;
    }

    ActualProductTraceabilityType::SampleNumber_optional& ActualProductTraceabilityType::
    SampleNumber ()
    {
      return this->SampleNumber_;
    }

    void ActualProductTraceabilityType::
    SampleNumber (const SampleNumber_type& x)
    {
      this->SampleNumber_.set (x);
    }

    void ActualProductTraceabilityType::
    SampleNumber (const SampleNumber_optional& x)
    {
      this->SampleNumber_ = x;
    }

    void ActualProductTraceabilityType::
    SampleNumber (::std::auto_ptr< SampleNumber_type > x)
    {
      this->SampleNumber_.set (x);
    }

    const ActualProductTraceabilityType::LotNumber_optional& ActualProductTraceabilityType::
    LotNumber () const
    {
      return this->LotNumber_;
    }

    ActualProductTraceabilityType::LotNumber_optional& ActualProductTraceabilityType::
    LotNumber ()
    {
      return this->LotNumber_;
    }

    void ActualProductTraceabilityType::
    LotNumber (const LotNumber_type& x)
    {
      this->LotNumber_.set (x);
    }

    void ActualProductTraceabilityType::
    LotNumber (const LotNumber_optional& x)
    {
      this->LotNumber_ = x;
    }

    void ActualProductTraceabilityType::
    LotNumber (::std::auto_ptr< LotNumber_type > x)
    {
      this->LotNumber_.set (x);
    }

    const ActualProductTraceabilityType::ReportNumber_optional& ActualProductTraceabilityType::
    ReportNumber () const
    {
      return this->ReportNumber_;
    }

    ActualProductTraceabilityType::ReportNumber_optional& ActualProductTraceabilityType::
    ReportNumber ()
    {
      return this->ReportNumber_;
    }

    void ActualProductTraceabilityType::
    ReportNumber (const ReportNumber_type& x)
    {
      this->ReportNumber_.set (x);
    }

    void ActualProductTraceabilityType::
    ReportNumber (const ReportNumber_optional& x)
    {
      this->ReportNumber_ = x;
    }

    void ActualProductTraceabilityType::
    ReportNumber (::std::auto_ptr< ReportNumber_type > x)
    {
      this->ReportNumber_.set (x);
    }

    const ActualProductTraceabilityType::ManufacturingProcessId_optional& ActualProductTraceabilityType::
    ManufacturingProcessId () const
    {
      return this->ManufacturingProcessId_;
    }

    ActualProductTraceabilityType::ManufacturingProcessId_optional& ActualProductTraceabilityType::
    ManufacturingProcessId ()
    {
      return this->ManufacturingProcessId_;
    }

    void ActualProductTraceabilityType::
    ManufacturingProcessId (const ManufacturingProcessId_type& x)
    {
      this->ManufacturingProcessId_.set (x);
    }

    void ActualProductTraceabilityType::
    ManufacturingProcessId (const ManufacturingProcessId_optional& x)
    {
      this->ManufacturingProcessId_ = x;
    }

    void ActualProductTraceabilityType::
    ManufacturingProcessId (::std::auto_ptr< ManufacturingProcessId_type > x)
    {
      this->ManufacturingProcessId_.set (x);
    }

    const ActualProductTraceabilityType::FixtureId_optional& ActualProductTraceabilityType::
    FixtureId () const
    {
      return this->FixtureId_;
    }

    ActualProductTraceabilityType::FixtureId_optional& ActualProductTraceabilityType::
    FixtureId ()
    {
      return this->FixtureId_;
    }

    void ActualProductTraceabilityType::
    FixtureId (const FixtureId_type& x)
    {
      this->FixtureId_.set (x);
    }

    void ActualProductTraceabilityType::
    FixtureId (const FixtureId_optional& x)
    {
      this->FixtureId_ = x;
    }

    void ActualProductTraceabilityType::
    FixtureId (::std::auto_ptr< FixtureId_type > x)
    {
      this->FixtureId_.set (x);
    }

    const ActualProductTraceabilityType::NotableEventIds_optional& ActualProductTraceabilityType::
    NotableEventIds () const
    {
      return this->NotableEventIds_;
    }

    ActualProductTraceabilityType::NotableEventIds_optional& ActualProductTraceabilityType::
    NotableEventIds ()
    {
      return this->NotableEventIds_;
    }

    void ActualProductTraceabilityType::
    NotableEventIds (const NotableEventIds_type& x)
    {
      this->NotableEventIds_.set (x);
    }

    void ActualProductTraceabilityType::
    NotableEventIds (const NotableEventIds_optional& x)
    {
      this->NotableEventIds_ = x;
    }

    void ActualProductTraceabilityType::
    NotableEventIds (::std::auto_ptr< NotableEventIds_type > x)
    {
      this->NotableEventIds_.set (x);
    }

    const ActualProductTraceabilityType::NotedEventIds_optional& ActualProductTraceabilityType::
    NotedEventIds () const
    {
      return this->NotedEventIds_;
    }

    ActualProductTraceabilityType::NotedEventIds_optional& ActualProductTraceabilityType::
    NotedEventIds ()
    {
      return this->NotedEventIds_;
    }

    void ActualProductTraceabilityType::
    NotedEventIds (const NotedEventIds_type& x)
    {
      this->NotedEventIds_.set (x);
    }

    void ActualProductTraceabilityType::
    NotedEventIds (const NotedEventIds_optional& x)
    {
      this->NotedEventIds_ = x;
    }

    void ActualProductTraceabilityType::
    NotedEventIds (::std::auto_ptr< NotedEventIds_type > x)
    {
      this->NotedEventIds_.set (x);
    }

    const ActualProductTraceabilityType::InspectionStart_optional& ActualProductTraceabilityType::
    InspectionStart () const
    {
      return this->InspectionStart_;
    }

    ActualProductTraceabilityType::InspectionStart_optional& ActualProductTraceabilityType::
    InspectionStart ()
    {
      return this->InspectionStart_;
    }

    void ActualProductTraceabilityType::
    InspectionStart (const InspectionStart_type& x)
    {
      this->InspectionStart_.set (x);
    }

    void ActualProductTraceabilityType::
    InspectionStart (const InspectionStart_optional& x)
    {
      this->InspectionStart_ = x;
    }

    void ActualProductTraceabilityType::
    InspectionStart (::std::auto_ptr< InspectionStart_type > x)
    {
      this->InspectionStart_.set (x);
    }

    const ActualProductTraceabilityType::InspectionEnd_optional& ActualProductTraceabilityType::
    InspectionEnd () const
    {
      return this->InspectionEnd_;
    }

    ActualProductTraceabilityType::InspectionEnd_optional& ActualProductTraceabilityType::
    InspectionEnd ()
    {
      return this->InspectionEnd_;
    }

    void ActualProductTraceabilityType::
    InspectionEnd (const InspectionEnd_type& x)
    {
      this->InspectionEnd_.set (x);
    }

    void ActualProductTraceabilityType::
    InspectionEnd (const InspectionEnd_optional& x)
    {
      this->InspectionEnd_ = x;
    }

    void ActualProductTraceabilityType::
    InspectionEnd (::std::auto_ptr< InspectionEnd_type > x)
    {
      this->InspectionEnd_.set (x);
    }

    const ActualProductTraceabilityType::InspectionSoftwareItems_optional& ActualProductTraceabilityType::
    InspectionSoftwareItems () const
    {
      return this->InspectionSoftwareItems_;
    }

    ActualProductTraceabilityType::InspectionSoftwareItems_optional& ActualProductTraceabilityType::
    InspectionSoftwareItems ()
    {
      return this->InspectionSoftwareItems_;
    }

    void ActualProductTraceabilityType::
    InspectionSoftwareItems (const InspectionSoftwareItems_type& x)
    {
      this->InspectionSoftwareItems_.set (x);
    }

    void ActualProductTraceabilityType::
    InspectionSoftwareItems (const InspectionSoftwareItems_optional& x)
    {
      this->InspectionSoftwareItems_ = x;
    }

    void ActualProductTraceabilityType::
    InspectionSoftwareItems (::std::auto_ptr< InspectionSoftwareItems_type > x)
    {
      this->InspectionSoftwareItems_.set (x);
    }

    const ActualProductTraceabilityType::InspectionProgram_optional& ActualProductTraceabilityType::
    InspectionProgram () const
    {
      return this->InspectionProgram_;
    }

    ActualProductTraceabilityType::InspectionProgram_optional& ActualProductTraceabilityType::
    InspectionProgram ()
    {
      return this->InspectionProgram_;
    }

    void ActualProductTraceabilityType::
    InspectionProgram (const InspectionProgram_type& x)
    {
      this->InspectionProgram_.set (x);
    }

    void ActualProductTraceabilityType::
    InspectionProgram (const InspectionProgram_optional& x)
    {
      this->InspectionProgram_ = x;
    }

    void ActualProductTraceabilityType::
    InspectionProgram (::std::auto_ptr< InspectionProgram_type > x)
    {
      this->InspectionProgram_.set (x);
    }

    const ActualProductTraceabilityType::InspectionOperator_optional& ActualProductTraceabilityType::
    InspectionOperator () const
    {
      return this->InspectionOperator_;
    }

    ActualProductTraceabilityType::InspectionOperator_optional& ActualProductTraceabilityType::
    InspectionOperator ()
    {
      return this->InspectionOperator_;
    }

    void ActualProductTraceabilityType::
    InspectionOperator (const InspectionOperator_type& x)
    {
      this->InspectionOperator_.set (x);
    }

    void ActualProductTraceabilityType::
    InspectionOperator (const InspectionOperator_optional& x)
    {
      this->InspectionOperator_ = x;
    }

    void ActualProductTraceabilityType::
    InspectionOperator (::std::auto_ptr< InspectionOperator_type > x)
    {
      this->InspectionOperator_.set (x);
    }

    const ActualProductTraceabilityType::MeasurementDeviceIds_optional& ActualProductTraceabilityType::
    MeasurementDeviceIds () const
    {
      return this->MeasurementDeviceIds_;
    }

    ActualProductTraceabilityType::MeasurementDeviceIds_optional& ActualProductTraceabilityType::
    MeasurementDeviceIds ()
    {
      return this->MeasurementDeviceIds_;
    }

    void ActualProductTraceabilityType::
    MeasurementDeviceIds (const MeasurementDeviceIds_type& x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    void ActualProductTraceabilityType::
    MeasurementDeviceIds (const MeasurementDeviceIds_optional& x)
    {
      this->MeasurementDeviceIds_ = x;
    }

    void ActualProductTraceabilityType::
    MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    const ActualProductTraceabilityType::ProductEnvironments_optional& ActualProductTraceabilityType::
    ProductEnvironments () const
    {
      return this->ProductEnvironments_;
    }

    ActualProductTraceabilityType::ProductEnvironments_optional& ActualProductTraceabilityType::
    ProductEnvironments ()
    {
      return this->ProductEnvironments_;
    }

    void ActualProductTraceabilityType::
    ProductEnvironments (const ProductEnvironments_type& x)
    {
      this->ProductEnvironments_.set (x);
    }

    void ActualProductTraceabilityType::
    ProductEnvironments (const ProductEnvironments_optional& x)
    {
      this->ProductEnvironments_ = x;
    }

    void ActualProductTraceabilityType::
    ProductEnvironments (::std::auto_ptr< ProductEnvironments_type > x)
    {
      this->ProductEnvironments_.set (x);
    }

    const ActualProductTraceabilityType::Errors_optional& ActualProductTraceabilityType::
    Errors () const
    {
      return this->Errors_;
    }

    ActualProductTraceabilityType::Errors_optional& ActualProductTraceabilityType::
    Errors ()
    {
      return this->Errors_;
    }

    void ActualProductTraceabilityType::
    Errors (const Errors_type& x)
    {
      this->Errors_.set (x);
    }

    void ActualProductTraceabilityType::
    Errors (const Errors_optional& x)
    {
      this->Errors_ = x;
    }

    void ActualProductTraceabilityType::
    Errors (::std::auto_ptr< Errors_type > x)
    {
      this->Errors_.set (x);
    }


    // ProcessParameterType
    // 

    const ProcessParameterType::ParameterType_type& ProcessParameterType::
    ParameterType () const
    {
      return this->ParameterType_.get ();
    }

    ProcessParameterType::ParameterType_type& ProcessParameterType::
    ParameterType ()
    {
      return this->ParameterType_.get ();
    }

    void ProcessParameterType::
    ParameterType (const ParameterType_type& x)
    {
      this->ParameterType_.set (x);
    }

    void ProcessParameterType::
    ParameterType (::std::auto_ptr< ParameterType_type > x)
    {
      this->ParameterType_.set (x);
    }

    const ProcessParameterType::ParameterValue_type& ProcessParameterType::
    ParameterValue () const
    {
      return this->ParameterValue_.get ();
    }

    ProcessParameterType::ParameterValue_type& ProcessParameterType::
    ParameterValue ()
    {
      return this->ParameterValue_.get ();
    }

    void ProcessParameterType::
    ParameterValue (const ParameterValue_type& x)
    {
      this->ParameterValue_.set (x);
    }

    void ProcessParameterType::
    ParameterValue (::std::auto_ptr< ParameterValue_type > x)
    {
      this->ParameterValue_.set (x);
    }


    // ManufacturingProcessTraceabilityType
    // 

    const ManufacturingProcessTraceabilityType::Attributes_optional& ManufacturingProcessTraceabilityType::
    Attributes () const
    {
      return this->Attributes_;
    }

    ManufacturingProcessTraceabilityType::Attributes_optional& ManufacturingProcessTraceabilityType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void ManufacturingProcessTraceabilityType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    Attributes (::std::auto_ptr< Attributes_type > x)
    {
      this->Attributes_.set (x);
    }

    const ManufacturingProcessTraceabilityType::Description_optional& ManufacturingProcessTraceabilityType::
    Description () const
    {
      return this->Description_;
    }

    ManufacturingProcessTraceabilityType::Description_optional& ManufacturingProcessTraceabilityType::
    Description ()
    {
      return this->Description_;
    }

    void ManufacturingProcessTraceabilityType::
    Description (const Description_type& x)
    {
      this->Description_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    Description (const Description_optional& x)
    {
      this->Description_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    Description (::std::auto_ptr< Description_type > x)
    {
      this->Description_.set (x);
    }

    const ManufacturingProcessTraceabilityType::Job_optional& ManufacturingProcessTraceabilityType::
    Job () const
    {
      return this->Job_;
    }

    ManufacturingProcessTraceabilityType::Job_optional& ManufacturingProcessTraceabilityType::
    Job ()
    {
      return this->Job_;
    }

    void ManufacturingProcessTraceabilityType::
    Job (const Job_type& x)
    {
      this->Job_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    Job (const Job_optional& x)
    {
      this->Job_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    Job (::std::auto_ptr< Job_type > x)
    {
      this->Job_.set (x);
    }

    const ManufacturingProcessTraceabilityType::Revision_optional& ManufacturingProcessTraceabilityType::
    Revision () const
    {
      return this->Revision_;
    }

    ManufacturingProcessTraceabilityType::Revision_optional& ManufacturingProcessTraceabilityType::
    Revision ()
    {
      return this->Revision_;
    }

    void ManufacturingProcessTraceabilityType::
    Revision (const Revision_type& x)
    {
      this->Revision_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    Revision (const Revision_optional& x)
    {
      this->Revision_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    Revision (::std::auto_ptr< Revision_type > x)
    {
      this->Revision_.set (x);
    }

    const ManufacturingProcessTraceabilityType::PreviousOperationId_optional& ManufacturingProcessTraceabilityType::
    PreviousOperationId () const
    {
      return this->PreviousOperationId_;
    }

    ManufacturingProcessTraceabilityType::PreviousOperationId_optional& ManufacturingProcessTraceabilityType::
    PreviousOperationId ()
    {
      return this->PreviousOperationId_;
    }

    void ManufacturingProcessTraceabilityType::
    PreviousOperationId (const PreviousOperationId_type& x)
    {
      this->PreviousOperationId_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    PreviousOperationId (const PreviousOperationId_optional& x)
    {
      this->PreviousOperationId_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    PreviousOperationId (::std::auto_ptr< PreviousOperationId_type > x)
    {
      this->PreviousOperationId_.set (x);
    }

    const ManufacturingProcessTraceabilityType::Path_optional& ManufacturingProcessTraceabilityType::
    Path () const
    {
      return this->Path_;
    }

    ManufacturingProcessTraceabilityType::Path_optional& ManufacturingProcessTraceabilityType::
    Path ()
    {
      return this->Path_;
    }

    void ManufacturingProcessTraceabilityType::
    Path (const Path_type& x)
    {
      this->Path_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    Path (const Path_optional& x)
    {
      this->Path_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    Path (::std::auto_ptr< Path_type > x)
    {
      this->Path_.set (x);
    }

    const ManufacturingProcessTraceabilityType::MachineManufacturerName_optional& ManufacturingProcessTraceabilityType::
    MachineManufacturerName () const
    {
      return this->MachineManufacturerName_;
    }

    ManufacturingProcessTraceabilityType::MachineManufacturerName_optional& ManufacturingProcessTraceabilityType::
    MachineManufacturerName ()
    {
      return this->MachineManufacturerName_;
    }

    void ManufacturingProcessTraceabilityType::
    MachineManufacturerName (const MachineManufacturerName_type& x)
    {
      this->MachineManufacturerName_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    MachineManufacturerName (const MachineManufacturerName_optional& x)
    {
      this->MachineManufacturerName_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    MachineManufacturerName (::std::auto_ptr< MachineManufacturerName_type > x)
    {
      this->MachineManufacturerName_.set (x);
    }

    const ManufacturingProcessTraceabilityType::MachineIdentifier_optional& ManufacturingProcessTraceabilityType::
    MachineIdentifier () const
    {
      return this->MachineIdentifier_;
    }

    ManufacturingProcessTraceabilityType::MachineIdentifier_optional& ManufacturingProcessTraceabilityType::
    MachineIdentifier ()
    {
      return this->MachineIdentifier_;
    }

    void ManufacturingProcessTraceabilityType::
    MachineIdentifier (const MachineIdentifier_type& x)
    {
      this->MachineIdentifier_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    MachineIdentifier (const MachineIdentifier_optional& x)
    {
      this->MachineIdentifier_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    MachineIdentifier (::std::auto_ptr< MachineIdentifier_type > x)
    {
      this->MachineIdentifier_.set (x);
    }

    const ManufacturingProcessTraceabilityType::OperatorIdentifier_optional& ManufacturingProcessTraceabilityType::
    OperatorIdentifier () const
    {
      return this->OperatorIdentifier_;
    }

    ManufacturingProcessTraceabilityType::OperatorIdentifier_optional& ManufacturingProcessTraceabilityType::
    OperatorIdentifier ()
    {
      return this->OperatorIdentifier_;
    }

    void ManufacturingProcessTraceabilityType::
    OperatorIdentifier (const OperatorIdentifier_type& x)
    {
      this->OperatorIdentifier_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    OperatorIdentifier (const OperatorIdentifier_optional& x)
    {
      this->OperatorIdentifier_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    OperatorIdentifier (::std::auto_ptr< OperatorIdentifier_type > x)
    {
      this->OperatorIdentifier_.set (x);
    }

    const ManufacturingProcessTraceabilityType::Shift_optional& ManufacturingProcessTraceabilityType::
    Shift () const
    {
      return this->Shift_;
    }

    ManufacturingProcessTraceabilityType::Shift_optional& ManufacturingProcessTraceabilityType::
    Shift ()
    {
      return this->Shift_;
    }

    void ManufacturingProcessTraceabilityType::
    Shift (const Shift_type& x)
    {
      this->Shift_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    Shift (const Shift_optional& x)
    {
      this->Shift_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    Shift (::std::auto_ptr< Shift_type > x)
    {
      this->Shift_.set (x);
    }

    const ManufacturingProcessTraceabilityType::Department_optional& ManufacturingProcessTraceabilityType::
    Department () const
    {
      return this->Department_;
    }

    ManufacturingProcessTraceabilityType::Department_optional& ManufacturingProcessTraceabilityType::
    Department ()
    {
      return this->Department_;
    }

    void ManufacturingProcessTraceabilityType::
    Department (const Department_type& x)
    {
      this->Department_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    Department (const Department_optional& x)
    {
      this->Department_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    Department (::std::auto_ptr< Department_type > x)
    {
      this->Department_.set (x);
    }

    const ManufacturingProcessTraceabilityType::ResponsibilityIdentifier_optional& ManufacturingProcessTraceabilityType::
    ResponsibilityIdentifier () const
    {
      return this->ResponsibilityIdentifier_;
    }

    ManufacturingProcessTraceabilityType::ResponsibilityIdentifier_optional& ManufacturingProcessTraceabilityType::
    ResponsibilityIdentifier ()
    {
      return this->ResponsibilityIdentifier_;
    }

    void ManufacturingProcessTraceabilityType::
    ResponsibilityIdentifier (const ResponsibilityIdentifier_type& x)
    {
      this->ResponsibilityIdentifier_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    ResponsibilityIdentifier (const ResponsibilityIdentifier_optional& x)
    {
      this->ResponsibilityIdentifier_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    ResponsibilityIdentifier (::std::auto_ptr< ResponsibilityIdentifier_type > x)
    {
      this->ResponsibilityIdentifier_.set (x);
    }

    const ManufacturingProcessTraceabilityType::PlantSector_optional& ManufacturingProcessTraceabilityType::
    PlantSector () const
    {
      return this->PlantSector_;
    }

    ManufacturingProcessTraceabilityType::PlantSector_optional& ManufacturingProcessTraceabilityType::
    PlantSector ()
    {
      return this->PlantSector_;
    }

    void ManufacturingProcessTraceabilityType::
    PlantSector (const PlantSector_type& x)
    {
      this->PlantSector_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    PlantSector (const PlantSector_optional& x)
    {
      this->PlantSector_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    PlantSector (::std::auto_ptr< PlantSector_type > x)
    {
      this->PlantSector_.set (x);
    }

    const ManufacturingProcessTraceabilityType::ProcessParameter_sequence& ManufacturingProcessTraceabilityType::
    ProcessParameter () const
    {
      return this->ProcessParameter_;
    }

    ManufacturingProcessTraceabilityType::ProcessParameter_sequence& ManufacturingProcessTraceabilityType::
    ProcessParameter ()
    {
      return this->ProcessParameter_;
    }

    void ManufacturingProcessTraceabilityType::
    ProcessParameter (const ProcessParameter_sequence& s)
    {
      this->ProcessParameter_ = s;
    }

    const ManufacturingProcessTraceabilityType::AssociatedTraceabilityId_optional& ManufacturingProcessTraceabilityType::
    AssociatedTraceabilityId () const
    {
      return this->AssociatedTraceabilityId_;
    }

    ManufacturingProcessTraceabilityType::AssociatedTraceabilityId_optional& ManufacturingProcessTraceabilityType::
    AssociatedTraceabilityId ()
    {
      return this->AssociatedTraceabilityId_;
    }

    void ManufacturingProcessTraceabilityType::
    AssociatedTraceabilityId (const AssociatedTraceabilityId_type& x)
    {
      this->AssociatedTraceabilityId_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    AssociatedTraceabilityId (const AssociatedTraceabilityId_optional& x)
    {
      this->AssociatedTraceabilityId_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    AssociatedTraceabilityId (::std::auto_ptr< AssociatedTraceabilityId_type > x)
    {
      this->AssociatedTraceabilityId_.set (x);
    }

    const ManufacturingProcessTraceabilityType::id_type& ManufacturingProcessTraceabilityType::
    id () const
    {
      return this->id_.get ();
    }

    ManufacturingProcessTraceabilityType::id_type& ManufacturingProcessTraceabilityType::
    id ()
    {
      return this->id_.get ();
    }

    void ManufacturingProcessTraceabilityType::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    id (::std::auto_ptr< id_type > x)
    {
      this->id_.set (x);
    }


    // ManufacturingProcessTraceabilitiesType
    // 

    const ManufacturingProcessTraceabilitiesType::ManufacturingProcessTraceability_sequence& ManufacturingProcessTraceabilitiesType::
    ManufacturingProcessTraceability () const
    {
      return this->ManufacturingProcessTraceability_;
    }

    ManufacturingProcessTraceabilitiesType::ManufacturingProcessTraceability_sequence& ManufacturingProcessTraceabilitiesType::
    ManufacturingProcessTraceability ()
    {
      return this->ManufacturingProcessTraceability_;
    }

    void ManufacturingProcessTraceabilitiesType::
    ManufacturingProcessTraceability (const ManufacturingProcessTraceability_sequence& s)
    {
      this->ManufacturingProcessTraceability_ = s;
    }


    // ErrorsType
    // 

    const ErrorsType::Error_sequence& ErrorsType::
    Error () const
    {
      return this->Error_;
    }

    ErrorsType::Error_sequence& ErrorsType::
    Error ()
    {
      return this->Error_;
    }

    void ErrorsType::
    Error (const Error_sequence& s)
    {
      this->Error_ = s;
    }


    // PartialInspectionType
    // 

    const PartialInspectionType::BaselineProductNumber_type& PartialInspectionType::
    BaselineProductNumber () const
    {
      return this->BaselineProductNumber_.get ();
    }

    PartialInspectionType::BaselineProductNumber_type& PartialInspectionType::
    BaselineProductNumber ()
    {
      return this->BaselineProductNumber_.get ();
    }

    void PartialInspectionType::
    BaselineProductNumber (const BaselineProductNumber_type& x)
    {
      this->BaselineProductNumber_.set (x);
    }

    void PartialInspectionType::
    BaselineProductNumber (::std::auto_ptr< BaselineProductNumber_type > x)
    {
      this->BaselineProductNumber_.set (x);
    }

    const PartialInspectionType::BaselineProductVersion_optional& PartialInspectionType::
    BaselineProductVersion () const
    {
      return this->BaselineProductVersion_;
    }

    PartialInspectionType::BaselineProductVersion_optional& PartialInspectionType::
    BaselineProductVersion ()
    {
      return this->BaselineProductVersion_;
    }

    void PartialInspectionType::
    BaselineProductVersion (const BaselineProductVersion_type& x)
    {
      this->BaselineProductVersion_.set (x);
    }

    void PartialInspectionType::
    BaselineProductVersion (const BaselineProductVersion_optional& x)
    {
      this->BaselineProductVersion_ = x;
    }

    void PartialInspectionType::
    BaselineProductVersion (::std::auto_ptr< BaselineProductVersion_type > x)
    {
      this->BaselineProductVersion_.set (x);
    }

    const PartialInspectionType::ReasonForPartialInspection_type& PartialInspectionType::
    ReasonForPartialInspection () const
    {
      return this->ReasonForPartialInspection_.get ();
    }

    PartialInspectionType::ReasonForPartialInspection_type& PartialInspectionType::
    ReasonForPartialInspection ()
    {
      return this->ReasonForPartialInspection_.get ();
    }

    void PartialInspectionType::
    ReasonForPartialInspection (const ReasonForPartialInspection_type& x)
    {
      this->ReasonForPartialInspection_.set (x);
    }

    void PartialInspectionType::
    ReasonForPartialInspection (::std::auto_ptr< ReasonForPartialInspection_type > x)
    {
      this->ReasonForPartialInspection_.set (x);
    }


    // TimeDescriptionEnumType
    // 

    TimeDescriptionEnumType::
    TimeDescriptionEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_TimeDescriptionEnumType_literals_[v])
    {
    }

    TimeDescriptionEnumType::
    TimeDescriptionEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    TimeDescriptionEnumType::
    TimeDescriptionEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    TimeDescriptionEnumType::
    TimeDescriptionEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    TimeDescriptionEnumType::
    TimeDescriptionEnumType (const TimeDescriptionEnumType& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    TimeDescriptionEnumType& TimeDescriptionEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_TimeDescriptionEnumType_literals_[v]);

      return *this;
    }


    // TimeDescriptionType
    // 

    const TimeDescriptionType::TimeDescriptionEnum_optional& TimeDescriptionType::
    TimeDescriptionEnum () const
    {
      return this->TimeDescriptionEnum_;
    }

    TimeDescriptionType::TimeDescriptionEnum_optional& TimeDescriptionType::
    TimeDescriptionEnum ()
    {
      return this->TimeDescriptionEnum_;
    }

    void TimeDescriptionType::
    TimeDescriptionEnum (const TimeDescriptionEnum_type& x)
    {
      this->TimeDescriptionEnum_.set (x);
    }

    void TimeDescriptionType::
    TimeDescriptionEnum (const TimeDescriptionEnum_optional& x)
    {
      this->TimeDescriptionEnum_ = x;
    }

    void TimeDescriptionType::
    TimeDescriptionEnum (::std::auto_ptr< TimeDescriptionEnum_type > x)
    {
      this->TimeDescriptionEnum_.set (x);
    }

    const TimeDescriptionType::OtherTimeDescription_optional& TimeDescriptionType::
    OtherTimeDescription () const
    {
      return this->OtherTimeDescription_;
    }

    TimeDescriptionType::OtherTimeDescription_optional& TimeDescriptionType::
    OtherTimeDescription ()
    {
      return this->OtherTimeDescription_;
    }

    void TimeDescriptionType::
    OtherTimeDescription (const OtherTimeDescription_type& x)
    {
      this->OtherTimeDescription_.set (x);
    }

    void TimeDescriptionType::
    OtherTimeDescription (const OtherTimeDescription_optional& x)
    {
      this->OtherTimeDescription_ = x;
    }

    void TimeDescriptionType::
    OtherTimeDescription (::std::auto_ptr< OtherTimeDescription_type > x)
    {
      this->OtherTimeDescription_.set (x);
    }


    // InspectionModeEnumType
    // 

    InspectionModeEnumType::
    InspectionModeEnumType (value v)
    : ::xml_schema::string (_xsd_InspectionModeEnumType_literals_[v])
    {
    }

    InspectionModeEnumType::
    InspectionModeEnumType (const char* v)
    : ::xml_schema::string (v)
    {
    }

    InspectionModeEnumType::
    InspectionModeEnumType (const ::std::string& v)
    : ::xml_schema::string (v)
    {
    }

    InspectionModeEnumType::
    InspectionModeEnumType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    InspectionModeEnumType::
    InspectionModeEnumType (const InspectionModeEnumType& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    InspectionModeEnumType& InspectionModeEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_InspectionModeEnumType_literals_[v]);

      return *this;
    }


    // InspectionScopeEnumType
    // 

    InspectionScopeEnumType::
    InspectionScopeEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_InspectionScopeEnumType_literals_[v])
    {
    }

    InspectionScopeEnumType::
    InspectionScopeEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    InspectionScopeEnumType::
    InspectionScopeEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    InspectionScopeEnumType::
    InspectionScopeEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    InspectionScopeEnumType::
    InspectionScopeEnumType (const InspectionScopeEnumType& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    InspectionScopeEnumType& InspectionScopeEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_InspectionScopeEnumType_literals_[v]);

      return *this;
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace xsd
{
  namespace qif2
  {
    // InspectionProgramType
    //

    InspectionProgramType::
    InspectionProgramType (const File_type& File,
                           const FormalStandard_type& FormalStandard,
                           const Author_type& Author)
    : ::xml_schema::type (),
      File_ (File, this),
      Description_ (this),
      FormalStandard_ (FormalStandard, this),
      Author_ (Author, this)
    {
    }

    InspectionProgramType::
    InspectionProgramType (::std::auto_ptr< File_type > File,
                           ::std::auto_ptr< FormalStandard_type > FormalStandard,
                           ::std::auto_ptr< Author_type > Author)
    : ::xml_schema::type (),
      File_ (File, this),
      Description_ (this),
      FormalStandard_ (FormalStandard, this),
      Author_ (Author, this)
    {
    }

    InspectionProgramType::
    InspectionProgramType (const InspectionProgramType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      File_ (x.File_, f, this),
      Description_ (x.Description_, f, this),
      FormalStandard_ (x.FormalStandard_, f, this),
      Author_ (x.Author_, f, this)
    {
    }

    InspectionProgramType::
    InspectionProgramType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      File_ (this),
      Description_ (this),
      FormalStandard_ (this),
      Author_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void InspectionProgramType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // File
        //
        if (n.name () == "File" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< File_type > r (
            File_traits::create (i, f, this));

          if (!File_.present ())
          {
            this->File_.set (r);
            continue;
          }
        }

        // Description
        //
        if (n.name () == "Description" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Description_type > r (
            Description_traits::create (i, f, this));

          if (!this->Description_)
          {
            this->Description_.set (r);
            continue;
          }
        }

        // FormalStandard
        //
        if (n.name () == "FormalStandard" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FormalStandard_type > r (
            FormalStandard_traits::create (i, f, this));

          if (!FormalStandard_.present ())
          {
            this->FormalStandard_.set (r);
            continue;
          }
        }

        // Author
        //
        if (n.name () == "Author" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Author_type > r (
            Author_traits::create (i, f, this));

          if (!Author_.present ())
          {
            this->Author_.set (r);
            continue;
          }
        }

        break;
      }

      if (!File_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "File",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!FormalStandard_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "FormalStandard",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Author_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Author",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    InspectionProgramType* InspectionProgramType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class InspectionProgramType (*this, f, c);
    }

    InspectionProgramType& InspectionProgramType::
    operator= (const InspectionProgramType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->File_ = x.File_;
        this->Description_ = x.Description_;
        this->FormalStandard_ = x.FormalStandard_;
        this->Author_ = x.Author_;
      }

      return *this;
    }

    InspectionProgramType::
    ~InspectionProgramType ()
    {
    }

    // InspectionSoftwareItemsType
    //

    InspectionSoftwareItemsType::
    InspectionSoftwareItemsType ()
    : ::xml_schema::type (),
      InspectionProgramGenerationSoftware_ (this),
      InspectionProgramExecutionSoftware_ (this),
      AnalysisSoftware_ (this),
      CADSoftware_ (this),
      DMESoftware_ (this)
    {
    }

    InspectionSoftwareItemsType::
    InspectionSoftwareItemsType (const InspectionSoftwareItemsType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      InspectionProgramGenerationSoftware_ (x.InspectionProgramGenerationSoftware_, f, this),
      InspectionProgramExecutionSoftware_ (x.InspectionProgramExecutionSoftware_, f, this),
      AnalysisSoftware_ (x.AnalysisSoftware_, f, this),
      CADSoftware_ (x.CADSoftware_, f, this),
      DMESoftware_ (x.DMESoftware_, f, this)
    {
    }

    InspectionSoftwareItemsType::
    InspectionSoftwareItemsType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      InspectionProgramGenerationSoftware_ (this),
      InspectionProgramExecutionSoftware_ (this),
      AnalysisSoftware_ (this),
      CADSoftware_ (this),
      DMESoftware_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void InspectionSoftwareItemsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // InspectionProgramGenerationSoftware
        //
        if (n.name () == "InspectionProgramGenerationSoftware" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionProgramGenerationSoftware_type > r (
            InspectionProgramGenerationSoftware_traits::create (i, f, this));

          this->InspectionProgramGenerationSoftware_.push_back (r);
          continue;
        }

        // InspectionProgramExecutionSoftware
        //
        if (n.name () == "InspectionProgramExecutionSoftware" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionProgramExecutionSoftware_type > r (
            InspectionProgramExecutionSoftware_traits::create (i, f, this));

          this->InspectionProgramExecutionSoftware_.push_back (r);
          continue;
        }

        // AnalysisSoftware
        //
        if (n.name () == "AnalysisSoftware" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AnalysisSoftware_type > r (
            AnalysisSoftware_traits::create (i, f, this));

          this->AnalysisSoftware_.push_back (r);
          continue;
        }

        // CADSoftware
        //
        if (n.name () == "CADSoftware" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CADSoftware_type > r (
            CADSoftware_traits::create (i, f, this));

          this->CADSoftware_.push_back (r);
          continue;
        }

        // DMESoftware
        //
        if (n.name () == "DMESoftware" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DMESoftware_type > r (
            DMESoftware_traits::create (i, f, this));

          this->DMESoftware_.push_back (r);
          continue;
        }

        break;
      }
    }

    InspectionSoftwareItemsType* InspectionSoftwareItemsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class InspectionSoftwareItemsType (*this, f, c);
    }

    InspectionSoftwareItemsType& InspectionSoftwareItemsType::
    operator= (const InspectionSoftwareItemsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->InspectionProgramGenerationSoftware_ = x.InspectionProgramGenerationSoftware_;
        this->InspectionProgramExecutionSoftware_ = x.InspectionProgramExecutionSoftware_;
        this->AnalysisSoftware_ = x.AnalysisSoftware_;
        this->CADSoftware_ = x.CADSoftware_;
        this->DMESoftware_ = x.DMESoftware_;
      }

      return *this;
    }

    InspectionSoftwareItemsType::
    ~InspectionSoftwareItemsType ()
    {
    }

    // EnvironmentType
    //

    EnvironmentType::
    EnvironmentType (const DateAndTime_type& DateAndTime)
    : ::xml_schema::type (),
      Attributes_ (this),
      ObjectTemperature_ (this),
      AmbientTemperature_ (this),
      RelativeHumidity_ (this),
      DateAndTime_ (DateAndTime, this),
      TimeDescription_ (this)
    {
    }

    EnvironmentType::
    EnvironmentType (const EnvironmentType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Attributes_ (x.Attributes_, f, this),
      ObjectTemperature_ (x.ObjectTemperature_, f, this),
      AmbientTemperature_ (x.AmbientTemperature_, f, this),
      RelativeHumidity_ (x.RelativeHumidity_, f, this),
      DateAndTime_ (x.DateAndTime_, f, this),
      TimeDescription_ (x.TimeDescription_, f, this)
    {
    }

    EnvironmentType::
    EnvironmentType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Attributes_ (this),
      ObjectTemperature_ (this),
      AmbientTemperature_ (this),
      RelativeHumidity_ (this),
      DateAndTime_ (this),
      TimeDescription_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void EnvironmentType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Attributes
        //
        if (n.name () == "Attributes" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (r);
            continue;
          }
        }

        // ObjectTemperature
        //
        if (n.name () == "ObjectTemperature" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ObjectTemperature_type > r (
            ObjectTemperature_traits::create (i, f, this));

          if (!this->ObjectTemperature_)
          {
            this->ObjectTemperature_.set (r);
            continue;
          }
        }

        // AmbientTemperature
        //
        if (n.name () == "AmbientTemperature" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AmbientTemperature_type > r (
            AmbientTemperature_traits::create (i, f, this));

          if (!this->AmbientTemperature_)
          {
            this->AmbientTemperature_.set (r);
            continue;
          }
        }

        // RelativeHumidity
        //
        if (n.name () == "RelativeHumidity" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RelativeHumidity_type > r (
            RelativeHumidity_traits::create (i, f, this));

          if (!this->RelativeHumidity_)
          {
            this->RelativeHumidity_.set (r);
            continue;
          }
        }

        // DateAndTime
        //
        if (n.name () == "DateAndTime" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DateAndTime_type > r (
            DateAndTime_traits::create (i, f, this));

          if (!DateAndTime_.present ())
          {
            this->DateAndTime_.set (r);
            continue;
          }
        }

        // TimeDescription
        //
        if (n.name () == "TimeDescription" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TimeDescription_type > r (
            TimeDescription_traits::create (i, f, this));

          if (!this->TimeDescription_)
          {
            this->TimeDescription_.set (r);
            continue;
          }
        }

        break;
      }

      if (!DateAndTime_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "DateAndTime",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    EnvironmentType* EnvironmentType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class EnvironmentType (*this, f, c);
    }

    EnvironmentType& EnvironmentType::
    operator= (const EnvironmentType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Attributes_ = x.Attributes_;
        this->ObjectTemperature_ = x.ObjectTemperature_;
        this->AmbientTemperature_ = x.AmbientTemperature_;
        this->RelativeHumidity_ = x.RelativeHumidity_;
        this->DateAndTime_ = x.DateAndTime_;
        this->TimeDescription_ = x.TimeDescription_;
      }

      return *this;
    }

    EnvironmentType::
    ~EnvironmentType ()
    {
    }

    // EnvironmentsType
    //

    EnvironmentsType::
    EnvironmentsType ()
    : ::xml_schema::type (),
      Environment_ (this)
    {
    }

    EnvironmentsType::
    EnvironmentsType (const EnvironmentsType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Environment_ (x.Environment_, f, this)
    {
    }

    EnvironmentsType::
    EnvironmentsType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Environment_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void EnvironmentsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Environment
        //
        if (n.name () == "Environment" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Environment_type > r (
            Environment_traits::create (i, f, this));

          this->Environment_.push_back (r);
          continue;
        }

        break;
      }
    }

    EnvironmentsType* EnvironmentsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class EnvironmentsType (*this, f, c);
    }

    EnvironmentsType& EnvironmentsType::
    operator= (const EnvironmentsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Environment_ = x.Environment_;
      }

      return *this;
    }

    EnvironmentsType::
    ~EnvironmentsType ()
    {
    }

    // InspectionTraceabilityType
    //

    const InspectionTraceabilityType::ReferencedQIFPlan_type InspectionTraceabilityType::ReferencedQIFPlan_default_value_ (
      "ThisFile");

    InspectionTraceabilityType::
    InspectionTraceabilityType ()
    : ::xml_schema::type (),
      InspectingOrganization_ (this),
      CustomerOrganization_ (this),
      SupplierCode_ (this),
      PurchaseOrderNumber_ (this),
      OrderNumber_ (this),
      ReportNumber_ (this),
      InspectionScope_ (this),
      InspectionMode_ (this),
      PartialInspection_ (this),
      NotableEvents_ (this),
      NotedEvents_ (this),
      InspectionStart_ (this),
      InspectionEnd_ (this),
      InspectionSoftwareItems_ (this),
      InspectionProgram_ (this),
      InspectionOperator_ (this),
      ReportPreparer_ (this),
      ReportPreparationDate_ (this),
      ReportType_ (this),
      SecurityClassification_ (this),
      PlantLocation_ (this),
      ReferencedQIFPlanInstance_ (this),
      ReferencedQIFPlan_ (this),
      Errors_ (this)
    {
    }

    InspectionTraceabilityType::
    InspectionTraceabilityType (const InspectionTraceabilityType& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      InspectingOrganization_ (x.InspectingOrganization_, f, this),
      CustomerOrganization_ (x.CustomerOrganization_, f, this),
      SupplierCode_ (x.SupplierCode_, f, this),
      PurchaseOrderNumber_ (x.PurchaseOrderNumber_, f, this),
      OrderNumber_ (x.OrderNumber_, f, this),
      ReportNumber_ (x.ReportNumber_, f, this),
      InspectionScope_ (x.InspectionScope_, f, this),
      InspectionMode_ (x.InspectionMode_, f, this),
      PartialInspection_ (x.PartialInspection_, f, this),
      NotableEvents_ (x.NotableEvents_, f, this),
      NotedEvents_ (x.NotedEvents_, f, this),
      InspectionStart_ (x.InspectionStart_, f, this),
      InspectionEnd_ (x.InspectionEnd_, f, this),
      InspectionSoftwareItems_ (x.InspectionSoftwareItems_, f, this),
      InspectionProgram_ (x.InspectionProgram_, f, this),
      InspectionOperator_ (x.InspectionOperator_, f, this),
      ReportPreparer_ (x.ReportPreparer_, f, this),
      ReportPreparationDate_ (x.ReportPreparationDate_, f, this),
      ReportType_ (x.ReportType_, f, this),
      SecurityClassification_ (x.SecurityClassification_, f, this),
      PlantLocation_ (x.PlantLocation_, f, this),
      ReferencedQIFPlanInstance_ (x.ReferencedQIFPlanInstance_, f, this),
      ReferencedQIFPlan_ (x.ReferencedQIFPlan_, f, this),
      Errors_ (x.Errors_, f, this)
    {
    }

    InspectionTraceabilityType::
    InspectionTraceabilityType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      InspectingOrganization_ (this),
      CustomerOrganization_ (this),
      SupplierCode_ (this),
      PurchaseOrderNumber_ (this),
      OrderNumber_ (this),
      ReportNumber_ (this),
      InspectionScope_ (this),
      InspectionMode_ (this),
      PartialInspection_ (this),
      NotableEvents_ (this),
      NotedEvents_ (this),
      InspectionStart_ (this),
      InspectionEnd_ (this),
      InspectionSoftwareItems_ (this),
      InspectionProgram_ (this),
      InspectionOperator_ (this),
      ReportPreparer_ (this),
      ReportPreparationDate_ (this),
      ReportType_ (this),
      SecurityClassification_ (this),
      PlantLocation_ (this),
      ReferencedQIFPlanInstance_ (this),
      ReferencedQIFPlan_ (this),
      Errors_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void InspectionTraceabilityType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // InspectingOrganization
        //
        if (n.name () == "InspectingOrganization" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectingOrganization_type > r (
            InspectingOrganization_traits::create (i, f, this));

          if (!this->InspectingOrganization_)
          {
            this->InspectingOrganization_.set (r);
            continue;
          }
        }

        // CustomerOrganization
        //
        if (n.name () == "CustomerOrganization" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CustomerOrganization_type > r (
            CustomerOrganization_traits::create (i, f, this));

          if (!this->CustomerOrganization_)
          {
            this->CustomerOrganization_.set (r);
            continue;
          }
        }

        // SupplierCode
        //
        if (n.name () == "SupplierCode" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SupplierCode_type > r (
            SupplierCode_traits::create (i, f, this));

          if (!this->SupplierCode_)
          {
            this->SupplierCode_.set (r);
            continue;
          }
        }

        // PurchaseOrderNumber
        //
        if (n.name () == "PurchaseOrderNumber" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PurchaseOrderNumber_type > r (
            PurchaseOrderNumber_traits::create (i, f, this));

          if (!this->PurchaseOrderNumber_)
          {
            this->PurchaseOrderNumber_.set (r);
            continue;
          }
        }

        // OrderNumber
        //
        if (n.name () == "OrderNumber" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OrderNumber_type > r (
            OrderNumber_traits::create (i, f, this));

          if (!this->OrderNumber_)
          {
            this->OrderNumber_.set (r);
            continue;
          }
        }

        // ReportNumber
        //
        if (n.name () == "ReportNumber" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ReportNumber_type > r (
            ReportNumber_traits::create (i, f, this));

          if (!this->ReportNumber_)
          {
            this->ReportNumber_.set (r);
            continue;
          }
        }

        // InspectionScope
        //
        if (n.name () == "InspectionScope" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionScope_type > r (
            InspectionScope_traits::create (i, f, this));

          if (!this->InspectionScope_)
          {
            this->InspectionScope_.set (r);
            continue;
          }
        }

        // InspectionMode
        //
        if (n.name () == "InspectionMode" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionMode_type > r (
            InspectionMode_traits::create (i, f, this));

          if (!this->InspectionMode_)
          {
            this->InspectionMode_.set (r);
            continue;
          }
        }

        // PartialInspection
        //
        if (n.name () == "PartialInspection" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PartialInspection_type > r (
            PartialInspection_traits::create (i, f, this));

          if (!this->PartialInspection_)
          {
            this->PartialInspection_.set (r);
            continue;
          }
        }

        // NotableEvents
        //
        if (n.name () == "NotableEvents" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NotableEvents_type > r (
            NotableEvents_traits::create (i, f, this));

          if (!this->NotableEvents_)
          {
            this->NotableEvents_.set (r);
            continue;
          }
        }

        // NotedEvents
        //
        if (n.name () == "NotedEvents" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NotedEvents_type > r (
            NotedEvents_traits::create (i, f, this));

          if (!this->NotedEvents_)
          {
            this->NotedEvents_.set (r);
            continue;
          }
        }

        // InspectionStart
        //
        if (n.name () == "InspectionStart" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionStart_type > r (
            InspectionStart_traits::create (i, f, this));

          if (!this->InspectionStart_)
          {
            this->InspectionStart_.set (r);
            continue;
          }
        }

        // InspectionEnd
        //
        if (n.name () == "InspectionEnd" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionEnd_type > r (
            InspectionEnd_traits::create (i, f, this));

          if (!this->InspectionEnd_)
          {
            this->InspectionEnd_.set (r);
            continue;
          }
        }

        // InspectionSoftwareItems
        //
        if (n.name () == "InspectionSoftwareItems" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionSoftwareItems_type > r (
            InspectionSoftwareItems_traits::create (i, f, this));

          if (!this->InspectionSoftwareItems_)
          {
            this->InspectionSoftwareItems_.set (r);
            continue;
          }
        }

        // InspectionProgram
        //
        if (n.name () == "InspectionProgram" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionProgram_type > r (
            InspectionProgram_traits::create (i, f, this));

          if (!this->InspectionProgram_)
          {
            this->InspectionProgram_.set (r);
            continue;
          }
        }

        // InspectionOperator
        //
        if (n.name () == "InspectionOperator" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionOperator_type > r (
            InspectionOperator_traits::create (i, f, this));

          if (!this->InspectionOperator_)
          {
            this->InspectionOperator_.set (r);
            continue;
          }
        }

        // ReportPreparer
        //
        if (n.name () == "ReportPreparer" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ReportPreparer_type > r (
            ReportPreparer_traits::create (i, f, this));

          if (!this->ReportPreparer_)
          {
            this->ReportPreparer_.set (r);
            continue;
          }
        }

        // ReportPreparationDate
        //
        if (n.name () == "ReportPreparationDate" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ReportPreparationDate_type > r (
            ReportPreparationDate_traits::create (i, f, this));

          if (!this->ReportPreparationDate_)
          {
            this->ReportPreparationDate_.set (r);
            continue;
          }
        }

        // ReportType
        //
        if (n.name () == "ReportType" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ReportType_type > r (
            ReportType_traits::create (i, f, this));

          if (!this->ReportType_)
          {
            this->ReportType_.set (r);
            continue;
          }
        }

        // SecurityClassification
        //
        if (n.name () == "SecurityClassification" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SecurityClassification_type > r (
            SecurityClassification_traits::create (i, f, this));

          if (!this->SecurityClassification_)
          {
            this->SecurityClassification_.set (r);
            continue;
          }
        }

        // PlantLocation
        //
        if (n.name () == "PlantLocation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PlantLocation_type > r (
            PlantLocation_traits::create (i, f, this));

          if (!this->PlantLocation_)
          {
            this->PlantLocation_.set (r);
            continue;
          }
        }

        // ReferencedQIFPlanInstance
        //
        if (n.name () == "ReferencedQIFPlanInstance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ReferencedQIFPlanInstance_type > r (
            ReferencedQIFPlanInstance_traits::create (i, f, this));

          if (!this->ReferencedQIFPlanInstance_)
          {
            this->ReferencedQIFPlanInstance_.set (r);
            continue;
          }
        }

        // ReferencedQIFPlan
        //
        if (n.name () == "ReferencedQIFPlan" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ReferencedQIFPlan_type > r (
            ReferencedQIFPlan_traits::create (i, f, this));

          if (!this->ReferencedQIFPlan_)
          {
            this->ReferencedQIFPlan_.set (r);
            continue;
          }
        }

        // Errors
        //
        if (n.name () == "Errors" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Errors_type > r (
            Errors_traits::create (i, f, this));

          if (!this->Errors_)
          {
            this->Errors_.set (r);
            continue;
          }
        }

        break;
      }
    }

    InspectionTraceabilityType* InspectionTraceabilityType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class InspectionTraceabilityType (*this, f, c);
    }

    InspectionTraceabilityType& InspectionTraceabilityType::
    operator= (const InspectionTraceabilityType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->InspectingOrganization_ = x.InspectingOrganization_;
        this->CustomerOrganization_ = x.CustomerOrganization_;
        this->SupplierCode_ = x.SupplierCode_;
        this->PurchaseOrderNumber_ = x.PurchaseOrderNumber_;
        this->OrderNumber_ = x.OrderNumber_;
        this->ReportNumber_ = x.ReportNumber_;
        this->InspectionScope_ = x.InspectionScope_;
        this->InspectionMode_ = x.InspectionMode_;
        this->PartialInspection_ = x.PartialInspection_;
        this->NotableEvents_ = x.NotableEvents_;
        this->NotedEvents_ = x.NotedEvents_;
        this->InspectionStart_ = x.InspectionStart_;
        this->InspectionEnd_ = x.InspectionEnd_;
        this->InspectionSoftwareItems_ = x.InspectionSoftwareItems_;
        this->InspectionProgram_ = x.InspectionProgram_;
        this->InspectionOperator_ = x.InspectionOperator_;
        this->ReportPreparer_ = x.ReportPreparer_;
        this->ReportPreparationDate_ = x.ReportPreparationDate_;
        this->ReportType_ = x.ReportType_;
        this->SecurityClassification_ = x.SecurityClassification_;
        this->PlantLocation_ = x.PlantLocation_;
        this->ReferencedQIFPlanInstance_ = x.ReferencedQIFPlanInstance_;
        this->ReferencedQIFPlan_ = x.ReferencedQIFPlan_;
        this->Errors_ = x.Errors_;
      }

      return *this;
    }

    InspectionTraceabilityType::
    ~InspectionTraceabilityType ()
    {
    }

    // PreInspectionTraceabilityType
    //

    const PreInspectionTraceabilityType::ReferencedQIFPlan_type PreInspectionTraceabilityType::ReferencedQIFPlan_default_value_ (
      "ThisFile");

    PreInspectionTraceabilityType::
    PreInspectionTraceabilityType (const FormalStandard_type& FormalStandard)
    : ::xml_schema::type (),
      InspectingOrganization_ (this),
      CustomerOrganization_ (this),
      SupplierCode_ (this),
      PurchaseOrderNumber_ (this),
      OrderNumber_ (this),
      AsmPathIds_ (this),
      ReportNumber_ (this),
      InspectionScope_ (this),
      InspectionMode_ (this),
      PartialInspection_ (this),
      NotableEvents_ (this),
      InspectionSoftwareItems_ (this),
      InspectionProgram_ (this),
      SecurityClassification_ (this),
      PlantLocation_ (this),
      ReferencedQIFPlanInstance_ (this),
      ReferencedQIFPlan_ (this),
      FormalStandard_ (FormalStandard, this)
    {
    }

    PreInspectionTraceabilityType::
    PreInspectionTraceabilityType (::std::auto_ptr< FormalStandard_type > FormalStandard)
    : ::xml_schema::type (),
      InspectingOrganization_ (this),
      CustomerOrganization_ (this),
      SupplierCode_ (this),
      PurchaseOrderNumber_ (this),
      OrderNumber_ (this),
      AsmPathIds_ (this),
      ReportNumber_ (this),
      InspectionScope_ (this),
      InspectionMode_ (this),
      PartialInspection_ (this),
      NotableEvents_ (this),
      InspectionSoftwareItems_ (this),
      InspectionProgram_ (this),
      SecurityClassification_ (this),
      PlantLocation_ (this),
      ReferencedQIFPlanInstance_ (this),
      ReferencedQIFPlan_ (this),
      FormalStandard_ (FormalStandard, this)
    {
    }

    PreInspectionTraceabilityType::
    PreInspectionTraceabilityType (const PreInspectionTraceabilityType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      InspectingOrganization_ (x.InspectingOrganization_, f, this),
      CustomerOrganization_ (x.CustomerOrganization_, f, this),
      SupplierCode_ (x.SupplierCode_, f, this),
      PurchaseOrderNumber_ (x.PurchaseOrderNumber_, f, this),
      OrderNumber_ (x.OrderNumber_, f, this),
      AsmPathIds_ (x.AsmPathIds_, f, this),
      ReportNumber_ (x.ReportNumber_, f, this),
      InspectionScope_ (x.InspectionScope_, f, this),
      InspectionMode_ (x.InspectionMode_, f, this),
      PartialInspection_ (x.PartialInspection_, f, this),
      NotableEvents_ (x.NotableEvents_, f, this),
      InspectionSoftwareItems_ (x.InspectionSoftwareItems_, f, this),
      InspectionProgram_ (x.InspectionProgram_, f, this),
      SecurityClassification_ (x.SecurityClassification_, f, this),
      PlantLocation_ (x.PlantLocation_, f, this),
      ReferencedQIFPlanInstance_ (x.ReferencedQIFPlanInstance_, f, this),
      ReferencedQIFPlan_ (x.ReferencedQIFPlan_, f, this),
      FormalStandard_ (x.FormalStandard_, f, this)
    {
    }

    PreInspectionTraceabilityType::
    PreInspectionTraceabilityType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      InspectingOrganization_ (this),
      CustomerOrganization_ (this),
      SupplierCode_ (this),
      PurchaseOrderNumber_ (this),
      OrderNumber_ (this),
      AsmPathIds_ (this),
      ReportNumber_ (this),
      InspectionScope_ (this),
      InspectionMode_ (this),
      PartialInspection_ (this),
      NotableEvents_ (this),
      InspectionSoftwareItems_ (this),
      InspectionProgram_ (this),
      SecurityClassification_ (this),
      PlantLocation_ (this),
      ReferencedQIFPlanInstance_ (this),
      ReferencedQIFPlan_ (this),
      FormalStandard_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void PreInspectionTraceabilityType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // InspectingOrganization
        //
        if (n.name () == "InspectingOrganization" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectingOrganization_type > r (
            InspectingOrganization_traits::create (i, f, this));

          if (!this->InspectingOrganization_)
          {
            this->InspectingOrganization_.set (r);
            continue;
          }
        }

        // CustomerOrganization
        //
        if (n.name () == "CustomerOrganization" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CustomerOrganization_type > r (
            CustomerOrganization_traits::create (i, f, this));

          if (!this->CustomerOrganization_)
          {
            this->CustomerOrganization_.set (r);
            continue;
          }
        }

        // SupplierCode
        //
        if (n.name () == "SupplierCode" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SupplierCode_type > r (
            SupplierCode_traits::create (i, f, this));

          if (!this->SupplierCode_)
          {
            this->SupplierCode_.set (r);
            continue;
          }
        }

        // PurchaseOrderNumber
        //
        if (n.name () == "PurchaseOrderNumber" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PurchaseOrderNumber_type > r (
            PurchaseOrderNumber_traits::create (i, f, this));

          if (!this->PurchaseOrderNumber_)
          {
            this->PurchaseOrderNumber_.set (r);
            continue;
          }
        }

        // OrderNumber
        //
        if (n.name () == "OrderNumber" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OrderNumber_type > r (
            OrderNumber_traits::create (i, f, this));

          if (!this->OrderNumber_)
          {
            this->OrderNumber_.set (r);
            continue;
          }
        }

        // AsmPathIds
        //
        if (n.name () == "AsmPathIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AsmPathIds_type > r (
            AsmPathIds_traits::create (i, f, this));

          if (!this->AsmPathIds_)
          {
            this->AsmPathIds_.set (r);
            continue;
          }
        }

        // ReportNumber
        //
        if (n.name () == "ReportNumber" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ReportNumber_type > r (
            ReportNumber_traits::create (i, f, this));

          if (!this->ReportNumber_)
          {
            this->ReportNumber_.set (r);
            continue;
          }
        }

        // InspectionScope
        //
        if (n.name () == "InspectionScope" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionScope_type > r (
            InspectionScope_traits::create (i, f, this));

          if (!this->InspectionScope_)
          {
            this->InspectionScope_.set (r);
            continue;
          }
        }

        // InspectionMode
        //
        if (n.name () == "InspectionMode" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionMode_type > r (
            InspectionMode_traits::create (i, f, this));

          if (!this->InspectionMode_)
          {
            this->InspectionMode_.set (r);
            continue;
          }
        }

        // PartialInspection
        //
        if (n.name () == "PartialInspection" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PartialInspection_type > r (
            PartialInspection_traits::create (i, f, this));

          if (!this->PartialInspection_)
          {
            this->PartialInspection_.set (r);
            continue;
          }
        }

        // NotableEvents
        //
        if (n.name () == "NotableEvents" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NotableEvents_type > r (
            NotableEvents_traits::create (i, f, this));

          if (!this->NotableEvents_)
          {
            this->NotableEvents_.set (r);
            continue;
          }
        }

        // InspectionSoftwareItems
        //
        if (n.name () == "InspectionSoftwareItems" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionSoftwareItems_type > r (
            InspectionSoftwareItems_traits::create (i, f, this));

          if (!this->InspectionSoftwareItems_)
          {
            this->InspectionSoftwareItems_.set (r);
            continue;
          }
        }

        // InspectionProgram
        //
        if (n.name () == "InspectionProgram" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionProgram_type > r (
            InspectionProgram_traits::create (i, f, this));

          if (!this->InspectionProgram_)
          {
            this->InspectionProgram_.set (r);
            continue;
          }
        }

        // SecurityClassification
        //
        if (n.name () == "SecurityClassification" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SecurityClassification_type > r (
            SecurityClassification_traits::create (i, f, this));

          if (!this->SecurityClassification_)
          {
            this->SecurityClassification_.set (r);
            continue;
          }
        }

        // PlantLocation
        //
        if (n.name () == "PlantLocation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PlantLocation_type > r (
            PlantLocation_traits::create (i, f, this));

          if (!this->PlantLocation_)
          {
            this->PlantLocation_.set (r);
            continue;
          }
        }

        // ReferencedQIFPlanInstance
        //
        if (n.name () == "ReferencedQIFPlanInstance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ReferencedQIFPlanInstance_type > r (
            ReferencedQIFPlanInstance_traits::create (i, f, this));

          if (!this->ReferencedQIFPlanInstance_)
          {
            this->ReferencedQIFPlanInstance_.set (r);
            continue;
          }
        }

        // ReferencedQIFPlan
        //
        if (n.name () == "ReferencedQIFPlan" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ReferencedQIFPlan_type > r (
            ReferencedQIFPlan_traits::create (i, f, this));

          if (!this->ReferencedQIFPlan_)
          {
            this->ReferencedQIFPlan_.set (r);
            continue;
          }
        }

        // FormalStandard
        //
        if (n.name () == "FormalStandard" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FormalStandard_type > r (
            FormalStandard_traits::create (i, f, this));

          if (!FormalStandard_.present ())
          {
            this->FormalStandard_.set (r);
            continue;
          }
        }

        break;
      }

      if (!FormalStandard_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "FormalStandard",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    PreInspectionTraceabilityType* PreInspectionTraceabilityType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PreInspectionTraceabilityType (*this, f, c);
    }

    PreInspectionTraceabilityType& PreInspectionTraceabilityType::
    operator= (const PreInspectionTraceabilityType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->InspectingOrganization_ = x.InspectingOrganization_;
        this->CustomerOrganization_ = x.CustomerOrganization_;
        this->SupplierCode_ = x.SupplierCode_;
        this->PurchaseOrderNumber_ = x.PurchaseOrderNumber_;
        this->OrderNumber_ = x.OrderNumber_;
        this->AsmPathIds_ = x.AsmPathIds_;
        this->ReportNumber_ = x.ReportNumber_;
        this->InspectionScope_ = x.InspectionScope_;
        this->InspectionMode_ = x.InspectionMode_;
        this->PartialInspection_ = x.PartialInspection_;
        this->NotableEvents_ = x.NotableEvents_;
        this->InspectionSoftwareItems_ = x.InspectionSoftwareItems_;
        this->InspectionProgram_ = x.InspectionProgram_;
        this->SecurityClassification_ = x.SecurityClassification_;
        this->PlantLocation_ = x.PlantLocation_;
        this->ReferencedQIFPlanInstance_ = x.ReferencedQIFPlanInstance_;
        this->ReferencedQIFPlan_ = x.ReferencedQIFPlan_;
        this->FormalStandard_ = x.FormalStandard_;
      }

      return *this;
    }

    PreInspectionTraceabilityType::
    ~PreInspectionTraceabilityType ()
    {
    }

    // ProductTraceabilityType
    //

    ProductTraceabilityType::
    ProductTraceabilityType ()
    : ::xml_schema::type (),
      ReportNumber_ (this),
      ManufacturingProcessId_ (this),
      FixtureId_ (this),
      NotableEventIds_ (this),
      InspectionSoftwareItems_ (this),
      InspectionProgram_ (this),
      MeasurementDeviceIds_ (this)
    {
    }

    ProductTraceabilityType::
    ProductTraceabilityType (const ProductTraceabilityType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ReportNumber_ (x.ReportNumber_, f, this),
      ManufacturingProcessId_ (x.ManufacturingProcessId_, f, this),
      FixtureId_ (x.FixtureId_, f, this),
      NotableEventIds_ (x.NotableEventIds_, f, this),
      InspectionSoftwareItems_ (x.InspectionSoftwareItems_, f, this),
      InspectionProgram_ (x.InspectionProgram_, f, this),
      MeasurementDeviceIds_ (x.MeasurementDeviceIds_, f, this)
    {
    }

    ProductTraceabilityType::
    ProductTraceabilityType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ReportNumber_ (this),
      ManufacturingProcessId_ (this),
      FixtureId_ (this),
      NotableEventIds_ (this),
      InspectionSoftwareItems_ (this),
      InspectionProgram_ (this),
      MeasurementDeviceIds_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ProductTraceabilityType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ReportNumber
        //
        if (n.name () == "ReportNumber" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ReportNumber_type > r (
            ReportNumber_traits::create (i, f, this));

          if (!this->ReportNumber_)
          {
            this->ReportNumber_.set (r);
            continue;
          }
        }

        // ManufacturingProcessId
        //
        if (n.name () == "ManufacturingProcessId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ManufacturingProcessId_type > r (
            ManufacturingProcessId_traits::create (i, f, this));

          if (!this->ManufacturingProcessId_)
          {
            this->ManufacturingProcessId_.set (r);
            continue;
          }
        }

        // FixtureId
        //
        if (n.name () == "FixtureId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FixtureId_type > r (
            FixtureId_traits::create (i, f, this));

          if (!this->FixtureId_)
          {
            this->FixtureId_.set (r);
            continue;
          }
        }

        // NotableEventIds
        //
        if (n.name () == "NotableEventIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NotableEventIds_type > r (
            NotableEventIds_traits::create (i, f, this));

          if (!this->NotableEventIds_)
          {
            this->NotableEventIds_.set (r);
            continue;
          }
        }

        // InspectionSoftwareItems
        //
        if (n.name () == "InspectionSoftwareItems" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionSoftwareItems_type > r (
            InspectionSoftwareItems_traits::create (i, f, this));

          if (!this->InspectionSoftwareItems_)
          {
            this->InspectionSoftwareItems_.set (r);
            continue;
          }
        }

        // InspectionProgram
        //
        if (n.name () == "InspectionProgram" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionProgram_type > r (
            InspectionProgram_traits::create (i, f, this));

          if (!this->InspectionProgram_)
          {
            this->InspectionProgram_.set (r);
            continue;
          }
        }

        // MeasurementDeviceIds
        //
        if (n.name () == "MeasurementDeviceIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurementDeviceIds_type > r (
            MeasurementDeviceIds_traits::create (i, f, this));

          if (!this->MeasurementDeviceIds_)
          {
            this->MeasurementDeviceIds_.set (r);
            continue;
          }
        }

        break;
      }
    }

    ProductTraceabilityType* ProductTraceabilityType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ProductTraceabilityType (*this, f, c);
    }

    ProductTraceabilityType& ProductTraceabilityType::
    operator= (const ProductTraceabilityType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->ReportNumber_ = x.ReportNumber_;
        this->ManufacturingProcessId_ = x.ManufacturingProcessId_;
        this->FixtureId_ = x.FixtureId_;
        this->NotableEventIds_ = x.NotableEventIds_;
        this->InspectionSoftwareItems_ = x.InspectionSoftwareItems_;
        this->InspectionProgram_ = x.InspectionProgram_;
        this->MeasurementDeviceIds_ = x.MeasurementDeviceIds_;
      }

      return *this;
    }

    ProductTraceabilityType::
    ~ProductTraceabilityType ()
    {
    }

    // ActualProductTraceabilityType
    //

    ActualProductTraceabilityType::
    ActualProductTraceabilityType ()
    : ::xml_schema::type (),
      SampleNumber_ (this),
      LotNumber_ (this),
      ReportNumber_ (this),
      ManufacturingProcessId_ (this),
      FixtureId_ (this),
      NotableEventIds_ (this),
      NotedEventIds_ (this),
      InspectionStart_ (this),
      InspectionEnd_ (this),
      InspectionSoftwareItems_ (this),
      InspectionProgram_ (this),
      InspectionOperator_ (this),
      MeasurementDeviceIds_ (this),
      ProductEnvironments_ (this),
      Errors_ (this)
    {
    }

    ActualProductTraceabilityType::
    ActualProductTraceabilityType (const ActualProductTraceabilityType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      SampleNumber_ (x.SampleNumber_, f, this),
      LotNumber_ (x.LotNumber_, f, this),
      ReportNumber_ (x.ReportNumber_, f, this),
      ManufacturingProcessId_ (x.ManufacturingProcessId_, f, this),
      FixtureId_ (x.FixtureId_, f, this),
      NotableEventIds_ (x.NotableEventIds_, f, this),
      NotedEventIds_ (x.NotedEventIds_, f, this),
      InspectionStart_ (x.InspectionStart_, f, this),
      InspectionEnd_ (x.InspectionEnd_, f, this),
      InspectionSoftwareItems_ (x.InspectionSoftwareItems_, f, this),
      InspectionProgram_ (x.InspectionProgram_, f, this),
      InspectionOperator_ (x.InspectionOperator_, f, this),
      MeasurementDeviceIds_ (x.MeasurementDeviceIds_, f, this),
      ProductEnvironments_ (x.ProductEnvironments_, f, this),
      Errors_ (x.Errors_, f, this)
    {
    }

    ActualProductTraceabilityType::
    ActualProductTraceabilityType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      SampleNumber_ (this),
      LotNumber_ (this),
      ReportNumber_ (this),
      ManufacturingProcessId_ (this),
      FixtureId_ (this),
      NotableEventIds_ (this),
      NotedEventIds_ (this),
      InspectionStart_ (this),
      InspectionEnd_ (this),
      InspectionSoftwareItems_ (this),
      InspectionProgram_ (this),
      InspectionOperator_ (this),
      MeasurementDeviceIds_ (this),
      ProductEnvironments_ (this),
      Errors_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ActualProductTraceabilityType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SampleNumber
        //
        if (n.name () == "SampleNumber" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SampleNumber_type > r (
            SampleNumber_traits::create (i, f, this));

          if (!this->SampleNumber_)
          {
            this->SampleNumber_.set (r);
            continue;
          }
        }

        // LotNumber
        //
        if (n.name () == "LotNumber" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< LotNumber_type > r (
            LotNumber_traits::create (i, f, this));

          if (!this->LotNumber_)
          {
            this->LotNumber_.set (r);
            continue;
          }
        }

        // ReportNumber
        //
        if (n.name () == "ReportNumber" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ReportNumber_type > r (
            ReportNumber_traits::create (i, f, this));

          if (!this->ReportNumber_)
          {
            this->ReportNumber_.set (r);
            continue;
          }
        }

        // ManufacturingProcessId
        //
        if (n.name () == "ManufacturingProcessId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ManufacturingProcessId_type > r (
            ManufacturingProcessId_traits::create (i, f, this));

          if (!this->ManufacturingProcessId_)
          {
            this->ManufacturingProcessId_.set (r);
            continue;
          }
        }

        // FixtureId
        //
        if (n.name () == "FixtureId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FixtureId_type > r (
            FixtureId_traits::create (i, f, this));

          if (!this->FixtureId_)
          {
            this->FixtureId_.set (r);
            continue;
          }
        }

        // NotableEventIds
        //
        if (n.name () == "NotableEventIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NotableEventIds_type > r (
            NotableEventIds_traits::create (i, f, this));

          if (!this->NotableEventIds_)
          {
            this->NotableEventIds_.set (r);
            continue;
          }
        }

        // NotedEventIds
        //
        if (n.name () == "NotedEventIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NotedEventIds_type > r (
            NotedEventIds_traits::create (i, f, this));

          if (!this->NotedEventIds_)
          {
            this->NotedEventIds_.set (r);
            continue;
          }
        }

        // InspectionStart
        //
        if (n.name () == "InspectionStart" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionStart_type > r (
            InspectionStart_traits::create (i, f, this));

          if (!this->InspectionStart_)
          {
            this->InspectionStart_.set (r);
            continue;
          }
        }

        // InspectionEnd
        //
        if (n.name () == "InspectionEnd" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionEnd_type > r (
            InspectionEnd_traits::create (i, f, this));

          if (!this->InspectionEnd_)
          {
            this->InspectionEnd_.set (r);
            continue;
          }
        }

        // InspectionSoftwareItems
        //
        if (n.name () == "InspectionSoftwareItems" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionSoftwareItems_type > r (
            InspectionSoftwareItems_traits::create (i, f, this));

          if (!this->InspectionSoftwareItems_)
          {
            this->InspectionSoftwareItems_.set (r);
            continue;
          }
        }

        // InspectionProgram
        //
        if (n.name () == "InspectionProgram" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionProgram_type > r (
            InspectionProgram_traits::create (i, f, this));

          if (!this->InspectionProgram_)
          {
            this->InspectionProgram_.set (r);
            continue;
          }
        }

        // InspectionOperator
        //
        if (n.name () == "InspectionOperator" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionOperator_type > r (
            InspectionOperator_traits::create (i, f, this));

          if (!this->InspectionOperator_)
          {
            this->InspectionOperator_.set (r);
            continue;
          }
        }

        // MeasurementDeviceIds
        //
        if (n.name () == "MeasurementDeviceIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurementDeviceIds_type > r (
            MeasurementDeviceIds_traits::create (i, f, this));

          if (!this->MeasurementDeviceIds_)
          {
            this->MeasurementDeviceIds_.set (r);
            continue;
          }
        }

        // ProductEnvironments
        //
        if (n.name () == "ProductEnvironments" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ProductEnvironments_type > r (
            ProductEnvironments_traits::create (i, f, this));

          if (!this->ProductEnvironments_)
          {
            this->ProductEnvironments_.set (r);
            continue;
          }
        }

        // Errors
        //
        if (n.name () == "Errors" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Errors_type > r (
            Errors_traits::create (i, f, this));

          if (!this->Errors_)
          {
            this->Errors_.set (r);
            continue;
          }
        }

        break;
      }
    }

    ActualProductTraceabilityType* ActualProductTraceabilityType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ActualProductTraceabilityType (*this, f, c);
    }

    ActualProductTraceabilityType& ActualProductTraceabilityType::
    operator= (const ActualProductTraceabilityType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->SampleNumber_ = x.SampleNumber_;
        this->LotNumber_ = x.LotNumber_;
        this->ReportNumber_ = x.ReportNumber_;
        this->ManufacturingProcessId_ = x.ManufacturingProcessId_;
        this->FixtureId_ = x.FixtureId_;
        this->NotableEventIds_ = x.NotableEventIds_;
        this->NotedEventIds_ = x.NotedEventIds_;
        this->InspectionStart_ = x.InspectionStart_;
        this->InspectionEnd_ = x.InspectionEnd_;
        this->InspectionSoftwareItems_ = x.InspectionSoftwareItems_;
        this->InspectionProgram_ = x.InspectionProgram_;
        this->InspectionOperator_ = x.InspectionOperator_;
        this->MeasurementDeviceIds_ = x.MeasurementDeviceIds_;
        this->ProductEnvironments_ = x.ProductEnvironments_;
        this->Errors_ = x.Errors_;
      }

      return *this;
    }

    ActualProductTraceabilityType::
    ~ActualProductTraceabilityType ()
    {
    }

    // ProcessParameterType
    //

    ProcessParameterType::
    ProcessParameterType (const ParameterType_type& ParameterType,
                          const ParameterValue_type& ParameterValue)
    : ::xml_schema::type (),
      ParameterType_ (ParameterType, this),
      ParameterValue_ (ParameterValue, this)
    {
    }

    ProcessParameterType::
    ProcessParameterType (const ProcessParameterType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ParameterType_ (x.ParameterType_, f, this),
      ParameterValue_ (x.ParameterValue_, f, this)
    {
    }

    ProcessParameterType::
    ProcessParameterType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ParameterType_ (this),
      ParameterValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ProcessParameterType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ParameterType
        //
        if (n.name () == "ParameterType" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ParameterType_type > r (
            ParameterType_traits::create (i, f, this));

          if (!ParameterType_.present ())
          {
            this->ParameterType_.set (r);
            continue;
          }
        }

        // ParameterValue
        //
        if (n.name () == "ParameterValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ParameterValue_type > r (
            ParameterValue_traits::create (i, f, this));

          if (!ParameterValue_.present ())
          {
            this->ParameterValue_.set (r);
            continue;
          }
        }

        break;
      }

      if (!ParameterType_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ParameterType",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!ParameterValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ParameterValue",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ProcessParameterType* ProcessParameterType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ProcessParameterType (*this, f, c);
    }

    ProcessParameterType& ProcessParameterType::
    operator= (const ProcessParameterType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->ParameterType_ = x.ParameterType_;
        this->ParameterValue_ = x.ParameterValue_;
      }

      return *this;
    }

    ProcessParameterType::
    ~ProcessParameterType ()
    {
    }

    // ManufacturingProcessTraceabilityType
    //

    ManufacturingProcessTraceabilityType::
    ManufacturingProcessTraceabilityType (const id_type& id)
    : ::xml_schema::type (),
      Attributes_ (this),
      Description_ (this),
      Job_ (this),
      Revision_ (this),
      PreviousOperationId_ (this),
      Path_ (this),
      MachineManufacturerName_ (this),
      MachineIdentifier_ (this),
      OperatorIdentifier_ (this),
      Shift_ (this),
      Department_ (this),
      ResponsibilityIdentifier_ (this),
      PlantSector_ (this),
      ProcessParameter_ (this),
      AssociatedTraceabilityId_ (this),
      id_ (id, this)
    {
    }

    ManufacturingProcessTraceabilityType::
    ManufacturingProcessTraceabilityType (const ManufacturingProcessTraceabilityType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Attributes_ (x.Attributes_, f, this),
      Description_ (x.Description_, f, this),
      Job_ (x.Job_, f, this),
      Revision_ (x.Revision_, f, this),
      PreviousOperationId_ (x.PreviousOperationId_, f, this),
      Path_ (x.Path_, f, this),
      MachineManufacturerName_ (x.MachineManufacturerName_, f, this),
      MachineIdentifier_ (x.MachineIdentifier_, f, this),
      OperatorIdentifier_ (x.OperatorIdentifier_, f, this),
      Shift_ (x.Shift_, f, this),
      Department_ (x.Department_, f, this),
      ResponsibilityIdentifier_ (x.ResponsibilityIdentifier_, f, this),
      PlantSector_ (x.PlantSector_, f, this),
      ProcessParameter_ (x.ProcessParameter_, f, this),
      AssociatedTraceabilityId_ (x.AssociatedTraceabilityId_, f, this),
      id_ (x.id_, f, this)
    {
    }

    ManufacturingProcessTraceabilityType::
    ManufacturingProcessTraceabilityType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Attributes_ (this),
      Description_ (this),
      Job_ (this),
      Revision_ (this),
      PreviousOperationId_ (this),
      Path_ (this),
      MachineManufacturerName_ (this),
      MachineIdentifier_ (this),
      OperatorIdentifier_ (this),
      Shift_ (this),
      Department_ (this),
      ResponsibilityIdentifier_ (this),
      PlantSector_ (this),
      ProcessParameter_ (this),
      AssociatedTraceabilityId_ (this),
      id_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ManufacturingProcessTraceabilityType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Attributes
        //
        if (n.name () == "Attributes" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (r);
            continue;
          }
        }

        // Description
        //
        if (n.name () == "Description" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Description_type > r (
            Description_traits::create (i, f, this));

          if (!this->Description_)
          {
            this->Description_.set (r);
            continue;
          }
        }

        // Job
        //
        if (n.name () == "Job" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Job_type > r (
            Job_traits::create (i, f, this));

          if (!this->Job_)
          {
            this->Job_.set (r);
            continue;
          }
        }

        // Revision
        //
        if (n.name () == "Revision" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Revision_type > r (
            Revision_traits::create (i, f, this));

          if (!this->Revision_)
          {
            this->Revision_.set (r);
            continue;
          }
        }

        // PreviousOperationId
        //
        if (n.name () == "PreviousOperationId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PreviousOperationId_type > r (
            PreviousOperationId_traits::create (i, f, this));

          if (!this->PreviousOperationId_)
          {
            this->PreviousOperationId_.set (r);
            continue;
          }
        }

        // Path
        //
        if (n.name () == "Path" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Path_type > r (
            Path_traits::create (i, f, this));

          if (!this->Path_)
          {
            this->Path_.set (r);
            continue;
          }
        }

        // MachineManufacturerName
        //
        if (n.name () == "MachineManufacturerName" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MachineManufacturerName_type > r (
            MachineManufacturerName_traits::create (i, f, this));

          if (!this->MachineManufacturerName_)
          {
            this->MachineManufacturerName_.set (r);
            continue;
          }
        }

        // MachineIdentifier
        //
        if (n.name () == "MachineIdentifier" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MachineIdentifier_type > r (
            MachineIdentifier_traits::create (i, f, this));

          if (!this->MachineIdentifier_)
          {
            this->MachineIdentifier_.set (r);
            continue;
          }
        }

        // OperatorIdentifier
        //
        if (n.name () == "OperatorIdentifier" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OperatorIdentifier_type > r (
            OperatorIdentifier_traits::create (i, f, this));

          if (!this->OperatorIdentifier_)
          {
            this->OperatorIdentifier_.set (r);
            continue;
          }
        }

        // Shift
        //
        if (n.name () == "Shift" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Shift_type > r (
            Shift_traits::create (i, f, this));

          if (!this->Shift_)
          {
            this->Shift_.set (r);
            continue;
          }
        }

        // Department
        //
        if (n.name () == "Department" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Department_type > r (
            Department_traits::create (i, f, this));

          if (!this->Department_)
          {
            this->Department_.set (r);
            continue;
          }
        }

        // ResponsibilityIdentifier
        //
        if (n.name () == "ResponsibilityIdentifier" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ResponsibilityIdentifier_type > r (
            ResponsibilityIdentifier_traits::create (i, f, this));

          if (!this->ResponsibilityIdentifier_)
          {
            this->ResponsibilityIdentifier_.set (r);
            continue;
          }
        }

        // PlantSector
        //
        if (n.name () == "PlantSector" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PlantSector_type > r (
            PlantSector_traits::create (i, f, this));

          if (!this->PlantSector_)
          {
            this->PlantSector_.set (r);
            continue;
          }
        }

        // ProcessParameter
        //
        if (n.name () == "ProcessParameter" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ProcessParameter_type > r (
            ProcessParameter_traits::create (i, f, this));

          this->ProcessParameter_.push_back (r);
          continue;
        }

        // AssociatedTraceabilityId
        //
        if (n.name () == "AssociatedTraceabilityId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AssociatedTraceabilityId_type > r (
            AssociatedTraceabilityId_traits::create (i, f, this));

          if (!this->AssociatedTraceabilityId_)
          {
            this->AssociatedTraceabilityId_.set (r);
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          this->id_.set (id_traits::create (i, f, this));
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "id",
          "");
      }
    }

    ManufacturingProcessTraceabilityType* ManufacturingProcessTraceabilityType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ManufacturingProcessTraceabilityType (*this, f, c);
    }

    ManufacturingProcessTraceabilityType& ManufacturingProcessTraceabilityType::
    operator= (const ManufacturingProcessTraceabilityType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Attributes_ = x.Attributes_;
        this->Description_ = x.Description_;
        this->Job_ = x.Job_;
        this->Revision_ = x.Revision_;
        this->PreviousOperationId_ = x.PreviousOperationId_;
        this->Path_ = x.Path_;
        this->MachineManufacturerName_ = x.MachineManufacturerName_;
        this->MachineIdentifier_ = x.MachineIdentifier_;
        this->OperatorIdentifier_ = x.OperatorIdentifier_;
        this->Shift_ = x.Shift_;
        this->Department_ = x.Department_;
        this->ResponsibilityIdentifier_ = x.ResponsibilityIdentifier_;
        this->PlantSector_ = x.PlantSector_;
        this->ProcessParameter_ = x.ProcessParameter_;
        this->AssociatedTraceabilityId_ = x.AssociatedTraceabilityId_;
        this->id_ = x.id_;
      }

      return *this;
    }

    ManufacturingProcessTraceabilityType::
    ~ManufacturingProcessTraceabilityType ()
    {
    }

    // ManufacturingProcessTraceabilitiesType
    //

    ManufacturingProcessTraceabilitiesType::
    ManufacturingProcessTraceabilitiesType ()
    : ::xml_schema::type (),
      ManufacturingProcessTraceability_ (this)
    {
    }

    ManufacturingProcessTraceabilitiesType::
    ManufacturingProcessTraceabilitiesType (const ManufacturingProcessTraceabilitiesType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ManufacturingProcessTraceability_ (x.ManufacturingProcessTraceability_, f, this)
    {
    }

    ManufacturingProcessTraceabilitiesType::
    ManufacturingProcessTraceabilitiesType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ManufacturingProcessTraceability_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ManufacturingProcessTraceabilitiesType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ManufacturingProcessTraceability
        //
        if (n.name () == "ManufacturingProcessTraceability" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ManufacturingProcessTraceability_type > r (
            ManufacturingProcessTraceability_traits::create (i, f, this));

          this->ManufacturingProcessTraceability_.push_back (r);
          continue;
        }

        break;
      }
    }

    ManufacturingProcessTraceabilitiesType* ManufacturingProcessTraceabilitiesType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ManufacturingProcessTraceabilitiesType (*this, f, c);
    }

    ManufacturingProcessTraceabilitiesType& ManufacturingProcessTraceabilitiesType::
    operator= (const ManufacturingProcessTraceabilitiesType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->ManufacturingProcessTraceability_ = x.ManufacturingProcessTraceability_;
      }

      return *this;
    }

    ManufacturingProcessTraceabilitiesType::
    ~ManufacturingProcessTraceabilitiesType ()
    {
    }

    // ErrorsType
    //

    ErrorsType::
    ErrorsType ()
    : ::xml_schema::type (),
      Error_ (this)
    {
    }

    ErrorsType::
    ErrorsType (const ErrorsType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Error_ (x.Error_, f, this)
    {
    }

    ErrorsType::
    ErrorsType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Error_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ErrorsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Error
        //
        if (n.name () == "Error" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Error_type > r (
            Error_traits::create (i, f, this));

          this->Error_.push_back (r);
          continue;
        }

        break;
      }
    }

    ErrorsType* ErrorsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ErrorsType (*this, f, c);
    }

    ErrorsType& ErrorsType::
    operator= (const ErrorsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Error_ = x.Error_;
      }

      return *this;
    }

    ErrorsType::
    ~ErrorsType ()
    {
    }

    // PartialInspectionType
    //

    PartialInspectionType::
    PartialInspectionType (const BaselineProductNumber_type& BaselineProductNumber,
                           const ReasonForPartialInspection_type& ReasonForPartialInspection)
    : ::xml_schema::type (),
      BaselineProductNumber_ (BaselineProductNumber, this),
      BaselineProductVersion_ (this),
      ReasonForPartialInspection_ (ReasonForPartialInspection, this)
    {
    }

    PartialInspectionType::
    PartialInspectionType (const PartialInspectionType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      BaselineProductNumber_ (x.BaselineProductNumber_, f, this),
      BaselineProductVersion_ (x.BaselineProductVersion_, f, this),
      ReasonForPartialInspection_ (x.ReasonForPartialInspection_, f, this)
    {
    }

    PartialInspectionType::
    PartialInspectionType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      BaselineProductNumber_ (this),
      BaselineProductVersion_ (this),
      ReasonForPartialInspection_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void PartialInspectionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // BaselineProductNumber
        //
        if (n.name () == "BaselineProductNumber" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< BaselineProductNumber_type > r (
            BaselineProductNumber_traits::create (i, f, this));

          if (!BaselineProductNumber_.present ())
          {
            this->BaselineProductNumber_.set (r);
            continue;
          }
        }

        // BaselineProductVersion
        //
        if (n.name () == "BaselineProductVersion" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< BaselineProductVersion_type > r (
            BaselineProductVersion_traits::create (i, f, this));

          if (!this->BaselineProductVersion_)
          {
            this->BaselineProductVersion_.set (r);
            continue;
          }
        }

        // ReasonForPartialInspection
        //
        if (n.name () == "ReasonForPartialInspection" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ReasonForPartialInspection_type > r (
            ReasonForPartialInspection_traits::create (i, f, this));

          if (!ReasonForPartialInspection_.present ())
          {
            this->ReasonForPartialInspection_.set (r);
            continue;
          }
        }

        break;
      }

      if (!BaselineProductNumber_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "BaselineProductNumber",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!ReasonForPartialInspection_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ReasonForPartialInspection",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    PartialInspectionType* PartialInspectionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PartialInspectionType (*this, f, c);
    }

    PartialInspectionType& PartialInspectionType::
    operator= (const PartialInspectionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->BaselineProductNumber_ = x.BaselineProductNumber_;
        this->BaselineProductVersion_ = x.BaselineProductVersion_;
        this->ReasonForPartialInspection_ = x.ReasonForPartialInspection_;
      }

      return *this;
    }

    PartialInspectionType::
    ~PartialInspectionType ()
    {
    }

    // TimeDescriptionEnumType
    //

    TimeDescriptionEnumType::
    TimeDescriptionEnumType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_TimeDescriptionEnumType_convert ();
    }

    TimeDescriptionEnumType::
    TimeDescriptionEnumType (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_TimeDescriptionEnumType_convert ();
    }

    TimeDescriptionEnumType::
    TimeDescriptionEnumType (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_TimeDescriptionEnumType_convert ();
    }

    TimeDescriptionEnumType* TimeDescriptionEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TimeDescriptionEnumType (*this, f, c);
    }

    TimeDescriptionEnumType::value TimeDescriptionEnumType::
    _xsd_TimeDescriptionEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_TimeDescriptionEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_TimeDescriptionEnumType_indexes_,
                        _xsd_TimeDescriptionEnumType_indexes_ + 3,
                        *this,
                        c));

      if (i == _xsd_TimeDescriptionEnumType_indexes_ + 3 || _xsd_TimeDescriptionEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const TimeDescriptionEnumType::
    _xsd_TimeDescriptionEnumType_literals_[3] =
    {
      "INSPECTION_START",
      "INSPECTION_END",
      "INTERMEDIATE"
    };

    const TimeDescriptionEnumType::value TimeDescriptionEnumType::
    _xsd_TimeDescriptionEnumType_indexes_[3] =
    {
      ::xsd::qif2::TimeDescriptionEnumType::INSPECTION_END,
      ::xsd::qif2::TimeDescriptionEnumType::INSPECTION_START,
      ::xsd::qif2::TimeDescriptionEnumType::INTERMEDIATE
    };

    // TimeDescriptionType
    //

    TimeDescriptionType::
    TimeDescriptionType ()
    : ::xml_schema::type (),
      TimeDescriptionEnum_ (this),
      OtherTimeDescription_ (this)
    {
    }

    TimeDescriptionType::
    TimeDescriptionType (const TimeDescriptionType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      TimeDescriptionEnum_ (x.TimeDescriptionEnum_, f, this),
      OtherTimeDescription_ (x.OtherTimeDescription_, f, this)
    {
    }

    TimeDescriptionType::
    TimeDescriptionType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      TimeDescriptionEnum_ (this),
      OtherTimeDescription_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void TimeDescriptionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // TimeDescriptionEnum
        //
        if (n.name () == "TimeDescriptionEnum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TimeDescriptionEnum_type > r (
            TimeDescriptionEnum_traits::create (i, f, this));

          if (!this->TimeDescriptionEnum_)
          {
            this->TimeDescriptionEnum_.set (r);
            continue;
          }
        }

        // OtherTimeDescription
        //
        if (n.name () == "OtherTimeDescription" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OtherTimeDescription_type > r (
            OtherTimeDescription_traits::create (i, f, this));

          if (!this->OtherTimeDescription_)
          {
            this->OtherTimeDescription_.set (r);
            continue;
          }
        }

        break;
      }
    }

    TimeDescriptionType* TimeDescriptionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TimeDescriptionType (*this, f, c);
    }

    TimeDescriptionType& TimeDescriptionType::
    operator= (const TimeDescriptionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->TimeDescriptionEnum_ = x.TimeDescriptionEnum_;
        this->OtherTimeDescription_ = x.OtherTimeDescription_;
      }

      return *this;
    }

    TimeDescriptionType::
    ~TimeDescriptionType ()
    {
    }

    // InspectionModeEnumType
    //

    InspectionModeEnumType::
    InspectionModeEnumType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_InspectionModeEnumType_convert ();
    }

    InspectionModeEnumType::
    InspectionModeEnumType (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_InspectionModeEnumType_convert ();
    }

    InspectionModeEnumType::
    InspectionModeEnumType (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_InspectionModeEnumType_convert ();
    }

    InspectionModeEnumType* InspectionModeEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class InspectionModeEnumType (*this, f, c);
    }

    InspectionModeEnumType::value InspectionModeEnumType::
    _xsd_InspectionModeEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_InspectionModeEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_InspectionModeEnumType_indexes_,
                        _xsd_InspectionModeEnumType_indexes_ + 6,
                        *this,
                        c));

      if (i == _xsd_InspectionModeEnumType_indexes_ + 6 || _xsd_InspectionModeEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const InspectionModeEnumType::
    _xsd_InspectionModeEnumType_literals_[6] =
    {
      "FAI_Full",
      "FAI_Partial",
      "100Percent",
      "APQP",
      "KPC",
      "PPAP"
    };

    const InspectionModeEnumType::value InspectionModeEnumType::
    _xsd_InspectionModeEnumType_indexes_[6] =
    {
      ::xsd::qif2::InspectionModeEnumType::cxx_100Percent,
      ::xsd::qif2::InspectionModeEnumType::APQP,
      ::xsd::qif2::InspectionModeEnumType::FAI_Full,
      ::xsd::qif2::InspectionModeEnumType::FAI_Partial,
      ::xsd::qif2::InspectionModeEnumType::KPC,
      ::xsd::qif2::InspectionModeEnumType::PPAP
    };

    // InspectionScopeEnumType
    //

    InspectionScopeEnumType::
    InspectionScopeEnumType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_InspectionScopeEnumType_convert ();
    }

    InspectionScopeEnumType::
    InspectionScopeEnumType (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_InspectionScopeEnumType_convert ();
    }

    InspectionScopeEnumType::
    InspectionScopeEnumType (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_InspectionScopeEnumType_convert ();
    }

    InspectionScopeEnumType* InspectionScopeEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class InspectionScopeEnumType (*this, f, c);
    }

    InspectionScopeEnumType::value InspectionScopeEnumType::
    _xsd_InspectionScopeEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_InspectionScopeEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_InspectionScopeEnumType_indexes_,
                        _xsd_InspectionScopeEnumType_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_InspectionScopeEnumType_indexes_ + 2 || _xsd_InspectionScopeEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const InspectionScopeEnumType::
    _xsd_InspectionScopeEnumType_literals_[2] =
    {
      "DETAIL",
      "ASSEMBLY"
    };

    const InspectionScopeEnumType::value InspectionScopeEnumType::
    _xsd_InspectionScopeEnumType_indexes_[2] =
    {
      ::xsd::qif2::InspectionScopeEnumType::ASSEMBLY,
      ::xsd::qif2::InspectionScopeEnumType::DETAIL
    };
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xsd
{
  namespace qif2
  {
    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (const ::std::string& u,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType > (
        ::xsd::qif2::ManufacturingProcessTraceabilities (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (const ::std::string& u,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType > (
        ::xsd::qif2::ManufacturingProcessTraceabilities (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (const ::std::string& u,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType > (
        ::xsd::qif2::ManufacturingProcessTraceabilities (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (::std::istream& is,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ManufacturingProcessTraceabilities (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (::std::istream& is,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ManufacturingProcessTraceabilities (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ManufacturingProcessTraceabilities (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ManufacturingProcessTraceabilities (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ManufacturingProcessTraceabilities (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ManufacturingProcessTraceabilities (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (::xercesc::InputSource& i,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType > (
        ::xsd::qif2::ManufacturingProcessTraceabilities (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (::xercesc::InputSource& i,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType > (
        ::xsd::qif2::ManufacturingProcessTraceabilities (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (::xercesc::InputSource& i,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType > (
        ::xsd::qif2::ManufacturingProcessTraceabilities (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (const ::xercesc::DOMDocument& doc,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType > (
          ::xsd::qif2::ManufacturingProcessTraceabilities (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ManufacturingProcessTraceabilities" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ManufacturingProcessTraceabilitiesType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ManufacturingProcessTraceabilities",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType >
    ManufacturingProcessTraceabilities (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ManufacturingProcessTraceabilities" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ManufacturingProcessTraceabilitiesType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ManufacturingProcessTraceabilitiesType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ManufacturingProcessTraceabilities",
        "http://qifstandards.org/xsd/qif2");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace xsd
{
  namespace qif2
  {
    void
    operator<< (::xercesc::DOMElement& e, const InspectionProgramType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // File
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "File",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.File ();
      }

      // Description
      //
      if (i.Description ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Description",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Description ();
      }

      // FormalStandard
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "FormalStandard",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.FormalStandard ();
      }

      // Author
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Author",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.Author ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const InspectionSoftwareItemsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // InspectionProgramGenerationSoftware
      //
      for (InspectionSoftwareItemsType::InspectionProgramGenerationSoftware_const_iterator
           b (i.InspectionProgramGenerationSoftware ().begin ()), n (i.InspectionProgramGenerationSoftware ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionProgramGenerationSoftware",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // InspectionProgramExecutionSoftware
      //
      for (InspectionSoftwareItemsType::InspectionProgramExecutionSoftware_const_iterator
           b (i.InspectionProgramExecutionSoftware ().begin ()), n (i.InspectionProgramExecutionSoftware ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionProgramExecutionSoftware",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // AnalysisSoftware
      //
      for (InspectionSoftwareItemsType::AnalysisSoftware_const_iterator
           b (i.AnalysisSoftware ().begin ()), n (i.AnalysisSoftware ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AnalysisSoftware",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // CADSoftware
      //
      for (InspectionSoftwareItemsType::CADSoftware_const_iterator
           b (i.CADSoftware ().begin ()), n (i.CADSoftware ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "CADSoftware",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // DMESoftware
      //
      for (InspectionSoftwareItemsType::DMESoftware_const_iterator
           b (i.DMESoftware ().begin ()), n (i.DMESoftware ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "DMESoftware",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const EnvironmentType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Attributes
      //
      if (i.Attributes ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Attributes",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Attributes ();
      }

      // ObjectTemperature
      //
      if (i.ObjectTemperature ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ObjectTemperature",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ObjectTemperature ();
      }

      // AmbientTemperature
      //
      if (i.AmbientTemperature ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AmbientTemperature",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.AmbientTemperature ();
      }

      // RelativeHumidity
      //
      if (i.RelativeHumidity ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "RelativeHumidity",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.RelativeHumidity ();
      }

      // DateAndTime
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "DateAndTime",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.DateAndTime ();
      }

      // TimeDescription
      //
      if (i.TimeDescription ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "TimeDescription",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.TimeDescription ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const EnvironmentsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Environment
      //
      for (EnvironmentsType::Environment_const_iterator
           b (i.Environment ().begin ()), n (i.Environment ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Environment",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const InspectionTraceabilityType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // InspectingOrganization
      //
      if (i.InspectingOrganization ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectingOrganization",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectingOrganization ();
      }

      // CustomerOrganization
      //
      if (i.CustomerOrganization ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "CustomerOrganization",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.CustomerOrganization ();
      }

      // SupplierCode
      //
      if (i.SupplierCode ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SupplierCode",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.SupplierCode ();
      }

      // PurchaseOrderNumber
      //
      if (i.PurchaseOrderNumber ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PurchaseOrderNumber",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.PurchaseOrderNumber ();
      }

      // OrderNumber
      //
      if (i.OrderNumber ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "OrderNumber",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.OrderNumber ();
      }

      // ReportNumber
      //
      if (i.ReportNumber ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ReportNumber",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ReportNumber ();
      }

      // InspectionScope
      //
      if (i.InspectionScope ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionScope",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectionScope ();
      }

      // InspectionMode
      //
      if (i.InspectionMode ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionMode",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectionMode ();
      }

      // PartialInspection
      //
      if (i.PartialInspection ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PartialInspection",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.PartialInspection ();
      }

      // NotableEvents
      //
      if (i.NotableEvents ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "NotableEvents",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.NotableEvents ();
      }

      // NotedEvents
      //
      if (i.NotedEvents ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "NotedEvents",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.NotedEvents ();
      }

      // InspectionStart
      //
      if (i.InspectionStart ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionStart",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectionStart ();
      }

      // InspectionEnd
      //
      if (i.InspectionEnd ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionEnd",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectionEnd ();
      }

      // InspectionSoftwareItems
      //
      if (i.InspectionSoftwareItems ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionSoftwareItems",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectionSoftwareItems ();
      }

      // InspectionProgram
      //
      if (i.InspectionProgram ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionProgram",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectionProgram ();
      }

      // InspectionOperator
      //
      if (i.InspectionOperator ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionOperator",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectionOperator ();
      }

      // ReportPreparer
      //
      if (i.ReportPreparer ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ReportPreparer",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ReportPreparer ();
      }

      // ReportPreparationDate
      //
      if (i.ReportPreparationDate ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ReportPreparationDate",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ReportPreparationDate ();
      }

      // ReportType
      //
      if (i.ReportType ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ReportType",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ReportType ();
      }

      // SecurityClassification
      //
      if (i.SecurityClassification ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SecurityClassification",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.SecurityClassification ();
      }

      // PlantLocation
      //
      if (i.PlantLocation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PlantLocation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.PlantLocation ();
      }

      // ReferencedQIFPlanInstance
      //
      if (i.ReferencedQIFPlanInstance ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ReferencedQIFPlanInstance",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ReferencedQIFPlanInstance ();
      }

      // ReferencedQIFPlan
      //
      if (i.ReferencedQIFPlan ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ReferencedQIFPlan",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ReferencedQIFPlan ();
      }

      // Errors
      //
      if (i.Errors ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Errors",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Errors ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const PreInspectionTraceabilityType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // InspectingOrganization
      //
      if (i.InspectingOrganization ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectingOrganization",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectingOrganization ();
      }

      // CustomerOrganization
      //
      if (i.CustomerOrganization ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "CustomerOrganization",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.CustomerOrganization ();
      }

      // SupplierCode
      //
      if (i.SupplierCode ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SupplierCode",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.SupplierCode ();
      }

      // PurchaseOrderNumber
      //
      if (i.PurchaseOrderNumber ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PurchaseOrderNumber",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.PurchaseOrderNumber ();
      }

      // OrderNumber
      //
      if (i.OrderNumber ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "OrderNumber",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.OrderNumber ();
      }

      // AsmPathIds
      //
      if (i.AsmPathIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AsmPathIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.AsmPathIds ();
      }

      // ReportNumber
      //
      if (i.ReportNumber ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ReportNumber",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ReportNumber ();
      }

      // InspectionScope
      //
      if (i.InspectionScope ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionScope",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectionScope ();
      }

      // InspectionMode
      //
      if (i.InspectionMode ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionMode",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectionMode ();
      }

      // PartialInspection
      //
      if (i.PartialInspection ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PartialInspection",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.PartialInspection ();
      }

      // NotableEvents
      //
      if (i.NotableEvents ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "NotableEvents",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.NotableEvents ();
      }

      // InspectionSoftwareItems
      //
      if (i.InspectionSoftwareItems ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionSoftwareItems",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectionSoftwareItems ();
      }

      // InspectionProgram
      //
      if (i.InspectionProgram ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionProgram",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectionProgram ();
      }

      // SecurityClassification
      //
      if (i.SecurityClassification ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SecurityClassification",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.SecurityClassification ();
      }

      // PlantLocation
      //
      if (i.PlantLocation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PlantLocation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.PlantLocation ();
      }

      // ReferencedQIFPlanInstance
      //
      if (i.ReferencedQIFPlanInstance ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ReferencedQIFPlanInstance",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ReferencedQIFPlanInstance ();
      }

      // ReferencedQIFPlan
      //
      if (i.ReferencedQIFPlan ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ReferencedQIFPlan",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ReferencedQIFPlan ();
      }

      // FormalStandard
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "FormalStandard",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.FormalStandard ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const ProductTraceabilityType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // ReportNumber
      //
      if (i.ReportNumber ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ReportNumber",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ReportNumber ();
      }

      // ManufacturingProcessId
      //
      if (i.ManufacturingProcessId ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ManufacturingProcessId",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ManufacturingProcessId ();
      }

      // FixtureId
      //
      if (i.FixtureId ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "FixtureId",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.FixtureId ();
      }

      // NotableEventIds
      //
      if (i.NotableEventIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "NotableEventIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.NotableEventIds ();
      }

      // InspectionSoftwareItems
      //
      if (i.InspectionSoftwareItems ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionSoftwareItems",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectionSoftwareItems ();
      }

      // InspectionProgram
      //
      if (i.InspectionProgram ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionProgram",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectionProgram ();
      }

      // MeasurementDeviceIds
      //
      if (i.MeasurementDeviceIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MeasurementDeviceIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MeasurementDeviceIds ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const ActualProductTraceabilityType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // SampleNumber
      //
      if (i.SampleNumber ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SampleNumber",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.SampleNumber ();
      }

      // LotNumber
      //
      if (i.LotNumber ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "LotNumber",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.LotNumber ();
      }

      // ReportNumber
      //
      if (i.ReportNumber ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ReportNumber",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ReportNumber ();
      }

      // ManufacturingProcessId
      //
      if (i.ManufacturingProcessId ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ManufacturingProcessId",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ManufacturingProcessId ();
      }

      // FixtureId
      //
      if (i.FixtureId ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "FixtureId",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.FixtureId ();
      }

      // NotableEventIds
      //
      if (i.NotableEventIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "NotableEventIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.NotableEventIds ();
      }

      // NotedEventIds
      //
      if (i.NotedEventIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "NotedEventIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.NotedEventIds ();
      }

      // InspectionStart
      //
      if (i.InspectionStart ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionStart",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectionStart ();
      }

      // InspectionEnd
      //
      if (i.InspectionEnd ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionEnd",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectionEnd ();
      }

      // InspectionSoftwareItems
      //
      if (i.InspectionSoftwareItems ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionSoftwareItems",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectionSoftwareItems ();
      }

      // InspectionProgram
      //
      if (i.InspectionProgram ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionProgram",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectionProgram ();
      }

      // InspectionOperator
      //
      if (i.InspectionOperator ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionOperator",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectionOperator ();
      }

      // MeasurementDeviceIds
      //
      if (i.MeasurementDeviceIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MeasurementDeviceIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MeasurementDeviceIds ();
      }

      // ProductEnvironments
      //
      if (i.ProductEnvironments ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ProductEnvironments",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ProductEnvironments ();
      }

      // Errors
      //
      if (i.Errors ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Errors",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Errors ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const ProcessParameterType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // ParameterType
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ParameterType",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.ParameterType ();
      }

      // ParameterValue
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ParameterValue",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.ParameterValue ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const ManufacturingProcessTraceabilityType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Attributes
      //
      if (i.Attributes ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Attributes",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Attributes ();
      }

      // Description
      //
      if (i.Description ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Description",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Description ();
      }

      // Job
      //
      if (i.Job ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Job",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Job ();
      }

      // Revision
      //
      if (i.Revision ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Revision",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Revision ();
      }

      // PreviousOperationId
      //
      if (i.PreviousOperationId ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PreviousOperationId",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.PreviousOperationId ();
      }

      // Path
      //
      if (i.Path ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Path",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Path ();
      }

      // MachineManufacturerName
      //
      if (i.MachineManufacturerName ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MachineManufacturerName",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MachineManufacturerName ();
      }

      // MachineIdentifier
      //
      if (i.MachineIdentifier ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MachineIdentifier",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MachineIdentifier ();
      }

      // OperatorIdentifier
      //
      if (i.OperatorIdentifier ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "OperatorIdentifier",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.OperatorIdentifier ();
      }

      // Shift
      //
      if (i.Shift ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Shift",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Shift ();
      }

      // Department
      //
      if (i.Department ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Department",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Department ();
      }

      // ResponsibilityIdentifier
      //
      if (i.ResponsibilityIdentifier ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ResponsibilityIdentifier",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ResponsibilityIdentifier ();
      }

      // PlantSector
      //
      if (i.PlantSector ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PlantSector",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.PlantSector ();
      }

      // ProcessParameter
      //
      for (ManufacturingProcessTraceabilityType::ProcessParameter_const_iterator
           b (i.ProcessParameter ().begin ()), n (i.ProcessParameter ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ProcessParameter",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // AssociatedTraceabilityId
      //
      if (i.AssociatedTraceabilityId ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AssociatedTraceabilityId",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.AssociatedTraceabilityId ();
      }

      // id
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "id",
            e));

        a << i.id ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const ManufacturingProcessTraceabilitiesType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // ManufacturingProcessTraceability
      //
      for (ManufacturingProcessTraceabilitiesType::ManufacturingProcessTraceability_const_iterator
           b (i.ManufacturingProcessTraceability ().begin ()), n (i.ManufacturingProcessTraceability ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ManufacturingProcessTraceability",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }
    }

    void
    ManufacturingProcessTraceabilities (::std::ostream& o,
                                        const ::xsd::qif2::ManufacturingProcessTraceabilitiesType& s,
                                        const ::xml_schema::namespace_infomap& m,
                                        const ::std::string& e,
                                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ManufacturingProcessTraceabilities (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ManufacturingProcessTraceabilities (::std::ostream& o,
                                        const ::xsd::qif2::ManufacturingProcessTraceabilitiesType& s,
                                        ::xml_schema::error_handler& h,
                                        const ::xml_schema::namespace_infomap& m,
                                        const ::std::string& e,
                                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ManufacturingProcessTraceabilities (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ManufacturingProcessTraceabilities (::std::ostream& o,
                                        const ::xsd::qif2::ManufacturingProcessTraceabilitiesType& s,
                                        ::xercesc::DOMErrorHandler& h,
                                        const ::xml_schema::namespace_infomap& m,
                                        const ::std::string& e,
                                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ManufacturingProcessTraceabilities (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ManufacturingProcessTraceabilities (::xercesc::XMLFormatTarget& t,
                                        const ::xsd::qif2::ManufacturingProcessTraceabilitiesType& s,
                                        const ::xml_schema::namespace_infomap& m,
                                        const ::std::string& e,
                                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ManufacturingProcessTraceabilities (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ManufacturingProcessTraceabilities (::xercesc::XMLFormatTarget& t,
                                        const ::xsd::qif2::ManufacturingProcessTraceabilitiesType& s,
                                        ::xml_schema::error_handler& h,
                                        const ::xml_schema::namespace_infomap& m,
                                        const ::std::string& e,
                                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ManufacturingProcessTraceabilities (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ManufacturingProcessTraceabilities (::xercesc::XMLFormatTarget& t,
                                        const ::xsd::qif2::ManufacturingProcessTraceabilitiesType& s,
                                        ::xercesc::DOMErrorHandler& h,
                                        const ::xml_schema::namespace_infomap& m,
                                        const ::std::string& e,
                                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ManufacturingProcessTraceabilities (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ManufacturingProcessTraceabilities (::xercesc::DOMDocument& d,
                                        const ::xsd::qif2::ManufacturingProcessTraceabilitiesType& s,
                                        ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ManufacturingProcessTraceabilities" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ManufacturingProcessTraceabilities",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ManufacturingProcessTraceabilities (const ::xsd::qif2::ManufacturingProcessTraceabilitiesType& s,
                                        const ::xml_schema::namespace_infomap& m,
                                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "ManufacturingProcessTraceabilities",
          "http://qifstandards.org/xsd/qif2",
          m, f));

      ::xsd::qif2::ManufacturingProcessTraceabilities (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const ErrorsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Error
      //
      for (ErrorsType::Error_const_iterator
           b (i.Error ().begin ()), n (i.Error ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Error",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const PartialInspectionType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // BaselineProductNumber
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "BaselineProductNumber",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.BaselineProductNumber ();
      }

      // BaselineProductVersion
      //
      if (i.BaselineProductVersion ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "BaselineProductVersion",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.BaselineProductVersion ();
      }

      // ReasonForPartialInspection
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ReasonForPartialInspection",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.ReasonForPartialInspection ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const TimeDescriptionEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const TimeDescriptionEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const TimeDescriptionEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const TimeDescriptionType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // TimeDescriptionEnum
      //
      if (i.TimeDescriptionEnum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "TimeDescriptionEnum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.TimeDescriptionEnum ();
      }

      // OtherTimeDescription
      //
      if (i.OtherTimeDescription ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "OtherTimeDescription",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.OtherTimeDescription ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const InspectionModeEnumType& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const InspectionModeEnumType& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const InspectionModeEnumType& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const InspectionScopeEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const InspectionScopeEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const InspectionScopeEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef EXPRESSIONS_HXX
#define EXPRESSIONS_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xsd
{
  namespace qif2
  {
    class SamplingRigorIsType;
    class FeatureIsDatumType;
    class FeatureIsInternalType;
    class CharacteristicIsType;
    class ShapeClassIsType;
    class PointSamplingStrategyEnumBaseType;
    class PointPointSamplingStrategyEnumType;
    class OpenCurvePointSamplingStrategyEnumType;
    class ClosedCurvePointSamplingStrategyEnumType;
    class PointDefinedPointSamplingStrategyEnumType;
    class ConePointSamplingStrategyEnumType;
    class ElongatedCylinderPointSamplingStrategyEnumType;
    class ExtrudedCrossSectionPointSamplingStrategyEnumType;
    class PrismPointSamplingStrategyEnumType;
    class SpherePointSamplingStrategyEnumType;
    class SurfaceOfRevolutionPointSamplingStrategyEnumType;
    class PlanePointSamplingStrategyEnumType;
    class CharacteristicTypeEnumType;
    class ArithmeticFeatureParameterType;
    class ArithmeticCharacteristicParameterType;
    class FeatureLengthType;
    class FeatureAreaType;
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "../qiflibrary/genericexpressions.hxx"

#include "../qiflibrary/primitivespmi.hxx"

namespace xsd
{
  namespace qif2
  {
    class SamplingRigorIsType: public ::xsd::qif2::BooleanExpressionBaseType
    {
      public:
      // val
      //
      typedef ::xml_schema::unsigned_int val_type;
      typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

      const val_type&
      val () const;

      val_type&
      val ();

      void
      val (const val_type& x);

      // Constructors.
      //
      SamplingRigorIsType (const val_type&);

      SamplingRigorIsType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      SamplingRigorIsType (const SamplingRigorIsType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual SamplingRigorIsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SamplingRigorIsType&
      operator= (const SamplingRigorIsType& x);

      virtual 
      ~SamplingRigorIsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< val_type > val_;
    };

    class FeatureIsDatumType: public ::xsd::qif2::BooleanExpressionBaseType
    {
      public:
      // Constructors.
      //
      FeatureIsDatumType ();

      FeatureIsDatumType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      FeatureIsDatumType (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      FeatureIsDatumType (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      FeatureIsDatumType (const FeatureIsDatumType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual FeatureIsDatumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~FeatureIsDatumType ();
    };

    class FeatureIsInternalType: public ::xsd::qif2::BooleanExpressionBaseType
    {
      public:
      // Constructors.
      //
      FeatureIsInternalType ();

      FeatureIsInternalType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      FeatureIsInternalType (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      FeatureIsInternalType (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      FeatureIsInternalType (const FeatureIsInternalType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual FeatureIsInternalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~FeatureIsInternalType ();
    };

    class CharacteristicIsType: public ::xsd::qif2::BooleanExpressionBaseType
    {
      public:
      // val
      //
      typedef ::xsd::qif2::CharacteristicTypeEnumType val_type;
      typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

      const val_type&
      val () const;

      val_type&
      val ();

      void
      val (const val_type& x);

      void
      val (::std::auto_ptr< val_type > p);

      // Constructors.
      //
      CharacteristicIsType (const val_type&);

      CharacteristicIsType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      CharacteristicIsType (const CharacteristicIsType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual CharacteristicIsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicIsType&
      operator= (const CharacteristicIsType& x);

      virtual 
      ~CharacteristicIsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< val_type > val_;
    };

    class ShapeClassIsType: public ::xsd::qif2::BooleanExpressionBaseType
    {
      public:
      // val
      //
      typedef ::xsd::qif2::ShapeClassEnumType val_type;
      typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

      const val_type&
      val () const;

      val_type&
      val ();

      void
      val (const val_type& x);

      void
      val (::std::auto_ptr< val_type > p);

      // Constructors.
      //
      ShapeClassIsType (const val_type&);

      ShapeClassIsType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      ShapeClassIsType (const ShapeClassIsType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual ShapeClassIsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ShapeClassIsType&
      operator= (const ShapeClassIsType& x);

      virtual 
      ~ShapeClassIsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< val_type > val_;
    };

    class PointSamplingStrategyEnumBaseType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        ORTHOGONALGRID,
        BIRDCAGE,
        POLARGRID,
        SPECIFIEDGRID,
        STRATIFIED,
        HELIX,
        SPIRAL,
        SPIDERWEB,
        POINTS
      };

      PointSamplingStrategyEnumBaseType (value v);

      PointSamplingStrategyEnumBaseType (const char* v);

      PointSamplingStrategyEnumBaseType (const ::std::string& v);

      PointSamplingStrategyEnumBaseType (const ::xml_schema::nmtoken& v);

      PointSamplingStrategyEnumBaseType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      PointSamplingStrategyEnumBaseType (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      PointSamplingStrategyEnumBaseType (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      PointSamplingStrategyEnumBaseType (const PointSamplingStrategyEnumBaseType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual PointSamplingStrategyEnumBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointSamplingStrategyEnumBaseType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_PointSamplingStrategyEnumBaseType_convert ();
      }

      protected:
      value
      _xsd_PointSamplingStrategyEnumBaseType_convert () const;

      public:
      static const char* const _xsd_PointSamplingStrategyEnumBaseType_literals_[9];
      static const value _xsd_PointSamplingStrategyEnumBaseType_indexes_[9];
    };

    class PointPointSamplingStrategyEnumType: public ::xsd::qif2::PointSamplingStrategyEnumBaseType
    {
      public:
      typedef ::xsd::qif2::PointSamplingStrategyEnumBaseType::value value;

      PointPointSamplingStrategyEnumType (value v);

      PointPointSamplingStrategyEnumType (const char* v);

      PointPointSamplingStrategyEnumType (const ::std::string& v);

      PointPointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v);

      PointPointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      PointPointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      PointPointSamplingStrategyEnumType (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      PointPointSamplingStrategyEnumType (const PointPointSamplingStrategyEnumType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual PointPointSamplingStrategyEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointPointSamplingStrategyEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_PointPointSamplingStrategyEnumType_convert ();
      }

      protected:
      value
      _xsd_PointPointSamplingStrategyEnumType_convert () const;

      public:
      static const char* const* _xsd_PointPointSamplingStrategyEnumType_literals_;
      static const value _xsd_PointPointSamplingStrategyEnumType_indexes_[1];
    };

    class OpenCurvePointSamplingStrategyEnumType: public ::xsd::qif2::PointSamplingStrategyEnumBaseType
    {
      public:
      typedef ::xsd::qif2::PointSamplingStrategyEnumBaseType::value value;

      OpenCurvePointSamplingStrategyEnumType (value v);

      OpenCurvePointSamplingStrategyEnumType (const char* v);

      OpenCurvePointSamplingStrategyEnumType (const ::std::string& v);

      OpenCurvePointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v);

      OpenCurvePointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      OpenCurvePointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      OpenCurvePointSamplingStrategyEnumType (const ::std::string& s,
                                              const ::xercesc::DOMElement* e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      OpenCurvePointSamplingStrategyEnumType (const OpenCurvePointSamplingStrategyEnumType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual OpenCurvePointSamplingStrategyEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OpenCurvePointSamplingStrategyEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_OpenCurvePointSamplingStrategyEnumType_convert ();
      }

      protected:
      value
      _xsd_OpenCurvePointSamplingStrategyEnumType_convert () const;

      public:
      static const char* const* _xsd_OpenCurvePointSamplingStrategyEnumType_literals_;
      static const value _xsd_OpenCurvePointSamplingStrategyEnumType_indexes_[1];
    };

    class ClosedCurvePointSamplingStrategyEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        POINTS,
        EQUIDISTANT
      };

      ClosedCurvePointSamplingStrategyEnumType (value v);

      ClosedCurvePointSamplingStrategyEnumType (const char* v);

      ClosedCurvePointSamplingStrategyEnumType (const ::std::string& v);

      ClosedCurvePointSamplingStrategyEnumType (const ::xml_schema::nmtoken& v);

      ClosedCurvePointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      ClosedCurvePointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      ClosedCurvePointSamplingStrategyEnumType (const ::std::string& s,
                                                const ::xercesc::DOMElement* e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      ClosedCurvePointSamplingStrategyEnumType (const ClosedCurvePointSamplingStrategyEnumType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual ClosedCurvePointSamplingStrategyEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ClosedCurvePointSamplingStrategyEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_ClosedCurvePointSamplingStrategyEnumType_convert ();
      }

      protected:
      value
      _xsd_ClosedCurvePointSamplingStrategyEnumType_convert () const;

      public:
      static const char* const _xsd_ClosedCurvePointSamplingStrategyEnumType_literals_[2];
      static const value _xsd_ClosedCurvePointSamplingStrategyEnumType_indexes_[2];
    };

    class PointDefinedPointSamplingStrategyEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        GIVENPOINTS,
        POINTS
      };

      PointDefinedPointSamplingStrategyEnumType (value v);

      PointDefinedPointSamplingStrategyEnumType (const char* v);

      PointDefinedPointSamplingStrategyEnumType (const ::std::string& v);

      PointDefinedPointSamplingStrategyEnumType (const ::xml_schema::nmtoken& v);

      PointDefinedPointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      PointDefinedPointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      PointDefinedPointSamplingStrategyEnumType (const ::std::string& s,
                                                 const ::xercesc::DOMElement* e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      PointDefinedPointSamplingStrategyEnumType (const PointDefinedPointSamplingStrategyEnumType& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      virtual PointDefinedPointSamplingStrategyEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDefinedPointSamplingStrategyEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_PointDefinedPointSamplingStrategyEnumType_convert ();
      }

      protected:
      value
      _xsd_PointDefinedPointSamplingStrategyEnumType_convert () const;

      public:
      static const char* const _xsd_PointDefinedPointSamplingStrategyEnumType_literals_[2];
      static const value _xsd_PointDefinedPointSamplingStrategyEnumType_indexes_[2];
    };

    class ConePointSamplingStrategyEnumType: public ::xsd::qif2::PointSamplingStrategyEnumBaseType
    {
      public:
      typedef ::xsd::qif2::PointSamplingStrategyEnumBaseType::value value;

      ConePointSamplingStrategyEnumType (value v);

      ConePointSamplingStrategyEnumType (const char* v);

      ConePointSamplingStrategyEnumType (const ::std::string& v);

      ConePointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v);

      ConePointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      ConePointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      ConePointSamplingStrategyEnumType (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      ConePointSamplingStrategyEnumType (const ConePointSamplingStrategyEnumType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual ConePointSamplingStrategyEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConePointSamplingStrategyEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_ConePointSamplingStrategyEnumType_convert ();
      }

      protected:
      value
      _xsd_ConePointSamplingStrategyEnumType_convert () const;

      public:
      static const char* const* _xsd_ConePointSamplingStrategyEnumType_literals_;
      static const value _xsd_ConePointSamplingStrategyEnumType_indexes_[5];
    };

    class ElongatedCylinderPointSamplingStrategyEnumType: public ::xsd::qif2::PointSamplingStrategyEnumBaseType
    {
      public:
      typedef ::xsd::qif2::PointSamplingStrategyEnumBaseType::value value;

      ElongatedCylinderPointSamplingStrategyEnumType (value v);

      ElongatedCylinderPointSamplingStrategyEnumType (const char* v);

      ElongatedCylinderPointSamplingStrategyEnumType (const ::std::string& v);

      ElongatedCylinderPointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v);

      ElongatedCylinderPointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

      ElongatedCylinderPointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

      ElongatedCylinderPointSamplingStrategyEnumType (const ::std::string& s,
                                                      const ::xercesc::DOMElement* e,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

      ElongatedCylinderPointSamplingStrategyEnumType (const ElongatedCylinderPointSamplingStrategyEnumType& x,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

      virtual ElongatedCylinderPointSamplingStrategyEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ElongatedCylinderPointSamplingStrategyEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_ElongatedCylinderPointSamplingStrategyEnumType_convert ();
      }

      protected:
      value
      _xsd_ElongatedCylinderPointSamplingStrategyEnumType_convert () const;

      public:
      static const char* const* _xsd_ElongatedCylinderPointSamplingStrategyEnumType_literals_;
      static const value _xsd_ElongatedCylinderPointSamplingStrategyEnumType_indexes_[6];
    };

    class ExtrudedCrossSectionPointSamplingStrategyEnumType: public ::xsd::qif2::PointSamplingStrategyEnumBaseType
    {
      public:
      typedef ::xsd::qif2::PointSamplingStrategyEnumBaseType::value value;

      ExtrudedCrossSectionPointSamplingStrategyEnumType (value v);

      ExtrudedCrossSectionPointSamplingStrategyEnumType (const char* v);

      ExtrudedCrossSectionPointSamplingStrategyEnumType (const ::std::string& v);

      ExtrudedCrossSectionPointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v);

      ExtrudedCrossSectionPointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                                         ::xml_schema::flags f = 0,
                                                         ::xml_schema::container* c = 0);

      ExtrudedCrossSectionPointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                                         ::xml_schema::flags f = 0,
                                                         ::xml_schema::container* c = 0);

      ExtrudedCrossSectionPointSamplingStrategyEnumType (const ::std::string& s,
                                                         const ::xercesc::DOMElement* e,
                                                         ::xml_schema::flags f = 0,
                                                         ::xml_schema::container* c = 0);

      ExtrudedCrossSectionPointSamplingStrategyEnumType (const ExtrudedCrossSectionPointSamplingStrategyEnumType& x,
                                                         ::xml_schema::flags f = 0,
                                                         ::xml_schema::container* c = 0);

      virtual ExtrudedCrossSectionPointSamplingStrategyEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ExtrudedCrossSectionPointSamplingStrategyEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_convert ();
      }

      protected:
      value
      _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_convert () const;

      public:
      static const char* const* _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_literals_;
      static const value _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_indexes_[3];
    };

    class PrismPointSamplingStrategyEnumType: public ::xsd::qif2::PointSamplingStrategyEnumBaseType
    {
      public:
      typedef ::xsd::qif2::PointSamplingStrategyEnumBaseType::value value;

      PrismPointSamplingStrategyEnumType (value v);

      PrismPointSamplingStrategyEnumType (const char* v);

      PrismPointSamplingStrategyEnumType (const ::std::string& v);

      PrismPointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v);

      PrismPointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      PrismPointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      PrismPointSamplingStrategyEnumType (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      PrismPointSamplingStrategyEnumType (const PrismPointSamplingStrategyEnumType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual PrismPointSamplingStrategyEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PrismPointSamplingStrategyEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_PrismPointSamplingStrategyEnumType_convert ();
      }

      protected:
      value
      _xsd_PrismPointSamplingStrategyEnumType_convert () const;

      public:
      static const char* const* _xsd_PrismPointSamplingStrategyEnumType_literals_;
      static const value _xsd_PrismPointSamplingStrategyEnumType_indexes_[6];
    };

    class SpherePointSamplingStrategyEnumType: public ::xsd::qif2::PointSamplingStrategyEnumBaseType
    {
      public:
      typedef ::xsd::qif2::PointSamplingStrategyEnumBaseType::value value;

      SpherePointSamplingStrategyEnumType (value v);

      SpherePointSamplingStrategyEnumType (const char* v);

      SpherePointSamplingStrategyEnumType (const ::std::string& v);

      SpherePointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v);

      SpherePointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      SpherePointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      SpherePointSamplingStrategyEnumType (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      SpherePointSamplingStrategyEnumType (const SpherePointSamplingStrategyEnumType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual SpherePointSamplingStrategyEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SpherePointSamplingStrategyEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_SpherePointSamplingStrategyEnumType_convert ();
      }

      protected:
      value
      _xsd_SpherePointSamplingStrategyEnumType_convert () const;

      public:
      static const char* const* _xsd_SpherePointSamplingStrategyEnumType_literals_;
      static const value _xsd_SpherePointSamplingStrategyEnumType_indexes_[5];
    };

    class SurfaceOfRevolutionPointSamplingStrategyEnumType: public ::xsd::qif2::PointSamplingStrategyEnumBaseType
    {
      public:
      typedef ::xsd::qif2::PointSamplingStrategyEnumBaseType::value value;

      SurfaceOfRevolutionPointSamplingStrategyEnumType (value v);

      SurfaceOfRevolutionPointSamplingStrategyEnumType (const char* v);

      SurfaceOfRevolutionPointSamplingStrategyEnumType (const ::std::string& v);

      SurfaceOfRevolutionPointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v);

      SurfaceOfRevolutionPointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                                        ::xml_schema::flags f = 0,
                                                        ::xml_schema::container* c = 0);

      SurfaceOfRevolutionPointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                                        ::xml_schema::flags f = 0,
                                                        ::xml_schema::container* c = 0);

      SurfaceOfRevolutionPointSamplingStrategyEnumType (const ::std::string& s,
                                                        const ::xercesc::DOMElement* e,
                                                        ::xml_schema::flags f = 0,
                                                        ::xml_schema::container* c = 0);

      SurfaceOfRevolutionPointSamplingStrategyEnumType (const SurfaceOfRevolutionPointSamplingStrategyEnumType& x,
                                                        ::xml_schema::flags f = 0,
                                                        ::xml_schema::container* c = 0);

      virtual SurfaceOfRevolutionPointSamplingStrategyEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SurfaceOfRevolutionPointSamplingStrategyEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_convert ();
      }

      protected:
      value
      _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_convert () const;

      public:
      static const char* const* _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_literals_;
      static const value _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_indexes_[6];
    };

    class PlanePointSamplingStrategyEnumType: public ::xsd::qif2::PointSamplingStrategyEnumBaseType
    {
      public:
      typedef ::xsd::qif2::PointSamplingStrategyEnumBaseType::value value;

      PlanePointSamplingStrategyEnumType (value v);

      PlanePointSamplingStrategyEnumType (const char* v);

      PlanePointSamplingStrategyEnumType (const ::std::string& v);

      PlanePointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v);

      PlanePointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      PlanePointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      PlanePointSamplingStrategyEnumType (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      PlanePointSamplingStrategyEnumType (const PlanePointSamplingStrategyEnumType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual PlanePointSamplingStrategyEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PlanePointSamplingStrategyEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_PlanePointSamplingStrategyEnumType_convert ();
      }

      protected:
      value
      _xsd_PlanePointSamplingStrategyEnumType_convert () const;

      public:
      static const char* const* _xsd_PlanePointSamplingStrategyEnumType_literals_;
      static const value _xsd_PlanePointSamplingStrategyEnumType_indexes_[7];
    };

    class CharacteristicTypeEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        ANGLE,
        ANGLECOORDINATE,
        ANGLEFROM,
        ANGLEBETWEEN,
        ANGULARITY,
        CHORD,
        CIRCULARITY,
        CIRCULARRUNOUT,
        CONCENTRICITY,
        CURVELENGTH,
        CYLINDRICITY,
        DEPTH,
        DIAMETER,
        DISTANCE,
        DISTANCEFROM,
        FLATNESS,
        HEIGHT,
        LENGTH,
        LENGTHCOORDINATE,
        LINEPROFILE,
        PERPENDICULARITY,
        PARALLELISM,
        POINTPROFILE,
        POSITION,
        RADIUS,
        SQUARE,
        STRAIGHTNESS,
        SURFACEPROFILE,
        SURFACEPROFILENONUNIFORM,
        SYMMETRY,
        THICKNESS,
        THREAD,
        TOTALRUNOUT,
        WIDTH
      };

      CharacteristicTypeEnumType (value v);

      CharacteristicTypeEnumType (const char* v);

      CharacteristicTypeEnumType (const ::std::string& v);

      CharacteristicTypeEnumType (const ::xml_schema::nmtoken& v);

      CharacteristicTypeEnumType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      CharacteristicTypeEnumType (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      CharacteristicTypeEnumType (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      CharacteristicTypeEnumType (const CharacteristicTypeEnumType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual CharacteristicTypeEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicTypeEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_CharacteristicTypeEnumType_convert ();
      }

      protected:
      value
      _xsd_CharacteristicTypeEnumType_convert () const;

      public:
      static const char* const _xsd_CharacteristicTypeEnumType_literals_[34];
      static const value _xsd_CharacteristicTypeEnumType_indexes_[34];
    };

    class ArithmeticFeatureParameterType: public ::xsd::qif2::ArithmeticExpressionBaseType
    {
      public:
      // Parameter
      //
      typedef ::xml_schema::token Parameter_type;
      typedef ::xsd::cxx::tree::traits< Parameter_type, char > Parameter_traits;

      const Parameter_type&
      Parameter () const;

      Parameter_type&
      Parameter ();

      void
      Parameter (const Parameter_type& x);

      void
      Parameter (::std::auto_ptr< Parameter_type > p);

      // Constructors.
      //
      ArithmeticFeatureParameterType (const Parameter_type&);

      ArithmeticFeatureParameterType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      ArithmeticFeatureParameterType (const ArithmeticFeatureParameterType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual ArithmeticFeatureParameterType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ArithmeticFeatureParameterType&
      operator= (const ArithmeticFeatureParameterType& x);

      virtual 
      ~ArithmeticFeatureParameterType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Parameter_type > Parameter_;
    };

    class ArithmeticCharacteristicParameterType: public ::xsd::qif2::ArithmeticExpressionBaseType
    {
      public:
      // CharacteristicTypeEnum
      //
      typedef ::xsd::qif2::CharacteristicTypeEnumType CharacteristicTypeEnum_type;
      typedef ::xsd::cxx::tree::traits< CharacteristicTypeEnum_type, char > CharacteristicTypeEnum_traits;

      const CharacteristicTypeEnum_type&
      CharacteristicTypeEnum () const;

      CharacteristicTypeEnum_type&
      CharacteristicTypeEnum ();

      void
      CharacteristicTypeEnum (const CharacteristicTypeEnum_type& x);

      void
      CharacteristicTypeEnum (::std::auto_ptr< CharacteristicTypeEnum_type > p);

      // Parameter
      //
      typedef ::xml_schema::token Parameter_type;
      typedef ::xsd::cxx::tree::traits< Parameter_type, char > Parameter_traits;

      const Parameter_type&
      Parameter () const;

      Parameter_type&
      Parameter ();

      void
      Parameter (const Parameter_type& x);

      void
      Parameter (::std::auto_ptr< Parameter_type > p);

      // Constructors.
      //
      ArithmeticCharacteristicParameterType (const CharacteristicTypeEnum_type&,
                                             const Parameter_type&);

      ArithmeticCharacteristicParameterType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      ArithmeticCharacteristicParameterType (const ArithmeticCharacteristicParameterType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual ArithmeticCharacteristicParameterType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ArithmeticCharacteristicParameterType&
      operator= (const ArithmeticCharacteristicParameterType& x);

      virtual 
      ~ArithmeticCharacteristicParameterType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< CharacteristicTypeEnum_type > CharacteristicTypeEnum_;
      ::xsd::cxx::tree::one< Parameter_type > Parameter_;
    };

    class FeatureLengthType: public ::xsd::qif2::ArithmeticExpressionBaseType
    {
      public:
      // Constructors.
      //
      FeatureLengthType ();

      FeatureLengthType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      FeatureLengthType (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      FeatureLengthType (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      FeatureLengthType (const FeatureLengthType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual FeatureLengthType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~FeatureLengthType ();
    };

    class FeatureAreaType: public ::xsd::qif2::ArithmeticExpressionBaseType
    {
      public:
      // Constructors.
      //
      FeatureAreaType ();

      FeatureAreaType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      FeatureAreaType (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      FeatureAreaType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      FeatureAreaType (const FeatureAreaType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual FeatureAreaType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~FeatureAreaType ();
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xsd
{
  namespace qif2
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (::xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (::xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xsd
{
  namespace qif2
  {
    void
    operator<< (::xercesc::DOMElement&, const SamplingRigorIsType&);

    void
    operator<< (::xercesc::DOMElement&, const FeatureIsDatumType&);

    void
    operator<< (::xercesc::DOMAttr&, const FeatureIsDatumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const FeatureIsDatumType&);

    void
    operator<< (::xercesc::DOMElement&, const FeatureIsInternalType&);

    void
    operator<< (::xercesc::DOMAttr&, const FeatureIsInternalType&);

    void
    operator<< (::xml_schema::list_stream&,
                const FeatureIsInternalType&);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicIsType&);

    void
    operator<< (::xercesc::DOMElement&, const ShapeClassIsType&);

    void
    operator<< (::xercesc::DOMElement&, const PointSamplingStrategyEnumBaseType&);

    void
    operator<< (::xercesc::DOMAttr&, const PointSamplingStrategyEnumBaseType&);

    void
    operator<< (::xml_schema::list_stream&,
                const PointSamplingStrategyEnumBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const PointPointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const PointPointSamplingStrategyEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const PointPointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const OpenCurvePointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const OpenCurvePointSamplingStrategyEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const OpenCurvePointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const ClosedCurvePointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const ClosedCurvePointSamplingStrategyEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ClosedCurvePointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDefinedPointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const PointDefinedPointSamplingStrategyEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const PointDefinedPointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const ConePointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const ConePointSamplingStrategyEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ConePointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const ElongatedCylinderPointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const ElongatedCylinderPointSamplingStrategyEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ElongatedCylinderPointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const ExtrudedCrossSectionPointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const ExtrudedCrossSectionPointSamplingStrategyEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ExtrudedCrossSectionPointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const PrismPointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const PrismPointSamplingStrategyEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const PrismPointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const SpherePointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const SpherePointSamplingStrategyEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const SpherePointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceOfRevolutionPointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const SurfaceOfRevolutionPointSamplingStrategyEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const SurfaceOfRevolutionPointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const PlanePointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const PlanePointSamplingStrategyEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const PlanePointSamplingStrategyEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicTypeEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const CharacteristicTypeEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const CharacteristicTypeEnumType&);

    // Serialize to std::ostream.
    //

    void
    SamplingRigorIs (::std::ostream& os,
                     const ::xsd::qif2::SamplingRigorIsType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    SamplingRigorIs (::std::ostream& os,
                     const ::xsd::qif2::SamplingRigorIsType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    SamplingRigorIs (::std::ostream& os,
                     const ::xsd::qif2::SamplingRigorIsType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SamplingRigorIs (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::SamplingRigorIsType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    SamplingRigorIs (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::SamplingRigorIsType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    SamplingRigorIs (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::SamplingRigorIsType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SamplingRigorIs (::xercesc::DOMDocument& d,
                     const ::xsd::qif2::SamplingRigorIsType& x,
                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SamplingRigorIs (const ::xsd::qif2::SamplingRigorIsType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FeatureIsDatum (::std::ostream& os,
                    const ::xsd::qif2::FeatureIsDatumType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    void
    FeatureIsDatum (::std::ostream& os,
                    const ::xsd::qif2::FeatureIsDatumType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    void
    FeatureIsDatum (::std::ostream& os,
                    const ::xsd::qif2::FeatureIsDatumType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FeatureIsDatum (::xercesc::XMLFormatTarget& ft,
                    const ::xsd::qif2::FeatureIsDatumType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    void
    FeatureIsDatum (::xercesc::XMLFormatTarget& ft,
                    const ::xsd::qif2::FeatureIsDatumType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    void
    FeatureIsDatum (::xercesc::XMLFormatTarget& ft,
                    const ::xsd::qif2::FeatureIsDatumType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FeatureIsDatum (::xercesc::DOMDocument& d,
                    const ::xsd::qif2::FeatureIsDatumType& x,
                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FeatureIsDatum (const ::xsd::qif2::FeatureIsDatumType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FeatureIsInternal (::std::ostream& os,
                       const ::xsd::qif2::FeatureIsInternalType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    FeatureIsInternal (::std::ostream& os,
                       const ::xsd::qif2::FeatureIsInternalType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    FeatureIsInternal (::std::ostream& os,
                       const ::xsd::qif2::FeatureIsInternalType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FeatureIsInternal (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::FeatureIsInternalType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    FeatureIsInternal (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::FeatureIsInternalType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    FeatureIsInternal (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::FeatureIsInternalType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FeatureIsInternal (::xercesc::DOMDocument& d,
                       const ::xsd::qif2::FeatureIsInternalType& x,
                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FeatureIsInternal (const ::xsd::qif2::FeatureIsInternalType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CharacteristicIs (::std::ostream& os,
                      const ::xsd::qif2::CharacteristicIsType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    CharacteristicIs (::std::ostream& os,
                      const ::xsd::qif2::CharacteristicIsType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    CharacteristicIs (::std::ostream& os,
                      const ::xsd::qif2::CharacteristicIsType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CharacteristicIs (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::CharacteristicIsType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    CharacteristicIs (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::CharacteristicIsType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    CharacteristicIs (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::CharacteristicIsType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CharacteristicIs (::xercesc::DOMDocument& d,
                      const ::xsd::qif2::CharacteristicIsType& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CharacteristicIs (const ::xsd::qif2::CharacteristicIsType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ShapeClassIs (::std::ostream& os,
                  const ::xsd::qif2::ShapeClassIsType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    void
    ShapeClassIs (::std::ostream& os,
                  const ::xsd::qif2::ShapeClassIsType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    void
    ShapeClassIs (::std::ostream& os,
                  const ::xsd::qif2::ShapeClassIsType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ShapeClassIs (::xercesc::XMLFormatTarget& ft,
                  const ::xsd::qif2::ShapeClassIsType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    void
    ShapeClassIs (::xercesc::XMLFormatTarget& ft,
                  const ::xsd::qif2::ShapeClassIsType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    void
    ShapeClassIs (::xercesc::XMLFormatTarget& ft,
                  const ::xsd::qif2::ShapeClassIsType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ShapeClassIs (::xercesc::DOMDocument& d,
                  const ::xsd::qif2::ShapeClassIsType& x,
                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ShapeClassIs (const ::xsd::qif2::ShapeClassIsType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ArithmeticFeatureParameterType&);

    void
    operator<< (::xercesc::DOMElement&, const ArithmeticCharacteristicParameterType&);

    void
    operator<< (::xercesc::DOMElement&, const FeatureLengthType&);

    void
    operator<< (::xercesc::DOMAttr&, const FeatureLengthType&);

    void
    operator<< (::xml_schema::list_stream&,
                const FeatureLengthType&);

    void
    operator<< (::xercesc::DOMElement&, const FeatureAreaType&);

    void
    operator<< (::xercesc::DOMAttr&, const FeatureAreaType&);

    void
    operator<< (::xml_schema::list_stream&,
                const FeatureAreaType&);

    // Serialize to std::ostream.
    //

    void
    ArithmeticFeatureParameter (::std::ostream& os,
                                const ::xsd::qif2::ArithmeticFeatureParameterType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ArithmeticFeatureParameter (::std::ostream& os,
                                const ::xsd::qif2::ArithmeticFeatureParameterType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ArithmeticFeatureParameter (::std::ostream& os,
                                const ::xsd::qif2::ArithmeticFeatureParameterType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ArithmeticFeatureParameter (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::ArithmeticFeatureParameterType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ArithmeticFeatureParameter (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::ArithmeticFeatureParameterType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ArithmeticFeatureParameter (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::ArithmeticFeatureParameterType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ArithmeticFeatureParameter (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::ArithmeticFeatureParameterType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ArithmeticFeatureParameter (const ::xsd::qif2::ArithmeticFeatureParameterType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ArithmeticCharacteristicParameter (::std::ostream& os,
                                       const ::xsd::qif2::ArithmeticCharacteristicParameterType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    ArithmeticCharacteristicParameter (::std::ostream& os,
                                       const ::xsd::qif2::ArithmeticCharacteristicParameterType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    ArithmeticCharacteristicParameter (::std::ostream& os,
                                       const ::xsd::qif2::ArithmeticCharacteristicParameterType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ArithmeticCharacteristicParameter (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::ArithmeticCharacteristicParameterType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    ArithmeticCharacteristicParameter (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::ArithmeticCharacteristicParameterType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    ArithmeticCharacteristicParameter (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::ArithmeticCharacteristicParameterType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ArithmeticCharacteristicParameter (::xercesc::DOMDocument& d,
                                       const ::xsd::qif2::ArithmeticCharacteristicParameterType& x,
                                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ArithmeticCharacteristicParameter (const ::xsd::qif2::ArithmeticCharacteristicParameterType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FeatureLength (::std::ostream& os,
                   const ::xsd::qif2::FeatureLengthType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    FeatureLength (::std::ostream& os,
                   const ::xsd::qif2::FeatureLengthType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    FeatureLength (::std::ostream& os,
                   const ::xsd::qif2::FeatureLengthType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FeatureLength (::xercesc::XMLFormatTarget& ft,
                   const ::xsd::qif2::FeatureLengthType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    FeatureLength (::xercesc::XMLFormatTarget& ft,
                   const ::xsd::qif2::FeatureLengthType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    FeatureLength (::xercesc::XMLFormatTarget& ft,
                   const ::xsd::qif2::FeatureLengthType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FeatureLength (::xercesc::DOMDocument& d,
                   const ::xsd::qif2::FeatureLengthType& x,
                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FeatureLength (const ::xsd::qif2::FeatureLengthType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FeatureArea (::std::ostream& os,
                 const ::xsd::qif2::FeatureAreaType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    void
    FeatureArea (::std::ostream& os,
                 const ::xsd::qif2::FeatureAreaType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    void
    FeatureArea (::std::ostream& os,
                 const ::xsd::qif2::FeatureAreaType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FeatureArea (::xercesc::XMLFormatTarget& ft,
                 const ::xsd::qif2::FeatureAreaType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    void
    FeatureArea (::xercesc::XMLFormatTarget& ft,
                 const ::xsd::qif2::FeatureAreaType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    void
    FeatureArea (::xercesc::XMLFormatTarget& ft,
                 const ::xsd::qif2::FeatureAreaType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FeatureArea (::xercesc::DOMDocument& d,
                 const ::xsd::qif2::FeatureAreaType& x,
                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FeatureArea (const ::xsd::qif2::FeatureAreaType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // EXPRESSIONS_HXX

// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef TOPOLOGY_HXX
#define TOPOLOGY_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xsd
{
  namespace qif2
  {
    class TopologySetType;
    class TopologyBaseType;
    class VertexSetType;
    class VertexType;
    class EdgeSetType;
    class EdgeType;
    class LoopSetType;
    class LoopBaseType;
    class LoopFormEnumType;
    class EdgeOrientedType;
    class CoEdgeType;
    class CoEdgesType;
    class CoEdgeMeshType;
    class CoEdgesMeshType;
    class LoopType;
    class LoopMeshType;
    class FaceSetType;
    class FaceBaseType;
    class FaceType;
    class FaceMeshType;
    class ShellSetType;
    class ShellFormEnumType;
    class ShellType;
    class BodySetType;
    class BodyType;
    class PointCloudSetType;
    class PointCloudType;
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "../qiflibrary/primitivespd.hxx"

namespace xsd
{
  namespace qif2
  {
    class TopologySetType: public ::xml_schema::type
    {
      public:
      // VertexSet
      //
      typedef ::xsd::qif2::VertexSetType VertexSet_type;
      typedef ::xsd::cxx::tree::optional< VertexSet_type > VertexSet_optional;
      typedef ::xsd::cxx::tree::traits< VertexSet_type, char > VertexSet_traits;

      const VertexSet_optional&
      VertexSet () const;

      VertexSet_optional&
      VertexSet ();

      void
      VertexSet (const VertexSet_type& x);

      void
      VertexSet (const VertexSet_optional& x);

      void
      VertexSet (::std::auto_ptr< VertexSet_type > p);

      // EdgeSet
      //
      typedef ::xsd::qif2::EdgeSetType EdgeSet_type;
      typedef ::xsd::cxx::tree::optional< EdgeSet_type > EdgeSet_optional;
      typedef ::xsd::cxx::tree::traits< EdgeSet_type, char > EdgeSet_traits;

      const EdgeSet_optional&
      EdgeSet () const;

      EdgeSet_optional&
      EdgeSet ();

      void
      EdgeSet (const EdgeSet_type& x);

      void
      EdgeSet (const EdgeSet_optional& x);

      void
      EdgeSet (::std::auto_ptr< EdgeSet_type > p);

      // LoopSet
      //
      typedef ::xsd::qif2::LoopSetType LoopSet_type;
      typedef ::xsd::cxx::tree::optional< LoopSet_type > LoopSet_optional;
      typedef ::xsd::cxx::tree::traits< LoopSet_type, char > LoopSet_traits;

      const LoopSet_optional&
      LoopSet () const;

      LoopSet_optional&
      LoopSet ();

      void
      LoopSet (const LoopSet_type& x);

      void
      LoopSet (const LoopSet_optional& x);

      void
      LoopSet (::std::auto_ptr< LoopSet_type > p);

      // FaceSet
      //
      typedef ::xsd::qif2::FaceSetType FaceSet_type;
      typedef ::xsd::cxx::tree::optional< FaceSet_type > FaceSet_optional;
      typedef ::xsd::cxx::tree::traits< FaceSet_type, char > FaceSet_traits;

      const FaceSet_optional&
      FaceSet () const;

      FaceSet_optional&
      FaceSet ();

      void
      FaceSet (const FaceSet_type& x);

      void
      FaceSet (const FaceSet_optional& x);

      void
      FaceSet (::std::auto_ptr< FaceSet_type > p);

      // ShellSet
      //
      typedef ::xsd::qif2::ShellSetType ShellSet_type;
      typedef ::xsd::cxx::tree::optional< ShellSet_type > ShellSet_optional;
      typedef ::xsd::cxx::tree::traits< ShellSet_type, char > ShellSet_traits;

      const ShellSet_optional&
      ShellSet () const;

      ShellSet_optional&
      ShellSet ();

      void
      ShellSet (const ShellSet_type& x);

      void
      ShellSet (const ShellSet_optional& x);

      void
      ShellSet (::std::auto_ptr< ShellSet_type > p);

      // BodySet
      //
      typedef ::xsd::qif2::BodySetType BodySet_type;
      typedef ::xsd::cxx::tree::optional< BodySet_type > BodySet_optional;
      typedef ::xsd::cxx::tree::traits< BodySet_type, char > BodySet_traits;

      const BodySet_optional&
      BodySet () const;

      BodySet_optional&
      BodySet ();

      void
      BodySet (const BodySet_type& x);

      void
      BodySet (const BodySet_optional& x);

      void
      BodySet (::std::auto_ptr< BodySet_type > p);

      // PointCloudSet
      //
      typedef ::xsd::qif2::PointCloudSetType PointCloudSet_type;
      typedef ::xsd::cxx::tree::optional< PointCloudSet_type > PointCloudSet_optional;
      typedef ::xsd::cxx::tree::traits< PointCloudSet_type, char > PointCloudSet_traits;

      const PointCloudSet_optional&
      PointCloudSet () const;

      PointCloudSet_optional&
      PointCloudSet ();

      void
      PointCloudSet (const PointCloudSet_type& x);

      void
      PointCloudSet (const PointCloudSet_optional& x);

      void
      PointCloudSet (::std::auto_ptr< PointCloudSet_type > p);

      // Constructors.
      //
      TopologySetType ();

      TopologySetType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      TopologySetType (const TopologySetType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual TopologySetType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TopologySetType&
      operator= (const TopologySetType& x);

      virtual 
      ~TopologySetType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      VertexSet_optional VertexSet_;
      EdgeSet_optional EdgeSet_;
      LoopSet_optional LoopSet_;
      FaceSet_optional FaceSet_;
      ShellSet_optional ShellSet_;
      BodySet_optional BodySet_;
      PointCloudSet_optional PointCloudSet_;
    };

    class TopologyBaseType: public ::xsd::qif2::DrawableBaseType
    {
      public:
      // Constructors.
      //
      TopologyBaseType (const id_type&);

      TopologyBaseType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      TopologyBaseType (const TopologyBaseType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual TopologyBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~TopologyBaseType ();
    };

    class VertexSetType: public ::xml_schema::type
    {
      public:
      // Vertex
      //
      typedef ::xsd::qif2::VertexType Vertex_type;
      typedef ::xsd::cxx::tree::sequence< Vertex_type > Vertex_sequence;
      typedef Vertex_sequence::iterator Vertex_iterator;
      typedef Vertex_sequence::const_iterator Vertex_const_iterator;
      typedef ::xsd::cxx::tree::traits< Vertex_type, char > Vertex_traits;

      const Vertex_sequence&
      Vertex () const;

      Vertex_sequence&
      Vertex ();

      void
      Vertex (const Vertex_sequence& s);

      // N
      //
      typedef ::xsd::qif2::NaturalType N_type;
      typedef ::xsd::cxx::tree::traits< N_type, char > N_traits;

      const N_type&
      N () const;

      N_type&
      N ();

      void
      N (const N_type& x);

      void
      N (::std::auto_ptr< N_type > p);

      // Constructors.
      //
      VertexSetType (const N_type&);

      VertexSetType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      VertexSetType (const VertexSetType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual VertexSetType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      VertexSetType&
      operator= (const VertexSetType& x);

      virtual 
      ~VertexSetType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Vertex_sequence Vertex_;
      ::xsd::cxx::tree::one< N_type > N_;
    };

    class VertexType: public ::xsd::qif2::TopologyBaseType
    {
      public:
      // Point
      //
      typedef ::xsd::qif2::ElementReferenceType Point_type;
      typedef ::xsd::cxx::tree::traits< Point_type, char > Point_traits;

      const Point_type&
      Point () const;

      Point_type&
      Point ();

      void
      Point (const Point_type& x);

      void
      Point (::std::auto_ptr< Point_type > p);

      // tolerance
      //
      typedef ::xml_schema::double_ tolerance_type;
      typedef ::xsd::cxx::tree::optional< tolerance_type > tolerance_optional;
      typedef ::xsd::cxx::tree::traits< tolerance_type, char, ::xsd::cxx::tree::schema_type::double_ > tolerance_traits;

      const tolerance_optional&
      tolerance () const;

      tolerance_optional&
      tolerance ();

      void
      tolerance (const tolerance_type& x);

      void
      tolerance (const tolerance_optional& x);

      // Constructors.
      //
      VertexType (const id_type&,
                  const Point_type&);

      VertexType (const id_type&,
                  ::std::auto_ptr< Point_type >);

      VertexType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      VertexType (const VertexType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual VertexType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      VertexType&
      operator= (const VertexType& x);

      virtual 
      ~VertexType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Point_type > Point_;
      tolerance_optional tolerance_;
    };

    class EdgeSetType: public ::xml_schema::type
    {
      public:
      // Edge
      //
      typedef ::xsd::qif2::EdgeType Edge_type;
      typedef ::xsd::cxx::tree::sequence< Edge_type > Edge_sequence;
      typedef Edge_sequence::iterator Edge_iterator;
      typedef Edge_sequence::const_iterator Edge_const_iterator;
      typedef ::xsd::cxx::tree::traits< Edge_type, char > Edge_traits;

      const Edge_sequence&
      Edge () const;

      Edge_sequence&
      Edge ();

      void
      Edge (const Edge_sequence& s);

      // N
      //
      typedef ::xsd::qif2::NaturalType N_type;
      typedef ::xsd::cxx::tree::traits< N_type, char > N_traits;

      const N_type&
      N () const;

      N_type&
      N ();

      void
      N (const N_type& x);

      void
      N (::std::auto_ptr< N_type > p);

      // Constructors.
      //
      EdgeSetType (const N_type&);

      EdgeSetType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      EdgeSetType (const EdgeSetType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual EdgeSetType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EdgeSetType&
      operator= (const EdgeSetType& x);

      virtual 
      ~EdgeSetType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Edge_sequence Edge_;
      ::xsd::cxx::tree::one< N_type > N_;
    };

    class EdgeType: public ::xsd::qif2::TopologyBaseType
    {
      public:
      // Curve
      //
      typedef ::xsd::qif2::ElementReferenceType Curve_type;
      typedef ::xsd::cxx::tree::traits< Curve_type, char > Curve_traits;

      const Curve_type&
      Curve () const;

      Curve_type&
      Curve ();

      void
      Curve (const Curve_type& x);

      void
      Curve (::std::auto_ptr< Curve_type > p);

      // VertexBeg
      //
      typedef ::xsd::qif2::ElementReferenceType VertexBeg_type;
      typedef ::xsd::cxx::tree::traits< VertexBeg_type, char > VertexBeg_traits;

      const VertexBeg_type&
      VertexBeg () const;

      VertexBeg_type&
      VertexBeg ();

      void
      VertexBeg (const VertexBeg_type& x);

      void
      VertexBeg (::std::auto_ptr< VertexBeg_type > p);

      // VertexEnd
      //
      typedef ::xsd::qif2::ElementReferenceType VertexEnd_type;
      typedef ::xsd::cxx::tree::traits< VertexEnd_type, char > VertexEnd_traits;

      const VertexEnd_type&
      VertexEnd () const;

      VertexEnd_type&
      VertexEnd ();

      void
      VertexEnd (const VertexEnd_type& x);

      void
      VertexEnd (::std::auto_ptr< VertexEnd_type > p);

      // tolerance
      //
      typedef ::xml_schema::double_ tolerance_type;
      typedef ::xsd::cxx::tree::optional< tolerance_type > tolerance_optional;
      typedef ::xsd::cxx::tree::traits< tolerance_type, char, ::xsd::cxx::tree::schema_type::double_ > tolerance_traits;

      const tolerance_optional&
      tolerance () const;

      tolerance_optional&
      tolerance ();

      void
      tolerance (const tolerance_type& x);

      void
      tolerance (const tolerance_optional& x);

      // Constructors.
      //
      EdgeType (const id_type&,
                const Curve_type&,
                const VertexBeg_type&,
                const VertexEnd_type&);

      EdgeType (const id_type&,
                ::std::auto_ptr< Curve_type >,
                ::std::auto_ptr< VertexBeg_type >,
                ::std::auto_ptr< VertexEnd_type >);

      EdgeType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      EdgeType (const EdgeType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual EdgeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EdgeType&
      operator= (const EdgeType& x);

      virtual 
      ~EdgeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Curve_type > Curve_;
      ::xsd::cxx::tree::one< VertexBeg_type > VertexBeg_;
      ::xsd::cxx::tree::one< VertexEnd_type > VertexEnd_;
      tolerance_optional tolerance_;
    };

    class LoopSetType: public ::xml_schema::type
    {
      public:
      // LoopBase
      //
      typedef ::xsd::qif2::LoopBaseType LoopBase_type;
      typedef ::xsd::cxx::tree::sequence< LoopBase_type > LoopBase_sequence;
      typedef LoopBase_sequence::iterator LoopBase_iterator;
      typedef LoopBase_sequence::const_iterator LoopBase_const_iterator;
      typedef ::xsd::cxx::tree::traits< LoopBase_type, char > LoopBase_traits;

      const LoopBase_sequence&
      LoopBase () const;

      LoopBase_sequence&
      LoopBase ();

      void
      LoopBase (const LoopBase_sequence& s);

      // N
      //
      typedef ::xsd::qif2::NaturalType N_type;
      typedef ::xsd::cxx::tree::traits< N_type, char > N_traits;

      const N_type&
      N () const;

      N_type&
      N ();

      void
      N (const N_type& x);

      void
      N (::std::auto_ptr< N_type > p);

      // Constructors.
      //
      LoopSetType (const N_type&);

      LoopSetType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      LoopSetType (const LoopSetType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual LoopSetType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LoopSetType&
      operator= (const LoopSetType& x);

      virtual 
      ~LoopSetType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      LoopBase_sequence LoopBase_;
      ::xsd::cxx::tree::one< N_type > N_;
    };

    class LoopBaseType: public ::xsd::qif2::TopologyBaseType
    {
      public:
      // Constructors.
      //
      LoopBaseType (const id_type&);

      LoopBaseType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      LoopBaseType (const LoopBaseType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual LoopBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~LoopBaseType ();
    };

    class LoopFormEnumType: public ::xml_schema::string
    {
      public:
      enum value
      {
        UNKNOWN,
        OUTER,
        INNER,
        SLIT
      };

      LoopFormEnumType (value v);

      LoopFormEnumType (const char* v);

      LoopFormEnumType (const ::std::string& v);

      LoopFormEnumType (const ::xml_schema::string& v);

      LoopFormEnumType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      LoopFormEnumType (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      LoopFormEnumType (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      LoopFormEnumType (const LoopFormEnumType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual LoopFormEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LoopFormEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_LoopFormEnumType_convert ();
      }

      protected:
      value
      _xsd_LoopFormEnumType_convert () const;

      public:
      static const char* const _xsd_LoopFormEnumType_literals_[4];
      static const value _xsd_LoopFormEnumType_indexes_[4];
    };

    class EdgeOrientedType: public ::xsd::qif2::ElementReferenceType
    {
      public:
      // turned
      //
      typedef ::xml_schema::boolean turned_type;
      typedef ::xsd::cxx::tree::traits< turned_type, char > turned_traits;

      const turned_type&
      turned () const;

      turned_type&
      turned ();

      void
      turned (const turned_type& x);

      static turned_type
      turned_default_value ();

      // Constructors.
      //
      EdgeOrientedType (const Id_type&);

      EdgeOrientedType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      EdgeOrientedType (const EdgeOrientedType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual EdgeOrientedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EdgeOrientedType&
      operator= (const EdgeOrientedType& x);

      virtual 
      ~EdgeOrientedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< turned_type > turned_;
    };

    class CoEdgeType: public ::xml_schema::type
    {
      public:
      // EdgeOriented
      //
      typedef ::xsd::qif2::EdgeOrientedType EdgeOriented_type;
      typedef ::xsd::cxx::tree::traits< EdgeOriented_type, char > EdgeOriented_traits;

      const EdgeOriented_type&
      EdgeOriented () const;

      EdgeOriented_type&
      EdgeOriented ();

      void
      EdgeOriented (const EdgeOriented_type& x);

      void
      EdgeOriented (::std::auto_ptr< EdgeOriented_type > p);

      // Curve12
      //
      typedef ::xsd::qif2::ElementReferenceType Curve12_type;
      typedef ::xsd::cxx::tree::optional< Curve12_type > Curve12_optional;
      typedef ::xsd::cxx::tree::traits< Curve12_type, char > Curve12_traits;

      const Curve12_optional&
      Curve12 () const;

      Curve12_optional&
      Curve12 ();

      void
      Curve12 (const Curve12_type& x);

      void
      Curve12 (const Curve12_optional& x);

      void
      Curve12 (::std::auto_ptr< Curve12_type > p);

      // Constructors.
      //
      CoEdgeType (const EdgeOriented_type&);

      CoEdgeType (::std::auto_ptr< EdgeOriented_type >);

      CoEdgeType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      CoEdgeType (const CoEdgeType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual CoEdgeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CoEdgeType&
      operator= (const CoEdgeType& x);

      virtual 
      ~CoEdgeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< EdgeOriented_type > EdgeOriented_;
      Curve12_optional Curve12_;
    };

    class CoEdgesType: public ::xml_schema::type
    {
      public:
      // CoEdge
      //
      typedef ::xsd::qif2::CoEdgeType CoEdge_type;
      typedef ::xsd::cxx::tree::sequence< CoEdge_type > CoEdge_sequence;
      typedef CoEdge_sequence::iterator CoEdge_iterator;
      typedef CoEdge_sequence::const_iterator CoEdge_const_iterator;
      typedef ::xsd::cxx::tree::traits< CoEdge_type, char > CoEdge_traits;

      const CoEdge_sequence&
      CoEdge () const;

      CoEdge_sequence&
      CoEdge ();

      void
      CoEdge (const CoEdge_sequence& s);

      // N
      //
      typedef ::xsd::qif2::NaturalType N_type;
      typedef ::xsd::cxx::tree::traits< N_type, char > N_traits;

      const N_type&
      N () const;

      N_type&
      N ();

      void
      N (const N_type& x);

      void
      N (::std::auto_ptr< N_type > p);

      // Constructors.
      //
      CoEdgesType (const N_type&);

      CoEdgesType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      CoEdgesType (const CoEdgesType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual CoEdgesType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CoEdgesType&
      operator= (const CoEdgesType& x);

      virtual 
      ~CoEdgesType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CoEdge_sequence CoEdge_;
      ::xsd::cxx::tree::one< N_type > N_;
    };

    class CoEdgeMeshType: public ::xml_schema::type
    {
      public:
      // EdgeOriented
      //
      typedef ::xsd::qif2::EdgeOrientedType EdgeOriented_type;
      typedef ::xsd::cxx::tree::traits< EdgeOriented_type, char > EdgeOriented_traits;

      const EdgeOriented_type&
      EdgeOriented () const;

      EdgeOriented_type&
      EdgeOriented ();

      void
      EdgeOriented (const EdgeOriented_type& x);

      void
      EdgeOriented (::std::auto_ptr< EdgeOriented_type > p);

      // CurveMesh
      //
      typedef ::xsd::qif2::ElementReferenceType CurveMesh_type;
      typedef ::xsd::cxx::tree::optional< CurveMesh_type > CurveMesh_optional;
      typedef ::xsd::cxx::tree::traits< CurveMesh_type, char > CurveMesh_traits;

      const CurveMesh_optional&
      CurveMesh () const;

      CurveMesh_optional&
      CurveMesh ();

      void
      CurveMesh (const CurveMesh_type& x);

      void
      CurveMesh (const CurveMesh_optional& x);

      void
      CurveMesh (::std::auto_ptr< CurveMesh_type > p);

      // Constructors.
      //
      CoEdgeMeshType (const EdgeOriented_type&);

      CoEdgeMeshType (::std::auto_ptr< EdgeOriented_type >);

      CoEdgeMeshType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      CoEdgeMeshType (const CoEdgeMeshType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual CoEdgeMeshType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CoEdgeMeshType&
      operator= (const CoEdgeMeshType& x);

      virtual 
      ~CoEdgeMeshType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< EdgeOriented_type > EdgeOriented_;
      CurveMesh_optional CurveMesh_;
    };

    class CoEdgesMeshType: public ::xml_schema::type
    {
      public:
      // CoEdgeMesh
      //
      typedef ::xsd::qif2::CoEdgeMeshType CoEdgeMesh_type;
      typedef ::xsd::cxx::tree::sequence< CoEdgeMesh_type > CoEdgeMesh_sequence;
      typedef CoEdgeMesh_sequence::iterator CoEdgeMesh_iterator;
      typedef CoEdgeMesh_sequence::const_iterator CoEdgeMesh_const_iterator;
      typedef ::xsd::cxx::tree::traits< CoEdgeMesh_type, char > CoEdgeMesh_traits;

      const CoEdgeMesh_sequence&
      CoEdgeMesh () const;

      CoEdgeMesh_sequence&
      CoEdgeMesh ();

      void
      CoEdgeMesh (const CoEdgeMesh_sequence& s);

      // N
      //
      typedef ::xsd::qif2::NaturalType N_type;
      typedef ::xsd::cxx::tree::traits< N_type, char > N_traits;

      const N_type&
      N () const;

      N_type&
      N ();

      void
      N (const N_type& x);

      void
      N (::std::auto_ptr< N_type > p);

      // Constructors.
      //
      CoEdgesMeshType (const N_type&);

      CoEdgesMeshType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      CoEdgesMeshType (const CoEdgesMeshType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual CoEdgesMeshType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CoEdgesMeshType&
      operator= (const CoEdgesMeshType& x);

      virtual 
      ~CoEdgesMeshType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CoEdgeMesh_sequence CoEdgeMesh_;
      ::xsd::cxx::tree::one< N_type > N_;
    };

    class LoopType: public ::xsd::qif2::LoopBaseType
    {
      public:
      // CoEdges
      //
      typedef ::xsd::qif2::CoEdgesType CoEdges_type;
      typedef ::xsd::cxx::tree::traits< CoEdges_type, char > CoEdges_traits;

      const CoEdges_type&
      CoEdges () const;

      CoEdges_type&
      CoEdges ();

      void
      CoEdges (const CoEdges_type& x);

      void
      CoEdges (::std::auto_ptr< CoEdges_type > p);

      // form
      //
      typedef ::xsd::qif2::LoopFormEnumType form_type;
      typedef ::xsd::cxx::tree::traits< form_type, char > form_traits;

      const form_type&
      form () const;

      form_type&
      form ();

      void
      form (const form_type& x);

      void
      form (::std::auto_ptr< form_type > p);

      static const form_type&
      form_default_value ();

      // Constructors.
      //
      LoopType (const id_type&,
                const CoEdges_type&);

      LoopType (const id_type&,
                ::std::auto_ptr< CoEdges_type >);

      LoopType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      LoopType (const LoopType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual LoopType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LoopType&
      operator= (const LoopType& x);

      virtual 
      ~LoopType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< CoEdges_type > CoEdges_;
      ::xsd::cxx::tree::one< form_type > form_;
      static const form_type form_default_value_;
    };

    class LoopMeshType: public ::xsd::qif2::LoopBaseType
    {
      public:
      // CoEdgesMesh
      //
      typedef ::xsd::qif2::CoEdgesMeshType CoEdgesMesh_type;
      typedef ::xsd::cxx::tree::traits< CoEdgesMesh_type, char > CoEdgesMesh_traits;

      const CoEdgesMesh_type&
      CoEdgesMesh () const;

      CoEdgesMesh_type&
      CoEdgesMesh ();

      void
      CoEdgesMesh (const CoEdgesMesh_type& x);

      void
      CoEdgesMesh (::std::auto_ptr< CoEdgesMesh_type > p);

      // Constructors.
      //
      LoopMeshType (const id_type&,
                    const CoEdgesMesh_type&);

      LoopMeshType (const id_type&,
                    ::std::auto_ptr< CoEdgesMesh_type >);

      LoopMeshType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      LoopMeshType (const LoopMeshType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual LoopMeshType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LoopMeshType&
      operator= (const LoopMeshType& x);

      virtual 
      ~LoopMeshType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< CoEdgesMesh_type > CoEdgesMesh_;
    };

    class FaceSetType: public ::xml_schema::type
    {
      public:
      // FaceBase
      //
      typedef ::xsd::qif2::FaceBaseType FaceBase_type;
      typedef ::xsd::cxx::tree::sequence< FaceBase_type > FaceBase_sequence;
      typedef FaceBase_sequence::iterator FaceBase_iterator;
      typedef FaceBase_sequence::const_iterator FaceBase_const_iterator;
      typedef ::xsd::cxx::tree::traits< FaceBase_type, char > FaceBase_traits;

      const FaceBase_sequence&
      FaceBase () const;

      FaceBase_sequence&
      FaceBase ();

      void
      FaceBase (const FaceBase_sequence& s);

      // N
      //
      typedef ::xsd::qif2::NaturalType N_type;
      typedef ::xsd::cxx::tree::traits< N_type, char > N_traits;

      const N_type&
      N () const;

      N_type&
      N ();

      void
      N (const N_type& x);

      void
      N (::std::auto_ptr< N_type > p);

      // Constructors.
      //
      FaceSetType (const N_type&);

      FaceSetType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      FaceSetType (const FaceSetType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual FaceSetType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FaceSetType&
      operator= (const FaceSetType& x);

      virtual 
      ~FaceSetType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      FaceBase_sequence FaceBase_;
      ::xsd::cxx::tree::one< N_type > N_;
    };

    class FaceBaseType: public ::xsd::qif2::TopologyBaseType
    {
      public:
      // InertiaMatrix
      //
      typedef ::xsd::qif2::Matrix33Type InertiaMatrix_type;
      typedef ::xsd::cxx::tree::optional< InertiaMatrix_type > InertiaMatrix_optional;
      typedef ::xsd::cxx::tree::traits< InertiaMatrix_type, char > InertiaMatrix_traits;

      const InertiaMatrix_optional&
      InertiaMatrix () const;

      InertiaMatrix_optional&
      InertiaMatrix ();

      void
      InertiaMatrix (const InertiaMatrix_type& x);

      void
      InertiaMatrix (const InertiaMatrix_optional& x);

      void
      InertiaMatrix (::std::auto_ptr< InertiaMatrix_type > p);

      // turned
      //
      typedef ::xml_schema::boolean turned_type;
      typedef ::xsd::cxx::tree::traits< turned_type, char > turned_traits;

      const turned_type&
      turned () const;

      turned_type&
      turned ();

      void
      turned (const turned_type& x);

      static turned_type
      turned_default_value ();

      // area
      //
      typedef ::xml_schema::double_ area_type;
      typedef ::xsd::cxx::tree::optional< area_type > area_optional;
      typedef ::xsd::cxx::tree::traits< area_type, char, ::xsd::cxx::tree::schema_type::double_ > area_traits;

      const area_optional&
      area () const;

      area_optional&
      area ();

      void
      area (const area_type& x);

      void
      area (const area_optional& x);

      // volume
      //
      typedef ::xml_schema::double_ volume_type;
      typedef ::xsd::cxx::tree::optional< volume_type > volume_optional;
      typedef ::xsd::cxx::tree::traits< volume_type, char, ::xsd::cxx::tree::schema_type::double_ > volume_traits;

      const volume_optional&
      volume () const;

      volume_optional&
      volume ();

      void
      volume (const volume_type& x);

      void
      volume (const volume_optional& x);

      // massCenter
      //
      typedef ::xsd::qif2::PointSimpleType massCenter_type;
      typedef ::xsd::cxx::tree::optional< massCenter_type > massCenter_optional;
      typedef ::xsd::cxx::tree::traits< massCenter_type, char > massCenter_traits;

      const massCenter_optional&
      massCenter () const;

      massCenter_optional&
      massCenter ();

      void
      massCenter (const massCenter_type& x);

      void
      massCenter (const massCenter_optional& x);

      void
      massCenter (::std::auto_ptr< massCenter_type > p);

      // Constructors.
      //
      FaceBaseType (const id_type&);

      FaceBaseType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      FaceBaseType (const FaceBaseType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual FaceBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FaceBaseType&
      operator= (const FaceBaseType& x);

      virtual 
      ~FaceBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      InertiaMatrix_optional InertiaMatrix_;
      ::xsd::cxx::tree::one< turned_type > turned_;
      area_optional area_;
      volume_optional volume_;
      massCenter_optional massCenter_;
    };

    class FaceType: public ::xsd::qif2::FaceBaseType
    {
      public:
      // Surface
      //
      typedef ::xsd::qif2::ElementReferenceType Surface_type;
      typedef ::xsd::cxx::tree::traits< Surface_type, char > Surface_traits;

      const Surface_type&
      Surface () const;

      Surface_type&
      Surface ();

      void
      Surface (const Surface_type& x);

      void
      Surface (::std::auto_ptr< Surface_type > p);

      // LoopIds
      //
      typedef ::xsd::qif2::ArrayReferenceType LoopIds_type;
      typedef ::xsd::cxx::tree::optional< LoopIds_type > LoopIds_optional;
      typedef ::xsd::cxx::tree::traits< LoopIds_type, char > LoopIds_traits;

      const LoopIds_optional&
      LoopIds () const;

      LoopIds_optional&
      LoopIds ();

      void
      LoopIds (const LoopIds_type& x);

      void
      LoopIds (const LoopIds_optional& x);

      void
      LoopIds (::std::auto_ptr< LoopIds_type > p);

      // hasOuter
      //
      typedef ::xml_schema::boolean hasOuter_type;
      typedef ::xsd::cxx::tree::traits< hasOuter_type, char > hasOuter_traits;

      const hasOuter_type&
      hasOuter () const;

      hasOuter_type&
      hasOuter ();

      void
      hasOuter (const hasOuter_type& x);

      static hasOuter_type
      hasOuter_default_value ();

      // Constructors.
      //
      FaceType (const id_type&,
                const Surface_type&);

      FaceType (const id_type&,
                ::std::auto_ptr< Surface_type >);

      FaceType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      FaceType (const FaceType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual FaceType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FaceType&
      operator= (const FaceType& x);

      virtual 
      ~FaceType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Surface_type > Surface_;
      LoopIds_optional LoopIds_;
      ::xsd::cxx::tree::one< hasOuter_type > hasOuter_;
    };

    class FaceMeshType: public ::xsd::qif2::FaceBaseType
    {
      public:
      // Mesh
      //
      typedef ::xsd::qif2::ElementReferenceType Mesh_type;
      typedef ::xsd::cxx::tree::traits< Mesh_type, char > Mesh_traits;

      const Mesh_type&
      Mesh () const;

      Mesh_type&
      Mesh ();

      void
      Mesh (const Mesh_type& x);

      void
      Mesh (::std::auto_ptr< Mesh_type > p);

      // LoopIds
      //
      typedef ::xsd::qif2::ArrayReferenceType LoopIds_type;
      typedef ::xsd::cxx::tree::optional< LoopIds_type > LoopIds_optional;
      typedef ::xsd::cxx::tree::traits< LoopIds_type, char > LoopIds_traits;

      const LoopIds_optional&
      LoopIds () const;

      LoopIds_optional&
      LoopIds ();

      void
      LoopIds (const LoopIds_type& x);

      void
      LoopIds (const LoopIds_optional& x);

      void
      LoopIds (::std::auto_ptr< LoopIds_type > p);

      // Triangles
      //
      typedef ::xsd::qif2::ArrayIntType Triangles_type;
      typedef ::xsd::cxx::tree::optional< Triangles_type > Triangles_optional;
      typedef ::xsd::cxx::tree::traits< Triangles_type, char > Triangles_traits;

      const Triangles_optional&
      Triangles () const;

      Triangles_optional&
      Triangles ();

      void
      Triangles (const Triangles_type& x);

      void
      Triangles (const Triangles_optional& x);

      void
      Triangles (::std::auto_ptr< Triangles_type > p);

      // TrianglesBinary
      //
      typedef ::xsd::qif2::ArrayBinaryType TrianglesBinary_type;
      typedef ::xsd::cxx::tree::optional< TrianglesBinary_type > TrianglesBinary_optional;
      typedef ::xsd::cxx::tree::traits< TrianglesBinary_type, char > TrianglesBinary_traits;

      const TrianglesBinary_optional&
      TrianglesBinary () const;

      TrianglesBinary_optional&
      TrianglesBinary ();

      void
      TrianglesBinary (const TrianglesBinary_type& x);

      void
      TrianglesBinary (const TrianglesBinary_optional& x);

      void
      TrianglesBinary (::std::auto_ptr< TrianglesBinary_type > p);

      // TrianglesVisible
      //
      typedef ::xsd::qif2::ArrayIntType TrianglesVisible_type;
      typedef ::xsd::cxx::tree::optional< TrianglesVisible_type > TrianglesVisible_optional;
      typedef ::xsd::cxx::tree::traits< TrianglesVisible_type, char > TrianglesVisible_traits;

      const TrianglesVisible_optional&
      TrianglesVisible () const;

      TrianglesVisible_optional&
      TrianglesVisible ();

      void
      TrianglesVisible (const TrianglesVisible_type& x);

      void
      TrianglesVisible (const TrianglesVisible_optional& x);

      void
      TrianglesVisible (::std::auto_ptr< TrianglesVisible_type > p);

      // TrianglesVisibleBinary
      //
      typedef ::xsd::qif2::ArrayBinaryType TrianglesVisibleBinary_type;
      typedef ::xsd::cxx::tree::optional< TrianglesVisibleBinary_type > TrianglesVisibleBinary_optional;
      typedef ::xsd::cxx::tree::traits< TrianglesVisibleBinary_type, char > TrianglesVisibleBinary_traits;

      const TrianglesVisibleBinary_optional&
      TrianglesVisibleBinary () const;

      TrianglesVisibleBinary_optional&
      TrianglesVisibleBinary ();

      void
      TrianglesVisibleBinary (const TrianglesVisibleBinary_type& x);

      void
      TrianglesVisibleBinary (const TrianglesVisibleBinary_optional& x);

      void
      TrianglesVisibleBinary (::std::auto_ptr< TrianglesVisibleBinary_type > p);

      // TrianglesHidden
      //
      typedef ::xsd::qif2::ArrayIntType TrianglesHidden_type;
      typedef ::xsd::cxx::tree::optional< TrianglesHidden_type > TrianglesHidden_optional;
      typedef ::xsd::cxx::tree::traits< TrianglesHidden_type, char > TrianglesHidden_traits;

      const TrianglesHidden_optional&
      TrianglesHidden () const;

      TrianglesHidden_optional&
      TrianglesHidden ();

      void
      TrianglesHidden (const TrianglesHidden_type& x);

      void
      TrianglesHidden (const TrianglesHidden_optional& x);

      void
      TrianglesHidden (::std::auto_ptr< TrianglesHidden_type > p);

      // TrianglesHiddenBinary
      //
      typedef ::xsd::qif2::ArrayBinaryType TrianglesHiddenBinary_type;
      typedef ::xsd::cxx::tree::optional< TrianglesHiddenBinary_type > TrianglesHiddenBinary_optional;
      typedef ::xsd::cxx::tree::traits< TrianglesHiddenBinary_type, char > TrianglesHiddenBinary_traits;

      const TrianglesHiddenBinary_optional&
      TrianglesHiddenBinary () const;

      TrianglesHiddenBinary_optional&
      TrianglesHiddenBinary ();

      void
      TrianglesHiddenBinary (const TrianglesHiddenBinary_type& x);

      void
      TrianglesHiddenBinary (const TrianglesHiddenBinary_optional& x);

      void
      TrianglesHiddenBinary (::std::auto_ptr< TrianglesHiddenBinary_type > p);

      // TrianglesColor
      //
      typedef ::xsd::qif2::ArrayUnsignedByteType TrianglesColor_type;
      typedef ::xsd::cxx::tree::optional< TrianglesColor_type > TrianglesColor_optional;
      typedef ::xsd::cxx::tree::traits< TrianglesColor_type, char > TrianglesColor_traits;

      const TrianglesColor_optional&
      TrianglesColor () const;

      TrianglesColor_optional&
      TrianglesColor ();

      void
      TrianglesColor (const TrianglesColor_type& x);

      void
      TrianglesColor (const TrianglesColor_optional& x);

      void
      TrianglesColor (::std::auto_ptr< TrianglesColor_type > p);

      // TrianglesColorBinary
      //
      typedef ::xsd::qif2::ArrayBinaryType TrianglesColorBinary_type;
      typedef ::xsd::cxx::tree::optional< TrianglesColorBinary_type > TrianglesColorBinary_optional;
      typedef ::xsd::cxx::tree::traits< TrianglesColorBinary_type, char > TrianglesColorBinary_traits;

      const TrianglesColorBinary_optional&
      TrianglesColorBinary () const;

      TrianglesColorBinary_optional&
      TrianglesColorBinary ();

      void
      TrianglesColorBinary (const TrianglesColorBinary_type& x);

      void
      TrianglesColorBinary (const TrianglesColorBinary_optional& x);

      void
      TrianglesColorBinary (::std::auto_ptr< TrianglesColorBinary_type > p);

      // Constructors.
      //
      FaceMeshType (const id_type&,
                    const Mesh_type&);

      FaceMeshType (const id_type&,
                    ::std::auto_ptr< Mesh_type >);

      FaceMeshType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      FaceMeshType (const FaceMeshType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual FaceMeshType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FaceMeshType&
      operator= (const FaceMeshType& x);

      virtual 
      ~FaceMeshType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Mesh_type > Mesh_;
      LoopIds_optional LoopIds_;
      Triangles_optional Triangles_;
      TrianglesBinary_optional TrianglesBinary_;
      TrianglesVisible_optional TrianglesVisible_;
      TrianglesVisibleBinary_optional TrianglesVisibleBinary_;
      TrianglesHidden_optional TrianglesHidden_;
      TrianglesHiddenBinary_optional TrianglesHiddenBinary_;
      TrianglesColor_optional TrianglesColor_;
      TrianglesColorBinary_optional TrianglesColorBinary_;
    };

    class ShellSetType: public ::xml_schema::type
    {
      public:
      // Shell
      //
      typedef ::xsd::qif2::ShellType Shell_type;
      typedef ::xsd::cxx::tree::sequence< Shell_type > Shell_sequence;
      typedef Shell_sequence::iterator Shell_iterator;
      typedef Shell_sequence::const_iterator Shell_const_iterator;
      typedef ::xsd::cxx::tree::traits< Shell_type, char > Shell_traits;

      const Shell_sequence&
      Shell () const;

      Shell_sequence&
      Shell ();

      void
      Shell (const Shell_sequence& s);

      // N
      //
      typedef ::xsd::qif2::NaturalType N_type;
      typedef ::xsd::cxx::tree::traits< N_type, char > N_traits;

      const N_type&
      N () const;

      N_type&
      N ();

      void
      N (const N_type& x);

      void
      N (::std::auto_ptr< N_type > p);

      // Constructors.
      //
      ShellSetType (const N_type&);

      ShellSetType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      ShellSetType (const ShellSetType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual ShellSetType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ShellSetType&
      operator= (const ShellSetType& x);

      virtual 
      ~ShellSetType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Shell_sequence Shell_;
      ::xsd::cxx::tree::one< N_type > N_;
    };

    class ShellFormEnumType: public ::xml_schema::string
    {
      public:
      enum value
      {
        UNKNOWN,
        OUTER,
        INNER
      };

      ShellFormEnumType (value v);

      ShellFormEnumType (const char* v);

      ShellFormEnumType (const ::std::string& v);

      ShellFormEnumType (const ::xml_schema::string& v);

      ShellFormEnumType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      ShellFormEnumType (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      ShellFormEnumType (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      ShellFormEnumType (const ShellFormEnumType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual ShellFormEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ShellFormEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_ShellFormEnumType_convert ();
      }

      protected:
      value
      _xsd_ShellFormEnumType_convert () const;

      public:
      static const char* const _xsd_ShellFormEnumType_literals_[3];
      static const value _xsd_ShellFormEnumType_indexes_[3];
    };

    class ShellType: public ::xsd::qif2::TopologyBaseType
    {
      public:
      // FaceIds
      //
      typedef ::xsd::qif2::ArrayReferenceType FaceIds_type;
      typedef ::xsd::cxx::tree::optional< FaceIds_type > FaceIds_optional;
      typedef ::xsd::cxx::tree::traits< FaceIds_type, char > FaceIds_traits;

      const FaceIds_optional&
      FaceIds () const;

      FaceIds_optional&
      FaceIds ();

      void
      FaceIds (const FaceIds_type& x);

      void
      FaceIds (const FaceIds_optional& x);

      void
      FaceIds (::std::auto_ptr< FaceIds_type > p);

      // turned
      //
      typedef ::xml_schema::boolean turned_type;
      typedef ::xsd::cxx::tree::traits< turned_type, char > turned_traits;

      const turned_type&
      turned () const;

      turned_type&
      turned ();

      void
      turned (const turned_type& x);

      static turned_type
      turned_default_value ();

      // closed
      //
      typedef ::xml_schema::boolean closed_type;
      typedef ::xsd::cxx::tree::traits< closed_type, char > closed_traits;

      const closed_type&
      closed () const;

      closed_type&
      closed ();

      void
      closed (const closed_type& x);

      static closed_type
      closed_default_value ();

      // form
      //
      typedef ::xsd::qif2::ShellFormEnumType form_type;
      typedef ::xsd::cxx::tree::traits< form_type, char > form_traits;

      const form_type&
      form () const;

      form_type&
      form ();

      void
      form (const form_type& x);

      void
      form (::std::auto_ptr< form_type > p);

      static const form_type&
      form_default_value ();

      // Constructors.
      //
      ShellType (const id_type&);

      ShellType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      ShellType (const ShellType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual ShellType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ShellType&
      operator= (const ShellType& x);

      virtual 
      ~ShellType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      FaceIds_optional FaceIds_;
      ::xsd::cxx::tree::one< turned_type > turned_;
      ::xsd::cxx::tree::one< closed_type > closed_;
      ::xsd::cxx::tree::one< form_type > form_;
      static const form_type form_default_value_;
    };

    class BodySetType: public ::xml_schema::type
    {
      public:
      // Body
      //
      typedef ::xsd::qif2::BodyType Body_type;
      typedef ::xsd::cxx::tree::sequence< Body_type > Body_sequence;
      typedef Body_sequence::iterator Body_iterator;
      typedef Body_sequence::const_iterator Body_const_iterator;
      typedef ::xsd::cxx::tree::traits< Body_type, char > Body_traits;

      const Body_sequence&
      Body () const;

      Body_sequence&
      Body ();

      void
      Body (const Body_sequence& s);

      // N
      //
      typedef ::xsd::qif2::NaturalType N_type;
      typedef ::xsd::cxx::tree::traits< N_type, char > N_traits;

      const N_type&
      N () const;

      N_type&
      N ();

      void
      N (const N_type& x);

      void
      N (::std::auto_ptr< N_type > p);

      // Constructors.
      //
      BodySetType (const N_type&);

      BodySetType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      BodySetType (const BodySetType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual BodySetType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      BodySetType&
      operator= (const BodySetType& x);

      virtual 
      ~BodySetType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Body_sequence Body_;
      ::xsd::cxx::tree::one< N_type > N_;
    };

    class BodyType: public ::xsd::qif2::TopologyBaseType
    {
      public:
      // Transform
      //
      typedef ::xsd::qif2::ElementReferenceType Transform_type;
      typedef ::xsd::cxx::tree::optional< Transform_type > Transform_optional;
      typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

      const Transform_optional&
      Transform () const;

      Transform_optional&
      Transform ();

      void
      Transform (const Transform_type& x);

      void
      Transform (const Transform_optional& x);

      void
      Transform (::std::auto_ptr< Transform_type > p);

      // ShellIds
      //
      typedef ::xsd::qif2::ArrayReferenceType ShellIds_type;
      typedef ::xsd::cxx::tree::optional< ShellIds_type > ShellIds_optional;
      typedef ::xsd::cxx::tree::traits< ShellIds_type, char > ShellIds_traits;

      const ShellIds_optional&
      ShellIds () const;

      ShellIds_optional&
      ShellIds ();

      void
      ShellIds (const ShellIds_type& x);

      void
      ShellIds (const ShellIds_optional& x);

      void
      ShellIds (::std::auto_ptr< ShellIds_type > p);

      // FaceIds
      //
      typedef ::xsd::qif2::ArrayReferenceType FaceIds_type;
      typedef ::xsd::cxx::tree::optional< FaceIds_type > FaceIds_optional;
      typedef ::xsd::cxx::tree::traits< FaceIds_type, char > FaceIds_traits;

      const FaceIds_optional&
      FaceIds () const;

      FaceIds_optional&
      FaceIds ();

      void
      FaceIds (const FaceIds_type& x);

      void
      FaceIds (const FaceIds_optional& x);

      void
      FaceIds (::std::auto_ptr< FaceIds_type > p);

      // LoopIds
      //
      typedef ::xsd::qif2::ArrayReferenceType LoopIds_type;
      typedef ::xsd::cxx::tree::optional< LoopIds_type > LoopIds_optional;
      typedef ::xsd::cxx::tree::traits< LoopIds_type, char > LoopIds_traits;

      const LoopIds_optional&
      LoopIds () const;

      LoopIds_optional&
      LoopIds ();

      void
      LoopIds (const LoopIds_type& x);

      void
      LoopIds (const LoopIds_optional& x);

      void
      LoopIds (::std::auto_ptr< LoopIds_type > p);

      // EdgeIds
      //
      typedef ::xsd::qif2::ArrayReferenceType EdgeIds_type;
      typedef ::xsd::cxx::tree::optional< EdgeIds_type > EdgeIds_optional;
      typedef ::xsd::cxx::tree::traits< EdgeIds_type, char > EdgeIds_traits;

      const EdgeIds_optional&
      EdgeIds () const;

      EdgeIds_optional&
      EdgeIds ();

      void
      EdgeIds (const EdgeIds_type& x);

      void
      EdgeIds (const EdgeIds_optional& x);

      void
      EdgeIds (::std::auto_ptr< EdgeIds_type > p);

      // VertexIds
      //
      typedef ::xsd::qif2::ArrayReferenceType VertexIds_type;
      typedef ::xsd::cxx::tree::optional< VertexIds_type > VertexIds_optional;
      typedef ::xsd::cxx::tree::traits< VertexIds_type, char > VertexIds_traits;

      const VertexIds_optional&
      VertexIds () const;

      VertexIds_optional&
      VertexIds ();

      void
      VertexIds (const VertexIds_type& x);

      void
      VertexIds (const VertexIds_optional& x);

      void
      VertexIds (::std::auto_ptr< VertexIds_type > p);

      // Constructors.
      //
      BodyType (const id_type&);

      BodyType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      BodyType (const BodyType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual BodyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      BodyType&
      operator= (const BodyType& x);

      virtual 
      ~BodyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Transform_optional Transform_;
      ShellIds_optional ShellIds_;
      FaceIds_optional FaceIds_;
      LoopIds_optional LoopIds_;
      EdgeIds_optional EdgeIds_;
      VertexIds_optional VertexIds_;
    };

    class PointCloudSetType: public ::xml_schema::type
    {
      public:
      // PointCloud
      //
      typedef ::xsd::qif2::PointCloudType PointCloud_type;
      typedef ::xsd::cxx::tree::sequence< PointCloud_type > PointCloud_sequence;
      typedef PointCloud_sequence::iterator PointCloud_iterator;
      typedef PointCloud_sequence::const_iterator PointCloud_const_iterator;
      typedef ::xsd::cxx::tree::traits< PointCloud_type, char > PointCloud_traits;

      const PointCloud_sequence&
      PointCloud () const;

      PointCloud_sequence&
      PointCloud ();

      void
      PointCloud (const PointCloud_sequence& s);

      // N
      //
      typedef ::xsd::qif2::NaturalType N_type;
      typedef ::xsd::cxx::tree::traits< N_type, char > N_traits;

      const N_type&
      N () const;

      N_type&
      N ();

      void
      N (const N_type& x);

      void
      N (::std::auto_ptr< N_type > p);

      // Constructors.
      //
      PointCloudSetType (const N_type&);

      PointCloudSetType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      PointCloudSetType (const PointCloudSetType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual PointCloudSetType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointCloudSetType&
      operator= (const PointCloudSetType& x);

      virtual 
      ~PointCloudSetType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      PointCloud_sequence PointCloud_;
      ::xsd::cxx::tree::one< N_type > N_;
    };

    class PointCloudType: public ::xsd::qif2::TopologyBaseType
    {
      public:
      // Points
      //
      typedef ::xsd::qif2::ArrayPointType Points_type;
      typedef ::xsd::cxx::tree::optional< Points_type > Points_optional;
      typedef ::xsd::cxx::tree::traits< Points_type, char > Points_traits;

      const Points_optional&
      Points () const;

      Points_optional&
      Points ();

      void
      Points (const Points_type& x);

      void
      Points (const Points_optional& x);

      void
      Points (::std::auto_ptr< Points_type > p);

      // PointsBinary
      //
      typedef ::xsd::qif2::ArrayBinaryType PointsBinary_type;
      typedef ::xsd::cxx::tree::optional< PointsBinary_type > PointsBinary_optional;
      typedef ::xsd::cxx::tree::traits< PointsBinary_type, char > PointsBinary_traits;

      const PointsBinary_optional&
      PointsBinary () const;

      PointsBinary_optional&
      PointsBinary ();

      void
      PointsBinary (const PointsBinary_type& x);

      void
      PointsBinary (const PointsBinary_optional& x);

      void
      PointsBinary (::std::auto_ptr< PointsBinary_type > p);

      // Normals
      //
      typedef ::xsd::qif2::ArrayUnitVectorType Normals_type;
      typedef ::xsd::cxx::tree::optional< Normals_type > Normals_optional;
      typedef ::xsd::cxx::tree::traits< Normals_type, char > Normals_traits;

      const Normals_optional&
      Normals () const;

      Normals_optional&
      Normals ();

      void
      Normals (const Normals_type& x);

      void
      Normals (const Normals_optional& x);

      void
      Normals (::std::auto_ptr< Normals_type > p);

      // NormalsBinary
      //
      typedef ::xsd::qif2::ArrayBinaryType NormalsBinary_type;
      typedef ::xsd::cxx::tree::optional< NormalsBinary_type > NormalsBinary_optional;
      typedef ::xsd::cxx::tree::traits< NormalsBinary_type, char > NormalsBinary_traits;

      const NormalsBinary_optional&
      NormalsBinary () const;

      NormalsBinary_optional&
      NormalsBinary ();

      void
      NormalsBinary (const NormalsBinary_type& x);

      void
      NormalsBinary (const NormalsBinary_optional& x);

      void
      NormalsBinary (::std::auto_ptr< NormalsBinary_type > p);

      // PointsVisible
      //
      typedef ::xsd::qif2::ArrayIntType PointsVisible_type;
      typedef ::xsd::cxx::tree::optional< PointsVisible_type > PointsVisible_optional;
      typedef ::xsd::cxx::tree::traits< PointsVisible_type, char > PointsVisible_traits;

      const PointsVisible_optional&
      PointsVisible () const;

      PointsVisible_optional&
      PointsVisible ();

      void
      PointsVisible (const PointsVisible_type& x);

      void
      PointsVisible (const PointsVisible_optional& x);

      void
      PointsVisible (::std::auto_ptr< PointsVisible_type > p);

      // PointsVisibleBinary
      //
      typedef ::xsd::qif2::ArrayBinaryType PointsVisibleBinary_type;
      typedef ::xsd::cxx::tree::optional< PointsVisibleBinary_type > PointsVisibleBinary_optional;
      typedef ::xsd::cxx::tree::traits< PointsVisibleBinary_type, char > PointsVisibleBinary_traits;

      const PointsVisibleBinary_optional&
      PointsVisibleBinary () const;

      PointsVisibleBinary_optional&
      PointsVisibleBinary ();

      void
      PointsVisibleBinary (const PointsVisibleBinary_type& x);

      void
      PointsVisibleBinary (const PointsVisibleBinary_optional& x);

      void
      PointsVisibleBinary (::std::auto_ptr< PointsVisibleBinary_type > p);

      // PointsHidden
      //
      typedef ::xsd::qif2::ArrayIntType PointsHidden_type;
      typedef ::xsd::cxx::tree::optional< PointsHidden_type > PointsHidden_optional;
      typedef ::xsd::cxx::tree::traits< PointsHidden_type, char > PointsHidden_traits;

      const PointsHidden_optional&
      PointsHidden () const;

      PointsHidden_optional&
      PointsHidden ();

      void
      PointsHidden (const PointsHidden_type& x);

      void
      PointsHidden (const PointsHidden_optional& x);

      void
      PointsHidden (::std::auto_ptr< PointsHidden_type > p);

      // PointsHiddenBinary
      //
      typedef ::xsd::qif2::ArrayBinaryType PointsHiddenBinary_type;
      typedef ::xsd::cxx::tree::optional< PointsHiddenBinary_type > PointsHiddenBinary_optional;
      typedef ::xsd::cxx::tree::traits< PointsHiddenBinary_type, char > PointsHiddenBinary_traits;

      const PointsHiddenBinary_optional&
      PointsHiddenBinary () const;

      PointsHiddenBinary_optional&
      PointsHiddenBinary ();

      void
      PointsHiddenBinary (const PointsHiddenBinary_type& x);

      void
      PointsHiddenBinary (const PointsHiddenBinary_optional& x);

      void
      PointsHiddenBinary (::std::auto_ptr< PointsHiddenBinary_type > p);

      // PointsColor
      //
      typedef ::xsd::qif2::ArrayUnsignedByteType PointsColor_type;
      typedef ::xsd::cxx::tree::optional< PointsColor_type > PointsColor_optional;
      typedef ::xsd::cxx::tree::traits< PointsColor_type, char > PointsColor_traits;

      const PointsColor_optional&
      PointsColor () const;

      PointsColor_optional&
      PointsColor ();

      void
      PointsColor (const PointsColor_type& x);

      void
      PointsColor (const PointsColor_optional& x);

      void
      PointsColor (::std::auto_ptr< PointsColor_type > p);

      // PointsColorBinary
      //
      typedef ::xsd::qif2::ArrayBinaryType PointsColorBinary_type;
      typedef ::xsd::cxx::tree::optional< PointsColorBinary_type > PointsColorBinary_optional;
      typedef ::xsd::cxx::tree::traits< PointsColorBinary_type, char > PointsColorBinary_traits;

      const PointsColorBinary_optional&
      PointsColorBinary () const;

      PointsColorBinary_optional&
      PointsColorBinary ();

      void
      PointsColorBinary (const PointsColorBinary_type& x);

      void
      PointsColorBinary (const PointsColorBinary_optional& x);

      void
      PointsColorBinary (::std::auto_ptr< PointsColorBinary_type > p);

      // Constructors.
      //
      PointCloudType (const id_type&);

      PointCloudType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      PointCloudType (const PointCloudType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual PointCloudType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointCloudType&
      operator= (const PointCloudType& x);

      virtual 
      ~PointCloudType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Points_optional Points_;
      PointsBinary_optional PointsBinary_;
      Normals_optional Normals_;
      NormalsBinary_optional NormalsBinary_;
      PointsVisible_optional PointsVisible_;
      PointsVisibleBinary_optional PointsVisibleBinary_;
      PointsHidden_optional PointsHidden_;
      PointsHiddenBinary_optional PointsHiddenBinary_;
      PointsColor_optional PointsColor_;
      PointsColorBinary_optional PointsColorBinary_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xsd
{
  namespace qif2
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::TopologySetType >
    TopologySet (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TopologySetType >
    TopologySet (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TopologySetType >
    TopologySet (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::TopologySetType >
    TopologySet (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TopologySetType >
    TopologySet (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TopologySetType >
    TopologySet (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TopologySetType >
    TopologySet (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TopologySetType >
    TopologySet (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TopologySetType >
    TopologySet (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::TopologySetType >
    TopologySet (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TopologySetType >
    TopologySet (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TopologySetType >
    TopologySet (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::TopologySetType >
    TopologySet (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TopologySetType >
    TopologySet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::VertexSetType >
    VertexSet (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VertexSetType >
    VertexSet (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VertexSetType >
    VertexSet (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::VertexSetType >
    VertexSet (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VertexSetType >
    VertexSet (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VertexSetType >
    VertexSet (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VertexSetType >
    VertexSet (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VertexSetType >
    VertexSet (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VertexSetType >
    VertexSet (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::VertexSetType >
    VertexSet (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VertexSetType >
    VertexSet (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VertexSetType >
    VertexSet (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::VertexSetType >
    VertexSet (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VertexSetType >
    VertexSet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::VertexType >
    Vertex (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VertexType >
    Vertex (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VertexType >
    Vertex (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::VertexType >
    Vertex (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VertexType >
    Vertex (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VertexType >
    Vertex (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VertexType >
    Vertex (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VertexType >
    Vertex (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VertexType >
    Vertex (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::VertexType >
    Vertex (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VertexType >
    Vertex (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VertexType >
    Vertex (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::VertexType >
    Vertex (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VertexType >
    Vertex (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgeSetType >
    EdgeSet (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgeSetType >
    EdgeSet (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgeSetType >
    EdgeSet (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgeSetType >
    EdgeSet (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgeSetType >
    EdgeSet (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgeSetType >
    EdgeSet (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgeSetType >
    EdgeSet (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgeSetType >
    EdgeSet (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgeSetType >
    EdgeSet (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgeSetType >
    EdgeSet (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgeSetType >
    EdgeSet (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgeSetType >
    EdgeSet (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgeSetType >
    EdgeSet (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgeSetType >
    EdgeSet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgeType >
    Edge (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgeType >
    Edge (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgeType >
    Edge (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgeType >
    Edge (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgeType >
    Edge (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgeType >
    Edge (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgeType >
    Edge (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgeType >
    Edge (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgeType >
    Edge (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgeType >
    Edge (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgeType >
    Edge (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgeType >
    Edge (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::EdgeType >
    Edge (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EdgeType >
    Edge (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LoopSetType >
    LoopSet (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopSetType >
    LoopSet (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopSetType >
    LoopSet (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LoopSetType >
    LoopSet (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopSetType >
    LoopSet (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopSetType >
    LoopSet (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopSetType >
    LoopSet (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopSetType >
    LoopSet (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopSetType >
    LoopSet (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LoopSetType >
    LoopSet (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopSetType >
    LoopSet (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopSetType >
    LoopSet (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LoopSetType >
    LoopSet (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopSetType >
    LoopSet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LoopBaseType >
    LoopBase (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopBaseType >
    LoopBase (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopBaseType >
    LoopBase (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LoopBaseType >
    LoopBase (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopBaseType >
    LoopBase (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopBaseType >
    LoopBase (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopBaseType >
    LoopBase (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopBaseType >
    LoopBase (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopBaseType >
    LoopBase (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LoopBaseType >
    LoopBase (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopBaseType >
    LoopBase (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopBaseType >
    LoopBase (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LoopBaseType >
    LoopBase (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopBaseType >
    LoopBase (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LoopType >
    Loop (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopType >
    Loop (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopType >
    Loop (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LoopType >
    Loop (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopType >
    Loop (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopType >
    Loop (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopType >
    Loop (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopType >
    Loop (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopType >
    Loop (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LoopType >
    Loop (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopType >
    Loop (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopType >
    Loop (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LoopType >
    Loop (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopType >
    Loop (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LoopMeshType >
    LoopMesh (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopMeshType >
    LoopMesh (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopMeshType >
    LoopMesh (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LoopMeshType >
    LoopMesh (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopMeshType >
    LoopMesh (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopMeshType >
    LoopMesh (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopMeshType >
    LoopMesh (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopMeshType >
    LoopMesh (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopMeshType >
    LoopMesh (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LoopMeshType >
    LoopMesh (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopMeshType >
    LoopMesh (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopMeshType >
    LoopMesh (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LoopMeshType >
    LoopMesh (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LoopMeshType >
    LoopMesh (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FaceSetType >
    FaceSet (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceSetType >
    FaceSet (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceSetType >
    FaceSet (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FaceSetType >
    FaceSet (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceSetType >
    FaceSet (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceSetType >
    FaceSet (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceSetType >
    FaceSet (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceSetType >
    FaceSet (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceSetType >
    FaceSet (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FaceSetType >
    FaceSet (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceSetType >
    FaceSet (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceSetType >
    FaceSet (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FaceSetType >
    FaceSet (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceSetType >
    FaceSet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FaceBaseType >
    FaceBase (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceBaseType >
    FaceBase (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceBaseType >
    FaceBase (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FaceBaseType >
    FaceBase (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceBaseType >
    FaceBase (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceBaseType >
    FaceBase (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceBaseType >
    FaceBase (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceBaseType >
    FaceBase (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceBaseType >
    FaceBase (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FaceBaseType >
    FaceBase (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceBaseType >
    FaceBase (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceBaseType >
    FaceBase (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FaceBaseType >
    FaceBase (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceBaseType >
    FaceBase (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FaceType >
    Face (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceType >
    Face (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceType >
    Face (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FaceType >
    Face (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceType >
    Face (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceType >
    Face (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceType >
    Face (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceType >
    Face (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceType >
    Face (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FaceType >
    Face (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceType >
    Face (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceType >
    Face (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FaceType >
    Face (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceType >
    Face (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FaceMeshType >
    FaceMesh (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceMeshType >
    FaceMesh (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceMeshType >
    FaceMesh (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FaceMeshType >
    FaceMesh (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceMeshType >
    FaceMesh (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceMeshType >
    FaceMesh (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceMeshType >
    FaceMesh (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceMeshType >
    FaceMesh (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceMeshType >
    FaceMesh (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FaceMeshType >
    FaceMesh (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceMeshType >
    FaceMesh (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceMeshType >
    FaceMesh (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FaceMeshType >
    FaceMesh (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FaceMeshType >
    FaceMesh (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ShellSetType >
    ShellSet (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShellSetType >
    ShellSet (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShellSetType >
    ShellSet (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ShellSetType >
    ShellSet (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShellSetType >
    ShellSet (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShellSetType >
    ShellSet (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShellSetType >
    ShellSet (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShellSetType >
    ShellSet (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShellSetType >
    ShellSet (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ShellSetType >
    ShellSet (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShellSetType >
    ShellSet (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShellSetType >
    ShellSet (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ShellSetType >
    ShellSet (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShellSetType >
    ShellSet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ShellType >
    Shell (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShellType >
    Shell (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShellType >
    Shell (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ShellType >
    Shell (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShellType >
    Shell (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShellType >
    Shell (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShellType >
    Shell (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShellType >
    Shell (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShellType >
    Shell (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ShellType >
    Shell (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShellType >
    Shell (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShellType >
    Shell (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ShellType >
    Shell (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ShellType >
    Shell (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::BodySetType >
    BodySet (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BodySetType >
    BodySet (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BodySetType >
    BodySet (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::BodySetType >
    BodySet (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BodySetType >
    BodySet (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BodySetType >
    BodySet (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BodySetType >
    BodySet (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BodySetType >
    BodySet (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BodySetType >
    BodySet (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::BodySetType >
    BodySet (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BodySetType >
    BodySet (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BodySetType >
    BodySet (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::BodySetType >
    BodySet (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BodySetType >
    BodySet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::BodyType >
    Body (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BodyType >
    Body (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BodyType >
    Body (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::BodyType >
    Body (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BodyType >
    Body (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BodyType >
    Body (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BodyType >
    Body (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BodyType >
    Body (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BodyType >
    Body (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::BodyType >
    Body (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BodyType >
    Body (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BodyType >
    Body (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::BodyType >
    Body (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BodyType >
    Body (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PointCloudSetType >
    PointCloudSet (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointCloudSetType >
    PointCloudSet (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointCloudSetType >
    PointCloudSet (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PointCloudSetType >
    PointCloudSet (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointCloudSetType >
    PointCloudSet (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointCloudSetType >
    PointCloudSet (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointCloudSetType >
    PointCloudSet (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointCloudSetType >
    PointCloudSet (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointCloudSetType >
    PointCloudSet (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PointCloudSetType >
    PointCloudSet (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointCloudSetType >
    PointCloudSet (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointCloudSetType >
    PointCloudSet (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PointCloudSetType >
    PointCloudSet (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointCloudSetType >
    PointCloudSet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PointCloudType >
    PointCloud (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointCloudType >
    PointCloud (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointCloudType >
    PointCloud (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PointCloudType >
    PointCloud (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointCloudType >
    PointCloud (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointCloudType >
    PointCloud (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointCloudType >
    PointCloud (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointCloudType >
    PointCloud (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointCloudType >
    PointCloud (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PointCloudType >
    PointCloud (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointCloudType >
    PointCloud (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointCloudType >
    PointCloud (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PointCloudType >
    PointCloud (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointCloudType >
    PointCloud (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xsd
{
  namespace qif2
  {
    void
    operator<< (::xercesc::DOMElement&, const TopologySetType&);

    void
    operator<< (::xercesc::DOMElement&, const TopologyBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const VertexSetType&);

    void
    operator<< (::xercesc::DOMElement&, const VertexType&);

    void
    operator<< (::xercesc::DOMElement&, const EdgeSetType&);

    void
    operator<< (::xercesc::DOMElement&, const EdgeType&);

    void
    operator<< (::xercesc::DOMElement&, const LoopSetType&);

    void
    operator<< (::xercesc::DOMElement&, const LoopBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const LoopFormEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const LoopFormEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const LoopFormEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const EdgeOrientedType&);

    void
    operator<< (::xercesc::DOMElement&, const CoEdgeType&);

    void
    operator<< (::xercesc::DOMElement&, const CoEdgesType&);

    void
    operator<< (::xercesc::DOMElement&, const CoEdgeMeshType&);

    void
    operator<< (::xercesc::DOMElement&, const CoEdgesMeshType&);

    void
    operator<< (::xercesc::DOMElement&, const LoopType&);

    void
    operator<< (::xercesc::DOMElement&, const LoopMeshType&);

    void
    operator<< (::xercesc::DOMElement&, const FaceSetType&);

    void
    operator<< (::xercesc::DOMElement&, const FaceBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const FaceType&);

    void
    operator<< (::xercesc::DOMElement&, const FaceMeshType&);

    void
    operator<< (::xercesc::DOMElement&, const ShellSetType&);

    void
    operator<< (::xercesc::DOMElement&, const ShellFormEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const ShellFormEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ShellFormEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const ShellType&);

    void
    operator<< (::xercesc::DOMElement&, const BodySetType&);

    void
    operator<< (::xercesc::DOMElement&, const BodyType&);

    void
    operator<< (::xercesc::DOMElement&, const PointCloudSetType&);

    void
    operator<< (::xercesc::DOMElement&, const PointCloudType&);

    // Serialize to std::ostream.
    //

    void
    TopologySet (::std::ostream& os,
                 const ::xsd::qif2::TopologySetType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    void
    TopologySet (::std::ostream& os,
                 const ::xsd::qif2::TopologySetType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    void
    TopologySet (::std::ostream& os,
                 const ::xsd::qif2::TopologySetType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    TopologySet (::xercesc::XMLFormatTarget& ft,
                 const ::xsd::qif2::TopologySetType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    void
    TopologySet (::xercesc::XMLFormatTarget& ft,
                 const ::xsd::qif2::TopologySetType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    void
    TopologySet (::xercesc::XMLFormatTarget& ft,
                 const ::xsd::qif2::TopologySetType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    TopologySet (::xercesc::DOMDocument& d,
                 const ::xsd::qif2::TopologySetType& x,
                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    TopologySet (const ::xsd::qif2::TopologySetType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    VertexSet (::std::ostream& os,
               const ::xsd::qif2::VertexSetType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    void
    VertexSet (::std::ostream& os,
               const ::xsd::qif2::VertexSetType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    void
    VertexSet (::std::ostream& os,
               const ::xsd::qif2::VertexSetType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    VertexSet (::xercesc::XMLFormatTarget& ft,
               const ::xsd::qif2::VertexSetType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    void
    VertexSet (::xercesc::XMLFormatTarget& ft,
               const ::xsd::qif2::VertexSetType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    void
    VertexSet (::xercesc::XMLFormatTarget& ft,
               const ::xsd::qif2::VertexSetType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    VertexSet (::xercesc::DOMDocument& d,
               const ::xsd::qif2::VertexSetType& x,
               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    VertexSet (const ::xsd::qif2::VertexSetType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Vertex (::std::ostream& os,
            const ::xsd::qif2::VertexType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    void
    Vertex (::std::ostream& os,
            const ::xsd::qif2::VertexType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    void
    Vertex (::std::ostream& os,
            const ::xsd::qif2::VertexType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Vertex (::xercesc::XMLFormatTarget& ft,
            const ::xsd::qif2::VertexType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    void
    Vertex (::xercesc::XMLFormatTarget& ft,
            const ::xsd::qif2::VertexType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    void
    Vertex (::xercesc::XMLFormatTarget& ft,
            const ::xsd::qif2::VertexType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Vertex (::xercesc::DOMDocument& d,
            const ::xsd::qif2::VertexType& x,
            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Vertex (const ::xsd::qif2::VertexType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    EdgeSet (::std::ostream& os,
             const ::xsd::qif2::EdgeSetType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    void
    EdgeSet (::std::ostream& os,
             const ::xsd::qif2::EdgeSetType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    void
    EdgeSet (::std::ostream& os,
             const ::xsd::qif2::EdgeSetType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EdgeSet (::xercesc::XMLFormatTarget& ft,
             const ::xsd::qif2::EdgeSetType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    void
    EdgeSet (::xercesc::XMLFormatTarget& ft,
             const ::xsd::qif2::EdgeSetType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    void
    EdgeSet (::xercesc::XMLFormatTarget& ft,
             const ::xsd::qif2::EdgeSetType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EdgeSet (::xercesc::DOMDocument& d,
             const ::xsd::qif2::EdgeSetType& x,
             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EdgeSet (const ::xsd::qif2::EdgeSetType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Edge (::std::ostream& os,
          const ::xsd::qif2::EdgeType& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    void
    Edge (::std::ostream& os,
          const ::xsd::qif2::EdgeType& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    void
    Edge (::std::ostream& os,
          const ::xsd::qif2::EdgeType& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Edge (::xercesc::XMLFormatTarget& ft,
          const ::xsd::qif2::EdgeType& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    void
    Edge (::xercesc::XMLFormatTarget& ft,
          const ::xsd::qif2::EdgeType& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    void
    Edge (::xercesc::XMLFormatTarget& ft,
          const ::xsd::qif2::EdgeType& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Edge (::xercesc::DOMDocument& d,
          const ::xsd::qif2::EdgeType& x,
          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Edge (const ::xsd::qif2::EdgeType& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LoopSet (::std::ostream& os,
             const ::xsd::qif2::LoopSetType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    void
    LoopSet (::std::ostream& os,
             const ::xsd::qif2::LoopSetType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    void
    LoopSet (::std::ostream& os,
             const ::xsd::qif2::LoopSetType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LoopSet (::xercesc::XMLFormatTarget& ft,
             const ::xsd::qif2::LoopSetType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    void
    LoopSet (::xercesc::XMLFormatTarget& ft,
             const ::xsd::qif2::LoopSetType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    void
    LoopSet (::xercesc::XMLFormatTarget& ft,
             const ::xsd::qif2::LoopSetType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LoopSet (::xercesc::DOMDocument& d,
             const ::xsd::qif2::LoopSetType& x,
             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LoopSet (const ::xsd::qif2::LoopSetType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LoopBase (::std::ostream& os,
              const ::xsd::qif2::LoopBaseType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    LoopBase (::std::ostream& os,
              const ::xsd::qif2::LoopBaseType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    LoopBase (::std::ostream& os,
              const ::xsd::qif2::LoopBaseType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LoopBase (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::LoopBaseType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    LoopBase (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::LoopBaseType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    LoopBase (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::LoopBaseType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LoopBase (::xercesc::DOMDocument& d,
              const ::xsd::qif2::LoopBaseType& x,
              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LoopBase (const ::xsd::qif2::LoopBaseType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Loop (::std::ostream& os,
          const ::xsd::qif2::LoopType& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    void
    Loop (::std::ostream& os,
          const ::xsd::qif2::LoopType& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    void
    Loop (::std::ostream& os,
          const ::xsd::qif2::LoopType& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Loop (::xercesc::XMLFormatTarget& ft,
          const ::xsd::qif2::LoopType& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    void
    Loop (::xercesc::XMLFormatTarget& ft,
          const ::xsd::qif2::LoopType& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    void
    Loop (::xercesc::XMLFormatTarget& ft,
          const ::xsd::qif2::LoopType& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Loop (::xercesc::DOMDocument& d,
          const ::xsd::qif2::LoopType& x,
          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Loop (const ::xsd::qif2::LoopType& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LoopMesh (::std::ostream& os,
              const ::xsd::qif2::LoopMeshType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    LoopMesh (::std::ostream& os,
              const ::xsd::qif2::LoopMeshType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    LoopMesh (::std::ostream& os,
              const ::xsd::qif2::LoopMeshType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LoopMesh (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::LoopMeshType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    LoopMesh (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::LoopMeshType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    LoopMesh (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::LoopMeshType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LoopMesh (::xercesc::DOMDocument& d,
              const ::xsd::qif2::LoopMeshType& x,
              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LoopMesh (const ::xsd::qif2::LoopMeshType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FaceSet (::std::ostream& os,
             const ::xsd::qif2::FaceSetType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    void
    FaceSet (::std::ostream& os,
             const ::xsd::qif2::FaceSetType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    void
    FaceSet (::std::ostream& os,
             const ::xsd::qif2::FaceSetType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FaceSet (::xercesc::XMLFormatTarget& ft,
             const ::xsd::qif2::FaceSetType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    void
    FaceSet (::xercesc::XMLFormatTarget& ft,
             const ::xsd::qif2::FaceSetType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    void
    FaceSet (::xercesc::XMLFormatTarget& ft,
             const ::xsd::qif2::FaceSetType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FaceSet (::xercesc::DOMDocument& d,
             const ::xsd::qif2::FaceSetType& x,
             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FaceSet (const ::xsd::qif2::FaceSetType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FaceBase (::std::ostream& os,
              const ::xsd::qif2::FaceBaseType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    FaceBase (::std::ostream& os,
              const ::xsd::qif2::FaceBaseType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    FaceBase (::std::ostream& os,
              const ::xsd::qif2::FaceBaseType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FaceBase (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::FaceBaseType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    FaceBase (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::FaceBaseType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    FaceBase (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::FaceBaseType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FaceBase (::xercesc::DOMDocument& d,
              const ::xsd::qif2::FaceBaseType& x,
              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FaceBase (const ::xsd::qif2::FaceBaseType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Face (::std::ostream& os,
          const ::xsd::qif2::FaceType& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    void
    Face (::std::ostream& os,
          const ::xsd::qif2::FaceType& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    void
    Face (::std::ostream& os,
          const ::xsd::qif2::FaceType& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Face (::xercesc::XMLFormatTarget& ft,
          const ::xsd::qif2::FaceType& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    void
    Face (::xercesc::XMLFormatTarget& ft,
          const ::xsd::qif2::FaceType& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    void
    Face (::xercesc::XMLFormatTarget& ft,
          const ::xsd::qif2::FaceType& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Face (::xercesc::DOMDocument& d,
          const ::xsd::qif2::FaceType& x,
          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Face (const ::xsd::qif2::FaceType& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FaceMesh (::std::ostream& os,
              const ::xsd::qif2::FaceMeshType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    FaceMesh (::std::ostream& os,
              const ::xsd::qif2::FaceMeshType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    FaceMesh (::std::ostream& os,
              const ::xsd::qif2::FaceMeshType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FaceMesh (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::FaceMeshType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    FaceMesh (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::FaceMeshType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    FaceMesh (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::FaceMeshType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FaceMesh (::xercesc::DOMDocument& d,
              const ::xsd::qif2::FaceMeshType& x,
              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FaceMesh (const ::xsd::qif2::FaceMeshType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ShellSet (::std::ostream& os,
              const ::xsd::qif2::ShellSetType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    ShellSet (::std::ostream& os,
              const ::xsd::qif2::ShellSetType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    ShellSet (::std::ostream& os,
              const ::xsd::qif2::ShellSetType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ShellSet (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::ShellSetType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    ShellSet (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::ShellSetType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    ShellSet (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::ShellSetType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ShellSet (::xercesc::DOMDocument& d,
              const ::xsd::qif2::ShellSetType& x,
              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ShellSet (const ::xsd::qif2::ShellSetType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Shell (::std::ostream& os,
           const ::xsd::qif2::ShellType& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    void
    Shell (::std::ostream& os,
           const ::xsd::qif2::ShellType& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    void
    Shell (::std::ostream& os,
           const ::xsd::qif2::ShellType& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Shell (::xercesc::XMLFormatTarget& ft,
           const ::xsd::qif2::ShellType& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    void
    Shell (::xercesc::XMLFormatTarget& ft,
           const ::xsd::qif2::ShellType& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    void
    Shell (::xercesc::XMLFormatTarget& ft,
           const ::xsd::qif2::ShellType& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Shell (::xercesc::DOMDocument& d,
           const ::xsd::qif2::ShellType& x,
           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Shell (const ::xsd::qif2::ShellType& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    BodySet (::std::ostream& os,
             const ::xsd::qif2::BodySetType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    void
    BodySet (::std::ostream& os,
             const ::xsd::qif2::BodySetType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    void
    BodySet (::std::ostream& os,
             const ::xsd::qif2::BodySetType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    BodySet (::xercesc::XMLFormatTarget& ft,
             const ::xsd::qif2::BodySetType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    void
    BodySet (::xercesc::XMLFormatTarget& ft,
             const ::xsd::qif2::BodySetType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    void
    BodySet (::xercesc::XMLFormatTarget& ft,
             const ::xsd::qif2::BodySetType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    BodySet (::xercesc::DOMDocument& d,
             const ::xsd::qif2::BodySetType& x,
             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    BodySet (const ::xsd::qif2::BodySetType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Body (::std::ostream& os,
          const ::xsd::qif2::BodyType& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    void
    Body (::std::ostream& os,
          const ::xsd::qif2::BodyType& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    void
    Body (::std::ostream& os,
          const ::xsd::qif2::BodyType& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Body (::xercesc::XMLFormatTarget& ft,
          const ::xsd::qif2::BodyType& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    void
    Body (::xercesc::XMLFormatTarget& ft,
          const ::xsd::qif2::BodyType& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    void
    Body (::xercesc::XMLFormatTarget& ft,
          const ::xsd::qif2::BodyType& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Body (::xercesc::DOMDocument& d,
          const ::xsd::qif2::BodyType& x,
          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Body (const ::xsd::qif2::BodyType& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PointCloudSet (::std::ostream& os,
                   const ::xsd::qif2::PointCloudSetType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    PointCloudSet (::std::ostream& os,
                   const ::xsd::qif2::PointCloudSetType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    PointCloudSet (::std::ostream& os,
                   const ::xsd::qif2::PointCloudSetType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PointCloudSet (::xercesc::XMLFormatTarget& ft,
                   const ::xsd::qif2::PointCloudSetType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    PointCloudSet (::xercesc::XMLFormatTarget& ft,
                   const ::xsd::qif2::PointCloudSetType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    PointCloudSet (::xercesc::XMLFormatTarget& ft,
                   const ::xsd::qif2::PointCloudSetType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PointCloudSet (::xercesc::DOMDocument& d,
                   const ::xsd::qif2::PointCloudSetType& x,
                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PointCloudSet (const ::xsd::qif2::PointCloudSetType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PointCloud (::std::ostream& os,
                const ::xsd::qif2::PointCloudType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

    void
    PointCloud (::std::ostream& os,
                const ::xsd::qif2::PointCloudType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

    void
    PointCloud (::std::ostream& os,
                const ::xsd::qif2::PointCloudType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PointCloud (::xercesc::XMLFormatTarget& ft,
                const ::xsd::qif2::PointCloudType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

    void
    PointCloud (::xercesc::XMLFormatTarget& ft,
                const ::xsd::qif2::PointCloudType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

    void
    PointCloud (::xercesc::XMLFormatTarget& ft,
                const ::xsd::qif2::PointCloudType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PointCloud (::xercesc::DOMDocument& d,
                const ::xsd::qif2::PointCloudType& x,
                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PointCloud (const ::xsd::qif2::PointCloudType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // TOPOLOGY_HXX

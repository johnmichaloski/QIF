// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef STATISTICS_HXX
#define STATISTICS_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xsd
{
  namespace qif2
  {
    class StatsValuesEnumType;
    class ListAccumulatedStatsValuesType;
    class SubgroupStatsValuesEnumType;
    class ListSubgroupStatsValuesType;
    class SubgroupDecimalType;
    class SubgroupIntegerType;
    class SummaryStatsValuesEnumType;
    class ListSummaryStatsValuesType;
    class SummaryStatsValuesType;
    class LimitingNumberType;
    class CriterionDecimalType;
    class CriterionLinearType;
    class CriterionAngularType;
    class CriterionAreaType;
    class CriterionForceType;
    class CriterionMassType;
    class CriterionPressureType;
    class CriterionSpeedType;
    class CriterionTemperatureType;
    class CriterionTimeType;
    class CriterionUserDefinedUnitType;
    class CriterionIntegerType;
    class CriterionOutOfType;
    class SamplingMethodType;
    class SamplingIntervalEnumType;
    class SamplingIntervalType;
    class ExclusionEnumType;
    class ExclusionReasonType;
    class ExclusionType;
    class StatsArrayIdType;
    class StatsEvalStatusEnumType;
    class StatsEvalStatusType;
    class OneSidedCapabilityCalculationEnumType;
    class PositionCapabilityCalculationEnumType;
    class DistributionTransformationEnumType;
    class DistributionTransformationType;
    class ActualSubgroupType;
    class CharacteristicStatsEvalBaseType;
    class StatsBaseType;
    class StatsNumericalBaseType;
    class StatsWithTolNumericalBaseType;
    class StatsWithTolLinearType;
    class StatsWithTolAngularType;
    class StatsWithTolAreaType;
    class StatsWithTolForceType;
    class StatsWithTolMassType;
    class StatsWithTolPressureType;
    class StatsWithTolSpeedType;
    class StatsWithTolTemperatureType;
    class StatsWithTolTimeType;
    class StatsWithTolUserDefinedUnitType;
    class StatsLinearType;
    class StatsAngularType;
    class StatsAreaType;
    class StatsForceType;
    class StatsMassType;
    class StatsPressureType;
    class StatsSpeedType;
    class StatsTemperatureType;
    class StatsTimeType;
    class StatsUserDefinedUnitType;
    class StatsPassFailType;
    class GeometricCharacteristicStatsEvalType;
    class CompositeSegmentStatsEvalBaseType;
    class CompositeSegmentPositionStatsEvalType;
    class CompositeSegmentsPositionStatsEvalType;
    class CompositeSegmentProfileStatsEvalType;
    class CompositeSegmentsProfileStatsEvalType;
    class CompositeSegmentSymmetryStatsEvalType;
    class CompositeSegmentsSymmetryStatsEvalType;
    class LinearCharacteristicStatsEvalType;
    class AngularCharacteristicStatsEvalType;
    class UserDefinedAttributeCharacteristicStatsEvalType;
    class UserDefinedLinearCharacteristicStatsEvalType;
    class UserDefinedAngularCharacteristicStatsEvalType;
    class UserDefinedAreaCharacteristicStatsEvalType;
    class UserDefinedForceCharacteristicStatsEvalType;
    class UserDefinedMassCharacteristicStatsEvalType;
    class UserDefinedPressureCharacteristicStatsEvalType;
    class UserDefinedSpeedCharacteristicStatsEvalType;
    class UserDefinedTemperatureCharacteristicStatsEvalType;
    class UserDefinedTimeCharacteristicStatsEvalType;
    class UserDefinedUnitCharacteristicStatsEvalType;
    class SurfaceTextureCharacteristicStatsEvalType;
    class OrientationCharacteristicStatsEvalType;
    class AngularityCharacteristicStatsEvalType;
    class PerpendicularityCharacteristicStatsEvalType;
    class ParallelismCharacteristicStatsEvalType;
    class FormCharacteristicStatsEvalBaseType;
    class StraightnessCharacteristicStatsEvalType;
    class FlatnessCharacteristicStatsEvalType;
    class CircularityCharacteristicStatsEvalType;
    class CylindricityCharacteristicStatsEvalType;
    class LocationCharacteristicStatsEvalType;
    class PositionCharacteristicStatsEvalType;
    class AngularCoordinateCharacteristicStatsEvalType;
    class AngleCharacteristicStatsEvalType;
    class AngleFromCharacteristicStatsEvalType;
    class AngleBetweenCharacteristicStatsEvalType;
    class LinearCoordinateCharacteristicStatsEvalType;
    class CurveLengthCharacteristicStatsEvalType;
    class DiameterCharacteristicStatsEvalType;
    class LengthCharacteristicStatsEvalType;
    class WidthCharacteristicStatsEvalType;
    class HeightCharacteristicStatsEvalType;
    class DepthCharacteristicStatsEvalType;
    class ThicknessCharacteristicStatsEvalType;
    class SquareCharacteristicStatsEvalType;
    class DistanceFromCharacteristicStatsEvalType;
    class DistanceBetweenCharacteristicStatsEvalType;
    class RadiusCharacteristicStatsEvalType;
    class ChordCharacteristicStatsEvalType;
    class RunoutCharacteristicStatsEvalBaseType;
    class CircularRunoutCharacteristicStatsEvalType;
    class TotalRunoutCharacteristicStatsEvalType;
    class ConcentricityCharacteristicStatsEvalType;
    class SymmetryCharacteristicStatsEvalType;
    class PointDeviationStatsEvalType;
    class PointDeviationsStatsEvalType;
    class ProfileCharacteristicStatsEvalBaseType;
    class LineProfileCharacteristicStatsEvalType;
    class PointProfileCharacteristicStatsEvalType;
    class SurfaceProfileCharacteristicStatsEvalType;
    class SurfaceProfileNonUniformCharacteristicStatsEvalType;
    class ThreadCharacteristicStatsEvalType;
    class CharacteristicsStatsType;
    class AverageFeatureType;
    class AverageFeaturesType;
    class SummaryStatisticsType;
    class SummaryStatisticsLinearType;
    class SummaryStatisticsAngularType;
    class SummaryStatisticsAreaType;
    class SummaryStatisticsForceType;
    class SummaryStatisticsMassType;
    class SummaryStatisticsPressureType;
    class SummaryStatisticsSpeedType;
    class SummaryStatisticsTemperatureType;
    class SummaryStatisticsTimeType;
    class SummaryStatisticsUserDefinedUnitType;
    class AssignableCauseEnumType;
    class AssignableCauseType;
    class AssignableCausesType;
    class ActionToTakeEnumType;
    class CorrectiveActionType;
    class CorrectiveActionsType;
    class StudyIssueType;
    class ControlIssueEnumType;
    class ControlIssueType;
    class ControlIssueDetailsType;
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "../qiflibrary/intermediatespmi.hxx"

#include "../qiflibrary/features.hxx"

#include "../qiflibrary/traceability.hxx"

namespace xsd
{
  namespace qif2
  {
    class StatsValuesEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        TOTNUM,
        EFFNUM,
        NUMSUB,
        AVG,
        DIFF,
        RMS,
        MAX,
        MIN,
        RANGE,
        AVGRNG,
        STDDEV,
        SKEW,
        KURT,
        NORM,
        PROVAR,
        ESTSTDV,
        UCL,
        LCL,
        UCLRNG,
        LCLRNG,
        NUMOOC,
        NUMOOT,
        NOOTHI,
        NOOTLO,
        CP,
        CPK,
        PP,
        PPK,
        CM,
        CMK,
        AV,
        REL_AV,
        EV,
        REL_EV,
        INTERACTION,
        REL_INTERACTION,
        RANDR,
        REL_RANDR,
        PV,
        REL_PV,
        TV,
        REL_TV,
        LNRTY,
        BIAS,
        REL_LNRTY,
        REL_BIAS,
        R_SQR,
        SLOPE,
        INTCPT,
        UPRCONFLIM,
        LWRCONFLIM,
        TDIST
      };

      StatsValuesEnumType (value v);

      StatsValuesEnumType (const char* v);

      StatsValuesEnumType (const ::std::string& v);

      StatsValuesEnumType (const ::xml_schema::nmtoken& v);

      StatsValuesEnumType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      StatsValuesEnumType (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      StatsValuesEnumType (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      StatsValuesEnumType (const StatsValuesEnumType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual StatsValuesEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsValuesEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_StatsValuesEnumType_convert ();
      }

      protected:
      value
      _xsd_StatsValuesEnumType_convert () const;

      public:
      static const char* const _xsd_StatsValuesEnumType_literals_[52];
      static const value _xsd_StatsValuesEnumType_indexes_[52];
    };

    class ListAccumulatedStatsValuesType: public ::xml_schema::simple_type,
      public ::xsd::cxx::tree::list< ::xsd::qif2::StatsValuesEnumType, char >
    {
      public:
      ListAccumulatedStatsValuesType ();

      ListAccumulatedStatsValuesType (size_type n, const ::xsd::qif2::StatsValuesEnumType& x);

      template < typename I >
      ListAccumulatedStatsValuesType (const I& begin, const I& end)
      : ::xsd::cxx::tree::list< ::xsd::qif2::StatsValuesEnumType, char > (begin, end, this)
      {
      }

      ListAccumulatedStatsValuesType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      ListAccumulatedStatsValuesType (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      ListAccumulatedStatsValuesType (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      ListAccumulatedStatsValuesType (const ListAccumulatedStatsValuesType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual ListAccumulatedStatsValuesType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ListAccumulatedStatsValuesType ();
    };

    class SubgroupStatsValuesEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        TOTNUM,
        EFFNUM,
        AVG,
        DIFF,
        MAX,
        MIN,
        RANGE,
        NUMOOT,
        NOOTHI,
        NOOTLO
      };

      SubgroupStatsValuesEnumType (value v);

      SubgroupStatsValuesEnumType (const char* v);

      SubgroupStatsValuesEnumType (const ::std::string& v);

      SubgroupStatsValuesEnumType (const ::xml_schema::nmtoken& v);

      SubgroupStatsValuesEnumType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      SubgroupStatsValuesEnumType (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      SubgroupStatsValuesEnumType (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      SubgroupStatsValuesEnumType (const SubgroupStatsValuesEnumType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual SubgroupStatsValuesEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SubgroupStatsValuesEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_SubgroupStatsValuesEnumType_convert ();
      }

      protected:
      value
      _xsd_SubgroupStatsValuesEnumType_convert () const;

      public:
      static const char* const _xsd_SubgroupStatsValuesEnumType_literals_[10];
      static const value _xsd_SubgroupStatsValuesEnumType_indexes_[10];
    };

    class ListSubgroupStatsValuesType: public ::xml_schema::simple_type,
      public ::xsd::cxx::tree::list< ::xsd::qif2::SubgroupStatsValuesEnumType, char >
    {
      public:
      ListSubgroupStatsValuesType ();

      ListSubgroupStatsValuesType (size_type n, const ::xsd::qif2::SubgroupStatsValuesEnumType& x);

      template < typename I >
      ListSubgroupStatsValuesType (const I& begin, const I& end)
      : ::xsd::cxx::tree::list< ::xsd::qif2::SubgroupStatsValuesEnumType, char > (begin, end, this)
      {
      }

      ListSubgroupStatsValuesType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      ListSubgroupStatsValuesType (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      ListSubgroupStatsValuesType (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      ListSubgroupStatsValuesType (const ListSubgroupStatsValuesType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual ListSubgroupStatsValuesType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ListSubgroupStatsValuesType ();
    };

    class SubgroupDecimalType: public ::xsd::qif2::ActualDecimalType
    {
      public:
      // subgroupId
      //
      typedef ::xsd::qif2::QIFIdType subgroupId_type;
      typedef ::xsd::cxx::tree::traits< subgroupId_type, char > subgroupId_traits;

      const subgroupId_type&
      subgroupId () const;

      subgroupId_type&
      subgroupId ();

      void
      subgroupId (const subgroupId_type& x);

      void
      subgroupId (::std::auto_ptr< subgroupId_type > p);

      // Constructors.
      //
      SubgroupDecimalType (const ::xml_schema::decimal&,
                           const subgroupId_type&);

      SubgroupDecimalType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      SubgroupDecimalType (const SubgroupDecimalType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual SubgroupDecimalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SubgroupDecimalType&
      operator= (const SubgroupDecimalType& x);

      virtual 
      ~SubgroupDecimalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< subgroupId_type > subgroupId_;
    };

    class SubgroupIntegerType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type >
    {
      public:
      // subgroupId
      //
      typedef ::xsd::qif2::QIFIdType subgroupId_type;
      typedef ::xsd::cxx::tree::traits< subgroupId_type, char > subgroupId_traits;

      const subgroupId_type&
      subgroupId () const;

      subgroupId_type&
      subgroupId ();

      void
      subgroupId (const subgroupId_type& x);

      void
      subgroupId (::std::auto_ptr< subgroupId_type > p);

      // Constructors.
      //
      SubgroupIntegerType (const ::xml_schema::positive_integer&,
                           const subgroupId_type&);

      SubgroupIntegerType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      SubgroupIntegerType (const SubgroupIntegerType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual SubgroupIntegerType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SubgroupIntegerType&
      operator= (const SubgroupIntegerType& x);

      virtual 
      ~SubgroupIntegerType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< subgroupId_type > subgroupId_;
    };

    class SummaryStatsValuesEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        AVG,
        MAX,
        MIN,
        RANGE,
        STDDEV
      };

      SummaryStatsValuesEnumType (value v);

      SummaryStatsValuesEnumType (const char* v);

      SummaryStatsValuesEnumType (const ::std::string& v);

      SummaryStatsValuesEnumType (const ::xml_schema::nmtoken& v);

      SummaryStatsValuesEnumType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      SummaryStatsValuesEnumType (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      SummaryStatsValuesEnumType (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      SummaryStatsValuesEnumType (const SummaryStatsValuesEnumType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual SummaryStatsValuesEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SummaryStatsValuesEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_SummaryStatsValuesEnumType_convert ();
      }

      protected:
      value
      _xsd_SummaryStatsValuesEnumType_convert () const;

      public:
      static const char* const _xsd_SummaryStatsValuesEnumType_literals_[5];
      static const value _xsd_SummaryStatsValuesEnumType_indexes_[5];
    };

    class ListSummaryStatsValuesType: public ::xml_schema::simple_type,
      public ::xsd::cxx::tree::list< ::xsd::qif2::StatsValuesEnumType, char >
    {
      public:
      ListSummaryStatsValuesType ();

      ListSummaryStatsValuesType (size_type n, const ::xsd::qif2::StatsValuesEnumType& x);

      template < typename I >
      ListSummaryStatsValuesType (const I& begin, const I& end)
      : ::xsd::cxx::tree::list< ::xsd::qif2::StatsValuesEnumType, char > (begin, end, this)
      {
      }

      ListSummaryStatsValuesType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      ListSummaryStatsValuesType (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      ListSummaryStatsValuesType (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      ListSummaryStatsValuesType (const ListSummaryStatsValuesType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual ListSummaryStatsValuesType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ListSummaryStatsValuesType ();
    };

    class SummaryStatsValuesType: public ::xml_schema::type
    {
      public:
      // SummaryType
      //
      typedef ::xsd::qif2::SummaryStatsValuesEnumType SummaryType_type;
      typedef ::xsd::cxx::tree::traits< SummaryType_type, char > SummaryType_traits;

      const SummaryType_type&
      SummaryType () const;

      SummaryType_type&
      SummaryType ();

      void
      SummaryType (const SummaryType_type& x);

      void
      SummaryType (::std::auto_ptr< SummaryType_type > p);

      // SummaryStats
      //
      typedef ::xsd::qif2::ListSummaryStatsValuesType SummaryStats_type;
      typedef ::xsd::cxx::tree::traits< SummaryStats_type, char > SummaryStats_traits;

      const SummaryStats_type&
      SummaryStats () const;

      SummaryStats_type&
      SummaryStats ();

      void
      SummaryStats (const SummaryStats_type& x);

      void
      SummaryStats (::std::auto_ptr< SummaryStats_type > p);

      // Constructors.
      //
      SummaryStatsValuesType (const SummaryType_type&,
                              const SummaryStats_type&);

      SummaryStatsValuesType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      SummaryStatsValuesType (const SummaryStatsValuesType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual SummaryStatsValuesType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SummaryStatsValuesType&
      operator= (const SummaryStatsValuesType& x);

      virtual 
      ~SummaryStatsValuesType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SummaryType_type > SummaryType_;
      ::xsd::cxx::tree::one< SummaryStats_type > SummaryStats_;
    };

    class LimitingNumberType: public ::xml_schema::type
    {
      public:
      // Count
      //
      typedef ::xml_schema::non_negative_integer Count_type;
      typedef ::xsd::cxx::tree::optional< Count_type > Count_optional;
      typedef ::xsd::cxx::tree::traits< Count_type, char > Count_traits;

      const Count_optional&
      Count () const;

      Count_optional&
      Count ();

      void
      Count (const Count_type& x);

      void
      Count (const Count_optional& x);

      // Fraction
      //
      typedef ::xml_schema::decimal Fraction_type;
      typedef ::xsd::cxx::tree::optional< Fraction_type > Fraction_optional;
      typedef ::xsd::cxx::tree::traits< Fraction_type, char, ::xsd::cxx::tree::schema_type::decimal > Fraction_traits;

      const Fraction_optional&
      Fraction () const;

      Fraction_optional&
      Fraction ();

      void
      Fraction (const Fraction_type& x);

      void
      Fraction (const Fraction_optional& x);

      // Constructors.
      //
      LimitingNumberType ();

      LimitingNumberType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      LimitingNumberType (const LimitingNumberType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual LimitingNumberType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LimitingNumberType&
      operator= (const LimitingNumberType& x);

      virtual 
      ~LimitingNumberType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Count_optional Count_;
      Fraction_optional Fraction_;
    };

    class CriterionDecimalType: public ::xml_schema::type
    {
      public:
      // Limit
      //
      typedef ::xml_schema::decimal Limit_type;
      typedef ::xsd::cxx::tree::traits< Limit_type, char, ::xsd::cxx::tree::schema_type::decimal > Limit_traits;

      const Limit_type&
      Limit () const;

      Limit_type&
      Limit ();

      void
      Limit (const Limit_type& x);

      // NumberAllowedExceptions
      //
      typedef ::xsd::qif2::LimitingNumberType NumberAllowedExceptions_type;
      typedef ::xsd::cxx::tree::optional< NumberAllowedExceptions_type > NumberAllowedExceptions_optional;
      typedef ::xsd::cxx::tree::traits< NumberAllowedExceptions_type, char > NumberAllowedExceptions_traits;

      const NumberAllowedExceptions_optional&
      NumberAllowedExceptions () const;

      NumberAllowedExceptions_optional&
      NumberAllowedExceptions ();

      void
      NumberAllowedExceptions (const NumberAllowedExceptions_type& x);

      void
      NumberAllowedExceptions (const NumberAllowedExceptions_optional& x);

      void
      NumberAllowedExceptions (::std::auto_ptr< NumberAllowedExceptions_type > p);

      // ExtremeLimit
      //
      typedef ::xml_schema::decimal ExtremeLimit_type;
      typedef ::xsd::cxx::tree::optional< ExtremeLimit_type > ExtremeLimit_optional;
      typedef ::xsd::cxx::tree::traits< ExtremeLimit_type, char, ::xsd::cxx::tree::schema_type::decimal > ExtremeLimit_traits;

      const ExtremeLimit_optional&
      ExtremeLimit () const;

      ExtremeLimit_optional&
      ExtremeLimit ();

      void
      ExtremeLimit (const ExtremeLimit_type& x);

      void
      ExtremeLimit (const ExtremeLimit_optional& x);

      // Constructors.
      //
      CriterionDecimalType (const Limit_type&);

      CriterionDecimalType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      CriterionDecimalType (const CriterionDecimalType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual CriterionDecimalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CriterionDecimalType&
      operator= (const CriterionDecimalType& x);

      virtual 
      ~CriterionDecimalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Limit_type > Limit_;
      NumberAllowedExceptions_optional NumberAllowedExceptions_;
      ExtremeLimit_optional ExtremeLimit_;
    };

    class CriterionLinearType: public ::xsd::qif2::CriterionDecimalType
    {
      public:
      // linearUnit
      //
      typedef ::xml_schema::token linearUnit_type;
      typedef ::xsd::cxx::tree::optional< linearUnit_type > linearUnit_optional;
      typedef ::xsd::cxx::tree::traits< linearUnit_type, char > linearUnit_traits;

      const linearUnit_optional&
      linearUnit () const;

      linearUnit_optional&
      linearUnit ();

      void
      linearUnit (const linearUnit_type& x);

      void
      linearUnit (const linearUnit_optional& x);

      void
      linearUnit (::std::auto_ptr< linearUnit_type > p);

      // Constructors.
      //
      CriterionLinearType (const Limit_type&);

      CriterionLinearType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      CriterionLinearType (const CriterionLinearType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual CriterionLinearType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CriterionLinearType&
      operator= (const CriterionLinearType& x);

      virtual 
      ~CriterionLinearType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      linearUnit_optional linearUnit_;
    };

    class CriterionAngularType: public ::xsd::qif2::CriterionDecimalType
    {
      public:
      // angularUnit
      //
      typedef ::xml_schema::token angularUnit_type;
      typedef ::xsd::cxx::tree::optional< angularUnit_type > angularUnit_optional;
      typedef ::xsd::cxx::tree::traits< angularUnit_type, char > angularUnit_traits;

      const angularUnit_optional&
      angularUnit () const;

      angularUnit_optional&
      angularUnit ();

      void
      angularUnit (const angularUnit_type& x);

      void
      angularUnit (const angularUnit_optional& x);

      void
      angularUnit (::std::auto_ptr< angularUnit_type > p);

      // Constructors.
      //
      CriterionAngularType (const Limit_type&);

      CriterionAngularType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      CriterionAngularType (const CriterionAngularType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual CriterionAngularType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CriterionAngularType&
      operator= (const CriterionAngularType& x);

      virtual 
      ~CriterionAngularType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      angularUnit_optional angularUnit_;
    };

    class CriterionAreaType: public ::xsd::qif2::CriterionDecimalType
    {
      public:
      // areaUnit
      //
      typedef ::xml_schema::token areaUnit_type;
      typedef ::xsd::cxx::tree::optional< areaUnit_type > areaUnit_optional;
      typedef ::xsd::cxx::tree::traits< areaUnit_type, char > areaUnit_traits;

      const areaUnit_optional&
      areaUnit () const;

      areaUnit_optional&
      areaUnit ();

      void
      areaUnit (const areaUnit_type& x);

      void
      areaUnit (const areaUnit_optional& x);

      void
      areaUnit (::std::auto_ptr< areaUnit_type > p);

      // Constructors.
      //
      CriterionAreaType (const Limit_type&);

      CriterionAreaType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      CriterionAreaType (const CriterionAreaType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual CriterionAreaType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CriterionAreaType&
      operator= (const CriterionAreaType& x);

      virtual 
      ~CriterionAreaType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      areaUnit_optional areaUnit_;
    };

    class CriterionForceType: public ::xsd::qif2::CriterionDecimalType
    {
      public:
      // forceUnit
      //
      typedef ::xml_schema::token forceUnit_type;
      typedef ::xsd::cxx::tree::optional< forceUnit_type > forceUnit_optional;
      typedef ::xsd::cxx::tree::traits< forceUnit_type, char > forceUnit_traits;

      const forceUnit_optional&
      forceUnit () const;

      forceUnit_optional&
      forceUnit ();

      void
      forceUnit (const forceUnit_type& x);

      void
      forceUnit (const forceUnit_optional& x);

      void
      forceUnit (::std::auto_ptr< forceUnit_type > p);

      // Constructors.
      //
      CriterionForceType (const Limit_type&);

      CriterionForceType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      CriterionForceType (const CriterionForceType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual CriterionForceType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CriterionForceType&
      operator= (const CriterionForceType& x);

      virtual 
      ~CriterionForceType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      forceUnit_optional forceUnit_;
    };

    class CriterionMassType: public ::xsd::qif2::CriterionDecimalType
    {
      public:
      // massUnit
      //
      typedef ::xml_schema::token massUnit_type;
      typedef ::xsd::cxx::tree::optional< massUnit_type > massUnit_optional;
      typedef ::xsd::cxx::tree::traits< massUnit_type, char > massUnit_traits;

      const massUnit_optional&
      massUnit () const;

      massUnit_optional&
      massUnit ();

      void
      massUnit (const massUnit_type& x);

      void
      massUnit (const massUnit_optional& x);

      void
      massUnit (::std::auto_ptr< massUnit_type > p);

      // Constructors.
      //
      CriterionMassType (const Limit_type&);

      CriterionMassType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      CriterionMassType (const CriterionMassType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual CriterionMassType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CriterionMassType&
      operator= (const CriterionMassType& x);

      virtual 
      ~CriterionMassType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      massUnit_optional massUnit_;
    };

    class CriterionPressureType: public ::xsd::qif2::CriterionDecimalType
    {
      public:
      // pressureUnit
      //
      typedef ::xml_schema::token pressureUnit_type;
      typedef ::xsd::cxx::tree::optional< pressureUnit_type > pressureUnit_optional;
      typedef ::xsd::cxx::tree::traits< pressureUnit_type, char > pressureUnit_traits;

      const pressureUnit_optional&
      pressureUnit () const;

      pressureUnit_optional&
      pressureUnit ();

      void
      pressureUnit (const pressureUnit_type& x);

      void
      pressureUnit (const pressureUnit_optional& x);

      void
      pressureUnit (::std::auto_ptr< pressureUnit_type > p);

      // Constructors.
      //
      CriterionPressureType (const Limit_type&);

      CriterionPressureType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      CriterionPressureType (const CriterionPressureType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual CriterionPressureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CriterionPressureType&
      operator= (const CriterionPressureType& x);

      virtual 
      ~CriterionPressureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      pressureUnit_optional pressureUnit_;
    };

    class CriterionSpeedType: public ::xsd::qif2::CriterionDecimalType
    {
      public:
      // speedUnit
      //
      typedef ::xml_schema::token speedUnit_type;
      typedef ::xsd::cxx::tree::optional< speedUnit_type > speedUnit_optional;
      typedef ::xsd::cxx::tree::traits< speedUnit_type, char > speedUnit_traits;

      const speedUnit_optional&
      speedUnit () const;

      speedUnit_optional&
      speedUnit ();

      void
      speedUnit (const speedUnit_type& x);

      void
      speedUnit (const speedUnit_optional& x);

      void
      speedUnit (::std::auto_ptr< speedUnit_type > p);

      // Constructors.
      //
      CriterionSpeedType (const Limit_type&);

      CriterionSpeedType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      CriterionSpeedType (const CriterionSpeedType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual CriterionSpeedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CriterionSpeedType&
      operator= (const CriterionSpeedType& x);

      virtual 
      ~CriterionSpeedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      speedUnit_optional speedUnit_;
    };

    class CriterionTemperatureType: public ::xsd::qif2::CriterionDecimalType
    {
      public:
      // temperatureUnit
      //
      typedef ::xml_schema::token temperatureUnit_type;
      typedef ::xsd::cxx::tree::optional< temperatureUnit_type > temperatureUnit_optional;
      typedef ::xsd::cxx::tree::traits< temperatureUnit_type, char > temperatureUnit_traits;

      const temperatureUnit_optional&
      temperatureUnit () const;

      temperatureUnit_optional&
      temperatureUnit ();

      void
      temperatureUnit (const temperatureUnit_type& x);

      void
      temperatureUnit (const temperatureUnit_optional& x);

      void
      temperatureUnit (::std::auto_ptr< temperatureUnit_type > p);

      // Constructors.
      //
      CriterionTemperatureType (const Limit_type&);

      CriterionTemperatureType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      CriterionTemperatureType (const CriterionTemperatureType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual CriterionTemperatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CriterionTemperatureType&
      operator= (const CriterionTemperatureType& x);

      virtual 
      ~CriterionTemperatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      temperatureUnit_optional temperatureUnit_;
    };

    class CriterionTimeType: public ::xsd::qif2::CriterionDecimalType
    {
      public:
      // timeUnit
      //
      typedef ::xml_schema::token timeUnit_type;
      typedef ::xsd::cxx::tree::optional< timeUnit_type > timeUnit_optional;
      typedef ::xsd::cxx::tree::traits< timeUnit_type, char > timeUnit_traits;

      const timeUnit_optional&
      timeUnit () const;

      timeUnit_optional&
      timeUnit ();

      void
      timeUnit (const timeUnit_type& x);

      void
      timeUnit (const timeUnit_optional& x);

      void
      timeUnit (::std::auto_ptr< timeUnit_type > p);

      // Constructors.
      //
      CriterionTimeType (const Limit_type&);

      CriterionTimeType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      CriterionTimeType (const CriterionTimeType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual CriterionTimeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CriterionTimeType&
      operator= (const CriterionTimeType& x);

      virtual 
      ~CriterionTimeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      timeUnit_optional timeUnit_;
    };

    class CriterionUserDefinedUnitType: public ::xsd::qif2::CriterionDecimalType
    {
      public:
      // unitName
      //
      typedef ::xml_schema::token unitName_type;
      typedef ::xsd::cxx::tree::traits< unitName_type, char > unitName_traits;

      const unitName_type&
      unitName () const;

      unitName_type&
      unitName ();

      void
      unitName (const unitName_type& x);

      void
      unitName (::std::auto_ptr< unitName_type > p);

      // Constructors.
      //
      CriterionUserDefinedUnitType (const Limit_type&,
                                    const unitName_type&);

      CriterionUserDefinedUnitType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      CriterionUserDefinedUnitType (const CriterionUserDefinedUnitType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual CriterionUserDefinedUnitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CriterionUserDefinedUnitType&
      operator= (const CriterionUserDefinedUnitType& x);

      virtual 
      ~CriterionUserDefinedUnitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< unitName_type > unitName_;
    };

    class CriterionIntegerType: public ::xml_schema::type
    {
      public:
      // Limit
      //
      typedef ::xml_schema::positive_integer Limit_type;
      typedef ::xsd::cxx::tree::traits< Limit_type, char > Limit_traits;

      const Limit_type&
      Limit () const;

      Limit_type&
      Limit ();

      void
      Limit (const Limit_type& x);

      // NumberAllowedExceptions
      //
      typedef ::xsd::qif2::LimitingNumberType NumberAllowedExceptions_type;
      typedef ::xsd::cxx::tree::optional< NumberAllowedExceptions_type > NumberAllowedExceptions_optional;
      typedef ::xsd::cxx::tree::traits< NumberAllowedExceptions_type, char > NumberAllowedExceptions_traits;

      const NumberAllowedExceptions_optional&
      NumberAllowedExceptions () const;

      NumberAllowedExceptions_optional&
      NumberAllowedExceptions ();

      void
      NumberAllowedExceptions (const NumberAllowedExceptions_type& x);

      void
      NumberAllowedExceptions (const NumberAllowedExceptions_optional& x);

      void
      NumberAllowedExceptions (::std::auto_ptr< NumberAllowedExceptions_type > p);

      // ExtremeLimit
      //
      typedef ::xml_schema::positive_integer ExtremeLimit_type;
      typedef ::xsd::cxx::tree::optional< ExtremeLimit_type > ExtremeLimit_optional;
      typedef ::xsd::cxx::tree::traits< ExtremeLimit_type, char > ExtremeLimit_traits;

      const ExtremeLimit_optional&
      ExtremeLimit () const;

      ExtremeLimit_optional&
      ExtremeLimit ();

      void
      ExtremeLimit (const ExtremeLimit_type& x);

      void
      ExtremeLimit (const ExtremeLimit_optional& x);

      // Constructors.
      //
      CriterionIntegerType (const Limit_type&);

      CriterionIntegerType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      CriterionIntegerType (const CriterionIntegerType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual CriterionIntegerType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CriterionIntegerType&
      operator= (const CriterionIntegerType& x);

      virtual 
      ~CriterionIntegerType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Limit_type > Limit_;
      NumberAllowedExceptions_optional NumberAllowedExceptions_;
      ExtremeLimit_optional ExtremeLimit_;
    };

    class CriterionOutOfType: public ::xml_schema::type
    {
      public:
      // Numerator
      //
      typedef ::xml_schema::positive_integer Numerator_type;
      typedef ::xsd::cxx::tree::traits< Numerator_type, char > Numerator_traits;

      const Numerator_type&
      Numerator () const;

      Numerator_type&
      Numerator ();

      void
      Numerator (const Numerator_type& x);

      // Denominator
      //
      typedef ::xml_schema::positive_integer Denominator_type;
      typedef ::xsd::cxx::tree::traits< Denominator_type, char > Denominator_traits;

      const Denominator_type&
      Denominator () const;

      Denominator_type&
      Denominator ();

      void
      Denominator (const Denominator_type& x);

      // NumberAllowedExceptions
      //
      typedef ::xsd::qif2::LimitingNumberType NumberAllowedExceptions_type;
      typedef ::xsd::cxx::tree::optional< NumberAllowedExceptions_type > NumberAllowedExceptions_optional;
      typedef ::xsd::cxx::tree::traits< NumberAllowedExceptions_type, char > NumberAllowedExceptions_traits;

      const NumberAllowedExceptions_optional&
      NumberAllowedExceptions () const;

      NumberAllowedExceptions_optional&
      NumberAllowedExceptions ();

      void
      NumberAllowedExceptions (const NumberAllowedExceptions_type& x);

      void
      NumberAllowedExceptions (const NumberAllowedExceptions_optional& x);

      void
      NumberAllowedExceptions (::std::auto_ptr< NumberAllowedExceptions_type > p);

      // Constructors.
      //
      CriterionOutOfType (const Numerator_type&,
                          const Denominator_type&);

      CriterionOutOfType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      CriterionOutOfType (const CriterionOutOfType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual CriterionOutOfType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CriterionOutOfType&
      operator= (const CriterionOutOfType& x);

      virtual 
      ~CriterionOutOfType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Numerator_type > Numerator_;
      ::xsd::cxx::tree::one< Denominator_type > Denominator_;
      NumberAllowedExceptions_optional NumberAllowedExceptions_;
    };

    class SamplingMethodType: public ::xml_schema::type
    {
      public:
      // SampleSize
      //
      typedef ::xml_schema::positive_integer SampleSize_type;
      typedef ::xsd::cxx::tree::traits< SampleSize_type, char > SampleSize_traits;

      const SampleSize_type&
      SampleSize () const;

      SampleSize_type&
      SampleSize ();

      void
      SampleSize (const SampleSize_type& x);

      // SamplingPeriod
      //
      typedef ::xml_schema::positive_integer SamplingPeriod_type;
      typedef ::xsd::cxx::tree::optional< SamplingPeriod_type > SamplingPeriod_optional;
      typedef ::xsd::cxx::tree::traits< SamplingPeriod_type, char > SamplingPeriod_traits;

      const SamplingPeriod_optional&
      SamplingPeriod () const;

      SamplingPeriod_optional&
      SamplingPeriod ();

      void
      SamplingPeriod (const SamplingPeriod_type& x);

      void
      SamplingPeriod (const SamplingPeriod_optional& x);

      // SamplingFrequency
      //
      typedef ::xml_schema::positive_integer SamplingFrequency_type;
      typedef ::xsd::cxx::tree::optional< SamplingFrequency_type > SamplingFrequency_optional;
      typedef ::xsd::cxx::tree::traits< SamplingFrequency_type, char > SamplingFrequency_traits;

      const SamplingFrequency_optional&
      SamplingFrequency () const;

      SamplingFrequency_optional&
      SamplingFrequency ();

      void
      SamplingFrequency (const SamplingFrequency_type& x);

      void
      SamplingFrequency (const SamplingFrequency_optional& x);

      // SamplingInterval
      //
      typedef ::xsd::qif2::SamplingIntervalType SamplingInterval_type;
      typedef ::xsd::cxx::tree::optional< SamplingInterval_type > SamplingInterval_optional;
      typedef ::xsd::cxx::tree::traits< SamplingInterval_type, char > SamplingInterval_traits;

      const SamplingInterval_optional&
      SamplingInterval () const;

      SamplingInterval_optional&
      SamplingInterval ();

      void
      SamplingInterval (const SamplingInterval_type& x);

      void
      SamplingInterval (const SamplingInterval_optional& x);

      void
      SamplingInterval (::std::auto_ptr< SamplingInterval_type > p);

      // Constructors.
      //
      SamplingMethodType (const SampleSize_type&);

      SamplingMethodType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      SamplingMethodType (const SamplingMethodType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual SamplingMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SamplingMethodType&
      operator= (const SamplingMethodType& x);

      virtual 
      ~SamplingMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SampleSize_type > SampleSize_;
      SamplingPeriod_optional SamplingPeriod_;
      SamplingFrequency_optional SamplingFrequency_;
      SamplingInterval_optional SamplingInterval_;
    };

    class SamplingIntervalEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        SHIFT,
        DAY,
        HOUR,
        WEEK,
        MONTH,
        BATCH,
        LOT
      };

      SamplingIntervalEnumType (value v);

      SamplingIntervalEnumType (const char* v);

      SamplingIntervalEnumType (const ::std::string& v);

      SamplingIntervalEnumType (const ::xml_schema::nmtoken& v);

      SamplingIntervalEnumType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      SamplingIntervalEnumType (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      SamplingIntervalEnumType (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      SamplingIntervalEnumType (const SamplingIntervalEnumType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual SamplingIntervalEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SamplingIntervalEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_SamplingIntervalEnumType_convert ();
      }

      protected:
      value
      _xsd_SamplingIntervalEnumType_convert () const;

      public:
      static const char* const _xsd_SamplingIntervalEnumType_literals_[7];
      static const value _xsd_SamplingIntervalEnumType_indexes_[7];
    };

    class SamplingIntervalType: public ::xml_schema::type
    {
      public:
      // SamplingIntervalEnum
      //
      typedef ::xsd::qif2::SamplingIntervalEnumType SamplingIntervalEnum_type;
      typedef ::xsd::cxx::tree::optional< SamplingIntervalEnum_type > SamplingIntervalEnum_optional;
      typedef ::xsd::cxx::tree::traits< SamplingIntervalEnum_type, char > SamplingIntervalEnum_traits;

      const SamplingIntervalEnum_optional&
      SamplingIntervalEnum () const;

      SamplingIntervalEnum_optional&
      SamplingIntervalEnum ();

      void
      SamplingIntervalEnum (const SamplingIntervalEnum_type& x);

      void
      SamplingIntervalEnum (const SamplingIntervalEnum_optional& x);

      void
      SamplingIntervalEnum (::std::auto_ptr< SamplingIntervalEnum_type > p);

      // OtherSamplingInterval
      //
      typedef ::xml_schema::string OtherSamplingInterval_type;
      typedef ::xsd::cxx::tree::optional< OtherSamplingInterval_type > OtherSamplingInterval_optional;
      typedef ::xsd::cxx::tree::traits< OtherSamplingInterval_type, char > OtherSamplingInterval_traits;

      const OtherSamplingInterval_optional&
      OtherSamplingInterval () const;

      OtherSamplingInterval_optional&
      OtherSamplingInterval ();

      void
      OtherSamplingInterval (const OtherSamplingInterval_type& x);

      void
      OtherSamplingInterval (const OtherSamplingInterval_optional& x);

      void
      OtherSamplingInterval (::std::auto_ptr< OtherSamplingInterval_type > p);

      // Constructors.
      //
      SamplingIntervalType ();

      SamplingIntervalType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      SamplingIntervalType (const SamplingIntervalType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual SamplingIntervalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SamplingIntervalType&
      operator= (const SamplingIntervalType& x);

      virtual 
      ~SamplingIntervalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      SamplingIntervalEnum_optional SamplingIntervalEnum_;
      OtherSamplingInterval_optional OtherSamplingInterval_;
    };

    class ExclusionEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        FLIER,
        EQUIPERROR,
        REWORK,
        KNOWNCAUSE
      };

      ExclusionEnumType (value v);

      ExclusionEnumType (const char* v);

      ExclusionEnumType (const ::std::string& v);

      ExclusionEnumType (const ::xml_schema::nmtoken& v);

      ExclusionEnumType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      ExclusionEnumType (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      ExclusionEnumType (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      ExclusionEnumType (const ExclusionEnumType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual ExclusionEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ExclusionEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_ExclusionEnumType_convert ();
      }

      protected:
      value
      _xsd_ExclusionEnumType_convert () const;

      public:
      static const char* const _xsd_ExclusionEnumType_literals_[4];
      static const value _xsd_ExclusionEnumType_indexes_[4];
    };

    class ExclusionReasonType: public ::xml_schema::type
    {
      public:
      // ExclusionReasonEnum
      //
      typedef ::xsd::qif2::ExclusionEnumType ExclusionReasonEnum_type;
      typedef ::xsd::cxx::tree::optional< ExclusionReasonEnum_type > ExclusionReasonEnum_optional;
      typedef ::xsd::cxx::tree::traits< ExclusionReasonEnum_type, char > ExclusionReasonEnum_traits;

      const ExclusionReasonEnum_optional&
      ExclusionReasonEnum () const;

      ExclusionReasonEnum_optional&
      ExclusionReasonEnum ();

      void
      ExclusionReasonEnum (const ExclusionReasonEnum_type& x);

      void
      ExclusionReasonEnum (const ExclusionReasonEnum_optional& x);

      void
      ExclusionReasonEnum (::std::auto_ptr< ExclusionReasonEnum_type > p);

      // OtherExclusionReason
      //
      typedef ::xml_schema::string OtherExclusionReason_type;
      typedef ::xsd::cxx::tree::optional< OtherExclusionReason_type > OtherExclusionReason_optional;
      typedef ::xsd::cxx::tree::traits< OtherExclusionReason_type, char > OtherExclusionReason_traits;

      const OtherExclusionReason_optional&
      OtherExclusionReason () const;

      OtherExclusionReason_optional&
      OtherExclusionReason ();

      void
      OtherExclusionReason (const OtherExclusionReason_type& x);

      void
      OtherExclusionReason (const OtherExclusionReason_optional& x);

      void
      OtherExclusionReason (::std::auto_ptr< OtherExclusionReason_type > p);

      // Constructors.
      //
      ExclusionReasonType ();

      ExclusionReasonType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      ExclusionReasonType (const ExclusionReasonType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual ExclusionReasonType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ExclusionReasonType&
      operator= (const ExclusionReasonType& x);

      virtual 
      ~ExclusionReasonType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ExclusionReasonEnum_optional ExclusionReasonEnum_;
      OtherExclusionReason_optional OtherExclusionReason_;
    };

    class ExclusionType: public ::xml_schema::type
    {
      public:
      // Id
      //
      typedef ::xsd::qif2::QIFReferenceFullType Id_type;
      typedef ::xsd::cxx::tree::traits< Id_type, char > Id_traits;

      const Id_type&
      Id () const;

      Id_type&
      Id ();

      void
      Id (const Id_type& x);

      void
      Id (::std::auto_ptr< Id_type > p);

      // Reason
      //
      typedef ::xsd::qif2::ExclusionReasonType Reason_type;
      typedef ::xsd::cxx::tree::traits< Reason_type, char > Reason_traits;

      const Reason_type&
      Reason () const;

      Reason_type&
      Reason ();

      void
      Reason (const Reason_type& x);

      void
      Reason (::std::auto_ptr< Reason_type > p);

      // Constructors.
      //
      ExclusionType (const Id_type&,
                     const Reason_type&);

      ExclusionType (::std::auto_ptr< Id_type >,
                     ::std::auto_ptr< Reason_type >);

      ExclusionType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      ExclusionType (const ExclusionType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual ExclusionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ExclusionType&
      operator= (const ExclusionType& x);

      virtual 
      ~ExclusionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Id_type > Id_;
      ::xsd::cxx::tree::one< Reason_type > Reason_;
    };

    class StatsArrayIdType: public ::xml_schema::type
    {
      public:
      // Ids
      //
      typedef ::xsd::qif2::ArrayReferenceFullType Ids_type;
      typedef ::xsd::cxx::tree::traits< Ids_type, char > Ids_traits;

      const Ids_type&
      Ids () const;

      Ids_type&
      Ids ();

      void
      Ids (const Ids_type& x);

      void
      Ids (::std::auto_ptr< Ids_type > p);

      // Exclusion
      //
      typedef ::xsd::qif2::ExclusionType Exclusion_type;
      typedef ::xsd::cxx::tree::sequence< Exclusion_type > Exclusion_sequence;
      typedef Exclusion_sequence::iterator Exclusion_iterator;
      typedef Exclusion_sequence::const_iterator Exclusion_const_iterator;
      typedef ::xsd::cxx::tree::traits< Exclusion_type, char > Exclusion_traits;

      const Exclusion_sequence&
      Exclusion () const;

      Exclusion_sequence&
      Exclusion ();

      void
      Exclusion (const Exclusion_sequence& s);

      // Constructors.
      //
      StatsArrayIdType (const Ids_type&);

      StatsArrayIdType (::std::auto_ptr< Ids_type >);

      StatsArrayIdType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      StatsArrayIdType (const StatsArrayIdType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual StatsArrayIdType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsArrayIdType&
      operator= (const StatsArrayIdType& x);

      virtual 
      ~StatsArrayIdType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Ids_type > Ids_;
      Exclusion_sequence Exclusion_;
    };

    class StatsEvalStatusEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        PASS,
        FAIL,
        INFORMATIONAL,
        UNDEFINED
      };

      StatsEvalStatusEnumType (value v);

      StatsEvalStatusEnumType (const char* v);

      StatsEvalStatusEnumType (const ::std::string& v);

      StatsEvalStatusEnumType (const ::xml_schema::nmtoken& v);

      StatsEvalStatusEnumType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      StatsEvalStatusEnumType (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      StatsEvalStatusEnumType (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      StatsEvalStatusEnumType (const StatsEvalStatusEnumType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual StatsEvalStatusEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsEvalStatusEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_StatsEvalStatusEnumType_convert ();
      }

      protected:
      value
      _xsd_StatsEvalStatusEnumType_convert () const;

      public:
      static const char* const _xsd_StatsEvalStatusEnumType_literals_[4];
      static const value _xsd_StatsEvalStatusEnumType_indexes_[4];
    };

    class StatsEvalStatusType: public ::xml_schema::type
    {
      public:
      // StatsEvalStatusEnum
      //
      typedef ::xsd::qif2::StatsEvalStatusEnumType StatsEvalStatusEnum_type;
      typedef ::xsd::cxx::tree::optional< StatsEvalStatusEnum_type > StatsEvalStatusEnum_optional;
      typedef ::xsd::cxx::tree::traits< StatsEvalStatusEnum_type, char > StatsEvalStatusEnum_traits;

      const StatsEvalStatusEnum_optional&
      StatsEvalStatusEnum () const;

      StatsEvalStatusEnum_optional&
      StatsEvalStatusEnum ();

      void
      StatsEvalStatusEnum (const StatsEvalStatusEnum_type& x);

      void
      StatsEvalStatusEnum (const StatsEvalStatusEnum_optional& x);

      void
      StatsEvalStatusEnum (::std::auto_ptr< StatsEvalStatusEnum_type > p);

      // OtherStatsEvalStatus
      //
      typedef ::xml_schema::string OtherStatsEvalStatus_type;
      typedef ::xsd::cxx::tree::optional< OtherStatsEvalStatus_type > OtherStatsEvalStatus_optional;
      typedef ::xsd::cxx::tree::traits< OtherStatsEvalStatus_type, char > OtherStatsEvalStatus_traits;

      const OtherStatsEvalStatus_optional&
      OtherStatsEvalStatus () const;

      OtherStatsEvalStatus_optional&
      OtherStatsEvalStatus ();

      void
      OtherStatsEvalStatus (const OtherStatsEvalStatus_type& x);

      void
      OtherStatsEvalStatus (const OtherStatsEvalStatus_optional& x);

      void
      OtherStatsEvalStatus (::std::auto_ptr< OtherStatsEvalStatus_type > p);

      // Constructors.
      //
      StatsEvalStatusType ();

      StatsEvalStatusType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      StatsEvalStatusType (const StatsEvalStatusType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual StatsEvalStatusType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsEvalStatusType&
      operator= (const StatsEvalStatusType& x);

      virtual 
      ~StatsEvalStatusType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      StatsEvalStatusEnum_optional StatsEvalStatusEnum_;
      OtherStatsEvalStatus_optional OtherStatsEvalStatus_;
    };

    class OneSidedCapabilityCalculationEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        THREE_SIGMA,
        SIX_SIGMA
      };

      OneSidedCapabilityCalculationEnumType (value v);

      OneSidedCapabilityCalculationEnumType (const char* v);

      OneSidedCapabilityCalculationEnumType (const ::std::string& v);

      OneSidedCapabilityCalculationEnumType (const ::xml_schema::nmtoken& v);

      OneSidedCapabilityCalculationEnumType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      OneSidedCapabilityCalculationEnumType (const ::xercesc::DOMAttr& a,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      OneSidedCapabilityCalculationEnumType (const ::std::string& s,
                                             const ::xercesc::DOMElement* e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      OneSidedCapabilityCalculationEnumType (const OneSidedCapabilityCalculationEnumType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual OneSidedCapabilityCalculationEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OneSidedCapabilityCalculationEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_OneSidedCapabilityCalculationEnumType_convert ();
      }

      protected:
      value
      _xsd_OneSidedCapabilityCalculationEnumType_convert () const;

      public:
      static const char* const _xsd_OneSidedCapabilityCalculationEnumType_literals_[2];
      static const value _xsd_OneSidedCapabilityCalculationEnumType_indexes_[2];
    };

    class PositionCapabilityCalculationEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        THREE_SIGMA,
        SIX_SIGMA,
        BIVARIATE,
        TRIVARIATE
      };

      PositionCapabilityCalculationEnumType (value v);

      PositionCapabilityCalculationEnumType (const char* v);

      PositionCapabilityCalculationEnumType (const ::std::string& v);

      PositionCapabilityCalculationEnumType (const ::xml_schema::nmtoken& v);

      PositionCapabilityCalculationEnumType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      PositionCapabilityCalculationEnumType (const ::xercesc::DOMAttr& a,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      PositionCapabilityCalculationEnumType (const ::std::string& s,
                                             const ::xercesc::DOMElement* e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      PositionCapabilityCalculationEnumType (const PositionCapabilityCalculationEnumType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual PositionCapabilityCalculationEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PositionCapabilityCalculationEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_PositionCapabilityCalculationEnumType_convert ();
      }

      protected:
      value
      _xsd_PositionCapabilityCalculationEnumType_convert () const;

      public:
      static const char* const _xsd_PositionCapabilityCalculationEnumType_literals_[4];
      static const value _xsd_PositionCapabilityCalculationEnumType_indexes_[4];
    };

    class DistributionTransformationEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        LOGNORMAL,
        BOUNDED,
        UNBOUNDED
      };

      DistributionTransformationEnumType (value v);

      DistributionTransformationEnumType (const char* v);

      DistributionTransformationEnumType (const ::std::string& v);

      DistributionTransformationEnumType (const ::xml_schema::nmtoken& v);

      DistributionTransformationEnumType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      DistributionTransformationEnumType (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      DistributionTransformationEnumType (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      DistributionTransformationEnumType (const DistributionTransformationEnumType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual DistributionTransformationEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      DistributionTransformationEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_DistributionTransformationEnumType_convert ();
      }

      protected:
      value
      _xsd_DistributionTransformationEnumType_convert () const;

      public:
      static const char* const _xsd_DistributionTransformationEnumType_literals_[3];
      static const value _xsd_DistributionTransformationEnumType_indexes_[3];
    };

    class DistributionTransformationType: public ::xml_schema::type
    {
      public:
      // DistributionTransformationEnum
      //
      typedef ::xsd::qif2::DistributionTransformationEnumType DistributionTransformationEnum_type;
      typedef ::xsd::cxx::tree::optional< DistributionTransformationEnum_type > DistributionTransformationEnum_optional;
      typedef ::xsd::cxx::tree::traits< DistributionTransformationEnum_type, char > DistributionTransformationEnum_traits;

      const DistributionTransformationEnum_optional&
      DistributionTransformationEnum () const;

      DistributionTransformationEnum_optional&
      DistributionTransformationEnum ();

      void
      DistributionTransformationEnum (const DistributionTransformationEnum_type& x);

      void
      DistributionTransformationEnum (const DistributionTransformationEnum_optional& x);

      void
      DistributionTransformationEnum (::std::auto_ptr< DistributionTransformationEnum_type > p);

      // BoxCoxTransformation
      //
      typedef ::xml_schema::decimal BoxCoxTransformation_type;
      typedef ::xsd::cxx::tree::optional< BoxCoxTransformation_type > BoxCoxTransformation_optional;
      typedef ::xsd::cxx::tree::traits< BoxCoxTransformation_type, char, ::xsd::cxx::tree::schema_type::decimal > BoxCoxTransformation_traits;

      const BoxCoxTransformation_optional&
      BoxCoxTransformation () const;

      BoxCoxTransformation_optional&
      BoxCoxTransformation ();

      void
      BoxCoxTransformation (const BoxCoxTransformation_type& x);

      void
      BoxCoxTransformation (const BoxCoxTransformation_optional& x);

      // OtherDistributionTransformation
      //
      typedef ::xml_schema::string OtherDistributionTransformation_type;
      typedef ::xsd::cxx::tree::optional< OtherDistributionTransformation_type > OtherDistributionTransformation_optional;
      typedef ::xsd::cxx::tree::traits< OtherDistributionTransformation_type, char > OtherDistributionTransformation_traits;

      const OtherDistributionTransformation_optional&
      OtherDistributionTransformation () const;

      OtherDistributionTransformation_optional&
      OtherDistributionTransformation ();

      void
      OtherDistributionTransformation (const OtherDistributionTransformation_type& x);

      void
      OtherDistributionTransformation (const OtherDistributionTransformation_optional& x);

      void
      OtherDistributionTransformation (::std::auto_ptr< OtherDistributionTransformation_type > p);

      // Constructors.
      //
      DistributionTransformationType ();

      DistributionTransformationType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      DistributionTransformationType (const DistributionTransformationType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual DistributionTransformationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      DistributionTransformationType&
      operator= (const DistributionTransformationType& x);

      virtual 
      ~DistributionTransformationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      DistributionTransformationEnum_optional DistributionTransformationEnum_;
      BoxCoxTransformation_optional BoxCoxTransformation_;
      OtherDistributionTransformation_optional OtherDistributionTransformation_;
    };

    class ActualSubgroupType: public ::xml_schema::type
    {
      public:
      // ActualIds
      //
      typedef ::xsd::qif2::StatsArrayIdType ActualIds_type;
      typedef ::xsd::cxx::tree::traits< ActualIds_type, char > ActualIds_traits;

      const ActualIds_type&
      ActualIds () const;

      ActualIds_type&
      ActualIds ();

      void
      ActualIds (const ActualIds_type& x);

      void
      ActualIds (::std::auto_ptr< ActualIds_type > p);

      // id
      //
      typedef ::xsd::qif2::QIFIdType id_type;
      typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

      const id_type&
      id () const;

      id_type&
      id ();

      void
      id (const id_type& x);

      void
      id (::std::auto_ptr< id_type > p);

      // Constructors.
      //
      ActualSubgroupType (const ActualIds_type&,
                          const id_type&);

      ActualSubgroupType (::std::auto_ptr< ActualIds_type >,
                          const id_type&);

      ActualSubgroupType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      ActualSubgroupType (const ActualSubgroupType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual ActualSubgroupType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ActualSubgroupType&
      operator= (const ActualSubgroupType& x);

      virtual 
      ~ActualSubgroupType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ActualIds_type > ActualIds_;
      ::xsd::cxx::tree::one< id_type > id_;
    };

    class CharacteristicStatsEvalBaseType: public ::xml_schema::type
    {
      public:
      // Attributes
      //
      typedef ::xsd::qif2::AttributesType Attributes_type;
      typedef ::xsd::cxx::tree::optional< Attributes_type > Attributes_optional;
      typedef ::xsd::cxx::tree::traits< Attributes_type, char > Attributes_traits;

      const Attributes_optional&
      Attributes () const;

      Attributes_optional&
      Attributes ();

      void
      Attributes (const Attributes_type& x);

      void
      Attributes (const Attributes_optional& x);

      void
      Attributes (::std::auto_ptr< Attributes_type > p);

      // ActualIds
      //
      typedef ::xsd::qif2::StatsArrayIdType ActualIds_type;
      typedef ::xsd::cxx::tree::optional< ActualIds_type > ActualIds_optional;
      typedef ::xsd::cxx::tree::traits< ActualIds_type, char > ActualIds_traits;

      const ActualIds_optional&
      ActualIds () const;

      ActualIds_optional&
      ActualIds ();

      void
      ActualIds (const ActualIds_type& x);

      void
      ActualIds (const ActualIds_optional& x);

      void
      ActualIds (::std::auto_ptr< ActualIds_type > p);

      // Subgroup
      //
      typedef ::xsd::qif2::ActualSubgroupType Subgroup_type;
      typedef ::xsd::cxx::tree::sequence< Subgroup_type > Subgroup_sequence;
      typedef Subgroup_sequence::iterator Subgroup_iterator;
      typedef Subgroup_sequence::const_iterator Subgroup_const_iterator;
      typedef ::xsd::cxx::tree::traits< Subgroup_type, char > Subgroup_traits;

      const Subgroup_sequence&
      Subgroup () const;

      Subgroup_sequence&
      Subgroup ();

      void
      Subgroup (const Subgroup_sequence& s);

      // Status
      //
      typedef ::xsd::qif2::StatsEvalStatusType Status_type;
      typedef ::xsd::cxx::tree::traits< Status_type, char > Status_traits;

      const Status_type&
      Status () const;

      Status_type&
      Status ();

      void
      Status (const Status_type& x);

      void
      Status (::std::auto_ptr< Status_type > p);

      // StudyIssue
      //
      typedef ::xsd::qif2::StudyIssueType StudyIssue_type;
      typedef ::xsd::cxx::tree::optional< StudyIssue_type > StudyIssue_optional;
      typedef ::xsd::cxx::tree::traits< StudyIssue_type, char > StudyIssue_traits;

      const StudyIssue_optional&
      StudyIssue () const;

      StudyIssue_optional&
      StudyIssue ();

      void
      StudyIssue (const StudyIssue_type& x);

      void
      StudyIssue (const StudyIssue_optional& x);

      void
      StudyIssue (::std::auto_ptr< StudyIssue_type > p);

      // DistributionTransformation
      //
      typedef ::xsd::qif2::DistributionTransformationType DistributionTransformation_type;
      typedef ::xsd::cxx::tree::optional< DistributionTransformation_type > DistributionTransformation_optional;
      typedef ::xsd::cxx::tree::traits< DistributionTransformation_type, char > DistributionTransformation_traits;

      const DistributionTransformation_optional&
      DistributionTransformation () const;

      DistributionTransformation_optional&
      DistributionTransformation ();

      void
      DistributionTransformation (const DistributionTransformation_type& x);

      void
      DistributionTransformation (const DistributionTransformation_optional& x);

      void
      DistributionTransformation (::std::auto_ptr< DistributionTransformation_type > p);

      // Constructors.
      //
      CharacteristicStatsEvalBaseType (const Status_type&);

      CharacteristicStatsEvalBaseType (::std::auto_ptr< Status_type >);

      CharacteristicStatsEvalBaseType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      CharacteristicStatsEvalBaseType (const CharacteristicStatsEvalBaseType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual CharacteristicStatsEvalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicStatsEvalBaseType&
      operator= (const CharacteristicStatsEvalBaseType& x);

      virtual 
      ~CharacteristicStatsEvalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Attributes_optional Attributes_;
      ActualIds_optional ActualIds_;
      Subgroup_sequence Subgroup_;
      ::xsd::cxx::tree::one< Status_type > Status_;
      StudyIssue_optional StudyIssue_;
      DistributionTransformation_optional DistributionTransformation_;
    };

    class StatsBaseType: public ::xml_schema::type
    {
      public:
      // TotalNumber
      //
      typedef ::xml_schema::non_negative_integer TotalNumber_type;
      typedef ::xsd::cxx::tree::optional< TotalNumber_type > TotalNumber_optional;
      typedef ::xsd::cxx::tree::traits< TotalNumber_type, char > TotalNumber_traits;

      const TotalNumber_optional&
      TotalNumber () const;

      TotalNumber_optional&
      TotalNumber ();

      void
      TotalNumber (const TotalNumber_type& x);

      void
      TotalNumber (const TotalNumber_optional& x);

      // SubgroupTotalNumber
      //
      typedef ::xsd::qif2::SubgroupIntegerType SubgroupTotalNumber_type;
      typedef ::xsd::cxx::tree::sequence< SubgroupTotalNumber_type > SubgroupTotalNumber_sequence;
      typedef SubgroupTotalNumber_sequence::iterator SubgroupTotalNumber_iterator;
      typedef SubgroupTotalNumber_sequence::const_iterator SubgroupTotalNumber_const_iterator;
      typedef ::xsd::cxx::tree::traits< SubgroupTotalNumber_type, char > SubgroupTotalNumber_traits;

      const SubgroupTotalNumber_sequence&
      SubgroupTotalNumber () const;

      SubgroupTotalNumber_sequence&
      SubgroupTotalNumber ();

      void
      SubgroupTotalNumber (const SubgroupTotalNumber_sequence& s);

      // EffectiveNumber
      //
      typedef ::xml_schema::non_negative_integer EffectiveNumber_type;
      typedef ::xsd::cxx::tree::optional< EffectiveNumber_type > EffectiveNumber_optional;
      typedef ::xsd::cxx::tree::traits< EffectiveNumber_type, char > EffectiveNumber_traits;

      const EffectiveNumber_optional&
      EffectiveNumber () const;

      EffectiveNumber_optional&
      EffectiveNumber ();

      void
      EffectiveNumber (const EffectiveNumber_type& x);

      void
      EffectiveNumber (const EffectiveNumber_optional& x);

      // SubgroupEffectiveNumber
      //
      typedef ::xsd::qif2::SubgroupIntegerType SubgroupEffectiveNumber_type;
      typedef ::xsd::cxx::tree::sequence< SubgroupEffectiveNumber_type > SubgroupEffectiveNumber_sequence;
      typedef SubgroupEffectiveNumber_sequence::iterator SubgroupEffectiveNumber_iterator;
      typedef SubgroupEffectiveNumber_sequence::const_iterator SubgroupEffectiveNumber_const_iterator;
      typedef ::xsd::cxx::tree::traits< SubgroupEffectiveNumber_type, char > SubgroupEffectiveNumber_traits;

      const SubgroupEffectiveNumber_sequence&
      SubgroupEffectiveNumber () const;

      SubgroupEffectiveNumber_sequence&
      SubgroupEffectiveNumber ();

      void
      SubgroupEffectiveNumber (const SubgroupEffectiveNumber_sequence& s);

      // NumberSubgroups
      //
      typedef ::xml_schema::non_negative_integer NumberSubgroups_type;
      typedef ::xsd::cxx::tree::optional< NumberSubgroups_type > NumberSubgroups_optional;
      typedef ::xsd::cxx::tree::traits< NumberSubgroups_type, char > NumberSubgroups_traits;

      const NumberSubgroups_optional&
      NumberSubgroups () const;

      NumberSubgroups_optional&
      NumberSubgroups ();

      void
      NumberSubgroups (const NumberSubgroups_type& x);

      void
      NumberSubgroups (const NumberSubgroups_optional& x);

      // Constructors.
      //
      StatsBaseType ();

      StatsBaseType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      StatsBaseType (const StatsBaseType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual StatsBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsBaseType&
      operator= (const StatsBaseType& x);

      virtual 
      ~StatsBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      TotalNumber_optional TotalNumber_;
      SubgroupTotalNumber_sequence SubgroupTotalNumber_;
      EffectiveNumber_optional EffectiveNumber_;
      SubgroupEffectiveNumber_sequence SubgroupEffectiveNumber_;
      NumberSubgroups_optional NumberSubgroups_;
    };

    class StatsNumericalBaseType: public ::xsd::qif2::StatsBaseType
    {
      public:
      // Average
      //
      typedef ::xsd::qif2::ActualDecimalType Average_type;
      typedef ::xsd::cxx::tree::optional< Average_type > Average_optional;
      typedef ::xsd::cxx::tree::traits< Average_type, char > Average_traits;

      const Average_optional&
      Average () const;

      Average_optional&
      Average ();

      void
      Average (const Average_type& x);

      void
      Average (const Average_optional& x);

      void
      Average (::std::auto_ptr< Average_type > p);

      // SubgroupAverage
      //
      typedef ::xsd::qif2::SubgroupDecimalType SubgroupAverage_type;
      typedef ::xsd::cxx::tree::sequence< SubgroupAverage_type > SubgroupAverage_sequence;
      typedef SubgroupAverage_sequence::iterator SubgroupAverage_iterator;
      typedef SubgroupAverage_sequence::const_iterator SubgroupAverage_const_iterator;
      typedef ::xsd::cxx::tree::traits< SubgroupAverage_type, char > SubgroupAverage_traits;

      const SubgroupAverage_sequence&
      SubgroupAverage () const;

      SubgroupAverage_sequence&
      SubgroupAverage ();

      void
      SubgroupAverage (const SubgroupAverage_sequence& s);

      // Difference
      //
      typedef ::xsd::qif2::ActualDecimalType Difference_type;
      typedef ::xsd::cxx::tree::optional< Difference_type > Difference_optional;
      typedef ::xsd::cxx::tree::traits< Difference_type, char > Difference_traits;

      const Difference_optional&
      Difference () const;

      Difference_optional&
      Difference ();

      void
      Difference (const Difference_type& x);

      void
      Difference (const Difference_optional& x);

      void
      Difference (::std::auto_ptr< Difference_type > p);

      // SubgroupDifference
      //
      typedef ::xsd::qif2::SubgroupDecimalType SubgroupDifference_type;
      typedef ::xsd::cxx::tree::sequence< SubgroupDifference_type > SubgroupDifference_sequence;
      typedef SubgroupDifference_sequence::iterator SubgroupDifference_iterator;
      typedef SubgroupDifference_sequence::const_iterator SubgroupDifference_const_iterator;
      typedef ::xsd::cxx::tree::traits< SubgroupDifference_type, char > SubgroupDifference_traits;

      const SubgroupDifference_sequence&
      SubgroupDifference () const;

      SubgroupDifference_sequence&
      SubgroupDifference ();

      void
      SubgroupDifference (const SubgroupDifference_sequence& s);

      // RootMeanSquare
      //
      typedef ::xsd::qif2::ActualDecimalType RootMeanSquare_type;
      typedef ::xsd::cxx::tree::optional< RootMeanSquare_type > RootMeanSquare_optional;
      typedef ::xsd::cxx::tree::traits< RootMeanSquare_type, char > RootMeanSquare_traits;

      const RootMeanSquare_optional&
      RootMeanSquare () const;

      RootMeanSquare_optional&
      RootMeanSquare ();

      void
      RootMeanSquare (const RootMeanSquare_type& x);

      void
      RootMeanSquare (const RootMeanSquare_optional& x);

      void
      RootMeanSquare (::std::auto_ptr< RootMeanSquare_type > p);

      // Maximum
      //
      typedef ::xsd::qif2::ActualDecimalType Maximum_type;
      typedef ::xsd::cxx::tree::optional< Maximum_type > Maximum_optional;
      typedef ::xsd::cxx::tree::traits< Maximum_type, char > Maximum_traits;

      const Maximum_optional&
      Maximum () const;

      Maximum_optional&
      Maximum ();

      void
      Maximum (const Maximum_type& x);

      void
      Maximum (const Maximum_optional& x);

      void
      Maximum (::std::auto_ptr< Maximum_type > p);

      // MaximumId
      //
      typedef ::xsd::qif2::QIFReferenceFullType MaximumId_type;
      typedef ::xsd::cxx::tree::optional< MaximumId_type > MaximumId_optional;
      typedef ::xsd::cxx::tree::traits< MaximumId_type, char > MaximumId_traits;

      const MaximumId_optional&
      MaximumId () const;

      MaximumId_optional&
      MaximumId ();

      void
      MaximumId (const MaximumId_type& x);

      void
      MaximumId (const MaximumId_optional& x);

      void
      MaximumId (::std::auto_ptr< MaximumId_type > p);

      // SubgroupMaximum
      //
      typedef ::xsd::qif2::SubgroupDecimalType SubgroupMaximum_type;
      typedef ::xsd::cxx::tree::optional< SubgroupMaximum_type > SubgroupMaximum_optional;
      typedef ::xsd::cxx::tree::traits< SubgroupMaximum_type, char > SubgroupMaximum_traits;

      const SubgroupMaximum_optional&
      SubgroupMaximum () const;

      SubgroupMaximum_optional&
      SubgroupMaximum ();

      void
      SubgroupMaximum (const SubgroupMaximum_type& x);

      void
      SubgroupMaximum (const SubgroupMaximum_optional& x);

      void
      SubgroupMaximum (::std::auto_ptr< SubgroupMaximum_type > p);

      // Minimum
      //
      typedef ::xsd::qif2::ActualDecimalType Minimum_type;
      typedef ::xsd::cxx::tree::optional< Minimum_type > Minimum_optional;
      typedef ::xsd::cxx::tree::traits< Minimum_type, char > Minimum_traits;

      const Minimum_optional&
      Minimum () const;

      Minimum_optional&
      Minimum ();

      void
      Minimum (const Minimum_type& x);

      void
      Minimum (const Minimum_optional& x);

      void
      Minimum (::std::auto_ptr< Minimum_type > p);

      // MinimumId
      //
      typedef ::xsd::qif2::QIFReferenceFullType MinimumId_type;
      typedef ::xsd::cxx::tree::optional< MinimumId_type > MinimumId_optional;
      typedef ::xsd::cxx::tree::traits< MinimumId_type, char > MinimumId_traits;

      const MinimumId_optional&
      MinimumId () const;

      MinimumId_optional&
      MinimumId ();

      void
      MinimumId (const MinimumId_type& x);

      void
      MinimumId (const MinimumId_optional& x);

      void
      MinimumId (::std::auto_ptr< MinimumId_type > p);

      // SubgroupMinimum
      //
      typedef ::xsd::qif2::SubgroupDecimalType SubgroupMinimum_type;
      typedef ::xsd::cxx::tree::optional< SubgroupMinimum_type > SubgroupMinimum_optional;
      typedef ::xsd::cxx::tree::traits< SubgroupMinimum_type, char > SubgroupMinimum_traits;

      const SubgroupMinimum_optional&
      SubgroupMinimum () const;

      SubgroupMinimum_optional&
      SubgroupMinimum ();

      void
      SubgroupMinimum (const SubgroupMinimum_type& x);

      void
      SubgroupMinimum (const SubgroupMinimum_optional& x);

      void
      SubgroupMinimum (::std::auto_ptr< SubgroupMinimum_type > p);

      // Range
      //
      typedef ::xsd::qif2::ActualDecimalType Range_type;
      typedef ::xsd::cxx::tree::optional< Range_type > Range_optional;
      typedef ::xsd::cxx::tree::traits< Range_type, char > Range_traits;

      const Range_optional&
      Range () const;

      Range_optional&
      Range ();

      void
      Range (const Range_type& x);

      void
      Range (const Range_optional& x);

      void
      Range (::std::auto_ptr< Range_type > p);

      // SubgroupRange
      //
      typedef ::xsd::qif2::SubgroupDecimalType SubgroupRange_type;
      typedef ::xsd::cxx::tree::optional< SubgroupRange_type > SubgroupRange_optional;
      typedef ::xsd::cxx::tree::traits< SubgroupRange_type, char > SubgroupRange_traits;

      const SubgroupRange_optional&
      SubgroupRange () const;

      SubgroupRange_optional&
      SubgroupRange ();

      void
      SubgroupRange (const SubgroupRange_type& x);

      void
      SubgroupRange (const SubgroupRange_optional& x);

      void
      SubgroupRange (::std::auto_ptr< SubgroupRange_type > p);

      // AverageRange
      //
      typedef ::xsd::qif2::ActualDecimalType AverageRange_type;
      typedef ::xsd::cxx::tree::optional< AverageRange_type > AverageRange_optional;
      typedef ::xsd::cxx::tree::traits< AverageRange_type, char > AverageRange_traits;

      const AverageRange_optional&
      AverageRange () const;

      AverageRange_optional&
      AverageRange ();

      void
      AverageRange (const AverageRange_type& x);

      void
      AverageRange (const AverageRange_optional& x);

      void
      AverageRange (::std::auto_ptr< AverageRange_type > p);

      // StandardDeviation
      //
      typedef ::xsd::qif2::ActualDecimalType StandardDeviation_type;
      typedef ::xsd::cxx::tree::optional< StandardDeviation_type > StandardDeviation_optional;
      typedef ::xsd::cxx::tree::traits< StandardDeviation_type, char > StandardDeviation_traits;

      const StandardDeviation_optional&
      StandardDeviation () const;

      StandardDeviation_optional&
      StandardDeviation ();

      void
      StandardDeviation (const StandardDeviation_type& x);

      void
      StandardDeviation (const StandardDeviation_optional& x);

      void
      StandardDeviation (::std::auto_ptr< StandardDeviation_type > p);

      // Skew
      //
      typedef ::xsd::qif2::ActualDecimalType Skew_type;
      typedef ::xsd::cxx::tree::optional< Skew_type > Skew_optional;
      typedef ::xsd::cxx::tree::traits< Skew_type, char > Skew_traits;

      const Skew_optional&
      Skew () const;

      Skew_optional&
      Skew ();

      void
      Skew (const Skew_type& x);

      void
      Skew (const Skew_optional& x);

      void
      Skew (::std::auto_ptr< Skew_type > p);

      // Kurtosis
      //
      typedef ::xsd::qif2::ActualDecimalType Kurtosis_type;
      typedef ::xsd::cxx::tree::optional< Kurtosis_type > Kurtosis_optional;
      typedef ::xsd::cxx::tree::traits< Kurtosis_type, char > Kurtosis_traits;

      const Kurtosis_optional&
      Kurtosis () const;

      Kurtosis_optional&
      Kurtosis ();

      void
      Kurtosis (const Kurtosis_type& x);

      void
      Kurtosis (const Kurtosis_optional& x);

      void
      Kurtosis (::std::auto_ptr< Kurtosis_type > p);

      // Normality
      //
      typedef ::xsd::qif2::ActualDecimalType Normality_type;
      typedef ::xsd::cxx::tree::optional< Normality_type > Normality_optional;
      typedef ::xsd::cxx::tree::traits< Normality_type, char > Normality_traits;

      const Normality_optional&
      Normality () const;

      Normality_optional&
      Normality ();

      void
      Normality (const Normality_type& x);

      void
      Normality (const Normality_optional& x);

      void
      Normality (::std::auto_ptr< Normality_type > p);

      // ProcessVariation
      //
      typedef ::xsd::qif2::ActualDecimalType ProcessVariation_type;
      typedef ::xsd::cxx::tree::optional< ProcessVariation_type > ProcessVariation_optional;
      typedef ::xsd::cxx::tree::traits< ProcessVariation_type, char > ProcessVariation_traits;

      const ProcessVariation_optional&
      ProcessVariation () const;

      ProcessVariation_optional&
      ProcessVariation ();

      void
      ProcessVariation (const ProcessVariation_type& x);

      void
      ProcessVariation (const ProcessVariation_optional& x);

      void
      ProcessVariation (::std::auto_ptr< ProcessVariation_type > p);

      // EstimatedStandardDeviation
      //
      typedef ::xsd::qif2::ActualDecimalType EstimatedStandardDeviation_type;
      typedef ::xsd::cxx::tree::optional< EstimatedStandardDeviation_type > EstimatedStandardDeviation_optional;
      typedef ::xsd::cxx::tree::traits< EstimatedStandardDeviation_type, char > EstimatedStandardDeviation_traits;

      const EstimatedStandardDeviation_optional&
      EstimatedStandardDeviation () const;

      EstimatedStandardDeviation_optional&
      EstimatedStandardDeviation ();

      void
      EstimatedStandardDeviation (const EstimatedStandardDeviation_type& x);

      void
      EstimatedStandardDeviation (const EstimatedStandardDeviation_optional& x);

      void
      EstimatedStandardDeviation (::std::auto_ptr< EstimatedStandardDeviation_type > p);

      // UpperControlLimit
      //
      typedef ::xsd::qif2::ActualDecimalType UpperControlLimit_type;
      typedef ::xsd::cxx::tree::optional< UpperControlLimit_type > UpperControlLimit_optional;
      typedef ::xsd::cxx::tree::traits< UpperControlLimit_type, char > UpperControlLimit_traits;

      const UpperControlLimit_optional&
      UpperControlLimit () const;

      UpperControlLimit_optional&
      UpperControlLimit ();

      void
      UpperControlLimit (const UpperControlLimit_type& x);

      void
      UpperControlLimit (const UpperControlLimit_optional& x);

      void
      UpperControlLimit (::std::auto_ptr< UpperControlLimit_type > p);

      // LowerControlLimit
      //
      typedef ::xsd::qif2::ActualDecimalType LowerControlLimit_type;
      typedef ::xsd::cxx::tree::optional< LowerControlLimit_type > LowerControlLimit_optional;
      typedef ::xsd::cxx::tree::traits< LowerControlLimit_type, char > LowerControlLimit_traits;

      const LowerControlLimit_optional&
      LowerControlLimit () const;

      LowerControlLimit_optional&
      LowerControlLimit ();

      void
      LowerControlLimit (const LowerControlLimit_type& x);

      void
      LowerControlLimit (const LowerControlLimit_optional& x);

      void
      LowerControlLimit (::std::auto_ptr< LowerControlLimit_type > p);

      // UpperControlLimitRange
      //
      typedef ::xsd::qif2::ActualDecimalType UpperControlLimitRange_type;
      typedef ::xsd::cxx::tree::optional< UpperControlLimitRange_type > UpperControlLimitRange_optional;
      typedef ::xsd::cxx::tree::traits< UpperControlLimitRange_type, char > UpperControlLimitRange_traits;

      const UpperControlLimitRange_optional&
      UpperControlLimitRange () const;

      UpperControlLimitRange_optional&
      UpperControlLimitRange ();

      void
      UpperControlLimitRange (const UpperControlLimitRange_type& x);

      void
      UpperControlLimitRange (const UpperControlLimitRange_optional& x);

      void
      UpperControlLimitRange (::std::auto_ptr< UpperControlLimitRange_type > p);

      // LowerControlLimitRange
      //
      typedef ::xsd::qif2::ActualDecimalType LowerControlLimitRange_type;
      typedef ::xsd::cxx::tree::optional< LowerControlLimitRange_type > LowerControlLimitRange_optional;
      typedef ::xsd::cxx::tree::traits< LowerControlLimitRange_type, char > LowerControlLimitRange_traits;

      const LowerControlLimitRange_optional&
      LowerControlLimitRange () const;

      LowerControlLimitRange_optional&
      LowerControlLimitRange ();

      void
      LowerControlLimitRange (const LowerControlLimitRange_type& x);

      void
      LowerControlLimitRange (const LowerControlLimitRange_optional& x);

      void
      LowerControlLimitRange (::std::auto_ptr< LowerControlLimitRange_type > p);

      // NumberOutOfControl
      //
      typedef ::xml_schema::non_negative_integer NumberOutOfControl_type;
      typedef ::xsd::cxx::tree::optional< NumberOutOfControl_type > NumberOutOfControl_optional;
      typedef ::xsd::cxx::tree::traits< NumberOutOfControl_type, char > NumberOutOfControl_traits;

      const NumberOutOfControl_optional&
      NumberOutOfControl () const;

      NumberOutOfControl_optional&
      NumberOutOfControl ();

      void
      NumberOutOfControl (const NumberOutOfControl_type& x);

      void
      NumberOutOfControl (const NumberOutOfControl_optional& x);

      // OutOfControlIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType OutOfControlIds_type;
      typedef ::xsd::cxx::tree::optional< OutOfControlIds_type > OutOfControlIds_optional;
      typedef ::xsd::cxx::tree::traits< OutOfControlIds_type, char > OutOfControlIds_traits;

      const OutOfControlIds_optional&
      OutOfControlIds () const;

      OutOfControlIds_optional&
      OutOfControlIds ();

      void
      OutOfControlIds (const OutOfControlIds_type& x);

      void
      OutOfControlIds (const OutOfControlIds_optional& x);

      void
      OutOfControlIds (::std::auto_ptr< OutOfControlIds_type > p);

      // AppraiserVariation
      //
      typedef ::xsd::qif2::ActualDecimalType AppraiserVariation_type;
      typedef ::xsd::cxx::tree::optional< AppraiserVariation_type > AppraiserVariation_optional;
      typedef ::xsd::cxx::tree::traits< AppraiserVariation_type, char > AppraiserVariation_traits;

      const AppraiserVariation_optional&
      AppraiserVariation () const;

      AppraiserVariation_optional&
      AppraiserVariation ();

      void
      AppraiserVariation (const AppraiserVariation_type& x);

      void
      AppraiserVariation (const AppraiserVariation_optional& x);

      void
      AppraiserVariation (::std::auto_ptr< AppraiserVariation_type > p);

      // EquipmentVariation
      //
      typedef ::xsd::qif2::ActualDecimalType EquipmentVariation_type;
      typedef ::xsd::cxx::tree::optional< EquipmentVariation_type > EquipmentVariation_optional;
      typedef ::xsd::cxx::tree::traits< EquipmentVariation_type, char > EquipmentVariation_traits;

      const EquipmentVariation_optional&
      EquipmentVariation () const;

      EquipmentVariation_optional&
      EquipmentVariation ();

      void
      EquipmentVariation (const EquipmentVariation_type& x);

      void
      EquipmentVariation (const EquipmentVariation_optional& x);

      void
      EquipmentVariation (::std::auto_ptr< EquipmentVariation_type > p);

      // Interaction
      //
      typedef ::xsd::qif2::ActualDecimalType Interaction_type;
      typedef ::xsd::cxx::tree::optional< Interaction_type > Interaction_optional;
      typedef ::xsd::cxx::tree::traits< Interaction_type, char > Interaction_traits;

      const Interaction_optional&
      Interaction () const;

      Interaction_optional&
      Interaction ();

      void
      Interaction (const Interaction_type& x);

      void
      Interaction (const Interaction_optional& x);

      void
      Interaction (::std::auto_ptr< Interaction_type > p);

      // GageRandR
      //
      typedef ::xsd::qif2::ActualDecimalType GageRandR_type;
      typedef ::xsd::cxx::tree::optional< GageRandR_type > GageRandR_optional;
      typedef ::xsd::cxx::tree::traits< GageRandR_type, char > GageRandR_traits;

      const GageRandR_optional&
      GageRandR () const;

      GageRandR_optional&
      GageRandR ();

      void
      GageRandR (const GageRandR_type& x);

      void
      GageRandR (const GageRandR_optional& x);

      void
      GageRandR (::std::auto_ptr< GageRandR_type > p);

      // PartVariation
      //
      typedef ::xsd::qif2::ActualDecimalType PartVariation_type;
      typedef ::xsd::cxx::tree::optional< PartVariation_type > PartVariation_optional;
      typedef ::xsd::cxx::tree::traits< PartVariation_type, char > PartVariation_traits;

      const PartVariation_optional&
      PartVariation () const;

      PartVariation_optional&
      PartVariation ();

      void
      PartVariation (const PartVariation_type& x);

      void
      PartVariation (const PartVariation_optional& x);

      void
      PartVariation (::std::auto_ptr< PartVariation_type > p);

      // TotalVariation
      //
      typedef ::xsd::qif2::ActualDecimalType TotalVariation_type;
      typedef ::xsd::cxx::tree::optional< TotalVariation_type > TotalVariation_optional;
      typedef ::xsd::cxx::tree::traits< TotalVariation_type, char > TotalVariation_traits;

      const TotalVariation_optional&
      TotalVariation () const;

      TotalVariation_optional&
      TotalVariation ();

      void
      TotalVariation (const TotalVariation_type& x);

      void
      TotalVariation (const TotalVariation_optional& x);

      void
      TotalVariation (::std::auto_ptr< TotalVariation_type > p);

      // Linearity
      //
      typedef ::xsd::qif2::ActualDecimalType Linearity_type;
      typedef ::xsd::cxx::tree::optional< Linearity_type > Linearity_optional;
      typedef ::xsd::cxx::tree::traits< Linearity_type, char > Linearity_traits;

      const Linearity_optional&
      Linearity () const;

      Linearity_optional&
      Linearity ();

      void
      Linearity (const Linearity_type& x);

      void
      Linearity (const Linearity_optional& x);

      void
      Linearity (::std::auto_ptr< Linearity_type > p);

      // Bias
      //
      typedef ::xsd::qif2::ActualDecimalType Bias_type;
      typedef ::xsd::cxx::tree::optional< Bias_type > Bias_optional;
      typedef ::xsd::cxx::tree::traits< Bias_type, char > Bias_traits;

      const Bias_optional&
      Bias () const;

      Bias_optional&
      Bias ();

      void
      Bias (const Bias_type& x);

      void
      Bias (const Bias_optional& x);

      void
      Bias (::std::auto_ptr< Bias_type > p);

      // RelativeLinearity
      //
      typedef ::xsd::qif2::ActualDecimalType RelativeLinearity_type;
      typedef ::xsd::cxx::tree::optional< RelativeLinearity_type > RelativeLinearity_optional;
      typedef ::xsd::cxx::tree::traits< RelativeLinearity_type, char > RelativeLinearity_traits;

      const RelativeLinearity_optional&
      RelativeLinearity () const;

      RelativeLinearity_optional&
      RelativeLinearity ();

      void
      RelativeLinearity (const RelativeLinearity_type& x);

      void
      RelativeLinearity (const RelativeLinearity_optional& x);

      void
      RelativeLinearity (::std::auto_ptr< RelativeLinearity_type > p);

      // RelativeBias
      //
      typedef ::xsd::qif2::ActualDecimalType RelativeBias_type;
      typedef ::xsd::cxx::tree::optional< RelativeBias_type > RelativeBias_optional;
      typedef ::xsd::cxx::tree::traits< RelativeBias_type, char > RelativeBias_traits;

      const RelativeBias_optional&
      RelativeBias () const;

      RelativeBias_optional&
      RelativeBias ();

      void
      RelativeBias (const RelativeBias_type& x);

      void
      RelativeBias (const RelativeBias_optional& x);

      void
      RelativeBias (::std::auto_ptr< RelativeBias_type > p);

      // GoodnessOfFit
      //
      typedef ::xsd::qif2::ActualDecimalType GoodnessOfFit_type;
      typedef ::xsd::cxx::tree::optional< GoodnessOfFit_type > GoodnessOfFit_optional;
      typedef ::xsd::cxx::tree::traits< GoodnessOfFit_type, char > GoodnessOfFit_traits;

      const GoodnessOfFit_optional&
      GoodnessOfFit () const;

      GoodnessOfFit_optional&
      GoodnessOfFit ();

      void
      GoodnessOfFit (const GoodnessOfFit_type& x);

      void
      GoodnessOfFit (const GoodnessOfFit_optional& x);

      void
      GoodnessOfFit (::std::auto_ptr< GoodnessOfFit_type > p);

      // RegressionSlope
      //
      typedef ::xsd::qif2::ActualDecimalType RegressionSlope_type;
      typedef ::xsd::cxx::tree::optional< RegressionSlope_type > RegressionSlope_optional;
      typedef ::xsd::cxx::tree::traits< RegressionSlope_type, char > RegressionSlope_traits;

      const RegressionSlope_optional&
      RegressionSlope () const;

      RegressionSlope_optional&
      RegressionSlope ();

      void
      RegressionSlope (const RegressionSlope_type& x);

      void
      RegressionSlope (const RegressionSlope_optional& x);

      void
      RegressionSlope (::std::auto_ptr< RegressionSlope_type > p);

      // RegressionIntercept
      //
      typedef ::xsd::qif2::ActualDecimalType RegressionIntercept_type;
      typedef ::xsd::cxx::tree::optional< RegressionIntercept_type > RegressionIntercept_optional;
      typedef ::xsd::cxx::tree::traits< RegressionIntercept_type, char > RegressionIntercept_traits;

      const RegressionIntercept_optional&
      RegressionIntercept () const;

      RegressionIntercept_optional&
      RegressionIntercept ();

      void
      RegressionIntercept (const RegressionIntercept_type& x);

      void
      RegressionIntercept (const RegressionIntercept_optional& x);

      void
      RegressionIntercept (::std::auto_ptr< RegressionIntercept_type > p);

      // UpperConfidenceLimit
      //
      typedef ::xsd::qif2::ActualDecimalType UpperConfidenceLimit_type;
      typedef ::xsd::cxx::tree::optional< UpperConfidenceLimit_type > UpperConfidenceLimit_optional;
      typedef ::xsd::cxx::tree::traits< UpperConfidenceLimit_type, char > UpperConfidenceLimit_traits;

      const UpperConfidenceLimit_optional&
      UpperConfidenceLimit () const;

      UpperConfidenceLimit_optional&
      UpperConfidenceLimit ();

      void
      UpperConfidenceLimit (const UpperConfidenceLimit_type& x);

      void
      UpperConfidenceLimit (const UpperConfidenceLimit_optional& x);

      void
      UpperConfidenceLimit (::std::auto_ptr< UpperConfidenceLimit_type > p);

      // LowerConfidenceLimit
      //
      typedef ::xsd::qif2::ActualDecimalType LowerConfidenceLimit_type;
      typedef ::xsd::cxx::tree::optional< LowerConfidenceLimit_type > LowerConfidenceLimit_optional;
      typedef ::xsd::cxx::tree::traits< LowerConfidenceLimit_type, char > LowerConfidenceLimit_traits;

      const LowerConfidenceLimit_optional&
      LowerConfidenceLimit () const;

      LowerConfidenceLimit_optional&
      LowerConfidenceLimit ();

      void
      LowerConfidenceLimit (const LowerConfidenceLimit_type& x);

      void
      LowerConfidenceLimit (const LowerConfidenceLimit_optional& x);

      void
      LowerConfidenceLimit (::std::auto_ptr< LowerConfidenceLimit_type > p);

      // TDistribution
      //
      typedef ::xsd::qif2::ActualDecimalType TDistribution_type;
      typedef ::xsd::cxx::tree::optional< TDistribution_type > TDistribution_optional;
      typedef ::xsd::cxx::tree::traits< TDistribution_type, char > TDistribution_traits;

      const TDistribution_optional&
      TDistribution () const;

      TDistribution_optional&
      TDistribution ();

      void
      TDistribution (const TDistribution_type& x);

      void
      TDistribution (const TDistribution_optional& x);

      void
      TDistribution (::std::auto_ptr< TDistribution_type > p);

      // Constructors.
      //
      StatsNumericalBaseType ();

      StatsNumericalBaseType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      StatsNumericalBaseType (const StatsNumericalBaseType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual StatsNumericalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsNumericalBaseType&
      operator= (const StatsNumericalBaseType& x);

      virtual 
      ~StatsNumericalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Average_optional Average_;
      SubgroupAverage_sequence SubgroupAverage_;
      Difference_optional Difference_;
      SubgroupDifference_sequence SubgroupDifference_;
      RootMeanSquare_optional RootMeanSquare_;
      Maximum_optional Maximum_;
      MaximumId_optional MaximumId_;
      SubgroupMaximum_optional SubgroupMaximum_;
      Minimum_optional Minimum_;
      MinimumId_optional MinimumId_;
      SubgroupMinimum_optional SubgroupMinimum_;
      Range_optional Range_;
      SubgroupRange_optional SubgroupRange_;
      AverageRange_optional AverageRange_;
      StandardDeviation_optional StandardDeviation_;
      Skew_optional Skew_;
      Kurtosis_optional Kurtosis_;
      Normality_optional Normality_;
      ProcessVariation_optional ProcessVariation_;
      EstimatedStandardDeviation_optional EstimatedStandardDeviation_;
      UpperControlLimit_optional UpperControlLimit_;
      LowerControlLimit_optional LowerControlLimit_;
      UpperControlLimitRange_optional UpperControlLimitRange_;
      LowerControlLimitRange_optional LowerControlLimitRange_;
      NumberOutOfControl_optional NumberOutOfControl_;
      OutOfControlIds_optional OutOfControlIds_;
      AppraiserVariation_optional AppraiserVariation_;
      EquipmentVariation_optional EquipmentVariation_;
      Interaction_optional Interaction_;
      GageRandR_optional GageRandR_;
      PartVariation_optional PartVariation_;
      TotalVariation_optional TotalVariation_;
      Linearity_optional Linearity_;
      Bias_optional Bias_;
      RelativeLinearity_optional RelativeLinearity_;
      RelativeBias_optional RelativeBias_;
      GoodnessOfFit_optional GoodnessOfFit_;
      RegressionSlope_optional RegressionSlope_;
      RegressionIntercept_optional RegressionIntercept_;
      UpperConfidenceLimit_optional UpperConfidenceLimit_;
      LowerConfidenceLimit_optional LowerConfidenceLimit_;
      TDistribution_optional TDistribution_;
    };

    class StatsWithTolNumericalBaseType: public ::xsd::qif2::StatsNumericalBaseType
    {
      public:
      // NumberOutOfTolerance
      //
      typedef ::xml_schema::non_negative_integer NumberOutOfTolerance_type;
      typedef ::xsd::cxx::tree::optional< NumberOutOfTolerance_type > NumberOutOfTolerance_optional;
      typedef ::xsd::cxx::tree::traits< NumberOutOfTolerance_type, char > NumberOutOfTolerance_traits;

      const NumberOutOfTolerance_optional&
      NumberOutOfTolerance () const;

      NumberOutOfTolerance_optional&
      NumberOutOfTolerance ();

      void
      NumberOutOfTolerance (const NumberOutOfTolerance_type& x);

      void
      NumberOutOfTolerance (const NumberOutOfTolerance_optional& x);

      // OutOfToleranceIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType OutOfToleranceIds_type;
      typedef ::xsd::cxx::tree::optional< OutOfToleranceIds_type > OutOfToleranceIds_optional;
      typedef ::xsd::cxx::tree::traits< OutOfToleranceIds_type, char > OutOfToleranceIds_traits;

      const OutOfToleranceIds_optional&
      OutOfToleranceIds () const;

      OutOfToleranceIds_optional&
      OutOfToleranceIds ();

      void
      OutOfToleranceIds (const OutOfToleranceIds_type& x);

      void
      OutOfToleranceIds (const OutOfToleranceIds_optional& x);

      void
      OutOfToleranceIds (::std::auto_ptr< OutOfToleranceIds_type > p);

      // SubgroupNumberOutOfTolerance
      //
      typedef ::xsd::qif2::SubgroupIntegerType SubgroupNumberOutOfTolerance_type;
      typedef ::xsd::cxx::tree::optional< SubgroupNumberOutOfTolerance_type > SubgroupNumberOutOfTolerance_optional;
      typedef ::xsd::cxx::tree::traits< SubgroupNumberOutOfTolerance_type, char > SubgroupNumberOutOfTolerance_traits;

      const SubgroupNumberOutOfTolerance_optional&
      SubgroupNumberOutOfTolerance () const;

      SubgroupNumberOutOfTolerance_optional&
      SubgroupNumberOutOfTolerance ();

      void
      SubgroupNumberOutOfTolerance (const SubgroupNumberOutOfTolerance_type& x);

      void
      SubgroupNumberOutOfTolerance (const SubgroupNumberOutOfTolerance_optional& x);

      void
      SubgroupNumberOutOfTolerance (::std::auto_ptr< SubgroupNumberOutOfTolerance_type > p);

      // NumberOverUpperTolerance
      //
      typedef ::xml_schema::non_negative_integer NumberOverUpperTolerance_type;
      typedef ::xsd::cxx::tree::optional< NumberOverUpperTolerance_type > NumberOverUpperTolerance_optional;
      typedef ::xsd::cxx::tree::traits< NumberOverUpperTolerance_type, char > NumberOverUpperTolerance_traits;

      const NumberOverUpperTolerance_optional&
      NumberOverUpperTolerance () const;

      NumberOverUpperTolerance_optional&
      NumberOverUpperTolerance ();

      void
      NumberOverUpperTolerance (const NumberOverUpperTolerance_type& x);

      void
      NumberOverUpperTolerance (const NumberOverUpperTolerance_optional& x);

      // OverUpperToleranceIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType OverUpperToleranceIds_type;
      typedef ::xsd::cxx::tree::optional< OverUpperToleranceIds_type > OverUpperToleranceIds_optional;
      typedef ::xsd::cxx::tree::traits< OverUpperToleranceIds_type, char > OverUpperToleranceIds_traits;

      const OverUpperToleranceIds_optional&
      OverUpperToleranceIds () const;

      OverUpperToleranceIds_optional&
      OverUpperToleranceIds ();

      void
      OverUpperToleranceIds (const OverUpperToleranceIds_type& x);

      void
      OverUpperToleranceIds (const OverUpperToleranceIds_optional& x);

      void
      OverUpperToleranceIds (::std::auto_ptr< OverUpperToleranceIds_type > p);

      // SubgroupNumberOverUpperTolerance
      //
      typedef ::xsd::qif2::SubgroupIntegerType SubgroupNumberOverUpperTolerance_type;
      typedef ::xsd::cxx::tree::optional< SubgroupNumberOverUpperTolerance_type > SubgroupNumberOverUpperTolerance_optional;
      typedef ::xsd::cxx::tree::traits< SubgroupNumberOverUpperTolerance_type, char > SubgroupNumberOverUpperTolerance_traits;

      const SubgroupNumberOverUpperTolerance_optional&
      SubgroupNumberOverUpperTolerance () const;

      SubgroupNumberOverUpperTolerance_optional&
      SubgroupNumberOverUpperTolerance ();

      void
      SubgroupNumberOverUpperTolerance (const SubgroupNumberOverUpperTolerance_type& x);

      void
      SubgroupNumberOverUpperTolerance (const SubgroupNumberOverUpperTolerance_optional& x);

      void
      SubgroupNumberOverUpperTolerance (::std::auto_ptr< SubgroupNumberOverUpperTolerance_type > p);

      // NumberUnderLowerTolerance
      //
      typedef ::xml_schema::non_negative_integer NumberUnderLowerTolerance_type;
      typedef ::xsd::cxx::tree::optional< NumberUnderLowerTolerance_type > NumberUnderLowerTolerance_optional;
      typedef ::xsd::cxx::tree::traits< NumberUnderLowerTolerance_type, char > NumberUnderLowerTolerance_traits;

      const NumberUnderLowerTolerance_optional&
      NumberUnderLowerTolerance () const;

      NumberUnderLowerTolerance_optional&
      NumberUnderLowerTolerance ();

      void
      NumberUnderLowerTolerance (const NumberUnderLowerTolerance_type& x);

      void
      NumberUnderLowerTolerance (const NumberUnderLowerTolerance_optional& x);

      // UnderLowerToleranceIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType UnderLowerToleranceIds_type;
      typedef ::xsd::cxx::tree::optional< UnderLowerToleranceIds_type > UnderLowerToleranceIds_optional;
      typedef ::xsd::cxx::tree::traits< UnderLowerToleranceIds_type, char > UnderLowerToleranceIds_traits;

      const UnderLowerToleranceIds_optional&
      UnderLowerToleranceIds () const;

      UnderLowerToleranceIds_optional&
      UnderLowerToleranceIds ();

      void
      UnderLowerToleranceIds (const UnderLowerToleranceIds_type& x);

      void
      UnderLowerToleranceIds (const UnderLowerToleranceIds_optional& x);

      void
      UnderLowerToleranceIds (::std::auto_ptr< UnderLowerToleranceIds_type > p);

      // SubgroupNumberUnderLowerTolerance
      //
      typedef ::xsd::qif2::SubgroupIntegerType SubgroupNumberUnderLowerTolerance_type;
      typedef ::xsd::cxx::tree::optional< SubgroupNumberUnderLowerTolerance_type > SubgroupNumberUnderLowerTolerance_optional;
      typedef ::xsd::cxx::tree::traits< SubgroupNumberUnderLowerTolerance_type, char > SubgroupNumberUnderLowerTolerance_traits;

      const SubgroupNumberUnderLowerTolerance_optional&
      SubgroupNumberUnderLowerTolerance () const;

      SubgroupNumberUnderLowerTolerance_optional&
      SubgroupNumberUnderLowerTolerance ();

      void
      SubgroupNumberUnderLowerTolerance (const SubgroupNumberUnderLowerTolerance_type& x);

      void
      SubgroupNumberUnderLowerTolerance (const SubgroupNumberUnderLowerTolerance_optional& x);

      void
      SubgroupNumberUnderLowerTolerance (::std::auto_ptr< SubgroupNumberUnderLowerTolerance_type > p);

      // Cp
      //
      typedef ::xsd::qif2::ActualDecimalType Cp_type;
      typedef ::xsd::cxx::tree::optional< Cp_type > Cp_optional;
      typedef ::xsd::cxx::tree::traits< Cp_type, char > Cp_traits;

      const Cp_optional&
      Cp () const;

      Cp_optional&
      Cp ();

      void
      Cp (const Cp_type& x);

      void
      Cp (const Cp_optional& x);

      void
      Cp (::std::auto_ptr< Cp_type > p);

      // Cpk
      //
      typedef ::xsd::qif2::ActualDecimalType Cpk_type;
      typedef ::xsd::cxx::tree::optional< Cpk_type > Cpk_optional;
      typedef ::xsd::cxx::tree::traits< Cpk_type, char > Cpk_traits;

      const Cpk_optional&
      Cpk () const;

      Cpk_optional&
      Cpk ();

      void
      Cpk (const Cpk_type& x);

      void
      Cpk (const Cpk_optional& x);

      void
      Cpk (::std::auto_ptr< Cpk_type > p);

      // Pp
      //
      typedef ::xsd::qif2::ActualDecimalType Pp_type;
      typedef ::xsd::cxx::tree::optional< Pp_type > Pp_optional;
      typedef ::xsd::cxx::tree::traits< Pp_type, char > Pp_traits;

      const Pp_optional&
      Pp () const;

      Pp_optional&
      Pp ();

      void
      Pp (const Pp_type& x);

      void
      Pp (const Pp_optional& x);

      void
      Pp (::std::auto_ptr< Pp_type > p);

      // Ppk
      //
      typedef ::xsd::qif2::ActualDecimalType Ppk_type;
      typedef ::xsd::cxx::tree::optional< Ppk_type > Ppk_optional;
      typedef ::xsd::cxx::tree::traits< Ppk_type, char > Ppk_traits;

      const Ppk_optional&
      Ppk () const;

      Ppk_optional&
      Ppk ();

      void
      Ppk (const Ppk_type& x);

      void
      Ppk (const Ppk_optional& x);

      void
      Ppk (::std::auto_ptr< Ppk_type > p);

      // Cm
      //
      typedef ::xsd::qif2::ActualDecimalType Cm_type;
      typedef ::xsd::cxx::tree::optional< Cm_type > Cm_optional;
      typedef ::xsd::cxx::tree::traits< Cm_type, char > Cm_traits;

      const Cm_optional&
      Cm () const;

      Cm_optional&
      Cm ();

      void
      Cm (const Cm_type& x);

      void
      Cm (const Cm_optional& x);

      void
      Cm (::std::auto_ptr< Cm_type > p);

      // Cmk
      //
      typedef ::xsd::qif2::ActualDecimalType Cmk_type;
      typedef ::xsd::cxx::tree::optional< Cmk_type > Cmk_optional;
      typedef ::xsd::cxx::tree::traits< Cmk_type, char > Cmk_traits;

      const Cmk_optional&
      Cmk () const;

      Cmk_optional&
      Cmk ();

      void
      Cmk (const Cmk_type& x);

      void
      Cmk (const Cmk_optional& x);

      void
      Cmk (::std::auto_ptr< Cmk_type > p);

      // RelativeAppraiserVariation
      //
      typedef ::xsd::qif2::ActualDecimalType RelativeAppraiserVariation_type;
      typedef ::xsd::cxx::tree::optional< RelativeAppraiserVariation_type > RelativeAppraiserVariation_optional;
      typedef ::xsd::cxx::tree::traits< RelativeAppraiserVariation_type, char > RelativeAppraiserVariation_traits;

      const RelativeAppraiserVariation_optional&
      RelativeAppraiserVariation () const;

      RelativeAppraiserVariation_optional&
      RelativeAppraiserVariation ();

      void
      RelativeAppraiserVariation (const RelativeAppraiserVariation_type& x);

      void
      RelativeAppraiserVariation (const RelativeAppraiserVariation_optional& x);

      void
      RelativeAppraiserVariation (::std::auto_ptr< RelativeAppraiserVariation_type > p);

      // RelativeEquipmentVariation
      //
      typedef ::xsd::qif2::ActualDecimalType RelativeEquipmentVariation_type;
      typedef ::xsd::cxx::tree::optional< RelativeEquipmentVariation_type > RelativeEquipmentVariation_optional;
      typedef ::xsd::cxx::tree::traits< RelativeEquipmentVariation_type, char > RelativeEquipmentVariation_traits;

      const RelativeEquipmentVariation_optional&
      RelativeEquipmentVariation () const;

      RelativeEquipmentVariation_optional&
      RelativeEquipmentVariation ();

      void
      RelativeEquipmentVariation (const RelativeEquipmentVariation_type& x);

      void
      RelativeEquipmentVariation (const RelativeEquipmentVariation_optional& x);

      void
      RelativeEquipmentVariation (::std::auto_ptr< RelativeEquipmentVariation_type > p);

      // RelativeInteraction
      //
      typedef ::xsd::qif2::ActualDecimalType RelativeInteraction_type;
      typedef ::xsd::cxx::tree::optional< RelativeInteraction_type > RelativeInteraction_optional;
      typedef ::xsd::cxx::tree::traits< RelativeInteraction_type, char > RelativeInteraction_traits;

      const RelativeInteraction_optional&
      RelativeInteraction () const;

      RelativeInteraction_optional&
      RelativeInteraction ();

      void
      RelativeInteraction (const RelativeInteraction_type& x);

      void
      RelativeInteraction (const RelativeInteraction_optional& x);

      void
      RelativeInteraction (::std::auto_ptr< RelativeInteraction_type > p);

      // RelativeGageRandR
      //
      typedef ::xsd::qif2::ActualDecimalType RelativeGageRandR_type;
      typedef ::xsd::cxx::tree::optional< RelativeGageRandR_type > RelativeGageRandR_optional;
      typedef ::xsd::cxx::tree::traits< RelativeGageRandR_type, char > RelativeGageRandR_traits;

      const RelativeGageRandR_optional&
      RelativeGageRandR () const;

      RelativeGageRandR_optional&
      RelativeGageRandR ();

      void
      RelativeGageRandR (const RelativeGageRandR_type& x);

      void
      RelativeGageRandR (const RelativeGageRandR_optional& x);

      void
      RelativeGageRandR (::std::auto_ptr< RelativeGageRandR_type > p);

      // RelativePartVariation
      //
      typedef ::xsd::qif2::ActualDecimalType RelativePartVariation_type;
      typedef ::xsd::cxx::tree::optional< RelativePartVariation_type > RelativePartVariation_optional;
      typedef ::xsd::cxx::tree::traits< RelativePartVariation_type, char > RelativePartVariation_traits;

      const RelativePartVariation_optional&
      RelativePartVariation () const;

      RelativePartVariation_optional&
      RelativePartVariation ();

      void
      RelativePartVariation (const RelativePartVariation_type& x);

      void
      RelativePartVariation (const RelativePartVariation_optional& x);

      void
      RelativePartVariation (::std::auto_ptr< RelativePartVariation_type > p);

      // RelativeTotalVariation
      //
      typedef ::xsd::qif2::ActualDecimalType RelativeTotalVariation_type;
      typedef ::xsd::cxx::tree::optional< RelativeTotalVariation_type > RelativeTotalVariation_optional;
      typedef ::xsd::cxx::tree::traits< RelativeTotalVariation_type, char > RelativeTotalVariation_traits;

      const RelativeTotalVariation_optional&
      RelativeTotalVariation () const;

      RelativeTotalVariation_optional&
      RelativeTotalVariation ();

      void
      RelativeTotalVariation (const RelativeTotalVariation_type& x);

      void
      RelativeTotalVariation (const RelativeTotalVariation_optional& x);

      void
      RelativeTotalVariation (::std::auto_ptr< RelativeTotalVariation_type > p);

      // Constructors.
      //
      StatsWithTolNumericalBaseType ();

      StatsWithTolNumericalBaseType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      StatsWithTolNumericalBaseType (const StatsWithTolNumericalBaseType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual StatsWithTolNumericalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsWithTolNumericalBaseType&
      operator= (const StatsWithTolNumericalBaseType& x);

      virtual 
      ~StatsWithTolNumericalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      NumberOutOfTolerance_optional NumberOutOfTolerance_;
      OutOfToleranceIds_optional OutOfToleranceIds_;
      SubgroupNumberOutOfTolerance_optional SubgroupNumberOutOfTolerance_;
      NumberOverUpperTolerance_optional NumberOverUpperTolerance_;
      OverUpperToleranceIds_optional OverUpperToleranceIds_;
      SubgroupNumberOverUpperTolerance_optional SubgroupNumberOverUpperTolerance_;
      NumberUnderLowerTolerance_optional NumberUnderLowerTolerance_;
      UnderLowerToleranceIds_optional UnderLowerToleranceIds_;
      SubgroupNumberUnderLowerTolerance_optional SubgroupNumberUnderLowerTolerance_;
      Cp_optional Cp_;
      Cpk_optional Cpk_;
      Pp_optional Pp_;
      Ppk_optional Ppk_;
      Cm_optional Cm_;
      Cmk_optional Cmk_;
      RelativeAppraiserVariation_optional RelativeAppraiserVariation_;
      RelativeEquipmentVariation_optional RelativeEquipmentVariation_;
      RelativeInteraction_optional RelativeInteraction_;
      RelativeGageRandR_optional RelativeGageRandR_;
      RelativePartVariation_optional RelativePartVariation_;
      RelativeTotalVariation_optional RelativeTotalVariation_;
    };

    class StatsWithTolLinearType: public ::xsd::qif2::StatsWithTolNumericalBaseType
    {
      public:
      // linearUnit
      //
      typedef ::xml_schema::token linearUnit_type;
      typedef ::xsd::cxx::tree::optional< linearUnit_type > linearUnit_optional;
      typedef ::xsd::cxx::tree::traits< linearUnit_type, char > linearUnit_traits;

      const linearUnit_optional&
      linearUnit () const;

      linearUnit_optional&
      linearUnit ();

      void
      linearUnit (const linearUnit_type& x);

      void
      linearUnit (const linearUnit_optional& x);

      void
      linearUnit (::std::auto_ptr< linearUnit_type > p);

      // Constructors.
      //
      StatsWithTolLinearType ();

      StatsWithTolLinearType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      StatsWithTolLinearType (const StatsWithTolLinearType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual StatsWithTolLinearType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsWithTolLinearType&
      operator= (const StatsWithTolLinearType& x);

      virtual 
      ~StatsWithTolLinearType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      linearUnit_optional linearUnit_;
    };

    class StatsWithTolAngularType: public ::xsd::qif2::StatsWithTolNumericalBaseType
    {
      public:
      // angularUnit
      //
      typedef ::xml_schema::token angularUnit_type;
      typedef ::xsd::cxx::tree::optional< angularUnit_type > angularUnit_optional;
      typedef ::xsd::cxx::tree::traits< angularUnit_type, char > angularUnit_traits;

      const angularUnit_optional&
      angularUnit () const;

      angularUnit_optional&
      angularUnit ();

      void
      angularUnit (const angularUnit_type& x);

      void
      angularUnit (const angularUnit_optional& x);

      void
      angularUnit (::std::auto_ptr< angularUnit_type > p);

      // Constructors.
      //
      StatsWithTolAngularType ();

      StatsWithTolAngularType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      StatsWithTolAngularType (const StatsWithTolAngularType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual StatsWithTolAngularType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsWithTolAngularType&
      operator= (const StatsWithTolAngularType& x);

      virtual 
      ~StatsWithTolAngularType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      angularUnit_optional angularUnit_;
    };

    class StatsWithTolAreaType: public ::xsd::qif2::StatsWithTolNumericalBaseType
    {
      public:
      // areaUnit
      //
      typedef ::xml_schema::token areaUnit_type;
      typedef ::xsd::cxx::tree::optional< areaUnit_type > areaUnit_optional;
      typedef ::xsd::cxx::tree::traits< areaUnit_type, char > areaUnit_traits;

      const areaUnit_optional&
      areaUnit () const;

      areaUnit_optional&
      areaUnit ();

      void
      areaUnit (const areaUnit_type& x);

      void
      areaUnit (const areaUnit_optional& x);

      void
      areaUnit (::std::auto_ptr< areaUnit_type > p);

      // Constructors.
      //
      StatsWithTolAreaType ();

      StatsWithTolAreaType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      StatsWithTolAreaType (const StatsWithTolAreaType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual StatsWithTolAreaType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsWithTolAreaType&
      operator= (const StatsWithTolAreaType& x);

      virtual 
      ~StatsWithTolAreaType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      areaUnit_optional areaUnit_;
    };

    class StatsWithTolForceType: public ::xsd::qif2::StatsWithTolNumericalBaseType
    {
      public:
      // forceUnit
      //
      typedef ::xml_schema::token forceUnit_type;
      typedef ::xsd::cxx::tree::optional< forceUnit_type > forceUnit_optional;
      typedef ::xsd::cxx::tree::traits< forceUnit_type, char > forceUnit_traits;

      const forceUnit_optional&
      forceUnit () const;

      forceUnit_optional&
      forceUnit ();

      void
      forceUnit (const forceUnit_type& x);

      void
      forceUnit (const forceUnit_optional& x);

      void
      forceUnit (::std::auto_ptr< forceUnit_type > p);

      // Constructors.
      //
      StatsWithTolForceType ();

      StatsWithTolForceType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      StatsWithTolForceType (const StatsWithTolForceType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual StatsWithTolForceType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsWithTolForceType&
      operator= (const StatsWithTolForceType& x);

      virtual 
      ~StatsWithTolForceType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      forceUnit_optional forceUnit_;
    };

    class StatsWithTolMassType: public ::xsd::qif2::StatsWithTolNumericalBaseType
    {
      public:
      // massUnit
      //
      typedef ::xml_schema::token massUnit_type;
      typedef ::xsd::cxx::tree::optional< massUnit_type > massUnit_optional;
      typedef ::xsd::cxx::tree::traits< massUnit_type, char > massUnit_traits;

      const massUnit_optional&
      massUnit () const;

      massUnit_optional&
      massUnit ();

      void
      massUnit (const massUnit_type& x);

      void
      massUnit (const massUnit_optional& x);

      void
      massUnit (::std::auto_ptr< massUnit_type > p);

      // Constructors.
      //
      StatsWithTolMassType ();

      StatsWithTolMassType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      StatsWithTolMassType (const StatsWithTolMassType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual StatsWithTolMassType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsWithTolMassType&
      operator= (const StatsWithTolMassType& x);

      virtual 
      ~StatsWithTolMassType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      massUnit_optional massUnit_;
    };

    class StatsWithTolPressureType: public ::xsd::qif2::StatsWithTolNumericalBaseType
    {
      public:
      // pressureUnit
      //
      typedef ::xml_schema::token pressureUnit_type;
      typedef ::xsd::cxx::tree::optional< pressureUnit_type > pressureUnit_optional;
      typedef ::xsd::cxx::tree::traits< pressureUnit_type, char > pressureUnit_traits;

      const pressureUnit_optional&
      pressureUnit () const;

      pressureUnit_optional&
      pressureUnit ();

      void
      pressureUnit (const pressureUnit_type& x);

      void
      pressureUnit (const pressureUnit_optional& x);

      void
      pressureUnit (::std::auto_ptr< pressureUnit_type > p);

      // Constructors.
      //
      StatsWithTolPressureType ();

      StatsWithTolPressureType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      StatsWithTolPressureType (const StatsWithTolPressureType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual StatsWithTolPressureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsWithTolPressureType&
      operator= (const StatsWithTolPressureType& x);

      virtual 
      ~StatsWithTolPressureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      pressureUnit_optional pressureUnit_;
    };

    class StatsWithTolSpeedType: public ::xsd::qif2::StatsWithTolNumericalBaseType
    {
      public:
      // speedUnit
      //
      typedef ::xml_schema::token speedUnit_type;
      typedef ::xsd::cxx::tree::optional< speedUnit_type > speedUnit_optional;
      typedef ::xsd::cxx::tree::traits< speedUnit_type, char > speedUnit_traits;

      const speedUnit_optional&
      speedUnit () const;

      speedUnit_optional&
      speedUnit ();

      void
      speedUnit (const speedUnit_type& x);

      void
      speedUnit (const speedUnit_optional& x);

      void
      speedUnit (::std::auto_ptr< speedUnit_type > p);

      // Constructors.
      //
      StatsWithTolSpeedType ();

      StatsWithTolSpeedType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      StatsWithTolSpeedType (const StatsWithTolSpeedType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual StatsWithTolSpeedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsWithTolSpeedType&
      operator= (const StatsWithTolSpeedType& x);

      virtual 
      ~StatsWithTolSpeedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      speedUnit_optional speedUnit_;
    };

    class StatsWithTolTemperatureType: public ::xsd::qif2::StatsWithTolNumericalBaseType
    {
      public:
      // temperatureUnit
      //
      typedef ::xml_schema::token temperatureUnit_type;
      typedef ::xsd::cxx::tree::optional< temperatureUnit_type > temperatureUnit_optional;
      typedef ::xsd::cxx::tree::traits< temperatureUnit_type, char > temperatureUnit_traits;

      const temperatureUnit_optional&
      temperatureUnit () const;

      temperatureUnit_optional&
      temperatureUnit ();

      void
      temperatureUnit (const temperatureUnit_type& x);

      void
      temperatureUnit (const temperatureUnit_optional& x);

      void
      temperatureUnit (::std::auto_ptr< temperatureUnit_type > p);

      // Constructors.
      //
      StatsWithTolTemperatureType ();

      StatsWithTolTemperatureType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      StatsWithTolTemperatureType (const StatsWithTolTemperatureType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual StatsWithTolTemperatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsWithTolTemperatureType&
      operator= (const StatsWithTolTemperatureType& x);

      virtual 
      ~StatsWithTolTemperatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      temperatureUnit_optional temperatureUnit_;
    };

    class StatsWithTolTimeType: public ::xsd::qif2::StatsWithTolNumericalBaseType
    {
      public:
      // timeUnit
      //
      typedef ::xml_schema::token timeUnit_type;
      typedef ::xsd::cxx::tree::optional< timeUnit_type > timeUnit_optional;
      typedef ::xsd::cxx::tree::traits< timeUnit_type, char > timeUnit_traits;

      const timeUnit_optional&
      timeUnit () const;

      timeUnit_optional&
      timeUnit ();

      void
      timeUnit (const timeUnit_type& x);

      void
      timeUnit (const timeUnit_optional& x);

      void
      timeUnit (::std::auto_ptr< timeUnit_type > p);

      // Constructors.
      //
      StatsWithTolTimeType ();

      StatsWithTolTimeType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      StatsWithTolTimeType (const StatsWithTolTimeType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual StatsWithTolTimeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsWithTolTimeType&
      operator= (const StatsWithTolTimeType& x);

      virtual 
      ~StatsWithTolTimeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      timeUnit_optional timeUnit_;
    };

    class StatsWithTolUserDefinedUnitType: public ::xsd::qif2::StatsWithTolNumericalBaseType
    {
      public:
      // unitName
      //
      typedef ::xml_schema::token unitName_type;
      typedef ::xsd::cxx::tree::traits< unitName_type, char > unitName_traits;

      const unitName_type&
      unitName () const;

      unitName_type&
      unitName ();

      void
      unitName (const unitName_type& x);

      void
      unitName (::std::auto_ptr< unitName_type > p);

      // Constructors.
      //
      StatsWithTolUserDefinedUnitType (const unitName_type&);

      StatsWithTolUserDefinedUnitType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      StatsWithTolUserDefinedUnitType (const StatsWithTolUserDefinedUnitType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual StatsWithTolUserDefinedUnitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsWithTolUserDefinedUnitType&
      operator= (const StatsWithTolUserDefinedUnitType& x);

      virtual 
      ~StatsWithTolUserDefinedUnitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< unitName_type > unitName_;
    };

    class StatsLinearType: public ::xsd::qif2::StatsNumericalBaseType
    {
      public:
      // linearUnit
      //
      typedef ::xml_schema::token linearUnit_type;
      typedef ::xsd::cxx::tree::optional< linearUnit_type > linearUnit_optional;
      typedef ::xsd::cxx::tree::traits< linearUnit_type, char > linearUnit_traits;

      const linearUnit_optional&
      linearUnit () const;

      linearUnit_optional&
      linearUnit ();

      void
      linearUnit (const linearUnit_type& x);

      void
      linearUnit (const linearUnit_optional& x);

      void
      linearUnit (::std::auto_ptr< linearUnit_type > p);

      // Constructors.
      //
      StatsLinearType ();

      StatsLinearType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      StatsLinearType (const StatsLinearType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual StatsLinearType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsLinearType&
      operator= (const StatsLinearType& x);

      virtual 
      ~StatsLinearType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      linearUnit_optional linearUnit_;
    };

    class StatsAngularType: public ::xsd::qif2::StatsNumericalBaseType
    {
      public:
      // angularUnit
      //
      typedef ::xml_schema::token angularUnit_type;
      typedef ::xsd::cxx::tree::optional< angularUnit_type > angularUnit_optional;
      typedef ::xsd::cxx::tree::traits< angularUnit_type, char > angularUnit_traits;

      const angularUnit_optional&
      angularUnit () const;

      angularUnit_optional&
      angularUnit ();

      void
      angularUnit (const angularUnit_type& x);

      void
      angularUnit (const angularUnit_optional& x);

      void
      angularUnit (::std::auto_ptr< angularUnit_type > p);

      // Constructors.
      //
      StatsAngularType ();

      StatsAngularType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      StatsAngularType (const StatsAngularType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual StatsAngularType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsAngularType&
      operator= (const StatsAngularType& x);

      virtual 
      ~StatsAngularType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      angularUnit_optional angularUnit_;
    };

    class StatsAreaType: public ::xsd::qif2::StatsNumericalBaseType
    {
      public:
      // areaUnit
      //
      typedef ::xml_schema::token areaUnit_type;
      typedef ::xsd::cxx::tree::optional< areaUnit_type > areaUnit_optional;
      typedef ::xsd::cxx::tree::traits< areaUnit_type, char > areaUnit_traits;

      const areaUnit_optional&
      areaUnit () const;

      areaUnit_optional&
      areaUnit ();

      void
      areaUnit (const areaUnit_type& x);

      void
      areaUnit (const areaUnit_optional& x);

      void
      areaUnit (::std::auto_ptr< areaUnit_type > p);

      // Constructors.
      //
      StatsAreaType ();

      StatsAreaType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      StatsAreaType (const StatsAreaType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual StatsAreaType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsAreaType&
      operator= (const StatsAreaType& x);

      virtual 
      ~StatsAreaType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      areaUnit_optional areaUnit_;
    };

    class StatsForceType: public ::xsd::qif2::StatsNumericalBaseType
    {
      public:
      // forceUnit
      //
      typedef ::xml_schema::token forceUnit_type;
      typedef ::xsd::cxx::tree::optional< forceUnit_type > forceUnit_optional;
      typedef ::xsd::cxx::tree::traits< forceUnit_type, char > forceUnit_traits;

      const forceUnit_optional&
      forceUnit () const;

      forceUnit_optional&
      forceUnit ();

      void
      forceUnit (const forceUnit_type& x);

      void
      forceUnit (const forceUnit_optional& x);

      void
      forceUnit (::std::auto_ptr< forceUnit_type > p);

      // Constructors.
      //
      StatsForceType ();

      StatsForceType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      StatsForceType (const StatsForceType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual StatsForceType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsForceType&
      operator= (const StatsForceType& x);

      virtual 
      ~StatsForceType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      forceUnit_optional forceUnit_;
    };

    class StatsMassType: public ::xsd::qif2::StatsNumericalBaseType
    {
      public:
      // massUnit
      //
      typedef ::xml_schema::token massUnit_type;
      typedef ::xsd::cxx::tree::optional< massUnit_type > massUnit_optional;
      typedef ::xsd::cxx::tree::traits< massUnit_type, char > massUnit_traits;

      const massUnit_optional&
      massUnit () const;

      massUnit_optional&
      massUnit ();

      void
      massUnit (const massUnit_type& x);

      void
      massUnit (const massUnit_optional& x);

      void
      massUnit (::std::auto_ptr< massUnit_type > p);

      // Constructors.
      //
      StatsMassType ();

      StatsMassType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      StatsMassType (const StatsMassType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual StatsMassType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsMassType&
      operator= (const StatsMassType& x);

      virtual 
      ~StatsMassType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      massUnit_optional massUnit_;
    };

    class StatsPressureType: public ::xsd::qif2::StatsNumericalBaseType
    {
      public:
      // pressureUnit
      //
      typedef ::xml_schema::token pressureUnit_type;
      typedef ::xsd::cxx::tree::optional< pressureUnit_type > pressureUnit_optional;
      typedef ::xsd::cxx::tree::traits< pressureUnit_type, char > pressureUnit_traits;

      const pressureUnit_optional&
      pressureUnit () const;

      pressureUnit_optional&
      pressureUnit ();

      void
      pressureUnit (const pressureUnit_type& x);

      void
      pressureUnit (const pressureUnit_optional& x);

      void
      pressureUnit (::std::auto_ptr< pressureUnit_type > p);

      // Constructors.
      //
      StatsPressureType ();

      StatsPressureType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      StatsPressureType (const StatsPressureType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual StatsPressureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsPressureType&
      operator= (const StatsPressureType& x);

      virtual 
      ~StatsPressureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      pressureUnit_optional pressureUnit_;
    };

    class StatsSpeedType: public ::xsd::qif2::StatsNumericalBaseType
    {
      public:
      // speedUnit
      //
      typedef ::xml_schema::token speedUnit_type;
      typedef ::xsd::cxx::tree::optional< speedUnit_type > speedUnit_optional;
      typedef ::xsd::cxx::tree::traits< speedUnit_type, char > speedUnit_traits;

      const speedUnit_optional&
      speedUnit () const;

      speedUnit_optional&
      speedUnit ();

      void
      speedUnit (const speedUnit_type& x);

      void
      speedUnit (const speedUnit_optional& x);

      void
      speedUnit (::std::auto_ptr< speedUnit_type > p);

      // Constructors.
      //
      StatsSpeedType ();

      StatsSpeedType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      StatsSpeedType (const StatsSpeedType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual StatsSpeedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsSpeedType&
      operator= (const StatsSpeedType& x);

      virtual 
      ~StatsSpeedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      speedUnit_optional speedUnit_;
    };

    class StatsTemperatureType: public ::xsd::qif2::StatsNumericalBaseType
    {
      public:
      // temperatureUnit
      //
      typedef ::xml_schema::token temperatureUnit_type;
      typedef ::xsd::cxx::tree::optional< temperatureUnit_type > temperatureUnit_optional;
      typedef ::xsd::cxx::tree::traits< temperatureUnit_type, char > temperatureUnit_traits;

      const temperatureUnit_optional&
      temperatureUnit () const;

      temperatureUnit_optional&
      temperatureUnit ();

      void
      temperatureUnit (const temperatureUnit_type& x);

      void
      temperatureUnit (const temperatureUnit_optional& x);

      void
      temperatureUnit (::std::auto_ptr< temperatureUnit_type > p);

      // Constructors.
      //
      StatsTemperatureType ();

      StatsTemperatureType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      StatsTemperatureType (const StatsTemperatureType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual StatsTemperatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsTemperatureType&
      operator= (const StatsTemperatureType& x);

      virtual 
      ~StatsTemperatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      temperatureUnit_optional temperatureUnit_;
    };

    class StatsTimeType: public ::xsd::qif2::StatsNumericalBaseType
    {
      public:
      // timeUnit
      //
      typedef ::xml_schema::token timeUnit_type;
      typedef ::xsd::cxx::tree::optional< timeUnit_type > timeUnit_optional;
      typedef ::xsd::cxx::tree::traits< timeUnit_type, char > timeUnit_traits;

      const timeUnit_optional&
      timeUnit () const;

      timeUnit_optional&
      timeUnit ();

      void
      timeUnit (const timeUnit_type& x);

      void
      timeUnit (const timeUnit_optional& x);

      void
      timeUnit (::std::auto_ptr< timeUnit_type > p);

      // Constructors.
      //
      StatsTimeType ();

      StatsTimeType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      StatsTimeType (const StatsTimeType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual StatsTimeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsTimeType&
      operator= (const StatsTimeType& x);

      virtual 
      ~StatsTimeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      timeUnit_optional timeUnit_;
    };

    class StatsUserDefinedUnitType: public ::xsd::qif2::StatsNumericalBaseType
    {
      public:
      // unitName
      //
      typedef ::xml_schema::token unitName_type;
      typedef ::xsd::cxx::tree::traits< unitName_type, char > unitName_traits;

      const unitName_type&
      unitName () const;

      unitName_type&
      unitName ();

      void
      unitName (const unitName_type& x);

      void
      unitName (::std::auto_ptr< unitName_type > p);

      // Constructors.
      //
      StatsUserDefinedUnitType (const unitName_type&);

      StatsUserDefinedUnitType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      StatsUserDefinedUnitType (const StatsUserDefinedUnitType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual StatsUserDefinedUnitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsUserDefinedUnitType&
      operator= (const StatsUserDefinedUnitType& x);

      virtual 
      ~StatsUserDefinedUnitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< unitName_type > unitName_;
    };

    class StatsPassFailType: public ::xsd::qif2::StatsBaseType
    {
      public:
      // FailurePercentage
      //
      typedef ::xml_schema::decimal FailurePercentage_type;
      typedef ::xsd::cxx::tree::optional< FailurePercentage_type > FailurePercentage_optional;
      typedef ::xsd::cxx::tree::traits< FailurePercentage_type, char, ::xsd::cxx::tree::schema_type::decimal > FailurePercentage_traits;

      const FailurePercentage_optional&
      FailurePercentage () const;

      FailurePercentage_optional&
      FailurePercentage ();

      void
      FailurePercentage (const FailurePercentage_type& x);

      void
      FailurePercentage (const FailurePercentage_optional& x);

      // NumberFailures
      //
      typedef ::xml_schema::non_negative_integer NumberFailures_type;
      typedef ::xsd::cxx::tree::optional< NumberFailures_type > NumberFailures_optional;
      typedef ::xsd::cxx::tree::traits< NumberFailures_type, char > NumberFailures_traits;

      const NumberFailures_optional&
      NumberFailures () const;

      NumberFailures_optional&
      NumberFailures ();

      void
      NumberFailures (const NumberFailures_type& x);

      void
      NumberFailures (const NumberFailures_optional& x);

      // Constructors.
      //
      StatsPassFailType ();

      StatsPassFailType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      StatsPassFailType (const StatsPassFailType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual StatsPassFailType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatsPassFailType&
      operator= (const StatsPassFailType& x);

      virtual 
      ~StatsPassFailType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      FailurePercentage_optional FailurePercentage_;
      NumberFailures_optional NumberFailures_;
    };

    class GeometricCharacteristicStatsEvalType: public ::xsd::qif2::CharacteristicStatsEvalBaseType
    {
      public:
      // ValueStats
      //
      typedef ::xsd::qif2::StatsWithTolLinearType ValueStats_type;
      typedef ::xsd::cxx::tree::optional< ValueStats_type > ValueStats_optional;
      typedef ::xsd::cxx::tree::traits< ValueStats_type, char > ValueStats_traits;

      const ValueStats_optional&
      ValueStats () const;

      ValueStats_optional&
      ValueStats ();

      void
      ValueStats (const ValueStats_type& x);

      void
      ValueStats (const ValueStats_optional& x);

      void
      ValueStats (::std::auto_ptr< ValueStats_type > p);

      // MaxValueStats
      //
      typedef ::xsd::qif2::StatsLinearType MaxValueStats_type;
      typedef ::xsd::cxx::tree::optional< MaxValueStats_type > MaxValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxValueStats_type, char > MaxValueStats_traits;

      const MaxValueStats_optional&
      MaxValueStats () const;

      MaxValueStats_optional&
      MaxValueStats ();

      void
      MaxValueStats (const MaxValueStats_type& x);

      void
      MaxValueStats (const MaxValueStats_optional& x);

      void
      MaxValueStats (::std::auto_ptr< MaxValueStats_type > p);

      // MinValueStats
      //
      typedef ::xsd::qif2::StatsLinearType MinValueStats_type;
      typedef ::xsd::cxx::tree::optional< MinValueStats_type > MinValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MinValueStats_type, char > MinValueStats_traits;

      const MinValueStats_optional&
      MinValueStats () const;

      MinValueStats_optional&
      MinValueStats ();

      void
      MinValueStats (const MinValueStats_type& x);

      void
      MinValueStats (const MinValueStats_optional& x);

      void
      MinValueStats (::std::auto_ptr< MinValueStats_type > p);

      // Constructors.
      //
      GeometricCharacteristicStatsEvalType (const Status_type&);

      GeometricCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      GeometricCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      GeometricCharacteristicStatsEvalType (const GeometricCharacteristicStatsEvalType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual GeometricCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      GeometricCharacteristicStatsEvalType&
      operator= (const GeometricCharacteristicStatsEvalType& x);

      virtual 
      ~GeometricCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ValueStats_optional ValueStats_;
      MaxValueStats_optional MaxValueStats_;
      MinValueStats_optional MinValueStats_;
    };

    class CompositeSegmentStatsEvalBaseType: public ::xml_schema::type
    {
      public:
      // ValueStats
      //
      typedef ::xsd::qif2::StatsWithTolLinearType ValueStats_type;
      typedef ::xsd::cxx::tree::optional< ValueStats_type > ValueStats_optional;
      typedef ::xsd::cxx::tree::traits< ValueStats_type, char > ValueStats_traits;

      const ValueStats_optional&
      ValueStats () const;

      ValueStats_optional&
      ValueStats ();

      void
      ValueStats (const ValueStats_type& x);

      void
      ValueStats (const ValueStats_optional& x);

      void
      ValueStats (::std::auto_ptr< ValueStats_type > p);

      // MaxValueStats
      //
      typedef ::xsd::qif2::StatsLinearType MaxValueStats_type;
      typedef ::xsd::cxx::tree::optional< MaxValueStats_type > MaxValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxValueStats_type, char > MaxValueStats_traits;

      const MaxValueStats_optional&
      MaxValueStats () const;

      MaxValueStats_optional&
      MaxValueStats ();

      void
      MaxValueStats (const MaxValueStats_type& x);

      void
      MaxValueStats (const MaxValueStats_optional& x);

      void
      MaxValueStats (::std::auto_ptr< MaxValueStats_type > p);

      // MinValueStats
      //
      typedef ::xsd::qif2::StatsLinearType MinValueStats_type;
      typedef ::xsd::cxx::tree::optional< MinValueStats_type > MinValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MinValueStats_type, char > MinValueStats_traits;

      const MinValueStats_optional&
      MinValueStats () const;

      MinValueStats_optional&
      MinValueStats ();

      void
      MinValueStats (const MinValueStats_type& x);

      void
      MinValueStats (const MinValueStats_optional& x);

      void
      MinValueStats (::std::auto_ptr< MinValueStats_type > p);

      // Constructors.
      //
      CompositeSegmentStatsEvalBaseType ();

      CompositeSegmentStatsEvalBaseType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      CompositeSegmentStatsEvalBaseType (const CompositeSegmentStatsEvalBaseType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual CompositeSegmentStatsEvalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CompositeSegmentStatsEvalBaseType&
      operator= (const CompositeSegmentStatsEvalBaseType& x);

      virtual 
      ~CompositeSegmentStatsEvalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ValueStats_optional ValueStats_;
      MaxValueStats_optional MaxValueStats_;
      MinValueStats_optional MinValueStats_;
    };

    class CompositeSegmentPositionStatsEvalType: public ::xsd::qif2::CompositeSegmentStatsEvalBaseType
    {
      public:
      // Constructors.
      //
      CompositeSegmentPositionStatsEvalType ();

      CompositeSegmentPositionStatsEvalType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      CompositeSegmentPositionStatsEvalType (const CompositeSegmentPositionStatsEvalType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual CompositeSegmentPositionStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CompositeSegmentPositionStatsEvalType ();
    };

    class CompositeSegmentsPositionStatsEvalType: public ::xml_schema::type
    {
      public:
      // SecondCompositeSegmentPositionStats
      //
      typedef ::xsd::qif2::CompositeSegmentPositionStatsEvalType SecondCompositeSegmentPositionStats_type;
      typedef ::xsd::cxx::tree::traits< SecondCompositeSegmentPositionStats_type, char > SecondCompositeSegmentPositionStats_traits;

      const SecondCompositeSegmentPositionStats_type&
      SecondCompositeSegmentPositionStats () const;

      SecondCompositeSegmentPositionStats_type&
      SecondCompositeSegmentPositionStats ();

      void
      SecondCompositeSegmentPositionStats (const SecondCompositeSegmentPositionStats_type& x);

      void
      SecondCompositeSegmentPositionStats (::std::auto_ptr< SecondCompositeSegmentPositionStats_type > p);

      // ThirdCompositeSegmentPositionStats
      //
      typedef ::xsd::qif2::CompositeSegmentPositionStatsEvalType ThirdCompositeSegmentPositionStats_type;
      typedef ::xsd::cxx::tree::optional< ThirdCompositeSegmentPositionStats_type > ThirdCompositeSegmentPositionStats_optional;
      typedef ::xsd::cxx::tree::traits< ThirdCompositeSegmentPositionStats_type, char > ThirdCompositeSegmentPositionStats_traits;

      const ThirdCompositeSegmentPositionStats_optional&
      ThirdCompositeSegmentPositionStats () const;

      ThirdCompositeSegmentPositionStats_optional&
      ThirdCompositeSegmentPositionStats ();

      void
      ThirdCompositeSegmentPositionStats (const ThirdCompositeSegmentPositionStats_type& x);

      void
      ThirdCompositeSegmentPositionStats (const ThirdCompositeSegmentPositionStats_optional& x);

      void
      ThirdCompositeSegmentPositionStats (::std::auto_ptr< ThirdCompositeSegmentPositionStats_type > p);

      // FourthCompositeSegmentPositionStats
      //
      typedef ::xsd::qif2::CompositeSegmentPositionStatsEvalType FourthCompositeSegmentPositionStats_type;
      typedef ::xsd::cxx::tree::optional< FourthCompositeSegmentPositionStats_type > FourthCompositeSegmentPositionStats_optional;
      typedef ::xsd::cxx::tree::traits< FourthCompositeSegmentPositionStats_type, char > FourthCompositeSegmentPositionStats_traits;

      const FourthCompositeSegmentPositionStats_optional&
      FourthCompositeSegmentPositionStats () const;

      FourthCompositeSegmentPositionStats_optional&
      FourthCompositeSegmentPositionStats ();

      void
      FourthCompositeSegmentPositionStats (const FourthCompositeSegmentPositionStats_type& x);

      void
      FourthCompositeSegmentPositionStats (const FourthCompositeSegmentPositionStats_optional& x);

      void
      FourthCompositeSegmentPositionStats (::std::auto_ptr< FourthCompositeSegmentPositionStats_type > p);

      // Constructors.
      //
      CompositeSegmentsPositionStatsEvalType (const SecondCompositeSegmentPositionStats_type&);

      CompositeSegmentsPositionStatsEvalType (::std::auto_ptr< SecondCompositeSegmentPositionStats_type >);

      CompositeSegmentsPositionStatsEvalType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      CompositeSegmentsPositionStatsEvalType (const CompositeSegmentsPositionStatsEvalType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual CompositeSegmentsPositionStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CompositeSegmentsPositionStatsEvalType&
      operator= (const CompositeSegmentsPositionStatsEvalType& x);

      virtual 
      ~CompositeSegmentsPositionStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SecondCompositeSegmentPositionStats_type > SecondCompositeSegmentPositionStats_;
      ThirdCompositeSegmentPositionStats_optional ThirdCompositeSegmentPositionStats_;
      FourthCompositeSegmentPositionStats_optional FourthCompositeSegmentPositionStats_;
    };

    class CompositeSegmentProfileStatsEvalType: public ::xsd::qif2::CompositeSegmentStatsEvalBaseType
    {
      public:
      // Constructors.
      //
      CompositeSegmentProfileStatsEvalType ();

      CompositeSegmentProfileStatsEvalType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      CompositeSegmentProfileStatsEvalType (const CompositeSegmentProfileStatsEvalType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual CompositeSegmentProfileStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CompositeSegmentProfileStatsEvalType ();
    };

    class CompositeSegmentsProfileStatsEvalType: public ::xml_schema::type
    {
      public:
      // SecondCompositeSegmentProfileStats
      //
      typedef ::xsd::qif2::CompositeSegmentProfileStatsEvalType SecondCompositeSegmentProfileStats_type;
      typedef ::xsd::cxx::tree::traits< SecondCompositeSegmentProfileStats_type, char > SecondCompositeSegmentProfileStats_traits;

      const SecondCompositeSegmentProfileStats_type&
      SecondCompositeSegmentProfileStats () const;

      SecondCompositeSegmentProfileStats_type&
      SecondCompositeSegmentProfileStats ();

      void
      SecondCompositeSegmentProfileStats (const SecondCompositeSegmentProfileStats_type& x);

      void
      SecondCompositeSegmentProfileStats (::std::auto_ptr< SecondCompositeSegmentProfileStats_type > p);

      // ThirdCompositeSegmentProfileStats
      //
      typedef ::xsd::qif2::CompositeSegmentProfileStatsEvalType ThirdCompositeSegmentProfileStats_type;
      typedef ::xsd::cxx::tree::optional< ThirdCompositeSegmentProfileStats_type > ThirdCompositeSegmentProfileStats_optional;
      typedef ::xsd::cxx::tree::traits< ThirdCompositeSegmentProfileStats_type, char > ThirdCompositeSegmentProfileStats_traits;

      const ThirdCompositeSegmentProfileStats_optional&
      ThirdCompositeSegmentProfileStats () const;

      ThirdCompositeSegmentProfileStats_optional&
      ThirdCompositeSegmentProfileStats ();

      void
      ThirdCompositeSegmentProfileStats (const ThirdCompositeSegmentProfileStats_type& x);

      void
      ThirdCompositeSegmentProfileStats (const ThirdCompositeSegmentProfileStats_optional& x);

      void
      ThirdCompositeSegmentProfileStats (::std::auto_ptr< ThirdCompositeSegmentProfileStats_type > p);

      // FourthCompositeSegmentProfileStats
      //
      typedef ::xsd::qif2::CompositeSegmentProfileStatsEvalType FourthCompositeSegmentProfileStats_type;
      typedef ::xsd::cxx::tree::optional< FourthCompositeSegmentProfileStats_type > FourthCompositeSegmentProfileStats_optional;
      typedef ::xsd::cxx::tree::traits< FourthCompositeSegmentProfileStats_type, char > FourthCompositeSegmentProfileStats_traits;

      const FourthCompositeSegmentProfileStats_optional&
      FourthCompositeSegmentProfileStats () const;

      FourthCompositeSegmentProfileStats_optional&
      FourthCompositeSegmentProfileStats ();

      void
      FourthCompositeSegmentProfileStats (const FourthCompositeSegmentProfileStats_type& x);

      void
      FourthCompositeSegmentProfileStats (const FourthCompositeSegmentProfileStats_optional& x);

      void
      FourthCompositeSegmentProfileStats (::std::auto_ptr< FourthCompositeSegmentProfileStats_type > p);

      // Constructors.
      //
      CompositeSegmentsProfileStatsEvalType (const SecondCompositeSegmentProfileStats_type&);

      CompositeSegmentsProfileStatsEvalType (::std::auto_ptr< SecondCompositeSegmentProfileStats_type >);

      CompositeSegmentsProfileStatsEvalType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      CompositeSegmentsProfileStatsEvalType (const CompositeSegmentsProfileStatsEvalType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual CompositeSegmentsProfileStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CompositeSegmentsProfileStatsEvalType&
      operator= (const CompositeSegmentsProfileStatsEvalType& x);

      virtual 
      ~CompositeSegmentsProfileStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SecondCompositeSegmentProfileStats_type > SecondCompositeSegmentProfileStats_;
      ThirdCompositeSegmentProfileStats_optional ThirdCompositeSegmentProfileStats_;
      FourthCompositeSegmentProfileStats_optional FourthCompositeSegmentProfileStats_;
    };

    class CompositeSegmentSymmetryStatsEvalType: public ::xsd::qif2::CompositeSegmentStatsEvalBaseType
    {
      public:
      // Constructors.
      //
      CompositeSegmentSymmetryStatsEvalType ();

      CompositeSegmentSymmetryStatsEvalType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      CompositeSegmentSymmetryStatsEvalType (const CompositeSegmentSymmetryStatsEvalType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual CompositeSegmentSymmetryStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CompositeSegmentSymmetryStatsEvalType ();
    };

    class CompositeSegmentsSymmetryStatsEvalType: public ::xml_schema::type
    {
      public:
      // SecondCompositeSegmentSymmetryStats
      //
      typedef ::xsd::qif2::CompositeSegmentSymmetryStatsEvalType SecondCompositeSegmentSymmetryStats_type;
      typedef ::xsd::cxx::tree::traits< SecondCompositeSegmentSymmetryStats_type, char > SecondCompositeSegmentSymmetryStats_traits;

      const SecondCompositeSegmentSymmetryStats_type&
      SecondCompositeSegmentSymmetryStats () const;

      SecondCompositeSegmentSymmetryStats_type&
      SecondCompositeSegmentSymmetryStats ();

      void
      SecondCompositeSegmentSymmetryStats (const SecondCompositeSegmentSymmetryStats_type& x);

      void
      SecondCompositeSegmentSymmetryStats (::std::auto_ptr< SecondCompositeSegmentSymmetryStats_type > p);

      // ThirdCompositeSegmentSymmetryStats
      //
      typedef ::xsd::qif2::CompositeSegmentSymmetryStatsEvalType ThirdCompositeSegmentSymmetryStats_type;
      typedef ::xsd::cxx::tree::optional< ThirdCompositeSegmentSymmetryStats_type > ThirdCompositeSegmentSymmetryStats_optional;
      typedef ::xsd::cxx::tree::traits< ThirdCompositeSegmentSymmetryStats_type, char > ThirdCompositeSegmentSymmetryStats_traits;

      const ThirdCompositeSegmentSymmetryStats_optional&
      ThirdCompositeSegmentSymmetryStats () const;

      ThirdCompositeSegmentSymmetryStats_optional&
      ThirdCompositeSegmentSymmetryStats ();

      void
      ThirdCompositeSegmentSymmetryStats (const ThirdCompositeSegmentSymmetryStats_type& x);

      void
      ThirdCompositeSegmentSymmetryStats (const ThirdCompositeSegmentSymmetryStats_optional& x);

      void
      ThirdCompositeSegmentSymmetryStats (::std::auto_ptr< ThirdCompositeSegmentSymmetryStats_type > p);

      // Constructors.
      //
      CompositeSegmentsSymmetryStatsEvalType (const SecondCompositeSegmentSymmetryStats_type&);

      CompositeSegmentsSymmetryStatsEvalType (::std::auto_ptr< SecondCompositeSegmentSymmetryStats_type >);

      CompositeSegmentsSymmetryStatsEvalType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      CompositeSegmentsSymmetryStatsEvalType (const CompositeSegmentsSymmetryStatsEvalType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual CompositeSegmentsSymmetryStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CompositeSegmentsSymmetryStatsEvalType&
      operator= (const CompositeSegmentsSymmetryStatsEvalType& x);

      virtual 
      ~CompositeSegmentsSymmetryStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SecondCompositeSegmentSymmetryStats_type > SecondCompositeSegmentSymmetryStats_;
      ThirdCompositeSegmentSymmetryStats_optional ThirdCompositeSegmentSymmetryStats_;
    };

    class LinearCharacteristicStatsEvalType: public ::xsd::qif2::CharacteristicStatsEvalBaseType
    {
      public:
      // ValueStats
      //
      typedef ::xsd::qif2::StatsWithTolLinearType ValueStats_type;
      typedef ::xsd::cxx::tree::optional< ValueStats_type > ValueStats_optional;
      typedef ::xsd::cxx::tree::traits< ValueStats_type, char > ValueStats_traits;

      const ValueStats_optional&
      ValueStats () const;

      ValueStats_optional&
      ValueStats ();

      void
      ValueStats (const ValueStats_type& x);

      void
      ValueStats (const ValueStats_optional& x);

      void
      ValueStats (::std::auto_ptr< ValueStats_type > p);

      // MaxValueStats
      //
      typedef ::xsd::qif2::StatsLinearType MaxValueStats_type;
      typedef ::xsd::cxx::tree::optional< MaxValueStats_type > MaxValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxValueStats_type, char > MaxValueStats_traits;

      const MaxValueStats_optional&
      MaxValueStats () const;

      MaxValueStats_optional&
      MaxValueStats ();

      void
      MaxValueStats (const MaxValueStats_type& x);

      void
      MaxValueStats (const MaxValueStats_optional& x);

      void
      MaxValueStats (::std::auto_ptr< MaxValueStats_type > p);

      // MinValueStats
      //
      typedef ::xsd::qif2::StatsLinearType MinValueStats_type;
      typedef ::xsd::cxx::tree::optional< MinValueStats_type > MinValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MinValueStats_type, char > MinValueStats_traits;

      const MinValueStats_optional&
      MinValueStats () const;

      MinValueStats_optional&
      MinValueStats ();

      void
      MinValueStats (const MinValueStats_type& x);

      void
      MinValueStats (const MinValueStats_optional& x);

      void
      MinValueStats (::std::auto_ptr< MinValueStats_type > p);

      // DeviationStats
      //
      typedef ::xsd::qif2::StatsWithTolLinearType DeviationStats_type;
      typedef ::xsd::cxx::tree::optional< DeviationStats_type > DeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< DeviationStats_type, char > DeviationStats_traits;

      const DeviationStats_optional&
      DeviationStats () const;

      DeviationStats_optional&
      DeviationStats ();

      void
      DeviationStats (const DeviationStats_type& x);

      void
      DeviationStats (const DeviationStats_optional& x);

      void
      DeviationStats (::std::auto_ptr< DeviationStats_type > p);

      // MaxDeviationStats
      //
      typedef ::xsd::qif2::StatsLinearType MaxDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MaxDeviationStats_type > MaxDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxDeviationStats_type, char > MaxDeviationStats_traits;

      const MaxDeviationStats_optional&
      MaxDeviationStats () const;

      MaxDeviationStats_optional&
      MaxDeviationStats ();

      void
      MaxDeviationStats (const MaxDeviationStats_type& x);

      void
      MaxDeviationStats (const MaxDeviationStats_optional& x);

      void
      MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > p);

      // MinDeviationStats
      //
      typedef ::xsd::qif2::StatsLinearType MinDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MinDeviationStats_type > MinDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MinDeviationStats_type, char > MinDeviationStats_traits;

      const MinDeviationStats_optional&
      MinDeviationStats () const;

      MinDeviationStats_optional&
      MinDeviationStats ();

      void
      MinDeviationStats (const MinDeviationStats_type& x);

      void
      MinDeviationStats (const MinDeviationStats_optional& x);

      void
      MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > p);

      // Constructors.
      //
      LinearCharacteristicStatsEvalType (const Status_type&);

      LinearCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      LinearCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      LinearCharacteristicStatsEvalType (const LinearCharacteristicStatsEvalType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual LinearCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LinearCharacteristicStatsEvalType&
      operator= (const LinearCharacteristicStatsEvalType& x);

      virtual 
      ~LinearCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ValueStats_optional ValueStats_;
      MaxValueStats_optional MaxValueStats_;
      MinValueStats_optional MinValueStats_;
      DeviationStats_optional DeviationStats_;
      MaxDeviationStats_optional MaxDeviationStats_;
      MinDeviationStats_optional MinDeviationStats_;
    };

    class AngularCharacteristicStatsEvalType: public ::xsd::qif2::CharacteristicStatsEvalBaseType
    {
      public:
      // ValueStats
      //
      typedef ::xsd::qif2::StatsWithTolAngularType ValueStats_type;
      typedef ::xsd::cxx::tree::optional< ValueStats_type > ValueStats_optional;
      typedef ::xsd::cxx::tree::traits< ValueStats_type, char > ValueStats_traits;

      const ValueStats_optional&
      ValueStats () const;

      ValueStats_optional&
      ValueStats ();

      void
      ValueStats (const ValueStats_type& x);

      void
      ValueStats (const ValueStats_optional& x);

      void
      ValueStats (::std::auto_ptr< ValueStats_type > p);

      // MaxValueStats
      //
      typedef ::xsd::qif2::StatsAngularType MaxValueStats_type;
      typedef ::xsd::cxx::tree::optional< MaxValueStats_type > MaxValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxValueStats_type, char > MaxValueStats_traits;

      const MaxValueStats_optional&
      MaxValueStats () const;

      MaxValueStats_optional&
      MaxValueStats ();

      void
      MaxValueStats (const MaxValueStats_type& x);

      void
      MaxValueStats (const MaxValueStats_optional& x);

      void
      MaxValueStats (::std::auto_ptr< MaxValueStats_type > p);

      // MinValueStats
      //
      typedef ::xsd::qif2::StatsAngularType MinValueStats_type;
      typedef ::xsd::cxx::tree::optional< MinValueStats_type > MinValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MinValueStats_type, char > MinValueStats_traits;

      const MinValueStats_optional&
      MinValueStats () const;

      MinValueStats_optional&
      MinValueStats ();

      void
      MinValueStats (const MinValueStats_type& x);

      void
      MinValueStats (const MinValueStats_optional& x);

      void
      MinValueStats (::std::auto_ptr< MinValueStats_type > p);

      // DeviationStats
      //
      typedef ::xsd::qif2::StatsWithTolAngularType DeviationStats_type;
      typedef ::xsd::cxx::tree::optional< DeviationStats_type > DeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< DeviationStats_type, char > DeviationStats_traits;

      const DeviationStats_optional&
      DeviationStats () const;

      DeviationStats_optional&
      DeviationStats ();

      void
      DeviationStats (const DeviationStats_type& x);

      void
      DeviationStats (const DeviationStats_optional& x);

      void
      DeviationStats (::std::auto_ptr< DeviationStats_type > p);

      // MaxDeviationStats
      //
      typedef ::xsd::qif2::StatsAngularType MaxDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MaxDeviationStats_type > MaxDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxDeviationStats_type, char > MaxDeviationStats_traits;

      const MaxDeviationStats_optional&
      MaxDeviationStats () const;

      MaxDeviationStats_optional&
      MaxDeviationStats ();

      void
      MaxDeviationStats (const MaxDeviationStats_type& x);

      void
      MaxDeviationStats (const MaxDeviationStats_optional& x);

      void
      MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > p);

      // MinDeviationStats
      //
      typedef ::xsd::qif2::StatsAngularType MinDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MinDeviationStats_type > MinDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MinDeviationStats_type, char > MinDeviationStats_traits;

      const MinDeviationStats_optional&
      MinDeviationStats () const;

      MinDeviationStats_optional&
      MinDeviationStats ();

      void
      MinDeviationStats (const MinDeviationStats_type& x);

      void
      MinDeviationStats (const MinDeviationStats_optional& x);

      void
      MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > p);

      // Constructors.
      //
      AngularCharacteristicStatsEvalType (const Status_type&);

      AngularCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      AngularCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      AngularCharacteristicStatsEvalType (const AngularCharacteristicStatsEvalType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual AngularCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AngularCharacteristicStatsEvalType&
      operator= (const AngularCharacteristicStatsEvalType& x);

      virtual 
      ~AngularCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ValueStats_optional ValueStats_;
      MaxValueStats_optional MaxValueStats_;
      MinValueStats_optional MinValueStats_;
      DeviationStats_optional DeviationStats_;
      MaxDeviationStats_optional MaxDeviationStats_;
      MinDeviationStats_optional MinDeviationStats_;
    };

    class UserDefinedAttributeCharacteristicStatsEvalType: public ::xsd::qif2::CharacteristicStatsEvalBaseType
    {
      public:
      // AttributeStats
      //
      typedef ::xsd::qif2::StatsPassFailType AttributeStats_type;
      typedef ::xsd::cxx::tree::optional< AttributeStats_type > AttributeStats_optional;
      typedef ::xsd::cxx::tree::traits< AttributeStats_type, char > AttributeStats_traits;

      const AttributeStats_optional&
      AttributeStats () const;

      AttributeStats_optional&
      AttributeStats ();

      void
      AttributeStats (const AttributeStats_type& x);

      void
      AttributeStats (const AttributeStats_optional& x);

      void
      AttributeStats (::std::auto_ptr< AttributeStats_type > p);

      // Constructors.
      //
      UserDefinedAttributeCharacteristicStatsEvalType (const Status_type&);

      UserDefinedAttributeCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      UserDefinedAttributeCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                       ::xml_schema::flags f = 0,
                                                       ::xml_schema::container* c = 0);

      UserDefinedAttributeCharacteristicStatsEvalType (const UserDefinedAttributeCharacteristicStatsEvalType& x,
                                                       ::xml_schema::flags f = 0,
                                                       ::xml_schema::container* c = 0);

      virtual UserDefinedAttributeCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedAttributeCharacteristicStatsEvalType&
      operator= (const UserDefinedAttributeCharacteristicStatsEvalType& x);

      virtual 
      ~UserDefinedAttributeCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      AttributeStats_optional AttributeStats_;
    };

    class UserDefinedLinearCharacteristicStatsEvalType: public ::xsd::qif2::CharacteristicStatsEvalBaseType
    {
      public:
      // ValueStats
      //
      typedef ::xsd::qif2::StatsWithTolLinearType ValueStats_type;
      typedef ::xsd::cxx::tree::optional< ValueStats_type > ValueStats_optional;
      typedef ::xsd::cxx::tree::traits< ValueStats_type, char > ValueStats_traits;

      const ValueStats_optional&
      ValueStats () const;

      ValueStats_optional&
      ValueStats ();

      void
      ValueStats (const ValueStats_type& x);

      void
      ValueStats (const ValueStats_optional& x);

      void
      ValueStats (::std::auto_ptr< ValueStats_type > p);

      // MaxValueStats
      //
      typedef ::xsd::qif2::StatsLinearType MaxValueStats_type;
      typedef ::xsd::cxx::tree::optional< MaxValueStats_type > MaxValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxValueStats_type, char > MaxValueStats_traits;

      const MaxValueStats_optional&
      MaxValueStats () const;

      MaxValueStats_optional&
      MaxValueStats ();

      void
      MaxValueStats (const MaxValueStats_type& x);

      void
      MaxValueStats (const MaxValueStats_optional& x);

      void
      MaxValueStats (::std::auto_ptr< MaxValueStats_type > p);

      // MinValueStats
      //
      typedef ::xsd::qif2::StatsLinearType MinValueStats_type;
      typedef ::xsd::cxx::tree::optional< MinValueStats_type > MinValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MinValueStats_type, char > MinValueStats_traits;

      const MinValueStats_optional&
      MinValueStats () const;

      MinValueStats_optional&
      MinValueStats ();

      void
      MinValueStats (const MinValueStats_type& x);

      void
      MinValueStats (const MinValueStats_optional& x);

      void
      MinValueStats (::std::auto_ptr< MinValueStats_type > p);

      // DeviationStats
      //
      typedef ::xsd::qif2::StatsWithTolLinearType DeviationStats_type;
      typedef ::xsd::cxx::tree::optional< DeviationStats_type > DeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< DeviationStats_type, char > DeviationStats_traits;

      const DeviationStats_optional&
      DeviationStats () const;

      DeviationStats_optional&
      DeviationStats ();

      void
      DeviationStats (const DeviationStats_type& x);

      void
      DeviationStats (const DeviationStats_optional& x);

      void
      DeviationStats (::std::auto_ptr< DeviationStats_type > p);

      // MaxDeviationStats
      //
      typedef ::xsd::qif2::StatsLinearType MaxDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MaxDeviationStats_type > MaxDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxDeviationStats_type, char > MaxDeviationStats_traits;

      const MaxDeviationStats_optional&
      MaxDeviationStats () const;

      MaxDeviationStats_optional&
      MaxDeviationStats ();

      void
      MaxDeviationStats (const MaxDeviationStats_type& x);

      void
      MaxDeviationStats (const MaxDeviationStats_optional& x);

      void
      MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > p);

      // MinDeviationStats
      //
      typedef ::xsd::qif2::StatsLinearType MinDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MinDeviationStats_type > MinDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MinDeviationStats_type, char > MinDeviationStats_traits;

      const MinDeviationStats_optional&
      MinDeviationStats () const;

      MinDeviationStats_optional&
      MinDeviationStats ();

      void
      MinDeviationStats (const MinDeviationStats_type& x);

      void
      MinDeviationStats (const MinDeviationStats_optional& x);

      void
      MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > p);

      // Constructors.
      //
      UserDefinedLinearCharacteristicStatsEvalType (const Status_type&);

      UserDefinedLinearCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      UserDefinedLinearCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

      UserDefinedLinearCharacteristicStatsEvalType (const UserDefinedLinearCharacteristicStatsEvalType& x,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

      virtual UserDefinedLinearCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedLinearCharacteristicStatsEvalType&
      operator= (const UserDefinedLinearCharacteristicStatsEvalType& x);

      virtual 
      ~UserDefinedLinearCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ValueStats_optional ValueStats_;
      MaxValueStats_optional MaxValueStats_;
      MinValueStats_optional MinValueStats_;
      DeviationStats_optional DeviationStats_;
      MaxDeviationStats_optional MaxDeviationStats_;
      MinDeviationStats_optional MinDeviationStats_;
    };

    class UserDefinedAngularCharacteristicStatsEvalType: public ::xsd::qif2::CharacteristicStatsEvalBaseType
    {
      public:
      // ValueStats
      //
      typedef ::xsd::qif2::StatsWithTolAngularType ValueStats_type;
      typedef ::xsd::cxx::tree::optional< ValueStats_type > ValueStats_optional;
      typedef ::xsd::cxx::tree::traits< ValueStats_type, char > ValueStats_traits;

      const ValueStats_optional&
      ValueStats () const;

      ValueStats_optional&
      ValueStats ();

      void
      ValueStats (const ValueStats_type& x);

      void
      ValueStats (const ValueStats_optional& x);

      void
      ValueStats (::std::auto_ptr< ValueStats_type > p);

      // MaxValueStats
      //
      typedef ::xsd::qif2::StatsAngularType MaxValueStats_type;
      typedef ::xsd::cxx::tree::optional< MaxValueStats_type > MaxValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxValueStats_type, char > MaxValueStats_traits;

      const MaxValueStats_optional&
      MaxValueStats () const;

      MaxValueStats_optional&
      MaxValueStats ();

      void
      MaxValueStats (const MaxValueStats_type& x);

      void
      MaxValueStats (const MaxValueStats_optional& x);

      void
      MaxValueStats (::std::auto_ptr< MaxValueStats_type > p);

      // MinValueStats
      //
      typedef ::xsd::qif2::StatsAngularType MinValueStats_type;
      typedef ::xsd::cxx::tree::optional< MinValueStats_type > MinValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MinValueStats_type, char > MinValueStats_traits;

      const MinValueStats_optional&
      MinValueStats () const;

      MinValueStats_optional&
      MinValueStats ();

      void
      MinValueStats (const MinValueStats_type& x);

      void
      MinValueStats (const MinValueStats_optional& x);

      void
      MinValueStats (::std::auto_ptr< MinValueStats_type > p);

      // DeviationStats
      //
      typedef ::xsd::qif2::StatsWithTolAngularType DeviationStats_type;
      typedef ::xsd::cxx::tree::optional< DeviationStats_type > DeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< DeviationStats_type, char > DeviationStats_traits;

      const DeviationStats_optional&
      DeviationStats () const;

      DeviationStats_optional&
      DeviationStats ();

      void
      DeviationStats (const DeviationStats_type& x);

      void
      DeviationStats (const DeviationStats_optional& x);

      void
      DeviationStats (::std::auto_ptr< DeviationStats_type > p);

      // MaxDeviationStats
      //
      typedef ::xsd::qif2::StatsAngularType MaxDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MaxDeviationStats_type > MaxDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxDeviationStats_type, char > MaxDeviationStats_traits;

      const MaxDeviationStats_optional&
      MaxDeviationStats () const;

      MaxDeviationStats_optional&
      MaxDeviationStats ();

      void
      MaxDeviationStats (const MaxDeviationStats_type& x);

      void
      MaxDeviationStats (const MaxDeviationStats_optional& x);

      void
      MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > p);

      // MinDeviationStats
      //
      typedef ::xsd::qif2::StatsAngularType MinDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MinDeviationStats_type > MinDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MinDeviationStats_type, char > MinDeviationStats_traits;

      const MinDeviationStats_optional&
      MinDeviationStats () const;

      MinDeviationStats_optional&
      MinDeviationStats ();

      void
      MinDeviationStats (const MinDeviationStats_type& x);

      void
      MinDeviationStats (const MinDeviationStats_optional& x);

      void
      MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > p);

      // Constructors.
      //
      UserDefinedAngularCharacteristicStatsEvalType (const Status_type&);

      UserDefinedAngularCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      UserDefinedAngularCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

      UserDefinedAngularCharacteristicStatsEvalType (const UserDefinedAngularCharacteristicStatsEvalType& x,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

      virtual UserDefinedAngularCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedAngularCharacteristicStatsEvalType&
      operator= (const UserDefinedAngularCharacteristicStatsEvalType& x);

      virtual 
      ~UserDefinedAngularCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ValueStats_optional ValueStats_;
      MaxValueStats_optional MaxValueStats_;
      MinValueStats_optional MinValueStats_;
      DeviationStats_optional DeviationStats_;
      MaxDeviationStats_optional MaxDeviationStats_;
      MinDeviationStats_optional MinDeviationStats_;
    };

    class UserDefinedAreaCharacteristicStatsEvalType: public ::xsd::qif2::CharacteristicStatsEvalBaseType
    {
      public:
      // ValueStats
      //
      typedef ::xsd::qif2::StatsWithTolAreaType ValueStats_type;
      typedef ::xsd::cxx::tree::optional< ValueStats_type > ValueStats_optional;
      typedef ::xsd::cxx::tree::traits< ValueStats_type, char > ValueStats_traits;

      const ValueStats_optional&
      ValueStats () const;

      ValueStats_optional&
      ValueStats ();

      void
      ValueStats (const ValueStats_type& x);

      void
      ValueStats (const ValueStats_optional& x);

      void
      ValueStats (::std::auto_ptr< ValueStats_type > p);

      // MaxValueStats
      //
      typedef ::xsd::qif2::StatsAreaType MaxValueStats_type;
      typedef ::xsd::cxx::tree::optional< MaxValueStats_type > MaxValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxValueStats_type, char > MaxValueStats_traits;

      const MaxValueStats_optional&
      MaxValueStats () const;

      MaxValueStats_optional&
      MaxValueStats ();

      void
      MaxValueStats (const MaxValueStats_type& x);

      void
      MaxValueStats (const MaxValueStats_optional& x);

      void
      MaxValueStats (::std::auto_ptr< MaxValueStats_type > p);

      // MinValueStats
      //
      typedef ::xsd::qif2::StatsAreaType MinValueStats_type;
      typedef ::xsd::cxx::tree::optional< MinValueStats_type > MinValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MinValueStats_type, char > MinValueStats_traits;

      const MinValueStats_optional&
      MinValueStats () const;

      MinValueStats_optional&
      MinValueStats ();

      void
      MinValueStats (const MinValueStats_type& x);

      void
      MinValueStats (const MinValueStats_optional& x);

      void
      MinValueStats (::std::auto_ptr< MinValueStats_type > p);

      // DeviationStats
      //
      typedef ::xsd::qif2::StatsWithTolAreaType DeviationStats_type;
      typedef ::xsd::cxx::tree::optional< DeviationStats_type > DeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< DeviationStats_type, char > DeviationStats_traits;

      const DeviationStats_optional&
      DeviationStats () const;

      DeviationStats_optional&
      DeviationStats ();

      void
      DeviationStats (const DeviationStats_type& x);

      void
      DeviationStats (const DeviationStats_optional& x);

      void
      DeviationStats (::std::auto_ptr< DeviationStats_type > p);

      // MaxDeviationStats
      //
      typedef ::xsd::qif2::StatsAreaType MaxDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MaxDeviationStats_type > MaxDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxDeviationStats_type, char > MaxDeviationStats_traits;

      const MaxDeviationStats_optional&
      MaxDeviationStats () const;

      MaxDeviationStats_optional&
      MaxDeviationStats ();

      void
      MaxDeviationStats (const MaxDeviationStats_type& x);

      void
      MaxDeviationStats (const MaxDeviationStats_optional& x);

      void
      MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > p);

      // MinDeviationStats
      //
      typedef ::xsd::qif2::StatsAreaType MinDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MinDeviationStats_type > MinDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MinDeviationStats_type, char > MinDeviationStats_traits;

      const MinDeviationStats_optional&
      MinDeviationStats () const;

      MinDeviationStats_optional&
      MinDeviationStats ();

      void
      MinDeviationStats (const MinDeviationStats_type& x);

      void
      MinDeviationStats (const MinDeviationStats_optional& x);

      void
      MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > p);

      // Constructors.
      //
      UserDefinedAreaCharacteristicStatsEvalType (const Status_type&);

      UserDefinedAreaCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      UserDefinedAreaCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      UserDefinedAreaCharacteristicStatsEvalType (const UserDefinedAreaCharacteristicStatsEvalType& x,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      virtual UserDefinedAreaCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedAreaCharacteristicStatsEvalType&
      operator= (const UserDefinedAreaCharacteristicStatsEvalType& x);

      virtual 
      ~UserDefinedAreaCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ValueStats_optional ValueStats_;
      MaxValueStats_optional MaxValueStats_;
      MinValueStats_optional MinValueStats_;
      DeviationStats_optional DeviationStats_;
      MaxDeviationStats_optional MaxDeviationStats_;
      MinDeviationStats_optional MinDeviationStats_;
    };

    class UserDefinedForceCharacteristicStatsEvalType: public ::xsd::qif2::CharacteristicStatsEvalBaseType
    {
      public:
      // ValueStats
      //
      typedef ::xsd::qif2::StatsWithTolForceType ValueStats_type;
      typedef ::xsd::cxx::tree::optional< ValueStats_type > ValueStats_optional;
      typedef ::xsd::cxx::tree::traits< ValueStats_type, char > ValueStats_traits;

      const ValueStats_optional&
      ValueStats () const;

      ValueStats_optional&
      ValueStats ();

      void
      ValueStats (const ValueStats_type& x);

      void
      ValueStats (const ValueStats_optional& x);

      void
      ValueStats (::std::auto_ptr< ValueStats_type > p);

      // MaxValueStats
      //
      typedef ::xsd::qif2::StatsForceType MaxValueStats_type;
      typedef ::xsd::cxx::tree::optional< MaxValueStats_type > MaxValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxValueStats_type, char > MaxValueStats_traits;

      const MaxValueStats_optional&
      MaxValueStats () const;

      MaxValueStats_optional&
      MaxValueStats ();

      void
      MaxValueStats (const MaxValueStats_type& x);

      void
      MaxValueStats (const MaxValueStats_optional& x);

      void
      MaxValueStats (::std::auto_ptr< MaxValueStats_type > p);

      // MinValueStats
      //
      typedef ::xsd::qif2::StatsForceType MinValueStats_type;
      typedef ::xsd::cxx::tree::optional< MinValueStats_type > MinValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MinValueStats_type, char > MinValueStats_traits;

      const MinValueStats_optional&
      MinValueStats () const;

      MinValueStats_optional&
      MinValueStats ();

      void
      MinValueStats (const MinValueStats_type& x);

      void
      MinValueStats (const MinValueStats_optional& x);

      void
      MinValueStats (::std::auto_ptr< MinValueStats_type > p);

      // DeviationStats
      //
      typedef ::xsd::qif2::StatsWithTolForceType DeviationStats_type;
      typedef ::xsd::cxx::tree::optional< DeviationStats_type > DeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< DeviationStats_type, char > DeviationStats_traits;

      const DeviationStats_optional&
      DeviationStats () const;

      DeviationStats_optional&
      DeviationStats ();

      void
      DeviationStats (const DeviationStats_type& x);

      void
      DeviationStats (const DeviationStats_optional& x);

      void
      DeviationStats (::std::auto_ptr< DeviationStats_type > p);

      // MaxDeviationStats
      //
      typedef ::xsd::qif2::StatsForceType MaxDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MaxDeviationStats_type > MaxDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxDeviationStats_type, char > MaxDeviationStats_traits;

      const MaxDeviationStats_optional&
      MaxDeviationStats () const;

      MaxDeviationStats_optional&
      MaxDeviationStats ();

      void
      MaxDeviationStats (const MaxDeviationStats_type& x);

      void
      MaxDeviationStats (const MaxDeviationStats_optional& x);

      void
      MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > p);

      // MinDeviationStats
      //
      typedef ::xsd::qif2::StatsForceType MinDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MinDeviationStats_type > MinDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MinDeviationStats_type, char > MinDeviationStats_traits;

      const MinDeviationStats_optional&
      MinDeviationStats () const;

      MinDeviationStats_optional&
      MinDeviationStats ();

      void
      MinDeviationStats (const MinDeviationStats_type& x);

      void
      MinDeviationStats (const MinDeviationStats_optional& x);

      void
      MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > p);

      // Constructors.
      //
      UserDefinedForceCharacteristicStatsEvalType (const Status_type&);

      UserDefinedForceCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      UserDefinedForceCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      UserDefinedForceCharacteristicStatsEvalType (const UserDefinedForceCharacteristicStatsEvalType& x,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      virtual UserDefinedForceCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedForceCharacteristicStatsEvalType&
      operator= (const UserDefinedForceCharacteristicStatsEvalType& x);

      virtual 
      ~UserDefinedForceCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ValueStats_optional ValueStats_;
      MaxValueStats_optional MaxValueStats_;
      MinValueStats_optional MinValueStats_;
      DeviationStats_optional DeviationStats_;
      MaxDeviationStats_optional MaxDeviationStats_;
      MinDeviationStats_optional MinDeviationStats_;
    };

    class UserDefinedMassCharacteristicStatsEvalType: public ::xsd::qif2::CharacteristicStatsEvalBaseType
    {
      public:
      // ValueStats
      //
      typedef ::xsd::qif2::StatsWithTolMassType ValueStats_type;
      typedef ::xsd::cxx::tree::optional< ValueStats_type > ValueStats_optional;
      typedef ::xsd::cxx::tree::traits< ValueStats_type, char > ValueStats_traits;

      const ValueStats_optional&
      ValueStats () const;

      ValueStats_optional&
      ValueStats ();

      void
      ValueStats (const ValueStats_type& x);

      void
      ValueStats (const ValueStats_optional& x);

      void
      ValueStats (::std::auto_ptr< ValueStats_type > p);

      // MaxValueStats
      //
      typedef ::xsd::qif2::StatsMassType MaxValueStats_type;
      typedef ::xsd::cxx::tree::optional< MaxValueStats_type > MaxValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxValueStats_type, char > MaxValueStats_traits;

      const MaxValueStats_optional&
      MaxValueStats () const;

      MaxValueStats_optional&
      MaxValueStats ();

      void
      MaxValueStats (const MaxValueStats_type& x);

      void
      MaxValueStats (const MaxValueStats_optional& x);

      void
      MaxValueStats (::std::auto_ptr< MaxValueStats_type > p);

      // MinValueStats
      //
      typedef ::xsd::qif2::StatsMassType MinValueStats_type;
      typedef ::xsd::cxx::tree::optional< MinValueStats_type > MinValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MinValueStats_type, char > MinValueStats_traits;

      const MinValueStats_optional&
      MinValueStats () const;

      MinValueStats_optional&
      MinValueStats ();

      void
      MinValueStats (const MinValueStats_type& x);

      void
      MinValueStats (const MinValueStats_optional& x);

      void
      MinValueStats (::std::auto_ptr< MinValueStats_type > p);

      // DeviationStats
      //
      typedef ::xsd::qif2::StatsWithTolMassType DeviationStats_type;
      typedef ::xsd::cxx::tree::optional< DeviationStats_type > DeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< DeviationStats_type, char > DeviationStats_traits;

      const DeviationStats_optional&
      DeviationStats () const;

      DeviationStats_optional&
      DeviationStats ();

      void
      DeviationStats (const DeviationStats_type& x);

      void
      DeviationStats (const DeviationStats_optional& x);

      void
      DeviationStats (::std::auto_ptr< DeviationStats_type > p);

      // MaxDeviationStats
      //
      typedef ::xsd::qif2::StatsMassType MaxDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MaxDeviationStats_type > MaxDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxDeviationStats_type, char > MaxDeviationStats_traits;

      const MaxDeviationStats_optional&
      MaxDeviationStats () const;

      MaxDeviationStats_optional&
      MaxDeviationStats ();

      void
      MaxDeviationStats (const MaxDeviationStats_type& x);

      void
      MaxDeviationStats (const MaxDeviationStats_optional& x);

      void
      MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > p);

      // MinDeviationStats
      //
      typedef ::xsd::qif2::StatsMassType MinDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MinDeviationStats_type > MinDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MinDeviationStats_type, char > MinDeviationStats_traits;

      const MinDeviationStats_optional&
      MinDeviationStats () const;

      MinDeviationStats_optional&
      MinDeviationStats ();

      void
      MinDeviationStats (const MinDeviationStats_type& x);

      void
      MinDeviationStats (const MinDeviationStats_optional& x);

      void
      MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > p);

      // Constructors.
      //
      UserDefinedMassCharacteristicStatsEvalType (const Status_type&);

      UserDefinedMassCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      UserDefinedMassCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      UserDefinedMassCharacteristicStatsEvalType (const UserDefinedMassCharacteristicStatsEvalType& x,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      virtual UserDefinedMassCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedMassCharacteristicStatsEvalType&
      operator= (const UserDefinedMassCharacteristicStatsEvalType& x);

      virtual 
      ~UserDefinedMassCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ValueStats_optional ValueStats_;
      MaxValueStats_optional MaxValueStats_;
      MinValueStats_optional MinValueStats_;
      DeviationStats_optional DeviationStats_;
      MaxDeviationStats_optional MaxDeviationStats_;
      MinDeviationStats_optional MinDeviationStats_;
    };

    class UserDefinedPressureCharacteristicStatsEvalType: public ::xsd::qif2::CharacteristicStatsEvalBaseType
    {
      public:
      // ValueStats
      //
      typedef ::xsd::qif2::StatsWithTolPressureType ValueStats_type;
      typedef ::xsd::cxx::tree::optional< ValueStats_type > ValueStats_optional;
      typedef ::xsd::cxx::tree::traits< ValueStats_type, char > ValueStats_traits;

      const ValueStats_optional&
      ValueStats () const;

      ValueStats_optional&
      ValueStats ();

      void
      ValueStats (const ValueStats_type& x);

      void
      ValueStats (const ValueStats_optional& x);

      void
      ValueStats (::std::auto_ptr< ValueStats_type > p);

      // MaxValueStats
      //
      typedef ::xsd::qif2::StatsPressureType MaxValueStats_type;
      typedef ::xsd::cxx::tree::optional< MaxValueStats_type > MaxValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxValueStats_type, char > MaxValueStats_traits;

      const MaxValueStats_optional&
      MaxValueStats () const;

      MaxValueStats_optional&
      MaxValueStats ();

      void
      MaxValueStats (const MaxValueStats_type& x);

      void
      MaxValueStats (const MaxValueStats_optional& x);

      void
      MaxValueStats (::std::auto_ptr< MaxValueStats_type > p);

      // MinValueStats
      //
      typedef ::xsd::qif2::StatsPressureType MinValueStats_type;
      typedef ::xsd::cxx::tree::optional< MinValueStats_type > MinValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MinValueStats_type, char > MinValueStats_traits;

      const MinValueStats_optional&
      MinValueStats () const;

      MinValueStats_optional&
      MinValueStats ();

      void
      MinValueStats (const MinValueStats_type& x);

      void
      MinValueStats (const MinValueStats_optional& x);

      void
      MinValueStats (::std::auto_ptr< MinValueStats_type > p);

      // DeviationStats
      //
      typedef ::xsd::qif2::StatsWithTolPressureType DeviationStats_type;
      typedef ::xsd::cxx::tree::optional< DeviationStats_type > DeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< DeviationStats_type, char > DeviationStats_traits;

      const DeviationStats_optional&
      DeviationStats () const;

      DeviationStats_optional&
      DeviationStats ();

      void
      DeviationStats (const DeviationStats_type& x);

      void
      DeviationStats (const DeviationStats_optional& x);

      void
      DeviationStats (::std::auto_ptr< DeviationStats_type > p);

      // MaxDeviationStats
      //
      typedef ::xsd::qif2::StatsPressureType MaxDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MaxDeviationStats_type > MaxDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxDeviationStats_type, char > MaxDeviationStats_traits;

      const MaxDeviationStats_optional&
      MaxDeviationStats () const;

      MaxDeviationStats_optional&
      MaxDeviationStats ();

      void
      MaxDeviationStats (const MaxDeviationStats_type& x);

      void
      MaxDeviationStats (const MaxDeviationStats_optional& x);

      void
      MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > p);

      // MinDeviationStats
      //
      typedef ::xsd::qif2::StatsPressureType MinDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MinDeviationStats_type > MinDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MinDeviationStats_type, char > MinDeviationStats_traits;

      const MinDeviationStats_optional&
      MinDeviationStats () const;

      MinDeviationStats_optional&
      MinDeviationStats ();

      void
      MinDeviationStats (const MinDeviationStats_type& x);

      void
      MinDeviationStats (const MinDeviationStats_optional& x);

      void
      MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > p);

      // Constructors.
      //
      UserDefinedPressureCharacteristicStatsEvalType (const Status_type&);

      UserDefinedPressureCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      UserDefinedPressureCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

      UserDefinedPressureCharacteristicStatsEvalType (const UserDefinedPressureCharacteristicStatsEvalType& x,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

      virtual UserDefinedPressureCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedPressureCharacteristicStatsEvalType&
      operator= (const UserDefinedPressureCharacteristicStatsEvalType& x);

      virtual 
      ~UserDefinedPressureCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ValueStats_optional ValueStats_;
      MaxValueStats_optional MaxValueStats_;
      MinValueStats_optional MinValueStats_;
      DeviationStats_optional DeviationStats_;
      MaxDeviationStats_optional MaxDeviationStats_;
      MinDeviationStats_optional MinDeviationStats_;
    };

    class UserDefinedSpeedCharacteristicStatsEvalType: public ::xsd::qif2::CharacteristicStatsEvalBaseType
    {
      public:
      // ValueStats
      //
      typedef ::xsd::qif2::StatsWithTolSpeedType ValueStats_type;
      typedef ::xsd::cxx::tree::optional< ValueStats_type > ValueStats_optional;
      typedef ::xsd::cxx::tree::traits< ValueStats_type, char > ValueStats_traits;

      const ValueStats_optional&
      ValueStats () const;

      ValueStats_optional&
      ValueStats ();

      void
      ValueStats (const ValueStats_type& x);

      void
      ValueStats (const ValueStats_optional& x);

      void
      ValueStats (::std::auto_ptr< ValueStats_type > p);

      // MaxValueStats
      //
      typedef ::xsd::qif2::StatsSpeedType MaxValueStats_type;
      typedef ::xsd::cxx::tree::optional< MaxValueStats_type > MaxValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxValueStats_type, char > MaxValueStats_traits;

      const MaxValueStats_optional&
      MaxValueStats () const;

      MaxValueStats_optional&
      MaxValueStats ();

      void
      MaxValueStats (const MaxValueStats_type& x);

      void
      MaxValueStats (const MaxValueStats_optional& x);

      void
      MaxValueStats (::std::auto_ptr< MaxValueStats_type > p);

      // MinValueStats
      //
      typedef ::xsd::qif2::StatsSpeedType MinValueStats_type;
      typedef ::xsd::cxx::tree::optional< MinValueStats_type > MinValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MinValueStats_type, char > MinValueStats_traits;

      const MinValueStats_optional&
      MinValueStats () const;

      MinValueStats_optional&
      MinValueStats ();

      void
      MinValueStats (const MinValueStats_type& x);

      void
      MinValueStats (const MinValueStats_optional& x);

      void
      MinValueStats (::std::auto_ptr< MinValueStats_type > p);

      // DeviationStats
      //
      typedef ::xsd::qif2::StatsWithTolSpeedType DeviationStats_type;
      typedef ::xsd::cxx::tree::optional< DeviationStats_type > DeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< DeviationStats_type, char > DeviationStats_traits;

      const DeviationStats_optional&
      DeviationStats () const;

      DeviationStats_optional&
      DeviationStats ();

      void
      DeviationStats (const DeviationStats_type& x);

      void
      DeviationStats (const DeviationStats_optional& x);

      void
      DeviationStats (::std::auto_ptr< DeviationStats_type > p);

      // MaxDeviationStats
      //
      typedef ::xsd::qif2::StatsSpeedType MaxDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MaxDeviationStats_type > MaxDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxDeviationStats_type, char > MaxDeviationStats_traits;

      const MaxDeviationStats_optional&
      MaxDeviationStats () const;

      MaxDeviationStats_optional&
      MaxDeviationStats ();

      void
      MaxDeviationStats (const MaxDeviationStats_type& x);

      void
      MaxDeviationStats (const MaxDeviationStats_optional& x);

      void
      MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > p);

      // MinDeviationStats
      //
      typedef ::xsd::qif2::StatsSpeedType MinDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MinDeviationStats_type > MinDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MinDeviationStats_type, char > MinDeviationStats_traits;

      const MinDeviationStats_optional&
      MinDeviationStats () const;

      MinDeviationStats_optional&
      MinDeviationStats ();

      void
      MinDeviationStats (const MinDeviationStats_type& x);

      void
      MinDeviationStats (const MinDeviationStats_optional& x);

      void
      MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > p);

      // Constructors.
      //
      UserDefinedSpeedCharacteristicStatsEvalType (const Status_type&);

      UserDefinedSpeedCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      UserDefinedSpeedCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      UserDefinedSpeedCharacteristicStatsEvalType (const UserDefinedSpeedCharacteristicStatsEvalType& x,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      virtual UserDefinedSpeedCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedSpeedCharacteristicStatsEvalType&
      operator= (const UserDefinedSpeedCharacteristicStatsEvalType& x);

      virtual 
      ~UserDefinedSpeedCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ValueStats_optional ValueStats_;
      MaxValueStats_optional MaxValueStats_;
      MinValueStats_optional MinValueStats_;
      DeviationStats_optional DeviationStats_;
      MaxDeviationStats_optional MaxDeviationStats_;
      MinDeviationStats_optional MinDeviationStats_;
    };

    class UserDefinedTemperatureCharacteristicStatsEvalType: public ::xsd::qif2::CharacteristicStatsEvalBaseType
    {
      public:
      // ValueStats
      //
      typedef ::xsd::qif2::StatsWithTolTemperatureType ValueStats_type;
      typedef ::xsd::cxx::tree::optional< ValueStats_type > ValueStats_optional;
      typedef ::xsd::cxx::tree::traits< ValueStats_type, char > ValueStats_traits;

      const ValueStats_optional&
      ValueStats () const;

      ValueStats_optional&
      ValueStats ();

      void
      ValueStats (const ValueStats_type& x);

      void
      ValueStats (const ValueStats_optional& x);

      void
      ValueStats (::std::auto_ptr< ValueStats_type > p);

      // MaxValueStats
      //
      typedef ::xsd::qif2::StatsTemperatureType MaxValueStats_type;
      typedef ::xsd::cxx::tree::optional< MaxValueStats_type > MaxValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxValueStats_type, char > MaxValueStats_traits;

      const MaxValueStats_optional&
      MaxValueStats () const;

      MaxValueStats_optional&
      MaxValueStats ();

      void
      MaxValueStats (const MaxValueStats_type& x);

      void
      MaxValueStats (const MaxValueStats_optional& x);

      void
      MaxValueStats (::std::auto_ptr< MaxValueStats_type > p);

      // MinValueStats
      //
      typedef ::xsd::qif2::StatsTemperatureType MinValueStats_type;
      typedef ::xsd::cxx::tree::optional< MinValueStats_type > MinValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MinValueStats_type, char > MinValueStats_traits;

      const MinValueStats_optional&
      MinValueStats () const;

      MinValueStats_optional&
      MinValueStats ();

      void
      MinValueStats (const MinValueStats_type& x);

      void
      MinValueStats (const MinValueStats_optional& x);

      void
      MinValueStats (::std::auto_ptr< MinValueStats_type > p);

      // DeviationStats
      //
      typedef ::xsd::qif2::StatsWithTolTemperatureType DeviationStats_type;
      typedef ::xsd::cxx::tree::optional< DeviationStats_type > DeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< DeviationStats_type, char > DeviationStats_traits;

      const DeviationStats_optional&
      DeviationStats () const;

      DeviationStats_optional&
      DeviationStats ();

      void
      DeviationStats (const DeviationStats_type& x);

      void
      DeviationStats (const DeviationStats_optional& x);

      void
      DeviationStats (::std::auto_ptr< DeviationStats_type > p);

      // MaxDeviationStats
      //
      typedef ::xsd::qif2::StatsTemperatureType MaxDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MaxDeviationStats_type > MaxDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxDeviationStats_type, char > MaxDeviationStats_traits;

      const MaxDeviationStats_optional&
      MaxDeviationStats () const;

      MaxDeviationStats_optional&
      MaxDeviationStats ();

      void
      MaxDeviationStats (const MaxDeviationStats_type& x);

      void
      MaxDeviationStats (const MaxDeviationStats_optional& x);

      void
      MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > p);

      // MinDeviationStats
      //
      typedef ::xsd::qif2::StatsTemperatureType MinDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MinDeviationStats_type > MinDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MinDeviationStats_type, char > MinDeviationStats_traits;

      const MinDeviationStats_optional&
      MinDeviationStats () const;

      MinDeviationStats_optional&
      MinDeviationStats ();

      void
      MinDeviationStats (const MinDeviationStats_type& x);

      void
      MinDeviationStats (const MinDeviationStats_optional& x);

      void
      MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > p);

      // Constructors.
      //
      UserDefinedTemperatureCharacteristicStatsEvalType (const Status_type&);

      UserDefinedTemperatureCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      UserDefinedTemperatureCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                         ::xml_schema::flags f = 0,
                                                         ::xml_schema::container* c = 0);

      UserDefinedTemperatureCharacteristicStatsEvalType (const UserDefinedTemperatureCharacteristicStatsEvalType& x,
                                                         ::xml_schema::flags f = 0,
                                                         ::xml_schema::container* c = 0);

      virtual UserDefinedTemperatureCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedTemperatureCharacteristicStatsEvalType&
      operator= (const UserDefinedTemperatureCharacteristicStatsEvalType& x);

      virtual 
      ~UserDefinedTemperatureCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ValueStats_optional ValueStats_;
      MaxValueStats_optional MaxValueStats_;
      MinValueStats_optional MinValueStats_;
      DeviationStats_optional DeviationStats_;
      MaxDeviationStats_optional MaxDeviationStats_;
      MinDeviationStats_optional MinDeviationStats_;
    };

    class UserDefinedTimeCharacteristicStatsEvalType: public ::xsd::qif2::CharacteristicStatsEvalBaseType
    {
      public:
      // ValueStats
      //
      typedef ::xsd::qif2::StatsWithTolTimeType ValueStats_type;
      typedef ::xsd::cxx::tree::optional< ValueStats_type > ValueStats_optional;
      typedef ::xsd::cxx::tree::traits< ValueStats_type, char > ValueStats_traits;

      const ValueStats_optional&
      ValueStats () const;

      ValueStats_optional&
      ValueStats ();

      void
      ValueStats (const ValueStats_type& x);

      void
      ValueStats (const ValueStats_optional& x);

      void
      ValueStats (::std::auto_ptr< ValueStats_type > p);

      // MaxValueStats
      //
      typedef ::xsd::qif2::StatsTimeType MaxValueStats_type;
      typedef ::xsd::cxx::tree::optional< MaxValueStats_type > MaxValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxValueStats_type, char > MaxValueStats_traits;

      const MaxValueStats_optional&
      MaxValueStats () const;

      MaxValueStats_optional&
      MaxValueStats ();

      void
      MaxValueStats (const MaxValueStats_type& x);

      void
      MaxValueStats (const MaxValueStats_optional& x);

      void
      MaxValueStats (::std::auto_ptr< MaxValueStats_type > p);

      // MinValueStats
      //
      typedef ::xsd::qif2::StatsTimeType MinValueStats_type;
      typedef ::xsd::cxx::tree::optional< MinValueStats_type > MinValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MinValueStats_type, char > MinValueStats_traits;

      const MinValueStats_optional&
      MinValueStats () const;

      MinValueStats_optional&
      MinValueStats ();

      void
      MinValueStats (const MinValueStats_type& x);

      void
      MinValueStats (const MinValueStats_optional& x);

      void
      MinValueStats (::std::auto_ptr< MinValueStats_type > p);

      // DeviationStats
      //
      typedef ::xsd::qif2::StatsWithTolTimeType DeviationStats_type;
      typedef ::xsd::cxx::tree::optional< DeviationStats_type > DeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< DeviationStats_type, char > DeviationStats_traits;

      const DeviationStats_optional&
      DeviationStats () const;

      DeviationStats_optional&
      DeviationStats ();

      void
      DeviationStats (const DeviationStats_type& x);

      void
      DeviationStats (const DeviationStats_optional& x);

      void
      DeviationStats (::std::auto_ptr< DeviationStats_type > p);

      // MaxDeviationStats
      //
      typedef ::xsd::qif2::StatsTimeType MaxDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MaxDeviationStats_type > MaxDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxDeviationStats_type, char > MaxDeviationStats_traits;

      const MaxDeviationStats_optional&
      MaxDeviationStats () const;

      MaxDeviationStats_optional&
      MaxDeviationStats ();

      void
      MaxDeviationStats (const MaxDeviationStats_type& x);

      void
      MaxDeviationStats (const MaxDeviationStats_optional& x);

      void
      MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > p);

      // MinDeviationStats
      //
      typedef ::xsd::qif2::StatsTimeType MinDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MinDeviationStats_type > MinDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MinDeviationStats_type, char > MinDeviationStats_traits;

      const MinDeviationStats_optional&
      MinDeviationStats () const;

      MinDeviationStats_optional&
      MinDeviationStats ();

      void
      MinDeviationStats (const MinDeviationStats_type& x);

      void
      MinDeviationStats (const MinDeviationStats_optional& x);

      void
      MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > p);

      // Constructors.
      //
      UserDefinedTimeCharacteristicStatsEvalType (const Status_type&);

      UserDefinedTimeCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      UserDefinedTimeCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      UserDefinedTimeCharacteristicStatsEvalType (const UserDefinedTimeCharacteristicStatsEvalType& x,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      virtual UserDefinedTimeCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedTimeCharacteristicStatsEvalType&
      operator= (const UserDefinedTimeCharacteristicStatsEvalType& x);

      virtual 
      ~UserDefinedTimeCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ValueStats_optional ValueStats_;
      MaxValueStats_optional MaxValueStats_;
      MinValueStats_optional MinValueStats_;
      DeviationStats_optional DeviationStats_;
      MaxDeviationStats_optional MaxDeviationStats_;
      MinDeviationStats_optional MinDeviationStats_;
    };

    class UserDefinedUnitCharacteristicStatsEvalType: public ::xsd::qif2::CharacteristicStatsEvalBaseType
    {
      public:
      // ValueStats
      //
      typedef ::xsd::qif2::StatsWithTolUserDefinedUnitType ValueStats_type;
      typedef ::xsd::cxx::tree::optional< ValueStats_type > ValueStats_optional;
      typedef ::xsd::cxx::tree::traits< ValueStats_type, char > ValueStats_traits;

      const ValueStats_optional&
      ValueStats () const;

      ValueStats_optional&
      ValueStats ();

      void
      ValueStats (const ValueStats_type& x);

      void
      ValueStats (const ValueStats_optional& x);

      void
      ValueStats (::std::auto_ptr< ValueStats_type > p);

      // MaxValueStats
      //
      typedef ::xsd::qif2::StatsUserDefinedUnitType MaxValueStats_type;
      typedef ::xsd::cxx::tree::optional< MaxValueStats_type > MaxValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxValueStats_type, char > MaxValueStats_traits;

      const MaxValueStats_optional&
      MaxValueStats () const;

      MaxValueStats_optional&
      MaxValueStats ();

      void
      MaxValueStats (const MaxValueStats_type& x);

      void
      MaxValueStats (const MaxValueStats_optional& x);

      void
      MaxValueStats (::std::auto_ptr< MaxValueStats_type > p);

      // MinValueStats
      //
      typedef ::xsd::qif2::StatsUserDefinedUnitType MinValueStats_type;
      typedef ::xsd::cxx::tree::optional< MinValueStats_type > MinValueStats_optional;
      typedef ::xsd::cxx::tree::traits< MinValueStats_type, char > MinValueStats_traits;

      const MinValueStats_optional&
      MinValueStats () const;

      MinValueStats_optional&
      MinValueStats ();

      void
      MinValueStats (const MinValueStats_type& x);

      void
      MinValueStats (const MinValueStats_optional& x);

      void
      MinValueStats (::std::auto_ptr< MinValueStats_type > p);

      // DeviationStats
      //
      typedef ::xsd::qif2::StatsWithTolUserDefinedUnitType DeviationStats_type;
      typedef ::xsd::cxx::tree::optional< DeviationStats_type > DeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< DeviationStats_type, char > DeviationStats_traits;

      const DeviationStats_optional&
      DeviationStats () const;

      DeviationStats_optional&
      DeviationStats ();

      void
      DeviationStats (const DeviationStats_type& x);

      void
      DeviationStats (const DeviationStats_optional& x);

      void
      DeviationStats (::std::auto_ptr< DeviationStats_type > p);

      // MaxDeviationStats
      //
      typedef ::xsd::qif2::StatsUserDefinedUnitType MaxDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MaxDeviationStats_type > MaxDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxDeviationStats_type, char > MaxDeviationStats_traits;

      const MaxDeviationStats_optional&
      MaxDeviationStats () const;

      MaxDeviationStats_optional&
      MaxDeviationStats ();

      void
      MaxDeviationStats (const MaxDeviationStats_type& x);

      void
      MaxDeviationStats (const MaxDeviationStats_optional& x);

      void
      MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > p);

      // MinDeviationStats
      //
      typedef ::xsd::qif2::StatsUserDefinedUnitType MinDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< MinDeviationStats_type > MinDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< MinDeviationStats_type, char > MinDeviationStats_traits;

      const MinDeviationStats_optional&
      MinDeviationStats () const;

      MinDeviationStats_optional&
      MinDeviationStats ();

      void
      MinDeviationStats (const MinDeviationStats_type& x);

      void
      MinDeviationStats (const MinDeviationStats_optional& x);

      void
      MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > p);

      // Constructors.
      //
      UserDefinedUnitCharacteristicStatsEvalType (const Status_type&);

      UserDefinedUnitCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      UserDefinedUnitCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      UserDefinedUnitCharacteristicStatsEvalType (const UserDefinedUnitCharacteristicStatsEvalType& x,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      virtual UserDefinedUnitCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UserDefinedUnitCharacteristicStatsEvalType&
      operator= (const UserDefinedUnitCharacteristicStatsEvalType& x);

      virtual 
      ~UserDefinedUnitCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ValueStats_optional ValueStats_;
      MaxValueStats_optional MaxValueStats_;
      MinValueStats_optional MinValueStats_;
      DeviationStats_optional DeviationStats_;
      MaxDeviationStats_optional MaxDeviationStats_;
      MinDeviationStats_optional MinDeviationStats_;
    };

    class SurfaceTextureCharacteristicStatsEvalType: public ::xsd::qif2::CharacteristicStatsEvalBaseType
    {
      public:
      // RoughnessAverageValueStats
      //
      typedef ::xsd::qif2::StatsWithTolLinearType RoughnessAverageValueStats_type;
      typedef ::xsd::cxx::tree::optional< RoughnessAverageValueStats_type > RoughnessAverageValueStats_optional;
      typedef ::xsd::cxx::tree::traits< RoughnessAverageValueStats_type, char > RoughnessAverageValueStats_traits;

      const RoughnessAverageValueStats_optional&
      RoughnessAverageValueStats () const;

      RoughnessAverageValueStats_optional&
      RoughnessAverageValueStats ();

      void
      RoughnessAverageValueStats (const RoughnessAverageValueStats_type& x);

      void
      RoughnessAverageValueStats (const RoughnessAverageValueStats_optional& x);

      void
      RoughnessAverageValueStats (::std::auto_ptr< RoughnessAverageValueStats_type > p);

      // Constructors.
      //
      SurfaceTextureCharacteristicStatsEvalType (const Status_type&);

      SurfaceTextureCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      SurfaceTextureCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      SurfaceTextureCharacteristicStatsEvalType (const SurfaceTextureCharacteristicStatsEvalType& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      virtual SurfaceTextureCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SurfaceTextureCharacteristicStatsEvalType&
      operator= (const SurfaceTextureCharacteristicStatsEvalType& x);

      virtual 
      ~SurfaceTextureCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      RoughnessAverageValueStats_optional RoughnessAverageValueStats_;
    };

    class OrientationCharacteristicStatsEvalType: public ::xsd::qif2::GeometricCharacteristicStatsEvalType
    {
      public:
      // CapabilityCalculationMethod
      //
      typedef ::xsd::qif2::OneSidedCapabilityCalculationEnumType CapabilityCalculationMethod_type;
      typedef ::xsd::cxx::tree::optional< CapabilityCalculationMethod_type > CapabilityCalculationMethod_optional;
      typedef ::xsd::cxx::tree::traits< CapabilityCalculationMethod_type, char > CapabilityCalculationMethod_traits;

      const CapabilityCalculationMethod_optional&
      CapabilityCalculationMethod () const;

      CapabilityCalculationMethod_optional&
      CapabilityCalculationMethod ();

      void
      CapabilityCalculationMethod (const CapabilityCalculationMethod_type& x);

      void
      CapabilityCalculationMethod (const CapabilityCalculationMethod_optional& x);

      void
      CapabilityCalculationMethod (::std::auto_ptr< CapabilityCalculationMethod_type > p);

      // DatumsOkStats
      //
      typedef ::xsd::qif2::StatsPassFailType DatumsOkStats_type;
      typedef ::xsd::cxx::tree::optional< DatumsOkStats_type > DatumsOkStats_optional;
      typedef ::xsd::cxx::tree::traits< DatumsOkStats_type, char > DatumsOkStats_traits;

      const DatumsOkStats_optional&
      DatumsOkStats () const;

      DatumsOkStats_optional&
      DatumsOkStats ();

      void
      DatumsOkStats (const DatumsOkStats_type& x);

      void
      DatumsOkStats (const DatumsOkStats_optional& x);

      void
      DatumsOkStats (::std::auto_ptr< DatumsOkStats_type > p);

      // BonusStats
      //
      typedef ::xsd::qif2::StatsLinearType BonusStats_type;
      typedef ::xsd::cxx::tree::optional< BonusStats_type > BonusStats_optional;
      typedef ::xsd::cxx::tree::traits< BonusStats_type, char > BonusStats_traits;

      const BonusStats_optional&
      BonusStats () const;

      BonusStats_optional&
      BonusStats ();

      void
      BonusStats (const BonusStats_type& x);

      void
      BonusStats (const BonusStats_optional& x);

      void
      BonusStats (::std::auto_ptr< BonusStats_type > p);

      // ReferenceLengthStats
      //
      typedef ::xsd::qif2::StatsLinearType ReferenceLengthStats_type;
      typedef ::xsd::cxx::tree::optional< ReferenceLengthStats_type > ReferenceLengthStats_optional;
      typedef ::xsd::cxx::tree::traits< ReferenceLengthStats_type, char > ReferenceLengthStats_traits;

      const ReferenceLengthStats_optional&
      ReferenceLengthStats () const;

      ReferenceLengthStats_optional&
      ReferenceLengthStats ();

      void
      ReferenceLengthStats (const ReferenceLengthStats_type& x);

      void
      ReferenceLengthStats (const ReferenceLengthStats_optional& x);

      void
      ReferenceLengthStats (::std::auto_ptr< ReferenceLengthStats_type > p);

      // Constructors.
      //
      OrientationCharacteristicStatsEvalType (const Status_type&);

      OrientationCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      OrientationCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      OrientationCharacteristicStatsEvalType (const OrientationCharacteristicStatsEvalType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual OrientationCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OrientationCharacteristicStatsEvalType&
      operator= (const OrientationCharacteristicStatsEvalType& x);

      virtual 
      ~OrientationCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CapabilityCalculationMethod_optional CapabilityCalculationMethod_;
      DatumsOkStats_optional DatumsOkStats_;
      BonusStats_optional BonusStats_;
      ReferenceLengthStats_optional ReferenceLengthStats_;
    };

    class AngularityCharacteristicStatsEvalType: public ::xsd::qif2::OrientationCharacteristicStatsEvalType
    {
      public:
      // Constructors.
      //
      AngularityCharacteristicStatsEvalType (const Status_type&);

      AngularityCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      AngularityCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      AngularityCharacteristicStatsEvalType (const AngularityCharacteristicStatsEvalType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual AngularityCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AngularityCharacteristicStatsEvalType ();
    };

    class PerpendicularityCharacteristicStatsEvalType: public ::xsd::qif2::OrientationCharacteristicStatsEvalType
    {
      public:
      // Constructors.
      //
      PerpendicularityCharacteristicStatsEvalType (const Status_type&);

      PerpendicularityCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      PerpendicularityCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      PerpendicularityCharacteristicStatsEvalType (const PerpendicularityCharacteristicStatsEvalType& x,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      virtual PerpendicularityCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PerpendicularityCharacteristicStatsEvalType ();
    };

    class ParallelismCharacteristicStatsEvalType: public ::xsd::qif2::OrientationCharacteristicStatsEvalType
    {
      public:
      // Constructors.
      //
      ParallelismCharacteristicStatsEvalType (const Status_type&);

      ParallelismCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      ParallelismCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      ParallelismCharacteristicStatsEvalType (const ParallelismCharacteristicStatsEvalType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual ParallelismCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ParallelismCharacteristicStatsEvalType ();
    };

    class FormCharacteristicStatsEvalBaseType: public ::xsd::qif2::GeometricCharacteristicStatsEvalType
    {
      public:
      // CapabilityCalculationMethod
      //
      typedef ::xsd::qif2::OneSidedCapabilityCalculationEnumType CapabilityCalculationMethod_type;
      typedef ::xsd::cxx::tree::optional< CapabilityCalculationMethod_type > CapabilityCalculationMethod_optional;
      typedef ::xsd::cxx::tree::traits< CapabilityCalculationMethod_type, char > CapabilityCalculationMethod_traits;

      const CapabilityCalculationMethod_optional&
      CapabilityCalculationMethod () const;

      CapabilityCalculationMethod_optional&
      CapabilityCalculationMethod ();

      void
      CapabilityCalculationMethod (const CapabilityCalculationMethod_type& x);

      void
      CapabilityCalculationMethod (const CapabilityCalculationMethod_optional& x);

      void
      CapabilityCalculationMethod (::std::auto_ptr< CapabilityCalculationMethod_type > p);

      // Constructors.
      //
      FormCharacteristicStatsEvalBaseType (const Status_type&);

      FormCharacteristicStatsEvalBaseType (::std::auto_ptr< Status_type >);

      FormCharacteristicStatsEvalBaseType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      FormCharacteristicStatsEvalBaseType (const FormCharacteristicStatsEvalBaseType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual FormCharacteristicStatsEvalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FormCharacteristicStatsEvalBaseType&
      operator= (const FormCharacteristicStatsEvalBaseType& x);

      virtual 
      ~FormCharacteristicStatsEvalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CapabilityCalculationMethod_optional CapabilityCalculationMethod_;
    };

    class StraightnessCharacteristicStatsEvalType: public ::xsd::qif2::FormCharacteristicStatsEvalBaseType
    {
      public:
      // MaxStraightnessStats
      //
      typedef ::xsd::qif2::StatsLinearType MaxStraightnessStats_type;
      typedef ::xsd::cxx::tree::optional< MaxStraightnessStats_type > MaxStraightnessStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxStraightnessStats_type, char > MaxStraightnessStats_traits;

      const MaxStraightnessStats_optional&
      MaxStraightnessStats () const;

      MaxStraightnessStats_optional&
      MaxStraightnessStats ();

      void
      MaxStraightnessStats (const MaxStraightnessStats_type& x);

      void
      MaxStraightnessStats (const MaxStraightnessStats_optional& x);

      void
      MaxStraightnessStats (::std::auto_ptr< MaxStraightnessStats_type > p);

      // Constructors.
      //
      StraightnessCharacteristicStatsEvalType (const Status_type&);

      StraightnessCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      StraightnessCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      StraightnessCharacteristicStatsEvalType (const StraightnessCharacteristicStatsEvalType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual StraightnessCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StraightnessCharacteristicStatsEvalType&
      operator= (const StraightnessCharacteristicStatsEvalType& x);

      virtual 
      ~StraightnessCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      MaxStraightnessStats_optional MaxStraightnessStats_;
    };

    class FlatnessCharacteristicStatsEvalType: public ::xsd::qif2::FormCharacteristicStatsEvalBaseType
    {
      public:
      // MaxFlatnessStats
      //
      typedef ::xsd::qif2::StatsLinearType MaxFlatnessStats_type;
      typedef ::xsd::cxx::tree::optional< MaxFlatnessStats_type > MaxFlatnessStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxFlatnessStats_type, char > MaxFlatnessStats_traits;

      const MaxFlatnessStats_optional&
      MaxFlatnessStats () const;

      MaxFlatnessStats_optional&
      MaxFlatnessStats ();

      void
      MaxFlatnessStats (const MaxFlatnessStats_type& x);

      void
      MaxFlatnessStats (const MaxFlatnessStats_optional& x);

      void
      MaxFlatnessStats (::std::auto_ptr< MaxFlatnessStats_type > p);

      // Constructors.
      //
      FlatnessCharacteristicStatsEvalType (const Status_type&);

      FlatnessCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      FlatnessCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      FlatnessCharacteristicStatsEvalType (const FlatnessCharacteristicStatsEvalType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual FlatnessCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FlatnessCharacteristicStatsEvalType&
      operator= (const FlatnessCharacteristicStatsEvalType& x);

      virtual 
      ~FlatnessCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      MaxFlatnessStats_optional MaxFlatnessStats_;
    };

    class CircularityCharacteristicStatsEvalType: public ::xsd::qif2::FormCharacteristicStatsEvalBaseType
    {
      public:
      // MaxCircularityStats
      //
      typedef ::xsd::qif2::StatsLinearType MaxCircularityStats_type;
      typedef ::xsd::cxx::tree::optional< MaxCircularityStats_type > MaxCircularityStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxCircularityStats_type, char > MaxCircularityStats_traits;

      const MaxCircularityStats_optional&
      MaxCircularityStats () const;

      MaxCircularityStats_optional&
      MaxCircularityStats ();

      void
      MaxCircularityStats (const MaxCircularityStats_type& x);

      void
      MaxCircularityStats (const MaxCircularityStats_optional& x);

      void
      MaxCircularityStats (::std::auto_ptr< MaxCircularityStats_type > p);

      // Constructors.
      //
      CircularityCharacteristicStatsEvalType (const Status_type&);

      CircularityCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      CircularityCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      CircularityCharacteristicStatsEvalType (const CircularityCharacteristicStatsEvalType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual CircularityCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CircularityCharacteristicStatsEvalType&
      operator= (const CircularityCharacteristicStatsEvalType& x);

      virtual 
      ~CircularityCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      MaxCircularityStats_optional MaxCircularityStats_;
    };

    class CylindricityCharacteristicStatsEvalType: public ::xsd::qif2::FormCharacteristicStatsEvalBaseType
    {
      public:
      // MaxCylindricityStats
      //
      typedef ::xsd::qif2::StatsLinearType MaxCylindricityStats_type;
      typedef ::xsd::cxx::tree::optional< MaxCylindricityStats_type > MaxCylindricityStats_optional;
      typedef ::xsd::cxx::tree::traits< MaxCylindricityStats_type, char > MaxCylindricityStats_traits;

      const MaxCylindricityStats_optional&
      MaxCylindricityStats () const;

      MaxCylindricityStats_optional&
      MaxCylindricityStats ();

      void
      MaxCylindricityStats (const MaxCylindricityStats_type& x);

      void
      MaxCylindricityStats (const MaxCylindricityStats_optional& x);

      void
      MaxCylindricityStats (::std::auto_ptr< MaxCylindricityStats_type > p);

      // Constructors.
      //
      CylindricityCharacteristicStatsEvalType (const Status_type&);

      CylindricityCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      CylindricityCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      CylindricityCharacteristicStatsEvalType (const CylindricityCharacteristicStatsEvalType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual CylindricityCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CylindricityCharacteristicStatsEvalType&
      operator= (const CylindricityCharacteristicStatsEvalType& x);

      virtual 
      ~CylindricityCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      MaxCylindricityStats_optional MaxCylindricityStats_;
    };

    class LocationCharacteristicStatsEvalType: public ::xsd::qif2::GeometricCharacteristicStatsEvalType
    {
      public:
      // DatumsOkStats
      //
      typedef ::xsd::qif2::StatsPassFailType DatumsOkStats_type;
      typedef ::xsd::cxx::tree::optional< DatumsOkStats_type > DatumsOkStats_optional;
      typedef ::xsd::cxx::tree::traits< DatumsOkStats_type, char > DatumsOkStats_traits;

      const DatumsOkStats_optional&
      DatumsOkStats () const;

      DatumsOkStats_optional&
      DatumsOkStats ();

      void
      DatumsOkStats (const DatumsOkStats_type& x);

      void
      DatumsOkStats (const DatumsOkStats_optional& x);

      void
      DatumsOkStats (::std::auto_ptr< DatumsOkStats_type > p);

      // Constructors.
      //
      LocationCharacteristicStatsEvalType (const Status_type&);

      LocationCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      LocationCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      LocationCharacteristicStatsEvalType (const LocationCharacteristicStatsEvalType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual LocationCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LocationCharacteristicStatsEvalType&
      operator= (const LocationCharacteristicStatsEvalType& x);

      virtual 
      ~LocationCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      DatumsOkStats_optional DatumsOkStats_;
    };

    class PositionCharacteristicStatsEvalType: public ::xsd::qif2::LocationCharacteristicStatsEvalType
    {
      public:
      // CapabilityCalculationMethod
      //
      typedef ::xsd::qif2::PositionCapabilityCalculationEnumType CapabilityCalculationMethod_type;
      typedef ::xsd::cxx::tree::optional< CapabilityCalculationMethod_type > CapabilityCalculationMethod_optional;
      typedef ::xsd::cxx::tree::traits< CapabilityCalculationMethod_type, char > CapabilityCalculationMethod_traits;

      const CapabilityCalculationMethod_optional&
      CapabilityCalculationMethod () const;

      CapabilityCalculationMethod_optional&
      CapabilityCalculationMethod ();

      void
      CapabilityCalculationMethod (const CapabilityCalculationMethod_type& x);

      void
      CapabilityCalculationMethod (const CapabilityCalculationMethod_optional& x);

      void
      CapabilityCalculationMethod (::std::auto_ptr< CapabilityCalculationMethod_type > p);

      // CompositeSegmentsStats
      //
      typedef ::xsd::qif2::CompositeSegmentsPositionStatsEvalType CompositeSegmentsStats_type;
      typedef ::xsd::cxx::tree::optional< CompositeSegmentsStats_type > CompositeSegmentsStats_optional;
      typedef ::xsd::cxx::tree::traits< CompositeSegmentsStats_type, char > CompositeSegmentsStats_traits;

      const CompositeSegmentsStats_optional&
      CompositeSegmentsStats () const;

      CompositeSegmentsStats_optional&
      CompositeSegmentsStats ();

      void
      CompositeSegmentsStats (const CompositeSegmentsStats_type& x);

      void
      CompositeSegmentsStats (const CompositeSegmentsStats_optional& x);

      void
      CompositeSegmentsStats (::std::auto_ptr< CompositeSegmentsStats_type > p);

      // Constructors.
      //
      PositionCharacteristicStatsEvalType (const Status_type&);

      PositionCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      PositionCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      PositionCharacteristicStatsEvalType (const PositionCharacteristicStatsEvalType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual PositionCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PositionCharacteristicStatsEvalType&
      operator= (const PositionCharacteristicStatsEvalType& x);

      virtual 
      ~PositionCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CapabilityCalculationMethod_optional CapabilityCalculationMethod_;
      CompositeSegmentsStats_optional CompositeSegmentsStats_;
    };

    class AngularCoordinateCharacteristicStatsEvalType: public ::xsd::qif2::AngularCharacteristicStatsEvalType
    {
      public:
      // Constructors.
      //
      AngularCoordinateCharacteristicStatsEvalType (const Status_type&);

      AngularCoordinateCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      AngularCoordinateCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

      AngularCoordinateCharacteristicStatsEvalType (const AngularCoordinateCharacteristicStatsEvalType& x,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

      virtual AngularCoordinateCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AngularCoordinateCharacteristicStatsEvalType ();
    };

    class AngleCharacteristicStatsEvalType: public ::xsd::qif2::AngularCharacteristicStatsEvalType
    {
      public:
      // Constructors.
      //
      AngleCharacteristicStatsEvalType (const Status_type&);

      AngleCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      AngleCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      AngleCharacteristicStatsEvalType (const AngleCharacteristicStatsEvalType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual AngleCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AngleCharacteristicStatsEvalType ();
    };

    class AngleFromCharacteristicStatsEvalType: public ::xsd::qif2::AngularCharacteristicStatsEvalType
    {
      public:
      // Constructors.
      //
      AngleFromCharacteristicStatsEvalType (const Status_type&);

      AngleFromCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      AngleFromCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      AngleFromCharacteristicStatsEvalType (const AngleFromCharacteristicStatsEvalType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual AngleFromCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AngleFromCharacteristicStatsEvalType ();
    };

    class AngleBetweenCharacteristicStatsEvalType: public ::xsd::qif2::AngularCharacteristicStatsEvalType
    {
      public:
      // Constructors.
      //
      AngleBetweenCharacteristicStatsEvalType (const Status_type&);

      AngleBetweenCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      AngleBetweenCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      AngleBetweenCharacteristicStatsEvalType (const AngleBetweenCharacteristicStatsEvalType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual AngleBetweenCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AngleBetweenCharacteristicStatsEvalType ();
    };

    class LinearCoordinateCharacteristicStatsEvalType: public ::xsd::qif2::LinearCharacteristicStatsEvalType
    {
      public:
      // Constructors.
      //
      LinearCoordinateCharacteristicStatsEvalType (const Status_type&);

      LinearCoordinateCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      LinearCoordinateCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      LinearCoordinateCharacteristicStatsEvalType (const LinearCoordinateCharacteristicStatsEvalType& x,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      virtual LinearCoordinateCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~LinearCoordinateCharacteristicStatsEvalType ();
    };

    class CurveLengthCharacteristicStatsEvalType: public ::xsd::qif2::LinearCharacteristicStatsEvalType
    {
      public:
      // Constructors.
      //
      CurveLengthCharacteristicStatsEvalType (const Status_type&);

      CurveLengthCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      CurveLengthCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      CurveLengthCharacteristicStatsEvalType (const CurveLengthCharacteristicStatsEvalType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual CurveLengthCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CurveLengthCharacteristicStatsEvalType ();
    };

    class DiameterCharacteristicStatsEvalType: public ::xsd::qif2::LinearCharacteristicStatsEvalType
    {
      public:
      // Constructors.
      //
      DiameterCharacteristicStatsEvalType (const Status_type&);

      DiameterCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      DiameterCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      DiameterCharacteristicStatsEvalType (const DiameterCharacteristicStatsEvalType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual DiameterCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~DiameterCharacteristicStatsEvalType ();
    };

    class LengthCharacteristicStatsEvalType: public ::xsd::qif2::LinearCharacteristicStatsEvalType
    {
      public:
      // Constructors.
      //
      LengthCharacteristicStatsEvalType (const Status_type&);

      LengthCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      LengthCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      LengthCharacteristicStatsEvalType (const LengthCharacteristicStatsEvalType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual LengthCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~LengthCharacteristicStatsEvalType ();
    };

    class WidthCharacteristicStatsEvalType: public ::xsd::qif2::LinearCharacteristicStatsEvalType
    {
      public:
      // Constructors.
      //
      WidthCharacteristicStatsEvalType (const Status_type&);

      WidthCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      WidthCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      WidthCharacteristicStatsEvalType (const WidthCharacteristicStatsEvalType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual WidthCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~WidthCharacteristicStatsEvalType ();
    };

    class HeightCharacteristicStatsEvalType: public ::xsd::qif2::LinearCharacteristicStatsEvalType
    {
      public:
      // Constructors.
      //
      HeightCharacteristicStatsEvalType (const Status_type&);

      HeightCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      HeightCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      HeightCharacteristicStatsEvalType (const HeightCharacteristicStatsEvalType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual HeightCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~HeightCharacteristicStatsEvalType ();
    };

    class DepthCharacteristicStatsEvalType: public ::xsd::qif2::LinearCharacteristicStatsEvalType
    {
      public:
      // Constructors.
      //
      DepthCharacteristicStatsEvalType (const Status_type&);

      DepthCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      DepthCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      DepthCharacteristicStatsEvalType (const DepthCharacteristicStatsEvalType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual DepthCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~DepthCharacteristicStatsEvalType ();
    };

    class ThicknessCharacteristicStatsEvalType: public ::xsd::qif2::LinearCharacteristicStatsEvalType
    {
      public:
      // Constructors.
      //
      ThicknessCharacteristicStatsEvalType (const Status_type&);

      ThicknessCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      ThicknessCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      ThicknessCharacteristicStatsEvalType (const ThicknessCharacteristicStatsEvalType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual ThicknessCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ThicknessCharacteristicStatsEvalType ();
    };

    class SquareCharacteristicStatsEvalType: public ::xsd::qif2::LinearCharacteristicStatsEvalType
    {
      public:
      // Constructors.
      //
      SquareCharacteristicStatsEvalType (const Status_type&);

      SquareCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      SquareCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      SquareCharacteristicStatsEvalType (const SquareCharacteristicStatsEvalType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual SquareCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SquareCharacteristicStatsEvalType ();
    };

    class DistanceFromCharacteristicStatsEvalType: public ::xsd::qif2::LinearCharacteristicStatsEvalType
    {
      public:
      // Constructors.
      //
      DistanceFromCharacteristicStatsEvalType (const Status_type&);

      DistanceFromCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      DistanceFromCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      DistanceFromCharacteristicStatsEvalType (const DistanceFromCharacteristicStatsEvalType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual DistanceFromCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~DistanceFromCharacteristicStatsEvalType ();
    };

    class DistanceBetweenCharacteristicStatsEvalType: public ::xsd::qif2::LinearCharacteristicStatsEvalType
    {
      public:
      // Constructors.
      //
      DistanceBetweenCharacteristicStatsEvalType (const Status_type&);

      DistanceBetweenCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      DistanceBetweenCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      DistanceBetweenCharacteristicStatsEvalType (const DistanceBetweenCharacteristicStatsEvalType& x,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      virtual DistanceBetweenCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~DistanceBetweenCharacteristicStatsEvalType ();
    };

    class RadiusCharacteristicStatsEvalType: public ::xsd::qif2::LinearCharacteristicStatsEvalType
    {
      public:
      // Constructors.
      //
      RadiusCharacteristicStatsEvalType (const Status_type&);

      RadiusCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      RadiusCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      RadiusCharacteristicStatsEvalType (const RadiusCharacteristicStatsEvalType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual RadiusCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~RadiusCharacteristicStatsEvalType ();
    };

    class ChordCharacteristicStatsEvalType: public ::xsd::qif2::LinearCharacteristicStatsEvalType
    {
      public:
      // Constructors.
      //
      ChordCharacteristicStatsEvalType (const Status_type&);

      ChordCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      ChordCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      ChordCharacteristicStatsEvalType (const ChordCharacteristicStatsEvalType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual ChordCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ChordCharacteristicStatsEvalType ();
    };

    class RunoutCharacteristicStatsEvalBaseType: public ::xsd::qif2::GeometricCharacteristicStatsEvalType
    {
      public:
      // CapabilityCalculationMethod
      //
      typedef ::xsd::qif2::OneSidedCapabilityCalculationEnumType CapabilityCalculationMethod_type;
      typedef ::xsd::cxx::tree::optional< CapabilityCalculationMethod_type > CapabilityCalculationMethod_optional;
      typedef ::xsd::cxx::tree::traits< CapabilityCalculationMethod_type, char > CapabilityCalculationMethod_traits;

      const CapabilityCalculationMethod_optional&
      CapabilityCalculationMethod () const;

      CapabilityCalculationMethod_optional&
      CapabilityCalculationMethod ();

      void
      CapabilityCalculationMethod (const CapabilityCalculationMethod_type& x);

      void
      CapabilityCalculationMethod (const CapabilityCalculationMethod_optional& x);

      void
      CapabilityCalculationMethod (::std::auto_ptr< CapabilityCalculationMethod_type > p);

      // DatumsOkStats
      //
      typedef ::xsd::qif2::StatsPassFailType DatumsOkStats_type;
      typedef ::xsd::cxx::tree::optional< DatumsOkStats_type > DatumsOkStats_optional;
      typedef ::xsd::cxx::tree::traits< DatumsOkStats_type, char > DatumsOkStats_traits;

      const DatumsOkStats_optional&
      DatumsOkStats () const;

      DatumsOkStats_optional&
      DatumsOkStats ();

      void
      DatumsOkStats (const DatumsOkStats_type& x);

      void
      DatumsOkStats (const DatumsOkStats_optional& x);

      void
      DatumsOkStats (::std::auto_ptr< DatumsOkStats_type > p);

      // Constructors.
      //
      RunoutCharacteristicStatsEvalBaseType (const Status_type&);

      RunoutCharacteristicStatsEvalBaseType (::std::auto_ptr< Status_type >);

      RunoutCharacteristicStatsEvalBaseType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      RunoutCharacteristicStatsEvalBaseType (const RunoutCharacteristicStatsEvalBaseType& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

      virtual RunoutCharacteristicStatsEvalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      RunoutCharacteristicStatsEvalBaseType&
      operator= (const RunoutCharacteristicStatsEvalBaseType& x);

      virtual 
      ~RunoutCharacteristicStatsEvalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CapabilityCalculationMethod_optional CapabilityCalculationMethod_;
      DatumsOkStats_optional DatumsOkStats_;
    };

    class CircularRunoutCharacteristicStatsEvalType: public ::xsd::qif2::RunoutCharacteristicStatsEvalBaseType
    {
      public:
      // Constructors.
      //
      CircularRunoutCharacteristicStatsEvalType (const Status_type&);

      CircularRunoutCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      CircularRunoutCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      CircularRunoutCharacteristicStatsEvalType (const CircularRunoutCharacteristicStatsEvalType& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      virtual CircularRunoutCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CircularRunoutCharacteristicStatsEvalType ();
    };

    class TotalRunoutCharacteristicStatsEvalType: public ::xsd::qif2::RunoutCharacteristicStatsEvalBaseType
    {
      public:
      // Constructors.
      //
      TotalRunoutCharacteristicStatsEvalType (const Status_type&);

      TotalRunoutCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      TotalRunoutCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      TotalRunoutCharacteristicStatsEvalType (const TotalRunoutCharacteristicStatsEvalType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual TotalRunoutCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~TotalRunoutCharacteristicStatsEvalType ();
    };

    class ConcentricityCharacteristicStatsEvalType: public ::xsd::qif2::LocationCharacteristicStatsEvalType
    {
      public:
      // CapabilityCalculationMethod
      //
      typedef ::xsd::qif2::OneSidedCapabilityCalculationEnumType CapabilityCalculationMethod_type;
      typedef ::xsd::cxx::tree::optional< CapabilityCalculationMethod_type > CapabilityCalculationMethod_optional;
      typedef ::xsd::cxx::tree::traits< CapabilityCalculationMethod_type, char > CapabilityCalculationMethod_traits;

      const CapabilityCalculationMethod_optional&
      CapabilityCalculationMethod () const;

      CapabilityCalculationMethod_optional&
      CapabilityCalculationMethod ();

      void
      CapabilityCalculationMethod (const CapabilityCalculationMethod_type& x);

      void
      CapabilityCalculationMethod (const CapabilityCalculationMethod_optional& x);

      void
      CapabilityCalculationMethod (::std::auto_ptr< CapabilityCalculationMethod_type > p);

      // Constructors.
      //
      ConcentricityCharacteristicStatsEvalType (const Status_type&);

      ConcentricityCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      ConcentricityCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      ConcentricityCharacteristicStatsEvalType (const ConcentricityCharacteristicStatsEvalType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual ConcentricityCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConcentricityCharacteristicStatsEvalType&
      operator= (const ConcentricityCharacteristicStatsEvalType& x);

      virtual 
      ~ConcentricityCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CapabilityCalculationMethod_optional CapabilityCalculationMethod_;
    };

    class SymmetryCharacteristicStatsEvalType: public ::xsd::qif2::LocationCharacteristicStatsEvalType
    {
      public:
      // CapabilityCalculationMethod
      //
      typedef ::xsd::qif2::OneSidedCapabilityCalculationEnumType CapabilityCalculationMethod_type;
      typedef ::xsd::cxx::tree::optional< CapabilityCalculationMethod_type > CapabilityCalculationMethod_optional;
      typedef ::xsd::cxx::tree::traits< CapabilityCalculationMethod_type, char > CapabilityCalculationMethod_traits;

      const CapabilityCalculationMethod_optional&
      CapabilityCalculationMethod () const;

      CapabilityCalculationMethod_optional&
      CapabilityCalculationMethod ();

      void
      CapabilityCalculationMethod (const CapabilityCalculationMethod_type& x);

      void
      CapabilityCalculationMethod (const CapabilityCalculationMethod_optional& x);

      void
      CapabilityCalculationMethod (::std::auto_ptr< CapabilityCalculationMethod_type > p);

      // CompositeSegmentsStats
      //
      typedef ::xsd::qif2::CompositeSegmentsSymmetryStatsEvalType CompositeSegmentsStats_type;
      typedef ::xsd::cxx::tree::optional< CompositeSegmentsStats_type > CompositeSegmentsStats_optional;
      typedef ::xsd::cxx::tree::traits< CompositeSegmentsStats_type, char > CompositeSegmentsStats_traits;

      const CompositeSegmentsStats_optional&
      CompositeSegmentsStats () const;

      CompositeSegmentsStats_optional&
      CompositeSegmentsStats ();

      void
      CompositeSegmentsStats (const CompositeSegmentsStats_type& x);

      void
      CompositeSegmentsStats (const CompositeSegmentsStats_optional& x);

      void
      CompositeSegmentsStats (::std::auto_ptr< CompositeSegmentsStats_type > p);

      // Constructors.
      //
      SymmetryCharacteristicStatsEvalType (const Status_type&);

      SymmetryCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      SymmetryCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      SymmetryCharacteristicStatsEvalType (const SymmetryCharacteristicStatsEvalType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual SymmetryCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SymmetryCharacteristicStatsEvalType&
      operator= (const SymmetryCharacteristicStatsEvalType& x);

      virtual 
      ~SymmetryCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CapabilityCalculationMethod_optional CapabilityCalculationMethod_;
      CompositeSegmentsStats_optional CompositeSegmentsStats_;
    };

    class PointDeviationStatsEvalType: public ::xml_schema::type
    {
      public:
      // MeasurePointActualIds
      //
      typedef ::xsd::qif2::StatsArrayIdType MeasurePointActualIds_type;
      typedef ::xsd::cxx::tree::traits< MeasurePointActualIds_type, char > MeasurePointActualIds_traits;

      const MeasurePointActualIds_type&
      MeasurePointActualIds () const;

      MeasurePointActualIds_type&
      MeasurePointActualIds ();

      void
      MeasurePointActualIds (const MeasurePointActualIds_type& x);

      void
      MeasurePointActualIds (::std::auto_ptr< MeasurePointActualIds_type > p);

      // DeviationStats
      //
      typedef ::xsd::qif2::StatsLinearType DeviationStats_type;
      typedef ::xsd::cxx::tree::traits< DeviationStats_type, char > DeviationStats_traits;

      const DeviationStats_type&
      DeviationStats () const;

      DeviationStats_type&
      DeviationStats ();

      void
      DeviationStats (const DeviationStats_type& x);

      void
      DeviationStats (::std::auto_ptr< DeviationStats_type > p);

      // Constructors.
      //
      PointDeviationStatsEvalType (const MeasurePointActualIds_type&,
                                   const DeviationStats_type&);

      PointDeviationStatsEvalType (::std::auto_ptr< MeasurePointActualIds_type >,
                                   ::std::auto_ptr< DeviationStats_type >);

      PointDeviationStatsEvalType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      PointDeviationStatsEvalType (const PointDeviationStatsEvalType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual PointDeviationStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDeviationStatsEvalType&
      operator= (const PointDeviationStatsEvalType& x);

      virtual 
      ~PointDeviationStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< MeasurePointActualIds_type > MeasurePointActualIds_;
      ::xsd::cxx::tree::one< DeviationStats_type > DeviationStats_;
    };

    class PointDeviationsStatsEvalType: public ::xml_schema::type
    {
      public:
      // PointDeviationStats
      //
      typedef ::xsd::qif2::PointDeviationStatsEvalType PointDeviationStats_type;
      typedef ::xsd::cxx::tree::sequence< PointDeviationStats_type > PointDeviationStats_sequence;
      typedef PointDeviationStats_sequence::iterator PointDeviationStats_iterator;
      typedef PointDeviationStats_sequence::const_iterator PointDeviationStats_const_iterator;
      typedef ::xsd::cxx::tree::traits< PointDeviationStats_type, char > PointDeviationStats_traits;

      const PointDeviationStats_sequence&
      PointDeviationStats () const;

      PointDeviationStats_sequence&
      PointDeviationStats ();

      void
      PointDeviationStats (const PointDeviationStats_sequence& s);

      // Constructors.
      //
      PointDeviationsStatsEvalType ();

      PointDeviationsStatsEvalType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      PointDeviationsStatsEvalType (const PointDeviationsStatsEvalType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual PointDeviationsStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointDeviationsStatsEvalType&
      operator= (const PointDeviationsStatsEvalType& x);

      virtual 
      ~PointDeviationsStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      PointDeviationStats_sequence PointDeviationStats_;
    };

    class ProfileCharacteristicStatsEvalBaseType: public ::xsd::qif2::GeometricCharacteristicStatsEvalType
    {
      public:
      // CapabilityCalculationMethod
      //
      typedef ::xsd::qif2::OneSidedCapabilityCalculationEnumType CapabilityCalculationMethod_type;
      typedef ::xsd::cxx::tree::optional< CapabilityCalculationMethod_type > CapabilityCalculationMethod_optional;
      typedef ::xsd::cxx::tree::traits< CapabilityCalculationMethod_type, char > CapabilityCalculationMethod_traits;

      const CapabilityCalculationMethod_optional&
      CapabilityCalculationMethod () const;

      CapabilityCalculationMethod_optional&
      CapabilityCalculationMethod ();

      void
      CapabilityCalculationMethod (const CapabilityCalculationMethod_type& x);

      void
      CapabilityCalculationMethod (const CapabilityCalculationMethod_optional& x);

      void
      CapabilityCalculationMethod (::std::auto_ptr< CapabilityCalculationMethod_type > p);

      // WorstPositiveDeviationStats
      //
      typedef ::xsd::qif2::StatsLinearType WorstPositiveDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< WorstPositiveDeviationStats_type > WorstPositiveDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< WorstPositiveDeviationStats_type, char > WorstPositiveDeviationStats_traits;

      const WorstPositiveDeviationStats_optional&
      WorstPositiveDeviationStats () const;

      WorstPositiveDeviationStats_optional&
      WorstPositiveDeviationStats ();

      void
      WorstPositiveDeviationStats (const WorstPositiveDeviationStats_type& x);

      void
      WorstPositiveDeviationStats (const WorstPositiveDeviationStats_optional& x);

      void
      WorstPositiveDeviationStats (::std::auto_ptr< WorstPositiveDeviationStats_type > p);

      // WorstNegativeDeviationStats
      //
      typedef ::xsd::qif2::StatsLinearType WorstNegativeDeviationStats_type;
      typedef ::xsd::cxx::tree::optional< WorstNegativeDeviationStats_type > WorstNegativeDeviationStats_optional;
      typedef ::xsd::cxx::tree::traits< WorstNegativeDeviationStats_type, char > WorstNegativeDeviationStats_traits;

      const WorstNegativeDeviationStats_optional&
      WorstNegativeDeviationStats () const;

      WorstNegativeDeviationStats_optional&
      WorstNegativeDeviationStats ();

      void
      WorstNegativeDeviationStats (const WorstNegativeDeviationStats_type& x);

      void
      WorstNegativeDeviationStats (const WorstNegativeDeviationStats_optional& x);

      void
      WorstNegativeDeviationStats (::std::auto_ptr< WorstNegativeDeviationStats_type > p);

      // PointDeviationsStats
      //
      typedef ::xsd::qif2::PointDeviationsStatsEvalType PointDeviationsStats_type;
      typedef ::xsd::cxx::tree::optional< PointDeviationsStats_type > PointDeviationsStats_optional;
      typedef ::xsd::cxx::tree::traits< PointDeviationsStats_type, char > PointDeviationsStats_traits;

      const PointDeviationsStats_optional&
      PointDeviationsStats () const;

      PointDeviationsStats_optional&
      PointDeviationsStats ();

      void
      PointDeviationsStats (const PointDeviationsStats_type& x);

      void
      PointDeviationsStats (const PointDeviationsStats_optional& x);

      void
      PointDeviationsStats (::std::auto_ptr< PointDeviationsStats_type > p);

      // DatumsOkStats
      //
      typedef ::xsd::qif2::StatsPassFailType DatumsOkStats_type;
      typedef ::xsd::cxx::tree::optional< DatumsOkStats_type > DatumsOkStats_optional;
      typedef ::xsd::cxx::tree::traits< DatumsOkStats_type, char > DatumsOkStats_traits;

      const DatumsOkStats_optional&
      DatumsOkStats () const;

      DatumsOkStats_optional&
      DatumsOkStats ();

      void
      DatumsOkStats (const DatumsOkStats_type& x);

      void
      DatumsOkStats (const DatumsOkStats_optional& x);

      void
      DatumsOkStats (::std::auto_ptr< DatumsOkStats_type > p);

      // CompositeSegmentsStats
      //
      typedef ::xsd::qif2::CompositeSegmentsProfileStatsEvalType CompositeSegmentsStats_type;
      typedef ::xsd::cxx::tree::optional< CompositeSegmentsStats_type > CompositeSegmentsStats_optional;
      typedef ::xsd::cxx::tree::traits< CompositeSegmentsStats_type, char > CompositeSegmentsStats_traits;

      const CompositeSegmentsStats_optional&
      CompositeSegmentsStats () const;

      CompositeSegmentsStats_optional&
      CompositeSegmentsStats ();

      void
      CompositeSegmentsStats (const CompositeSegmentsStats_type& x);

      void
      CompositeSegmentsStats (const CompositeSegmentsStats_optional& x);

      void
      CompositeSegmentsStats (::std::auto_ptr< CompositeSegmentsStats_type > p);

      // Constructors.
      //
      ProfileCharacteristicStatsEvalBaseType (const Status_type&);

      ProfileCharacteristicStatsEvalBaseType (::std::auto_ptr< Status_type >);

      ProfileCharacteristicStatsEvalBaseType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      ProfileCharacteristicStatsEvalBaseType (const ProfileCharacteristicStatsEvalBaseType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual ProfileCharacteristicStatsEvalBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ProfileCharacteristicStatsEvalBaseType&
      operator= (const ProfileCharacteristicStatsEvalBaseType& x);

      virtual 
      ~ProfileCharacteristicStatsEvalBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CapabilityCalculationMethod_optional CapabilityCalculationMethod_;
      WorstPositiveDeviationStats_optional WorstPositiveDeviationStats_;
      WorstNegativeDeviationStats_optional WorstNegativeDeviationStats_;
      PointDeviationsStats_optional PointDeviationsStats_;
      DatumsOkStats_optional DatumsOkStats_;
      CompositeSegmentsStats_optional CompositeSegmentsStats_;
    };

    class LineProfileCharacteristicStatsEvalType: public ::xsd::qif2::ProfileCharacteristicStatsEvalBaseType
    {
      public:
      // Constructors.
      //
      LineProfileCharacteristicStatsEvalType (const Status_type&);

      LineProfileCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      LineProfileCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      LineProfileCharacteristicStatsEvalType (const LineProfileCharacteristicStatsEvalType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual LineProfileCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~LineProfileCharacteristicStatsEvalType ();
    };

    class PointProfileCharacteristicStatsEvalType: public ::xsd::qif2::ProfileCharacteristicStatsEvalBaseType
    {
      public:
      // Constructors.
      //
      PointProfileCharacteristicStatsEvalType (const Status_type&);

      PointProfileCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      PointProfileCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      PointProfileCharacteristicStatsEvalType (const PointProfileCharacteristicStatsEvalType& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

      virtual PointProfileCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PointProfileCharacteristicStatsEvalType ();
    };

    class SurfaceProfileCharacteristicStatsEvalType: public ::xsd::qif2::ProfileCharacteristicStatsEvalBaseType
    {
      public:
      // Constructors.
      //
      SurfaceProfileCharacteristicStatsEvalType (const Status_type&);

      SurfaceProfileCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      SurfaceProfileCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      SurfaceProfileCharacteristicStatsEvalType (const SurfaceProfileCharacteristicStatsEvalType& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

      virtual SurfaceProfileCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SurfaceProfileCharacteristicStatsEvalType ();
    };

    class SurfaceProfileNonUniformCharacteristicStatsEvalType: public ::xsd::qif2::ProfileCharacteristicStatsEvalBaseType
    {
      public:
      // Constructors.
      //
      SurfaceProfileNonUniformCharacteristicStatsEvalType (const Status_type&);

      SurfaceProfileNonUniformCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      SurfaceProfileNonUniformCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                           ::xml_schema::flags f = 0,
                                                           ::xml_schema::container* c = 0);

      SurfaceProfileNonUniformCharacteristicStatsEvalType (const SurfaceProfileNonUniformCharacteristicStatsEvalType& x,
                                                           ::xml_schema::flags f = 0,
                                                           ::xml_schema::container* c = 0);

      virtual SurfaceProfileNonUniformCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SurfaceProfileNonUniformCharacteristicStatsEvalType ();
    };

    class ThreadCharacteristicStatsEvalType: public ::xsd::qif2::CharacteristicStatsEvalBaseType
    {
      public:
      // ThreadStats
      //
      typedef ::xsd::qif2::StatsPassFailType ThreadStats_type;
      typedef ::xsd::cxx::tree::optional< ThreadStats_type > ThreadStats_optional;
      typedef ::xsd::cxx::tree::traits< ThreadStats_type, char > ThreadStats_traits;

      const ThreadStats_optional&
      ThreadStats () const;

      ThreadStats_optional&
      ThreadStats ();

      void
      ThreadStats (const ThreadStats_type& x);

      void
      ThreadStats (const ThreadStats_optional& x);

      void
      ThreadStats (::std::auto_ptr< ThreadStats_type > p);

      // PitchDiameterStats
      //
      typedef ::xsd::qif2::StatsLinearType PitchDiameterStats_type;
      typedef ::xsd::cxx::tree::optional< PitchDiameterStats_type > PitchDiameterStats_optional;
      typedef ::xsd::cxx::tree::traits< PitchDiameterStats_type, char > PitchDiameterStats_traits;

      const PitchDiameterStats_optional&
      PitchDiameterStats () const;

      PitchDiameterStats_optional&
      PitchDiameterStats ();

      void
      PitchDiameterStats (const PitchDiameterStats_type& x);

      void
      PitchDiameterStats (const PitchDiameterStats_optional& x);

      void
      PitchDiameterStats (::std::auto_ptr< PitchDiameterStats_type > p);

      // FunctionalSizeStats
      //
      typedef ::xsd::qif2::StatsLinearType FunctionalSizeStats_type;
      typedef ::xsd::cxx::tree::optional< FunctionalSizeStats_type > FunctionalSizeStats_optional;
      typedef ::xsd::cxx::tree::traits< FunctionalSizeStats_type, char > FunctionalSizeStats_traits;

      const FunctionalSizeStats_optional&
      FunctionalSizeStats () const;

      FunctionalSizeStats_optional&
      FunctionalSizeStats ();

      void
      FunctionalSizeStats (const FunctionalSizeStats_type& x);

      void
      FunctionalSizeStats (const FunctionalSizeStats_optional& x);

      void
      FunctionalSizeStats (::std::auto_ptr< FunctionalSizeStats_type > p);

      // Constructors.
      //
      ThreadCharacteristicStatsEvalType (const Status_type&);

      ThreadCharacteristicStatsEvalType (::std::auto_ptr< Status_type >);

      ThreadCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      ThreadCharacteristicStatsEvalType (const ThreadCharacteristicStatsEvalType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual ThreadCharacteristicStatsEvalType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ThreadCharacteristicStatsEvalType&
      operator= (const ThreadCharacteristicStatsEvalType& x);

      virtual 
      ~ThreadCharacteristicStatsEvalType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ThreadStats_optional ThreadStats_;
      PitchDiameterStats_optional PitchDiameterStats_;
      FunctionalSizeStats_optional FunctionalSizeStats_;
    };

    class CharacteristicsStatsType: public ::xml_schema::type
    {
      public:
      // CharacteristicStats
      //
      typedef ::xsd::qif2::CharacteristicStatsEvalBaseType CharacteristicStats_type;
      typedef ::xsd::cxx::tree::sequence< CharacteristicStats_type > CharacteristicStats_sequence;
      typedef CharacteristicStats_sequence::iterator CharacteristicStats_iterator;
      typedef CharacteristicStats_sequence::const_iterator CharacteristicStats_const_iterator;
      typedef ::xsd::cxx::tree::traits< CharacteristicStats_type, char > CharacteristicStats_traits;

      const CharacteristicStats_sequence&
      CharacteristicStats () const;

      CharacteristicStats_sequence&
      CharacteristicStats ();

      void
      CharacteristicStats (const CharacteristicStats_sequence& s);

      // Constructors.
      //
      CharacteristicsStatsType ();

      CharacteristicsStatsType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      CharacteristicsStatsType (const CharacteristicsStatsType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual CharacteristicsStatsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CharacteristicsStatsType&
      operator= (const CharacteristicsStatsType& x);

      virtual 
      ~CharacteristicsStatsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CharacteristicStats_sequence CharacteristicStats_;
    };

    class AverageFeatureType: public ::xml_schema::type
    {
      public:
      // FeatureActual
      //
      typedef ::xsd::qif2::FeatureActualBaseType FeatureActual_type;
      typedef ::xsd::cxx::tree::traits< FeatureActual_type, char > FeatureActual_traits;

      const FeatureActual_type&
      FeatureActual () const;

      FeatureActual_type&
      FeatureActual ();

      void
      FeatureActual (const FeatureActual_type& x);

      void
      FeatureActual (::std::auto_ptr< FeatureActual_type > p);

      // ActualIds
      //
      typedef ::xsd::qif2::StatsArrayIdType ActualIds_type;
      typedef ::xsd::cxx::tree::traits< ActualIds_type, char > ActualIds_traits;

      const ActualIds_type&
      ActualIds () const;

      ActualIds_type&
      ActualIds ();

      void
      ActualIds (const ActualIds_type& x);

      void
      ActualIds (::std::auto_ptr< ActualIds_type > p);

      // Constructors.
      //
      AverageFeatureType (const FeatureActual_type&,
                          const ActualIds_type&);

      AverageFeatureType (::std::auto_ptr< FeatureActual_type >,
                          ::std::auto_ptr< ActualIds_type >);

      AverageFeatureType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      AverageFeatureType (const AverageFeatureType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual AverageFeatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AverageFeatureType&
      operator= (const AverageFeatureType& x);

      virtual 
      ~AverageFeatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< FeatureActual_type > FeatureActual_;
      ::xsd::cxx::tree::one< ActualIds_type > ActualIds_;
    };

    class AverageFeaturesType: public ::xml_schema::type
    {
      public:
      // AverageFeature
      //
      typedef ::xsd::qif2::AverageFeatureType AverageFeature_type;
      typedef ::xsd::cxx::tree::sequence< AverageFeature_type > AverageFeature_sequence;
      typedef AverageFeature_sequence::iterator AverageFeature_iterator;
      typedef AverageFeature_sequence::const_iterator AverageFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< AverageFeature_type, char > AverageFeature_traits;

      const AverageFeature_sequence&
      AverageFeature () const;

      AverageFeature_sequence&
      AverageFeature ();

      void
      AverageFeature (const AverageFeature_sequence& s);

      // Constructors.
      //
      AverageFeaturesType ();

      AverageFeaturesType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      AverageFeaturesType (const AverageFeaturesType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual AverageFeaturesType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AverageFeaturesType&
      operator= (const AverageFeaturesType& x);

      virtual 
      ~AverageFeaturesType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      AverageFeature_sequence AverageFeature_;
    };

    class SummaryStatisticsType: public ::xml_schema::type
    {
      public:
      // SummaryType
      //
      typedef ::xsd::qif2::StatsValuesEnumType SummaryType_type;
      typedef ::xsd::cxx::tree::traits< SummaryType_type, char > SummaryType_traits;

      const SummaryType_type&
      SummaryType () const;

      SummaryType_type&
      SummaryType ();

      void
      SummaryType (const SummaryType_type& x);

      void
      SummaryType (::std::auto_ptr< SummaryType_type > p);

      // Average
      //
      typedef ::xsd::qif2::ActualDecimalType Average_type;
      typedef ::xsd::cxx::tree::optional< Average_type > Average_optional;
      typedef ::xsd::cxx::tree::traits< Average_type, char > Average_traits;

      const Average_optional&
      Average () const;

      Average_optional&
      Average ();

      void
      Average (const Average_type& x);

      void
      Average (const Average_optional& x);

      void
      Average (::std::auto_ptr< Average_type > p);

      // Maximum
      //
      typedef ::xsd::qif2::ActualDecimalType Maximum_type;
      typedef ::xsd::cxx::tree::optional< Maximum_type > Maximum_optional;
      typedef ::xsd::cxx::tree::traits< Maximum_type, char > Maximum_traits;

      const Maximum_optional&
      Maximum () const;

      Maximum_optional&
      Maximum ();

      void
      Maximum (const Maximum_type& x);

      void
      Maximum (const Maximum_optional& x);

      void
      Maximum (::std::auto_ptr< Maximum_type > p);

      // Minimum
      //
      typedef ::xsd::qif2::ActualDecimalType Minimum_type;
      typedef ::xsd::cxx::tree::optional< Minimum_type > Minimum_optional;
      typedef ::xsd::cxx::tree::traits< Minimum_type, char > Minimum_traits;

      const Minimum_optional&
      Minimum () const;

      Minimum_optional&
      Minimum ();

      void
      Minimum (const Minimum_type& x);

      void
      Minimum (const Minimum_optional& x);

      void
      Minimum (::std::auto_ptr< Minimum_type > p);

      // Range
      //
      typedef ::xsd::qif2::ActualDecimalType Range_type;
      typedef ::xsd::cxx::tree::optional< Range_type > Range_optional;
      typedef ::xsd::cxx::tree::traits< Range_type, char > Range_traits;

      const Range_optional&
      Range () const;

      Range_optional&
      Range ();

      void
      Range (const Range_type& x);

      void
      Range (const Range_optional& x);

      void
      Range (::std::auto_ptr< Range_type > p);

      // StandardDeviation
      //
      typedef ::xsd::qif2::ActualDecimalType StandardDeviation_type;
      typedef ::xsd::cxx::tree::optional< StandardDeviation_type > StandardDeviation_optional;
      typedef ::xsd::cxx::tree::traits< StandardDeviation_type, char > StandardDeviation_traits;

      const StandardDeviation_optional&
      StandardDeviation () const;

      StandardDeviation_optional&
      StandardDeviation ();

      void
      StandardDeviation (const StandardDeviation_type& x);

      void
      StandardDeviation (const StandardDeviation_optional& x);

      void
      StandardDeviation (::std::auto_ptr< StandardDeviation_type > p);

      // Constructors.
      //
      SummaryStatisticsType (const SummaryType_type&);

      SummaryStatisticsType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      SummaryStatisticsType (const SummaryStatisticsType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual SummaryStatisticsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SummaryStatisticsType&
      operator= (const SummaryStatisticsType& x);

      virtual 
      ~SummaryStatisticsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SummaryType_type > SummaryType_;
      Average_optional Average_;
      Maximum_optional Maximum_;
      Minimum_optional Minimum_;
      Range_optional Range_;
      StandardDeviation_optional StandardDeviation_;
    };

    class SummaryStatisticsLinearType: public ::xsd::qif2::SummaryStatisticsType
    {
      public:
      // linearUnit
      //
      typedef ::xml_schema::token linearUnit_type;
      typedef ::xsd::cxx::tree::optional< linearUnit_type > linearUnit_optional;
      typedef ::xsd::cxx::tree::traits< linearUnit_type, char > linearUnit_traits;

      const linearUnit_optional&
      linearUnit () const;

      linearUnit_optional&
      linearUnit ();

      void
      linearUnit (const linearUnit_type& x);

      void
      linearUnit (const linearUnit_optional& x);

      void
      linearUnit (::std::auto_ptr< linearUnit_type > p);

      // Constructors.
      //
      SummaryStatisticsLinearType (const SummaryType_type&);

      SummaryStatisticsLinearType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      SummaryStatisticsLinearType (const SummaryStatisticsLinearType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual SummaryStatisticsLinearType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SummaryStatisticsLinearType&
      operator= (const SummaryStatisticsLinearType& x);

      virtual 
      ~SummaryStatisticsLinearType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      linearUnit_optional linearUnit_;
    };

    class SummaryStatisticsAngularType: public ::xsd::qif2::SummaryStatisticsType
    {
      public:
      // angularUnit
      //
      typedef ::xml_schema::token angularUnit_type;
      typedef ::xsd::cxx::tree::optional< angularUnit_type > angularUnit_optional;
      typedef ::xsd::cxx::tree::traits< angularUnit_type, char > angularUnit_traits;

      const angularUnit_optional&
      angularUnit () const;

      angularUnit_optional&
      angularUnit ();

      void
      angularUnit (const angularUnit_type& x);

      void
      angularUnit (const angularUnit_optional& x);

      void
      angularUnit (::std::auto_ptr< angularUnit_type > p);

      // Constructors.
      //
      SummaryStatisticsAngularType (const SummaryType_type&);

      SummaryStatisticsAngularType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      SummaryStatisticsAngularType (const SummaryStatisticsAngularType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual SummaryStatisticsAngularType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SummaryStatisticsAngularType&
      operator= (const SummaryStatisticsAngularType& x);

      virtual 
      ~SummaryStatisticsAngularType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      angularUnit_optional angularUnit_;
    };

    class SummaryStatisticsAreaType: public ::xsd::qif2::SummaryStatisticsType
    {
      public:
      // areaUnit
      //
      typedef ::xml_schema::token areaUnit_type;
      typedef ::xsd::cxx::tree::optional< areaUnit_type > areaUnit_optional;
      typedef ::xsd::cxx::tree::traits< areaUnit_type, char > areaUnit_traits;

      const areaUnit_optional&
      areaUnit () const;

      areaUnit_optional&
      areaUnit ();

      void
      areaUnit (const areaUnit_type& x);

      void
      areaUnit (const areaUnit_optional& x);

      void
      areaUnit (::std::auto_ptr< areaUnit_type > p);

      // Constructors.
      //
      SummaryStatisticsAreaType (const SummaryType_type&);

      SummaryStatisticsAreaType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      SummaryStatisticsAreaType (const SummaryStatisticsAreaType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual SummaryStatisticsAreaType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SummaryStatisticsAreaType&
      operator= (const SummaryStatisticsAreaType& x);

      virtual 
      ~SummaryStatisticsAreaType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      areaUnit_optional areaUnit_;
    };

    class SummaryStatisticsForceType: public ::xsd::qif2::SummaryStatisticsType
    {
      public:
      // forceUnit
      //
      typedef ::xml_schema::token forceUnit_type;
      typedef ::xsd::cxx::tree::optional< forceUnit_type > forceUnit_optional;
      typedef ::xsd::cxx::tree::traits< forceUnit_type, char > forceUnit_traits;

      const forceUnit_optional&
      forceUnit () const;

      forceUnit_optional&
      forceUnit ();

      void
      forceUnit (const forceUnit_type& x);

      void
      forceUnit (const forceUnit_optional& x);

      void
      forceUnit (::std::auto_ptr< forceUnit_type > p);

      // Constructors.
      //
      SummaryStatisticsForceType (const SummaryType_type&);

      SummaryStatisticsForceType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      SummaryStatisticsForceType (const SummaryStatisticsForceType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual SummaryStatisticsForceType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SummaryStatisticsForceType&
      operator= (const SummaryStatisticsForceType& x);

      virtual 
      ~SummaryStatisticsForceType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      forceUnit_optional forceUnit_;
    };

    class SummaryStatisticsMassType: public ::xsd::qif2::SummaryStatisticsType
    {
      public:
      // massUnit
      //
      typedef ::xml_schema::token massUnit_type;
      typedef ::xsd::cxx::tree::optional< massUnit_type > massUnit_optional;
      typedef ::xsd::cxx::tree::traits< massUnit_type, char > massUnit_traits;

      const massUnit_optional&
      massUnit () const;

      massUnit_optional&
      massUnit ();

      void
      massUnit (const massUnit_type& x);

      void
      massUnit (const massUnit_optional& x);

      void
      massUnit (::std::auto_ptr< massUnit_type > p);

      // Constructors.
      //
      SummaryStatisticsMassType (const SummaryType_type&);

      SummaryStatisticsMassType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      SummaryStatisticsMassType (const SummaryStatisticsMassType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual SummaryStatisticsMassType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SummaryStatisticsMassType&
      operator= (const SummaryStatisticsMassType& x);

      virtual 
      ~SummaryStatisticsMassType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      massUnit_optional massUnit_;
    };

    class SummaryStatisticsPressureType: public ::xsd::qif2::SummaryStatisticsType
    {
      public:
      // pressureUnit
      //
      typedef ::xml_schema::token pressureUnit_type;
      typedef ::xsd::cxx::tree::optional< pressureUnit_type > pressureUnit_optional;
      typedef ::xsd::cxx::tree::traits< pressureUnit_type, char > pressureUnit_traits;

      const pressureUnit_optional&
      pressureUnit () const;

      pressureUnit_optional&
      pressureUnit ();

      void
      pressureUnit (const pressureUnit_type& x);

      void
      pressureUnit (const pressureUnit_optional& x);

      void
      pressureUnit (::std::auto_ptr< pressureUnit_type > p);

      // Constructors.
      //
      SummaryStatisticsPressureType (const SummaryType_type&);

      SummaryStatisticsPressureType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      SummaryStatisticsPressureType (const SummaryStatisticsPressureType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual SummaryStatisticsPressureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SummaryStatisticsPressureType&
      operator= (const SummaryStatisticsPressureType& x);

      virtual 
      ~SummaryStatisticsPressureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      pressureUnit_optional pressureUnit_;
    };

    class SummaryStatisticsSpeedType: public ::xsd::qif2::SummaryStatisticsType
    {
      public:
      // speedUnit
      //
      typedef ::xml_schema::token speedUnit_type;
      typedef ::xsd::cxx::tree::optional< speedUnit_type > speedUnit_optional;
      typedef ::xsd::cxx::tree::traits< speedUnit_type, char > speedUnit_traits;

      const speedUnit_optional&
      speedUnit () const;

      speedUnit_optional&
      speedUnit ();

      void
      speedUnit (const speedUnit_type& x);

      void
      speedUnit (const speedUnit_optional& x);

      void
      speedUnit (::std::auto_ptr< speedUnit_type > p);

      // Constructors.
      //
      SummaryStatisticsSpeedType (const SummaryType_type&);

      SummaryStatisticsSpeedType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      SummaryStatisticsSpeedType (const SummaryStatisticsSpeedType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual SummaryStatisticsSpeedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SummaryStatisticsSpeedType&
      operator= (const SummaryStatisticsSpeedType& x);

      virtual 
      ~SummaryStatisticsSpeedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      speedUnit_optional speedUnit_;
    };

    class SummaryStatisticsTemperatureType: public ::xsd::qif2::SummaryStatisticsType
    {
      public:
      // temperatureUnit
      //
      typedef ::xml_schema::token temperatureUnit_type;
      typedef ::xsd::cxx::tree::optional< temperatureUnit_type > temperatureUnit_optional;
      typedef ::xsd::cxx::tree::traits< temperatureUnit_type, char > temperatureUnit_traits;

      const temperatureUnit_optional&
      temperatureUnit () const;

      temperatureUnit_optional&
      temperatureUnit ();

      void
      temperatureUnit (const temperatureUnit_type& x);

      void
      temperatureUnit (const temperatureUnit_optional& x);

      void
      temperatureUnit (::std::auto_ptr< temperatureUnit_type > p);

      // Constructors.
      //
      SummaryStatisticsTemperatureType (const SummaryType_type&);

      SummaryStatisticsTemperatureType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      SummaryStatisticsTemperatureType (const SummaryStatisticsTemperatureType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual SummaryStatisticsTemperatureType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SummaryStatisticsTemperatureType&
      operator= (const SummaryStatisticsTemperatureType& x);

      virtual 
      ~SummaryStatisticsTemperatureType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      temperatureUnit_optional temperatureUnit_;
    };

    class SummaryStatisticsTimeType: public ::xsd::qif2::SummaryStatisticsType
    {
      public:
      // timeUnit
      //
      typedef ::xml_schema::token timeUnit_type;
      typedef ::xsd::cxx::tree::optional< timeUnit_type > timeUnit_optional;
      typedef ::xsd::cxx::tree::traits< timeUnit_type, char > timeUnit_traits;

      const timeUnit_optional&
      timeUnit () const;

      timeUnit_optional&
      timeUnit ();

      void
      timeUnit (const timeUnit_type& x);

      void
      timeUnit (const timeUnit_optional& x);

      void
      timeUnit (::std::auto_ptr< timeUnit_type > p);

      // Constructors.
      //
      SummaryStatisticsTimeType (const SummaryType_type&);

      SummaryStatisticsTimeType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      SummaryStatisticsTimeType (const SummaryStatisticsTimeType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual SummaryStatisticsTimeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SummaryStatisticsTimeType&
      operator= (const SummaryStatisticsTimeType& x);

      virtual 
      ~SummaryStatisticsTimeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      timeUnit_optional timeUnit_;
    };

    class SummaryStatisticsUserDefinedUnitType: public ::xsd::qif2::SummaryStatisticsType
    {
      public:
      // unitName
      //
      typedef ::xml_schema::token unitName_type;
      typedef ::xsd::cxx::tree::traits< unitName_type, char > unitName_traits;

      const unitName_type&
      unitName () const;

      unitName_type&
      unitName ();

      void
      unitName (const unitName_type& x);

      void
      unitName (::std::auto_ptr< unitName_type > p);

      // Constructors.
      //
      SummaryStatisticsUserDefinedUnitType (const SummaryType_type&,
                                            const unitName_type&);

      SummaryStatisticsUserDefinedUnitType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      SummaryStatisticsUserDefinedUnitType (const SummaryStatisticsUserDefinedUnitType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual SummaryStatisticsUserDefinedUnitType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      SummaryStatisticsUserDefinedUnitType&
      operator= (const SummaryStatisticsUserDefinedUnitType& x);

      virtual 
      ~SummaryStatisticsUserDefinedUnitType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< unitName_type > unitName_;
    };

    class AssignableCauseEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        POWER_FAILURE,
        BROKEN_TOOL,
        COMPUTER_CRASH,
        WEATHER_EVENT,
        OTHER
      };

      AssignableCauseEnumType (value v);

      AssignableCauseEnumType (const char* v);

      AssignableCauseEnumType (const ::std::string& v);

      AssignableCauseEnumType (const ::xml_schema::nmtoken& v);

      AssignableCauseEnumType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      AssignableCauseEnumType (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      AssignableCauseEnumType (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      AssignableCauseEnumType (const AssignableCauseEnumType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual AssignableCauseEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AssignableCauseEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_AssignableCauseEnumType_convert ();
      }

      protected:
      value
      _xsd_AssignableCauseEnumType_convert () const;

      public:
      static const char* const _xsd_AssignableCauseEnumType_literals_[5];
      static const value _xsd_AssignableCauseEnumType_indexes_[5];
    };

    class AssignableCauseType: public ::xml_schema::type
    {
      public:
      // Attributes
      //
      typedef ::xsd::qif2::AttributesType Attributes_type;
      typedef ::xsd::cxx::tree::optional< Attributes_type > Attributes_optional;
      typedef ::xsd::cxx::tree::traits< Attributes_type, char > Attributes_traits;

      const Attributes_optional&
      Attributes () const;

      Attributes_optional&
      Attributes ();

      void
      Attributes (const Attributes_type& x);

      void
      Attributes (const Attributes_optional& x);

      void
      Attributes (::std::auto_ptr< Attributes_type > p);

      // Description
      //
      typedef ::xml_schema::string Description_type;
      typedef ::xsd::cxx::tree::optional< Description_type > Description_optional;
      typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

      const Description_optional&
      Description () const;

      Description_optional&
      Description ();

      void
      Description (const Description_type& x);

      void
      Description (const Description_optional& x);

      void
      Description (::std::auto_ptr< Description_type > p);

      // AssignableCauseEnum
      //
      typedef ::xsd::qif2::AssignableCauseEnumType AssignableCauseEnum_type;
      typedef ::xsd::cxx::tree::optional< AssignableCauseEnum_type > AssignableCauseEnum_optional;
      typedef ::xsd::cxx::tree::traits< AssignableCauseEnum_type, char > AssignableCauseEnum_traits;

      const AssignableCauseEnum_optional&
      AssignableCauseEnum () const;

      AssignableCauseEnum_optional&
      AssignableCauseEnum ();

      void
      AssignableCauseEnum (const AssignableCauseEnum_type& x);

      void
      AssignableCauseEnum (const AssignableCauseEnum_optional& x);

      void
      AssignableCauseEnum (::std::auto_ptr< AssignableCauseEnum_type > p);

      // CorrectiveActionIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType CorrectiveActionIds_type;
      typedef ::xsd::cxx::tree::optional< CorrectiveActionIds_type > CorrectiveActionIds_optional;
      typedef ::xsd::cxx::tree::traits< CorrectiveActionIds_type, char > CorrectiveActionIds_traits;

      const CorrectiveActionIds_optional&
      CorrectiveActionIds () const;

      CorrectiveActionIds_optional&
      CorrectiveActionIds ();

      void
      CorrectiveActionIds (const CorrectiveActionIds_type& x);

      void
      CorrectiveActionIds (const CorrectiveActionIds_optional& x);

      void
      CorrectiveActionIds (::std::auto_ptr< CorrectiveActionIds_type > p);

      // id
      //
      typedef ::xsd::qif2::QIFIdType id_type;
      typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

      const id_type&
      id () const;

      id_type&
      id ();

      void
      id (const id_type& x);

      void
      id (::std::auto_ptr< id_type > p);

      // Constructors.
      //
      AssignableCauseType (const id_type&);

      AssignableCauseType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      AssignableCauseType (const AssignableCauseType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual AssignableCauseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AssignableCauseType&
      operator= (const AssignableCauseType& x);

      virtual 
      ~AssignableCauseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Attributes_optional Attributes_;
      Description_optional Description_;
      AssignableCauseEnum_optional AssignableCauseEnum_;
      CorrectiveActionIds_optional CorrectiveActionIds_;
      ::xsd::cxx::tree::one< id_type > id_;
    };

    class AssignableCausesType: public ::xml_schema::type
    {
      public:
      // AssignableCause
      //
      typedef ::xsd::qif2::AssignableCauseType AssignableCause_type;
      typedef ::xsd::cxx::tree::sequence< AssignableCause_type > AssignableCause_sequence;
      typedef AssignableCause_sequence::iterator AssignableCause_iterator;
      typedef AssignableCause_sequence::const_iterator AssignableCause_const_iterator;
      typedef ::xsd::cxx::tree::traits< AssignableCause_type, char > AssignableCause_traits;

      const AssignableCause_sequence&
      AssignableCause () const;

      AssignableCause_sequence&
      AssignableCause ();

      void
      AssignableCause (const AssignableCause_sequence& s);

      // Constructors.
      //
      AssignableCausesType ();

      AssignableCausesType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      AssignableCausesType (const AssignableCausesType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual AssignableCausesType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AssignableCausesType&
      operator= (const AssignableCausesType& x);

      virtual 
      ~AssignableCausesType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      AssignableCause_sequence AssignableCause_;
    };

    class ActionToTakeEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        HALT_PRODUCTION,
        CONTAINMENT,
        NEW_MATERIAL_BATCH,
        NEW_TOOLING,
        INSPECT_100PC,
        REBOOT,
        RECALIBRATE,
        OTHER
      };

      ActionToTakeEnumType (value v);

      ActionToTakeEnumType (const char* v);

      ActionToTakeEnumType (const ::std::string& v);

      ActionToTakeEnumType (const ::xml_schema::nmtoken& v);

      ActionToTakeEnumType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      ActionToTakeEnumType (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      ActionToTakeEnumType (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      ActionToTakeEnumType (const ActionToTakeEnumType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual ActionToTakeEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ActionToTakeEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_ActionToTakeEnumType_convert ();
      }

      protected:
      value
      _xsd_ActionToTakeEnumType_convert () const;

      public:
      static const char* const _xsd_ActionToTakeEnumType_literals_[8];
      static const value _xsd_ActionToTakeEnumType_indexes_[8];
    };

    class CorrectiveActionType: public ::xml_schema::type
    {
      public:
      // Attributes
      //
      typedef ::xsd::qif2::AttributesType Attributes_type;
      typedef ::xsd::cxx::tree::optional< Attributes_type > Attributes_optional;
      typedef ::xsd::cxx::tree::traits< Attributes_type, char > Attributes_traits;

      const Attributes_optional&
      Attributes () const;

      Attributes_optional&
      Attributes ();

      void
      Attributes (const Attributes_type& x);

      void
      Attributes (const Attributes_optional& x);

      void
      Attributes (::std::auto_ptr< Attributes_type > p);

      // ActionToTake
      //
      typedef ::xml_schema::string ActionToTake_type;
      typedef ::xsd::cxx::tree::optional< ActionToTake_type > ActionToTake_optional;
      typedef ::xsd::cxx::tree::traits< ActionToTake_type, char > ActionToTake_traits;

      const ActionToTake_optional&
      ActionToTake () const;

      ActionToTake_optional&
      ActionToTake ();

      void
      ActionToTake (const ActionToTake_type& x);

      void
      ActionToTake (const ActionToTake_optional& x);

      void
      ActionToTake (::std::auto_ptr< ActionToTake_type > p);

      // ActionToTakeEnum
      //
      typedef ::xsd::qif2::ActionToTakeEnumType ActionToTakeEnum_type;
      typedef ::xsd::cxx::tree::optional< ActionToTakeEnum_type > ActionToTakeEnum_optional;
      typedef ::xsd::cxx::tree::traits< ActionToTakeEnum_type, char > ActionToTakeEnum_traits;

      const ActionToTakeEnum_optional&
      ActionToTakeEnum () const;

      ActionToTakeEnum_optional&
      ActionToTakeEnum ();

      void
      ActionToTakeEnum (const ActionToTakeEnum_type& x);

      void
      ActionToTakeEnum (const ActionToTakeEnum_optional& x);

      void
      ActionToTakeEnum (::std::auto_ptr< ActionToTakeEnum_type > p);

      // id
      //
      typedef ::xsd::qif2::QIFIdType id_type;
      typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

      const id_type&
      id () const;

      id_type&
      id ();

      void
      id (const id_type& x);

      void
      id (::std::auto_ptr< id_type > p);

      // Constructors.
      //
      CorrectiveActionType (const id_type&);

      CorrectiveActionType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      CorrectiveActionType (const CorrectiveActionType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual CorrectiveActionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CorrectiveActionType&
      operator= (const CorrectiveActionType& x);

      virtual 
      ~CorrectiveActionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Attributes_optional Attributes_;
      ActionToTake_optional ActionToTake_;
      ActionToTakeEnum_optional ActionToTakeEnum_;
      ::xsd::cxx::tree::one< id_type > id_;
    };

    class CorrectiveActionsType: public ::xml_schema::type
    {
      public:
      // CorrectiveAction
      //
      typedef ::xsd::qif2::CorrectiveActionType CorrectiveAction_type;
      typedef ::xsd::cxx::tree::sequence< CorrectiveAction_type > CorrectiveAction_sequence;
      typedef CorrectiveAction_sequence::iterator CorrectiveAction_iterator;
      typedef CorrectiveAction_sequence::const_iterator CorrectiveAction_const_iterator;
      typedef ::xsd::cxx::tree::traits< CorrectiveAction_type, char > CorrectiveAction_traits;

      const CorrectiveAction_sequence&
      CorrectiveAction () const;

      CorrectiveAction_sequence&
      CorrectiveAction ();

      void
      CorrectiveAction (const CorrectiveAction_sequence& s);

      // Constructors.
      //
      CorrectiveActionsType ();

      CorrectiveActionsType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      CorrectiveActionsType (const CorrectiveActionsType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual CorrectiveActionsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CorrectiveActionsType&
      operator= (const CorrectiveActionsType& x);

      virtual 
      ~CorrectiveActionsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CorrectiveAction_sequence CorrectiveAction_;
    };

    class StudyIssueType: public ::xml_schema::type
    {
      public:
      // Traceability
      //
      typedef ::xsd::qif2::InspectionTraceabilityType Traceability_type;
      typedef ::xsd::cxx::tree::optional< Traceability_type > Traceability_optional;
      typedef ::xsd::cxx::tree::traits< Traceability_type, char > Traceability_traits;

      const Traceability_optional&
      Traceability () const;

      Traceability_optional&
      Traceability ();

      void
      Traceability (const Traceability_type& x);

      void
      Traceability (const Traceability_optional& x);

      void
      Traceability (::std::auto_ptr< Traceability_type > p);

      // AssignableCauseIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType AssignableCauseIds_type;
      typedef ::xsd::cxx::tree::optional< AssignableCauseIds_type > AssignableCauseIds_optional;
      typedef ::xsd::cxx::tree::traits< AssignableCauseIds_type, char > AssignableCauseIds_traits;

      const AssignableCauseIds_optional&
      AssignableCauseIds () const;

      AssignableCauseIds_optional&
      AssignableCauseIds ();

      void
      AssignableCauseIds (const AssignableCauseIds_type& x);

      void
      AssignableCauseIds (const AssignableCauseIds_optional& x);

      void
      AssignableCauseIds (::std::auto_ptr< AssignableCauseIds_type > p);

      // CorrectiveActionIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType CorrectiveActionIds_type;
      typedef ::xsd::cxx::tree::optional< CorrectiveActionIds_type > CorrectiveActionIds_optional;
      typedef ::xsd::cxx::tree::traits< CorrectiveActionIds_type, char > CorrectiveActionIds_traits;

      const CorrectiveActionIds_optional&
      CorrectiveActionIds () const;

      CorrectiveActionIds_optional&
      CorrectiveActionIds ();

      void
      CorrectiveActionIds (const CorrectiveActionIds_type& x);

      void
      CorrectiveActionIds (const CorrectiveActionIds_optional& x);

      void
      CorrectiveActionIds (::std::auto_ptr< CorrectiveActionIds_type > p);

      // Resolution
      //
      typedef ::xml_schema::string Resolution_type;
      typedef ::xsd::cxx::tree::optional< Resolution_type > Resolution_optional;
      typedef ::xsd::cxx::tree::traits< Resolution_type, char > Resolution_traits;

      const Resolution_optional&
      Resolution () const;

      Resolution_optional&
      Resolution ();

      void
      Resolution (const Resolution_type& x);

      void
      Resolution (const Resolution_optional& x);

      void
      Resolution (::std::auto_ptr< Resolution_type > p);

      // CharacteristicIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType CharacteristicIds_type;
      typedef ::xsd::cxx::tree::optional< CharacteristicIds_type > CharacteristicIds_optional;
      typedef ::xsd::cxx::tree::traits< CharacteristicIds_type, char > CharacteristicIds_traits;

      const CharacteristicIds_optional&
      CharacteristicIds () const;

      CharacteristicIds_optional&
      CharacteristicIds ();

      void
      CharacteristicIds (const CharacteristicIds_type& x);

      void
      CharacteristicIds (const CharacteristicIds_optional& x);

      void
      CharacteristicIds (::std::auto_ptr< CharacteristicIds_type > p);

      // SubgroupIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType SubgroupIds_type;
      typedef ::xsd::cxx::tree::optional< SubgroupIds_type > SubgroupIds_optional;
      typedef ::xsd::cxx::tree::traits< SubgroupIds_type, char > SubgroupIds_traits;

      const SubgroupIds_optional&
      SubgroupIds () const;

      SubgroupIds_optional&
      SubgroupIds ();

      void
      SubgroupIds (const SubgroupIds_type& x);

      void
      SubgroupIds (const SubgroupIds_optional& x);

      void
      SubgroupIds (::std::auto_ptr< SubgroupIds_type > p);

      // id
      //
      typedef ::xsd::qif2::QIFIdType id_type;
      typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

      const id_type&
      id () const;

      id_type&
      id ();

      void
      id (const id_type& x);

      void
      id (::std::auto_ptr< id_type > p);

      // Constructors.
      //
      StudyIssueType (const id_type&);

      StudyIssueType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      StudyIssueType (const StudyIssueType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual StudyIssueType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StudyIssueType&
      operator= (const StudyIssueType& x);

      virtual 
      ~StudyIssueType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Traceability_optional Traceability_;
      AssignableCauseIds_optional AssignableCauseIds_;
      CorrectiveActionIds_optional CorrectiveActionIds_;
      Resolution_optional Resolution_;
      CharacteristicIds_optional CharacteristicIds_;
      SubgroupIds_optional SubgroupIds_;
      ::xsd::cxx::tree::one< id_type > id_;
    };

    class ControlIssueEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        OOT,
        CP,
        CPK,
        PP,
        PPK,
        OOC,
        TRENDING,
        SKEWED,
        ONETHIRDGROUPED,
        TWOTHIRDGROUPED,
        OSCILLATING,
        STRATIFIED,
        OOCRNG,
        UNDEFINED
      };

      ControlIssueEnumType (value v);

      ControlIssueEnumType (const char* v);

      ControlIssueEnumType (const ::std::string& v);

      ControlIssueEnumType (const ::xml_schema::nmtoken& v);

      ControlIssueEnumType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      ControlIssueEnumType (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      ControlIssueEnumType (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      ControlIssueEnumType (const ControlIssueEnumType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual ControlIssueEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ControlIssueEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_ControlIssueEnumType_convert ();
      }

      protected:
      value
      _xsd_ControlIssueEnumType_convert () const;

      public:
      static const char* const _xsd_ControlIssueEnumType_literals_[14];
      static const value _xsd_ControlIssueEnumType_indexes_[14];
    };

    class ControlIssueType: public ::xml_schema::type
    {
      public:
      // ControlIssueEnum
      //
      typedef ::xsd::qif2::ControlIssueEnumType ControlIssueEnum_type;
      typedef ::xsd::cxx::tree::optional< ControlIssueEnum_type > ControlIssueEnum_optional;
      typedef ::xsd::cxx::tree::traits< ControlIssueEnum_type, char > ControlIssueEnum_traits;

      const ControlIssueEnum_optional&
      ControlIssueEnum () const;

      ControlIssueEnum_optional&
      ControlIssueEnum ();

      void
      ControlIssueEnum (const ControlIssueEnum_type& x);

      void
      ControlIssueEnum (const ControlIssueEnum_optional& x);

      void
      ControlIssueEnum (::std::auto_ptr< ControlIssueEnum_type > p);

      // OtherControlIssue
      //
      typedef ::xml_schema::string OtherControlIssue_type;
      typedef ::xsd::cxx::tree::optional< OtherControlIssue_type > OtherControlIssue_optional;
      typedef ::xsd::cxx::tree::traits< OtherControlIssue_type, char > OtherControlIssue_traits;

      const OtherControlIssue_optional&
      OtherControlIssue () const;

      OtherControlIssue_optional&
      OtherControlIssue ();

      void
      OtherControlIssue (const OtherControlIssue_type& x);

      void
      OtherControlIssue (const OtherControlIssue_optional& x);

      void
      OtherControlIssue (::std::auto_ptr< OtherControlIssue_type > p);

      // Constructors.
      //
      ControlIssueType ();

      ControlIssueType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      ControlIssueType (const ControlIssueType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual ControlIssueType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ControlIssueType&
      operator= (const ControlIssueType& x);

      virtual 
      ~ControlIssueType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ControlIssueEnum_optional ControlIssueEnum_;
      OtherControlIssue_optional OtherControlIssue_;
    };

    class ControlIssueDetailsType: public ::xml_schema::type
    {
      public:
      // ControlIssue
      //
      typedef ::xsd::qif2::ControlIssueType ControlIssue_type;
      typedef ::xsd::cxx::tree::traits< ControlIssue_type, char > ControlIssue_traits;

      const ControlIssue_type&
      ControlIssue () const;

      ControlIssue_type&
      ControlIssue ();

      void
      ControlIssue (const ControlIssue_type& x);

      void
      ControlIssue (::std::auto_ptr< ControlIssue_type > p);

      // ControlMethodId
      //
      typedef ::xsd::qif2::QIFReferenceFullType ControlMethodId_type;
      typedef ::xsd::cxx::tree::optional< ControlMethodId_type > ControlMethodId_optional;
      typedef ::xsd::cxx::tree::traits< ControlMethodId_type, char > ControlMethodId_traits;

      const ControlMethodId_optional&
      ControlMethodId () const;

      ControlMethodId_optional&
      ControlMethodId ();

      void
      ControlMethodId (const ControlMethodId_type& x);

      void
      ControlMethodId (const ControlMethodId_optional& x);

      void
      ControlMethodId (::std::auto_ptr< ControlMethodId_type > p);

      // StudyIssueId
      //
      typedef ::xsd::qif2::QIFReferenceFullType StudyIssueId_type;
      typedef ::xsd::cxx::tree::optional< StudyIssueId_type > StudyIssueId_optional;
      typedef ::xsd::cxx::tree::traits< StudyIssueId_type, char > StudyIssueId_traits;

      const StudyIssueId_optional&
      StudyIssueId () const;

      StudyIssueId_optional&
      StudyIssueId ();

      void
      StudyIssueId (const StudyIssueId_type& x);

      void
      StudyIssueId (const StudyIssueId_optional& x);

      void
      StudyIssueId (::std::auto_ptr< StudyIssueId_type > p);

      // Constructors.
      //
      ControlIssueDetailsType (const ControlIssue_type&);

      ControlIssueDetailsType (::std::auto_ptr< ControlIssue_type >);

      ControlIssueDetailsType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      ControlIssueDetailsType (const ControlIssueDetailsType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual ControlIssueDetailsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ControlIssueDetailsType&
      operator= (const ControlIssueDetailsType& x);

      virtual 
      ~ControlIssueDetailsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ControlIssue_type > ControlIssue_;
      ControlMethodId_optional ControlMethodId_;
      StudyIssueId_optional StudyIssueId_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xsd
{
  namespace qif2
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (const ::std::string& uri,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (::std::istream& is,
                                     const ::std::string& id,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (::xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (::xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (::xercesc::InputSource& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (const ::std::string& uri,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (const ::std::string& uri,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (const ::std::string& uri,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (::std::istream& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (::std::istream& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (::std::istream& is,
                                          const ::std::string& id,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (::xercesc::InputSource& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (::xercesc::InputSource& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (::xercesc::InputSource& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (::xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (::xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (::xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (::xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (const ::std::string& uri,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (::std::istream& is,
                                     const ::std::string& id,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (::xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (::xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (::xercesc::InputSource& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (::xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (::xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (const ::std::string& uri,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (::std::istream& is,
                                        const ::std::string& id,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (::xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (::xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (::xercesc::InputSource& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (const ::std::string& uri,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (::std::istream& is,
                                     const ::std::string& id,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (::xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (::xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (::xercesc::InputSource& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (::xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (::xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (::xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (::xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (const ::std::string& uri,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (::std::istream& is,
                                         const ::std::string& id,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (::xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (::xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (::xercesc::InputSource& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (::xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (::xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (const ::std::string& uri,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (::std::istream& is,
                                         const ::std::string& id,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (::xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (::xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (::xercesc::InputSource& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (const ::std::string& uri,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (::std::istream& is,
                                     const ::std::string& id,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (::xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (::xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (::xercesc::InputSource& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (::xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (::xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (const ::std::string& uri,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (::std::istream& is,
                                     const ::std::string& id,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (::xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (::xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (::xercesc::InputSource& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (::xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (::xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (const ::std::string& uri,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (const ::std::string& uri,
                                                 ::xml_schema::error_handler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (const ::std::string& uri,
                                                 ::xercesc::DOMErrorHandler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (::std::istream& is,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (::std::istream& is,
                                                 ::xml_schema::error_handler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (::std::istream& is,
                                                 ::xercesc::DOMErrorHandler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (::std::istream& is,
                                                 const ::std::string& id,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (::std::istream& is,
                                                 const ::std::string& id,
                                                 ::xml_schema::error_handler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (::std::istream& is,
                                                 const ::std::string& id,
                                                 ::xercesc::DOMErrorHandler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (::xercesc::InputSource& is,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (::xercesc::InputSource& is,
                                                 ::xml_schema::error_handler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (::xercesc::InputSource& is,
                                                 ::xercesc::DOMErrorHandler& eh,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (const ::xercesc::DOMDocument& d,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                 ::xml_schema::flags f = 0,
                                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (const ::std::string& uri,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (const ::std::string& uri,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (::std::istream& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (::std::istream& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (::xercesc::InputSource& is,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (::xercesc::InputSource& is,
                                       ::xml_schema::error_handler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f = 0,
                                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (::xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (::xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (::xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (::xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (const ::std::string& uri,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (const ::std::string& uri,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (const ::std::string& uri,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (::std::istream& is,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (::std::istream& is,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (::std::istream& is,
                                             const ::std::string& id,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (::std::istream& is,
                                             const ::std::string& id,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (::std::istream& is,
                                             const ::std::string& id,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (::xercesc::InputSource& is,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (::xercesc::InputSource& is,
                                             ::xml_schema::error_handler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (::xercesc::InputSource& is,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (const ::xercesc::DOMDocument& d,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                             ::xml_schema::flags f = 0,
                                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (const ::std::string& uri,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (const ::std::string& uri,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (const ::std::string& uri,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (::std::istream& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (::std::istream& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (::std::istream& is,
                                          const ::std::string& id,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (::std::istream& is,
                                          const ::std::string& id,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (::xercesc::InputSource& is,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (::xercesc::InputSource& is,
                                          ::xml_schema::error_handler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (::xercesc::InputSource& is,
                                          ::xercesc::DOMErrorHandler& eh,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f = 0,
                                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (const ::std::string& uri,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (const ::std::string& uri,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (const ::std::string& uri,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (::std::istream& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (::std::istream& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (::std::istream& is,
                                           const ::std::string& id,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (::xercesc::InputSource& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (::xercesc::InputSource& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (::xercesc::InputSource& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (const ::xercesc::DOMDocument& d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (const ::std::string& uri,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (::std::istream& is,
                                        const ::std::string& id,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (::xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (::xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (::xercesc::InputSource& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (const ::std::string& uri,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (::std::istream& is,
                                         const ::std::string& id,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (::xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (::xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (::xercesc::InputSource& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (const ::std::string& uri,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (::std::istream& is,
                                        const ::std::string& id,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (::xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (::xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (::xercesc::InputSource& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (const ::std::string& uri,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (const ::std::string& uri,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (const ::std::string& uri,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (::std::istream& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (::std::istream& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (::std::istream& is,
                                            const ::std::string& id,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (::std::istream& is,
                                            const ::std::string& id,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (::xercesc::InputSource& is,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (::xercesc::InputSource& is,
                                            ::xml_schema::error_handler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (::xercesc::InputSource& is,
                                            ::xercesc::DOMErrorHandler& eh,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (const ::xercesc::DOMDocument& d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                            ::xml_schema::flags f = 0,
                                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (const ::std::string& uri,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (const ::std::string& uri,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (const ::std::string& uri,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (::std::istream& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (::std::istream& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (::std::istream& is,
                                         const ::std::string& id,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (::std::istream& is,
                                         const ::std::string& id,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (::xercesc::InputSource& is,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (::xercesc::InputSource& is,
                                         ::xml_schema::error_handler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (::xercesc::InputSource& is,
                                         ::xercesc::DOMErrorHandler& eh,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                         ::xml_schema::flags f = 0,
                                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (const ::std::string& uri,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (const ::std::string& uri,
                                               ::xml_schema::error_handler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (const ::std::string& uri,
                                               ::xercesc::DOMErrorHandler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (::std::istream& is,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (::std::istream& is,
                                               ::xml_schema::error_handler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (::std::istream& is,
                                               ::xercesc::DOMErrorHandler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (::std::istream& is,
                                               const ::std::string& id,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (::std::istream& is,
                                               const ::std::string& id,
                                               ::xml_schema::error_handler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (::std::istream& is,
                                               const ::std::string& id,
                                               ::xercesc::DOMErrorHandler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (::xercesc::InputSource& is,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (::xercesc::InputSource& is,
                                               ::xml_schema::error_handler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (::xercesc::InputSource& is,
                                               ::xercesc::DOMErrorHandler& eh,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (const ::xercesc::DOMDocument& d,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                               ::xml_schema::flags f = 0,
                                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (const ::std::string& uri,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (::std::istream& is,
                                        const ::std::string& id,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (::xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (::xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (::xercesc::InputSource& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (const ::std::string& uri,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (const ::std::string& uri,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (const ::std::string& uri,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (::std::istream& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (::std::istream& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (::std::istream& is,
                                        const ::std::string& id,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (::std::istream& is,
                                        const ::std::string& id,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (::xercesc::InputSource& is,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (::xercesc::InputSource& is,
                                        ::xml_schema::error_handler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (::xercesc::InputSource& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f = 0,
                                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xsd
{
  namespace qif2
  {
    void
    operator<< (::xercesc::DOMElement&, const StatsValuesEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const StatsValuesEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const StatsValuesEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const ListAccumulatedStatsValuesType&);

    void
    operator<< (::xercesc::DOMAttr&, const ListAccumulatedStatsValuesType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ListAccumulatedStatsValuesType&);

    void
    operator<< (::xercesc::DOMElement&, const SubgroupStatsValuesEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const SubgroupStatsValuesEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const SubgroupStatsValuesEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const ListSubgroupStatsValuesType&);

    void
    operator<< (::xercesc::DOMAttr&, const ListSubgroupStatsValuesType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ListSubgroupStatsValuesType&);

    void
    operator<< (::xercesc::DOMElement&, const SubgroupDecimalType&);

    void
    operator<< (::xercesc::DOMElement&, const SubgroupIntegerType&);

    void
    operator<< (::xercesc::DOMElement&, const SummaryStatsValuesEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const SummaryStatsValuesEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const SummaryStatsValuesEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const ListSummaryStatsValuesType&);

    void
    operator<< (::xercesc::DOMAttr&, const ListSummaryStatsValuesType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ListSummaryStatsValuesType&);

    void
    operator<< (::xercesc::DOMElement&, const SummaryStatsValuesType&);

    void
    operator<< (::xercesc::DOMElement&, const LimitingNumberType&);

    void
    operator<< (::xercesc::DOMElement&, const CriterionDecimalType&);

    void
    operator<< (::xercesc::DOMElement&, const CriterionLinearType&);

    void
    operator<< (::xercesc::DOMElement&, const CriterionAngularType&);

    void
    operator<< (::xercesc::DOMElement&, const CriterionAreaType&);

    void
    operator<< (::xercesc::DOMElement&, const CriterionForceType&);

    void
    operator<< (::xercesc::DOMElement&, const CriterionMassType&);

    void
    operator<< (::xercesc::DOMElement&, const CriterionPressureType&);

    void
    operator<< (::xercesc::DOMElement&, const CriterionSpeedType&);

    void
    operator<< (::xercesc::DOMElement&, const CriterionTemperatureType&);

    void
    operator<< (::xercesc::DOMElement&, const CriterionTimeType&);

    void
    operator<< (::xercesc::DOMElement&, const CriterionUserDefinedUnitType&);

    void
    operator<< (::xercesc::DOMElement&, const CriterionIntegerType&);

    void
    operator<< (::xercesc::DOMElement&, const CriterionOutOfType&);

    void
    operator<< (::xercesc::DOMElement&, const SamplingMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const SamplingIntervalEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const SamplingIntervalEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const SamplingIntervalEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const SamplingIntervalType&);

    void
    operator<< (::xercesc::DOMElement&, const ExclusionEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const ExclusionEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ExclusionEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const ExclusionReasonType&);

    void
    operator<< (::xercesc::DOMElement&, const ExclusionType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsArrayIdType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsEvalStatusEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const StatsEvalStatusEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const StatsEvalStatusEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsEvalStatusType&);

    void
    operator<< (::xercesc::DOMElement&, const OneSidedCapabilityCalculationEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const OneSidedCapabilityCalculationEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const OneSidedCapabilityCalculationEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const PositionCapabilityCalculationEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const PositionCapabilityCalculationEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const PositionCapabilityCalculationEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const DistributionTransformationEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const DistributionTransformationEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const DistributionTransformationEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const DistributionTransformationType&);

    void
    operator<< (::xercesc::DOMElement&, const ActualSubgroupType&);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicStatsEvalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsNumericalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsWithTolNumericalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsWithTolLinearType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsWithTolAngularType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsWithTolAreaType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsWithTolForceType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsWithTolMassType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsWithTolPressureType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsWithTolSpeedType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsWithTolTemperatureType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsWithTolTimeType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsWithTolUserDefinedUnitType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsLinearType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsAngularType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsAreaType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsForceType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsMassType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsPressureType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsSpeedType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsTemperatureType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsTimeType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsUserDefinedUnitType&);

    void
    operator<< (::xercesc::DOMElement&, const StatsPassFailType&);

    void
    operator<< (::xercesc::DOMElement&, const GeometricCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const CompositeSegmentStatsEvalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const CompositeSegmentPositionStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const CompositeSegmentsPositionStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const CompositeSegmentProfileStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const CompositeSegmentsProfileStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const CompositeSegmentSymmetryStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const CompositeSegmentsSymmetryStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const LinearCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const AngularCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedAttributeCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedLinearCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedAngularCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedAreaCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedForceCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedMassCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedPressureCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedSpeedCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedTemperatureCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedTimeCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const UserDefinedUnitCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceTextureCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const OrientationCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const AngularityCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const PerpendicularityCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const ParallelismCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const FormCharacteristicStatsEvalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const StraightnessCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const FlatnessCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const CircularityCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const CylindricityCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const LocationCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const PositionCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const AngularCoordinateCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const AngleCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const AngleFromCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const AngleBetweenCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const LinearCoordinateCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const CurveLengthCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const DiameterCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const LengthCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const WidthCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const HeightCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const DepthCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const ThicknessCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const SquareCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const DistanceFromCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const DistanceBetweenCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const RadiusCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const ChordCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const RunoutCharacteristicStatsEvalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const CircularRunoutCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const TotalRunoutCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const ConcentricityCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const SymmetryCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDeviationStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const PointDeviationsStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const ProfileCharacteristicStatsEvalBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const LineProfileCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const PointProfileCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceProfileCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const SurfaceProfileNonUniformCharacteristicStatsEvalType&);

    void
    operator<< (::xercesc::DOMElement&, const ThreadCharacteristicStatsEvalType&);

    // Serialize to std::ostream.
    //

    void
    CharacteristicStats (::std::ostream& os,
                         const ::xsd::qif2::CharacteristicStatsEvalBaseType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CharacteristicStats (::std::ostream& os,
                         const ::xsd::qif2::CharacteristicStatsEvalBaseType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CharacteristicStats (::std::ostream& os,
                         const ::xsd::qif2::CharacteristicStatsEvalBaseType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CharacteristicStats (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::CharacteristicStatsEvalBaseType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CharacteristicStats (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::CharacteristicStatsEvalBaseType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CharacteristicStats (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::CharacteristicStatsEvalBaseType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CharacteristicStats (::xercesc::DOMDocument& d,
                         const ::xsd::qif2::CharacteristicStatsEvalBaseType& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CharacteristicStats (const ::xsd::qif2::CharacteristicStatsEvalBaseType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngleBetweenCharacteristicStats (::std::ostream& os,
                                     const ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    AngleBetweenCharacteristicStats (::std::ostream& os,
                                     const ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    AngleBetweenCharacteristicStats (::std::ostream& os,
                                     const ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngleBetweenCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    AngleBetweenCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    AngleBetweenCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngleBetweenCharacteristicStats (::xercesc::DOMDocument& d,
                                     const ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType& x,
                                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngleBetweenCharacteristicStats (const ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngleCharacteristicStats (::std::ostream& os,
                              const ::xsd::qif2::AngleCharacteristicStatsEvalType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    AngleCharacteristicStats (::std::ostream& os,
                              const ::xsd::qif2::AngleCharacteristicStatsEvalType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    AngleCharacteristicStats (::std::ostream& os,
                              const ::xsd::qif2::AngleCharacteristicStatsEvalType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngleCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::AngleCharacteristicStatsEvalType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    AngleCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::AngleCharacteristicStatsEvalType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    AngleCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::AngleCharacteristicStatsEvalType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngleCharacteristicStats (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::AngleCharacteristicStatsEvalType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngleCharacteristicStats (const ::xsd::qif2::AngleCharacteristicStatsEvalType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngularCoordinateCharacteristicStats (::std::ostream& os,
                                          const ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    AngularCoordinateCharacteristicStats (::std::ostream& os,
                                          const ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    AngularCoordinateCharacteristicStats (::std::ostream& os,
                                          const ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngularCoordinateCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    AngularCoordinateCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    AngularCoordinateCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngularCoordinateCharacteristicStats (::xercesc::DOMDocument& d,
                                          const ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType& x,
                                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngularCoordinateCharacteristicStats (const ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngleFromCharacteristicStats (::std::ostream& os,
                                  const ::xsd::qif2::AngleFromCharacteristicStatsEvalType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    AngleFromCharacteristicStats (::std::ostream& os,
                                  const ::xsd::qif2::AngleFromCharacteristicStatsEvalType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    AngleFromCharacteristicStats (::std::ostream& os,
                                  const ::xsd::qif2::AngleFromCharacteristicStatsEvalType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngleFromCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::AngleFromCharacteristicStatsEvalType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    AngleFromCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::AngleFromCharacteristicStatsEvalType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    AngleFromCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::AngleFromCharacteristicStatsEvalType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngleFromCharacteristicStats (::xercesc::DOMDocument& d,
                                  const ::xsd::qif2::AngleFromCharacteristicStatsEvalType& x,
                                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngleFromCharacteristicStats (const ::xsd::qif2::AngleFromCharacteristicStatsEvalType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngularCharacteristicStats (::std::ostream& os,
                                const ::xsd::qif2::AngularCharacteristicStatsEvalType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    AngularCharacteristicStats (::std::ostream& os,
                                const ::xsd::qif2::AngularCharacteristicStatsEvalType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    AngularCharacteristicStats (::std::ostream& os,
                                const ::xsd::qif2::AngularCharacteristicStatsEvalType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngularCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::AngularCharacteristicStatsEvalType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    AngularCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::AngularCharacteristicStatsEvalType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    AngularCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::AngularCharacteristicStatsEvalType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngularCharacteristicStats (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::AngularCharacteristicStatsEvalType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngularCharacteristicStats (const ::xsd::qif2::AngularCharacteristicStatsEvalType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AngularityCharacteristicStats (::std::ostream& os,
                                   const ::xsd::qif2::AngularityCharacteristicStatsEvalType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    AngularityCharacteristicStats (::std::ostream& os,
                                   const ::xsd::qif2::AngularityCharacteristicStatsEvalType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    AngularityCharacteristicStats (::std::ostream& os,
                                   const ::xsd::qif2::AngularityCharacteristicStatsEvalType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AngularityCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::AngularityCharacteristicStatsEvalType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    AngularityCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::AngularityCharacteristicStatsEvalType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    AngularityCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::AngularityCharacteristicStatsEvalType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AngularityCharacteristicStats (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::AngularityCharacteristicStatsEvalType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AngularityCharacteristicStats (const ::xsd::qif2::AngularityCharacteristicStatsEvalType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ChordCharacteristicStats (::std::ostream& os,
                              const ::xsd::qif2::ChordCharacteristicStatsEvalType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    ChordCharacteristicStats (::std::ostream& os,
                              const ::xsd::qif2::ChordCharacteristicStatsEvalType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    ChordCharacteristicStats (::std::ostream& os,
                              const ::xsd::qif2::ChordCharacteristicStatsEvalType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ChordCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::ChordCharacteristicStatsEvalType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    ChordCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::ChordCharacteristicStatsEvalType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    ChordCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::ChordCharacteristicStatsEvalType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ChordCharacteristicStats (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::ChordCharacteristicStatsEvalType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ChordCharacteristicStats (const ::xsd::qif2::ChordCharacteristicStatsEvalType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CircularityCharacteristicStats (::std::ostream& os,
                                    const ::xsd::qif2::CircularityCharacteristicStatsEvalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    CircularityCharacteristicStats (::std::ostream& os,
                                    const ::xsd::qif2::CircularityCharacteristicStatsEvalType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    CircularityCharacteristicStats (::std::ostream& os,
                                    const ::xsd::qif2::CircularityCharacteristicStatsEvalType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CircularityCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::CircularityCharacteristicStatsEvalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    CircularityCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::CircularityCharacteristicStatsEvalType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    CircularityCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::CircularityCharacteristicStatsEvalType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CircularityCharacteristicStats (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::CircularityCharacteristicStatsEvalType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CircularityCharacteristicStats (const ::xsd::qif2::CircularityCharacteristicStatsEvalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CircularRunoutCharacteristicStats (::std::ostream& os,
                                       const ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    CircularRunoutCharacteristicStats (::std::ostream& os,
                                       const ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    CircularRunoutCharacteristicStats (::std::ostream& os,
                                       const ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CircularRunoutCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    CircularRunoutCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    CircularRunoutCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CircularRunoutCharacteristicStats (::xercesc::DOMDocument& d,
                                       const ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType& x,
                                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CircularRunoutCharacteristicStats (const ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ConcentricityCharacteristicStats (::std::ostream& os,
                                      const ::xsd::qif2::ConcentricityCharacteristicStatsEvalType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    ConcentricityCharacteristicStats (::std::ostream& os,
                                      const ::xsd::qif2::ConcentricityCharacteristicStatsEvalType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    ConcentricityCharacteristicStats (::std::ostream& os,
                                      const ::xsd::qif2::ConcentricityCharacteristicStatsEvalType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ConcentricityCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::ConcentricityCharacteristicStatsEvalType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    ConcentricityCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::ConcentricityCharacteristicStatsEvalType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    ConcentricityCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::ConcentricityCharacteristicStatsEvalType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ConcentricityCharacteristicStats (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::ConcentricityCharacteristicStatsEvalType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ConcentricityCharacteristicStats (const ::xsd::qif2::ConcentricityCharacteristicStatsEvalType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CurveLengthCharacteristicStats (::std::ostream& os,
                                    const ::xsd::qif2::CurveLengthCharacteristicStatsEvalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    CurveLengthCharacteristicStats (::std::ostream& os,
                                    const ::xsd::qif2::CurveLengthCharacteristicStatsEvalType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    CurveLengthCharacteristicStats (::std::ostream& os,
                                    const ::xsd::qif2::CurveLengthCharacteristicStatsEvalType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CurveLengthCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::CurveLengthCharacteristicStatsEvalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    CurveLengthCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::CurveLengthCharacteristicStatsEvalType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    CurveLengthCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::CurveLengthCharacteristicStatsEvalType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CurveLengthCharacteristicStats (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::CurveLengthCharacteristicStatsEvalType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CurveLengthCharacteristicStats (const ::xsd::qif2::CurveLengthCharacteristicStatsEvalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CylindricityCharacteristicStats (::std::ostream& os,
                                     const ::xsd::qif2::CylindricityCharacteristicStatsEvalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    CylindricityCharacteristicStats (::std::ostream& os,
                                     const ::xsd::qif2::CylindricityCharacteristicStatsEvalType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    CylindricityCharacteristicStats (::std::ostream& os,
                                     const ::xsd::qif2::CylindricityCharacteristicStatsEvalType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CylindricityCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::CylindricityCharacteristicStatsEvalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    CylindricityCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::CylindricityCharacteristicStatsEvalType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    CylindricityCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::CylindricityCharacteristicStatsEvalType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CylindricityCharacteristicStats (::xercesc::DOMDocument& d,
                                     const ::xsd::qif2::CylindricityCharacteristicStatsEvalType& x,
                                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CylindricityCharacteristicStats (const ::xsd::qif2::CylindricityCharacteristicStatsEvalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    DepthCharacteristicStats (::std::ostream& os,
                              const ::xsd::qif2::DepthCharacteristicStatsEvalType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    DepthCharacteristicStats (::std::ostream& os,
                              const ::xsd::qif2::DepthCharacteristicStatsEvalType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    DepthCharacteristicStats (::std::ostream& os,
                              const ::xsd::qif2::DepthCharacteristicStatsEvalType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    DepthCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::DepthCharacteristicStatsEvalType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    DepthCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::DepthCharacteristicStatsEvalType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    DepthCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::DepthCharacteristicStatsEvalType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    DepthCharacteristicStats (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::DepthCharacteristicStatsEvalType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DepthCharacteristicStats (const ::xsd::qif2::DepthCharacteristicStatsEvalType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    DiameterCharacteristicStats (::std::ostream& os,
                                 const ::xsd::qif2::DiameterCharacteristicStatsEvalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    DiameterCharacteristicStats (::std::ostream& os,
                                 const ::xsd::qif2::DiameterCharacteristicStatsEvalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    DiameterCharacteristicStats (::std::ostream& os,
                                 const ::xsd::qif2::DiameterCharacteristicStatsEvalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    DiameterCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::DiameterCharacteristicStatsEvalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    DiameterCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::DiameterCharacteristicStatsEvalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    DiameterCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::DiameterCharacteristicStatsEvalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    DiameterCharacteristicStats (::xercesc::DOMDocument& d,
                                 const ::xsd::qif2::DiameterCharacteristicStatsEvalType& x,
                                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DiameterCharacteristicStats (const ::xsd::qif2::DiameterCharacteristicStatsEvalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    DistanceBetweenCharacteristicStats (::std::ostream& os,
                                        const ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    DistanceBetweenCharacteristicStats (::std::ostream& os,
                                        const ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    DistanceBetweenCharacteristicStats (::std::ostream& os,
                                        const ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    DistanceBetweenCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    DistanceBetweenCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    DistanceBetweenCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    DistanceBetweenCharacteristicStats (::xercesc::DOMDocument& d,
                                        const ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType& x,
                                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DistanceBetweenCharacteristicStats (const ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    DistanceFromCharacteristicStats (::std::ostream& os,
                                     const ::xsd::qif2::DistanceFromCharacteristicStatsEvalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    DistanceFromCharacteristicStats (::std::ostream& os,
                                     const ::xsd::qif2::DistanceFromCharacteristicStatsEvalType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    DistanceFromCharacteristicStats (::std::ostream& os,
                                     const ::xsd::qif2::DistanceFromCharacteristicStatsEvalType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    DistanceFromCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::DistanceFromCharacteristicStatsEvalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    DistanceFromCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::DistanceFromCharacteristicStatsEvalType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    DistanceFromCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::DistanceFromCharacteristicStatsEvalType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    DistanceFromCharacteristicStats (::xercesc::DOMDocument& d,
                                     const ::xsd::qif2::DistanceFromCharacteristicStatsEvalType& x,
                                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DistanceFromCharacteristicStats (const ::xsd::qif2::DistanceFromCharacteristicStatsEvalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FlatnessCharacteristicStats (::std::ostream& os,
                                 const ::xsd::qif2::FlatnessCharacteristicStatsEvalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    FlatnessCharacteristicStats (::std::ostream& os,
                                 const ::xsd::qif2::FlatnessCharacteristicStatsEvalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    FlatnessCharacteristicStats (::std::ostream& os,
                                 const ::xsd::qif2::FlatnessCharacteristicStatsEvalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FlatnessCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::FlatnessCharacteristicStatsEvalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    FlatnessCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::FlatnessCharacteristicStatsEvalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    FlatnessCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::FlatnessCharacteristicStatsEvalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FlatnessCharacteristicStats (::xercesc::DOMDocument& d,
                                 const ::xsd::qif2::FlatnessCharacteristicStatsEvalType& x,
                                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FlatnessCharacteristicStats (const ::xsd::qif2::FlatnessCharacteristicStatsEvalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    GeometricCharacteristicStats (::std::ostream& os,
                                  const ::xsd::qif2::GeometricCharacteristicStatsEvalType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    GeometricCharacteristicStats (::std::ostream& os,
                                  const ::xsd::qif2::GeometricCharacteristicStatsEvalType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    GeometricCharacteristicStats (::std::ostream& os,
                                  const ::xsd::qif2::GeometricCharacteristicStatsEvalType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    GeometricCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::GeometricCharacteristicStatsEvalType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    GeometricCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::GeometricCharacteristicStatsEvalType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    GeometricCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::GeometricCharacteristicStatsEvalType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    GeometricCharacteristicStats (::xercesc::DOMDocument& d,
                                  const ::xsd::qif2::GeometricCharacteristicStatsEvalType& x,
                                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    GeometricCharacteristicStats (const ::xsd::qif2::GeometricCharacteristicStatsEvalType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    HeightCharacteristicStats (::std::ostream& os,
                               const ::xsd::qif2::HeightCharacteristicStatsEvalType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    HeightCharacteristicStats (::std::ostream& os,
                               const ::xsd::qif2::HeightCharacteristicStatsEvalType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    HeightCharacteristicStats (::std::ostream& os,
                               const ::xsd::qif2::HeightCharacteristicStatsEvalType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    HeightCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::HeightCharacteristicStatsEvalType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    HeightCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::HeightCharacteristicStatsEvalType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    HeightCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::HeightCharacteristicStatsEvalType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    HeightCharacteristicStats (::xercesc::DOMDocument& d,
                               const ::xsd::qif2::HeightCharacteristicStatsEvalType& x,
                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    HeightCharacteristicStats (const ::xsd::qif2::HeightCharacteristicStatsEvalType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LengthCharacteristicStats (::std::ostream& os,
                               const ::xsd::qif2::LengthCharacteristicStatsEvalType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    LengthCharacteristicStats (::std::ostream& os,
                               const ::xsd::qif2::LengthCharacteristicStatsEvalType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    LengthCharacteristicStats (::std::ostream& os,
                               const ::xsd::qif2::LengthCharacteristicStatsEvalType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LengthCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::LengthCharacteristicStatsEvalType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    LengthCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::LengthCharacteristicStatsEvalType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    LengthCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::LengthCharacteristicStatsEvalType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LengthCharacteristicStats (::xercesc::DOMDocument& d,
                               const ::xsd::qif2::LengthCharacteristicStatsEvalType& x,
                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LengthCharacteristicStats (const ::xsd::qif2::LengthCharacteristicStatsEvalType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LinearCharacteristicStats (::std::ostream& os,
                               const ::xsd::qif2::LinearCharacteristicStatsEvalType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    LinearCharacteristicStats (::std::ostream& os,
                               const ::xsd::qif2::LinearCharacteristicStatsEvalType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    LinearCharacteristicStats (::std::ostream& os,
                               const ::xsd::qif2::LinearCharacteristicStatsEvalType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LinearCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::LinearCharacteristicStatsEvalType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    LinearCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::LinearCharacteristicStatsEvalType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    LinearCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::LinearCharacteristicStatsEvalType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LinearCharacteristicStats (::xercesc::DOMDocument& d,
                               const ::xsd::qif2::LinearCharacteristicStatsEvalType& x,
                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LinearCharacteristicStats (const ::xsd::qif2::LinearCharacteristicStatsEvalType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LinearCoordinateCharacteristicStats (::std::ostream& os,
                                         const ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    LinearCoordinateCharacteristicStats (::std::ostream& os,
                                         const ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    LinearCoordinateCharacteristicStats (::std::ostream& os,
                                         const ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LinearCoordinateCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    LinearCoordinateCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    LinearCoordinateCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LinearCoordinateCharacteristicStats (::xercesc::DOMDocument& d,
                                         const ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType& x,
                                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LinearCoordinateCharacteristicStats (const ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LocationCharacteristicStats (::std::ostream& os,
                                 const ::xsd::qif2::LocationCharacteristicStatsEvalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    LocationCharacteristicStats (::std::ostream& os,
                                 const ::xsd::qif2::LocationCharacteristicStatsEvalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    LocationCharacteristicStats (::std::ostream& os,
                                 const ::xsd::qif2::LocationCharacteristicStatsEvalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LocationCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::LocationCharacteristicStatsEvalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    LocationCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::LocationCharacteristicStatsEvalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    LocationCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::LocationCharacteristicStatsEvalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LocationCharacteristicStats (::xercesc::DOMDocument& d,
                                 const ::xsd::qif2::LocationCharacteristicStatsEvalType& x,
                                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LocationCharacteristicStats (const ::xsd::qif2::LocationCharacteristicStatsEvalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LineProfileCharacteristicStats (::std::ostream& os,
                                    const ::xsd::qif2::LineProfileCharacteristicStatsEvalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    LineProfileCharacteristicStats (::std::ostream& os,
                                    const ::xsd::qif2::LineProfileCharacteristicStatsEvalType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    LineProfileCharacteristicStats (::std::ostream& os,
                                    const ::xsd::qif2::LineProfileCharacteristicStatsEvalType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LineProfileCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::LineProfileCharacteristicStatsEvalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    LineProfileCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::LineProfileCharacteristicStatsEvalType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    LineProfileCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::LineProfileCharacteristicStatsEvalType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LineProfileCharacteristicStats (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::LineProfileCharacteristicStatsEvalType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LineProfileCharacteristicStats (const ::xsd::qif2::LineProfileCharacteristicStatsEvalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    OrientationCharacteristicStats (::std::ostream& os,
                                    const ::xsd::qif2::OrientationCharacteristicStatsEvalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    OrientationCharacteristicStats (::std::ostream& os,
                                    const ::xsd::qif2::OrientationCharacteristicStatsEvalType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    OrientationCharacteristicStats (::std::ostream& os,
                                    const ::xsd::qif2::OrientationCharacteristicStatsEvalType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    OrientationCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::OrientationCharacteristicStatsEvalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    OrientationCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::OrientationCharacteristicStatsEvalType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    OrientationCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::OrientationCharacteristicStatsEvalType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    OrientationCharacteristicStats (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::OrientationCharacteristicStatsEvalType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    OrientationCharacteristicStats (const ::xsd::qif2::OrientationCharacteristicStatsEvalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ParallelismCharacteristicStats (::std::ostream& os,
                                    const ::xsd::qif2::ParallelismCharacteristicStatsEvalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    ParallelismCharacteristicStats (::std::ostream& os,
                                    const ::xsd::qif2::ParallelismCharacteristicStatsEvalType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    ParallelismCharacteristicStats (::std::ostream& os,
                                    const ::xsd::qif2::ParallelismCharacteristicStatsEvalType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ParallelismCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::ParallelismCharacteristicStatsEvalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    ParallelismCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::ParallelismCharacteristicStatsEvalType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    ParallelismCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::ParallelismCharacteristicStatsEvalType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ParallelismCharacteristicStats (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::ParallelismCharacteristicStatsEvalType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ParallelismCharacteristicStats (const ::xsd::qif2::ParallelismCharacteristicStatsEvalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PerpendicularityCharacteristicStats (::std::ostream& os,
                                         const ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    PerpendicularityCharacteristicStats (::std::ostream& os,
                                         const ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    PerpendicularityCharacteristicStats (::std::ostream& os,
                                         const ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PerpendicularityCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    PerpendicularityCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    PerpendicularityCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PerpendicularityCharacteristicStats (::xercesc::DOMDocument& d,
                                         const ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType& x,
                                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PerpendicularityCharacteristicStats (const ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PointProfileCharacteristicStats (::std::ostream& os,
                                     const ::xsd::qif2::PointProfileCharacteristicStatsEvalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    PointProfileCharacteristicStats (::std::ostream& os,
                                     const ::xsd::qif2::PointProfileCharacteristicStatsEvalType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    PointProfileCharacteristicStats (::std::ostream& os,
                                     const ::xsd::qif2::PointProfileCharacteristicStatsEvalType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PointProfileCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::PointProfileCharacteristicStatsEvalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    PointProfileCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::PointProfileCharacteristicStatsEvalType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    PointProfileCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::PointProfileCharacteristicStatsEvalType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PointProfileCharacteristicStats (::xercesc::DOMDocument& d,
                                     const ::xsd::qif2::PointProfileCharacteristicStatsEvalType& x,
                                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PointProfileCharacteristicStats (const ::xsd::qif2::PointProfileCharacteristicStatsEvalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PositionCharacteristicStats (::std::ostream& os,
                                 const ::xsd::qif2::PositionCharacteristicStatsEvalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    PositionCharacteristicStats (::std::ostream& os,
                                 const ::xsd::qif2::PositionCharacteristicStatsEvalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    PositionCharacteristicStats (::std::ostream& os,
                                 const ::xsd::qif2::PositionCharacteristicStatsEvalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PositionCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::PositionCharacteristicStatsEvalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    PositionCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::PositionCharacteristicStatsEvalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    PositionCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::PositionCharacteristicStatsEvalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PositionCharacteristicStats (::xercesc::DOMDocument& d,
                                 const ::xsd::qif2::PositionCharacteristicStatsEvalType& x,
                                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PositionCharacteristicStats (const ::xsd::qif2::PositionCharacteristicStatsEvalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    RadiusCharacteristicStats (::std::ostream& os,
                               const ::xsd::qif2::RadiusCharacteristicStatsEvalType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    RadiusCharacteristicStats (::std::ostream& os,
                               const ::xsd::qif2::RadiusCharacteristicStatsEvalType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    RadiusCharacteristicStats (::std::ostream& os,
                               const ::xsd::qif2::RadiusCharacteristicStatsEvalType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    RadiusCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::RadiusCharacteristicStatsEvalType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    RadiusCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::RadiusCharacteristicStatsEvalType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    RadiusCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::RadiusCharacteristicStatsEvalType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    RadiusCharacteristicStats (::xercesc::DOMDocument& d,
                               const ::xsd::qif2::RadiusCharacteristicStatsEvalType& x,
                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    RadiusCharacteristicStats (const ::xsd::qif2::RadiusCharacteristicStatsEvalType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SquareCharacteristicStats (::std::ostream& os,
                               const ::xsd::qif2::SquareCharacteristicStatsEvalType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    SquareCharacteristicStats (::std::ostream& os,
                               const ::xsd::qif2::SquareCharacteristicStatsEvalType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    SquareCharacteristicStats (::std::ostream& os,
                               const ::xsd::qif2::SquareCharacteristicStatsEvalType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SquareCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::SquareCharacteristicStatsEvalType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    SquareCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::SquareCharacteristicStatsEvalType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    SquareCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::SquareCharacteristicStatsEvalType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SquareCharacteristicStats (::xercesc::DOMDocument& d,
                               const ::xsd::qif2::SquareCharacteristicStatsEvalType& x,
                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SquareCharacteristicStats (const ::xsd::qif2::SquareCharacteristicStatsEvalType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    StraightnessCharacteristicStats (::std::ostream& os,
                                     const ::xsd::qif2::StraightnessCharacteristicStatsEvalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    StraightnessCharacteristicStats (::std::ostream& os,
                                     const ::xsd::qif2::StraightnessCharacteristicStatsEvalType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    StraightnessCharacteristicStats (::std::ostream& os,
                                     const ::xsd::qif2::StraightnessCharacteristicStatsEvalType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    StraightnessCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::StraightnessCharacteristicStatsEvalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    StraightnessCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::StraightnessCharacteristicStatsEvalType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    StraightnessCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::StraightnessCharacteristicStatsEvalType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    StraightnessCharacteristicStats (::xercesc::DOMDocument& d,
                                     const ::xsd::qif2::StraightnessCharacteristicStatsEvalType& x,
                                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    StraightnessCharacteristicStats (const ::xsd::qif2::StraightnessCharacteristicStatsEvalType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SurfaceProfileCharacteristicStats (::std::ostream& os,
                                       const ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    SurfaceProfileCharacteristicStats (::std::ostream& os,
                                       const ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    SurfaceProfileCharacteristicStats (::std::ostream& os,
                                       const ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SurfaceProfileCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    SurfaceProfileCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    SurfaceProfileCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SurfaceProfileCharacteristicStats (::xercesc::DOMDocument& d,
                                       const ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType& x,
                                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SurfaceProfileCharacteristicStats (const ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SurfaceProfileNonUniformCharacteristicStats (::std::ostream& os,
                                                 const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType& x, 
                                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::xml_schema::flags f = 0);

    void
    SurfaceProfileNonUniformCharacteristicStats (::std::ostream& os,
                                                 const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType& x, 
                                                 ::xml_schema::error_handler& eh,
                                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::xml_schema::flags f = 0);

    void
    SurfaceProfileNonUniformCharacteristicStats (::std::ostream& os,
                                                 const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType& x, 
                                                 ::xercesc::DOMErrorHandler& eh,
                                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SurfaceProfileNonUniformCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                                 const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType& x, 
                                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::xml_schema::flags f = 0);

    void
    SurfaceProfileNonUniformCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                                 const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType& x, 
                                                 ::xml_schema::error_handler& eh,
                                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::xml_schema::flags f = 0);

    void
    SurfaceProfileNonUniformCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                                 const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType& x, 
                                                 ::xercesc::DOMErrorHandler& eh,
                                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SurfaceProfileNonUniformCharacteristicStats (::xercesc::DOMDocument& d,
                                                 const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType& x,
                                                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SurfaceProfileNonUniformCharacteristicStats (const ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType& x, 
                                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SurfaceTextureCharacteristicStats (::std::ostream& os,
                                       const ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    SurfaceTextureCharacteristicStats (::std::ostream& os,
                                       const ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    SurfaceTextureCharacteristicStats (::std::ostream& os,
                                       const ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SurfaceTextureCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    SurfaceTextureCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType& x, 
                                       ::xml_schema::error_handler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    void
    SurfaceTextureCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                       const ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SurfaceTextureCharacteristicStats (::xercesc::DOMDocument& d,
                                       const ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType& x,
                                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SurfaceTextureCharacteristicStats (const ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType& x, 
                                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SymmetryCharacteristicStats (::std::ostream& os,
                                 const ::xsd::qif2::SymmetryCharacteristicStatsEvalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    SymmetryCharacteristicStats (::std::ostream& os,
                                 const ::xsd::qif2::SymmetryCharacteristicStatsEvalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    SymmetryCharacteristicStats (::std::ostream& os,
                                 const ::xsd::qif2::SymmetryCharacteristicStatsEvalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SymmetryCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::SymmetryCharacteristicStatsEvalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    SymmetryCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::SymmetryCharacteristicStatsEvalType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    SymmetryCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::SymmetryCharacteristicStatsEvalType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SymmetryCharacteristicStats (::xercesc::DOMDocument& d,
                                 const ::xsd::qif2::SymmetryCharacteristicStatsEvalType& x,
                                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SymmetryCharacteristicStats (const ::xsd::qif2::SymmetryCharacteristicStatsEvalType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ThicknessCharacteristicStats (::std::ostream& os,
                                  const ::xsd::qif2::ThicknessCharacteristicStatsEvalType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    ThicknessCharacteristicStats (::std::ostream& os,
                                  const ::xsd::qif2::ThicknessCharacteristicStatsEvalType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    ThicknessCharacteristicStats (::std::ostream& os,
                                  const ::xsd::qif2::ThicknessCharacteristicStatsEvalType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ThicknessCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::ThicknessCharacteristicStatsEvalType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    ThicknessCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::ThicknessCharacteristicStatsEvalType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    ThicknessCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                  const ::xsd::qif2::ThicknessCharacteristicStatsEvalType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ThicknessCharacteristicStats (::xercesc::DOMDocument& d,
                                  const ::xsd::qif2::ThicknessCharacteristicStatsEvalType& x,
                                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ThicknessCharacteristicStats (const ::xsd::qif2::ThicknessCharacteristicStatsEvalType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ThreadCharacteristicStats (::std::ostream& os,
                               const ::xsd::qif2::ThreadCharacteristicStatsEvalType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ThreadCharacteristicStats (::std::ostream& os,
                               const ::xsd::qif2::ThreadCharacteristicStatsEvalType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ThreadCharacteristicStats (::std::ostream& os,
                               const ::xsd::qif2::ThreadCharacteristicStatsEvalType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ThreadCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::ThreadCharacteristicStatsEvalType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ThreadCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::ThreadCharacteristicStatsEvalType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ThreadCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::ThreadCharacteristicStatsEvalType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ThreadCharacteristicStats (::xercesc::DOMDocument& d,
                               const ::xsd::qif2::ThreadCharacteristicStatsEvalType& x,
                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ThreadCharacteristicStats (const ::xsd::qif2::ThreadCharacteristicStatsEvalType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    TotalRunoutCharacteristicStats (::std::ostream& os,
                                    const ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    TotalRunoutCharacteristicStats (::std::ostream& os,
                                    const ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    TotalRunoutCharacteristicStats (::std::ostream& os,
                                    const ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    TotalRunoutCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    TotalRunoutCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    TotalRunoutCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    TotalRunoutCharacteristicStats (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    TotalRunoutCharacteristicStats (const ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedAttributeCharacteristicStats (::std::ostream& os,
                                             const ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedAttributeCharacteristicStats (::std::ostream& os,
                                             const ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType& x, 
                                             ::xml_schema::error_handler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedAttributeCharacteristicStats (::std::ostream& os,
                                             const ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType& x, 
                                             ::xercesc::DOMErrorHandler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedAttributeCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedAttributeCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType& x, 
                                             ::xml_schema::error_handler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    void
    UserDefinedAttributeCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                             const ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType& x, 
                                             ::xercesc::DOMErrorHandler& eh,
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             const ::std::string& e = "UTF-8",
                                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedAttributeCharacteristicStats (::xercesc::DOMDocument& d,
                                             const ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType& x,
                                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedAttributeCharacteristicStats (const ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType& x, 
                                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedLinearCharacteristicStats (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedLinearCharacteristicStats (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedLinearCharacteristicStats (::std::ostream& os,
                                          const ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedLinearCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedLinearCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType& x, 
                                          ::xml_schema::error_handler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    void
    UserDefinedLinearCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                          const ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedLinearCharacteristicStats (::xercesc::DOMDocument& d,
                                          const ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType& x,
                                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedLinearCharacteristicStats (const ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType& x, 
                                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedAngularCharacteristicStats (::std::ostream& os,
                                           const ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    UserDefinedAngularCharacteristicStats (::std::ostream& os,
                                           const ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType& x, 
                                           ::xml_schema::error_handler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    UserDefinedAngularCharacteristicStats (::std::ostream& os,
                                           const ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedAngularCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    UserDefinedAngularCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType& x, 
                                           ::xml_schema::error_handler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    void
    UserDefinedAngularCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                           const ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedAngularCharacteristicStats (::xercesc::DOMDocument& d,
                                           const ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType& x,
                                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedAngularCharacteristicStats (const ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType& x, 
                                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedAreaCharacteristicStats (::std::ostream& os,
                                        const ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedAreaCharacteristicStats (::std::ostream& os,
                                        const ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedAreaCharacteristicStats (::std::ostream& os,
                                        const ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedAreaCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedAreaCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedAreaCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedAreaCharacteristicStats (::xercesc::DOMDocument& d,
                                        const ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType& x,
                                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedAreaCharacteristicStats (const ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedForceCharacteristicStats (::std::ostream& os,
                                         const ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedForceCharacteristicStats (::std::ostream& os,
                                         const ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedForceCharacteristicStats (::std::ostream& os,
                                         const ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedForceCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedForceCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedForceCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedForceCharacteristicStats (::xercesc::DOMDocument& d,
                                         const ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType& x,
                                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedForceCharacteristicStats (const ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedMassCharacteristicStats (::std::ostream& os,
                                        const ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedMassCharacteristicStats (::std::ostream& os,
                                        const ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedMassCharacteristicStats (::std::ostream& os,
                                        const ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedMassCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedMassCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedMassCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedMassCharacteristicStats (::xercesc::DOMDocument& d,
                                        const ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType& x,
                                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedMassCharacteristicStats (const ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedPressureCharacteristicStats (::std::ostream& os,
                                            const ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    UserDefinedPressureCharacteristicStats (::std::ostream& os,
                                            const ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType& x, 
                                            ::xml_schema::error_handler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    UserDefinedPressureCharacteristicStats (::std::ostream& os,
                                            const ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedPressureCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    UserDefinedPressureCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType& x, 
                                            ::xml_schema::error_handler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    void
    UserDefinedPressureCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                            const ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedPressureCharacteristicStats (::xercesc::DOMDocument& d,
                                            const ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType& x,
                                            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedPressureCharacteristicStats (const ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType& x, 
                                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedSpeedCharacteristicStats (::std::ostream& os,
                                         const ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedSpeedCharacteristicStats (::std::ostream& os,
                                         const ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedSpeedCharacteristicStats (::std::ostream& os,
                                         const ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedSpeedCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedSpeedCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType& x, 
                                         ::xml_schema::error_handler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    void
    UserDefinedSpeedCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                         const ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType& x, 
                                         ::xercesc::DOMErrorHandler& eh,
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         const ::std::string& e = "UTF-8",
                                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedSpeedCharacteristicStats (::xercesc::DOMDocument& d,
                                         const ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType& x,
                                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedSpeedCharacteristicStats (const ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType& x, 
                                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedTemperatureCharacteristicStats (::std::ostream& os,
                                               const ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType& x, 
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    void
    UserDefinedTemperatureCharacteristicStats (::std::ostream& os,
                                               const ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType& x, 
                                               ::xml_schema::error_handler& eh,
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    void
    UserDefinedTemperatureCharacteristicStats (::std::ostream& os,
                                               const ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType& x, 
                                               ::xercesc::DOMErrorHandler& eh,
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedTemperatureCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                               const ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType& x, 
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    void
    UserDefinedTemperatureCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                               const ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType& x, 
                                               ::xml_schema::error_handler& eh,
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    void
    UserDefinedTemperatureCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                               const ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType& x, 
                                               ::xercesc::DOMErrorHandler& eh,
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               const ::std::string& e = "UTF-8",
                                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedTemperatureCharacteristicStats (::xercesc::DOMDocument& d,
                                               const ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType& x,
                                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedTemperatureCharacteristicStats (const ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType& x, 
                                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedTimeCharacteristicStats (::std::ostream& os,
                                        const ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedTimeCharacteristicStats (::std::ostream& os,
                                        const ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedTimeCharacteristicStats (::std::ostream& os,
                                        const ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedTimeCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedTimeCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedTimeCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedTimeCharacteristicStats (::xercesc::DOMDocument& d,
                                        const ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType& x,
                                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedTimeCharacteristicStats (const ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UserDefinedUnitCharacteristicStats (::std::ostream& os,
                                        const ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedUnitCharacteristicStats (::std::ostream& os,
                                        const ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedUnitCharacteristicStats (::std::ostream& os,
                                        const ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UserDefinedUnitCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedUnitCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType& x, 
                                        ::xml_schema::error_handler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    void
    UserDefinedUnitCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                                        const ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType& x, 
                                        ::xercesc::DOMErrorHandler& eh,
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        const ::std::string& e = "UTF-8",
                                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UserDefinedUnitCharacteristicStats (::xercesc::DOMDocument& d,
                                        const ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType& x,
                                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UserDefinedUnitCharacteristicStats (const ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType& x, 
                                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    WidthCharacteristicStats (::std::ostream& os,
                              const ::xsd::qif2::WidthCharacteristicStatsEvalType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    WidthCharacteristicStats (::std::ostream& os,
                              const ::xsd::qif2::WidthCharacteristicStatsEvalType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    WidthCharacteristicStats (::std::ostream& os,
                              const ::xsd::qif2::WidthCharacteristicStatsEvalType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    WidthCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::WidthCharacteristicStatsEvalType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    WidthCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::WidthCharacteristicStatsEvalType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    WidthCharacteristicStats (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::WidthCharacteristicStatsEvalType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    WidthCharacteristicStats (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::WidthCharacteristicStatsEvalType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    WidthCharacteristicStats (const ::xsd::qif2::WidthCharacteristicStatsEvalType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const CharacteristicsStatsType&);

    // Serialize to std::ostream.
    //

    void
    CharacteristicsStats (::std::ostream& os,
                          const ::xsd::qif2::CharacteristicsStatsType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    CharacteristicsStats (::std::ostream& os,
                          const ::xsd::qif2::CharacteristicsStatsType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    CharacteristicsStats (::std::ostream& os,
                          const ::xsd::qif2::CharacteristicsStatsType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CharacteristicsStats (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::CharacteristicsStatsType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    CharacteristicsStats (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::CharacteristicsStatsType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    CharacteristicsStats (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::CharacteristicsStatsType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CharacteristicsStats (::xercesc::DOMDocument& d,
                          const ::xsd::qif2::CharacteristicsStatsType& x,
                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CharacteristicsStats (const ::xsd::qif2::CharacteristicsStatsType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AverageFeatureType&);

    // Serialize to std::ostream.
    //

    void
    AverageFeature (::std::ostream& os,
                    const ::xsd::qif2::AverageFeatureType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AverageFeature (::std::ostream& os,
                    const ::xsd::qif2::AverageFeatureType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AverageFeature (::std::ostream& os,
                    const ::xsd::qif2::AverageFeatureType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AverageFeature (::xercesc::XMLFormatTarget& ft,
                    const ::xsd::qif2::AverageFeatureType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AverageFeature (::xercesc::XMLFormatTarget& ft,
                    const ::xsd::qif2::AverageFeatureType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AverageFeature (::xercesc::XMLFormatTarget& ft,
                    const ::xsd::qif2::AverageFeatureType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AverageFeature (::xercesc::DOMDocument& d,
                    const ::xsd::qif2::AverageFeatureType& x,
                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AverageFeature (const ::xsd::qif2::AverageFeatureType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AverageFeaturesType&);

    // Serialize to std::ostream.
    //

    void
    AverageFeatures (::std::ostream& os,
                     const ::xsd::qif2::AverageFeaturesType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    AverageFeatures (::std::ostream& os,
                     const ::xsd::qif2::AverageFeaturesType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    AverageFeatures (::std::ostream& os,
                     const ::xsd::qif2::AverageFeaturesType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AverageFeatures (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::AverageFeaturesType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    AverageFeatures (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::AverageFeaturesType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    AverageFeatures (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::AverageFeaturesType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AverageFeatures (::xercesc::DOMDocument& d,
                     const ::xsd::qif2::AverageFeaturesType& x,
                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AverageFeatures (const ::xsd::qif2::AverageFeaturesType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const SummaryStatisticsType&);

    void
    operator<< (::xercesc::DOMElement&, const SummaryStatisticsLinearType&);

    void
    operator<< (::xercesc::DOMElement&, const SummaryStatisticsAngularType&);

    void
    operator<< (::xercesc::DOMElement&, const SummaryStatisticsAreaType&);

    void
    operator<< (::xercesc::DOMElement&, const SummaryStatisticsForceType&);

    void
    operator<< (::xercesc::DOMElement&, const SummaryStatisticsMassType&);

    void
    operator<< (::xercesc::DOMElement&, const SummaryStatisticsPressureType&);

    void
    operator<< (::xercesc::DOMElement&, const SummaryStatisticsSpeedType&);

    void
    operator<< (::xercesc::DOMElement&, const SummaryStatisticsTemperatureType&);

    void
    operator<< (::xercesc::DOMElement&, const SummaryStatisticsTimeType&);

    void
    operator<< (::xercesc::DOMElement&, const SummaryStatisticsUserDefinedUnitType&);

    void
    operator<< (::xercesc::DOMElement&, const AssignableCauseEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const AssignableCauseEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const AssignableCauseEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const AssignableCauseType&);

    void
    operator<< (::xercesc::DOMElement&, const AssignableCausesType&);

    void
    operator<< (::xercesc::DOMElement&, const ActionToTakeEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const ActionToTakeEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ActionToTakeEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const CorrectiveActionType&);

    void
    operator<< (::xercesc::DOMElement&, const CorrectiveActionsType&);

    void
    operator<< (::xercesc::DOMElement&, const StudyIssueType&);

    void
    operator<< (::xercesc::DOMElement&, const ControlIssueEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const ControlIssueEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ControlIssueEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const ControlIssueType&);

    void
    operator<< (::xercesc::DOMElement&, const ControlIssueDetailsType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // STATISTICS_HXX

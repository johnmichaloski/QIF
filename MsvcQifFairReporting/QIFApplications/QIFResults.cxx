// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "QIFResults.hxx"

namespace xsd
{
  namespace qif2
  {
    // MeasurementResultsType
    // 

    const MeasurementResultsType::InspectionTraceability_optional& MeasurementResultsType::
    InspectionTraceability () const
    {
      return this->InspectionTraceability_;
    }

    MeasurementResultsType::InspectionTraceability_optional& MeasurementResultsType::
    InspectionTraceability ()
    {
      return this->InspectionTraceability_;
    }

    void MeasurementResultsType::
    InspectionTraceability (const InspectionTraceability_type& x)
    {
      this->InspectionTraceability_.set (x);
    }

    void MeasurementResultsType::
    InspectionTraceability (const InspectionTraceability_optional& x)
    {
      this->InspectionTraceability_ = x;
    }

    void MeasurementResultsType::
    InspectionTraceability (::std::auto_ptr< InspectionTraceability_type > x)
    {
      this->InspectionTraceability_.set (x);
    }

    const MeasurementResultsType::ThisResultsInstanceQPId_optional& MeasurementResultsType::
    ThisResultsInstanceQPId () const
    {
      return this->ThisResultsInstanceQPId_;
    }

    MeasurementResultsType::ThisResultsInstanceQPId_optional& MeasurementResultsType::
    ThisResultsInstanceQPId ()
    {
      return this->ThisResultsInstanceQPId_;
    }

    void MeasurementResultsType::
    ThisResultsInstanceQPId (const ThisResultsInstanceQPId_type& x)
    {
      this->ThisResultsInstanceQPId_.set (x);
    }

    void MeasurementResultsType::
    ThisResultsInstanceQPId (const ThisResultsInstanceQPId_optional& x)
    {
      this->ThisResultsInstanceQPId_ = x;
    }

    void MeasurementResultsType::
    ThisResultsInstanceQPId (::std::auto_ptr< ThisResultsInstanceQPId_type > x)
    {
      this->ThisResultsInstanceQPId_.set (x);
    }

    const MeasurementResultsType::ExternalFileReference_sequence& MeasurementResultsType::
    ExternalFileReference () const
    {
      return this->ExternalFileReference_;
    }

    MeasurementResultsType::ExternalFileReference_sequence& MeasurementResultsType::
    ExternalFileReference ()
    {
      return this->ExternalFileReference_;
    }

    void MeasurementResultsType::
    ExternalFileReference (const ExternalFileReference_sequence& s)
    {
      this->ExternalFileReference_ = s;
    }

    const MeasurementResultsType::MeasuredFeatures_optional& MeasurementResultsType::
    MeasuredFeatures () const
    {
      return this->MeasuredFeatures_;
    }

    MeasurementResultsType::MeasuredFeatures_optional& MeasurementResultsType::
    MeasuredFeatures ()
    {
      return this->MeasuredFeatures_;
    }

    void MeasurementResultsType::
    MeasuredFeatures (const MeasuredFeatures_type& x)
    {
      this->MeasuredFeatures_.set (x);
    }

    void MeasurementResultsType::
    MeasuredFeatures (const MeasuredFeatures_optional& x)
    {
      this->MeasuredFeatures_ = x;
    }

    void MeasurementResultsType::
    MeasuredFeatures (::std::auto_ptr< MeasuredFeatures_type > x)
    {
      this->MeasuredFeatures_.set (x);
    }

    const MeasurementResultsType::MeasuredCharacteristics_optional& MeasurementResultsType::
    MeasuredCharacteristics () const
    {
      return this->MeasuredCharacteristics_;
    }

    MeasurementResultsType::MeasuredCharacteristics_optional& MeasurementResultsType::
    MeasuredCharacteristics ()
    {
      return this->MeasuredCharacteristics_;
    }

    void MeasurementResultsType::
    MeasuredCharacteristics (const MeasuredCharacteristics_type& x)
    {
      this->MeasuredCharacteristics_.set (x);
    }

    void MeasurementResultsType::
    MeasuredCharacteristics (const MeasuredCharacteristics_optional& x)
    {
      this->MeasuredCharacteristics_ = x;
    }

    void MeasurementResultsType::
    MeasuredCharacteristics (::std::auto_ptr< MeasuredCharacteristics_type > x)
    {
      this->MeasuredCharacteristics_.set (x);
    }

    const MeasurementResultsType::CoordinateSystemActualTransforms_optional& MeasurementResultsType::
    CoordinateSystemActualTransforms () const
    {
      return this->CoordinateSystemActualTransforms_;
    }

    MeasurementResultsType::CoordinateSystemActualTransforms_optional& MeasurementResultsType::
    CoordinateSystemActualTransforms ()
    {
      return this->CoordinateSystemActualTransforms_;
    }

    void MeasurementResultsType::
    CoordinateSystemActualTransforms (const CoordinateSystemActualTransforms_type& x)
    {
      this->CoordinateSystemActualTransforms_.set (x);
    }

    void MeasurementResultsType::
    CoordinateSystemActualTransforms (const CoordinateSystemActualTransforms_optional& x)
    {
      this->CoordinateSystemActualTransforms_ = x;
    }

    void MeasurementResultsType::
    CoordinateSystemActualTransforms (::std::auto_ptr< CoordinateSystemActualTransforms_type > x)
    {
      this->CoordinateSystemActualTransforms_.set (x);
    }

    const MeasurementResultsType::InspectionStatus_type& MeasurementResultsType::
    InspectionStatus () const
    {
      return this->InspectionStatus_.get ();
    }

    MeasurementResultsType::InspectionStatus_type& MeasurementResultsType::
    InspectionStatus ()
    {
      return this->InspectionStatus_.get ();
    }

    void MeasurementResultsType::
    InspectionStatus (const InspectionStatus_type& x)
    {
      this->InspectionStatus_.set (x);
    }

    void MeasurementResultsType::
    InspectionStatus (::std::auto_ptr< InspectionStatus_type > x)
    {
      this->InspectionStatus_.set (x);
    }

    const MeasurementResultsType::ActualComponentIds_optional& MeasurementResultsType::
    ActualComponentIds () const
    {
      return this->ActualComponentIds_;
    }

    MeasurementResultsType::ActualComponentIds_optional& MeasurementResultsType::
    ActualComponentIds ()
    {
      return this->ActualComponentIds_;
    }

    void MeasurementResultsType::
    ActualComponentIds (const ActualComponentIds_type& x)
    {
      this->ActualComponentIds_.set (x);
    }

    void MeasurementResultsType::
    ActualComponentIds (const ActualComponentIds_optional& x)
    {
      this->ActualComponentIds_ = x;
    }

    void MeasurementResultsType::
    ActualComponentIds (::std::auto_ptr< ActualComponentIds_type > x)
    {
      this->ActualComponentIds_.set (x);
    }

    const MeasurementResultsType::id_type& MeasurementResultsType::
    id () const
    {
      return this->id_.get ();
    }

    MeasurementResultsType::id_type& MeasurementResultsType::
    id ()
    {
      return this->id_.get ();
    }

    void MeasurementResultsType::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void MeasurementResultsType::
    id (::std::auto_ptr< id_type > x)
    {
      this->id_.set (x);
    }


    // MeasurementsResultsType
    // 

    const MeasurementsResultsType::Version_optional& MeasurementsResultsType::
    Version () const
    {
      return this->Version_;
    }

    MeasurementsResultsType::Version_optional& MeasurementsResultsType::
    Version ()
    {
      return this->Version_;
    }

    void MeasurementsResultsType::
    Version (const Version_type& x)
    {
      this->Version_.set (x);
    }

    void MeasurementsResultsType::
    Version (const Version_optional& x)
    {
      this->Version_ = x;
    }

    void MeasurementsResultsType::
    Version (::std::auto_ptr< Version_type > x)
    {
      this->Version_.set (x);
    }

    const MeasurementsResultsType::MeasurementResults_sequence& MeasurementsResultsType::
    MeasurementResults () const
    {
      return this->MeasurementResults_;
    }

    MeasurementsResultsType::MeasurementResults_sequence& MeasurementsResultsType::
    MeasurementResults ()
    {
      return this->MeasurementResults_;
    }

    void MeasurementsResultsType::
    MeasurementResults (const MeasurementResults_sequence& s)
    {
      this->MeasurementResults_ = s;
    }

    const MeasurementsResultsType::ActualComponentSet_sequence& MeasurementsResultsType::
    ActualComponentSet () const
    {
      return this->ActualComponentSet_;
    }

    MeasurementsResultsType::ActualComponentSet_sequence& MeasurementsResultsType::
    ActualComponentSet ()
    {
      return this->ActualComponentSet_;
    }

    void MeasurementsResultsType::
    ActualComponentSet (const ActualComponentSet_sequence& s)
    {
      this->ActualComponentSet_ = s;
    }

    const MeasurementsResultsType::InspectionTraceability_optional& MeasurementsResultsType::
    InspectionTraceability () const
    {
      return this->InspectionTraceability_;
    }

    MeasurementsResultsType::InspectionTraceability_optional& MeasurementsResultsType::
    InspectionTraceability ()
    {
      return this->InspectionTraceability_;
    }

    void MeasurementsResultsType::
    InspectionTraceability (const InspectionTraceability_type& x)
    {
      this->InspectionTraceability_.set (x);
    }

    void MeasurementsResultsType::
    InspectionTraceability (const InspectionTraceability_optional& x)
    {
      this->InspectionTraceability_ = x;
    }

    void MeasurementsResultsType::
    InspectionTraceability (::std::auto_ptr< InspectionTraceability_type > x)
    {
      this->InspectionTraceability_.set (x);
    }


    // ActualComponentSetType
    // 

    const ActualComponentSetType::ActualComponent_sequence& ActualComponentSetType::
    ActualComponent () const
    {
      return this->ActualComponent_;
    }

    ActualComponentSetType::ActualComponent_sequence& ActualComponentSetType::
    ActualComponent ()
    {
      return this->ActualComponent_;
    }

    void ActualComponentSetType::
    ActualComponent (const ActualComponent_sequence& s)
    {
      this->ActualComponent_ = s;
    }

    const ActualComponentSetType::N_type& ActualComponentSetType::
    N () const
    {
      return this->N_.get ();
    }

    ActualComponentSetType::N_type& ActualComponentSetType::
    N ()
    {
      return this->N_.get ();
    }

    void ActualComponentSetType::
    N (const N_type& x)
    {
      this->N_.set (x);
    }

    void ActualComponentSetType::
    N (::std::auto_ptr< N_type > x)
    {
      this->N_.set (x);
    }


    // ActualComponentType
    // 

    const ActualComponentType::Attributes_optional& ActualComponentType::
    Attributes () const
    {
      return this->Attributes_;
    }

    ActualComponentType::Attributes_optional& ActualComponentType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void ActualComponentType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void ActualComponentType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void ActualComponentType::
    Attributes (::std::auto_ptr< Attributes_type > x)
    {
      this->Attributes_.set (x);
    }

    const ActualComponentType::SerialNumber_optional& ActualComponentType::
    SerialNumber () const
    {
      return this->SerialNumber_;
    }

    ActualComponentType::SerialNumber_optional& ActualComponentType::
    SerialNumber ()
    {
      return this->SerialNumber_;
    }

    void ActualComponentType::
    SerialNumber (const SerialNumber_type& x)
    {
      this->SerialNumber_.set (x);
    }

    void ActualComponentType::
    SerialNumber (const SerialNumber_optional& x)
    {
      this->SerialNumber_ = x;
    }

    void ActualComponentType::
    SerialNumber (::std::auto_ptr< SerialNumber_type > x)
    {
      this->SerialNumber_.set (x);
    }

    const ActualComponentType::AdditionalChanges_optional& ActualComponentType::
    AdditionalChanges () const
    {
      return this->AdditionalChanges_;
    }

    ActualComponentType::AdditionalChanges_optional& ActualComponentType::
    AdditionalChanges ()
    {
      return this->AdditionalChanges_;
    }

    void ActualComponentType::
    AdditionalChanges (const AdditionalChanges_type& x)
    {
      this->AdditionalChanges_.set (x);
    }

    void ActualComponentType::
    AdditionalChanges (const AdditionalChanges_optional& x)
    {
      this->AdditionalChanges_ = x;
    }

    void ActualComponentType::
    AdditionalChanges (::std::auto_ptr< AdditionalChanges_type > x)
    {
      this->AdditionalChanges_.set (x);
    }

    const ActualComponentType::Status_type& ActualComponentType::
    Status () const
    {
      return this->Status_.get ();
    }

    ActualComponentType::Status_type& ActualComponentType::
    Status ()
    {
      return this->Status_.get ();
    }

    void ActualComponentType::
    Status (const Status_type& x)
    {
      this->Status_.set (x);
    }

    void ActualComponentType::
    Status (::std::auto_ptr< Status_type > x)
    {
      this->Status_.set (x);
    }

    const ActualComponentType::Traceability_optional& ActualComponentType::
    Traceability () const
    {
      return this->Traceability_;
    }

    ActualComponentType::Traceability_optional& ActualComponentType::
    Traceability ()
    {
      return this->Traceability_;
    }

    void ActualComponentType::
    Traceability (const Traceability_type& x)
    {
      this->Traceability_.set (x);
    }

    void ActualComponentType::
    Traceability (const Traceability_optional& x)
    {
      this->Traceability_ = x;
    }

    void ActualComponentType::
    Traceability (::std::auto_ptr< Traceability_type > x)
    {
      this->Traceability_.set (x);
    }

    const ActualComponentType::AsmPathId_optional& ActualComponentType::
    AsmPathId () const
    {
      return this->AsmPathId_;
    }

    ActualComponentType::AsmPathId_optional& ActualComponentType::
    AsmPathId ()
    {
      return this->AsmPathId_;
    }

    void ActualComponentType::
    AsmPathId (const AsmPathId_type& x)
    {
      this->AsmPathId_.set (x);
    }

    void ActualComponentType::
    AsmPathId (const AsmPathId_optional& x)
    {
      this->AsmPathId_ = x;
    }

    void ActualComponentType::
    AsmPathId (::std::auto_ptr< AsmPathId_type > x)
    {
      this->AsmPathId_.set (x);
    }

    const ActualComponentType::id_type& ActualComponentType::
    id () const
    {
      return this->id_.get ();
    }

    ActualComponentType::id_type& ActualComponentType::
    id ()
    {
      return this->id_.get ();
    }

    void ActualComponentType::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void ActualComponentType::
    id (::std::auto_ptr< id_type > x)
    {
      this->id_.set (x);
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace xsd
{
  namespace qif2
  {
    // MeasurementResultsType
    //

    MeasurementResultsType::
    MeasurementResultsType (const InspectionStatus_type& InspectionStatus,
                            const id_type& id)
    : ::xml_schema::type (),
      InspectionTraceability_ (this),
      ThisResultsInstanceQPId_ (this),
      ExternalFileReference_ (this),
      MeasuredFeatures_ (this),
      MeasuredCharacteristics_ (this),
      CoordinateSystemActualTransforms_ (this),
      InspectionStatus_ (InspectionStatus, this),
      ActualComponentIds_ (this),
      id_ (id, this)
    {
    }

    MeasurementResultsType::
    MeasurementResultsType (::std::auto_ptr< InspectionStatus_type > InspectionStatus,
                            const id_type& id)
    : ::xml_schema::type (),
      InspectionTraceability_ (this),
      ThisResultsInstanceQPId_ (this),
      ExternalFileReference_ (this),
      MeasuredFeatures_ (this),
      MeasuredCharacteristics_ (this),
      CoordinateSystemActualTransforms_ (this),
      InspectionStatus_ (InspectionStatus, this),
      ActualComponentIds_ (this),
      id_ (id, this)
    {
    }

    MeasurementResultsType::
    MeasurementResultsType (const MeasurementResultsType& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      InspectionTraceability_ (x.InspectionTraceability_, f, this),
      ThisResultsInstanceQPId_ (x.ThisResultsInstanceQPId_, f, this),
      ExternalFileReference_ (x.ExternalFileReference_, f, this),
      MeasuredFeatures_ (x.MeasuredFeatures_, f, this),
      MeasuredCharacteristics_ (x.MeasuredCharacteristics_, f, this),
      CoordinateSystemActualTransforms_ (x.CoordinateSystemActualTransforms_, f, this),
      InspectionStatus_ (x.InspectionStatus_, f, this),
      ActualComponentIds_ (x.ActualComponentIds_, f, this),
      id_ (x.id_, f, this)
    {
    }

    MeasurementResultsType::
    MeasurementResultsType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      InspectionTraceability_ (this),
      ThisResultsInstanceQPId_ (this),
      ExternalFileReference_ (this),
      MeasuredFeatures_ (this),
      MeasuredCharacteristics_ (this),
      CoordinateSystemActualTransforms_ (this),
      InspectionStatus_ (this),
      ActualComponentIds_ (this),
      id_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void MeasurementResultsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // InspectionTraceability
        //
        if (n.name () == "InspectionTraceability" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionTraceability_type > r (
            InspectionTraceability_traits::create (i, f, this));

          if (!this->InspectionTraceability_)
          {
            this->InspectionTraceability_.set (r);
            continue;
          }
        }

        // ThisResultsInstanceQPId
        //
        if (n.name () == "ThisResultsInstanceQPId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ThisResultsInstanceQPId_type > r (
            ThisResultsInstanceQPId_traits::create (i, f, this));

          if (!this->ThisResultsInstanceQPId_)
          {
            this->ThisResultsInstanceQPId_.set (r);
            continue;
          }
        }

        // ExternalFileReference
        //
        if (n.name () == "ExternalFileReference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ExternalFileReference_type > r (
            ExternalFileReference_traits::create (i, f, this));

          this->ExternalFileReference_.push_back (r);
          continue;
        }

        // MeasuredFeatures
        //
        if (n.name () == "MeasuredFeatures" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasuredFeatures_type > r (
            MeasuredFeatures_traits::create (i, f, this));

          if (!this->MeasuredFeatures_)
          {
            this->MeasuredFeatures_.set (r);
            continue;
          }
        }

        // MeasuredCharacteristics
        //
        if (n.name () == "MeasuredCharacteristics" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasuredCharacteristics_type > r (
            MeasuredCharacteristics_traits::create (i, f, this));

          if (!this->MeasuredCharacteristics_)
          {
            this->MeasuredCharacteristics_.set (r);
            continue;
          }
        }

        // CoordinateSystemActualTransforms
        //
        if (n.name () == "CoordinateSystemActualTransforms" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CoordinateSystemActualTransforms_type > r (
            CoordinateSystemActualTransforms_traits::create (i, f, this));

          if (!this->CoordinateSystemActualTransforms_)
          {
            this->CoordinateSystemActualTransforms_.set (r);
            continue;
          }
        }

        // InspectionStatus
        //
        if (n.name () == "InspectionStatus" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionStatus_type > r (
            InspectionStatus_traits::create (i, f, this));

          if (!InspectionStatus_.present ())
          {
            this->InspectionStatus_.set (r);
            continue;
          }
        }

        // ActualComponentIds
        //
        if (n.name () == "ActualComponentIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ActualComponentIds_type > r (
            ActualComponentIds_traits::create (i, f, this));

          if (!this->ActualComponentIds_)
          {
            this->ActualComponentIds_.set (r);
            continue;
          }
        }

        break;
      }

      if (!InspectionStatus_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "InspectionStatus",
          "http://qifstandards.org/xsd/qif2");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          this->id_.set (id_traits::create (i, f, this));
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "id",
          "");
      }
    }

    MeasurementResultsType* MeasurementResultsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class MeasurementResultsType (*this, f, c);
    }

    MeasurementResultsType& MeasurementResultsType::
    operator= (const MeasurementResultsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->InspectionTraceability_ = x.InspectionTraceability_;
        this->ThisResultsInstanceQPId_ = x.ThisResultsInstanceQPId_;
        this->ExternalFileReference_ = x.ExternalFileReference_;
        this->MeasuredFeatures_ = x.MeasuredFeatures_;
        this->MeasuredCharacteristics_ = x.MeasuredCharacteristics_;
        this->CoordinateSystemActualTransforms_ = x.CoordinateSystemActualTransforms_;
        this->InspectionStatus_ = x.InspectionStatus_;
        this->ActualComponentIds_ = x.ActualComponentIds_;
        this->id_ = x.id_;
      }

      return *this;
    }

    MeasurementResultsType::
    ~MeasurementResultsType ()
    {
    }

    // MeasurementsResultsType
    //

    MeasurementsResultsType::
    MeasurementsResultsType ()
    : ::xml_schema::type (),
      Version_ (this),
      MeasurementResults_ (this),
      ActualComponentSet_ (this),
      InspectionTraceability_ (this)
    {
    }

    MeasurementsResultsType::
    MeasurementsResultsType (const MeasurementsResultsType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Version_ (x.Version_, f, this),
      MeasurementResults_ (x.MeasurementResults_, f, this),
      ActualComponentSet_ (x.ActualComponentSet_, f, this),
      InspectionTraceability_ (x.InspectionTraceability_, f, this)
    {
    }

    MeasurementsResultsType::
    MeasurementsResultsType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Version_ (this),
      MeasurementResults_ (this),
      ActualComponentSet_ (this),
      InspectionTraceability_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void MeasurementsResultsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Version
        //
        if (n.name () == "Version" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Version_type > r (
            Version_traits::create (i, f, this));

          if (!this->Version_)
          {
            this->Version_.set (r);
            continue;
          }
        }

        // MeasurementResults
        //
        if (n.name () == "MeasurementResults" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurementResults_type > r (
            MeasurementResults_traits::create (i, f, this));

          this->MeasurementResults_.push_back (r);
          continue;
        }

        // ActualComponentSet
        //
        if (n.name () == "ActualComponentSet" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ActualComponentSet_type > r (
            ActualComponentSet_traits::create (i, f, this));

          this->ActualComponentSet_.push_back (r);
          continue;
        }

        // InspectionTraceability
        //
        if (n.name () == "InspectionTraceability" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionTraceability_type > r (
            InspectionTraceability_traits::create (i, f, this));

          if (!this->InspectionTraceability_)
          {
            this->InspectionTraceability_.set (r);
            continue;
          }
        }

        break;
      }
    }

    MeasurementsResultsType* MeasurementsResultsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class MeasurementsResultsType (*this, f, c);
    }

    MeasurementsResultsType& MeasurementsResultsType::
    operator= (const MeasurementsResultsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Version_ = x.Version_;
        this->MeasurementResults_ = x.MeasurementResults_;
        this->ActualComponentSet_ = x.ActualComponentSet_;
        this->InspectionTraceability_ = x.InspectionTraceability_;
      }

      return *this;
    }

    MeasurementsResultsType::
    ~MeasurementsResultsType ()
    {
    }

    // ActualComponentSetType
    //

    ActualComponentSetType::
    ActualComponentSetType (const N_type& N)
    : ::xml_schema::type (),
      ActualComponent_ (this),
      N_ (N, this)
    {
    }

    ActualComponentSetType::
    ActualComponentSetType (const ActualComponentSetType& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ActualComponent_ (x.ActualComponent_, f, this),
      N_ (x.N_, f, this)
    {
    }

    ActualComponentSetType::
    ActualComponentSetType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ActualComponent_ (this),
      N_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ActualComponentSetType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ActualComponent
        //
        if (n.name () == "ActualComponent" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ActualComponent_type > r (
            ActualComponent_traits::create (i, f, this));

          this->ActualComponent_.push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "N" && n.namespace_ ().empty ())
        {
          this->N_.set (N_traits::create (i, f, this));
          continue;
        }
      }

      if (!N_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "N",
          "");
      }
    }

    ActualComponentSetType* ActualComponentSetType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ActualComponentSetType (*this, f, c);
    }

    ActualComponentSetType& ActualComponentSetType::
    operator= (const ActualComponentSetType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->ActualComponent_ = x.ActualComponent_;
        this->N_ = x.N_;
      }

      return *this;
    }

    ActualComponentSetType::
    ~ActualComponentSetType ()
    {
    }

    // ActualComponentType
    //

    ActualComponentType::
    ActualComponentType (const Status_type& Status,
                         const id_type& id)
    : ::xml_schema::type (),
      Attributes_ (this),
      SerialNumber_ (this),
      AdditionalChanges_ (this),
      Status_ (Status, this),
      Traceability_ (this),
      AsmPathId_ (this),
      id_ (id, this)
    {
    }

    ActualComponentType::
    ActualComponentType (::std::auto_ptr< Status_type > Status,
                         const id_type& id)
    : ::xml_schema::type (),
      Attributes_ (this),
      SerialNumber_ (this),
      AdditionalChanges_ (this),
      Status_ (Status, this),
      Traceability_ (this),
      AsmPathId_ (this),
      id_ (id, this)
    {
    }

    ActualComponentType::
    ActualComponentType (const ActualComponentType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Attributes_ (x.Attributes_, f, this),
      SerialNumber_ (x.SerialNumber_, f, this),
      AdditionalChanges_ (x.AdditionalChanges_, f, this),
      Status_ (x.Status_, f, this),
      Traceability_ (x.Traceability_, f, this),
      AsmPathId_ (x.AsmPathId_, f, this),
      id_ (x.id_, f, this)
    {
    }

    ActualComponentType::
    ActualComponentType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Attributes_ (this),
      SerialNumber_ (this),
      AdditionalChanges_ (this),
      Status_ (this),
      Traceability_ (this),
      AsmPathId_ (this),
      id_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ActualComponentType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Attributes
        //
        if (n.name () == "Attributes" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (r);
            continue;
          }
        }

        // SerialNumber
        //
        if (n.name () == "SerialNumber" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SerialNumber_type > r (
            SerialNumber_traits::create (i, f, this));

          if (!this->SerialNumber_)
          {
            this->SerialNumber_.set (r);
            continue;
          }
        }

        // AdditionalChanges
        //
        if (n.name () == "AdditionalChanges" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AdditionalChanges_type > r (
            AdditionalChanges_traits::create (i, f, this));

          if (!this->AdditionalChanges_)
          {
            this->AdditionalChanges_.set (r);
            continue;
          }
        }

        // Status
        //
        if (n.name () == "Status" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Status_type > r (
            Status_traits::create (i, f, this));

          if (!Status_.present ())
          {
            this->Status_.set (r);
            continue;
          }
        }

        // Traceability
        //
        if (n.name () == "Traceability" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Traceability_type > r (
            Traceability_traits::create (i, f, this));

          if (!this->Traceability_)
          {
            this->Traceability_.set (r);
            continue;
          }
        }

        // AsmPathId
        //
        if (n.name () == "AsmPathId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AsmPathId_type > r (
            AsmPathId_traits::create (i, f, this));

          if (!this->AsmPathId_)
          {
            this->AsmPathId_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Status_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Status",
          "http://qifstandards.org/xsd/qif2");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          this->id_.set (id_traits::create (i, f, this));
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "id",
          "");
      }
    }

    ActualComponentType* ActualComponentType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ActualComponentType (*this, f, c);
    }

    ActualComponentType& ActualComponentType::
    operator= (const ActualComponentType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Attributes_ = x.Attributes_;
        this->SerialNumber_ = x.SerialNumber_;
        this->AdditionalChanges_ = x.AdditionalChanges_;
        this->Status_ = x.Status_;
        this->Traceability_ = x.Traceability_;
        this->AsmPathId_ = x.AsmPathId_;
        this->id_ = x.id_;
      }

      return *this;
    }

    ActualComponentType::
    ~ActualComponentType ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xsd
{
  namespace qif2
  {
    ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType >
    MeasurementsResults (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType > (
        ::xsd::qif2::MeasurementsResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType >
    MeasurementsResults (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType > (
        ::xsd::qif2::MeasurementsResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType >
    MeasurementsResults (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType > (
        ::xsd::qif2::MeasurementsResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType >
    MeasurementsResults (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::MeasurementsResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType >
    MeasurementsResults (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::MeasurementsResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType >
    MeasurementsResults (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::MeasurementsResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType >
    MeasurementsResults (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::MeasurementsResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType >
    MeasurementsResults (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::MeasurementsResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType >
    MeasurementsResults (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::MeasurementsResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType >
    MeasurementsResults (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType > (
        ::xsd::qif2::MeasurementsResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType >
    MeasurementsResults (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType > (
        ::xsd::qif2::MeasurementsResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType >
    MeasurementsResults (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType > (
        ::xsd::qif2::MeasurementsResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType >
    MeasurementsResults (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType > (
          ::xsd::qif2::MeasurementsResults (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "MeasurementsResults" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::MeasurementsResultsType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "MeasurementsResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType >
    MeasurementsResults (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "MeasurementsResults" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::MeasurementsResultsType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::MeasurementsResultsType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "MeasurementsResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType >
    ActualComponentSet (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType > (
        ::xsd::qif2::ActualComponentSet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType >
    ActualComponentSet (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType > (
        ::xsd::qif2::ActualComponentSet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType >
    ActualComponentSet (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType > (
        ::xsd::qif2::ActualComponentSet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType >
    ActualComponentSet (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ActualComponentSet (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType >
    ActualComponentSet (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ActualComponentSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType >
    ActualComponentSet (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ActualComponentSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType >
    ActualComponentSet (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ActualComponentSet (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType >
    ActualComponentSet (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ActualComponentSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType >
    ActualComponentSet (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ActualComponentSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType >
    ActualComponentSet (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType > (
        ::xsd::qif2::ActualComponentSet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType >
    ActualComponentSet (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType > (
        ::xsd::qif2::ActualComponentSet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType >
    ActualComponentSet (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType > (
        ::xsd::qif2::ActualComponentSet (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType >
    ActualComponentSet (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType > (
          ::xsd::qif2::ActualComponentSet (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ActualComponentSet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ActualComponentSetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ActualComponentSet",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType >
    ActualComponentSet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ActualComponentSet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ActualComponentSetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ActualComponentSetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ActualComponentSet",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentType >
    ActualComponent (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::ActualComponentType > (
        ::xsd::qif2::ActualComponent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentType >
    ActualComponent (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ActualComponentType > (
        ::xsd::qif2::ActualComponent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentType >
    ActualComponent (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ActualComponentType > (
        ::xsd::qif2::ActualComponent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentType >
    ActualComponent (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ActualComponent (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentType >
    ActualComponent (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ActualComponent (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentType >
    ActualComponent (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ActualComponent (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentType >
    ActualComponent (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ActualComponent (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentType >
    ActualComponent (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ActualComponent (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentType >
    ActualComponent (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ActualComponent (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentType >
    ActualComponent (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::ActualComponentType > (
        ::xsd::qif2::ActualComponent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentType >
    ActualComponent (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ActualComponentType > (
        ::xsd::qif2::ActualComponent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentType >
    ActualComponent (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ActualComponentType > (
        ::xsd::qif2::ActualComponent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentType >
    ActualComponent (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::ActualComponentType > (
          ::xsd::qif2::ActualComponent (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ActualComponent" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ActualComponentType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ActualComponentType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ActualComponent",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ActualComponentType >
    ActualComponent (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ActualComponent" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ActualComponentType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ActualComponentType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ActualComponent",
        "http://qifstandards.org/xsd/qif2");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace xsd
{
  namespace qif2
  {
    void
    operator<< (::xercesc::DOMElement& e, const MeasurementResultsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // InspectionTraceability
      //
      if (i.InspectionTraceability ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionTraceability",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectionTraceability ();
      }

      // ThisResultsInstanceQPId
      //
      if (i.ThisResultsInstanceQPId ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ThisResultsInstanceQPId",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ThisResultsInstanceQPId ();
      }

      // ExternalFileReference
      //
      for (MeasurementResultsType::ExternalFileReference_const_iterator
           b (i.ExternalFileReference ().begin ()), n (i.ExternalFileReference ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ExternalFileReference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // MeasuredFeatures
      //
      if (i.MeasuredFeatures ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MeasuredFeatures",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MeasuredFeatures ();
      }

      // MeasuredCharacteristics
      //
      if (i.MeasuredCharacteristics ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MeasuredCharacteristics",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MeasuredCharacteristics ();
      }

      // CoordinateSystemActualTransforms
      //
      if (i.CoordinateSystemActualTransforms ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "CoordinateSystemActualTransforms",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.CoordinateSystemActualTransforms ();
      }

      // InspectionStatus
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionStatus",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.InspectionStatus ();
      }

      // ActualComponentIds
      //
      if (i.ActualComponentIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ActualComponentIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ActualComponentIds ();
      }

      // id
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "id",
            e));

        a << i.id ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const MeasurementsResultsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Version
      //
      if (i.Version ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Version",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Version ();
      }

      // MeasurementResults
      //
      for (MeasurementsResultsType::MeasurementResults_const_iterator
           b (i.MeasurementResults ().begin ()), n (i.MeasurementResults ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MeasurementResults",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // ActualComponentSet
      //
      for (MeasurementsResultsType::ActualComponentSet_const_iterator
           b (i.ActualComponentSet ().begin ()), n (i.ActualComponentSet ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ActualComponentSet",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // InspectionTraceability
      //
      if (i.InspectionTraceability ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionTraceability",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectionTraceability ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const ActualComponentSetType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // ActualComponent
      //
      for (ActualComponentSetType::ActualComponent_const_iterator
           b (i.ActualComponent ().begin ()), n (i.ActualComponent ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ActualComponent",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // N
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "N",
            e));

        a << i.N ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const ActualComponentType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Attributes
      //
      if (i.Attributes ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Attributes",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Attributes ();
      }

      // SerialNumber
      //
      if (i.SerialNumber ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SerialNumber",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.SerialNumber ();
      }

      // AdditionalChanges
      //
      if (i.AdditionalChanges ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AdditionalChanges",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.AdditionalChanges ();
      }

      // Status
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Status",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.Status ();
      }

      // Traceability
      //
      if (i.Traceability ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Traceability",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Traceability ();
      }

      // AsmPathId
      //
      if (i.AsmPathId ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AsmPathId",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.AsmPathId ();
      }

      // id
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "id",
            e));

        a << i.id ();
      }
    }

    void
    MeasurementsResults (::std::ostream& o,
                         const ::xsd::qif2::MeasurementsResultsType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::MeasurementsResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    MeasurementsResults (::std::ostream& o,
                         const ::xsd::qif2::MeasurementsResultsType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::MeasurementsResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    MeasurementsResults (::std::ostream& o,
                         const ::xsd::qif2::MeasurementsResultsType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::MeasurementsResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    MeasurementsResults (::xercesc::XMLFormatTarget& t,
                         const ::xsd::qif2::MeasurementsResultsType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::MeasurementsResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    MeasurementsResults (::xercesc::XMLFormatTarget& t,
                         const ::xsd::qif2::MeasurementsResultsType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::MeasurementsResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    MeasurementsResults (::xercesc::XMLFormatTarget& t,
                         const ::xsd::qif2::MeasurementsResultsType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::MeasurementsResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    MeasurementsResults (::xercesc::DOMDocument& d,
                         const ::xsd::qif2::MeasurementsResultsType& s,
                         ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "MeasurementsResults" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MeasurementsResults",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    MeasurementsResults (const ::xsd::qif2::MeasurementsResultsType& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "MeasurementsResults",
          "http://qifstandards.org/xsd/qif2",
          m, f));

      ::xsd::qif2::MeasurementsResults (*d, s, f);
      return d;
    }

    void
    ActualComponentSet (::std::ostream& o,
                        const ::xsd::qif2::ActualComponentSetType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ActualComponentSet (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ActualComponentSet (::std::ostream& o,
                        const ::xsd::qif2::ActualComponentSetType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ActualComponentSet (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ActualComponentSet (::std::ostream& o,
                        const ::xsd::qif2::ActualComponentSetType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ActualComponentSet (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ActualComponentSet (::xercesc::XMLFormatTarget& t,
                        const ::xsd::qif2::ActualComponentSetType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ActualComponentSet (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ActualComponentSet (::xercesc::XMLFormatTarget& t,
                        const ::xsd::qif2::ActualComponentSetType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ActualComponentSet (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ActualComponentSet (::xercesc::XMLFormatTarget& t,
                        const ::xsd::qif2::ActualComponentSetType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ActualComponentSet (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ActualComponentSet (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::ActualComponentSetType& s,
                        ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ActualComponentSet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ActualComponentSet",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ActualComponentSet (const ::xsd::qif2::ActualComponentSetType& s,
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "ActualComponentSet",
          "http://qifstandards.org/xsd/qif2",
          m, f));

      ::xsd::qif2::ActualComponentSet (*d, s, f);
      return d;
    }

    void
    ActualComponent (::std::ostream& o,
                     const ::xsd::qif2::ActualComponentType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ActualComponent (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ActualComponent (::std::ostream& o,
                     const ::xsd::qif2::ActualComponentType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ActualComponent (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ActualComponent (::std::ostream& o,
                     const ::xsd::qif2::ActualComponentType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ActualComponent (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ActualComponent (::xercesc::XMLFormatTarget& t,
                     const ::xsd::qif2::ActualComponentType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ActualComponent (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ActualComponent (::xercesc::XMLFormatTarget& t,
                     const ::xsd::qif2::ActualComponentType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ActualComponent (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ActualComponent (::xercesc::XMLFormatTarget& t,
                     const ::xsd::qif2::ActualComponentType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ActualComponent (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ActualComponent (::xercesc::DOMDocument& d,
                     const ::xsd::qif2::ActualComponentType& s,
                     ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ActualComponent" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ActualComponent",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ActualComponent (const ::xsd::qif2::ActualComponentType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "ActualComponent",
          "http://qifstandards.org/xsd/qif2",
          m, f));

      ::xsd::qif2::ActualComponent (*d, s, f);
      return d;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef QIFPLAN_HXX
#define QIFPLAN_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xsd
{
  namespace qif2
  {
    class MeasurementPlanType;
    class PlanElementBaseType;
    class UnnumberedPlanElementsType;
    class NumberedPlanElementType;
    class NumberedPlanElementsType;
    class ActionBaseType;
    class MeasureEvaluateAllActionType;
    class MeasureEvaluateSpecifiedActionType;
    class EvaluateSpecifiedCharacteristicsActionType;
    class MeasureSpecifiedFeaturesActionType;
    class MeasurandBaseType;
    class EvaluateCharacteristicMeasurandType;
    class EstablishDatumMeasurandType;
    class MeasureSpecifiedMeasurandsActionType;
    class MeasurandsType;
    class ActionMethodBaseType;
    class MeasureFeatureMethodBaseType;
    class CoordinateMeasureFeatureMethodType;
    class GageMeasureFeatureMethodType;
    class ManualMeasureFeatureMethodType;
    class OtherMeasureFeatureMethodType;
    class ActionMethodsType;
    class MeasureActionGroupFunctionEnumType;
    class MeasureActionGroupFunctionType;
    class ActionGroupBaseType;
    class OrderedActionGroupType;
    class UnorderedActionGroupType;
    class PartiallyOrderedActionGroupType;
    class StepWithPredecessorsType;
    class StepsWithPredecessorsType;
    class PredecessorsType;
    class OneOfActionGroupType;
    class PickSomeActionGroupType;
    class WorkInstructionBaseType;
    class TextInstructionType;
    class DocumentFileInstructionType;
    class ImageInstructionType;
    class VideoInstructionType;
    class WorkInstructionsType;
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "../qiflibrary/primitives.hxx"

#include "../qiflibrary/intermediatespmi.hxx"

namespace xsd
{
  namespace qif2
  {
    class MeasurementPlanType: public ::xml_schema::type
    {
      public:
      // Version
      //
      typedef ::xsd::qif2::VersionType Version_type;
      typedef ::xsd::cxx::tree::optional< Version_type > Version_optional;
      typedef ::xsd::cxx::tree::traits< Version_type, char > Version_traits;

      const Version_optional&
      Version () const;

      Version_optional&
      Version ();

      void
      Version (const Version_type& x);

      void
      Version (const Version_optional& x);

      void
      Version (::std::auto_ptr< Version_type > p);

      // RulesUsedQPId
      //
      typedef ::xsd::qif2::QPIdFullReferenceType RulesUsedQPId_type;
      typedef ::xsd::cxx::tree::optional< RulesUsedQPId_type > RulesUsedQPId_optional;
      typedef ::xsd::cxx::tree::traits< RulesUsedQPId_type, char > RulesUsedQPId_traits;

      const RulesUsedQPId_optional&
      RulesUsedQPId () const;

      RulesUsedQPId_optional&
      RulesUsedQPId ();

      void
      RulesUsedQPId (const RulesUsedQPId_type& x);

      void
      RulesUsedQPId (const RulesUsedQPId_optional& x);

      void
      RulesUsedQPId (::std::auto_ptr< RulesUsedQPId_type > p);

      // RulesToUseQPId
      //
      typedef ::xsd::qif2::QPIdFullReferenceType RulesToUseQPId_type;
      typedef ::xsd::cxx::tree::optional< RulesToUseQPId_type > RulesToUseQPId_optional;
      typedef ::xsd::cxx::tree::traits< RulesToUseQPId_type, char > RulesToUseQPId_traits;

      const RulesToUseQPId_optional&
      RulesToUseQPId () const;

      RulesToUseQPId_optional&
      RulesToUseQPId ();

      void
      RulesToUseQPId (const RulesToUseQPId_type& x);

      void
      RulesToUseQPId (const RulesToUseQPId_optional& x);

      void
      RulesToUseQPId (::std::auto_ptr< RulesToUseQPId_type > p);

      // WorkInstructions
      //
      typedef ::xsd::qif2::WorkInstructionsType WorkInstructions_type;
      typedef ::xsd::cxx::tree::optional< WorkInstructions_type > WorkInstructions_optional;
      typedef ::xsd::cxx::tree::traits< WorkInstructions_type, char > WorkInstructions_traits;

      const WorkInstructions_optional&
      WorkInstructions () const;

      WorkInstructions_optional&
      WorkInstructions ();

      void
      WorkInstructions (const WorkInstructions_type& x);

      void
      WorkInstructions (const WorkInstructions_optional& x);

      void
      WorkInstructions (::std::auto_ptr< WorkInstructions_type > p);

      // ActionMethods
      //
      typedef ::xsd::qif2::ActionMethodsType ActionMethods_type;
      typedef ::xsd::cxx::tree::optional< ActionMethods_type > ActionMethods_optional;
      typedef ::xsd::cxx::tree::traits< ActionMethods_type, char > ActionMethods_traits;

      const ActionMethods_optional&
      ActionMethods () const;

      ActionMethods_optional&
      ActionMethods ();

      void
      ActionMethods (const ActionMethods_type& x);

      void
      ActionMethods (const ActionMethods_optional& x);

      void
      ActionMethods (::std::auto_ptr< ActionMethods_type > p);

      // Measurands
      //
      typedef ::xsd::qif2::MeasurandsType Measurands_type;
      typedef ::xsd::cxx::tree::optional< Measurands_type > Measurands_optional;
      typedef ::xsd::cxx::tree::traits< Measurands_type, char > Measurands_traits;

      const Measurands_optional&
      Measurands () const;

      Measurands_optional&
      Measurands ();

      void
      Measurands (const Measurands_type& x);

      void
      Measurands (const Measurands_optional& x);

      void
      Measurands (::std::auto_ptr< Measurands_type > p);

      // PlanRoot
      //
      typedef ::xsd::qif2::ActionGroupBaseType PlanRoot_type;
      typedef ::xsd::cxx::tree::traits< PlanRoot_type, char > PlanRoot_traits;

      const PlanRoot_type&
      PlanRoot () const;

      PlanRoot_type&
      PlanRoot ();

      void
      PlanRoot (const PlanRoot_type& x);

      void
      PlanRoot (::std::auto_ptr< PlanRoot_type > p);

      // Constructors.
      //
      MeasurementPlanType (const PlanRoot_type&);

      MeasurementPlanType (::std::auto_ptr< PlanRoot_type >);

      MeasurementPlanType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      MeasurementPlanType (const MeasurementPlanType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual MeasurementPlanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      MeasurementPlanType&
      operator= (const MeasurementPlanType& x);

      virtual 
      ~MeasurementPlanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Version_optional Version_;
      RulesUsedQPId_optional RulesUsedQPId_;
      RulesToUseQPId_optional RulesToUseQPId_;
      WorkInstructions_optional WorkInstructions_;
      ActionMethods_optional ActionMethods_;
      Measurands_optional Measurands_;
      ::xsd::cxx::tree::one< PlanRoot_type > PlanRoot_;
    };

    class PlanElementBaseType: public ::xml_schema::type
    {
      public:
      // WorkInstructionIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType WorkInstructionIds_type;
      typedef ::xsd::cxx::tree::optional< WorkInstructionIds_type > WorkInstructionIds_optional;
      typedef ::xsd::cxx::tree::traits< WorkInstructionIds_type, char > WorkInstructionIds_traits;

      const WorkInstructionIds_optional&
      WorkInstructionIds () const;

      WorkInstructionIds_optional&
      WorkInstructionIds ();

      void
      WorkInstructionIds (const WorkInstructionIds_type& x);

      void
      WorkInstructionIds (const WorkInstructionIds_optional& x);

      void
      WorkInstructionIds (::std::auto_ptr< WorkInstructionIds_type > p);

      // Constructors.
      //
      PlanElementBaseType ();

      PlanElementBaseType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      PlanElementBaseType (const PlanElementBaseType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual PlanElementBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PlanElementBaseType&
      operator= (const PlanElementBaseType& x);

      virtual 
      ~PlanElementBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      WorkInstructionIds_optional WorkInstructionIds_;
    };

    class UnnumberedPlanElementsType: public ::xml_schema::type
    {
      public:
      // PlanElement
      //
      typedef ::xsd::qif2::PlanElementBaseType PlanElement_type;
      typedef ::xsd::cxx::tree::sequence< PlanElement_type > PlanElement_sequence;
      typedef PlanElement_sequence::iterator PlanElement_iterator;
      typedef PlanElement_sequence::const_iterator PlanElement_const_iterator;
      typedef ::xsd::cxx::tree::traits< PlanElement_type, char > PlanElement_traits;

      const PlanElement_sequence&
      PlanElement () const;

      PlanElement_sequence&
      PlanElement ();

      void
      PlanElement (const PlanElement_sequence& s);

      // Constructors.
      //
      UnnumberedPlanElementsType ();

      UnnumberedPlanElementsType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      UnnumberedPlanElementsType (const UnnumberedPlanElementsType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual UnnumberedPlanElementsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UnnumberedPlanElementsType&
      operator= (const UnnumberedPlanElementsType& x);

      virtual 
      ~UnnumberedPlanElementsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      PlanElement_sequence PlanElement_;
    };

    class NumberedPlanElementType: public ::xml_schema::type
    {
      public:
      // SequenceNumber
      //
      typedef ::xml_schema::positive_integer SequenceNumber_type;
      typedef ::xsd::cxx::tree::traits< SequenceNumber_type, char > SequenceNumber_traits;

      const SequenceNumber_type&
      SequenceNumber () const;

      SequenceNumber_type&
      SequenceNumber ();

      void
      SequenceNumber (const SequenceNumber_type& x);

      // PlanElement
      //
      typedef ::xsd::qif2::PlanElementBaseType PlanElement_type;
      typedef ::xsd::cxx::tree::traits< PlanElement_type, char > PlanElement_traits;

      const PlanElement_type&
      PlanElement () const;

      PlanElement_type&
      PlanElement ();

      void
      PlanElement (const PlanElement_type& x);

      void
      PlanElement (::std::auto_ptr< PlanElement_type > p);

      // Constructors.
      //
      NumberedPlanElementType (const SequenceNumber_type&,
                               const PlanElement_type&);

      NumberedPlanElementType (const SequenceNumber_type&,
                               ::std::auto_ptr< PlanElement_type >);

      NumberedPlanElementType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      NumberedPlanElementType (const NumberedPlanElementType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual NumberedPlanElementType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      NumberedPlanElementType&
      operator= (const NumberedPlanElementType& x);

      virtual 
      ~NumberedPlanElementType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SequenceNumber_type > SequenceNumber_;
      ::xsd::cxx::tree::one< PlanElement_type > PlanElement_;
    };

    class NumberedPlanElementsType: public ::xml_schema::type
    {
      public:
      // NumberedPlanElement
      //
      typedef ::xsd::qif2::NumberedPlanElementType NumberedPlanElement_type;
      typedef ::xsd::cxx::tree::sequence< NumberedPlanElement_type > NumberedPlanElement_sequence;
      typedef NumberedPlanElement_sequence::iterator NumberedPlanElement_iterator;
      typedef NumberedPlanElement_sequence::const_iterator NumberedPlanElement_const_iterator;
      typedef ::xsd::cxx::tree::traits< NumberedPlanElement_type, char > NumberedPlanElement_traits;

      const NumberedPlanElement_sequence&
      NumberedPlanElement () const;

      NumberedPlanElement_sequence&
      NumberedPlanElement ();

      void
      NumberedPlanElement (const NumberedPlanElement_sequence& s);

      // Constructors.
      //
      NumberedPlanElementsType ();

      NumberedPlanElementsType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      NumberedPlanElementsType (const NumberedPlanElementsType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual NumberedPlanElementsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      NumberedPlanElementsType&
      operator= (const NumberedPlanElementsType& x);

      virtual 
      ~NumberedPlanElementsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      NumberedPlanElement_sequence NumberedPlanElement_;
    };

    class ActionBaseType: public ::xsd::qif2::PlanElementBaseType
    {
      public:
      // PreferredActionMethodId
      //
      typedef ::xsd::qif2::QIFReferenceFullType PreferredActionMethodId_type;
      typedef ::xsd::cxx::tree::optional< PreferredActionMethodId_type > PreferredActionMethodId_optional;
      typedef ::xsd::cxx::tree::traits< PreferredActionMethodId_type, char > PreferredActionMethodId_traits;

      const PreferredActionMethodId_optional&
      PreferredActionMethodId () const;

      PreferredActionMethodId_optional&
      PreferredActionMethodId ();

      void
      PreferredActionMethodId (const PreferredActionMethodId_type& x);

      void
      PreferredActionMethodId (const PreferredActionMethodId_optional& x);

      void
      PreferredActionMethodId (::std::auto_ptr< PreferredActionMethodId_type > p);

      // AlternativeActionMethodIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType AlternativeActionMethodIds_type;
      typedef ::xsd::cxx::tree::optional< AlternativeActionMethodIds_type > AlternativeActionMethodIds_optional;
      typedef ::xsd::cxx::tree::traits< AlternativeActionMethodIds_type, char > AlternativeActionMethodIds_traits;

      const AlternativeActionMethodIds_optional&
      AlternativeActionMethodIds () const;

      AlternativeActionMethodIds_optional&
      AlternativeActionMethodIds ();

      void
      AlternativeActionMethodIds (const AlternativeActionMethodIds_type& x);

      void
      AlternativeActionMethodIds (const AlternativeActionMethodIds_optional& x);

      void
      AlternativeActionMethodIds (::std::auto_ptr< AlternativeActionMethodIds_type > p);

      // PreferredResourceIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType PreferredResourceIds_type;
      typedef ::xsd::cxx::tree::optional< PreferredResourceIds_type > PreferredResourceIds_optional;
      typedef ::xsd::cxx::tree::traits< PreferredResourceIds_type, char > PreferredResourceIds_traits;

      const PreferredResourceIds_optional&
      PreferredResourceIds () const;

      PreferredResourceIds_optional&
      PreferredResourceIds ();

      void
      PreferredResourceIds (const PreferredResourceIds_type& x);

      void
      PreferredResourceIds (const PreferredResourceIds_optional& x);

      void
      PreferredResourceIds (::std::auto_ptr< PreferredResourceIds_type > p);

      // Constructors.
      //
      ActionBaseType ();

      ActionBaseType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      ActionBaseType (const ActionBaseType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual ActionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ActionBaseType&
      operator= (const ActionBaseType& x);

      virtual 
      ~ActionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      PreferredActionMethodId_optional PreferredActionMethodId_;
      AlternativeActionMethodIds_optional AlternativeActionMethodIds_;
      PreferredResourceIds_optional PreferredResourceIds_;
    };

    class MeasureEvaluateAllActionType: public ::xsd::qif2::ActionBaseType
    {
      public:
      // Constructors.
      //
      MeasureEvaluateAllActionType ();

      MeasureEvaluateAllActionType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      MeasureEvaluateAllActionType (const MeasureEvaluateAllActionType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual MeasureEvaluateAllActionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~MeasureEvaluateAllActionType ();
    };

    class MeasureEvaluateSpecifiedActionType: public ::xsd::qif2::ActionBaseType
    {
      public:
      // CharacteristicItemIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType CharacteristicItemIds_type;
      typedef ::xsd::cxx::tree::traits< CharacteristicItemIds_type, char > CharacteristicItemIds_traits;

      const CharacteristicItemIds_type&
      CharacteristicItemIds () const;

      CharacteristicItemIds_type&
      CharacteristicItemIds ();

      void
      CharacteristicItemIds (const CharacteristicItemIds_type& x);

      void
      CharacteristicItemIds (::std::auto_ptr< CharacteristicItemIds_type > p);

      // Constructors.
      //
      MeasureEvaluateSpecifiedActionType (const CharacteristicItemIds_type&);

      MeasureEvaluateSpecifiedActionType (::std::auto_ptr< CharacteristicItemIds_type >);

      MeasureEvaluateSpecifiedActionType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      MeasureEvaluateSpecifiedActionType (const MeasureEvaluateSpecifiedActionType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual MeasureEvaluateSpecifiedActionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      MeasureEvaluateSpecifiedActionType&
      operator= (const MeasureEvaluateSpecifiedActionType& x);

      virtual 
      ~MeasureEvaluateSpecifiedActionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< CharacteristicItemIds_type > CharacteristicItemIds_;
    };

    class EvaluateSpecifiedCharacteristicsActionType: public ::xsd::qif2::ActionBaseType
    {
      public:
      // CharacteristicItemIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType CharacteristicItemIds_type;
      typedef ::xsd::cxx::tree::traits< CharacteristicItemIds_type, char > CharacteristicItemIds_traits;

      const CharacteristicItemIds_type&
      CharacteristicItemIds () const;

      CharacteristicItemIds_type&
      CharacteristicItemIds ();

      void
      CharacteristicItemIds (const CharacteristicItemIds_type& x);

      void
      CharacteristicItemIds (::std::auto_ptr< CharacteristicItemIds_type > p);

      // Constructors.
      //
      EvaluateSpecifiedCharacteristicsActionType (const CharacteristicItemIds_type&);

      EvaluateSpecifiedCharacteristicsActionType (::std::auto_ptr< CharacteristicItemIds_type >);

      EvaluateSpecifiedCharacteristicsActionType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      EvaluateSpecifiedCharacteristicsActionType (const EvaluateSpecifiedCharacteristicsActionType& x,
                                                  ::xml_schema::flags f = 0,
                                                  ::xml_schema::container* c = 0);

      virtual EvaluateSpecifiedCharacteristicsActionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EvaluateSpecifiedCharacteristicsActionType&
      operator= (const EvaluateSpecifiedCharacteristicsActionType& x);

      virtual 
      ~EvaluateSpecifiedCharacteristicsActionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< CharacteristicItemIds_type > CharacteristicItemIds_;
    };

    class MeasureSpecifiedFeaturesActionType: public ::xsd::qif2::ActionBaseType
    {
      public:
      // FeatureItemIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType FeatureItemIds_type;
      typedef ::xsd::cxx::tree::traits< FeatureItemIds_type, char > FeatureItemIds_traits;

      const FeatureItemIds_type&
      FeatureItemIds () const;

      FeatureItemIds_type&
      FeatureItemIds ();

      void
      FeatureItemIds (const FeatureItemIds_type& x);

      void
      FeatureItemIds (::std::auto_ptr< FeatureItemIds_type > p);

      // Constructors.
      //
      MeasureSpecifiedFeaturesActionType (const FeatureItemIds_type&);

      MeasureSpecifiedFeaturesActionType (::std::auto_ptr< FeatureItemIds_type >);

      MeasureSpecifiedFeaturesActionType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      MeasureSpecifiedFeaturesActionType (const MeasureSpecifiedFeaturesActionType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual MeasureSpecifiedFeaturesActionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      MeasureSpecifiedFeaturesActionType&
      operator= (const MeasureSpecifiedFeaturesActionType& x);

      virtual 
      ~MeasureSpecifiedFeaturesActionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< FeatureItemIds_type > FeatureItemIds_;
    };

    class MeasurandBaseType: public ::xml_schema::type
    {
      public:
      // id
      //
      typedef ::xsd::qif2::QIFIdType id_type;
      typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

      const id_type&
      id () const;

      id_type&
      id ();

      void
      id (const id_type& x);

      void
      id (::std::auto_ptr< id_type > p);

      // Constructors.
      //
      MeasurandBaseType (const id_type&);

      MeasurandBaseType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      MeasurandBaseType (const MeasurandBaseType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual MeasurandBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      MeasurandBaseType&
      operator= (const MeasurandBaseType& x);

      virtual 
      ~MeasurandBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< id_type > id_;
    };

    class EvaluateCharacteristicMeasurandType: public ::xsd::qif2::MeasurandBaseType
    {
      public:
      // CharacteristicItemId
      //
      typedef ::xsd::qif2::QIFReferenceFullType CharacteristicItemId_type;
      typedef ::xsd::cxx::tree::traits< CharacteristicItemId_type, char > CharacteristicItemId_traits;

      const CharacteristicItemId_type&
      CharacteristicItemId () const;

      CharacteristicItemId_type&
      CharacteristicItemId ();

      void
      CharacteristicItemId (const CharacteristicItemId_type& x);

      void
      CharacteristicItemId (::std::auto_ptr< CharacteristicItemId_type > p);

      // Constructors.
      //
      EvaluateCharacteristicMeasurandType (const id_type&,
                                           const CharacteristicItemId_type&);

      EvaluateCharacteristicMeasurandType (const id_type&,
                                           ::std::auto_ptr< CharacteristicItemId_type >);

      EvaluateCharacteristicMeasurandType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      EvaluateCharacteristicMeasurandType (const EvaluateCharacteristicMeasurandType& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

      virtual EvaluateCharacteristicMeasurandType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EvaluateCharacteristicMeasurandType&
      operator= (const EvaluateCharacteristicMeasurandType& x);

      virtual 
      ~EvaluateCharacteristicMeasurandType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< CharacteristicItemId_type > CharacteristicItemId_;
    };

    class EstablishDatumMeasurandType: public ::xsd::qif2::MeasurandBaseType
    {
      public:
      // DatumDefinitionId
      //
      typedef ::xsd::qif2::QIFReferenceFullType DatumDefinitionId_type;
      typedef ::xsd::cxx::tree::traits< DatumDefinitionId_type, char > DatumDefinitionId_traits;

      const DatumDefinitionId_type&
      DatumDefinitionId () const;

      DatumDefinitionId_type&
      DatumDefinitionId ();

      void
      DatumDefinitionId (const DatumDefinitionId_type& x);

      void
      DatumDefinitionId (::std::auto_ptr< DatumDefinitionId_type > p);

      // DatumReferenceFrameId
      //
      typedef ::xsd::qif2::QIFReferenceFullType DatumReferenceFrameId_type;
      typedef ::xsd::cxx::tree::traits< DatumReferenceFrameId_type, char > DatumReferenceFrameId_traits;

      const DatumReferenceFrameId_type&
      DatumReferenceFrameId () const;

      DatumReferenceFrameId_type&
      DatumReferenceFrameId ();

      void
      DatumReferenceFrameId (const DatumReferenceFrameId_type& x);

      void
      DatumReferenceFrameId (::std::auto_ptr< DatumReferenceFrameId_type > p);

      // Constructors.
      //
      EstablishDatumMeasurandType (const id_type&,
                                   const DatumDefinitionId_type&,
                                   const DatumReferenceFrameId_type&);

      EstablishDatumMeasurandType (const id_type&,
                                   ::std::auto_ptr< DatumDefinitionId_type >,
                                   ::std::auto_ptr< DatumReferenceFrameId_type >);

      EstablishDatumMeasurandType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      EstablishDatumMeasurandType (const EstablishDatumMeasurandType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual EstablishDatumMeasurandType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EstablishDatumMeasurandType&
      operator= (const EstablishDatumMeasurandType& x);

      virtual 
      ~EstablishDatumMeasurandType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< DatumDefinitionId_type > DatumDefinitionId_;
      ::xsd::cxx::tree::one< DatumReferenceFrameId_type > DatumReferenceFrameId_;
    };

    class MeasureSpecifiedMeasurandsActionType: public ::xsd::qif2::ActionBaseType
    {
      public:
      // MeasurandIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType MeasurandIds_type;
      typedef ::xsd::cxx::tree::traits< MeasurandIds_type, char > MeasurandIds_traits;

      const MeasurandIds_type&
      MeasurandIds () const;

      MeasurandIds_type&
      MeasurandIds ();

      void
      MeasurandIds (const MeasurandIds_type& x);

      void
      MeasurandIds (::std::auto_ptr< MeasurandIds_type > p);

      // Constructors.
      //
      MeasureSpecifiedMeasurandsActionType (const MeasurandIds_type&);

      MeasureSpecifiedMeasurandsActionType (::std::auto_ptr< MeasurandIds_type >);

      MeasureSpecifiedMeasurandsActionType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      MeasureSpecifiedMeasurandsActionType (const MeasureSpecifiedMeasurandsActionType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual MeasureSpecifiedMeasurandsActionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      MeasureSpecifiedMeasurandsActionType&
      operator= (const MeasureSpecifiedMeasurandsActionType& x);

      virtual 
      ~MeasureSpecifiedMeasurandsActionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< MeasurandIds_type > MeasurandIds_;
    };

    class MeasurandsType: public ::xml_schema::type
    {
      public:
      // Measurand
      //
      typedef ::xsd::qif2::MeasurandBaseType Measurand_type;
      typedef ::xsd::cxx::tree::sequence< Measurand_type > Measurand_sequence;
      typedef Measurand_sequence::iterator Measurand_iterator;
      typedef Measurand_sequence::const_iterator Measurand_const_iterator;
      typedef ::xsd::cxx::tree::traits< Measurand_type, char > Measurand_traits;

      const Measurand_sequence&
      Measurand () const;

      Measurand_sequence&
      Measurand ();

      void
      Measurand (const Measurand_sequence& s);

      // Constructors.
      //
      MeasurandsType ();

      MeasurandsType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      MeasurandsType (const MeasurandsType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual MeasurandsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      MeasurandsType&
      operator= (const MeasurandsType& x);

      virtual 
      ~MeasurandsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Measurand_sequence Measurand_;
    };

    class ActionMethodBaseType: public ::xml_schema::type
    {
      public:
      // ChosenResourceIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType ChosenResourceIds_type;
      typedef ::xsd::cxx::tree::optional< ChosenResourceIds_type > ChosenResourceIds_optional;
      typedef ::xsd::cxx::tree::traits< ChosenResourceIds_type, char > ChosenResourceIds_traits;

      const ChosenResourceIds_optional&
      ChosenResourceIds () const;

      ChosenResourceIds_optional&
      ChosenResourceIds ();

      void
      ChosenResourceIds (const ChosenResourceIds_type& x);

      void
      ChosenResourceIds (const ChosenResourceIds_optional& x);

      void
      ChosenResourceIds (::std::auto_ptr< ChosenResourceIds_type > p);

      // WorkInstructionIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType WorkInstructionIds_type;
      typedef ::xsd::cxx::tree::optional< WorkInstructionIds_type > WorkInstructionIds_optional;
      typedef ::xsd::cxx::tree::traits< WorkInstructionIds_type, char > WorkInstructionIds_traits;

      const WorkInstructionIds_optional&
      WorkInstructionIds () const;

      WorkInstructionIds_optional&
      WorkInstructionIds ();

      void
      WorkInstructionIds (const WorkInstructionIds_type& x);

      void
      WorkInstructionIds (const WorkInstructionIds_optional& x);

      void
      WorkInstructionIds (::std::auto_ptr< WorkInstructionIds_type > p);

      // id
      //
      typedef ::xsd::qif2::QIFIdType id_type;
      typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

      const id_type&
      id () const;

      id_type&
      id ();

      void
      id (const id_type& x);

      void
      id (::std::auto_ptr< id_type > p);

      // Constructors.
      //
      ActionMethodBaseType (const id_type&);

      ActionMethodBaseType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      ActionMethodBaseType (const ActionMethodBaseType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual ActionMethodBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ActionMethodBaseType&
      operator= (const ActionMethodBaseType& x);

      virtual 
      ~ActionMethodBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ChosenResourceIds_optional ChosenResourceIds_;
      WorkInstructionIds_optional WorkInstructionIds_;
      ::xsd::cxx::tree::one< id_type > id_;
    };

    class MeasureFeatureMethodBaseType: public ::xsd::qif2::ActionMethodBaseType
    {
      public:
      // Constructors.
      //
      MeasureFeatureMethodBaseType (const id_type&);

      MeasureFeatureMethodBaseType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      MeasureFeatureMethodBaseType (const MeasureFeatureMethodBaseType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual MeasureFeatureMethodBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~MeasureFeatureMethodBaseType ();
    };

    class CoordinateMeasureFeatureMethodType: public ::xsd::qif2::MeasureFeatureMethodBaseType
    {
      public:
      // NumberOfMeasurementPoints
      //
      typedef ::xml_schema::positive_integer NumberOfMeasurementPoints_type;
      typedef ::xsd::cxx::tree::optional< NumberOfMeasurementPoints_type > NumberOfMeasurementPoints_optional;
      typedef ::xsd::cxx::tree::traits< NumberOfMeasurementPoints_type, char > NumberOfMeasurementPoints_traits;

      const NumberOfMeasurementPoints_optional&
      NumberOfMeasurementPoints () const;

      NumberOfMeasurementPoints_optional&
      NumberOfMeasurementPoints ();

      void
      NumberOfMeasurementPoints (const NumberOfMeasurementPoints_type& x);

      void
      NumberOfMeasurementPoints (const NumberOfMeasurementPoints_optional& x);

      // Constructors.
      //
      CoordinateMeasureFeatureMethodType (const id_type&);

      CoordinateMeasureFeatureMethodType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      CoordinateMeasureFeatureMethodType (const CoordinateMeasureFeatureMethodType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual CoordinateMeasureFeatureMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CoordinateMeasureFeatureMethodType&
      operator= (const CoordinateMeasureFeatureMethodType& x);

      virtual 
      ~CoordinateMeasureFeatureMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      NumberOfMeasurementPoints_optional NumberOfMeasurementPoints_;
    };

    class GageMeasureFeatureMethodType: public ::xsd::qif2::MeasureFeatureMethodBaseType
    {
      public:
      // Constructors.
      //
      GageMeasureFeatureMethodType (const id_type&);

      GageMeasureFeatureMethodType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      GageMeasureFeatureMethodType (const GageMeasureFeatureMethodType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual GageMeasureFeatureMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~GageMeasureFeatureMethodType ();
    };

    class ManualMeasureFeatureMethodType: public ::xsd::qif2::MeasureFeatureMethodBaseType
    {
      public:
      // Constructors.
      //
      ManualMeasureFeatureMethodType (const id_type&);

      ManualMeasureFeatureMethodType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      ManualMeasureFeatureMethodType (const ManualMeasureFeatureMethodType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual ManualMeasureFeatureMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ManualMeasureFeatureMethodType ();
    };

    class OtherMeasureFeatureMethodType: public ::xsd::qif2::MeasureFeatureMethodBaseType
    {
      public:
      // Constructors.
      //
      OtherMeasureFeatureMethodType (const id_type&);

      OtherMeasureFeatureMethodType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      OtherMeasureFeatureMethodType (const OtherMeasureFeatureMethodType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual OtherMeasureFeatureMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~OtherMeasureFeatureMethodType ();
    };

    class ActionMethodsType: public ::xml_schema::type
    {
      public:
      // ActionMethod
      //
      typedef ::xsd::qif2::ActionMethodBaseType ActionMethod_type;
      typedef ::xsd::cxx::tree::sequence< ActionMethod_type > ActionMethod_sequence;
      typedef ActionMethod_sequence::iterator ActionMethod_iterator;
      typedef ActionMethod_sequence::const_iterator ActionMethod_const_iterator;
      typedef ::xsd::cxx::tree::traits< ActionMethod_type, char > ActionMethod_traits;

      const ActionMethod_sequence&
      ActionMethod () const;

      ActionMethod_sequence&
      ActionMethod ();

      void
      ActionMethod (const ActionMethod_sequence& s);

      // Constructors.
      //
      ActionMethodsType ();

      ActionMethodsType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      ActionMethodsType (const ActionMethodsType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual ActionMethodsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ActionMethodsType&
      operator= (const ActionMethodsType& x);

      virtual 
      ~ActionMethodsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ActionMethod_sequence ActionMethod_;
    };

    class MeasureActionGroupFunctionEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        ROUTING_PLAN,
        OPERATION_SEQUENCE,
        SETUP_USAGE_GROUP,
        SENSOR_USAGE_GROUP,
        CARRIAGE_USAGE_GROUP,
        PCS_USAGE_GROUP,
        EVALUATE_CHAR_ACTIONS,
        ESTABLISH_DATUM_ACTIONS,
        UNDEFINED
      };

      MeasureActionGroupFunctionEnumType (value v);

      MeasureActionGroupFunctionEnumType (const char* v);

      MeasureActionGroupFunctionEnumType (const ::std::string& v);

      MeasureActionGroupFunctionEnumType (const ::xml_schema::nmtoken& v);

      MeasureActionGroupFunctionEnumType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      MeasureActionGroupFunctionEnumType (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      MeasureActionGroupFunctionEnumType (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      MeasureActionGroupFunctionEnumType (const MeasureActionGroupFunctionEnumType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual MeasureActionGroupFunctionEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      MeasureActionGroupFunctionEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_MeasureActionGroupFunctionEnumType_convert ();
      }

      protected:
      value
      _xsd_MeasureActionGroupFunctionEnumType_convert () const;

      public:
      static const char* const _xsd_MeasureActionGroupFunctionEnumType_literals_[9];
      static const value _xsd_MeasureActionGroupFunctionEnumType_indexes_[9];
    };

    class MeasureActionGroupFunctionType: public ::xml_schema::type
    {
      public:
      // MeasureActionGroupFunctionEnum
      //
      typedef ::xsd::qif2::MeasureActionGroupFunctionEnumType MeasureActionGroupFunctionEnum_type;
      typedef ::xsd::cxx::tree::optional< MeasureActionGroupFunctionEnum_type > MeasureActionGroupFunctionEnum_optional;
      typedef ::xsd::cxx::tree::traits< MeasureActionGroupFunctionEnum_type, char > MeasureActionGroupFunctionEnum_traits;

      const MeasureActionGroupFunctionEnum_optional&
      MeasureActionGroupFunctionEnum () const;

      MeasureActionGroupFunctionEnum_optional&
      MeasureActionGroupFunctionEnum ();

      void
      MeasureActionGroupFunctionEnum (const MeasureActionGroupFunctionEnum_type& x);

      void
      MeasureActionGroupFunctionEnum (const MeasureActionGroupFunctionEnum_optional& x);

      void
      MeasureActionGroupFunctionEnum (::std::auto_ptr< MeasureActionGroupFunctionEnum_type > p);

      // OtherMeasureActionGroupFunction
      //
      typedef ::xml_schema::string OtherMeasureActionGroupFunction_type;
      typedef ::xsd::cxx::tree::optional< OtherMeasureActionGroupFunction_type > OtherMeasureActionGroupFunction_optional;
      typedef ::xsd::cxx::tree::traits< OtherMeasureActionGroupFunction_type, char > OtherMeasureActionGroupFunction_traits;

      const OtherMeasureActionGroupFunction_optional&
      OtherMeasureActionGroupFunction () const;

      OtherMeasureActionGroupFunction_optional&
      OtherMeasureActionGroupFunction ();

      void
      OtherMeasureActionGroupFunction (const OtherMeasureActionGroupFunction_type& x);

      void
      OtherMeasureActionGroupFunction (const OtherMeasureActionGroupFunction_optional& x);

      void
      OtherMeasureActionGroupFunction (::std::auto_ptr< OtherMeasureActionGroupFunction_type > p);

      // Constructors.
      //
      MeasureActionGroupFunctionType ();

      MeasureActionGroupFunctionType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      MeasureActionGroupFunctionType (const MeasureActionGroupFunctionType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual MeasureActionGroupFunctionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      MeasureActionGroupFunctionType&
      operator= (const MeasureActionGroupFunctionType& x);

      virtual 
      ~MeasureActionGroupFunctionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      MeasureActionGroupFunctionEnum_optional MeasureActionGroupFunctionEnum_;
      OtherMeasureActionGroupFunction_optional OtherMeasureActionGroupFunction_;
    };

    class ActionGroupBaseType: public ::xsd::qif2::PlanElementBaseType
    {
      public:
      // MeasureActionGroupFunction
      //
      typedef ::xsd::qif2::MeasureActionGroupFunctionType MeasureActionGroupFunction_type;
      typedef ::xsd::cxx::tree::optional< MeasureActionGroupFunction_type > MeasureActionGroupFunction_optional;
      typedef ::xsd::cxx::tree::traits< MeasureActionGroupFunction_type, char > MeasureActionGroupFunction_traits;

      const MeasureActionGroupFunction_optional&
      MeasureActionGroupFunction () const;

      MeasureActionGroupFunction_optional&
      MeasureActionGroupFunction ();

      void
      MeasureActionGroupFunction (const MeasureActionGroupFunction_type& x);

      void
      MeasureActionGroupFunction (const MeasureActionGroupFunction_optional& x);

      void
      MeasureActionGroupFunction (::std::auto_ptr< MeasureActionGroupFunction_type > p);

      // Constructors.
      //
      ActionGroupBaseType ();

      ActionGroupBaseType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      ActionGroupBaseType (const ActionGroupBaseType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual ActionGroupBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ActionGroupBaseType&
      operator= (const ActionGroupBaseType& x);

      virtual 
      ~ActionGroupBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      MeasureActionGroupFunction_optional MeasureActionGroupFunction_;
    };

    class OrderedActionGroupType: public ::xsd::qif2::ActionGroupBaseType
    {
      public:
      // Steps
      //
      typedef ::xsd::qif2::NumberedPlanElementsType Steps_type;
      typedef ::xsd::cxx::tree::traits< Steps_type, char > Steps_traits;

      const Steps_type&
      Steps () const;

      Steps_type&
      Steps ();

      void
      Steps (const Steps_type& x);

      void
      Steps (::std::auto_ptr< Steps_type > p);

      // Constructors.
      //
      OrderedActionGroupType (const Steps_type&);

      OrderedActionGroupType (::std::auto_ptr< Steps_type >);

      OrderedActionGroupType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      OrderedActionGroupType (const OrderedActionGroupType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual OrderedActionGroupType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OrderedActionGroupType&
      operator= (const OrderedActionGroupType& x);

      virtual 
      ~OrderedActionGroupType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Steps_type > Steps_;
    };

    class UnorderedActionGroupType: public ::xsd::qif2::ActionGroupBaseType
    {
      public:
      // Steps
      //
      typedef ::xsd::qif2::UnnumberedPlanElementsType Steps_type;
      typedef ::xsd::cxx::tree::traits< Steps_type, char > Steps_traits;

      const Steps_type&
      Steps () const;

      Steps_type&
      Steps ();

      void
      Steps (const Steps_type& x);

      void
      Steps (::std::auto_ptr< Steps_type > p);

      // Constructors.
      //
      UnorderedActionGroupType (const Steps_type&);

      UnorderedActionGroupType (::std::auto_ptr< Steps_type >);

      UnorderedActionGroupType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      UnorderedActionGroupType (const UnorderedActionGroupType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual UnorderedActionGroupType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      UnorderedActionGroupType&
      operator= (const UnorderedActionGroupType& x);

      virtual 
      ~UnorderedActionGroupType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Steps_type > Steps_;
    };

    class PartiallyOrderedActionGroupType: public ::xsd::qif2::ActionGroupBaseType
    {
      public:
      // StepsWithPredecessors
      //
      typedef ::xsd::qif2::StepsWithPredecessorsType StepsWithPredecessors_type;
      typedef ::xsd::cxx::tree::traits< StepsWithPredecessors_type, char > StepsWithPredecessors_traits;

      const StepsWithPredecessors_type&
      StepsWithPredecessors () const;

      StepsWithPredecessors_type&
      StepsWithPredecessors ();

      void
      StepsWithPredecessors (const StepsWithPredecessors_type& x);

      void
      StepsWithPredecessors (::std::auto_ptr< StepsWithPredecessors_type > p);

      // Constructors.
      //
      PartiallyOrderedActionGroupType (const StepsWithPredecessors_type&);

      PartiallyOrderedActionGroupType (::std::auto_ptr< StepsWithPredecessors_type >);

      PartiallyOrderedActionGroupType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      PartiallyOrderedActionGroupType (const PartiallyOrderedActionGroupType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual PartiallyOrderedActionGroupType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PartiallyOrderedActionGroupType&
      operator= (const PartiallyOrderedActionGroupType& x);

      virtual 
      ~PartiallyOrderedActionGroupType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< StepsWithPredecessors_type > StepsWithPredecessors_;
    };

    class StepWithPredecessorsType: public ::xml_schema::type
    {
      public:
      // Predecessors
      //
      typedef ::xsd::qif2::PredecessorsType Predecessors_type;
      typedef ::xsd::cxx::tree::optional< Predecessors_type > Predecessors_optional;
      typedef ::xsd::cxx::tree::traits< Predecessors_type, char > Predecessors_traits;

      const Predecessors_optional&
      Predecessors () const;

      Predecessors_optional&
      Predecessors ();

      void
      Predecessors (const Predecessors_type& x);

      void
      Predecessors (const Predecessors_optional& x);

      void
      Predecessors (::std::auto_ptr< Predecessors_type > p);

      // Step
      //
      typedef ::xsd::qif2::NumberedPlanElementType Step_type;
      typedef ::xsd::cxx::tree::traits< Step_type, char > Step_traits;

      const Step_type&
      Step () const;

      Step_type&
      Step ();

      void
      Step (const Step_type& x);

      void
      Step (::std::auto_ptr< Step_type > p);

      // Constructors.
      //
      StepWithPredecessorsType (const Step_type&);

      StepWithPredecessorsType (::std::auto_ptr< Step_type >);

      StepWithPredecessorsType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      StepWithPredecessorsType (const StepWithPredecessorsType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual StepWithPredecessorsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StepWithPredecessorsType&
      operator= (const StepWithPredecessorsType& x);

      virtual 
      ~StepWithPredecessorsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Predecessors_optional Predecessors_;
      ::xsd::cxx::tree::one< Step_type > Step_;
    };

    class StepsWithPredecessorsType: public ::xml_schema::type
    {
      public:
      // StepWithPredecessors
      //
      typedef ::xsd::qif2::StepWithPredecessorsType StepWithPredecessors_type;
      typedef ::xsd::cxx::tree::sequence< StepWithPredecessors_type > StepWithPredecessors_sequence;
      typedef StepWithPredecessors_sequence::iterator StepWithPredecessors_iterator;
      typedef StepWithPredecessors_sequence::const_iterator StepWithPredecessors_const_iterator;
      typedef ::xsd::cxx::tree::traits< StepWithPredecessors_type, char > StepWithPredecessors_traits;

      const StepWithPredecessors_sequence&
      StepWithPredecessors () const;

      StepWithPredecessors_sequence&
      StepWithPredecessors ();

      void
      StepWithPredecessors (const StepWithPredecessors_sequence& s);

      // Constructors.
      //
      StepsWithPredecessorsType ();

      StepsWithPredecessorsType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      StepsWithPredecessorsType (const StepsWithPredecessorsType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual StepsWithPredecessorsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StepsWithPredecessorsType&
      operator= (const StepsWithPredecessorsType& x);

      virtual 
      ~StepsWithPredecessorsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      StepWithPredecessors_sequence StepWithPredecessors_;
    };

    class PredecessorsType: public ::xml_schema::type
    {
      public:
      // Predecessor
      //
      typedef ::xml_schema::positive_integer Predecessor_type;
      typedef ::xsd::cxx::tree::sequence< Predecessor_type > Predecessor_sequence;
      typedef Predecessor_sequence::iterator Predecessor_iterator;
      typedef Predecessor_sequence::const_iterator Predecessor_const_iterator;
      typedef ::xsd::cxx::tree::traits< Predecessor_type, char > Predecessor_traits;

      const Predecessor_sequence&
      Predecessor () const;

      Predecessor_sequence&
      Predecessor ();

      void
      Predecessor (const Predecessor_sequence& s);

      // Constructors.
      //
      PredecessorsType ();

      PredecessorsType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      PredecessorsType (const PredecessorsType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual PredecessorsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PredecessorsType&
      operator= (const PredecessorsType& x);

      virtual 
      ~PredecessorsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Predecessor_sequence Predecessor_;
    };

    class OneOfActionGroupType: public ::xsd::qif2::ActionGroupBaseType
    {
      public:
      // Steps
      //
      typedef ::xsd::qif2::NumberedPlanElementsType Steps_type;
      typedef ::xsd::cxx::tree::traits< Steps_type, char > Steps_traits;

      const Steps_type&
      Steps () const;

      Steps_type&
      Steps ();

      void
      Steps (const Steps_type& x);

      void
      Steps (::std::auto_ptr< Steps_type > p);

      // Constructors.
      //
      OneOfActionGroupType (const Steps_type&);

      OneOfActionGroupType (::std::auto_ptr< Steps_type >);

      OneOfActionGroupType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      OneOfActionGroupType (const OneOfActionGroupType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual OneOfActionGroupType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OneOfActionGroupType&
      operator= (const OneOfActionGroupType& x);

      virtual 
      ~OneOfActionGroupType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Steps_type > Steps_;
    };

    class PickSomeActionGroupType: public ::xsd::qif2::ActionGroupBaseType
    {
      public:
      // Steps
      //
      typedef ::xsd::qif2::UnnumberedPlanElementsType Steps_type;
      typedef ::xsd::cxx::tree::traits< Steps_type, char > Steps_traits;

      const Steps_type&
      Steps () const;

      Steps_type&
      Steps ();

      void
      Steps (const Steps_type& x);

      void
      Steps (::std::auto_ptr< Steps_type > p);

      // NumberOfSteps
      //
      typedef ::xml_schema::positive_integer NumberOfSteps_type;
      typedef ::xsd::cxx::tree::traits< NumberOfSteps_type, char > NumberOfSteps_traits;

      const NumberOfSteps_type&
      NumberOfSteps () const;

      NumberOfSteps_type&
      NumberOfSteps ();

      void
      NumberOfSteps (const NumberOfSteps_type& x);

      // Constructors.
      //
      PickSomeActionGroupType (const Steps_type&,
                               const NumberOfSteps_type&);

      PickSomeActionGroupType (::std::auto_ptr< Steps_type >,
                               const NumberOfSteps_type&);

      PickSomeActionGroupType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      PickSomeActionGroupType (const PickSomeActionGroupType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual PickSomeActionGroupType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PickSomeActionGroupType&
      operator= (const PickSomeActionGroupType& x);

      virtual 
      ~PickSomeActionGroupType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Steps_type > Steps_;
      ::xsd::cxx::tree::one< NumberOfSteps_type > NumberOfSteps_;
    };

    class WorkInstructionBaseType: public ::xml_schema::type
    {
      public:
      // id
      //
      typedef ::xsd::qif2::QIFIdType id_type;
      typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

      const id_type&
      id () const;

      id_type&
      id ();

      void
      id (const id_type& x);

      void
      id (::std::auto_ptr< id_type > p);

      // Constructors.
      //
      WorkInstructionBaseType (const id_type&);

      WorkInstructionBaseType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      WorkInstructionBaseType (const WorkInstructionBaseType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual WorkInstructionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      WorkInstructionBaseType&
      operator= (const WorkInstructionBaseType& x);

      virtual 
      ~WorkInstructionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< id_type > id_;
    };

    class TextInstructionType: public ::xsd::qif2::WorkInstructionBaseType
    {
      public:
      // TextInstruction
      //
      typedef ::xml_schema::string TextInstruction_type;
      typedef ::xsd::cxx::tree::traits< TextInstruction_type, char > TextInstruction_traits;

      const TextInstruction_type&
      TextInstruction () const;

      TextInstruction_type&
      TextInstruction ();

      void
      TextInstruction (const TextInstruction_type& x);

      void
      TextInstruction (::std::auto_ptr< TextInstruction_type > p);

      // Constructors.
      //
      TextInstructionType (const id_type&,
                           const TextInstruction_type&);

      TextInstructionType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      TextInstructionType (const TextInstructionType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual TextInstructionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TextInstructionType&
      operator= (const TextInstructionType& x);

      virtual 
      ~TextInstructionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< TextInstruction_type > TextInstruction_;
    };

    class DocumentFileInstructionType: public ::xsd::qif2::WorkInstructionBaseType
    {
      public:
      // ExternalFile
      //
      typedef ::xsd::qif2::ExternalFileReferenceType ExternalFile_type;
      typedef ::xsd::cxx::tree::traits< ExternalFile_type, char > ExternalFile_traits;

      const ExternalFile_type&
      ExternalFile () const;

      ExternalFile_type&
      ExternalFile ();

      void
      ExternalFile (const ExternalFile_type& x);

      void
      ExternalFile (::std::auto_ptr< ExternalFile_type > p);

      // Constructors.
      //
      DocumentFileInstructionType (const id_type&,
                                   const ExternalFile_type&);

      DocumentFileInstructionType (const id_type&,
                                   ::std::auto_ptr< ExternalFile_type >);

      DocumentFileInstructionType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      DocumentFileInstructionType (const DocumentFileInstructionType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual DocumentFileInstructionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      DocumentFileInstructionType&
      operator= (const DocumentFileInstructionType& x);

      virtual 
      ~DocumentFileInstructionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ExternalFile_type > ExternalFile_;
    };

    class ImageInstructionType: public ::xsd::qif2::WorkInstructionBaseType
    {
      public:
      // ExternalFile
      //
      typedef ::xsd::qif2::ExternalFileReferenceType ExternalFile_type;
      typedef ::xsd::cxx::tree::traits< ExternalFile_type, char > ExternalFile_traits;

      const ExternalFile_type&
      ExternalFile () const;

      ExternalFile_type&
      ExternalFile ();

      void
      ExternalFile (const ExternalFile_type& x);

      void
      ExternalFile (::std::auto_ptr< ExternalFile_type > p);

      // Constructors.
      //
      ImageInstructionType (const id_type&,
                            const ExternalFile_type&);

      ImageInstructionType (const id_type&,
                            ::std::auto_ptr< ExternalFile_type >);

      ImageInstructionType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      ImageInstructionType (const ImageInstructionType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual ImageInstructionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ImageInstructionType&
      operator= (const ImageInstructionType& x);

      virtual 
      ~ImageInstructionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ExternalFile_type > ExternalFile_;
    };

    class VideoInstructionType: public ::xsd::qif2::WorkInstructionBaseType
    {
      public:
      // ExternalFile
      //
      typedef ::xsd::qif2::ExternalFileReferenceType ExternalFile_type;
      typedef ::xsd::cxx::tree::traits< ExternalFile_type, char > ExternalFile_traits;

      const ExternalFile_type&
      ExternalFile () const;

      ExternalFile_type&
      ExternalFile ();

      void
      ExternalFile (const ExternalFile_type& x);

      void
      ExternalFile (::std::auto_ptr< ExternalFile_type > p);

      // Constructors.
      //
      VideoInstructionType (const id_type&,
                            const ExternalFile_type&);

      VideoInstructionType (const id_type&,
                            ::std::auto_ptr< ExternalFile_type >);

      VideoInstructionType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      VideoInstructionType (const VideoInstructionType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual VideoInstructionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      VideoInstructionType&
      operator= (const VideoInstructionType& x);

      virtual 
      ~VideoInstructionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ExternalFile_type > ExternalFile_;
    };

    class WorkInstructionsType: public ::xml_schema::type
    {
      public:
      // WorkInstruction
      //
      typedef ::xsd::qif2::WorkInstructionBaseType WorkInstruction_type;
      typedef ::xsd::cxx::tree::sequence< WorkInstruction_type > WorkInstruction_sequence;
      typedef WorkInstruction_sequence::iterator WorkInstruction_iterator;
      typedef WorkInstruction_sequence::const_iterator WorkInstruction_const_iterator;
      typedef ::xsd::cxx::tree::traits< WorkInstruction_type, char > WorkInstruction_traits;

      const WorkInstruction_sequence&
      WorkInstruction () const;

      WorkInstruction_sequence&
      WorkInstruction ();

      void
      WorkInstruction (const WorkInstruction_sequence& s);

      // Constructors.
      //
      WorkInstructionsType ();

      WorkInstructionsType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      WorkInstructionsType (const WorkInstructionsType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual WorkInstructionsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      WorkInstructionsType&
      operator= (const WorkInstructionsType& x);

      virtual 
      ~WorkInstructionsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      WorkInstruction_sequence WorkInstruction_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xsd
{
  namespace qif2
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasurementPlanType >
    MeasurementPlan (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasurementPlanType >
    MeasurementPlan (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasurementPlanType >
    MeasurementPlan (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasurementPlanType >
    MeasurementPlan (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasurementPlanType >
    MeasurementPlan (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasurementPlanType >
    MeasurementPlan (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasurementPlanType >
    MeasurementPlan (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasurementPlanType >
    MeasurementPlan (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasurementPlanType >
    MeasurementPlan (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasurementPlanType >
    MeasurementPlan (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasurementPlanType >
    MeasurementPlan (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasurementPlanType >
    MeasurementPlan (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasurementPlanType >
    MeasurementPlan (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasurementPlanType >
    MeasurementPlan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ActionGroupBaseType >
    PlanRoot (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ActionGroupBaseType >
    PlanRoot (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ActionGroupBaseType >
    PlanRoot (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ActionGroupBaseType >
    PlanRoot (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ActionGroupBaseType >
    PlanRoot (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ActionGroupBaseType >
    PlanRoot (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ActionGroupBaseType >
    PlanRoot (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ActionGroupBaseType >
    PlanRoot (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ActionGroupBaseType >
    PlanRoot (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ActionGroupBaseType >
    PlanRoot (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ActionGroupBaseType >
    PlanRoot (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ActionGroupBaseType >
    PlanRoot (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ActionGroupBaseType >
    PlanRoot (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ActionGroupBaseType >
    PlanRoot (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedPlanRoot (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedPlanRoot (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedPlanRoot (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedPlanRoot (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedPlanRoot (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedPlanRoot (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedPlanRoot (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedPlanRoot (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedPlanRoot (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedPlanRoot (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedPlanRoot (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedPlanRoot (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedPlanRoot (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedPlanRoot (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedPlanRoot (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedPlanRoot (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedPlanRoot (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedPlanRoot (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedPlanRoot (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedPlanRoot (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedPlanRoot (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedPlanRoot (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedPlanRoot (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedPlanRoot (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedPlanRoot (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedPlanRoot (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedPlanRoot (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedPlanRoot (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedPlanRoot (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedPlanRoot (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedPlanRoot (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedPlanRoot (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedPlanRoot (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedPlanRoot (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedPlanRoot (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedPlanRoot (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedPlanRoot (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedPlanRoot (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedPlanRoot (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedPlanRoot (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedPlanRoot (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedPlanRoot (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfPlanRoot (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfPlanRoot (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfPlanRoot (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfPlanRoot (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfPlanRoot (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfPlanRoot (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfPlanRoot (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfPlanRoot (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfPlanRoot (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfPlanRoot (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfPlanRoot (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfPlanRoot (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfPlanRoot (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfPlanRoot (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomePlanRoot (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomePlanRoot (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomePlanRoot (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomePlanRoot (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomePlanRoot (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomePlanRoot (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomePlanRoot (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomePlanRoot (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomePlanRoot (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomePlanRoot (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomePlanRoot (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomePlanRoot (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomePlanRoot (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomePlanRoot (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PlanElementBaseType >
    PlanElement (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlanElementBaseType >
    PlanElement (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlanElementBaseType >
    PlanElement (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PlanElementBaseType >
    PlanElement (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlanElementBaseType >
    PlanElement (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlanElementBaseType >
    PlanElement (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlanElementBaseType >
    PlanElement (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlanElementBaseType >
    PlanElement (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlanElementBaseType >
    PlanElement (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PlanElementBaseType >
    PlanElement (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlanElementBaseType >
    PlanElement (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlanElementBaseType >
    PlanElement (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PlanElementBaseType >
    PlanElement (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PlanElementBaseType >
    PlanElement (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedActionGroup (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedActionGroup (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedActionGroup (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedActionGroup (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedActionGroup (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedActionGroup (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedActionGroup (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedActionGroup (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedActionGroup (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedActionGroup (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedActionGroup (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedActionGroup (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedActionGroup (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OrderedActionGroupType >
    OrderedActionGroup (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedActionGroup (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedActionGroup (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedActionGroup (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedActionGroup (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedActionGroup (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedActionGroup (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedActionGroup (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedActionGroup (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedActionGroup (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedActionGroup (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedActionGroup (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedActionGroup (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedActionGroup (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::UnorderedActionGroupType >
    UnorderedActionGroup (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedActionGroup (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedActionGroup (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedActionGroup (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedActionGroup (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedActionGroup (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedActionGroup (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedActionGroup (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedActionGroup (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedActionGroup (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedActionGroup (::xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedActionGroup (::xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedActionGroup (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedActionGroup (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PartiallyOrderedActionGroupType >
    PartiallyOrderedActionGroup (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfActionGroup (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfActionGroup (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfActionGroup (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfActionGroup (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfActionGroup (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfActionGroup (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfActionGroup (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfActionGroup (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfActionGroup (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfActionGroup (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfActionGroup (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfActionGroup (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfActionGroup (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OneOfActionGroupType >
    OneOfActionGroup (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomeActionGroup (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomeActionGroup (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomeActionGroup (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomeActionGroup (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomeActionGroup (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomeActionGroup (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomeActionGroup (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomeActionGroup (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomeActionGroup (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomeActionGroup (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomeActionGroup (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomeActionGroup (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomeActionGroup (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::PickSomeActionGroupType >
    PickSomeActionGroup (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateAllActionType >
    MeasureEvaluateAll (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateAllActionType >
    MeasureEvaluateAll (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateAllActionType >
    MeasureEvaluateAll (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateAllActionType >
    MeasureEvaluateAll (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateAllActionType >
    MeasureEvaluateAll (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateAllActionType >
    MeasureEvaluateAll (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateAllActionType >
    MeasureEvaluateAll (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateAllActionType >
    MeasureEvaluateAll (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateAllActionType >
    MeasureEvaluateAll (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateAllActionType >
    MeasureEvaluateAll (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateAllActionType >
    MeasureEvaluateAll (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateAllActionType >
    MeasureEvaluateAll (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateAllActionType >
    MeasureEvaluateAll (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateAllActionType >
    MeasureEvaluateAll (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateSpecifiedActionType >
    MeasureEvaluateSpecified (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateSpecifiedActionType >
    MeasureEvaluateSpecified (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateSpecifiedActionType >
    MeasureEvaluateSpecified (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateSpecifiedActionType >
    MeasureEvaluateSpecified (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateSpecifiedActionType >
    MeasureEvaluateSpecified (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateSpecifiedActionType >
    MeasureEvaluateSpecified (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateSpecifiedActionType >
    MeasureEvaluateSpecified (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateSpecifiedActionType >
    MeasureEvaluateSpecified (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateSpecifiedActionType >
    MeasureEvaluateSpecified (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateSpecifiedActionType >
    MeasureEvaluateSpecified (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateSpecifiedActionType >
    MeasureEvaluateSpecified (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateSpecifiedActionType >
    MeasureEvaluateSpecified (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateSpecifiedActionType >
    MeasureEvaluateSpecified (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureEvaluateSpecifiedActionType >
    MeasureEvaluateSpecified (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType >
    EvaluateSpecifiedCharacteristics (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType >
    EvaluateSpecifiedCharacteristics (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType >
    EvaluateSpecifiedCharacteristics (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType >
    EvaluateSpecifiedCharacteristics (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType >
    EvaluateSpecifiedCharacteristics (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType >
    EvaluateSpecifiedCharacteristics (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType >
    EvaluateSpecifiedCharacteristics (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType >
    EvaluateSpecifiedCharacteristics (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType >
    EvaluateSpecifiedCharacteristics (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType >
    EvaluateSpecifiedCharacteristics (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType >
    EvaluateSpecifiedCharacteristics (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType >
    EvaluateSpecifiedCharacteristics (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType >
    EvaluateSpecifiedCharacteristics (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType >
    EvaluateSpecifiedCharacteristics (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedFeaturesActionType >
    MeasureSpecifiedFeatures (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedFeaturesActionType >
    MeasureSpecifiedFeatures (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedFeaturesActionType >
    MeasureSpecifiedFeatures (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedFeaturesActionType >
    MeasureSpecifiedFeatures (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedFeaturesActionType >
    MeasureSpecifiedFeatures (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedFeaturesActionType >
    MeasureSpecifiedFeatures (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedFeaturesActionType >
    MeasureSpecifiedFeatures (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedFeaturesActionType >
    MeasureSpecifiedFeatures (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedFeaturesActionType >
    MeasureSpecifiedFeatures (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedFeaturesActionType >
    MeasureSpecifiedFeatures (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedFeaturesActionType >
    MeasureSpecifiedFeatures (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedFeaturesActionType >
    MeasureSpecifiedFeatures (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedFeaturesActionType >
    MeasureSpecifiedFeatures (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedFeaturesActionType >
    MeasureSpecifiedFeatures (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedMeasurandsActionType >
    MeasureSpecifiedMeasurands (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedMeasurandsActionType >
    MeasureSpecifiedMeasurands (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedMeasurandsActionType >
    MeasureSpecifiedMeasurands (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedMeasurandsActionType >
    MeasureSpecifiedMeasurands (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedMeasurandsActionType >
    MeasureSpecifiedMeasurands (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedMeasurandsActionType >
    MeasureSpecifiedMeasurands (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedMeasurandsActionType >
    MeasureSpecifiedMeasurands (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedMeasurandsActionType >
    MeasureSpecifiedMeasurands (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedMeasurandsActionType >
    MeasureSpecifiedMeasurands (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedMeasurandsActionType >
    MeasureSpecifiedMeasurands (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedMeasurandsActionType >
    MeasureSpecifiedMeasurands (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedMeasurandsActionType >
    MeasureSpecifiedMeasurands (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedMeasurandsActionType >
    MeasureSpecifiedMeasurands (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasureSpecifiedMeasurandsActionType >
    MeasureSpecifiedMeasurands (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::WorkInstructionBaseType >
    WorkInstruction (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WorkInstructionBaseType >
    WorkInstruction (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WorkInstructionBaseType >
    WorkInstruction (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::WorkInstructionBaseType >
    WorkInstruction (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WorkInstructionBaseType >
    WorkInstruction (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WorkInstructionBaseType >
    WorkInstruction (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WorkInstructionBaseType >
    WorkInstruction (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WorkInstructionBaseType >
    WorkInstruction (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WorkInstructionBaseType >
    WorkInstruction (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::WorkInstructionBaseType >
    WorkInstruction (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WorkInstructionBaseType >
    WorkInstruction (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WorkInstructionBaseType >
    WorkInstruction (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::WorkInstructionBaseType >
    WorkInstruction (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::WorkInstructionBaseType >
    WorkInstruction (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::TextInstructionType >
    TextInstruction (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextInstructionType >
    TextInstruction (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextInstructionType >
    TextInstruction (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::TextInstructionType >
    TextInstruction (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextInstructionType >
    TextInstruction (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextInstructionType >
    TextInstruction (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextInstructionType >
    TextInstruction (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextInstructionType >
    TextInstruction (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextInstructionType >
    TextInstruction (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::TextInstructionType >
    TextInstruction (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextInstructionType >
    TextInstruction (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextInstructionType >
    TextInstruction (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::TextInstructionType >
    TextInstruction (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::TextInstructionType >
    TextInstruction (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::DocumentFileInstructionType >
    DocumentFileInstruction (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DocumentFileInstructionType >
    DocumentFileInstruction (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DocumentFileInstructionType >
    DocumentFileInstruction (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::DocumentFileInstructionType >
    DocumentFileInstruction (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DocumentFileInstructionType >
    DocumentFileInstruction (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DocumentFileInstructionType >
    DocumentFileInstruction (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DocumentFileInstructionType >
    DocumentFileInstruction (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DocumentFileInstructionType >
    DocumentFileInstruction (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DocumentFileInstructionType >
    DocumentFileInstruction (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::DocumentFileInstructionType >
    DocumentFileInstruction (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DocumentFileInstructionType >
    DocumentFileInstruction (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DocumentFileInstructionType >
    DocumentFileInstruction (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::DocumentFileInstructionType >
    DocumentFileInstruction (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::DocumentFileInstructionType >
    DocumentFileInstruction (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ImageInstructionType >
    ImageInstruction (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ImageInstructionType >
    ImageInstruction (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ImageInstructionType >
    ImageInstruction (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ImageInstructionType >
    ImageInstruction (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ImageInstructionType >
    ImageInstruction (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ImageInstructionType >
    ImageInstruction (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ImageInstructionType >
    ImageInstruction (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ImageInstructionType >
    ImageInstruction (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ImageInstructionType >
    ImageInstruction (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ImageInstructionType >
    ImageInstruction (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ImageInstructionType >
    ImageInstruction (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ImageInstructionType >
    ImageInstruction (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ImageInstructionType >
    ImageInstruction (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ImageInstructionType >
    ImageInstruction (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::VideoInstructionType >
    VideoInstruction (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VideoInstructionType >
    VideoInstruction (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VideoInstructionType >
    VideoInstruction (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::VideoInstructionType >
    VideoInstruction (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VideoInstructionType >
    VideoInstruction (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VideoInstructionType >
    VideoInstruction (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VideoInstructionType >
    VideoInstruction (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VideoInstructionType >
    VideoInstruction (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VideoInstructionType >
    VideoInstruction (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::VideoInstructionType >
    VideoInstruction (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VideoInstructionType >
    VideoInstruction (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VideoInstructionType >
    VideoInstruction (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::VideoInstructionType >
    VideoInstruction (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::VideoInstructionType >
    VideoInstruction (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ActionMethodBaseType >
    ActionMethod (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ActionMethodBaseType >
    ActionMethod (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ActionMethodBaseType >
    ActionMethod (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ActionMethodBaseType >
    ActionMethod (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ActionMethodBaseType >
    ActionMethod (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ActionMethodBaseType >
    ActionMethod (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ActionMethodBaseType >
    ActionMethod (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ActionMethodBaseType >
    ActionMethod (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ActionMethodBaseType >
    ActionMethod (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ActionMethodBaseType >
    ActionMethod (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ActionMethodBaseType >
    ActionMethod (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ActionMethodBaseType >
    ActionMethod (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ActionMethodBaseType >
    ActionMethod (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ActionMethodBaseType >
    ActionMethod (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CoordinateMeasureFeatureMethodType >
    CoordinateMeasureFeatureMethod (const ::std::string& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CoordinateMeasureFeatureMethodType >
    CoordinateMeasureFeatureMethod (const ::std::string& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CoordinateMeasureFeatureMethodType >
    CoordinateMeasureFeatureMethod (const ::std::string& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CoordinateMeasureFeatureMethodType >
    CoordinateMeasureFeatureMethod (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CoordinateMeasureFeatureMethodType >
    CoordinateMeasureFeatureMethod (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CoordinateMeasureFeatureMethodType >
    CoordinateMeasureFeatureMethod (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CoordinateMeasureFeatureMethodType >
    CoordinateMeasureFeatureMethod (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CoordinateMeasureFeatureMethodType >
    CoordinateMeasureFeatureMethod (::std::istream& is,
                                    const ::std::string& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CoordinateMeasureFeatureMethodType >
    CoordinateMeasureFeatureMethod (::std::istream& is,
                                    const ::std::string& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CoordinateMeasureFeatureMethodType >
    CoordinateMeasureFeatureMethod (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CoordinateMeasureFeatureMethodType >
    CoordinateMeasureFeatureMethod (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CoordinateMeasureFeatureMethodType >
    CoordinateMeasureFeatureMethod (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CoordinateMeasureFeatureMethodType >
    CoordinateMeasureFeatureMethod (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CoordinateMeasureFeatureMethodType >
    CoordinateMeasureFeatureMethod (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::GageMeasureFeatureMethodType >
    GageMeasureFeatureMethod (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageMeasureFeatureMethodType >
    GageMeasureFeatureMethod (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageMeasureFeatureMethodType >
    GageMeasureFeatureMethod (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::GageMeasureFeatureMethodType >
    GageMeasureFeatureMethod (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageMeasureFeatureMethodType >
    GageMeasureFeatureMethod (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageMeasureFeatureMethodType >
    GageMeasureFeatureMethod (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageMeasureFeatureMethodType >
    GageMeasureFeatureMethod (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageMeasureFeatureMethodType >
    GageMeasureFeatureMethod (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageMeasureFeatureMethodType >
    GageMeasureFeatureMethod (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::GageMeasureFeatureMethodType >
    GageMeasureFeatureMethod (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageMeasureFeatureMethodType >
    GageMeasureFeatureMethod (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageMeasureFeatureMethodType >
    GageMeasureFeatureMethod (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::GageMeasureFeatureMethodType >
    GageMeasureFeatureMethod (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageMeasureFeatureMethodType >
    GageMeasureFeatureMethod (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ManualMeasureFeatureMethodType >
    ManualMeasureFeatureMethod (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ManualMeasureFeatureMethodType >
    ManualMeasureFeatureMethod (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ManualMeasureFeatureMethodType >
    ManualMeasureFeatureMethod (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ManualMeasureFeatureMethodType >
    ManualMeasureFeatureMethod (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ManualMeasureFeatureMethodType >
    ManualMeasureFeatureMethod (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ManualMeasureFeatureMethodType >
    ManualMeasureFeatureMethod (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ManualMeasureFeatureMethodType >
    ManualMeasureFeatureMethod (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ManualMeasureFeatureMethodType >
    ManualMeasureFeatureMethod (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ManualMeasureFeatureMethodType >
    ManualMeasureFeatureMethod (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ManualMeasureFeatureMethodType >
    ManualMeasureFeatureMethod (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ManualMeasureFeatureMethodType >
    ManualMeasureFeatureMethod (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ManualMeasureFeatureMethodType >
    ManualMeasureFeatureMethod (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ManualMeasureFeatureMethodType >
    ManualMeasureFeatureMethod (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ManualMeasureFeatureMethodType >
    ManualMeasureFeatureMethod (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::OtherMeasureFeatureMethodType >
    OtherMeasureFeatureMethod (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OtherMeasureFeatureMethodType >
    OtherMeasureFeatureMethod (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OtherMeasureFeatureMethodType >
    OtherMeasureFeatureMethod (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::OtherMeasureFeatureMethodType >
    OtherMeasureFeatureMethod (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OtherMeasureFeatureMethodType >
    OtherMeasureFeatureMethod (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OtherMeasureFeatureMethodType >
    OtherMeasureFeatureMethod (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OtherMeasureFeatureMethodType >
    OtherMeasureFeatureMethod (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OtherMeasureFeatureMethodType >
    OtherMeasureFeatureMethod (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OtherMeasureFeatureMethodType >
    OtherMeasureFeatureMethod (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::OtherMeasureFeatureMethodType >
    OtherMeasureFeatureMethod (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OtherMeasureFeatureMethodType >
    OtherMeasureFeatureMethod (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OtherMeasureFeatureMethodType >
    OtherMeasureFeatureMethod (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::OtherMeasureFeatureMethodType >
    OtherMeasureFeatureMethod (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::OtherMeasureFeatureMethodType >
    OtherMeasureFeatureMethod (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasurandBaseType >
    Measurand (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasurandBaseType >
    Measurand (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasurandBaseType >
    Measurand (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasurandBaseType >
    Measurand (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasurandBaseType >
    Measurand (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasurandBaseType >
    Measurand (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasurandBaseType >
    Measurand (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasurandBaseType >
    Measurand (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasurandBaseType >
    Measurand (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasurandBaseType >
    Measurand (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasurandBaseType >
    Measurand (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasurandBaseType >
    Measurand (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::MeasurandBaseType >
    Measurand (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::MeasurandBaseType >
    Measurand (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::EvaluateCharacteristicMeasurandType >
    EvaluateCharacteristicMeasurand (const ::std::string& uri,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EvaluateCharacteristicMeasurandType >
    EvaluateCharacteristicMeasurand (const ::std::string& uri,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EvaluateCharacteristicMeasurandType >
    EvaluateCharacteristicMeasurand (const ::std::string& uri,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::EvaluateCharacteristicMeasurandType >
    EvaluateCharacteristicMeasurand (::std::istream& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EvaluateCharacteristicMeasurandType >
    EvaluateCharacteristicMeasurand (::std::istream& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EvaluateCharacteristicMeasurandType >
    EvaluateCharacteristicMeasurand (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EvaluateCharacteristicMeasurandType >
    EvaluateCharacteristicMeasurand (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EvaluateCharacteristicMeasurandType >
    EvaluateCharacteristicMeasurand (::std::istream& is,
                                     const ::std::string& id,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EvaluateCharacteristicMeasurandType >
    EvaluateCharacteristicMeasurand (::std::istream& is,
                                     const ::std::string& id,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::EvaluateCharacteristicMeasurandType >
    EvaluateCharacteristicMeasurand (::xercesc::InputSource& is,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EvaluateCharacteristicMeasurandType >
    EvaluateCharacteristicMeasurand (::xercesc::InputSource& is,
                                     ::xml_schema::error_handler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EvaluateCharacteristicMeasurandType >
    EvaluateCharacteristicMeasurand (::xercesc::InputSource& is,
                                     ::xercesc::DOMErrorHandler& eh,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::EvaluateCharacteristicMeasurandType >
    EvaluateCharacteristicMeasurand (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EvaluateCharacteristicMeasurandType >
    EvaluateCharacteristicMeasurand (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f = 0,
                                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::EstablishDatumMeasurandType >
    EstablishDatumMeasurand (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EstablishDatumMeasurandType >
    EstablishDatumMeasurand (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EstablishDatumMeasurandType >
    EstablishDatumMeasurand (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::EstablishDatumMeasurandType >
    EstablishDatumMeasurand (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EstablishDatumMeasurandType >
    EstablishDatumMeasurand (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EstablishDatumMeasurandType >
    EstablishDatumMeasurand (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EstablishDatumMeasurandType >
    EstablishDatumMeasurand (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EstablishDatumMeasurandType >
    EstablishDatumMeasurand (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EstablishDatumMeasurandType >
    EstablishDatumMeasurand (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::EstablishDatumMeasurandType >
    EstablishDatumMeasurand (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EstablishDatumMeasurandType >
    EstablishDatumMeasurand (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EstablishDatumMeasurandType >
    EstablishDatumMeasurand (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::EstablishDatumMeasurandType >
    EstablishDatumMeasurand (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::EstablishDatumMeasurandType >
    EstablishDatumMeasurand (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xsd
{
  namespace qif2
  {
    // Serialize to std::ostream.
    //

    void
    MeasurementPlan (::std::ostream& os,
                     const ::xsd::qif2::MeasurementPlanType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    MeasurementPlan (::std::ostream& os,
                     const ::xsd::qif2::MeasurementPlanType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    MeasurementPlan (::std::ostream& os,
                     const ::xsd::qif2::MeasurementPlanType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    MeasurementPlan (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::MeasurementPlanType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    MeasurementPlan (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::MeasurementPlanType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    MeasurementPlan (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::MeasurementPlanType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    MeasurementPlan (::xercesc::DOMDocument& d,
                     const ::xsd::qif2::MeasurementPlanType& x,
                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    MeasurementPlan (const ::xsd::qif2::MeasurementPlanType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const MeasurementPlanType&);

    void
    operator<< (::xercesc::DOMElement&, const PlanElementBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const UnnumberedPlanElementsType&);

    void
    operator<< (::xercesc::DOMElement&, const NumberedPlanElementType&);

    void
    operator<< (::xercesc::DOMElement&, const NumberedPlanElementsType&);

    void
    operator<< (::xercesc::DOMElement&, const ActionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const MeasureEvaluateAllActionType&);

    void
    operator<< (::xercesc::DOMElement&, const MeasureEvaluateSpecifiedActionType&);

    void
    operator<< (::xercesc::DOMElement&, const EvaluateSpecifiedCharacteristicsActionType&);

    void
    operator<< (::xercesc::DOMElement&, const MeasureSpecifiedFeaturesActionType&);

    void
    operator<< (::xercesc::DOMElement&, const MeasurandBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const EvaluateCharacteristicMeasurandType&);

    void
    operator<< (::xercesc::DOMElement&, const EstablishDatumMeasurandType&);

    void
    operator<< (::xercesc::DOMElement&, const MeasureSpecifiedMeasurandsActionType&);

    void
    operator<< (::xercesc::DOMElement&, const MeasurandsType&);

    void
    operator<< (::xercesc::DOMElement&, const ActionMethodBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const MeasureFeatureMethodBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const CoordinateMeasureFeatureMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const GageMeasureFeatureMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const ManualMeasureFeatureMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const OtherMeasureFeatureMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const ActionMethodsType&);

    void
    operator<< (::xercesc::DOMElement&, const MeasureActionGroupFunctionEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const MeasureActionGroupFunctionEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const MeasureActionGroupFunctionEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const MeasureActionGroupFunctionType&);

    void
    operator<< (::xercesc::DOMElement&, const ActionGroupBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const OrderedActionGroupType&);

    void
    operator<< (::xercesc::DOMElement&, const UnorderedActionGroupType&);

    void
    operator<< (::xercesc::DOMElement&, const PartiallyOrderedActionGroupType&);

    void
    operator<< (::xercesc::DOMElement&, const StepWithPredecessorsType&);

    void
    operator<< (::xercesc::DOMElement&, const StepsWithPredecessorsType&);

    void
    operator<< (::xercesc::DOMElement&, const PredecessorsType&);

    void
    operator<< (::xercesc::DOMElement&, const OneOfActionGroupType&);

    void
    operator<< (::xercesc::DOMElement&, const PickSomeActionGroupType&);

    void
    operator<< (::xercesc::DOMElement&, const WorkInstructionBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const TextInstructionType&);

    void
    operator<< (::xercesc::DOMElement&, const DocumentFileInstructionType&);

    void
    operator<< (::xercesc::DOMElement&, const ImageInstructionType&);

    void
    operator<< (::xercesc::DOMElement&, const VideoInstructionType&);

    void
    operator<< (::xercesc::DOMElement&, const WorkInstructionsType&);

    // Serialize to std::ostream.
    //

    void
    PlanRoot (::std::ostream& os,
              const ::xsd::qif2::ActionGroupBaseType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    PlanRoot (::std::ostream& os,
              const ::xsd::qif2::ActionGroupBaseType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    PlanRoot (::std::ostream& os,
              const ::xsd::qif2::ActionGroupBaseType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PlanRoot (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::ActionGroupBaseType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    PlanRoot (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::ActionGroupBaseType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    void
    PlanRoot (::xercesc::XMLFormatTarget& ft,
              const ::xsd::qif2::ActionGroupBaseType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PlanRoot (::xercesc::DOMDocument& d,
              const ::xsd::qif2::ActionGroupBaseType& x,
              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PlanRoot (const ::xsd::qif2::ActionGroupBaseType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    OrderedPlanRoot (::std::ostream& os,
                     const ::xsd::qif2::OrderedActionGroupType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    OrderedPlanRoot (::std::ostream& os,
                     const ::xsd::qif2::OrderedActionGroupType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    OrderedPlanRoot (::std::ostream& os,
                     const ::xsd::qif2::OrderedActionGroupType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    OrderedPlanRoot (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::OrderedActionGroupType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    OrderedPlanRoot (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::OrderedActionGroupType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    OrderedPlanRoot (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::OrderedActionGroupType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    OrderedPlanRoot (::xercesc::DOMDocument& d,
                     const ::xsd::qif2::OrderedActionGroupType& x,
                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    OrderedPlanRoot (const ::xsd::qif2::OrderedActionGroupType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UnorderedPlanRoot (::std::ostream& os,
                       const ::xsd::qif2::UnorderedActionGroupType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    UnorderedPlanRoot (::std::ostream& os,
                       const ::xsd::qif2::UnorderedActionGroupType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    UnorderedPlanRoot (::std::ostream& os,
                       const ::xsd::qif2::UnorderedActionGroupType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UnorderedPlanRoot (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::UnorderedActionGroupType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    UnorderedPlanRoot (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::UnorderedActionGroupType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    void
    UnorderedPlanRoot (::xercesc::XMLFormatTarget& ft,
                       const ::xsd::qif2::UnorderedActionGroupType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UnorderedPlanRoot (::xercesc::DOMDocument& d,
                       const ::xsd::qif2::UnorderedActionGroupType& x,
                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UnorderedPlanRoot (const ::xsd::qif2::UnorderedActionGroupType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PartiallyOrderedPlanRoot (::std::ostream& os,
                              const ::xsd::qif2::PartiallyOrderedActionGroupType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    PartiallyOrderedPlanRoot (::std::ostream& os,
                              const ::xsd::qif2::PartiallyOrderedActionGroupType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    PartiallyOrderedPlanRoot (::std::ostream& os,
                              const ::xsd::qif2::PartiallyOrderedActionGroupType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PartiallyOrderedPlanRoot (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::PartiallyOrderedActionGroupType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    PartiallyOrderedPlanRoot (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::PartiallyOrderedActionGroupType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    PartiallyOrderedPlanRoot (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::PartiallyOrderedActionGroupType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PartiallyOrderedPlanRoot (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::PartiallyOrderedActionGroupType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PartiallyOrderedPlanRoot (const ::xsd::qif2::PartiallyOrderedActionGroupType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    OneOfPlanRoot (::std::ostream& os,
                   const ::xsd::qif2::OneOfActionGroupType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    OneOfPlanRoot (::std::ostream& os,
                   const ::xsd::qif2::OneOfActionGroupType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    OneOfPlanRoot (::std::ostream& os,
                   const ::xsd::qif2::OneOfActionGroupType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    OneOfPlanRoot (::xercesc::XMLFormatTarget& ft,
                   const ::xsd::qif2::OneOfActionGroupType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    OneOfPlanRoot (::xercesc::XMLFormatTarget& ft,
                   const ::xsd::qif2::OneOfActionGroupType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    OneOfPlanRoot (::xercesc::XMLFormatTarget& ft,
                   const ::xsd::qif2::OneOfActionGroupType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    OneOfPlanRoot (::xercesc::DOMDocument& d,
                   const ::xsd::qif2::OneOfActionGroupType& x,
                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    OneOfPlanRoot (const ::xsd::qif2::OneOfActionGroupType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PickSomePlanRoot (::std::ostream& os,
                      const ::xsd::qif2::PickSomeActionGroupType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    PickSomePlanRoot (::std::ostream& os,
                      const ::xsd::qif2::PickSomeActionGroupType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    PickSomePlanRoot (::std::ostream& os,
                      const ::xsd::qif2::PickSomeActionGroupType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PickSomePlanRoot (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::PickSomeActionGroupType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    PickSomePlanRoot (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::PickSomeActionGroupType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    PickSomePlanRoot (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::PickSomeActionGroupType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PickSomePlanRoot (::xercesc::DOMDocument& d,
                      const ::xsd::qif2::PickSomeActionGroupType& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PickSomePlanRoot (const ::xsd::qif2::PickSomeActionGroupType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PlanElement (::std::ostream& os,
                 const ::xsd::qif2::PlanElementBaseType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    void
    PlanElement (::std::ostream& os,
                 const ::xsd::qif2::PlanElementBaseType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    void
    PlanElement (::std::ostream& os,
                 const ::xsd::qif2::PlanElementBaseType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PlanElement (::xercesc::XMLFormatTarget& ft,
                 const ::xsd::qif2::PlanElementBaseType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    void
    PlanElement (::xercesc::XMLFormatTarget& ft,
                 const ::xsd::qif2::PlanElementBaseType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    void
    PlanElement (::xercesc::XMLFormatTarget& ft,
                 const ::xsd::qif2::PlanElementBaseType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PlanElement (::xercesc::DOMDocument& d,
                 const ::xsd::qif2::PlanElementBaseType& x,
                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PlanElement (const ::xsd::qif2::PlanElementBaseType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    OrderedActionGroup (::std::ostream& os,
                        const ::xsd::qif2::OrderedActionGroupType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    OrderedActionGroup (::std::ostream& os,
                        const ::xsd::qif2::OrderedActionGroupType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    OrderedActionGroup (::std::ostream& os,
                        const ::xsd::qif2::OrderedActionGroupType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    OrderedActionGroup (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::OrderedActionGroupType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    OrderedActionGroup (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::OrderedActionGroupType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    OrderedActionGroup (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::OrderedActionGroupType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    OrderedActionGroup (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::OrderedActionGroupType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    OrderedActionGroup (const ::xsd::qif2::OrderedActionGroupType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    UnorderedActionGroup (::std::ostream& os,
                          const ::xsd::qif2::UnorderedActionGroupType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    UnorderedActionGroup (::std::ostream& os,
                          const ::xsd::qif2::UnorderedActionGroupType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    UnorderedActionGroup (::std::ostream& os,
                          const ::xsd::qif2::UnorderedActionGroupType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    UnorderedActionGroup (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::UnorderedActionGroupType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    UnorderedActionGroup (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::UnorderedActionGroupType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    UnorderedActionGroup (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::UnorderedActionGroupType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    UnorderedActionGroup (::xercesc::DOMDocument& d,
                          const ::xsd::qif2::UnorderedActionGroupType& x,
                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    UnorderedActionGroup (const ::xsd::qif2::UnorderedActionGroupType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PartiallyOrderedActionGroup (::std::ostream& os,
                                 const ::xsd::qif2::PartiallyOrderedActionGroupType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    PartiallyOrderedActionGroup (::std::ostream& os,
                                 const ::xsd::qif2::PartiallyOrderedActionGroupType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    PartiallyOrderedActionGroup (::std::ostream& os,
                                 const ::xsd::qif2::PartiallyOrderedActionGroupType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PartiallyOrderedActionGroup (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::PartiallyOrderedActionGroupType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    PartiallyOrderedActionGroup (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::PartiallyOrderedActionGroupType& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    void
    PartiallyOrderedActionGroup (::xercesc::XMLFormatTarget& ft,
                                 const ::xsd::qif2::PartiallyOrderedActionGroupType& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PartiallyOrderedActionGroup (::xercesc::DOMDocument& d,
                                 const ::xsd::qif2::PartiallyOrderedActionGroupType& x,
                                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PartiallyOrderedActionGroup (const ::xsd::qif2::PartiallyOrderedActionGroupType& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    OneOfActionGroup (::std::ostream& os,
                      const ::xsd::qif2::OneOfActionGroupType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    OneOfActionGroup (::std::ostream& os,
                      const ::xsd::qif2::OneOfActionGroupType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    OneOfActionGroup (::std::ostream& os,
                      const ::xsd::qif2::OneOfActionGroupType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    OneOfActionGroup (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::OneOfActionGroupType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    OneOfActionGroup (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::OneOfActionGroupType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    OneOfActionGroup (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::OneOfActionGroupType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    OneOfActionGroup (::xercesc::DOMDocument& d,
                      const ::xsd::qif2::OneOfActionGroupType& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    OneOfActionGroup (const ::xsd::qif2::OneOfActionGroupType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PickSomeActionGroup (::std::ostream& os,
                         const ::xsd::qif2::PickSomeActionGroupType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    PickSomeActionGroup (::std::ostream& os,
                         const ::xsd::qif2::PickSomeActionGroupType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    PickSomeActionGroup (::std::ostream& os,
                         const ::xsd::qif2::PickSomeActionGroupType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PickSomeActionGroup (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::PickSomeActionGroupType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    PickSomeActionGroup (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::PickSomeActionGroupType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    PickSomeActionGroup (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::PickSomeActionGroupType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PickSomeActionGroup (::xercesc::DOMDocument& d,
                         const ::xsd::qif2::PickSomeActionGroupType& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PickSomeActionGroup (const ::xsd::qif2::PickSomeActionGroupType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    MeasureEvaluateAll (::std::ostream& os,
                        const ::xsd::qif2::MeasureEvaluateAllActionType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    MeasureEvaluateAll (::std::ostream& os,
                        const ::xsd::qif2::MeasureEvaluateAllActionType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    MeasureEvaluateAll (::std::ostream& os,
                        const ::xsd::qif2::MeasureEvaluateAllActionType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    MeasureEvaluateAll (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::MeasureEvaluateAllActionType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    MeasureEvaluateAll (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::MeasureEvaluateAllActionType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    MeasureEvaluateAll (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::MeasureEvaluateAllActionType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    MeasureEvaluateAll (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::MeasureEvaluateAllActionType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    MeasureEvaluateAll (const ::xsd::qif2::MeasureEvaluateAllActionType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    MeasureEvaluateSpecified (::std::ostream& os,
                              const ::xsd::qif2::MeasureEvaluateSpecifiedActionType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    MeasureEvaluateSpecified (::std::ostream& os,
                              const ::xsd::qif2::MeasureEvaluateSpecifiedActionType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    MeasureEvaluateSpecified (::std::ostream& os,
                              const ::xsd::qif2::MeasureEvaluateSpecifiedActionType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    MeasureEvaluateSpecified (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::MeasureEvaluateSpecifiedActionType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    MeasureEvaluateSpecified (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::MeasureEvaluateSpecifiedActionType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    MeasureEvaluateSpecified (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::MeasureEvaluateSpecifiedActionType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    MeasureEvaluateSpecified (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::MeasureEvaluateSpecifiedActionType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    MeasureEvaluateSpecified (const ::xsd::qif2::MeasureEvaluateSpecifiedActionType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    EvaluateSpecifiedCharacteristics (::std::ostream& os,
                                      const ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    EvaluateSpecifiedCharacteristics (::std::ostream& os,
                                      const ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    EvaluateSpecifiedCharacteristics (::std::ostream& os,
                                      const ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EvaluateSpecifiedCharacteristics (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    EvaluateSpecifiedCharacteristics (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    void
    EvaluateSpecifiedCharacteristics (::xercesc::XMLFormatTarget& ft,
                                      const ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EvaluateSpecifiedCharacteristics (::xercesc::DOMDocument& d,
                                      const ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType& x,
                                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EvaluateSpecifiedCharacteristics (const ::xsd::qif2::EvaluateSpecifiedCharacteristicsActionType& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    MeasureSpecifiedFeatures (::std::ostream& os,
                              const ::xsd::qif2::MeasureSpecifiedFeaturesActionType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    MeasureSpecifiedFeatures (::std::ostream& os,
                              const ::xsd::qif2::MeasureSpecifiedFeaturesActionType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    MeasureSpecifiedFeatures (::std::ostream& os,
                              const ::xsd::qif2::MeasureSpecifiedFeaturesActionType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    MeasureSpecifiedFeatures (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::MeasureSpecifiedFeaturesActionType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    MeasureSpecifiedFeatures (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::MeasureSpecifiedFeaturesActionType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    MeasureSpecifiedFeatures (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::MeasureSpecifiedFeaturesActionType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    MeasureSpecifiedFeatures (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::MeasureSpecifiedFeaturesActionType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    MeasureSpecifiedFeatures (const ::xsd::qif2::MeasureSpecifiedFeaturesActionType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    MeasureSpecifiedMeasurands (::std::ostream& os,
                                const ::xsd::qif2::MeasureSpecifiedMeasurandsActionType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    MeasureSpecifiedMeasurands (::std::ostream& os,
                                const ::xsd::qif2::MeasureSpecifiedMeasurandsActionType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    MeasureSpecifiedMeasurands (::std::ostream& os,
                                const ::xsd::qif2::MeasureSpecifiedMeasurandsActionType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    MeasureSpecifiedMeasurands (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::MeasureSpecifiedMeasurandsActionType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    MeasureSpecifiedMeasurands (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::MeasureSpecifiedMeasurandsActionType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    MeasureSpecifiedMeasurands (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::MeasureSpecifiedMeasurandsActionType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    MeasureSpecifiedMeasurands (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::MeasureSpecifiedMeasurandsActionType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    MeasureSpecifiedMeasurands (const ::xsd::qif2::MeasureSpecifiedMeasurandsActionType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    WorkInstruction (::std::ostream& os,
                     const ::xsd::qif2::WorkInstructionBaseType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    WorkInstruction (::std::ostream& os,
                     const ::xsd::qif2::WorkInstructionBaseType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    WorkInstruction (::std::ostream& os,
                     const ::xsd::qif2::WorkInstructionBaseType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    WorkInstruction (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::WorkInstructionBaseType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    WorkInstruction (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::WorkInstructionBaseType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    WorkInstruction (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::WorkInstructionBaseType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    WorkInstruction (::xercesc::DOMDocument& d,
                     const ::xsd::qif2::WorkInstructionBaseType& x,
                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    WorkInstruction (const ::xsd::qif2::WorkInstructionBaseType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    TextInstruction (::std::ostream& os,
                     const ::xsd::qif2::TextInstructionType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    TextInstruction (::std::ostream& os,
                     const ::xsd::qif2::TextInstructionType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    TextInstruction (::std::ostream& os,
                     const ::xsd::qif2::TextInstructionType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    TextInstruction (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::TextInstructionType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    TextInstruction (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::TextInstructionType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    TextInstruction (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::TextInstructionType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    TextInstruction (::xercesc::DOMDocument& d,
                     const ::xsd::qif2::TextInstructionType& x,
                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    TextInstruction (const ::xsd::qif2::TextInstructionType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    DocumentFileInstruction (::std::ostream& os,
                             const ::xsd::qif2::DocumentFileInstructionType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    DocumentFileInstruction (::std::ostream& os,
                             const ::xsd::qif2::DocumentFileInstructionType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    DocumentFileInstruction (::std::ostream& os,
                             const ::xsd::qif2::DocumentFileInstructionType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    DocumentFileInstruction (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::DocumentFileInstructionType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    DocumentFileInstruction (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::DocumentFileInstructionType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    DocumentFileInstruction (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::DocumentFileInstructionType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    DocumentFileInstruction (::xercesc::DOMDocument& d,
                             const ::xsd::qif2::DocumentFileInstructionType& x,
                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DocumentFileInstruction (const ::xsd::qif2::DocumentFileInstructionType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ImageInstruction (::std::ostream& os,
                      const ::xsd::qif2::ImageInstructionType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    ImageInstruction (::std::ostream& os,
                      const ::xsd::qif2::ImageInstructionType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    ImageInstruction (::std::ostream& os,
                      const ::xsd::qif2::ImageInstructionType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ImageInstruction (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::ImageInstructionType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    ImageInstruction (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::ImageInstructionType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    ImageInstruction (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::ImageInstructionType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ImageInstruction (::xercesc::DOMDocument& d,
                      const ::xsd::qif2::ImageInstructionType& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ImageInstruction (const ::xsd::qif2::ImageInstructionType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    VideoInstruction (::std::ostream& os,
                      const ::xsd::qif2::VideoInstructionType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    VideoInstruction (::std::ostream& os,
                      const ::xsd::qif2::VideoInstructionType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    VideoInstruction (::std::ostream& os,
                      const ::xsd::qif2::VideoInstructionType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    VideoInstruction (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::VideoInstructionType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    VideoInstruction (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::VideoInstructionType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    VideoInstruction (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::VideoInstructionType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    VideoInstruction (::xercesc::DOMDocument& d,
                      const ::xsd::qif2::VideoInstructionType& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    VideoInstruction (const ::xsd::qif2::VideoInstructionType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ActionMethod (::std::ostream& os,
                  const ::xsd::qif2::ActionMethodBaseType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    void
    ActionMethod (::std::ostream& os,
                  const ::xsd::qif2::ActionMethodBaseType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    void
    ActionMethod (::std::ostream& os,
                  const ::xsd::qif2::ActionMethodBaseType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ActionMethod (::xercesc::XMLFormatTarget& ft,
                  const ::xsd::qif2::ActionMethodBaseType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    void
    ActionMethod (::xercesc::XMLFormatTarget& ft,
                  const ::xsd::qif2::ActionMethodBaseType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    void
    ActionMethod (::xercesc::XMLFormatTarget& ft,
                  const ::xsd::qif2::ActionMethodBaseType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ActionMethod (::xercesc::DOMDocument& d,
                  const ::xsd::qif2::ActionMethodBaseType& x,
                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ActionMethod (const ::xsd::qif2::ActionMethodBaseType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CoordinateMeasureFeatureMethod (::std::ostream& os,
                                    const ::xsd::qif2::CoordinateMeasureFeatureMethodType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    CoordinateMeasureFeatureMethod (::std::ostream& os,
                                    const ::xsd::qif2::CoordinateMeasureFeatureMethodType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    CoordinateMeasureFeatureMethod (::std::ostream& os,
                                    const ::xsd::qif2::CoordinateMeasureFeatureMethodType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CoordinateMeasureFeatureMethod (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::CoordinateMeasureFeatureMethodType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    CoordinateMeasureFeatureMethod (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::CoordinateMeasureFeatureMethodType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    CoordinateMeasureFeatureMethod (::xercesc::XMLFormatTarget& ft,
                                    const ::xsd::qif2::CoordinateMeasureFeatureMethodType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::string& e = "UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CoordinateMeasureFeatureMethod (::xercesc::DOMDocument& d,
                                    const ::xsd::qif2::CoordinateMeasureFeatureMethodType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CoordinateMeasureFeatureMethod (const ::xsd::qif2::CoordinateMeasureFeatureMethodType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    GageMeasureFeatureMethod (::std::ostream& os,
                              const ::xsd::qif2::GageMeasureFeatureMethodType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    GageMeasureFeatureMethod (::std::ostream& os,
                              const ::xsd::qif2::GageMeasureFeatureMethodType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    GageMeasureFeatureMethod (::std::ostream& os,
                              const ::xsd::qif2::GageMeasureFeatureMethodType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    GageMeasureFeatureMethod (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::GageMeasureFeatureMethodType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    GageMeasureFeatureMethod (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::GageMeasureFeatureMethodType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    GageMeasureFeatureMethod (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::GageMeasureFeatureMethodType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    GageMeasureFeatureMethod (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::GageMeasureFeatureMethodType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    GageMeasureFeatureMethod (const ::xsd::qif2::GageMeasureFeatureMethodType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ManualMeasureFeatureMethod (::std::ostream& os,
                                const ::xsd::qif2::ManualMeasureFeatureMethodType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ManualMeasureFeatureMethod (::std::ostream& os,
                                const ::xsd::qif2::ManualMeasureFeatureMethodType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ManualMeasureFeatureMethod (::std::ostream& os,
                                const ::xsd::qif2::ManualMeasureFeatureMethodType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ManualMeasureFeatureMethod (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::ManualMeasureFeatureMethodType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ManualMeasureFeatureMethod (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::ManualMeasureFeatureMethodType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ManualMeasureFeatureMethod (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::ManualMeasureFeatureMethodType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ManualMeasureFeatureMethod (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::ManualMeasureFeatureMethodType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ManualMeasureFeatureMethod (const ::xsd::qif2::ManualMeasureFeatureMethodType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    OtherMeasureFeatureMethod (::std::ostream& os,
                               const ::xsd::qif2::OtherMeasureFeatureMethodType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    OtherMeasureFeatureMethod (::std::ostream& os,
                               const ::xsd::qif2::OtherMeasureFeatureMethodType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    OtherMeasureFeatureMethod (::std::ostream& os,
                               const ::xsd::qif2::OtherMeasureFeatureMethodType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    OtherMeasureFeatureMethod (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::OtherMeasureFeatureMethodType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    OtherMeasureFeatureMethod (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::OtherMeasureFeatureMethodType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    void
    OtherMeasureFeatureMethod (::xercesc::XMLFormatTarget& ft,
                               const ::xsd::qif2::OtherMeasureFeatureMethodType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    OtherMeasureFeatureMethod (::xercesc::DOMDocument& d,
                               const ::xsd::qif2::OtherMeasureFeatureMethodType& x,
                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    OtherMeasureFeatureMethod (const ::xsd::qif2::OtherMeasureFeatureMethodType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Measurand (::std::ostream& os,
               const ::xsd::qif2::MeasurandBaseType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    void
    Measurand (::std::ostream& os,
               const ::xsd::qif2::MeasurandBaseType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    void
    Measurand (::std::ostream& os,
               const ::xsd::qif2::MeasurandBaseType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Measurand (::xercesc::XMLFormatTarget& ft,
               const ::xsd::qif2::MeasurandBaseType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    void
    Measurand (::xercesc::XMLFormatTarget& ft,
               const ::xsd::qif2::MeasurandBaseType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    void
    Measurand (::xercesc::XMLFormatTarget& ft,
               const ::xsd::qif2::MeasurandBaseType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Measurand (::xercesc::DOMDocument& d,
               const ::xsd::qif2::MeasurandBaseType& x,
               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Measurand (const ::xsd::qif2::MeasurandBaseType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    EvaluateCharacteristicMeasurand (::std::ostream& os,
                                     const ::xsd::qif2::EvaluateCharacteristicMeasurandType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    EvaluateCharacteristicMeasurand (::std::ostream& os,
                                     const ::xsd::qif2::EvaluateCharacteristicMeasurandType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    EvaluateCharacteristicMeasurand (::std::ostream& os,
                                     const ::xsd::qif2::EvaluateCharacteristicMeasurandType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EvaluateCharacteristicMeasurand (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::EvaluateCharacteristicMeasurandType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    EvaluateCharacteristicMeasurand (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::EvaluateCharacteristicMeasurandType& x, 
                                     ::xml_schema::error_handler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    void
    EvaluateCharacteristicMeasurand (::xercesc::XMLFormatTarget& ft,
                                     const ::xsd::qif2::EvaluateCharacteristicMeasurandType& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EvaluateCharacteristicMeasurand (::xercesc::DOMDocument& d,
                                     const ::xsd::qif2::EvaluateCharacteristicMeasurandType& x,
                                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EvaluateCharacteristicMeasurand (const ::xsd::qif2::EvaluateCharacteristicMeasurandType& x, 
                                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    EstablishDatumMeasurand (::std::ostream& os,
                             const ::xsd::qif2::EstablishDatumMeasurandType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    EstablishDatumMeasurand (::std::ostream& os,
                             const ::xsd::qif2::EstablishDatumMeasurandType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    EstablishDatumMeasurand (::std::ostream& os,
                             const ::xsd::qif2::EstablishDatumMeasurandType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EstablishDatumMeasurand (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::EstablishDatumMeasurandType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    EstablishDatumMeasurand (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::EstablishDatumMeasurandType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    EstablishDatumMeasurand (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::EstablishDatumMeasurandType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EstablishDatumMeasurand (::xercesc::DOMDocument& d,
                             const ::xsd::qif2::EstablishDatumMeasurandType& x,
                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EstablishDatumMeasurand (const ::xsd::qif2::EstablishDatumMeasurandType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // QIFPLAN_HXX

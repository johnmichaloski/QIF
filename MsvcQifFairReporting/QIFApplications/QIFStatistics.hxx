// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef QIFSTATISTICS_HXX
#define QIFSTATISTICS_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xsd
{
  namespace qif2
  {
    class StatisticalStudyPlanBaseType;
    class LinearityStudyPlanType;
    class StabilityStudyPlanType;
    class MultipleProductInstanceStudyPlanBaseType;
    class BiasStudyPlanType;
    class FirstArticleStudyPlanType;
    class ProcessDifferenceStudyPlanType;
    class SimpleStudyPlanType;
    class CapabilityStudyPlanType;
    class GageRandRStudyEnumType;
    class GageRandRStudyPlanType;
    class ControlMethodType;
    class ProductionStudyPlanType;
    class StatisticalStudyResultsBaseType;
    class LinearityStudyResultsType;
    class StabilityStudyResultsType;
    class BiasStudyResultsType;
    class FirstArticleStudyResultsType;
    class ProcessDifferenceStudyResultsType;
    class MultipleProductInstanceStudyResultsBaseType;
    class SimpleStudyResultsType;
    class CapabilityStudyResultsType;
    class GageRandRStudyResultsType;
    class ProductionStudyResultsType;
    class StatisticalStudyPlansType;
    class StatisticalStudiesResultsType;
    class CorrectiveActionPlanType;
    class CorrectiveActionPlansType;
    class StatisticsType;
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "../qiflibrary/intermediatespmi.hxx"

#include "../qiflibrary/features.hxx"

#include "../qiflibrary/traceability.hxx"

#include "../qiflibrary/statistics.hxx"

namespace xsd
{
  namespace qif2
  {
    class StatisticalStudyPlanBaseType: public ::xml_schema::type
    {
      public:
      // Attributes
      //
      typedef ::xsd::qif2::AttributesType Attributes_type;
      typedef ::xsd::cxx::tree::optional< Attributes_type > Attributes_optional;
      typedef ::xsd::cxx::tree::traits< Attributes_type, char > Attributes_traits;

      const Attributes_optional&
      Attributes () const;

      Attributes_optional&
      Attributes ();

      void
      Attributes (const Attributes_type& x);

      void
      Attributes (const Attributes_optional& x);

      void
      Attributes (::std::auto_ptr< Attributes_type > p);

      // ThisStatisticalStudyPlanInstanceQPId
      //
      typedef ::xsd::qif2::QPIdType ThisStatisticalStudyPlanInstanceQPId_type;
      typedef ::xsd::cxx::tree::optional< ThisStatisticalStudyPlanInstanceQPId_type > ThisStatisticalStudyPlanInstanceQPId_optional;
      typedef ::xsd::cxx::tree::traits< ThisStatisticalStudyPlanInstanceQPId_type, char > ThisStatisticalStudyPlanInstanceQPId_traits;

      const ThisStatisticalStudyPlanInstanceQPId_optional&
      ThisStatisticalStudyPlanInstanceQPId () const;

      ThisStatisticalStudyPlanInstanceQPId_optional&
      ThisStatisticalStudyPlanInstanceQPId ();

      void
      ThisStatisticalStudyPlanInstanceQPId (const ThisStatisticalStudyPlanInstanceQPId_type& x);

      void
      ThisStatisticalStudyPlanInstanceQPId (const ThisStatisticalStudyPlanInstanceQPId_optional& x);

      void
      ThisStatisticalStudyPlanInstanceQPId (::std::auto_ptr< ThisStatisticalStudyPlanInstanceQPId_type > p);

      // FeatureItemIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType FeatureItemIds_type;
      typedef ::xsd::cxx::tree::optional< FeatureItemIds_type > FeatureItemIds_optional;
      typedef ::xsd::cxx::tree::traits< FeatureItemIds_type, char > FeatureItemIds_traits;

      const FeatureItemIds_optional&
      FeatureItemIds () const;

      FeatureItemIds_optional&
      FeatureItemIds ();

      void
      FeatureItemIds (const FeatureItemIds_type& x);

      void
      FeatureItemIds (const FeatureItemIds_optional& x);

      void
      FeatureItemIds (::std::auto_ptr< FeatureItemIds_type > p);

      // CalculateAverageFeatures
      //
      typedef ::xml_schema::boolean CalculateAverageFeatures_type;
      typedef ::xsd::cxx::tree::optional< CalculateAverageFeatures_type > CalculateAverageFeatures_optional;
      typedef ::xsd::cxx::tree::traits< CalculateAverageFeatures_type, char > CalculateAverageFeatures_traits;

      const CalculateAverageFeatures_optional&
      CalculateAverageFeatures () const;

      CalculateAverageFeatures_optional&
      CalculateAverageFeatures ();

      void
      CalculateAverageFeatures (const CalculateAverageFeatures_type& x);

      void
      CalculateAverageFeatures (const CalculateAverageFeatures_optional& x);

      // CharacteristicItemIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType CharacteristicItemIds_type;
      typedef ::xsd::cxx::tree::optional< CharacteristicItemIds_type > CharacteristicItemIds_optional;
      typedef ::xsd::cxx::tree::traits< CharacteristicItemIds_type, char > CharacteristicItemIds_traits;

      const CharacteristicItemIds_optional&
      CharacteristicItemIds () const;

      CharacteristicItemIds_optional&
      CharacteristicItemIds ();

      void
      CharacteristicItemIds (const CharacteristicItemIds_type& x);

      void
      CharacteristicItemIds (const CharacteristicItemIds_optional& x);

      void
      CharacteristicItemIds (::std::auto_ptr< CharacteristicItemIds_type > p);

      // StatsValuesPerChar
      //
      typedef ::xsd::qif2::ListAccumulatedStatsValuesType StatsValuesPerChar_type;
      typedef ::xsd::cxx::tree::optional< StatsValuesPerChar_type > StatsValuesPerChar_optional;
      typedef ::xsd::cxx::tree::traits< StatsValuesPerChar_type, char > StatsValuesPerChar_traits;

      const StatsValuesPerChar_optional&
      StatsValuesPerChar () const;

      StatsValuesPerChar_optional&
      StatsValuesPerChar ();

      void
      StatsValuesPerChar (const StatsValuesPerChar_type& x);

      void
      StatsValuesPerChar (const StatsValuesPerChar_optional& x);

      void
      StatsValuesPerChar (::std::auto_ptr< StatsValuesPerChar_type > p);

      // StatsValuesPerSubgroup
      //
      typedef ::xsd::qif2::ListSubgroupStatsValuesType StatsValuesPerSubgroup_type;
      typedef ::xsd::cxx::tree::optional< StatsValuesPerSubgroup_type > StatsValuesPerSubgroup_optional;
      typedef ::xsd::cxx::tree::traits< StatsValuesPerSubgroup_type, char > StatsValuesPerSubgroup_traits;

      const StatsValuesPerSubgroup_optional&
      StatsValuesPerSubgroup () const;

      StatsValuesPerSubgroup_optional&
      StatsValuesPerSubgroup ();

      void
      StatsValuesPerSubgroup (const StatsValuesPerSubgroup_type& x);

      void
      StatsValuesPerSubgroup (const StatsValuesPerSubgroup_optional& x);

      void
      StatsValuesPerSubgroup (::std::auto_ptr< StatsValuesPerSubgroup_type > p);

      // StatsValuesSummary
      //
      typedef ::xsd::qif2::SummaryStatsValuesType StatsValuesSummary_type;
      typedef ::xsd::cxx::tree::sequence< StatsValuesSummary_type > StatsValuesSummary_sequence;
      typedef StatsValuesSummary_sequence::iterator StatsValuesSummary_iterator;
      typedef StatsValuesSummary_sequence::const_iterator StatsValuesSummary_const_iterator;
      typedef ::xsd::cxx::tree::traits< StatsValuesSummary_type, char > StatsValuesSummary_traits;

      const StatsValuesSummary_sequence&
      StatsValuesSummary () const;

      StatsValuesSummary_sequence&
      StatsValuesSummary ();

      void
      StatsValuesSummary (const StatsValuesSummary_sequence& s);

      // PreInspectionTraceability
      //
      typedef ::xsd::qif2::PreInspectionTraceabilityType PreInspectionTraceability_type;
      typedef ::xsd::cxx::tree::optional< PreInspectionTraceability_type > PreInspectionTraceability_optional;
      typedef ::xsd::cxx::tree::traits< PreInspectionTraceability_type, char > PreInspectionTraceability_traits;

      const PreInspectionTraceability_optional&
      PreInspectionTraceability () const;

      PreInspectionTraceability_optional&
      PreInspectionTraceability ();

      void
      PreInspectionTraceability (const PreInspectionTraceability_type& x);

      void
      PreInspectionTraceability (const PreInspectionTraceability_optional& x);

      void
      PreInspectionTraceability (::std::auto_ptr< PreInspectionTraceability_type > p);

      // Name
      //
      typedef ::xml_schema::token Name_type;
      typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
      typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

      const Name_optional&
      Name () const;

      Name_optional&
      Name ();

      void
      Name (const Name_type& x);

      void
      Name (const Name_optional& x);

      void
      Name (::std::auto_ptr< Name_type > p);

      // Description
      //
      typedef ::xml_schema::string Description_type;
      typedef ::xsd::cxx::tree::optional< Description_type > Description_optional;
      typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

      const Description_optional&
      Description () const;

      Description_optional&
      Description ();

      void
      Description (const Description_type& x);

      void
      Description (const Description_optional& x);

      void
      Description (::std::auto_ptr< Description_type > p);

      // PlanId
      //
      typedef ::xsd::qif2::QIFReferenceFullType PlanId_type;
      typedef ::xsd::cxx::tree::optional< PlanId_type > PlanId_optional;
      typedef ::xsd::cxx::tree::traits< PlanId_type, char > PlanId_traits;

      const PlanId_optional&
      PlanId () const;

      PlanId_optional&
      PlanId ();

      void
      PlanId (const PlanId_type& x);

      void
      PlanId (const PlanId_optional& x);

      void
      PlanId (::std::auto_ptr< PlanId_type > p);

      // CorrectiveActionPlanId
      //
      typedef ::xsd::qif2::QIFReferenceFullType CorrectiveActionPlanId_type;
      typedef ::xsd::cxx::tree::optional< CorrectiveActionPlanId_type > CorrectiveActionPlanId_optional;
      typedef ::xsd::cxx::tree::traits< CorrectiveActionPlanId_type, char > CorrectiveActionPlanId_traits;

      const CorrectiveActionPlanId_optional&
      CorrectiveActionPlanId () const;

      CorrectiveActionPlanId_optional&
      CorrectiveActionPlanId ();

      void
      CorrectiveActionPlanId (const CorrectiveActionPlanId_type& x);

      void
      CorrectiveActionPlanId (const CorrectiveActionPlanId_optional& x);

      void
      CorrectiveActionPlanId (::std::auto_ptr< CorrectiveActionPlanId_type > p);

      // id
      //
      typedef ::xsd::qif2::QIFIdType id_type;
      typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

      const id_type&
      id () const;

      id_type&
      id ();

      void
      id (const id_type& x);

      void
      id (::std::auto_ptr< id_type > p);

      // Constructors.
      //
      StatisticalStudyPlanBaseType (const id_type&);

      StatisticalStudyPlanBaseType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      StatisticalStudyPlanBaseType (const StatisticalStudyPlanBaseType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual StatisticalStudyPlanBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatisticalStudyPlanBaseType&
      operator= (const StatisticalStudyPlanBaseType& x);

      virtual 
      ~StatisticalStudyPlanBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Attributes_optional Attributes_;
      ThisStatisticalStudyPlanInstanceQPId_optional ThisStatisticalStudyPlanInstanceQPId_;
      FeatureItemIds_optional FeatureItemIds_;
      CalculateAverageFeatures_optional CalculateAverageFeatures_;
      CharacteristicItemIds_optional CharacteristicItemIds_;
      StatsValuesPerChar_optional StatsValuesPerChar_;
      StatsValuesPerSubgroup_optional StatsValuesPerSubgroup_;
      StatsValuesSummary_sequence StatsValuesSummary_;
      PreInspectionTraceability_optional PreInspectionTraceability_;
      Name_optional Name_;
      Description_optional Description_;
      PlanId_optional PlanId_;
      CorrectiveActionPlanId_optional CorrectiveActionPlanId_;
      ::xsd::cxx::tree::one< id_type > id_;
    };

    class LinearityStudyPlanType: public ::xsd::qif2::StatisticalStudyPlanBaseType
    {
      public:
      // MeasurementDeviceIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType MeasurementDeviceIds_type;
      typedef ::xsd::cxx::tree::optional< MeasurementDeviceIds_type > MeasurementDeviceIds_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementDeviceIds_type, char > MeasurementDeviceIds_traits;

      const MeasurementDeviceIds_optional&
      MeasurementDeviceIds () const;

      MeasurementDeviceIds_optional&
      MeasurementDeviceIds ();

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_type& x);

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_optional& x);

      void
      MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > p);

      // GoodnessOfFitThreshold
      //
      typedef ::xml_schema::decimal GoodnessOfFitThreshold_type;
      typedef ::xsd::cxx::tree::optional< GoodnessOfFitThreshold_type > GoodnessOfFitThreshold_optional;
      typedef ::xsd::cxx::tree::traits< GoodnessOfFitThreshold_type, char, ::xsd::cxx::tree::schema_type::decimal > GoodnessOfFitThreshold_traits;

      const GoodnessOfFitThreshold_optional&
      GoodnessOfFitThreshold () const;

      GoodnessOfFitThreshold_optional&
      GoodnessOfFitThreshold ();

      void
      GoodnessOfFitThreshold (const GoodnessOfFitThreshold_type& x);

      void
      GoodnessOfFitThreshold (const GoodnessOfFitThreshold_optional& x);

      // LinearAbsoluteLinearityMinimum
      //
      typedef ::xsd::qif2::LinearValueType LinearAbsoluteLinearityMinimum_type;
      typedef ::xsd::cxx::tree::optional< LinearAbsoluteLinearityMinimum_type > LinearAbsoluteLinearityMinimum_optional;
      typedef ::xsd::cxx::tree::traits< LinearAbsoluteLinearityMinimum_type, char > LinearAbsoluteLinearityMinimum_traits;

      const LinearAbsoluteLinearityMinimum_optional&
      LinearAbsoluteLinearityMinimum () const;

      LinearAbsoluteLinearityMinimum_optional&
      LinearAbsoluteLinearityMinimum ();

      void
      LinearAbsoluteLinearityMinimum (const LinearAbsoluteLinearityMinimum_type& x);

      void
      LinearAbsoluteLinearityMinimum (const LinearAbsoluteLinearityMinimum_optional& x);

      void
      LinearAbsoluteLinearityMinimum (::std::auto_ptr< LinearAbsoluteLinearityMinimum_type > p);

      // AngularAbsoluteLinearityMinimum
      //
      typedef ::xsd::qif2::AngularValueType AngularAbsoluteLinearityMinimum_type;
      typedef ::xsd::cxx::tree::optional< AngularAbsoluteLinearityMinimum_type > AngularAbsoluteLinearityMinimum_optional;
      typedef ::xsd::cxx::tree::traits< AngularAbsoluteLinearityMinimum_type, char > AngularAbsoluteLinearityMinimum_traits;

      const AngularAbsoluteLinearityMinimum_optional&
      AngularAbsoluteLinearityMinimum () const;

      AngularAbsoluteLinearityMinimum_optional&
      AngularAbsoluteLinearityMinimum ();

      void
      AngularAbsoluteLinearityMinimum (const AngularAbsoluteLinearityMinimum_type& x);

      void
      AngularAbsoluteLinearityMinimum (const AngularAbsoluteLinearityMinimum_optional& x);

      void
      AngularAbsoluteLinearityMinimum (::std::auto_ptr< AngularAbsoluteLinearityMinimum_type > p);

      // AreaAbsoluteLinearityMinimum
      //
      typedef ::xsd::qif2::AreaValueType AreaAbsoluteLinearityMinimum_type;
      typedef ::xsd::cxx::tree::optional< AreaAbsoluteLinearityMinimum_type > AreaAbsoluteLinearityMinimum_optional;
      typedef ::xsd::cxx::tree::traits< AreaAbsoluteLinearityMinimum_type, char > AreaAbsoluteLinearityMinimum_traits;

      const AreaAbsoluteLinearityMinimum_optional&
      AreaAbsoluteLinearityMinimum () const;

      AreaAbsoluteLinearityMinimum_optional&
      AreaAbsoluteLinearityMinimum ();

      void
      AreaAbsoluteLinearityMinimum (const AreaAbsoluteLinearityMinimum_type& x);

      void
      AreaAbsoluteLinearityMinimum (const AreaAbsoluteLinearityMinimum_optional& x);

      void
      AreaAbsoluteLinearityMinimum (::std::auto_ptr< AreaAbsoluteLinearityMinimum_type > p);

      // ForceAbsoluteLinearityMinimum
      //
      typedef ::xsd::qif2::ForceValueType ForceAbsoluteLinearityMinimum_type;
      typedef ::xsd::cxx::tree::optional< ForceAbsoluteLinearityMinimum_type > ForceAbsoluteLinearityMinimum_optional;
      typedef ::xsd::cxx::tree::traits< ForceAbsoluteLinearityMinimum_type, char > ForceAbsoluteLinearityMinimum_traits;

      const ForceAbsoluteLinearityMinimum_optional&
      ForceAbsoluteLinearityMinimum () const;

      ForceAbsoluteLinearityMinimum_optional&
      ForceAbsoluteLinearityMinimum ();

      void
      ForceAbsoluteLinearityMinimum (const ForceAbsoluteLinearityMinimum_type& x);

      void
      ForceAbsoluteLinearityMinimum (const ForceAbsoluteLinearityMinimum_optional& x);

      void
      ForceAbsoluteLinearityMinimum (::std::auto_ptr< ForceAbsoluteLinearityMinimum_type > p);

      // MassAbsoluteLinearityMinimum
      //
      typedef ::xsd::qif2::MassValueType MassAbsoluteLinearityMinimum_type;
      typedef ::xsd::cxx::tree::optional< MassAbsoluteLinearityMinimum_type > MassAbsoluteLinearityMinimum_optional;
      typedef ::xsd::cxx::tree::traits< MassAbsoluteLinearityMinimum_type, char > MassAbsoluteLinearityMinimum_traits;

      const MassAbsoluteLinearityMinimum_optional&
      MassAbsoluteLinearityMinimum () const;

      MassAbsoluteLinearityMinimum_optional&
      MassAbsoluteLinearityMinimum ();

      void
      MassAbsoluteLinearityMinimum (const MassAbsoluteLinearityMinimum_type& x);

      void
      MassAbsoluteLinearityMinimum (const MassAbsoluteLinearityMinimum_optional& x);

      void
      MassAbsoluteLinearityMinimum (::std::auto_ptr< MassAbsoluteLinearityMinimum_type > p);

      // PressureAbsoluteLinearityMinimum
      //
      typedef ::xsd::qif2::PressureValueType PressureAbsoluteLinearityMinimum_type;
      typedef ::xsd::cxx::tree::optional< PressureAbsoluteLinearityMinimum_type > PressureAbsoluteLinearityMinimum_optional;
      typedef ::xsd::cxx::tree::traits< PressureAbsoluteLinearityMinimum_type, char > PressureAbsoluteLinearityMinimum_traits;

      const PressureAbsoluteLinearityMinimum_optional&
      PressureAbsoluteLinearityMinimum () const;

      PressureAbsoluteLinearityMinimum_optional&
      PressureAbsoluteLinearityMinimum ();

      void
      PressureAbsoluteLinearityMinimum (const PressureAbsoluteLinearityMinimum_type& x);

      void
      PressureAbsoluteLinearityMinimum (const PressureAbsoluteLinearityMinimum_optional& x);

      void
      PressureAbsoluteLinearityMinimum (::std::auto_ptr< PressureAbsoluteLinearityMinimum_type > p);

      // SpeedAbsoluteLinearityMinimum
      //
      typedef ::xsd::qif2::SpeedValueType SpeedAbsoluteLinearityMinimum_type;
      typedef ::xsd::cxx::tree::optional< SpeedAbsoluteLinearityMinimum_type > SpeedAbsoluteLinearityMinimum_optional;
      typedef ::xsd::cxx::tree::traits< SpeedAbsoluteLinearityMinimum_type, char > SpeedAbsoluteLinearityMinimum_traits;

      const SpeedAbsoluteLinearityMinimum_optional&
      SpeedAbsoluteLinearityMinimum () const;

      SpeedAbsoluteLinearityMinimum_optional&
      SpeedAbsoluteLinearityMinimum ();

      void
      SpeedAbsoluteLinearityMinimum (const SpeedAbsoluteLinearityMinimum_type& x);

      void
      SpeedAbsoluteLinearityMinimum (const SpeedAbsoluteLinearityMinimum_optional& x);

      void
      SpeedAbsoluteLinearityMinimum (::std::auto_ptr< SpeedAbsoluteLinearityMinimum_type > p);

      // TemperatureAbsoluteLinearityMinimum
      //
      typedef ::xsd::qif2::TemperatureValueType TemperatureAbsoluteLinearityMinimum_type;
      typedef ::xsd::cxx::tree::optional< TemperatureAbsoluteLinearityMinimum_type > TemperatureAbsoluteLinearityMinimum_optional;
      typedef ::xsd::cxx::tree::traits< TemperatureAbsoluteLinearityMinimum_type, char > TemperatureAbsoluteLinearityMinimum_traits;

      const TemperatureAbsoluteLinearityMinimum_optional&
      TemperatureAbsoluteLinearityMinimum () const;

      TemperatureAbsoluteLinearityMinimum_optional&
      TemperatureAbsoluteLinearityMinimum ();

      void
      TemperatureAbsoluteLinearityMinimum (const TemperatureAbsoluteLinearityMinimum_type& x);

      void
      TemperatureAbsoluteLinearityMinimum (const TemperatureAbsoluteLinearityMinimum_optional& x);

      void
      TemperatureAbsoluteLinearityMinimum (::std::auto_ptr< TemperatureAbsoluteLinearityMinimum_type > p);

      // TimeAbsoluteLinearityMinimum
      //
      typedef ::xsd::qif2::TimeValueType TimeAbsoluteLinearityMinimum_type;
      typedef ::xsd::cxx::tree::optional< TimeAbsoluteLinearityMinimum_type > TimeAbsoluteLinearityMinimum_optional;
      typedef ::xsd::cxx::tree::traits< TimeAbsoluteLinearityMinimum_type, char > TimeAbsoluteLinearityMinimum_traits;

      const TimeAbsoluteLinearityMinimum_optional&
      TimeAbsoluteLinearityMinimum () const;

      TimeAbsoluteLinearityMinimum_optional&
      TimeAbsoluteLinearityMinimum ();

      void
      TimeAbsoluteLinearityMinimum (const TimeAbsoluteLinearityMinimum_type& x);

      void
      TimeAbsoluteLinearityMinimum (const TimeAbsoluteLinearityMinimum_optional& x);

      void
      TimeAbsoluteLinearityMinimum (::std::auto_ptr< TimeAbsoluteLinearityMinimum_type > p);

      // UserDefinedUnitAbsoluteLinearityMinimum
      //
      typedef ::xsd::qif2::UserDefinedUnitValueType UserDefinedUnitAbsoluteLinearityMinimum_type;
      typedef ::xsd::cxx::tree::sequence< UserDefinedUnitAbsoluteLinearityMinimum_type > UserDefinedUnitAbsoluteLinearityMinimum_sequence;
      typedef UserDefinedUnitAbsoluteLinearityMinimum_sequence::iterator UserDefinedUnitAbsoluteLinearityMinimum_iterator;
      typedef UserDefinedUnitAbsoluteLinearityMinimum_sequence::const_iterator UserDefinedUnitAbsoluteLinearityMinimum_const_iterator;
      typedef ::xsd::cxx::tree::traits< UserDefinedUnitAbsoluteLinearityMinimum_type, char > UserDefinedUnitAbsoluteLinearityMinimum_traits;

      const UserDefinedUnitAbsoluteLinearityMinimum_sequence&
      UserDefinedUnitAbsoluteLinearityMinimum () const;

      UserDefinedUnitAbsoluteLinearityMinimum_sequence&
      UserDefinedUnitAbsoluteLinearityMinimum ();

      void
      UserDefinedUnitAbsoluteLinearityMinimum (const UserDefinedUnitAbsoluteLinearityMinimum_sequence& s);

      // RelativeLinearityMinimum
      //
      typedef ::xml_schema::decimal RelativeLinearityMinimum_type;
      typedef ::xsd::cxx::tree::optional< RelativeLinearityMinimum_type > RelativeLinearityMinimum_optional;
      typedef ::xsd::cxx::tree::traits< RelativeLinearityMinimum_type, char, ::xsd::cxx::tree::schema_type::decimal > RelativeLinearityMinimum_traits;

      const RelativeLinearityMinimum_optional&
      RelativeLinearityMinimum () const;

      RelativeLinearityMinimum_optional&
      RelativeLinearityMinimum ();

      void
      RelativeLinearityMinimum (const RelativeLinearityMinimum_type& x);

      void
      RelativeLinearityMinimum (const RelativeLinearityMinimum_optional& x);

      // Constructors.
      //
      LinearityStudyPlanType (const id_type&);

      LinearityStudyPlanType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      LinearityStudyPlanType (const LinearityStudyPlanType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual LinearityStudyPlanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LinearityStudyPlanType&
      operator= (const LinearityStudyPlanType& x);

      virtual 
      ~LinearityStudyPlanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      MeasurementDeviceIds_optional MeasurementDeviceIds_;
      GoodnessOfFitThreshold_optional GoodnessOfFitThreshold_;
      LinearAbsoluteLinearityMinimum_optional LinearAbsoluteLinearityMinimum_;
      AngularAbsoluteLinearityMinimum_optional AngularAbsoluteLinearityMinimum_;
      AreaAbsoluteLinearityMinimum_optional AreaAbsoluteLinearityMinimum_;
      ForceAbsoluteLinearityMinimum_optional ForceAbsoluteLinearityMinimum_;
      MassAbsoluteLinearityMinimum_optional MassAbsoluteLinearityMinimum_;
      PressureAbsoluteLinearityMinimum_optional PressureAbsoluteLinearityMinimum_;
      SpeedAbsoluteLinearityMinimum_optional SpeedAbsoluteLinearityMinimum_;
      TemperatureAbsoluteLinearityMinimum_optional TemperatureAbsoluteLinearityMinimum_;
      TimeAbsoluteLinearityMinimum_optional TimeAbsoluteLinearityMinimum_;
      UserDefinedUnitAbsoluteLinearityMinimum_sequence UserDefinedUnitAbsoluteLinearityMinimum_;
      RelativeLinearityMinimum_optional RelativeLinearityMinimum_;
    };

    class StabilityStudyPlanType: public ::xsd::qif2::StatisticalStudyPlanBaseType
    {
      public:
      // MeasurementDeviceIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType MeasurementDeviceIds_type;
      typedef ::xsd::cxx::tree::optional< MeasurementDeviceIds_type > MeasurementDeviceIds_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementDeviceIds_type, char > MeasurementDeviceIds_traits;

      const MeasurementDeviceIds_optional&
      MeasurementDeviceIds () const;

      MeasurementDeviceIds_optional&
      MeasurementDeviceIds ();

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_type& x);

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_optional& x);

      void
      MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > p);

      // SampleSize
      //
      typedef ::xml_schema::positive_integer SampleSize_type;
      typedef ::xsd::cxx::tree::traits< SampleSize_type, char > SampleSize_traits;

      const SampleSize_type&
      SampleSize () const;

      SampleSize_type&
      SampleSize ();

      void
      SampleSize (const SampleSize_type& x);

      // SampleFrequency
      //
      typedef ::xml_schema::positive_integer SampleFrequency_type;
      typedef ::xsd::cxx::tree::traits< SampleFrequency_type, char > SampleFrequency_traits;

      const SampleFrequency_type&
      SampleFrequency () const;

      SampleFrequency_type&
      SampleFrequency ();

      void
      SampleFrequency (const SampleFrequency_type& x);

      // SamplingInterval
      //
      typedef ::xsd::qif2::SamplingIntervalType SamplingInterval_type;
      typedef ::xsd::cxx::tree::traits< SamplingInterval_type, char > SamplingInterval_traits;

      const SamplingInterval_type&
      SamplingInterval () const;

      SamplingInterval_type&
      SamplingInterval ();

      void
      SamplingInterval (const SamplingInterval_type& x);

      void
      SamplingInterval (::std::auto_ptr< SamplingInterval_type > p);

      // Constructors.
      //
      StabilityStudyPlanType (const id_type&,
                              const SampleSize_type&,
                              const SampleFrequency_type&,
                              const SamplingInterval_type&);

      StabilityStudyPlanType (const id_type&,
                              const SampleSize_type&,
                              const SampleFrequency_type&,
                              ::std::auto_ptr< SamplingInterval_type >);

      StabilityStudyPlanType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      StabilityStudyPlanType (const StabilityStudyPlanType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual StabilityStudyPlanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StabilityStudyPlanType&
      operator= (const StabilityStudyPlanType& x);

      virtual 
      ~StabilityStudyPlanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      MeasurementDeviceIds_optional MeasurementDeviceIds_;
      ::xsd::cxx::tree::one< SampleSize_type > SampleSize_;
      ::xsd::cxx::tree::one< SampleFrequency_type > SampleFrequency_;
      ::xsd::cxx::tree::one< SamplingInterval_type > SamplingInterval_;
    };

    class MultipleProductInstanceStudyPlanBaseType: public ::xsd::qif2::StatisticalStudyPlanBaseType
    {
      public:
      // NumberOfSamples
      //
      typedef ::xml_schema::positive_integer NumberOfSamples_type;
      typedef ::xsd::cxx::tree::traits< NumberOfSamples_type, char > NumberOfSamples_traits;

      const NumberOfSamples_type&
      NumberOfSamples () const;

      NumberOfSamples_type&
      NumberOfSamples ();

      void
      NumberOfSamples (const NumberOfSamples_type& x);

      // SubgroupSize
      //
      typedef ::xml_schema::positive_integer SubgroupSize_type;
      typedef ::xsd::cxx::tree::optional< SubgroupSize_type > SubgroupSize_optional;
      typedef ::xsd::cxx::tree::traits< SubgroupSize_type, char > SubgroupSize_traits;

      const SubgroupSize_optional&
      SubgroupSize () const;

      SubgroupSize_optional&
      SubgroupSize ();

      void
      SubgroupSize (const SubgroupSize_type& x);

      void
      SubgroupSize (const SubgroupSize_optional& x);

      // Constructors.
      //
      MultipleProductInstanceStudyPlanBaseType (const id_type&,
                                                const NumberOfSamples_type&);

      MultipleProductInstanceStudyPlanBaseType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      MultipleProductInstanceStudyPlanBaseType (const MultipleProductInstanceStudyPlanBaseType& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

      virtual MultipleProductInstanceStudyPlanBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      MultipleProductInstanceStudyPlanBaseType&
      operator= (const MultipleProductInstanceStudyPlanBaseType& x);

      virtual 
      ~MultipleProductInstanceStudyPlanBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< NumberOfSamples_type > NumberOfSamples_;
      SubgroupSize_optional SubgroupSize_;
    };

    class BiasStudyPlanType: public ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType
    {
      public:
      // MeasurementDeviceIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType MeasurementDeviceIds_type;
      typedef ::xsd::cxx::tree::optional< MeasurementDeviceIds_type > MeasurementDeviceIds_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementDeviceIds_type, char > MeasurementDeviceIds_traits;

      const MeasurementDeviceIds_optional&
      MeasurementDeviceIds () const;

      MeasurementDeviceIds_optional&
      MeasurementDeviceIds ();

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_type& x);

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_optional& x);

      void
      MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > p);

      // Constructors.
      //
      BiasStudyPlanType (const id_type&,
                         const NumberOfSamples_type&);

      BiasStudyPlanType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      BiasStudyPlanType (const BiasStudyPlanType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual BiasStudyPlanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      BiasStudyPlanType&
      operator= (const BiasStudyPlanType& x);

      virtual 
      ~BiasStudyPlanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      MeasurementDeviceIds_optional MeasurementDeviceIds_;
    };

    class FirstArticleStudyPlanType: public ::xsd::qif2::StatisticalStudyPlanBaseType
    {
      public:
      // InSpecRatio
      //
      typedef ::xml_schema::decimal InSpecRatio_type;
      typedef ::xsd::cxx::tree::traits< InSpecRatio_type, char, ::xsd::cxx::tree::schema_type::decimal > InSpecRatio_traits;

      const InSpecRatio_type&
      InSpecRatio () const;

      InSpecRatio_type&
      InSpecRatio ();

      void
      InSpecRatio (const InSpecRatio_type& x);

      // LinearAbsoluteMaximum
      //
      typedef ::xsd::qif2::LinearValueType LinearAbsoluteMaximum_type;
      typedef ::xsd::cxx::tree::optional< LinearAbsoluteMaximum_type > LinearAbsoluteMaximum_optional;
      typedef ::xsd::cxx::tree::traits< LinearAbsoluteMaximum_type, char > LinearAbsoluteMaximum_traits;

      const LinearAbsoluteMaximum_optional&
      LinearAbsoluteMaximum () const;

      LinearAbsoluteMaximum_optional&
      LinearAbsoluteMaximum ();

      void
      LinearAbsoluteMaximum (const LinearAbsoluteMaximum_type& x);

      void
      LinearAbsoluteMaximum (const LinearAbsoluteMaximum_optional& x);

      void
      LinearAbsoluteMaximum (::std::auto_ptr< LinearAbsoluteMaximum_type > p);

      // AngularAbsoluteMaximum
      //
      typedef ::xsd::qif2::AngularValueType AngularAbsoluteMaximum_type;
      typedef ::xsd::cxx::tree::optional< AngularAbsoluteMaximum_type > AngularAbsoluteMaximum_optional;
      typedef ::xsd::cxx::tree::traits< AngularAbsoluteMaximum_type, char > AngularAbsoluteMaximum_traits;

      const AngularAbsoluteMaximum_optional&
      AngularAbsoluteMaximum () const;

      AngularAbsoluteMaximum_optional&
      AngularAbsoluteMaximum ();

      void
      AngularAbsoluteMaximum (const AngularAbsoluteMaximum_type& x);

      void
      AngularAbsoluteMaximum (const AngularAbsoluteMaximum_optional& x);

      void
      AngularAbsoluteMaximum (::std::auto_ptr< AngularAbsoluteMaximum_type > p);

      // AreaAbsoluteMaximum
      //
      typedef ::xsd::qif2::AreaValueType AreaAbsoluteMaximum_type;
      typedef ::xsd::cxx::tree::optional< AreaAbsoluteMaximum_type > AreaAbsoluteMaximum_optional;
      typedef ::xsd::cxx::tree::traits< AreaAbsoluteMaximum_type, char > AreaAbsoluteMaximum_traits;

      const AreaAbsoluteMaximum_optional&
      AreaAbsoluteMaximum () const;

      AreaAbsoluteMaximum_optional&
      AreaAbsoluteMaximum ();

      void
      AreaAbsoluteMaximum (const AreaAbsoluteMaximum_type& x);

      void
      AreaAbsoluteMaximum (const AreaAbsoluteMaximum_optional& x);

      void
      AreaAbsoluteMaximum (::std::auto_ptr< AreaAbsoluteMaximum_type > p);

      // ForceAbsoluteMaximum
      //
      typedef ::xsd::qif2::ForceValueType ForceAbsoluteMaximum_type;
      typedef ::xsd::cxx::tree::optional< ForceAbsoluteMaximum_type > ForceAbsoluteMaximum_optional;
      typedef ::xsd::cxx::tree::traits< ForceAbsoluteMaximum_type, char > ForceAbsoluteMaximum_traits;

      const ForceAbsoluteMaximum_optional&
      ForceAbsoluteMaximum () const;

      ForceAbsoluteMaximum_optional&
      ForceAbsoluteMaximum ();

      void
      ForceAbsoluteMaximum (const ForceAbsoluteMaximum_type& x);

      void
      ForceAbsoluteMaximum (const ForceAbsoluteMaximum_optional& x);

      void
      ForceAbsoluteMaximum (::std::auto_ptr< ForceAbsoluteMaximum_type > p);

      // MassAbsoluteMaximum
      //
      typedef ::xsd::qif2::MassValueType MassAbsoluteMaximum_type;
      typedef ::xsd::cxx::tree::optional< MassAbsoluteMaximum_type > MassAbsoluteMaximum_optional;
      typedef ::xsd::cxx::tree::traits< MassAbsoluteMaximum_type, char > MassAbsoluteMaximum_traits;

      const MassAbsoluteMaximum_optional&
      MassAbsoluteMaximum () const;

      MassAbsoluteMaximum_optional&
      MassAbsoluteMaximum ();

      void
      MassAbsoluteMaximum (const MassAbsoluteMaximum_type& x);

      void
      MassAbsoluteMaximum (const MassAbsoluteMaximum_optional& x);

      void
      MassAbsoluteMaximum (::std::auto_ptr< MassAbsoluteMaximum_type > p);

      // PressureAbsoluteMaximum
      //
      typedef ::xsd::qif2::PressureValueType PressureAbsoluteMaximum_type;
      typedef ::xsd::cxx::tree::optional< PressureAbsoluteMaximum_type > PressureAbsoluteMaximum_optional;
      typedef ::xsd::cxx::tree::traits< PressureAbsoluteMaximum_type, char > PressureAbsoluteMaximum_traits;

      const PressureAbsoluteMaximum_optional&
      PressureAbsoluteMaximum () const;

      PressureAbsoluteMaximum_optional&
      PressureAbsoluteMaximum ();

      void
      PressureAbsoluteMaximum (const PressureAbsoluteMaximum_type& x);

      void
      PressureAbsoluteMaximum (const PressureAbsoluteMaximum_optional& x);

      void
      PressureAbsoluteMaximum (::std::auto_ptr< PressureAbsoluteMaximum_type > p);

      // SpeedAbsoluteMaximum
      //
      typedef ::xsd::qif2::SpeedValueType SpeedAbsoluteMaximum_type;
      typedef ::xsd::cxx::tree::optional< SpeedAbsoluteMaximum_type > SpeedAbsoluteMaximum_optional;
      typedef ::xsd::cxx::tree::traits< SpeedAbsoluteMaximum_type, char > SpeedAbsoluteMaximum_traits;

      const SpeedAbsoluteMaximum_optional&
      SpeedAbsoluteMaximum () const;

      SpeedAbsoluteMaximum_optional&
      SpeedAbsoluteMaximum ();

      void
      SpeedAbsoluteMaximum (const SpeedAbsoluteMaximum_type& x);

      void
      SpeedAbsoluteMaximum (const SpeedAbsoluteMaximum_optional& x);

      void
      SpeedAbsoluteMaximum (::std::auto_ptr< SpeedAbsoluteMaximum_type > p);

      // TemperatureAbsoluteMaximum
      //
      typedef ::xsd::qif2::TemperatureValueType TemperatureAbsoluteMaximum_type;
      typedef ::xsd::cxx::tree::optional< TemperatureAbsoluteMaximum_type > TemperatureAbsoluteMaximum_optional;
      typedef ::xsd::cxx::tree::traits< TemperatureAbsoluteMaximum_type, char > TemperatureAbsoluteMaximum_traits;

      const TemperatureAbsoluteMaximum_optional&
      TemperatureAbsoluteMaximum () const;

      TemperatureAbsoluteMaximum_optional&
      TemperatureAbsoluteMaximum ();

      void
      TemperatureAbsoluteMaximum (const TemperatureAbsoluteMaximum_type& x);

      void
      TemperatureAbsoluteMaximum (const TemperatureAbsoluteMaximum_optional& x);

      void
      TemperatureAbsoluteMaximum (::std::auto_ptr< TemperatureAbsoluteMaximum_type > p);

      // TimeAbsoluteMaximum
      //
      typedef ::xsd::qif2::TimeValueType TimeAbsoluteMaximum_type;
      typedef ::xsd::cxx::tree::optional< TimeAbsoluteMaximum_type > TimeAbsoluteMaximum_optional;
      typedef ::xsd::cxx::tree::traits< TimeAbsoluteMaximum_type, char > TimeAbsoluteMaximum_traits;

      const TimeAbsoluteMaximum_optional&
      TimeAbsoluteMaximum () const;

      TimeAbsoluteMaximum_optional&
      TimeAbsoluteMaximum ();

      void
      TimeAbsoluteMaximum (const TimeAbsoluteMaximum_type& x);

      void
      TimeAbsoluteMaximum (const TimeAbsoluteMaximum_optional& x);

      void
      TimeAbsoluteMaximum (::std::auto_ptr< TimeAbsoluteMaximum_type > p);

      // UserDefinedUnitAbsoluteMaximum
      //
      typedef ::xsd::qif2::UserDefinedUnitValueType UserDefinedUnitAbsoluteMaximum_type;
      typedef ::xsd::cxx::tree::sequence< UserDefinedUnitAbsoluteMaximum_type > UserDefinedUnitAbsoluteMaximum_sequence;
      typedef UserDefinedUnitAbsoluteMaximum_sequence::iterator UserDefinedUnitAbsoluteMaximum_iterator;
      typedef UserDefinedUnitAbsoluteMaximum_sequence::const_iterator UserDefinedUnitAbsoluteMaximum_const_iterator;
      typedef ::xsd::cxx::tree::traits< UserDefinedUnitAbsoluteMaximum_type, char > UserDefinedUnitAbsoluteMaximum_traits;

      const UserDefinedUnitAbsoluteMaximum_sequence&
      UserDefinedUnitAbsoluteMaximum () const;

      UserDefinedUnitAbsoluteMaximum_sequence&
      UserDefinedUnitAbsoluteMaximum ();

      void
      UserDefinedUnitAbsoluteMaximum (const UserDefinedUnitAbsoluteMaximum_sequence& s);

      // RelativeMaximum
      //
      typedef ::xml_schema::decimal RelativeMaximum_type;
      typedef ::xsd::cxx::tree::optional< RelativeMaximum_type > RelativeMaximum_optional;
      typedef ::xsd::cxx::tree::traits< RelativeMaximum_type, char, ::xsd::cxx::tree::schema_type::decimal > RelativeMaximum_traits;

      const RelativeMaximum_optional&
      RelativeMaximum () const;

      RelativeMaximum_optional&
      RelativeMaximum ();

      void
      RelativeMaximum (const RelativeMaximum_type& x);

      void
      RelativeMaximum (const RelativeMaximum_optional& x);

      // Constructors.
      //
      FirstArticleStudyPlanType (const id_type&,
                                 const InSpecRatio_type&);

      FirstArticleStudyPlanType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      FirstArticleStudyPlanType (const FirstArticleStudyPlanType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual FirstArticleStudyPlanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FirstArticleStudyPlanType&
      operator= (const FirstArticleStudyPlanType& x);

      virtual 
      ~FirstArticleStudyPlanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< InSpecRatio_type > InSpecRatio_;
      LinearAbsoluteMaximum_optional LinearAbsoluteMaximum_;
      AngularAbsoluteMaximum_optional AngularAbsoluteMaximum_;
      AreaAbsoluteMaximum_optional AreaAbsoluteMaximum_;
      ForceAbsoluteMaximum_optional ForceAbsoluteMaximum_;
      MassAbsoluteMaximum_optional MassAbsoluteMaximum_;
      PressureAbsoluteMaximum_optional PressureAbsoluteMaximum_;
      SpeedAbsoluteMaximum_optional SpeedAbsoluteMaximum_;
      TemperatureAbsoluteMaximum_optional TemperatureAbsoluteMaximum_;
      TimeAbsoluteMaximum_optional TimeAbsoluteMaximum_;
      UserDefinedUnitAbsoluteMaximum_sequence UserDefinedUnitAbsoluteMaximum_;
      RelativeMaximum_optional RelativeMaximum_;
    };

    class ProcessDifferenceStudyPlanType: public ::xsd::qif2::StatisticalStudyPlanBaseType
    {
      public:
      // NumberOfSamples
      //
      typedef ::xml_schema::positive_integer NumberOfSamples_type;
      typedef ::xsd::cxx::tree::traits< NumberOfSamples_type, char > NumberOfSamples_traits;

      const NumberOfSamples_type&
      NumberOfSamples () const;

      NumberOfSamples_type&
      NumberOfSamples ();

      void
      NumberOfSamples (const NumberOfSamples_type& x);

      // SubgroupSize
      //
      typedef ::xml_schema::positive_integer SubgroupSize_type;
      typedef ::xsd::cxx::tree::traits< SubgroupSize_type, char > SubgroupSize_traits;

      const SubgroupSize_type&
      SubgroupSize () const;

      SubgroupSize_type&
      SubgroupSize ();

      void
      SubgroupSize (const SubgroupSize_type& x);

      static SubgroupSize_type
      SubgroupSize_default_value ();

      // ManufacturingProcessId
      //
      typedef ::xsd::qif2::QIFReferenceFullType ManufacturingProcessId_type;
      typedef ::xsd::cxx::tree::optional< ManufacturingProcessId_type > ManufacturingProcessId_optional;
      typedef ::xsd::cxx::tree::traits< ManufacturingProcessId_type, char > ManufacturingProcessId_traits;

      const ManufacturingProcessId_optional&
      ManufacturingProcessId () const;

      ManufacturingProcessId_optional&
      ManufacturingProcessId ();

      void
      ManufacturingProcessId (const ManufacturingProcessId_type& x);

      void
      ManufacturingProcessId (const ManufacturingProcessId_optional& x);

      void
      ManufacturingProcessId (::std::auto_ptr< ManufacturingProcessId_type > p);

      // LinearAbsoluteDifference
      //
      typedef ::xsd::qif2::LinearValueType LinearAbsoluteDifference_type;
      typedef ::xsd::cxx::tree::optional< LinearAbsoluteDifference_type > LinearAbsoluteDifference_optional;
      typedef ::xsd::cxx::tree::traits< LinearAbsoluteDifference_type, char > LinearAbsoluteDifference_traits;

      const LinearAbsoluteDifference_optional&
      LinearAbsoluteDifference () const;

      LinearAbsoluteDifference_optional&
      LinearAbsoluteDifference ();

      void
      LinearAbsoluteDifference (const LinearAbsoluteDifference_type& x);

      void
      LinearAbsoluteDifference (const LinearAbsoluteDifference_optional& x);

      void
      LinearAbsoluteDifference (::std::auto_ptr< LinearAbsoluteDifference_type > p);

      // AngularAbsoluteDifference
      //
      typedef ::xsd::qif2::AngularValueType AngularAbsoluteDifference_type;
      typedef ::xsd::cxx::tree::optional< AngularAbsoluteDifference_type > AngularAbsoluteDifference_optional;
      typedef ::xsd::cxx::tree::traits< AngularAbsoluteDifference_type, char > AngularAbsoluteDifference_traits;

      const AngularAbsoluteDifference_optional&
      AngularAbsoluteDifference () const;

      AngularAbsoluteDifference_optional&
      AngularAbsoluteDifference ();

      void
      AngularAbsoluteDifference (const AngularAbsoluteDifference_type& x);

      void
      AngularAbsoluteDifference (const AngularAbsoluteDifference_optional& x);

      void
      AngularAbsoluteDifference (::std::auto_ptr< AngularAbsoluteDifference_type > p);

      // AreaAbsoluteDifference
      //
      typedef ::xsd::qif2::AreaValueType AreaAbsoluteDifference_type;
      typedef ::xsd::cxx::tree::optional< AreaAbsoluteDifference_type > AreaAbsoluteDifference_optional;
      typedef ::xsd::cxx::tree::traits< AreaAbsoluteDifference_type, char > AreaAbsoluteDifference_traits;

      const AreaAbsoluteDifference_optional&
      AreaAbsoluteDifference () const;

      AreaAbsoluteDifference_optional&
      AreaAbsoluteDifference ();

      void
      AreaAbsoluteDifference (const AreaAbsoluteDifference_type& x);

      void
      AreaAbsoluteDifference (const AreaAbsoluteDifference_optional& x);

      void
      AreaAbsoluteDifference (::std::auto_ptr< AreaAbsoluteDifference_type > p);

      // ForceAbsoluteDifference
      //
      typedef ::xsd::qif2::ForceValueType ForceAbsoluteDifference_type;
      typedef ::xsd::cxx::tree::optional< ForceAbsoluteDifference_type > ForceAbsoluteDifference_optional;
      typedef ::xsd::cxx::tree::traits< ForceAbsoluteDifference_type, char > ForceAbsoluteDifference_traits;

      const ForceAbsoluteDifference_optional&
      ForceAbsoluteDifference () const;

      ForceAbsoluteDifference_optional&
      ForceAbsoluteDifference ();

      void
      ForceAbsoluteDifference (const ForceAbsoluteDifference_type& x);

      void
      ForceAbsoluteDifference (const ForceAbsoluteDifference_optional& x);

      void
      ForceAbsoluteDifference (::std::auto_ptr< ForceAbsoluteDifference_type > p);

      // MassAbsoluteDifference
      //
      typedef ::xsd::qif2::MassValueType MassAbsoluteDifference_type;
      typedef ::xsd::cxx::tree::optional< MassAbsoluteDifference_type > MassAbsoluteDifference_optional;
      typedef ::xsd::cxx::tree::traits< MassAbsoluteDifference_type, char > MassAbsoluteDifference_traits;

      const MassAbsoluteDifference_optional&
      MassAbsoluteDifference () const;

      MassAbsoluteDifference_optional&
      MassAbsoluteDifference ();

      void
      MassAbsoluteDifference (const MassAbsoluteDifference_type& x);

      void
      MassAbsoluteDifference (const MassAbsoluteDifference_optional& x);

      void
      MassAbsoluteDifference (::std::auto_ptr< MassAbsoluteDifference_type > p);

      // PressureAbsoluteDifference
      //
      typedef ::xsd::qif2::PressureValueType PressureAbsoluteDifference_type;
      typedef ::xsd::cxx::tree::optional< PressureAbsoluteDifference_type > PressureAbsoluteDifference_optional;
      typedef ::xsd::cxx::tree::traits< PressureAbsoluteDifference_type, char > PressureAbsoluteDifference_traits;

      const PressureAbsoluteDifference_optional&
      PressureAbsoluteDifference () const;

      PressureAbsoluteDifference_optional&
      PressureAbsoluteDifference ();

      void
      PressureAbsoluteDifference (const PressureAbsoluteDifference_type& x);

      void
      PressureAbsoluteDifference (const PressureAbsoluteDifference_optional& x);

      void
      PressureAbsoluteDifference (::std::auto_ptr< PressureAbsoluteDifference_type > p);

      // SpeedAbsoluteDifference
      //
      typedef ::xsd::qif2::SpeedValueType SpeedAbsoluteDifference_type;
      typedef ::xsd::cxx::tree::optional< SpeedAbsoluteDifference_type > SpeedAbsoluteDifference_optional;
      typedef ::xsd::cxx::tree::traits< SpeedAbsoluteDifference_type, char > SpeedAbsoluteDifference_traits;

      const SpeedAbsoluteDifference_optional&
      SpeedAbsoluteDifference () const;

      SpeedAbsoluteDifference_optional&
      SpeedAbsoluteDifference ();

      void
      SpeedAbsoluteDifference (const SpeedAbsoluteDifference_type& x);

      void
      SpeedAbsoluteDifference (const SpeedAbsoluteDifference_optional& x);

      void
      SpeedAbsoluteDifference (::std::auto_ptr< SpeedAbsoluteDifference_type > p);

      // TemperatureAbsoluteDifference
      //
      typedef ::xsd::qif2::TemperatureValueType TemperatureAbsoluteDifference_type;
      typedef ::xsd::cxx::tree::optional< TemperatureAbsoluteDifference_type > TemperatureAbsoluteDifference_optional;
      typedef ::xsd::cxx::tree::traits< TemperatureAbsoluteDifference_type, char > TemperatureAbsoluteDifference_traits;

      const TemperatureAbsoluteDifference_optional&
      TemperatureAbsoluteDifference () const;

      TemperatureAbsoluteDifference_optional&
      TemperatureAbsoluteDifference ();

      void
      TemperatureAbsoluteDifference (const TemperatureAbsoluteDifference_type& x);

      void
      TemperatureAbsoluteDifference (const TemperatureAbsoluteDifference_optional& x);

      void
      TemperatureAbsoluteDifference (::std::auto_ptr< TemperatureAbsoluteDifference_type > p);

      // TimeAbsoluteDifference
      //
      typedef ::xsd::qif2::TimeValueType TimeAbsoluteDifference_type;
      typedef ::xsd::cxx::tree::optional< TimeAbsoluteDifference_type > TimeAbsoluteDifference_optional;
      typedef ::xsd::cxx::tree::traits< TimeAbsoluteDifference_type, char > TimeAbsoluteDifference_traits;

      const TimeAbsoluteDifference_optional&
      TimeAbsoluteDifference () const;

      TimeAbsoluteDifference_optional&
      TimeAbsoluteDifference ();

      void
      TimeAbsoluteDifference (const TimeAbsoluteDifference_type& x);

      void
      TimeAbsoluteDifference (const TimeAbsoluteDifference_optional& x);

      void
      TimeAbsoluteDifference (::std::auto_ptr< TimeAbsoluteDifference_type > p);

      // UserDefinedUnitAbsoluteDifference
      //
      typedef ::xsd::qif2::UserDefinedUnitValueType UserDefinedUnitAbsoluteDifference_type;
      typedef ::xsd::cxx::tree::sequence< UserDefinedUnitAbsoluteDifference_type > UserDefinedUnitAbsoluteDifference_sequence;
      typedef UserDefinedUnitAbsoluteDifference_sequence::iterator UserDefinedUnitAbsoluteDifference_iterator;
      typedef UserDefinedUnitAbsoluteDifference_sequence::const_iterator UserDefinedUnitAbsoluteDifference_const_iterator;
      typedef ::xsd::cxx::tree::traits< UserDefinedUnitAbsoluteDifference_type, char > UserDefinedUnitAbsoluteDifference_traits;

      const UserDefinedUnitAbsoluteDifference_sequence&
      UserDefinedUnitAbsoluteDifference () const;

      UserDefinedUnitAbsoluteDifference_sequence&
      UserDefinedUnitAbsoluteDifference ();

      void
      UserDefinedUnitAbsoluteDifference (const UserDefinedUnitAbsoluteDifference_sequence& s);

      // RelativeDifference
      //
      typedef ::xml_schema::decimal RelativeDifference_type;
      typedef ::xsd::cxx::tree::optional< RelativeDifference_type > RelativeDifference_optional;
      typedef ::xsd::cxx::tree::traits< RelativeDifference_type, char, ::xsd::cxx::tree::schema_type::decimal > RelativeDifference_traits;

      const RelativeDifference_optional&
      RelativeDifference () const;

      RelativeDifference_optional&
      RelativeDifference ();

      void
      RelativeDifference (const RelativeDifference_type& x);

      void
      RelativeDifference (const RelativeDifference_optional& x);

      // Constructors.
      //
      ProcessDifferenceStudyPlanType (const id_type&,
                                      const NumberOfSamples_type&,
                                      const SubgroupSize_type&);

      ProcessDifferenceStudyPlanType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      ProcessDifferenceStudyPlanType (const ProcessDifferenceStudyPlanType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual ProcessDifferenceStudyPlanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ProcessDifferenceStudyPlanType&
      operator= (const ProcessDifferenceStudyPlanType& x);

      virtual 
      ~ProcessDifferenceStudyPlanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< NumberOfSamples_type > NumberOfSamples_;
      ::xsd::cxx::tree::one< SubgroupSize_type > SubgroupSize_;
      ManufacturingProcessId_optional ManufacturingProcessId_;
      LinearAbsoluteDifference_optional LinearAbsoluteDifference_;
      AngularAbsoluteDifference_optional AngularAbsoluteDifference_;
      AreaAbsoluteDifference_optional AreaAbsoluteDifference_;
      ForceAbsoluteDifference_optional ForceAbsoluteDifference_;
      MassAbsoluteDifference_optional MassAbsoluteDifference_;
      PressureAbsoluteDifference_optional PressureAbsoluteDifference_;
      SpeedAbsoluteDifference_optional SpeedAbsoluteDifference_;
      TemperatureAbsoluteDifference_optional TemperatureAbsoluteDifference_;
      TimeAbsoluteDifference_optional TimeAbsoluteDifference_;
      UserDefinedUnitAbsoluteDifference_sequence UserDefinedUnitAbsoluteDifference_;
      RelativeDifference_optional RelativeDifference_;
    };

    class SimpleStudyPlanType: public ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType
    {
      public:
      // Constructors.
      //
      SimpleStudyPlanType (const id_type&,
                           const NumberOfSamples_type&);

      SimpleStudyPlanType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      SimpleStudyPlanType (const SimpleStudyPlanType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual SimpleStudyPlanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SimpleStudyPlanType ();
    };

    class CapabilityStudyPlanType: public ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType
    {
      public:
      // CpkThreshold
      //
      typedef ::xsd::qif2::CriterionDecimalType CpkThreshold_type;
      typedef ::xsd::cxx::tree::optional< CpkThreshold_type > CpkThreshold_optional;
      typedef ::xsd::cxx::tree::traits< CpkThreshold_type, char > CpkThreshold_traits;

      const CpkThreshold_optional&
      CpkThreshold () const;

      CpkThreshold_optional&
      CpkThreshold ();

      void
      CpkThreshold (const CpkThreshold_type& x);

      void
      CpkThreshold (const CpkThreshold_optional& x);

      void
      CpkThreshold (::std::auto_ptr< CpkThreshold_type > p);

      // PpkThreshold
      //
      typedef ::xsd::qif2::CriterionDecimalType PpkThreshold_type;
      typedef ::xsd::cxx::tree::optional< PpkThreshold_type > PpkThreshold_optional;
      typedef ::xsd::cxx::tree::traits< PpkThreshold_type, char > PpkThreshold_traits;

      const PpkThreshold_optional&
      PpkThreshold () const;

      PpkThreshold_optional&
      PpkThreshold ();

      void
      PpkThreshold (const PpkThreshold_type& x);

      void
      PpkThreshold (const PpkThreshold_optional& x);

      void
      PpkThreshold (::std::auto_ptr< PpkThreshold_type > p);

      // Constructors.
      //
      CapabilityStudyPlanType (const id_type&,
                               const NumberOfSamples_type&);

      CapabilityStudyPlanType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      CapabilityStudyPlanType (const CapabilityStudyPlanType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual CapabilityStudyPlanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CapabilityStudyPlanType&
      operator= (const CapabilityStudyPlanType& x);

      virtual 
      ~CapabilityStudyPlanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CpkThreshold_optional CpkThreshold_;
      PpkThreshold_optional PpkThreshold_;
    };

    class GageRandRStudyEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        RANGE,
        AVGANDRANGE,
        ANOVA
      };

      GageRandRStudyEnumType (value v);

      GageRandRStudyEnumType (const char* v);

      GageRandRStudyEnumType (const ::std::string& v);

      GageRandRStudyEnumType (const ::xml_schema::nmtoken& v);

      GageRandRStudyEnumType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      GageRandRStudyEnumType (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      GageRandRStudyEnumType (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      GageRandRStudyEnumType (const GageRandRStudyEnumType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual GageRandRStudyEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      GageRandRStudyEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_GageRandRStudyEnumType_convert ();
      }

      protected:
      value
      _xsd_GageRandRStudyEnumType_convert () const;

      public:
      static const char* const _xsd_GageRandRStudyEnumType_literals_[3];
      static const value _xsd_GageRandRStudyEnumType_indexes_[3];
    };

    class GageRandRStudyPlanType: public ::xsd::qif2::StatisticalStudyPlanBaseType
    {
      public:
      // MeasurementDeviceIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType MeasurementDeviceIds_type;
      typedef ::xsd::cxx::tree::optional< MeasurementDeviceIds_type > MeasurementDeviceIds_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementDeviceIds_type, char > MeasurementDeviceIds_traits;

      const MeasurementDeviceIds_optional&
      MeasurementDeviceIds () const;

      MeasurementDeviceIds_optional&
      MeasurementDeviceIds ();

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_type& x);

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_optional& x);

      void
      MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > p);

      // RandRStudyType
      //
      typedef ::xsd::qif2::GageRandRStudyEnumType RandRStudyType_type;
      typedef ::xsd::cxx::tree::traits< RandRStudyType_type, char > RandRStudyType_traits;

      const RandRStudyType_type&
      RandRStudyType () const;

      RandRStudyType_type&
      RandRStudyType ();

      void
      RandRStudyType (const RandRStudyType_type& x);

      void
      RandRStudyType (::std::auto_ptr< RandRStudyType_type > p);

      // NumberOfAppraisers
      //
      typedef ::xml_schema::positive_integer NumberOfAppraisers_type;
      typedef ::xsd::cxx::tree::traits< NumberOfAppraisers_type, char > NumberOfAppraisers_traits;

      const NumberOfAppraisers_type&
      NumberOfAppraisers () const;

      NumberOfAppraisers_type&
      NumberOfAppraisers ();

      void
      NumberOfAppraisers (const NumberOfAppraisers_type& x);

      // NumberOfParts
      //
      typedef ::xml_schema::positive_integer NumberOfParts_type;
      typedef ::xsd::cxx::tree::traits< NumberOfParts_type, char > NumberOfParts_traits;

      const NumberOfParts_type&
      NumberOfParts () const;

      NumberOfParts_type&
      NumberOfParts ();

      void
      NumberOfParts (const NumberOfParts_type& x);

      // NumberOfTrials
      //
      typedef ::xml_schema::positive_integer NumberOfTrials_type;
      typedef ::xsd::cxx::tree::traits< NumberOfTrials_type, char > NumberOfTrials_traits;

      const NumberOfTrials_type&
      NumberOfTrials () const;

      NumberOfTrials_type&
      NumberOfTrials ();

      void
      NumberOfTrials (const NumberOfTrials_type& x);

      // MaximumRelativeAppraiserVariation
      //
      typedef ::xsd::qif2::CriterionDecimalType MaximumRelativeAppraiserVariation_type;
      typedef ::xsd::cxx::tree::optional< MaximumRelativeAppraiserVariation_type > MaximumRelativeAppraiserVariation_optional;
      typedef ::xsd::cxx::tree::traits< MaximumRelativeAppraiserVariation_type, char > MaximumRelativeAppraiserVariation_traits;

      const MaximumRelativeAppraiserVariation_optional&
      MaximumRelativeAppraiserVariation () const;

      MaximumRelativeAppraiserVariation_optional&
      MaximumRelativeAppraiserVariation ();

      void
      MaximumRelativeAppraiserVariation (const MaximumRelativeAppraiserVariation_type& x);

      void
      MaximumRelativeAppraiserVariation (const MaximumRelativeAppraiserVariation_optional& x);

      void
      MaximumRelativeAppraiserVariation (::std::auto_ptr< MaximumRelativeAppraiserVariation_type > p);

      // MaximumAbsoluteLinearAppraiserVariation
      //
      typedef ::xsd::qif2::CriterionLinearType MaximumAbsoluteLinearAppraiserVariation_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteLinearAppraiserVariation_type > MaximumAbsoluteLinearAppraiserVariation_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteLinearAppraiserVariation_type, char > MaximumAbsoluteLinearAppraiserVariation_traits;

      const MaximumAbsoluteLinearAppraiserVariation_optional&
      MaximumAbsoluteLinearAppraiserVariation () const;

      MaximumAbsoluteLinearAppraiserVariation_optional&
      MaximumAbsoluteLinearAppraiserVariation ();

      void
      MaximumAbsoluteLinearAppraiserVariation (const MaximumAbsoluteLinearAppraiserVariation_type& x);

      void
      MaximumAbsoluteLinearAppraiserVariation (const MaximumAbsoluteLinearAppraiserVariation_optional& x);

      void
      MaximumAbsoluteLinearAppraiserVariation (::std::auto_ptr< MaximumAbsoluteLinearAppraiserVariation_type > p);

      // MaximumAbsoluteAngularAppraiserVariation
      //
      typedef ::xsd::qif2::CriterionAngularType MaximumAbsoluteAngularAppraiserVariation_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteAngularAppraiserVariation_type > MaximumAbsoluteAngularAppraiserVariation_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteAngularAppraiserVariation_type, char > MaximumAbsoluteAngularAppraiserVariation_traits;

      const MaximumAbsoluteAngularAppraiserVariation_optional&
      MaximumAbsoluteAngularAppraiserVariation () const;

      MaximumAbsoluteAngularAppraiserVariation_optional&
      MaximumAbsoluteAngularAppraiserVariation ();

      void
      MaximumAbsoluteAngularAppraiserVariation (const MaximumAbsoluteAngularAppraiserVariation_type& x);

      void
      MaximumAbsoluteAngularAppraiserVariation (const MaximumAbsoluteAngularAppraiserVariation_optional& x);

      void
      MaximumAbsoluteAngularAppraiserVariation (::std::auto_ptr< MaximumAbsoluteAngularAppraiserVariation_type > p);

      // MaximumAbsoluteAreaAppraiserVariation
      //
      typedef ::xsd::qif2::CriterionAreaType MaximumAbsoluteAreaAppraiserVariation_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteAreaAppraiserVariation_type > MaximumAbsoluteAreaAppraiserVariation_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteAreaAppraiserVariation_type, char > MaximumAbsoluteAreaAppraiserVariation_traits;

      const MaximumAbsoluteAreaAppraiserVariation_optional&
      MaximumAbsoluteAreaAppraiserVariation () const;

      MaximumAbsoluteAreaAppraiserVariation_optional&
      MaximumAbsoluteAreaAppraiserVariation ();

      void
      MaximumAbsoluteAreaAppraiserVariation (const MaximumAbsoluteAreaAppraiserVariation_type& x);

      void
      MaximumAbsoluteAreaAppraiserVariation (const MaximumAbsoluteAreaAppraiserVariation_optional& x);

      void
      MaximumAbsoluteAreaAppraiserVariation (::std::auto_ptr< MaximumAbsoluteAreaAppraiserVariation_type > p);

      // MaximumAbsoluteForceAppraiserVariation
      //
      typedef ::xsd::qif2::CriterionForceType MaximumAbsoluteForceAppraiserVariation_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteForceAppraiserVariation_type > MaximumAbsoluteForceAppraiserVariation_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteForceAppraiserVariation_type, char > MaximumAbsoluteForceAppraiserVariation_traits;

      const MaximumAbsoluteForceAppraiserVariation_optional&
      MaximumAbsoluteForceAppraiserVariation () const;

      MaximumAbsoluteForceAppraiserVariation_optional&
      MaximumAbsoluteForceAppraiserVariation ();

      void
      MaximumAbsoluteForceAppraiserVariation (const MaximumAbsoluteForceAppraiserVariation_type& x);

      void
      MaximumAbsoluteForceAppraiserVariation (const MaximumAbsoluteForceAppraiserVariation_optional& x);

      void
      MaximumAbsoluteForceAppraiserVariation (::std::auto_ptr< MaximumAbsoluteForceAppraiserVariation_type > p);

      // MaximumAbsoluteMassAppraiserVariation
      //
      typedef ::xsd::qif2::CriterionMassType MaximumAbsoluteMassAppraiserVariation_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteMassAppraiserVariation_type > MaximumAbsoluteMassAppraiserVariation_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteMassAppraiserVariation_type, char > MaximumAbsoluteMassAppraiserVariation_traits;

      const MaximumAbsoluteMassAppraiserVariation_optional&
      MaximumAbsoluteMassAppraiserVariation () const;

      MaximumAbsoluteMassAppraiserVariation_optional&
      MaximumAbsoluteMassAppraiserVariation ();

      void
      MaximumAbsoluteMassAppraiserVariation (const MaximumAbsoluteMassAppraiserVariation_type& x);

      void
      MaximumAbsoluteMassAppraiserVariation (const MaximumAbsoluteMassAppraiserVariation_optional& x);

      void
      MaximumAbsoluteMassAppraiserVariation (::std::auto_ptr< MaximumAbsoluteMassAppraiserVariation_type > p);

      // MaximumAbsolutePressureAppraiserVariation
      //
      typedef ::xsd::qif2::CriterionPressureType MaximumAbsolutePressureAppraiserVariation_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsolutePressureAppraiserVariation_type > MaximumAbsolutePressureAppraiserVariation_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsolutePressureAppraiserVariation_type, char > MaximumAbsolutePressureAppraiserVariation_traits;

      const MaximumAbsolutePressureAppraiserVariation_optional&
      MaximumAbsolutePressureAppraiserVariation () const;

      MaximumAbsolutePressureAppraiserVariation_optional&
      MaximumAbsolutePressureAppraiserVariation ();

      void
      MaximumAbsolutePressureAppraiserVariation (const MaximumAbsolutePressureAppraiserVariation_type& x);

      void
      MaximumAbsolutePressureAppraiserVariation (const MaximumAbsolutePressureAppraiserVariation_optional& x);

      void
      MaximumAbsolutePressureAppraiserVariation (::std::auto_ptr< MaximumAbsolutePressureAppraiserVariation_type > p);

      // MaximumAbsoluteSpeedAppraiserVariation
      //
      typedef ::xsd::qif2::CriterionSpeedType MaximumAbsoluteSpeedAppraiserVariation_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteSpeedAppraiserVariation_type > MaximumAbsoluteSpeedAppraiserVariation_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteSpeedAppraiserVariation_type, char > MaximumAbsoluteSpeedAppraiserVariation_traits;

      const MaximumAbsoluteSpeedAppraiserVariation_optional&
      MaximumAbsoluteSpeedAppraiserVariation () const;

      MaximumAbsoluteSpeedAppraiserVariation_optional&
      MaximumAbsoluteSpeedAppraiserVariation ();

      void
      MaximumAbsoluteSpeedAppraiserVariation (const MaximumAbsoluteSpeedAppraiserVariation_type& x);

      void
      MaximumAbsoluteSpeedAppraiserVariation (const MaximumAbsoluteSpeedAppraiserVariation_optional& x);

      void
      MaximumAbsoluteSpeedAppraiserVariation (::std::auto_ptr< MaximumAbsoluteSpeedAppraiserVariation_type > p);

      // MaximumAbsoluteTemperatureAppraiserVariation
      //
      typedef ::xsd::qif2::CriterionTemperatureType MaximumAbsoluteTemperatureAppraiserVariation_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteTemperatureAppraiserVariation_type > MaximumAbsoluteTemperatureAppraiserVariation_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteTemperatureAppraiserVariation_type, char > MaximumAbsoluteTemperatureAppraiserVariation_traits;

      const MaximumAbsoluteTemperatureAppraiserVariation_optional&
      MaximumAbsoluteTemperatureAppraiserVariation () const;

      MaximumAbsoluteTemperatureAppraiserVariation_optional&
      MaximumAbsoluteTemperatureAppraiserVariation ();

      void
      MaximumAbsoluteTemperatureAppraiserVariation (const MaximumAbsoluteTemperatureAppraiserVariation_type& x);

      void
      MaximumAbsoluteTemperatureAppraiserVariation (const MaximumAbsoluteTemperatureAppraiserVariation_optional& x);

      void
      MaximumAbsoluteTemperatureAppraiserVariation (::std::auto_ptr< MaximumAbsoluteTemperatureAppraiserVariation_type > p);

      // MaximumAbsoluteTimeAppraiserVariation
      //
      typedef ::xsd::qif2::CriterionTimeType MaximumAbsoluteTimeAppraiserVariation_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteTimeAppraiserVariation_type > MaximumAbsoluteTimeAppraiserVariation_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteTimeAppraiserVariation_type, char > MaximumAbsoluteTimeAppraiserVariation_traits;

      const MaximumAbsoluteTimeAppraiserVariation_optional&
      MaximumAbsoluteTimeAppraiserVariation () const;

      MaximumAbsoluteTimeAppraiserVariation_optional&
      MaximumAbsoluteTimeAppraiserVariation ();

      void
      MaximumAbsoluteTimeAppraiserVariation (const MaximumAbsoluteTimeAppraiserVariation_type& x);

      void
      MaximumAbsoluteTimeAppraiserVariation (const MaximumAbsoluteTimeAppraiserVariation_optional& x);

      void
      MaximumAbsoluteTimeAppraiserVariation (::std::auto_ptr< MaximumAbsoluteTimeAppraiserVariation_type > p);

      // MaximumAbsoluteUserDefinedUnitAppraiserVariation
      //
      typedef ::xsd::qif2::CriterionUserDefinedUnitType MaximumAbsoluteUserDefinedUnitAppraiserVariation_type;
      typedef ::xsd::cxx::tree::sequence< MaximumAbsoluteUserDefinedUnitAppraiserVariation_type > MaximumAbsoluteUserDefinedUnitAppraiserVariation_sequence;
      typedef MaximumAbsoluteUserDefinedUnitAppraiserVariation_sequence::iterator MaximumAbsoluteUserDefinedUnitAppraiserVariation_iterator;
      typedef MaximumAbsoluteUserDefinedUnitAppraiserVariation_sequence::const_iterator MaximumAbsoluteUserDefinedUnitAppraiserVariation_const_iterator;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteUserDefinedUnitAppraiserVariation_type, char > MaximumAbsoluteUserDefinedUnitAppraiserVariation_traits;

      const MaximumAbsoluteUserDefinedUnitAppraiserVariation_sequence&
      MaximumAbsoluteUserDefinedUnitAppraiserVariation () const;

      MaximumAbsoluteUserDefinedUnitAppraiserVariation_sequence&
      MaximumAbsoluteUserDefinedUnitAppraiserVariation ();

      void
      MaximumAbsoluteUserDefinedUnitAppraiserVariation (const MaximumAbsoluteUserDefinedUnitAppraiserVariation_sequence& s);

      // MaximumRelativeEquipmentVariation
      //
      typedef ::xsd::qif2::CriterionDecimalType MaximumRelativeEquipmentVariation_type;
      typedef ::xsd::cxx::tree::optional< MaximumRelativeEquipmentVariation_type > MaximumRelativeEquipmentVariation_optional;
      typedef ::xsd::cxx::tree::traits< MaximumRelativeEquipmentVariation_type, char > MaximumRelativeEquipmentVariation_traits;

      const MaximumRelativeEquipmentVariation_optional&
      MaximumRelativeEquipmentVariation () const;

      MaximumRelativeEquipmentVariation_optional&
      MaximumRelativeEquipmentVariation ();

      void
      MaximumRelativeEquipmentVariation (const MaximumRelativeEquipmentVariation_type& x);

      void
      MaximumRelativeEquipmentVariation (const MaximumRelativeEquipmentVariation_optional& x);

      void
      MaximumRelativeEquipmentVariation (::std::auto_ptr< MaximumRelativeEquipmentVariation_type > p);

      // MaximumAbsoluteLinearEquipmentVariation
      //
      typedef ::xsd::qif2::CriterionLinearType MaximumAbsoluteLinearEquipmentVariation_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteLinearEquipmentVariation_type > MaximumAbsoluteLinearEquipmentVariation_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteLinearEquipmentVariation_type, char > MaximumAbsoluteLinearEquipmentVariation_traits;

      const MaximumAbsoluteLinearEquipmentVariation_optional&
      MaximumAbsoluteLinearEquipmentVariation () const;

      MaximumAbsoluteLinearEquipmentVariation_optional&
      MaximumAbsoluteLinearEquipmentVariation ();

      void
      MaximumAbsoluteLinearEquipmentVariation (const MaximumAbsoluteLinearEquipmentVariation_type& x);

      void
      MaximumAbsoluteLinearEquipmentVariation (const MaximumAbsoluteLinearEquipmentVariation_optional& x);

      void
      MaximumAbsoluteLinearEquipmentVariation (::std::auto_ptr< MaximumAbsoluteLinearEquipmentVariation_type > p);

      // MaximumAbsoluteAngularEquipmentVariation
      //
      typedef ::xsd::qif2::CriterionAngularType MaximumAbsoluteAngularEquipmentVariation_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteAngularEquipmentVariation_type > MaximumAbsoluteAngularEquipmentVariation_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteAngularEquipmentVariation_type, char > MaximumAbsoluteAngularEquipmentVariation_traits;

      const MaximumAbsoluteAngularEquipmentVariation_optional&
      MaximumAbsoluteAngularEquipmentVariation () const;

      MaximumAbsoluteAngularEquipmentVariation_optional&
      MaximumAbsoluteAngularEquipmentVariation ();

      void
      MaximumAbsoluteAngularEquipmentVariation (const MaximumAbsoluteAngularEquipmentVariation_type& x);

      void
      MaximumAbsoluteAngularEquipmentVariation (const MaximumAbsoluteAngularEquipmentVariation_optional& x);

      void
      MaximumAbsoluteAngularEquipmentVariation (::std::auto_ptr< MaximumAbsoluteAngularEquipmentVariation_type > p);

      // MaximumAbsoluteAreaEquipmentVariation
      //
      typedef ::xsd::qif2::CriterionAreaType MaximumAbsoluteAreaEquipmentVariation_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteAreaEquipmentVariation_type > MaximumAbsoluteAreaEquipmentVariation_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteAreaEquipmentVariation_type, char > MaximumAbsoluteAreaEquipmentVariation_traits;

      const MaximumAbsoluteAreaEquipmentVariation_optional&
      MaximumAbsoluteAreaEquipmentVariation () const;

      MaximumAbsoluteAreaEquipmentVariation_optional&
      MaximumAbsoluteAreaEquipmentVariation ();

      void
      MaximumAbsoluteAreaEquipmentVariation (const MaximumAbsoluteAreaEquipmentVariation_type& x);

      void
      MaximumAbsoluteAreaEquipmentVariation (const MaximumAbsoluteAreaEquipmentVariation_optional& x);

      void
      MaximumAbsoluteAreaEquipmentVariation (::std::auto_ptr< MaximumAbsoluteAreaEquipmentVariation_type > p);

      // MaximumAbsoluteForceEquipmentVariation
      //
      typedef ::xsd::qif2::CriterionForceType MaximumAbsoluteForceEquipmentVariation_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteForceEquipmentVariation_type > MaximumAbsoluteForceEquipmentVariation_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteForceEquipmentVariation_type, char > MaximumAbsoluteForceEquipmentVariation_traits;

      const MaximumAbsoluteForceEquipmentVariation_optional&
      MaximumAbsoluteForceEquipmentVariation () const;

      MaximumAbsoluteForceEquipmentVariation_optional&
      MaximumAbsoluteForceEquipmentVariation ();

      void
      MaximumAbsoluteForceEquipmentVariation (const MaximumAbsoluteForceEquipmentVariation_type& x);

      void
      MaximumAbsoluteForceEquipmentVariation (const MaximumAbsoluteForceEquipmentVariation_optional& x);

      void
      MaximumAbsoluteForceEquipmentVariation (::std::auto_ptr< MaximumAbsoluteForceEquipmentVariation_type > p);

      // MaximumAbsoluteMassEquipmentVariation
      //
      typedef ::xsd::qif2::CriterionMassType MaximumAbsoluteMassEquipmentVariation_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteMassEquipmentVariation_type > MaximumAbsoluteMassEquipmentVariation_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteMassEquipmentVariation_type, char > MaximumAbsoluteMassEquipmentVariation_traits;

      const MaximumAbsoluteMassEquipmentVariation_optional&
      MaximumAbsoluteMassEquipmentVariation () const;

      MaximumAbsoluteMassEquipmentVariation_optional&
      MaximumAbsoluteMassEquipmentVariation ();

      void
      MaximumAbsoluteMassEquipmentVariation (const MaximumAbsoluteMassEquipmentVariation_type& x);

      void
      MaximumAbsoluteMassEquipmentVariation (const MaximumAbsoluteMassEquipmentVariation_optional& x);

      void
      MaximumAbsoluteMassEquipmentVariation (::std::auto_ptr< MaximumAbsoluteMassEquipmentVariation_type > p);

      // MaximumAbsolutePressureEquipmentVariation
      //
      typedef ::xsd::qif2::CriterionPressureType MaximumAbsolutePressureEquipmentVariation_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsolutePressureEquipmentVariation_type > MaximumAbsolutePressureEquipmentVariation_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsolutePressureEquipmentVariation_type, char > MaximumAbsolutePressureEquipmentVariation_traits;

      const MaximumAbsolutePressureEquipmentVariation_optional&
      MaximumAbsolutePressureEquipmentVariation () const;

      MaximumAbsolutePressureEquipmentVariation_optional&
      MaximumAbsolutePressureEquipmentVariation ();

      void
      MaximumAbsolutePressureEquipmentVariation (const MaximumAbsolutePressureEquipmentVariation_type& x);

      void
      MaximumAbsolutePressureEquipmentVariation (const MaximumAbsolutePressureEquipmentVariation_optional& x);

      void
      MaximumAbsolutePressureEquipmentVariation (::std::auto_ptr< MaximumAbsolutePressureEquipmentVariation_type > p);

      // MaximumAbsoluteSpeedEquipmentVariation
      //
      typedef ::xsd::qif2::CriterionSpeedType MaximumAbsoluteSpeedEquipmentVariation_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteSpeedEquipmentVariation_type > MaximumAbsoluteSpeedEquipmentVariation_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteSpeedEquipmentVariation_type, char > MaximumAbsoluteSpeedEquipmentVariation_traits;

      const MaximumAbsoluteSpeedEquipmentVariation_optional&
      MaximumAbsoluteSpeedEquipmentVariation () const;

      MaximumAbsoluteSpeedEquipmentVariation_optional&
      MaximumAbsoluteSpeedEquipmentVariation ();

      void
      MaximumAbsoluteSpeedEquipmentVariation (const MaximumAbsoluteSpeedEquipmentVariation_type& x);

      void
      MaximumAbsoluteSpeedEquipmentVariation (const MaximumAbsoluteSpeedEquipmentVariation_optional& x);

      void
      MaximumAbsoluteSpeedEquipmentVariation (::std::auto_ptr< MaximumAbsoluteSpeedEquipmentVariation_type > p);

      // MaximumAbsoluteTemperatureEquipmentVariation
      //
      typedef ::xsd::qif2::CriterionTemperatureType MaximumAbsoluteTemperatureEquipmentVariation_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteTemperatureEquipmentVariation_type > MaximumAbsoluteTemperatureEquipmentVariation_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteTemperatureEquipmentVariation_type, char > MaximumAbsoluteTemperatureEquipmentVariation_traits;

      const MaximumAbsoluteTemperatureEquipmentVariation_optional&
      MaximumAbsoluteTemperatureEquipmentVariation () const;

      MaximumAbsoluteTemperatureEquipmentVariation_optional&
      MaximumAbsoluteTemperatureEquipmentVariation ();

      void
      MaximumAbsoluteTemperatureEquipmentVariation (const MaximumAbsoluteTemperatureEquipmentVariation_type& x);

      void
      MaximumAbsoluteTemperatureEquipmentVariation (const MaximumAbsoluteTemperatureEquipmentVariation_optional& x);

      void
      MaximumAbsoluteTemperatureEquipmentVariation (::std::auto_ptr< MaximumAbsoluteTemperatureEquipmentVariation_type > p);

      // MaximumAbsoluteTimeEquipmentVariation
      //
      typedef ::xsd::qif2::CriterionTimeType MaximumAbsoluteTimeEquipmentVariation_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteTimeEquipmentVariation_type > MaximumAbsoluteTimeEquipmentVariation_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteTimeEquipmentVariation_type, char > MaximumAbsoluteTimeEquipmentVariation_traits;

      const MaximumAbsoluteTimeEquipmentVariation_optional&
      MaximumAbsoluteTimeEquipmentVariation () const;

      MaximumAbsoluteTimeEquipmentVariation_optional&
      MaximumAbsoluteTimeEquipmentVariation ();

      void
      MaximumAbsoluteTimeEquipmentVariation (const MaximumAbsoluteTimeEquipmentVariation_type& x);

      void
      MaximumAbsoluteTimeEquipmentVariation (const MaximumAbsoluteTimeEquipmentVariation_optional& x);

      void
      MaximumAbsoluteTimeEquipmentVariation (::std::auto_ptr< MaximumAbsoluteTimeEquipmentVariation_type > p);

      // MaximumAbsoluteUserDefinedUnitEquipmentVariation
      //
      typedef ::xsd::qif2::CriterionUserDefinedUnitType MaximumAbsoluteUserDefinedUnitEquipmentVariation_type;
      typedef ::xsd::cxx::tree::sequence< MaximumAbsoluteUserDefinedUnitEquipmentVariation_type > MaximumAbsoluteUserDefinedUnitEquipmentVariation_sequence;
      typedef MaximumAbsoluteUserDefinedUnitEquipmentVariation_sequence::iterator MaximumAbsoluteUserDefinedUnitEquipmentVariation_iterator;
      typedef MaximumAbsoluteUserDefinedUnitEquipmentVariation_sequence::const_iterator MaximumAbsoluteUserDefinedUnitEquipmentVariation_const_iterator;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteUserDefinedUnitEquipmentVariation_type, char > MaximumAbsoluteUserDefinedUnitEquipmentVariation_traits;

      const MaximumAbsoluteUserDefinedUnitEquipmentVariation_sequence&
      MaximumAbsoluteUserDefinedUnitEquipmentVariation () const;

      MaximumAbsoluteUserDefinedUnitEquipmentVariation_sequence&
      MaximumAbsoluteUserDefinedUnitEquipmentVariation ();

      void
      MaximumAbsoluteUserDefinedUnitEquipmentVariation (const MaximumAbsoluteUserDefinedUnitEquipmentVariation_sequence& s);

      // MaximumRelativeTotalRandR
      //
      typedef ::xsd::qif2::CriterionDecimalType MaximumRelativeTotalRandR_type;
      typedef ::xsd::cxx::tree::optional< MaximumRelativeTotalRandR_type > MaximumRelativeTotalRandR_optional;
      typedef ::xsd::cxx::tree::traits< MaximumRelativeTotalRandR_type, char > MaximumRelativeTotalRandR_traits;

      const MaximumRelativeTotalRandR_optional&
      MaximumRelativeTotalRandR () const;

      MaximumRelativeTotalRandR_optional&
      MaximumRelativeTotalRandR ();

      void
      MaximumRelativeTotalRandR (const MaximumRelativeTotalRandR_type& x);

      void
      MaximumRelativeTotalRandR (const MaximumRelativeTotalRandR_optional& x);

      void
      MaximumRelativeTotalRandR (::std::auto_ptr< MaximumRelativeTotalRandR_type > p);

      // MaximumAbsoluteLinearTotalRandR
      //
      typedef ::xsd::qif2::CriterionLinearType MaximumAbsoluteLinearTotalRandR_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteLinearTotalRandR_type > MaximumAbsoluteLinearTotalRandR_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteLinearTotalRandR_type, char > MaximumAbsoluteLinearTotalRandR_traits;

      const MaximumAbsoluteLinearTotalRandR_optional&
      MaximumAbsoluteLinearTotalRandR () const;

      MaximumAbsoluteLinearTotalRandR_optional&
      MaximumAbsoluteLinearTotalRandR ();

      void
      MaximumAbsoluteLinearTotalRandR (const MaximumAbsoluteLinearTotalRandR_type& x);

      void
      MaximumAbsoluteLinearTotalRandR (const MaximumAbsoluteLinearTotalRandR_optional& x);

      void
      MaximumAbsoluteLinearTotalRandR (::std::auto_ptr< MaximumAbsoluteLinearTotalRandR_type > p);

      // MaximumAbsoluteAngularTotalRandR
      //
      typedef ::xsd::qif2::CriterionAngularType MaximumAbsoluteAngularTotalRandR_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteAngularTotalRandR_type > MaximumAbsoluteAngularTotalRandR_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteAngularTotalRandR_type, char > MaximumAbsoluteAngularTotalRandR_traits;

      const MaximumAbsoluteAngularTotalRandR_optional&
      MaximumAbsoluteAngularTotalRandR () const;

      MaximumAbsoluteAngularTotalRandR_optional&
      MaximumAbsoluteAngularTotalRandR ();

      void
      MaximumAbsoluteAngularTotalRandR (const MaximumAbsoluteAngularTotalRandR_type& x);

      void
      MaximumAbsoluteAngularTotalRandR (const MaximumAbsoluteAngularTotalRandR_optional& x);

      void
      MaximumAbsoluteAngularTotalRandR (::std::auto_ptr< MaximumAbsoluteAngularTotalRandR_type > p);

      // MaximumAbsoluteAreaTotalRandR
      //
      typedef ::xsd::qif2::CriterionAreaType MaximumAbsoluteAreaTotalRandR_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteAreaTotalRandR_type > MaximumAbsoluteAreaTotalRandR_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteAreaTotalRandR_type, char > MaximumAbsoluteAreaTotalRandR_traits;

      const MaximumAbsoluteAreaTotalRandR_optional&
      MaximumAbsoluteAreaTotalRandR () const;

      MaximumAbsoluteAreaTotalRandR_optional&
      MaximumAbsoluteAreaTotalRandR ();

      void
      MaximumAbsoluteAreaTotalRandR (const MaximumAbsoluteAreaTotalRandR_type& x);

      void
      MaximumAbsoluteAreaTotalRandR (const MaximumAbsoluteAreaTotalRandR_optional& x);

      void
      MaximumAbsoluteAreaTotalRandR (::std::auto_ptr< MaximumAbsoluteAreaTotalRandR_type > p);

      // MaximumAbsoluteForceTotalRandR
      //
      typedef ::xsd::qif2::CriterionForceType MaximumAbsoluteForceTotalRandR_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteForceTotalRandR_type > MaximumAbsoluteForceTotalRandR_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteForceTotalRandR_type, char > MaximumAbsoluteForceTotalRandR_traits;

      const MaximumAbsoluteForceTotalRandR_optional&
      MaximumAbsoluteForceTotalRandR () const;

      MaximumAbsoluteForceTotalRandR_optional&
      MaximumAbsoluteForceTotalRandR ();

      void
      MaximumAbsoluteForceTotalRandR (const MaximumAbsoluteForceTotalRandR_type& x);

      void
      MaximumAbsoluteForceTotalRandR (const MaximumAbsoluteForceTotalRandR_optional& x);

      void
      MaximumAbsoluteForceTotalRandR (::std::auto_ptr< MaximumAbsoluteForceTotalRandR_type > p);

      // MaximumAbsoluteMassTotalRandR
      //
      typedef ::xsd::qif2::CriterionMassType MaximumAbsoluteMassTotalRandR_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteMassTotalRandR_type > MaximumAbsoluteMassTotalRandR_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteMassTotalRandR_type, char > MaximumAbsoluteMassTotalRandR_traits;

      const MaximumAbsoluteMassTotalRandR_optional&
      MaximumAbsoluteMassTotalRandR () const;

      MaximumAbsoluteMassTotalRandR_optional&
      MaximumAbsoluteMassTotalRandR ();

      void
      MaximumAbsoluteMassTotalRandR (const MaximumAbsoluteMassTotalRandR_type& x);

      void
      MaximumAbsoluteMassTotalRandR (const MaximumAbsoluteMassTotalRandR_optional& x);

      void
      MaximumAbsoluteMassTotalRandR (::std::auto_ptr< MaximumAbsoluteMassTotalRandR_type > p);

      // MaximumAbsolutePressureTotalRandR
      //
      typedef ::xsd::qif2::CriterionPressureType MaximumAbsolutePressureTotalRandR_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsolutePressureTotalRandR_type > MaximumAbsolutePressureTotalRandR_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsolutePressureTotalRandR_type, char > MaximumAbsolutePressureTotalRandR_traits;

      const MaximumAbsolutePressureTotalRandR_optional&
      MaximumAbsolutePressureTotalRandR () const;

      MaximumAbsolutePressureTotalRandR_optional&
      MaximumAbsolutePressureTotalRandR ();

      void
      MaximumAbsolutePressureTotalRandR (const MaximumAbsolutePressureTotalRandR_type& x);

      void
      MaximumAbsolutePressureTotalRandR (const MaximumAbsolutePressureTotalRandR_optional& x);

      void
      MaximumAbsolutePressureTotalRandR (::std::auto_ptr< MaximumAbsolutePressureTotalRandR_type > p);

      // MaximumAbsoluteSpeedTotalRandR
      //
      typedef ::xsd::qif2::CriterionSpeedType MaximumAbsoluteSpeedTotalRandR_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteSpeedTotalRandR_type > MaximumAbsoluteSpeedTotalRandR_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteSpeedTotalRandR_type, char > MaximumAbsoluteSpeedTotalRandR_traits;

      const MaximumAbsoluteSpeedTotalRandR_optional&
      MaximumAbsoluteSpeedTotalRandR () const;

      MaximumAbsoluteSpeedTotalRandR_optional&
      MaximumAbsoluteSpeedTotalRandR ();

      void
      MaximumAbsoluteSpeedTotalRandR (const MaximumAbsoluteSpeedTotalRandR_type& x);

      void
      MaximumAbsoluteSpeedTotalRandR (const MaximumAbsoluteSpeedTotalRandR_optional& x);

      void
      MaximumAbsoluteSpeedTotalRandR (::std::auto_ptr< MaximumAbsoluteSpeedTotalRandR_type > p);

      // MaximumAbsoluteTemperatureTotalRandR
      //
      typedef ::xsd::qif2::CriterionTemperatureType MaximumAbsoluteTemperatureTotalRandR_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteTemperatureTotalRandR_type > MaximumAbsoluteTemperatureTotalRandR_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteTemperatureTotalRandR_type, char > MaximumAbsoluteTemperatureTotalRandR_traits;

      const MaximumAbsoluteTemperatureTotalRandR_optional&
      MaximumAbsoluteTemperatureTotalRandR () const;

      MaximumAbsoluteTemperatureTotalRandR_optional&
      MaximumAbsoluteTemperatureTotalRandR ();

      void
      MaximumAbsoluteTemperatureTotalRandR (const MaximumAbsoluteTemperatureTotalRandR_type& x);

      void
      MaximumAbsoluteTemperatureTotalRandR (const MaximumAbsoluteTemperatureTotalRandR_optional& x);

      void
      MaximumAbsoluteTemperatureTotalRandR (::std::auto_ptr< MaximumAbsoluteTemperatureTotalRandR_type > p);

      // MaximumAbsoluteTimeTotalRandR
      //
      typedef ::xsd::qif2::CriterionTimeType MaximumAbsoluteTimeTotalRandR_type;
      typedef ::xsd::cxx::tree::optional< MaximumAbsoluteTimeTotalRandR_type > MaximumAbsoluteTimeTotalRandR_optional;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteTimeTotalRandR_type, char > MaximumAbsoluteTimeTotalRandR_traits;

      const MaximumAbsoluteTimeTotalRandR_optional&
      MaximumAbsoluteTimeTotalRandR () const;

      MaximumAbsoluteTimeTotalRandR_optional&
      MaximumAbsoluteTimeTotalRandR ();

      void
      MaximumAbsoluteTimeTotalRandR (const MaximumAbsoluteTimeTotalRandR_type& x);

      void
      MaximumAbsoluteTimeTotalRandR (const MaximumAbsoluteTimeTotalRandR_optional& x);

      void
      MaximumAbsoluteTimeTotalRandR (::std::auto_ptr< MaximumAbsoluteTimeTotalRandR_type > p);

      // MaximumAbsoluteUserDefinedUnitTotalRandR
      //
      typedef ::xsd::qif2::CriterionUserDefinedUnitType MaximumAbsoluteUserDefinedUnitTotalRandR_type;
      typedef ::xsd::cxx::tree::sequence< MaximumAbsoluteUserDefinedUnitTotalRandR_type > MaximumAbsoluteUserDefinedUnitTotalRandR_sequence;
      typedef MaximumAbsoluteUserDefinedUnitTotalRandR_sequence::iterator MaximumAbsoluteUserDefinedUnitTotalRandR_iterator;
      typedef MaximumAbsoluteUserDefinedUnitTotalRandR_sequence::const_iterator MaximumAbsoluteUserDefinedUnitTotalRandR_const_iterator;
      typedef ::xsd::cxx::tree::traits< MaximumAbsoluteUserDefinedUnitTotalRandR_type, char > MaximumAbsoluteUserDefinedUnitTotalRandR_traits;

      const MaximumAbsoluteUserDefinedUnitTotalRandR_sequence&
      MaximumAbsoluteUserDefinedUnitTotalRandR () const;

      MaximumAbsoluteUserDefinedUnitTotalRandR_sequence&
      MaximumAbsoluteUserDefinedUnitTotalRandR ();

      void
      MaximumAbsoluteUserDefinedUnitTotalRandR (const MaximumAbsoluteUserDefinedUnitTotalRandR_sequence& s);

      // Constructors.
      //
      GageRandRStudyPlanType (const id_type&,
                              const RandRStudyType_type&,
                              const NumberOfAppraisers_type&,
                              const NumberOfParts_type&,
                              const NumberOfTrials_type&);

      GageRandRStudyPlanType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      GageRandRStudyPlanType (const GageRandRStudyPlanType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual GageRandRStudyPlanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      GageRandRStudyPlanType&
      operator= (const GageRandRStudyPlanType& x);

      virtual 
      ~GageRandRStudyPlanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      MeasurementDeviceIds_optional MeasurementDeviceIds_;
      ::xsd::cxx::tree::one< RandRStudyType_type > RandRStudyType_;
      ::xsd::cxx::tree::one< NumberOfAppraisers_type > NumberOfAppraisers_;
      ::xsd::cxx::tree::one< NumberOfParts_type > NumberOfParts_;
      ::xsd::cxx::tree::one< NumberOfTrials_type > NumberOfTrials_;
      MaximumRelativeAppraiserVariation_optional MaximumRelativeAppraiserVariation_;
      MaximumAbsoluteLinearAppraiserVariation_optional MaximumAbsoluteLinearAppraiserVariation_;
      MaximumAbsoluteAngularAppraiserVariation_optional MaximumAbsoluteAngularAppraiserVariation_;
      MaximumAbsoluteAreaAppraiserVariation_optional MaximumAbsoluteAreaAppraiserVariation_;
      MaximumAbsoluteForceAppraiserVariation_optional MaximumAbsoluteForceAppraiserVariation_;
      MaximumAbsoluteMassAppraiserVariation_optional MaximumAbsoluteMassAppraiserVariation_;
      MaximumAbsolutePressureAppraiserVariation_optional MaximumAbsolutePressureAppraiserVariation_;
      MaximumAbsoluteSpeedAppraiserVariation_optional MaximumAbsoluteSpeedAppraiserVariation_;
      MaximumAbsoluteTemperatureAppraiserVariation_optional MaximumAbsoluteTemperatureAppraiserVariation_;
      MaximumAbsoluteTimeAppraiserVariation_optional MaximumAbsoluteTimeAppraiserVariation_;
      MaximumAbsoluteUserDefinedUnitAppraiserVariation_sequence MaximumAbsoluteUserDefinedUnitAppraiserVariation_;
      MaximumRelativeEquipmentVariation_optional MaximumRelativeEquipmentVariation_;
      MaximumAbsoluteLinearEquipmentVariation_optional MaximumAbsoluteLinearEquipmentVariation_;
      MaximumAbsoluteAngularEquipmentVariation_optional MaximumAbsoluteAngularEquipmentVariation_;
      MaximumAbsoluteAreaEquipmentVariation_optional MaximumAbsoluteAreaEquipmentVariation_;
      MaximumAbsoluteForceEquipmentVariation_optional MaximumAbsoluteForceEquipmentVariation_;
      MaximumAbsoluteMassEquipmentVariation_optional MaximumAbsoluteMassEquipmentVariation_;
      MaximumAbsolutePressureEquipmentVariation_optional MaximumAbsolutePressureEquipmentVariation_;
      MaximumAbsoluteSpeedEquipmentVariation_optional MaximumAbsoluteSpeedEquipmentVariation_;
      MaximumAbsoluteTemperatureEquipmentVariation_optional MaximumAbsoluteTemperatureEquipmentVariation_;
      MaximumAbsoluteTimeEquipmentVariation_optional MaximumAbsoluteTimeEquipmentVariation_;
      MaximumAbsoluteUserDefinedUnitEquipmentVariation_sequence MaximumAbsoluteUserDefinedUnitEquipmentVariation_;
      MaximumRelativeTotalRandR_optional MaximumRelativeTotalRandR_;
      MaximumAbsoluteLinearTotalRandR_optional MaximumAbsoluteLinearTotalRandR_;
      MaximumAbsoluteAngularTotalRandR_optional MaximumAbsoluteAngularTotalRandR_;
      MaximumAbsoluteAreaTotalRandR_optional MaximumAbsoluteAreaTotalRandR_;
      MaximumAbsoluteForceTotalRandR_optional MaximumAbsoluteForceTotalRandR_;
      MaximumAbsoluteMassTotalRandR_optional MaximumAbsoluteMassTotalRandR_;
      MaximumAbsolutePressureTotalRandR_optional MaximumAbsolutePressureTotalRandR_;
      MaximumAbsoluteSpeedTotalRandR_optional MaximumAbsoluteSpeedTotalRandR_;
      MaximumAbsoluteTemperatureTotalRandR_optional MaximumAbsoluteTemperatureTotalRandR_;
      MaximumAbsoluteTimeTotalRandR_optional MaximumAbsoluteTimeTotalRandR_;
      MaximumAbsoluteUserDefinedUnitTotalRandR_sequence MaximumAbsoluteUserDefinedUnitTotalRandR_;
    };

    class ControlMethodType: public ::xml_schema::type
    {
      public:
      // AssignableCauseId
      //
      typedef ::xsd::qif2::QIFReferenceFullType AssignableCauseId_type;
      typedef ::xsd::cxx::tree::sequence< AssignableCauseId_type > AssignableCauseId_sequence;
      typedef AssignableCauseId_sequence::iterator AssignableCauseId_iterator;
      typedef AssignableCauseId_sequence::const_iterator AssignableCauseId_const_iterator;
      typedef ::xsd::cxx::tree::traits< AssignableCauseId_type, char > AssignableCauseId_traits;

      const AssignableCauseId_sequence&
      AssignableCauseId () const;

      AssignableCauseId_sequence&
      AssignableCauseId ();

      void
      AssignableCauseId (const AssignableCauseId_sequence& s);

      // NumOutOfTolerance
      //
      typedef ::xsd::qif2::CriterionIntegerType NumOutOfTolerance_type;
      typedef ::xsd::cxx::tree::optional< NumOutOfTolerance_type > NumOutOfTolerance_optional;
      typedef ::xsd::cxx::tree::traits< NumOutOfTolerance_type, char > NumOutOfTolerance_traits;

      const NumOutOfTolerance_optional&
      NumOutOfTolerance () const;

      NumOutOfTolerance_optional&
      NumOutOfTolerance ();

      void
      NumOutOfTolerance (const NumOutOfTolerance_type& x);

      void
      NumOutOfTolerance (const NumOutOfTolerance_optional& x);

      void
      NumOutOfTolerance (::std::auto_ptr< NumOutOfTolerance_type > p);

      // CpThreshold
      //
      typedef ::xsd::qif2::CriterionDecimalType CpThreshold_type;
      typedef ::xsd::cxx::tree::optional< CpThreshold_type > CpThreshold_optional;
      typedef ::xsd::cxx::tree::traits< CpThreshold_type, char > CpThreshold_traits;

      const CpThreshold_optional&
      CpThreshold () const;

      CpThreshold_optional&
      CpThreshold ();

      void
      CpThreshold (const CpThreshold_type& x);

      void
      CpThreshold (const CpThreshold_optional& x);

      void
      CpThreshold (::std::auto_ptr< CpThreshold_type > p);

      // CpkThreshold
      //
      typedef ::xsd::qif2::CriterionDecimalType CpkThreshold_type;
      typedef ::xsd::cxx::tree::optional< CpkThreshold_type > CpkThreshold_optional;
      typedef ::xsd::cxx::tree::traits< CpkThreshold_type, char > CpkThreshold_traits;

      const CpkThreshold_optional&
      CpkThreshold () const;

      CpkThreshold_optional&
      CpkThreshold ();

      void
      CpkThreshold (const CpkThreshold_type& x);

      void
      CpkThreshold (const CpkThreshold_optional& x);

      void
      CpkThreshold (::std::auto_ptr< CpkThreshold_type > p);

      // PpThreshold
      //
      typedef ::xsd::qif2::CriterionDecimalType PpThreshold_type;
      typedef ::xsd::cxx::tree::optional< PpThreshold_type > PpThreshold_optional;
      typedef ::xsd::cxx::tree::traits< PpThreshold_type, char > PpThreshold_traits;

      const PpThreshold_optional&
      PpThreshold () const;

      PpThreshold_optional&
      PpThreshold ();

      void
      PpThreshold (const PpThreshold_type& x);

      void
      PpThreshold (const PpThreshold_optional& x);

      void
      PpThreshold (::std::auto_ptr< PpThreshold_type > p);

      // PpkThreshold
      //
      typedef ::xsd::qif2::CriterionDecimalType PpkThreshold_type;
      typedef ::xsd::cxx::tree::optional< PpkThreshold_type > PpkThreshold_optional;
      typedef ::xsd::cxx::tree::traits< PpkThreshold_type, char > PpkThreshold_traits;

      const PpkThreshold_optional&
      PpkThreshold () const;

      PpkThreshold_optional&
      PpkThreshold ();

      void
      PpkThreshold (const PpkThreshold_type& x);

      void
      PpkThreshold (const PpkThreshold_optional& x);

      void
      PpkThreshold (::std::auto_ptr< PpkThreshold_type > p);

      // NumOutOfControl
      //
      typedef ::xsd::qif2::CriterionIntegerType NumOutOfControl_type;
      typedef ::xsd::cxx::tree::optional< NumOutOfControl_type > NumOutOfControl_optional;
      typedef ::xsd::cxx::tree::traits< NumOutOfControl_type, char > NumOutOfControl_traits;

      const NumOutOfControl_optional&
      NumOutOfControl () const;

      NumOutOfControl_optional&
      NumOutOfControl ();

      void
      NumOutOfControl (const NumOutOfControl_type& x);

      void
      NumOutOfControl (const NumOutOfControl_optional& x);

      void
      NumOutOfControl (::std::auto_ptr< NumOutOfControl_type > p);

      // TrendGrouping
      //
      typedef ::xsd::qif2::CriterionIntegerType TrendGrouping_type;
      typedef ::xsd::cxx::tree::optional< TrendGrouping_type > TrendGrouping_optional;
      typedef ::xsd::cxx::tree::traits< TrendGrouping_type, char > TrendGrouping_traits;

      const TrendGrouping_optional&
      TrendGrouping () const;

      TrendGrouping_optional&
      TrendGrouping ();

      void
      TrendGrouping (const TrendGrouping_type& x);

      void
      TrendGrouping (const TrendGrouping_optional& x);

      void
      TrendGrouping (::std::auto_ptr< TrendGrouping_type > p);

      // SkewGrouping
      //
      typedef ::xsd::qif2::CriterionIntegerType SkewGrouping_type;
      typedef ::xsd::cxx::tree::optional< SkewGrouping_type > SkewGrouping_optional;
      typedef ::xsd::cxx::tree::traits< SkewGrouping_type, char > SkewGrouping_traits;

      const SkewGrouping_optional&
      SkewGrouping () const;

      SkewGrouping_optional&
      SkewGrouping ();

      void
      SkewGrouping (const SkewGrouping_type& x);

      void
      SkewGrouping (const SkewGrouping_optional& x);

      void
      SkewGrouping (::std::auto_ptr< SkewGrouping_type > p);

      // OneThirdGrouping
      //
      typedef ::xsd::qif2::CriterionOutOfType OneThirdGrouping_type;
      typedef ::xsd::cxx::tree::optional< OneThirdGrouping_type > OneThirdGrouping_optional;
      typedef ::xsd::cxx::tree::traits< OneThirdGrouping_type, char > OneThirdGrouping_traits;

      const OneThirdGrouping_optional&
      OneThirdGrouping () const;

      OneThirdGrouping_optional&
      OneThirdGrouping ();

      void
      OneThirdGrouping (const OneThirdGrouping_type& x);

      void
      OneThirdGrouping (const OneThirdGrouping_optional& x);

      void
      OneThirdGrouping (::std::auto_ptr< OneThirdGrouping_type > p);

      // TwoThirdsGrouping
      //
      typedef ::xsd::qif2::CriterionOutOfType TwoThirdsGrouping_type;
      typedef ::xsd::cxx::tree::optional< TwoThirdsGrouping_type > TwoThirdsGrouping_optional;
      typedef ::xsd::cxx::tree::traits< TwoThirdsGrouping_type, char > TwoThirdsGrouping_traits;

      const TwoThirdsGrouping_optional&
      TwoThirdsGrouping () const;

      TwoThirdsGrouping_optional&
      TwoThirdsGrouping ();

      void
      TwoThirdsGrouping (const TwoThirdsGrouping_type& x);

      void
      TwoThirdsGrouping (const TwoThirdsGrouping_optional& x);

      void
      TwoThirdsGrouping (::std::auto_ptr< TwoThirdsGrouping_type > p);

      // Oscillation
      //
      typedef ::xsd::qif2::CriterionOutOfType Oscillation_type;
      typedef ::xsd::cxx::tree::optional< Oscillation_type > Oscillation_optional;
      typedef ::xsd::cxx::tree::traits< Oscillation_type, char > Oscillation_traits;

      const Oscillation_optional&
      Oscillation () const;

      Oscillation_optional&
      Oscillation ();

      void
      Oscillation (const Oscillation_type& x);

      void
      Oscillation (const Oscillation_optional& x);

      void
      Oscillation (::std::auto_ptr< Oscillation_type > p);

      // Stratification
      //
      typedef ::xsd::qif2::CriterionOutOfType Stratification_type;
      typedef ::xsd::cxx::tree::optional< Stratification_type > Stratification_optional;
      typedef ::xsd::cxx::tree::traits< Stratification_type, char > Stratification_traits;

      const Stratification_optional&
      Stratification () const;

      Stratification_optional&
      Stratification ();

      void
      Stratification (const Stratification_type& x);

      void
      Stratification (const Stratification_optional& x);

      void
      Stratification (::std::auto_ptr< Stratification_type > p);

      // NumOutOfControlRng
      //
      typedef ::xsd::qif2::CriterionIntegerType NumOutOfControlRng_type;
      typedef ::xsd::cxx::tree::optional< NumOutOfControlRng_type > NumOutOfControlRng_optional;
      typedef ::xsd::cxx::tree::traits< NumOutOfControlRng_type, char > NumOutOfControlRng_traits;

      const NumOutOfControlRng_optional&
      NumOutOfControlRng () const;

      NumOutOfControlRng_optional&
      NumOutOfControlRng ();

      void
      NumOutOfControlRng (const NumOutOfControlRng_type& x);

      void
      NumOutOfControlRng (const NumOutOfControlRng_optional& x);

      void
      NumOutOfControlRng (::std::auto_ptr< NumOutOfControlRng_type > p);

      // id
      //
      typedef ::xsd::qif2::QIFIdType id_type;
      typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

      const id_type&
      id () const;

      id_type&
      id ();

      void
      id (const id_type& x);

      void
      id (::std::auto_ptr< id_type > p);

      // Constructors.
      //
      ControlMethodType (const id_type&);

      ControlMethodType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      ControlMethodType (const ControlMethodType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual ControlMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ControlMethodType&
      operator= (const ControlMethodType& x);

      virtual 
      ~ControlMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      AssignableCauseId_sequence AssignableCauseId_;
      NumOutOfTolerance_optional NumOutOfTolerance_;
      CpThreshold_optional CpThreshold_;
      CpkThreshold_optional CpkThreshold_;
      PpThreshold_optional PpThreshold_;
      PpkThreshold_optional PpkThreshold_;
      NumOutOfControl_optional NumOutOfControl_;
      TrendGrouping_optional TrendGrouping_;
      SkewGrouping_optional SkewGrouping_;
      OneThirdGrouping_optional OneThirdGrouping_;
      TwoThirdsGrouping_optional TwoThirdsGrouping_;
      Oscillation_optional Oscillation_;
      Stratification_optional Stratification_;
      NumOutOfControlRng_optional NumOutOfControlRng_;
      ::xsd::cxx::tree::one< id_type > id_;
    };

    class ProductionStudyPlanType: public ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType
    {
      public:
      // SamplingMethod
      //
      typedef ::xsd::qif2::SamplingMethodType SamplingMethod_type;
      typedef ::xsd::cxx::tree::traits< SamplingMethod_type, char > SamplingMethod_traits;

      const SamplingMethod_type&
      SamplingMethod () const;

      SamplingMethod_type&
      SamplingMethod ();

      void
      SamplingMethod (const SamplingMethod_type& x);

      void
      SamplingMethod (::std::auto_ptr< SamplingMethod_type > p);

      // ControlMethod
      //
      typedef ::xsd::qif2::ControlMethodType ControlMethod_type;
      typedef ::xsd::cxx::tree::sequence< ControlMethod_type > ControlMethod_sequence;
      typedef ControlMethod_sequence::iterator ControlMethod_iterator;
      typedef ControlMethod_sequence::const_iterator ControlMethod_const_iterator;
      typedef ::xsd::cxx::tree::traits< ControlMethod_type, char > ControlMethod_traits;

      const ControlMethod_sequence&
      ControlMethod () const;

      ControlMethod_sequence&
      ControlMethod ();

      void
      ControlMethod (const ControlMethod_sequence& s);

      // Constructors.
      //
      ProductionStudyPlanType (const id_type&,
                               const NumberOfSamples_type&,
                               const SamplingMethod_type&);

      ProductionStudyPlanType (const id_type&,
                               const NumberOfSamples_type&,
                               ::std::auto_ptr< SamplingMethod_type >);

      ProductionStudyPlanType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      ProductionStudyPlanType (const ProductionStudyPlanType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual ProductionStudyPlanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ProductionStudyPlanType&
      operator= (const ProductionStudyPlanType& x);

      virtual 
      ~ProductionStudyPlanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SamplingMethod_type > SamplingMethod_;
      ControlMethod_sequence ControlMethod_;
    };

    class StatisticalStudyResultsBaseType: public ::xml_schema::type
    {
      public:
      // Attributes
      //
      typedef ::xsd::qif2::AttributesType Attributes_type;
      typedef ::xsd::cxx::tree::optional< Attributes_type > Attributes_optional;
      typedef ::xsd::cxx::tree::traits< Attributes_type, char > Attributes_traits;

      const Attributes_optional&
      Attributes () const;

      Attributes_optional&
      Attributes ();

      void
      Attributes (const Attributes_type& x);

      void
      Attributes (const Attributes_optional& x);

      void
      Attributes (::std::auto_ptr< Attributes_type > p);

      // ThisStatisticalStudyResultsInstanceQPId
      //
      typedef ::xsd::qif2::QPIdType ThisStatisticalStudyResultsInstanceQPId_type;
      typedef ::xsd::cxx::tree::optional< ThisStatisticalStudyResultsInstanceQPId_type > ThisStatisticalStudyResultsInstanceQPId_optional;
      typedef ::xsd::cxx::tree::traits< ThisStatisticalStudyResultsInstanceQPId_type, char > ThisStatisticalStudyResultsInstanceQPId_traits;

      const ThisStatisticalStudyResultsInstanceQPId_optional&
      ThisStatisticalStudyResultsInstanceQPId () const;

      ThisStatisticalStudyResultsInstanceQPId_optional&
      ThisStatisticalStudyResultsInstanceQPId ();

      void
      ThisStatisticalStudyResultsInstanceQPId (const ThisStatisticalStudyResultsInstanceQPId_type& x);

      void
      ThisStatisticalStudyResultsInstanceQPId (const ThisStatisticalStudyResultsInstanceQPId_optional& x);

      void
      ThisStatisticalStudyResultsInstanceQPId (::std::auto_ptr< ThisStatisticalStudyResultsInstanceQPId_type > p);

      // Status
      //
      typedef ::xsd::qif2::StatsEvalStatusType Status_type;
      typedef ::xsd::cxx::tree::traits< Status_type, char > Status_traits;

      const Status_type&
      Status () const;

      Status_type&
      Status ();

      void
      Status (const Status_type& x);

      void
      Status (::std::auto_ptr< Status_type > p);

      // StudyIssue
      //
      typedef ::xsd::qif2::StudyIssueType StudyIssue_type;
      typedef ::xsd::cxx::tree::sequence< StudyIssue_type > StudyIssue_sequence;
      typedef StudyIssue_sequence::iterator StudyIssue_iterator;
      typedef StudyIssue_sequence::const_iterator StudyIssue_const_iterator;
      typedef ::xsd::cxx::tree::traits< StudyIssue_type, char > StudyIssue_traits;

      const StudyIssue_sequence&
      StudyIssue () const;

      StudyIssue_sequence&
      StudyIssue ();

      void
      StudyIssue (const StudyIssue_sequence& s);

      // InspectionTraceability
      //
      typedef ::xsd::qif2::InspectionTraceabilityType InspectionTraceability_type;
      typedef ::xsd::cxx::tree::optional< InspectionTraceability_type > InspectionTraceability_optional;
      typedef ::xsd::cxx::tree::traits< InspectionTraceability_type, char > InspectionTraceability_traits;

      const InspectionTraceability_optional&
      InspectionTraceability () const;

      InspectionTraceability_optional&
      InspectionTraceability ();

      void
      InspectionTraceability (const InspectionTraceability_type& x);

      void
      InspectionTraceability (const InspectionTraceability_optional& x);

      void
      InspectionTraceability (::std::auto_ptr< InspectionTraceability_type > p);

      // Name
      //
      typedef ::xml_schema::token Name_type;
      typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
      typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

      const Name_optional&
      Name () const;

      Name_optional&
      Name ();

      void
      Name (const Name_type& x);

      void
      Name (const Name_optional& x);

      void
      Name (::std::auto_ptr< Name_type > p);

      // Description
      //
      typedef ::xml_schema::string Description_type;
      typedef ::xsd::cxx::tree::optional< Description_type > Description_optional;
      typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

      const Description_optional&
      Description () const;

      Description_optional&
      Description ();

      void
      Description (const Description_type& x);

      void
      Description (const Description_optional& x);

      void
      Description (::std::auto_ptr< Description_type > p);

      // StudyId
      //
      typedef ::xsd::qif2::QIFReferenceFullType StudyId_type;
      typedef ::xsd::cxx::tree::optional< StudyId_type > StudyId_optional;
      typedef ::xsd::cxx::tree::traits< StudyId_type, char > StudyId_traits;

      const StudyId_optional&
      StudyId () const;

      StudyId_optional&
      StudyId ();

      void
      StudyId (const StudyId_type& x);

      void
      StudyId (const StudyId_optional& x);

      void
      StudyId (::std::auto_ptr< StudyId_type > p);

      // ResultsId
      //
      typedef ::xsd::qif2::QIFReferenceFullType ResultsId_type;
      typedef ::xsd::cxx::tree::sequence< ResultsId_type > ResultsId_sequence;
      typedef ResultsId_sequence::iterator ResultsId_iterator;
      typedef ResultsId_sequence::const_iterator ResultsId_const_iterator;
      typedef ::xsd::cxx::tree::traits< ResultsId_type, char > ResultsId_traits;

      const ResultsId_sequence&
      ResultsId () const;

      ResultsId_sequence&
      ResultsId ();

      void
      ResultsId (const ResultsId_sequence& s);

      // ResultsQPId
      //
      typedef ::xsd::qif2::QPIdFullReferenceType ResultsQPId_type;
      typedef ::xsd::cxx::tree::sequence< ResultsQPId_type > ResultsQPId_sequence;
      typedef ResultsQPId_sequence::iterator ResultsQPId_iterator;
      typedef ResultsQPId_sequence::const_iterator ResultsQPId_const_iterator;
      typedef ::xsd::cxx::tree::traits< ResultsQPId_type, char > ResultsQPId_traits;

      const ResultsQPId_sequence&
      ResultsQPId () const;

      ResultsQPId_sequence&
      ResultsQPId ();

      void
      ResultsQPId (const ResultsQPId_sequence& s);

      // ResultsFile
      //
      typedef ::xsd::qif2::ExternalFileReferenceType ResultsFile_type;
      typedef ::xsd::cxx::tree::sequence< ResultsFile_type > ResultsFile_sequence;
      typedef ResultsFile_sequence::iterator ResultsFile_iterator;
      typedef ResultsFile_sequence::const_iterator ResultsFile_const_iterator;
      typedef ::xsd::cxx::tree::traits< ResultsFile_type, char > ResultsFile_traits;

      const ResultsFile_sequence&
      ResultsFile () const;

      ResultsFile_sequence&
      ResultsFile ();

      void
      ResultsFile (const ResultsFile_sequence& s);

      // AverageFeature
      //
      typedef ::xsd::qif2::AverageFeatureType AverageFeature_type;
      typedef ::xsd::cxx::tree::sequence< AverageFeature_type > AverageFeature_sequence;
      typedef AverageFeature_sequence::iterator AverageFeature_iterator;
      typedef AverageFeature_sequence::const_iterator AverageFeature_const_iterator;
      typedef ::xsd::cxx::tree::traits< AverageFeature_type, char > AverageFeature_traits;

      const AverageFeature_sequence&
      AverageFeature () const;

      AverageFeature_sequence&
      AverageFeature ();

      void
      AverageFeature (const AverageFeature_sequence& s);

      // CharacteristicsStats
      //
      typedef ::xsd::qif2::CharacteristicsStatsType CharacteristicsStats_type;
      typedef ::xsd::cxx::tree::sequence< CharacteristicsStats_type > CharacteristicsStats_sequence;
      typedef CharacteristicsStats_sequence::iterator CharacteristicsStats_iterator;
      typedef CharacteristicsStats_sequence::const_iterator CharacteristicsStats_const_iterator;
      typedef ::xsd::cxx::tree::traits< CharacteristicsStats_type, char > CharacteristicsStats_traits;

      const CharacteristicsStats_sequence&
      CharacteristicsStats () const;

      CharacteristicsStats_sequence&
      CharacteristicsStats ();

      void
      CharacteristicsStats (const CharacteristicsStats_sequence& s);

      // LinearStatsSummary
      //
      typedef ::xsd::qif2::SummaryStatisticsLinearType LinearStatsSummary_type;
      typedef ::xsd::cxx::tree::sequence< LinearStatsSummary_type > LinearStatsSummary_sequence;
      typedef LinearStatsSummary_sequence::iterator LinearStatsSummary_iterator;
      typedef LinearStatsSummary_sequence::const_iterator LinearStatsSummary_const_iterator;
      typedef ::xsd::cxx::tree::traits< LinearStatsSummary_type, char > LinearStatsSummary_traits;

      const LinearStatsSummary_sequence&
      LinearStatsSummary () const;

      LinearStatsSummary_sequence&
      LinearStatsSummary ();

      void
      LinearStatsSummary (const LinearStatsSummary_sequence& s);

      // AngularStatsSummary
      //
      typedef ::xsd::qif2::SummaryStatisticsAngularType AngularStatsSummary_type;
      typedef ::xsd::cxx::tree::sequence< AngularStatsSummary_type > AngularStatsSummary_sequence;
      typedef AngularStatsSummary_sequence::iterator AngularStatsSummary_iterator;
      typedef AngularStatsSummary_sequence::const_iterator AngularStatsSummary_const_iterator;
      typedef ::xsd::cxx::tree::traits< AngularStatsSummary_type, char > AngularStatsSummary_traits;

      const AngularStatsSummary_sequence&
      AngularStatsSummary () const;

      AngularStatsSummary_sequence&
      AngularStatsSummary ();

      void
      AngularStatsSummary (const AngularStatsSummary_sequence& s);

      // AreaStatsSummary
      //
      typedef ::xsd::qif2::SummaryStatisticsAreaType AreaStatsSummary_type;
      typedef ::xsd::cxx::tree::sequence< AreaStatsSummary_type > AreaStatsSummary_sequence;
      typedef AreaStatsSummary_sequence::iterator AreaStatsSummary_iterator;
      typedef AreaStatsSummary_sequence::const_iterator AreaStatsSummary_const_iterator;
      typedef ::xsd::cxx::tree::traits< AreaStatsSummary_type, char > AreaStatsSummary_traits;

      const AreaStatsSummary_sequence&
      AreaStatsSummary () const;

      AreaStatsSummary_sequence&
      AreaStatsSummary ();

      void
      AreaStatsSummary (const AreaStatsSummary_sequence& s);

      // ForceStatsSummary
      //
      typedef ::xsd::qif2::SummaryStatisticsForceType ForceStatsSummary_type;
      typedef ::xsd::cxx::tree::sequence< ForceStatsSummary_type > ForceStatsSummary_sequence;
      typedef ForceStatsSummary_sequence::iterator ForceStatsSummary_iterator;
      typedef ForceStatsSummary_sequence::const_iterator ForceStatsSummary_const_iterator;
      typedef ::xsd::cxx::tree::traits< ForceStatsSummary_type, char > ForceStatsSummary_traits;

      const ForceStatsSummary_sequence&
      ForceStatsSummary () const;

      ForceStatsSummary_sequence&
      ForceStatsSummary ();

      void
      ForceStatsSummary (const ForceStatsSummary_sequence& s);

      // MassStatsSummary
      //
      typedef ::xsd::qif2::SummaryStatisticsMassType MassStatsSummary_type;
      typedef ::xsd::cxx::tree::sequence< MassStatsSummary_type > MassStatsSummary_sequence;
      typedef MassStatsSummary_sequence::iterator MassStatsSummary_iterator;
      typedef MassStatsSummary_sequence::const_iterator MassStatsSummary_const_iterator;
      typedef ::xsd::cxx::tree::traits< MassStatsSummary_type, char > MassStatsSummary_traits;

      const MassStatsSummary_sequence&
      MassStatsSummary () const;

      MassStatsSummary_sequence&
      MassStatsSummary ();

      void
      MassStatsSummary (const MassStatsSummary_sequence& s);

      // PressureStatsSummary
      //
      typedef ::xsd::qif2::SummaryStatisticsPressureType PressureStatsSummary_type;
      typedef ::xsd::cxx::tree::sequence< PressureStatsSummary_type > PressureStatsSummary_sequence;
      typedef PressureStatsSummary_sequence::iterator PressureStatsSummary_iterator;
      typedef PressureStatsSummary_sequence::const_iterator PressureStatsSummary_const_iterator;
      typedef ::xsd::cxx::tree::traits< PressureStatsSummary_type, char > PressureStatsSummary_traits;

      const PressureStatsSummary_sequence&
      PressureStatsSummary () const;

      PressureStatsSummary_sequence&
      PressureStatsSummary ();

      void
      PressureStatsSummary (const PressureStatsSummary_sequence& s);

      // SpeedStatsSummary
      //
      typedef ::xsd::qif2::SummaryStatisticsSpeedType SpeedStatsSummary_type;
      typedef ::xsd::cxx::tree::sequence< SpeedStatsSummary_type > SpeedStatsSummary_sequence;
      typedef SpeedStatsSummary_sequence::iterator SpeedStatsSummary_iterator;
      typedef SpeedStatsSummary_sequence::const_iterator SpeedStatsSummary_const_iterator;
      typedef ::xsd::cxx::tree::traits< SpeedStatsSummary_type, char > SpeedStatsSummary_traits;

      const SpeedStatsSummary_sequence&
      SpeedStatsSummary () const;

      SpeedStatsSummary_sequence&
      SpeedStatsSummary ();

      void
      SpeedStatsSummary (const SpeedStatsSummary_sequence& s);

      // TemperatureStatsSummary
      //
      typedef ::xsd::qif2::SummaryStatisticsTemperatureType TemperatureStatsSummary_type;
      typedef ::xsd::cxx::tree::sequence< TemperatureStatsSummary_type > TemperatureStatsSummary_sequence;
      typedef TemperatureStatsSummary_sequence::iterator TemperatureStatsSummary_iterator;
      typedef TemperatureStatsSummary_sequence::const_iterator TemperatureStatsSummary_const_iterator;
      typedef ::xsd::cxx::tree::traits< TemperatureStatsSummary_type, char > TemperatureStatsSummary_traits;

      const TemperatureStatsSummary_sequence&
      TemperatureStatsSummary () const;

      TemperatureStatsSummary_sequence&
      TemperatureStatsSummary ();

      void
      TemperatureStatsSummary (const TemperatureStatsSummary_sequence& s);

      // TimeStatsSummary
      //
      typedef ::xsd::qif2::SummaryStatisticsTimeType TimeStatsSummary_type;
      typedef ::xsd::cxx::tree::sequence< TimeStatsSummary_type > TimeStatsSummary_sequence;
      typedef TimeStatsSummary_sequence::iterator TimeStatsSummary_iterator;
      typedef TimeStatsSummary_sequence::const_iterator TimeStatsSummary_const_iterator;
      typedef ::xsd::cxx::tree::traits< TimeStatsSummary_type, char > TimeStatsSummary_traits;

      const TimeStatsSummary_sequence&
      TimeStatsSummary () const;

      TimeStatsSummary_sequence&
      TimeStatsSummary ();

      void
      TimeStatsSummary (const TimeStatsSummary_sequence& s);

      // UserDefinedUnitStatsSummary
      //
      typedef ::xsd::qif2::SummaryStatisticsUserDefinedUnitType UserDefinedUnitStatsSummary_type;
      typedef ::xsd::cxx::tree::sequence< UserDefinedUnitStatsSummary_type > UserDefinedUnitStatsSummary_sequence;
      typedef UserDefinedUnitStatsSummary_sequence::iterator UserDefinedUnitStatsSummary_iterator;
      typedef UserDefinedUnitStatsSummary_sequence::const_iterator UserDefinedUnitStatsSummary_const_iterator;
      typedef ::xsd::cxx::tree::traits< UserDefinedUnitStatsSummary_type, char > UserDefinedUnitStatsSummary_traits;

      const UserDefinedUnitStatsSummary_sequence&
      UserDefinedUnitStatsSummary () const;

      UserDefinedUnitStatsSummary_sequence&
      UserDefinedUnitStatsSummary ();

      void
      UserDefinedUnitStatsSummary (const UserDefinedUnitStatsSummary_sequence& s);

      // StatsSummary
      //
      typedef ::xsd::qif2::SummaryStatisticsType StatsSummary_type;
      typedef ::xsd::cxx::tree::sequence< StatsSummary_type > StatsSummary_sequence;
      typedef StatsSummary_sequence::iterator StatsSummary_iterator;
      typedef StatsSummary_sequence::const_iterator StatsSummary_const_iterator;
      typedef ::xsd::cxx::tree::traits< StatsSummary_type, char > StatsSummary_traits;

      const StatsSummary_sequence&
      StatsSummary () const;

      StatsSummary_sequence&
      StatsSummary ();

      void
      StatsSummary (const StatsSummary_sequence& s);

      // id
      //
      typedef ::xsd::qif2::QIFIdType id_type;
      typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

      const id_type&
      id () const;

      id_type&
      id ();

      void
      id (const id_type& x);

      void
      id (::std::auto_ptr< id_type > p);

      // Constructors.
      //
      StatisticalStudyResultsBaseType (const Status_type&,
                                       const id_type&);

      StatisticalStudyResultsBaseType (::std::auto_ptr< Status_type >,
                                       const id_type&);

      StatisticalStudyResultsBaseType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      StatisticalStudyResultsBaseType (const StatisticalStudyResultsBaseType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual StatisticalStudyResultsBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatisticalStudyResultsBaseType&
      operator= (const StatisticalStudyResultsBaseType& x);

      virtual 
      ~StatisticalStudyResultsBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Attributes_optional Attributes_;
      ThisStatisticalStudyResultsInstanceQPId_optional ThisStatisticalStudyResultsInstanceQPId_;
      ::xsd::cxx::tree::one< Status_type > Status_;
      StudyIssue_sequence StudyIssue_;
      InspectionTraceability_optional InspectionTraceability_;
      Name_optional Name_;
      Description_optional Description_;
      StudyId_optional StudyId_;
      ResultsId_sequence ResultsId_;
      ResultsQPId_sequence ResultsQPId_;
      ResultsFile_sequence ResultsFile_;
      AverageFeature_sequence AverageFeature_;
      CharacteristicsStats_sequence CharacteristicsStats_;
      LinearStatsSummary_sequence LinearStatsSummary_;
      AngularStatsSummary_sequence AngularStatsSummary_;
      AreaStatsSummary_sequence AreaStatsSummary_;
      ForceStatsSummary_sequence ForceStatsSummary_;
      MassStatsSummary_sequence MassStatsSummary_;
      PressureStatsSummary_sequence PressureStatsSummary_;
      SpeedStatsSummary_sequence SpeedStatsSummary_;
      TemperatureStatsSummary_sequence TemperatureStatsSummary_;
      TimeStatsSummary_sequence TimeStatsSummary_;
      UserDefinedUnitStatsSummary_sequence UserDefinedUnitStatsSummary_;
      StatsSummary_sequence StatsSummary_;
      ::xsd::cxx::tree::one< id_type > id_;
    };

    class LinearityStudyResultsType: public ::xsd::qif2::StatisticalStudyResultsBaseType
    {
      public:
      // SampleSize
      //
      typedef ::xml_schema::positive_integer SampleSize_type;
      typedef ::xsd::cxx::tree::traits< SampleSize_type, char > SampleSize_traits;

      const SampleSize_type&
      SampleSize () const;

      SampleSize_type&
      SampleSize ();

      void
      SampleSize (const SampleSize_type& x);

      // MeasurementDeviceIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType MeasurementDeviceIds_type;
      typedef ::xsd::cxx::tree::optional< MeasurementDeviceIds_type > MeasurementDeviceIds_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementDeviceIds_type, char > MeasurementDeviceIds_traits;

      const MeasurementDeviceIds_optional&
      MeasurementDeviceIds () const;

      MeasurementDeviceIds_optional&
      MeasurementDeviceIds ();

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_type& x);

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_optional& x);

      void
      MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > p);

      // GoodnessOfFit
      //
      typedef ::xsd::qif2::ActualDecimalType GoodnessOfFit_type;
      typedef ::xsd::cxx::tree::optional< GoodnessOfFit_type > GoodnessOfFit_optional;
      typedef ::xsd::cxx::tree::traits< GoodnessOfFit_type, char > GoodnessOfFit_traits;

      const GoodnessOfFit_optional&
      GoodnessOfFit () const;

      GoodnessOfFit_optional&
      GoodnessOfFit ();

      void
      GoodnessOfFit (const GoodnessOfFit_type& x);

      void
      GoodnessOfFit (const GoodnessOfFit_optional& x);

      void
      GoodnessOfFit (::std::auto_ptr< GoodnessOfFit_type > p);

      // LinearAbsoluteLinearity
      //
      typedef ::xsd::qif2::ActualLinearValueType LinearAbsoluteLinearity_type;
      typedef ::xsd::cxx::tree::optional< LinearAbsoluteLinearity_type > LinearAbsoluteLinearity_optional;
      typedef ::xsd::cxx::tree::traits< LinearAbsoluteLinearity_type, char > LinearAbsoluteLinearity_traits;

      const LinearAbsoluteLinearity_optional&
      LinearAbsoluteLinearity () const;

      LinearAbsoluteLinearity_optional&
      LinearAbsoluteLinearity ();

      void
      LinearAbsoluteLinearity (const LinearAbsoluteLinearity_type& x);

      void
      LinearAbsoluteLinearity (const LinearAbsoluteLinearity_optional& x);

      void
      LinearAbsoluteLinearity (::std::auto_ptr< LinearAbsoluteLinearity_type > p);

      // AngularAbsoluteLinearity
      //
      typedef ::xsd::qif2::ActualAngularValueType AngularAbsoluteLinearity_type;
      typedef ::xsd::cxx::tree::optional< AngularAbsoluteLinearity_type > AngularAbsoluteLinearity_optional;
      typedef ::xsd::cxx::tree::traits< AngularAbsoluteLinearity_type, char > AngularAbsoluteLinearity_traits;

      const AngularAbsoluteLinearity_optional&
      AngularAbsoluteLinearity () const;

      AngularAbsoluteLinearity_optional&
      AngularAbsoluteLinearity ();

      void
      AngularAbsoluteLinearity (const AngularAbsoluteLinearity_type& x);

      void
      AngularAbsoluteLinearity (const AngularAbsoluteLinearity_optional& x);

      void
      AngularAbsoluteLinearity (::std::auto_ptr< AngularAbsoluteLinearity_type > p);

      // AreaAbsoluteLinearity
      //
      typedef ::xsd::qif2::ActualAreaValueType AreaAbsoluteLinearity_type;
      typedef ::xsd::cxx::tree::optional< AreaAbsoluteLinearity_type > AreaAbsoluteLinearity_optional;
      typedef ::xsd::cxx::tree::traits< AreaAbsoluteLinearity_type, char > AreaAbsoluteLinearity_traits;

      const AreaAbsoluteLinearity_optional&
      AreaAbsoluteLinearity () const;

      AreaAbsoluteLinearity_optional&
      AreaAbsoluteLinearity ();

      void
      AreaAbsoluteLinearity (const AreaAbsoluteLinearity_type& x);

      void
      AreaAbsoluteLinearity (const AreaAbsoluteLinearity_optional& x);

      void
      AreaAbsoluteLinearity (::std::auto_ptr< AreaAbsoluteLinearity_type > p);

      // ForceAbsoluteLinearity
      //
      typedef ::xsd::qif2::ActualForceValueType ForceAbsoluteLinearity_type;
      typedef ::xsd::cxx::tree::optional< ForceAbsoluteLinearity_type > ForceAbsoluteLinearity_optional;
      typedef ::xsd::cxx::tree::traits< ForceAbsoluteLinearity_type, char > ForceAbsoluteLinearity_traits;

      const ForceAbsoluteLinearity_optional&
      ForceAbsoluteLinearity () const;

      ForceAbsoluteLinearity_optional&
      ForceAbsoluteLinearity ();

      void
      ForceAbsoluteLinearity (const ForceAbsoluteLinearity_type& x);

      void
      ForceAbsoluteLinearity (const ForceAbsoluteLinearity_optional& x);

      void
      ForceAbsoluteLinearity (::std::auto_ptr< ForceAbsoluteLinearity_type > p);

      // MassAbsoluteLinearity
      //
      typedef ::xsd::qif2::ActualMassValueType MassAbsoluteLinearity_type;
      typedef ::xsd::cxx::tree::optional< MassAbsoluteLinearity_type > MassAbsoluteLinearity_optional;
      typedef ::xsd::cxx::tree::traits< MassAbsoluteLinearity_type, char > MassAbsoluteLinearity_traits;

      const MassAbsoluteLinearity_optional&
      MassAbsoluteLinearity () const;

      MassAbsoluteLinearity_optional&
      MassAbsoluteLinearity ();

      void
      MassAbsoluteLinearity (const MassAbsoluteLinearity_type& x);

      void
      MassAbsoluteLinearity (const MassAbsoluteLinearity_optional& x);

      void
      MassAbsoluteLinearity (::std::auto_ptr< MassAbsoluteLinearity_type > p);

      // PressureAbsoluteLinearity
      //
      typedef ::xsd::qif2::ActualPressureValueType PressureAbsoluteLinearity_type;
      typedef ::xsd::cxx::tree::optional< PressureAbsoluteLinearity_type > PressureAbsoluteLinearity_optional;
      typedef ::xsd::cxx::tree::traits< PressureAbsoluteLinearity_type, char > PressureAbsoluteLinearity_traits;

      const PressureAbsoluteLinearity_optional&
      PressureAbsoluteLinearity () const;

      PressureAbsoluteLinearity_optional&
      PressureAbsoluteLinearity ();

      void
      PressureAbsoluteLinearity (const PressureAbsoluteLinearity_type& x);

      void
      PressureAbsoluteLinearity (const PressureAbsoluteLinearity_optional& x);

      void
      PressureAbsoluteLinearity (::std::auto_ptr< PressureAbsoluteLinearity_type > p);

      // SpeedAbsoluteLinearity
      //
      typedef ::xsd::qif2::ActualSpeedValueType SpeedAbsoluteLinearity_type;
      typedef ::xsd::cxx::tree::optional< SpeedAbsoluteLinearity_type > SpeedAbsoluteLinearity_optional;
      typedef ::xsd::cxx::tree::traits< SpeedAbsoluteLinearity_type, char > SpeedAbsoluteLinearity_traits;

      const SpeedAbsoluteLinearity_optional&
      SpeedAbsoluteLinearity () const;

      SpeedAbsoluteLinearity_optional&
      SpeedAbsoluteLinearity ();

      void
      SpeedAbsoluteLinearity (const SpeedAbsoluteLinearity_type& x);

      void
      SpeedAbsoluteLinearity (const SpeedAbsoluteLinearity_optional& x);

      void
      SpeedAbsoluteLinearity (::std::auto_ptr< SpeedAbsoluteLinearity_type > p);

      // TemperatureAbsoluteLinearity
      //
      typedef ::xsd::qif2::ActualTemperatureValueType TemperatureAbsoluteLinearity_type;
      typedef ::xsd::cxx::tree::optional< TemperatureAbsoluteLinearity_type > TemperatureAbsoluteLinearity_optional;
      typedef ::xsd::cxx::tree::traits< TemperatureAbsoluteLinearity_type, char > TemperatureAbsoluteLinearity_traits;

      const TemperatureAbsoluteLinearity_optional&
      TemperatureAbsoluteLinearity () const;

      TemperatureAbsoluteLinearity_optional&
      TemperatureAbsoluteLinearity ();

      void
      TemperatureAbsoluteLinearity (const TemperatureAbsoluteLinearity_type& x);

      void
      TemperatureAbsoluteLinearity (const TemperatureAbsoluteLinearity_optional& x);

      void
      TemperatureAbsoluteLinearity (::std::auto_ptr< TemperatureAbsoluteLinearity_type > p);

      // TimeAbsoluteLinearity
      //
      typedef ::xsd::qif2::ActualTimeValueType TimeAbsoluteLinearity_type;
      typedef ::xsd::cxx::tree::optional< TimeAbsoluteLinearity_type > TimeAbsoluteLinearity_optional;
      typedef ::xsd::cxx::tree::traits< TimeAbsoluteLinearity_type, char > TimeAbsoluteLinearity_traits;

      const TimeAbsoluteLinearity_optional&
      TimeAbsoluteLinearity () const;

      TimeAbsoluteLinearity_optional&
      TimeAbsoluteLinearity ();

      void
      TimeAbsoluteLinearity (const TimeAbsoluteLinearity_type& x);

      void
      TimeAbsoluteLinearity (const TimeAbsoluteLinearity_optional& x);

      void
      TimeAbsoluteLinearity (::std::auto_ptr< TimeAbsoluteLinearity_type > p);

      // UserDefinedUnitAbsoluteLinearity
      //
      typedef ::xsd::qif2::ActualUserDefinedUnitValueType UserDefinedUnitAbsoluteLinearity_type;
      typedef ::xsd::cxx::tree::optional< UserDefinedUnitAbsoluteLinearity_type > UserDefinedUnitAbsoluteLinearity_optional;
      typedef ::xsd::cxx::tree::traits< UserDefinedUnitAbsoluteLinearity_type, char > UserDefinedUnitAbsoluteLinearity_traits;

      const UserDefinedUnitAbsoluteLinearity_optional&
      UserDefinedUnitAbsoluteLinearity () const;

      UserDefinedUnitAbsoluteLinearity_optional&
      UserDefinedUnitAbsoluteLinearity ();

      void
      UserDefinedUnitAbsoluteLinearity (const UserDefinedUnitAbsoluteLinearity_type& x);

      void
      UserDefinedUnitAbsoluteLinearity (const UserDefinedUnitAbsoluteLinearity_optional& x);

      void
      UserDefinedUnitAbsoluteLinearity (::std::auto_ptr< UserDefinedUnitAbsoluteLinearity_type > p);

      // RelativeLinearity
      //
      typedef ::xsd::qif2::ActualDecimalType RelativeLinearity_type;
      typedef ::xsd::cxx::tree::optional< RelativeLinearity_type > RelativeLinearity_optional;
      typedef ::xsd::cxx::tree::traits< RelativeLinearity_type, char > RelativeLinearity_traits;

      const RelativeLinearity_optional&
      RelativeLinearity () const;

      RelativeLinearity_optional&
      RelativeLinearity ();

      void
      RelativeLinearity (const RelativeLinearity_type& x);

      void
      RelativeLinearity (const RelativeLinearity_optional& x);

      void
      RelativeLinearity (::std::auto_ptr< RelativeLinearity_type > p);

      // Constructors.
      //
      LinearityStudyResultsType (const Status_type&,
                                 const id_type&,
                                 const SampleSize_type&);

      LinearityStudyResultsType (::std::auto_ptr< Status_type >,
                                 const id_type&,
                                 const SampleSize_type&);

      LinearityStudyResultsType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      LinearityStudyResultsType (const LinearityStudyResultsType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual LinearityStudyResultsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LinearityStudyResultsType&
      operator= (const LinearityStudyResultsType& x);

      virtual 
      ~LinearityStudyResultsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SampleSize_type > SampleSize_;
      MeasurementDeviceIds_optional MeasurementDeviceIds_;
      GoodnessOfFit_optional GoodnessOfFit_;
      LinearAbsoluteLinearity_optional LinearAbsoluteLinearity_;
      AngularAbsoluteLinearity_optional AngularAbsoluteLinearity_;
      AreaAbsoluteLinearity_optional AreaAbsoluteLinearity_;
      ForceAbsoluteLinearity_optional ForceAbsoluteLinearity_;
      MassAbsoluteLinearity_optional MassAbsoluteLinearity_;
      PressureAbsoluteLinearity_optional PressureAbsoluteLinearity_;
      SpeedAbsoluteLinearity_optional SpeedAbsoluteLinearity_;
      TemperatureAbsoluteLinearity_optional TemperatureAbsoluteLinearity_;
      TimeAbsoluteLinearity_optional TimeAbsoluteLinearity_;
      UserDefinedUnitAbsoluteLinearity_optional UserDefinedUnitAbsoluteLinearity_;
      RelativeLinearity_optional RelativeLinearity_;
    };

    class StabilityStudyResultsType: public ::xsd::qif2::StatisticalStudyResultsBaseType
    {
      public:
      // SampleSize
      //
      typedef ::xml_schema::positive_integer SampleSize_type;
      typedef ::xsd::cxx::tree::traits< SampleSize_type, char > SampleSize_traits;

      const SampleSize_type&
      SampleSize () const;

      SampleSize_type&
      SampleSize ();

      void
      SampleSize (const SampleSize_type& x);

      // MeasurementDeviceIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType MeasurementDeviceIds_type;
      typedef ::xsd::cxx::tree::optional< MeasurementDeviceIds_type > MeasurementDeviceIds_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementDeviceIds_type, char > MeasurementDeviceIds_traits;

      const MeasurementDeviceIds_optional&
      MeasurementDeviceIds () const;

      MeasurementDeviceIds_optional&
      MeasurementDeviceIds ();

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_type& x);

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_optional& x);

      void
      MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > p);

      // Constructors.
      //
      StabilityStudyResultsType (const Status_type&,
                                 const id_type&,
                                 const SampleSize_type&);

      StabilityStudyResultsType (::std::auto_ptr< Status_type >,
                                 const id_type&,
                                 const SampleSize_type&);

      StabilityStudyResultsType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      StabilityStudyResultsType (const StabilityStudyResultsType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual StabilityStudyResultsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StabilityStudyResultsType&
      operator= (const StabilityStudyResultsType& x);

      virtual 
      ~StabilityStudyResultsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SampleSize_type > SampleSize_;
      MeasurementDeviceIds_optional MeasurementDeviceIds_;
    };

    class BiasStudyResultsType: public ::xsd::qif2::StatisticalStudyResultsBaseType
    {
      public:
      // SampleSize
      //
      typedef ::xml_schema::positive_integer SampleSize_type;
      typedef ::xsd::cxx::tree::traits< SampleSize_type, char > SampleSize_traits;

      const SampleSize_type&
      SampleSize () const;

      SampleSize_type&
      SampleSize ();

      void
      SampleSize (const SampleSize_type& x);

      // MeasurementDeviceIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType MeasurementDeviceIds_type;
      typedef ::xsd::cxx::tree::optional< MeasurementDeviceIds_type > MeasurementDeviceIds_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementDeviceIds_type, char > MeasurementDeviceIds_traits;

      const MeasurementDeviceIds_optional&
      MeasurementDeviceIds () const;

      MeasurementDeviceIds_optional&
      MeasurementDeviceIds ();

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_type& x);

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_optional& x);

      void
      MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > p);

      // Constructors.
      //
      BiasStudyResultsType (const Status_type&,
                            const id_type&,
                            const SampleSize_type&);

      BiasStudyResultsType (::std::auto_ptr< Status_type >,
                            const id_type&,
                            const SampleSize_type&);

      BiasStudyResultsType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      BiasStudyResultsType (const BiasStudyResultsType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual BiasStudyResultsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      BiasStudyResultsType&
      operator= (const BiasStudyResultsType& x);

      virtual 
      ~BiasStudyResultsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< SampleSize_type > SampleSize_;
      MeasurementDeviceIds_optional MeasurementDeviceIds_;
    };

    class FirstArticleStudyResultsType: public ::xsd::qif2::StatisticalStudyResultsBaseType
    {
      public:
      // InSpecRatio
      //
      typedef ::xml_schema::decimal InSpecRatio_type;
      typedef ::xsd::cxx::tree::optional< InSpecRatio_type > InSpecRatio_optional;
      typedef ::xsd::cxx::tree::traits< InSpecRatio_type, char, ::xsd::cxx::tree::schema_type::decimal > InSpecRatio_traits;

      const InSpecRatio_optional&
      InSpecRatio () const;

      InSpecRatio_optional&
      InSpecRatio ();

      void
      InSpecRatio (const InSpecRatio_type& x);

      void
      InSpecRatio (const InSpecRatio_optional& x);

      // LinearAbsoluteMaximum
      //
      typedef ::xsd::qif2::ActualLinearValueType LinearAbsoluteMaximum_type;
      typedef ::xsd::cxx::tree::optional< LinearAbsoluteMaximum_type > LinearAbsoluteMaximum_optional;
      typedef ::xsd::cxx::tree::traits< LinearAbsoluteMaximum_type, char > LinearAbsoluteMaximum_traits;

      const LinearAbsoluteMaximum_optional&
      LinearAbsoluteMaximum () const;

      LinearAbsoluteMaximum_optional&
      LinearAbsoluteMaximum ();

      void
      LinearAbsoluteMaximum (const LinearAbsoluteMaximum_type& x);

      void
      LinearAbsoluteMaximum (const LinearAbsoluteMaximum_optional& x);

      void
      LinearAbsoluteMaximum (::std::auto_ptr< LinearAbsoluteMaximum_type > p);

      // AngularAbsoluteMaximum
      //
      typedef ::xsd::qif2::ActualAngularValueType AngularAbsoluteMaximum_type;
      typedef ::xsd::cxx::tree::optional< AngularAbsoluteMaximum_type > AngularAbsoluteMaximum_optional;
      typedef ::xsd::cxx::tree::traits< AngularAbsoluteMaximum_type, char > AngularAbsoluteMaximum_traits;

      const AngularAbsoluteMaximum_optional&
      AngularAbsoluteMaximum () const;

      AngularAbsoluteMaximum_optional&
      AngularAbsoluteMaximum ();

      void
      AngularAbsoluteMaximum (const AngularAbsoluteMaximum_type& x);

      void
      AngularAbsoluteMaximum (const AngularAbsoluteMaximum_optional& x);

      void
      AngularAbsoluteMaximum (::std::auto_ptr< AngularAbsoluteMaximum_type > p);

      // AreaAbsoluteMaximum
      //
      typedef ::xsd::qif2::ActualAreaValueType AreaAbsoluteMaximum_type;
      typedef ::xsd::cxx::tree::optional< AreaAbsoluteMaximum_type > AreaAbsoluteMaximum_optional;
      typedef ::xsd::cxx::tree::traits< AreaAbsoluteMaximum_type, char > AreaAbsoluteMaximum_traits;

      const AreaAbsoluteMaximum_optional&
      AreaAbsoluteMaximum () const;

      AreaAbsoluteMaximum_optional&
      AreaAbsoluteMaximum ();

      void
      AreaAbsoluteMaximum (const AreaAbsoluteMaximum_type& x);

      void
      AreaAbsoluteMaximum (const AreaAbsoluteMaximum_optional& x);

      void
      AreaAbsoluteMaximum (::std::auto_ptr< AreaAbsoluteMaximum_type > p);

      // ForceAbsoluteMaximum
      //
      typedef ::xsd::qif2::ActualForceValueType ForceAbsoluteMaximum_type;
      typedef ::xsd::cxx::tree::optional< ForceAbsoluteMaximum_type > ForceAbsoluteMaximum_optional;
      typedef ::xsd::cxx::tree::traits< ForceAbsoluteMaximum_type, char > ForceAbsoluteMaximum_traits;

      const ForceAbsoluteMaximum_optional&
      ForceAbsoluteMaximum () const;

      ForceAbsoluteMaximum_optional&
      ForceAbsoluteMaximum ();

      void
      ForceAbsoluteMaximum (const ForceAbsoluteMaximum_type& x);

      void
      ForceAbsoluteMaximum (const ForceAbsoluteMaximum_optional& x);

      void
      ForceAbsoluteMaximum (::std::auto_ptr< ForceAbsoluteMaximum_type > p);

      // MassAbsoluteMaximum
      //
      typedef ::xsd::qif2::ActualMassValueType MassAbsoluteMaximum_type;
      typedef ::xsd::cxx::tree::optional< MassAbsoluteMaximum_type > MassAbsoluteMaximum_optional;
      typedef ::xsd::cxx::tree::traits< MassAbsoluteMaximum_type, char > MassAbsoluteMaximum_traits;

      const MassAbsoluteMaximum_optional&
      MassAbsoluteMaximum () const;

      MassAbsoluteMaximum_optional&
      MassAbsoluteMaximum ();

      void
      MassAbsoluteMaximum (const MassAbsoluteMaximum_type& x);

      void
      MassAbsoluteMaximum (const MassAbsoluteMaximum_optional& x);

      void
      MassAbsoluteMaximum (::std::auto_ptr< MassAbsoluteMaximum_type > p);

      // PressureAbsoluteMaximum
      //
      typedef ::xsd::qif2::ActualPressureValueType PressureAbsoluteMaximum_type;
      typedef ::xsd::cxx::tree::optional< PressureAbsoluteMaximum_type > PressureAbsoluteMaximum_optional;
      typedef ::xsd::cxx::tree::traits< PressureAbsoluteMaximum_type, char > PressureAbsoluteMaximum_traits;

      const PressureAbsoluteMaximum_optional&
      PressureAbsoluteMaximum () const;

      PressureAbsoluteMaximum_optional&
      PressureAbsoluteMaximum ();

      void
      PressureAbsoluteMaximum (const PressureAbsoluteMaximum_type& x);

      void
      PressureAbsoluteMaximum (const PressureAbsoluteMaximum_optional& x);

      void
      PressureAbsoluteMaximum (::std::auto_ptr< PressureAbsoluteMaximum_type > p);

      // SpeedAbsoluteMaximum
      //
      typedef ::xsd::qif2::ActualSpeedValueType SpeedAbsoluteMaximum_type;
      typedef ::xsd::cxx::tree::optional< SpeedAbsoluteMaximum_type > SpeedAbsoluteMaximum_optional;
      typedef ::xsd::cxx::tree::traits< SpeedAbsoluteMaximum_type, char > SpeedAbsoluteMaximum_traits;

      const SpeedAbsoluteMaximum_optional&
      SpeedAbsoluteMaximum () const;

      SpeedAbsoluteMaximum_optional&
      SpeedAbsoluteMaximum ();

      void
      SpeedAbsoluteMaximum (const SpeedAbsoluteMaximum_type& x);

      void
      SpeedAbsoluteMaximum (const SpeedAbsoluteMaximum_optional& x);

      void
      SpeedAbsoluteMaximum (::std::auto_ptr< SpeedAbsoluteMaximum_type > p);

      // TemperatureAbsoluteMaximum
      //
      typedef ::xsd::qif2::ActualTemperatureValueType TemperatureAbsoluteMaximum_type;
      typedef ::xsd::cxx::tree::optional< TemperatureAbsoluteMaximum_type > TemperatureAbsoluteMaximum_optional;
      typedef ::xsd::cxx::tree::traits< TemperatureAbsoluteMaximum_type, char > TemperatureAbsoluteMaximum_traits;

      const TemperatureAbsoluteMaximum_optional&
      TemperatureAbsoluteMaximum () const;

      TemperatureAbsoluteMaximum_optional&
      TemperatureAbsoluteMaximum ();

      void
      TemperatureAbsoluteMaximum (const TemperatureAbsoluteMaximum_type& x);

      void
      TemperatureAbsoluteMaximum (const TemperatureAbsoluteMaximum_optional& x);

      void
      TemperatureAbsoluteMaximum (::std::auto_ptr< TemperatureAbsoluteMaximum_type > p);

      // TimeAbsoluteMaximum
      //
      typedef ::xsd::qif2::ActualTimeValueType TimeAbsoluteMaximum_type;
      typedef ::xsd::cxx::tree::optional< TimeAbsoluteMaximum_type > TimeAbsoluteMaximum_optional;
      typedef ::xsd::cxx::tree::traits< TimeAbsoluteMaximum_type, char > TimeAbsoluteMaximum_traits;

      const TimeAbsoluteMaximum_optional&
      TimeAbsoluteMaximum () const;

      TimeAbsoluteMaximum_optional&
      TimeAbsoluteMaximum ();

      void
      TimeAbsoluteMaximum (const TimeAbsoluteMaximum_type& x);

      void
      TimeAbsoluteMaximum (const TimeAbsoluteMaximum_optional& x);

      void
      TimeAbsoluteMaximum (::std::auto_ptr< TimeAbsoluteMaximum_type > p);

      // UserDefinedUnitAbsoluteMaximum
      //
      typedef ::xsd::qif2::ActualUserDefinedUnitValueType UserDefinedUnitAbsoluteMaximum_type;
      typedef ::xsd::cxx::tree::sequence< UserDefinedUnitAbsoluteMaximum_type > UserDefinedUnitAbsoluteMaximum_sequence;
      typedef UserDefinedUnitAbsoluteMaximum_sequence::iterator UserDefinedUnitAbsoluteMaximum_iterator;
      typedef UserDefinedUnitAbsoluteMaximum_sequence::const_iterator UserDefinedUnitAbsoluteMaximum_const_iterator;
      typedef ::xsd::cxx::tree::traits< UserDefinedUnitAbsoluteMaximum_type, char > UserDefinedUnitAbsoluteMaximum_traits;

      const UserDefinedUnitAbsoluteMaximum_sequence&
      UserDefinedUnitAbsoluteMaximum () const;

      UserDefinedUnitAbsoluteMaximum_sequence&
      UserDefinedUnitAbsoluteMaximum ();

      void
      UserDefinedUnitAbsoluteMaximum (const UserDefinedUnitAbsoluteMaximum_sequence& s);

      // RelativeMaximum
      //
      typedef ::xsd::qif2::ActualDecimalType RelativeMaximum_type;
      typedef ::xsd::cxx::tree::optional< RelativeMaximum_type > RelativeMaximum_optional;
      typedef ::xsd::cxx::tree::traits< RelativeMaximum_type, char > RelativeMaximum_traits;

      const RelativeMaximum_optional&
      RelativeMaximum () const;

      RelativeMaximum_optional&
      RelativeMaximum ();

      void
      RelativeMaximum (const RelativeMaximum_type& x);

      void
      RelativeMaximum (const RelativeMaximum_optional& x);

      void
      RelativeMaximum (::std::auto_ptr< RelativeMaximum_type > p);

      // Constructors.
      //
      FirstArticleStudyResultsType (const Status_type&,
                                    const id_type&);

      FirstArticleStudyResultsType (::std::auto_ptr< Status_type >,
                                    const id_type&);

      FirstArticleStudyResultsType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      FirstArticleStudyResultsType (const FirstArticleStudyResultsType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual FirstArticleStudyResultsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FirstArticleStudyResultsType&
      operator= (const FirstArticleStudyResultsType& x);

      virtual 
      ~FirstArticleStudyResultsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      InSpecRatio_optional InSpecRatio_;
      LinearAbsoluteMaximum_optional LinearAbsoluteMaximum_;
      AngularAbsoluteMaximum_optional AngularAbsoluteMaximum_;
      AreaAbsoluteMaximum_optional AreaAbsoluteMaximum_;
      ForceAbsoluteMaximum_optional ForceAbsoluteMaximum_;
      MassAbsoluteMaximum_optional MassAbsoluteMaximum_;
      PressureAbsoluteMaximum_optional PressureAbsoluteMaximum_;
      SpeedAbsoluteMaximum_optional SpeedAbsoluteMaximum_;
      TemperatureAbsoluteMaximum_optional TemperatureAbsoluteMaximum_;
      TimeAbsoluteMaximum_optional TimeAbsoluteMaximum_;
      UserDefinedUnitAbsoluteMaximum_sequence UserDefinedUnitAbsoluteMaximum_;
      RelativeMaximum_optional RelativeMaximum_;
    };

    class ProcessDifferenceStudyResultsType: public ::xsd::qif2::StatisticalStudyResultsBaseType
    {
      public:
      // NumberOfSamples
      //
      typedef ::xml_schema::positive_integer NumberOfSamples_type;
      typedef ::xsd::cxx::tree::traits< NumberOfSamples_type, char > NumberOfSamples_traits;

      const NumberOfSamples_type&
      NumberOfSamples () const;

      NumberOfSamples_type&
      NumberOfSamples ();

      void
      NumberOfSamples (const NumberOfSamples_type& x);

      // SubgroupSize
      //
      typedef ::xml_schema::positive_integer SubgroupSize_type;
      typedef ::xsd::cxx::tree::traits< SubgroupSize_type, char > SubgroupSize_traits;

      const SubgroupSize_type&
      SubgroupSize () const;

      SubgroupSize_type&
      SubgroupSize ();

      void
      SubgroupSize (const SubgroupSize_type& x);

      static SubgroupSize_type
      SubgroupSize_default_value ();

      // ManufacturingProcessId
      //
      typedef ::xsd::qif2::QIFReferenceFullType ManufacturingProcessId_type;
      typedef ::xsd::cxx::tree::optional< ManufacturingProcessId_type > ManufacturingProcessId_optional;
      typedef ::xsd::cxx::tree::traits< ManufacturingProcessId_type, char > ManufacturingProcessId_traits;

      const ManufacturingProcessId_optional&
      ManufacturingProcessId () const;

      ManufacturingProcessId_optional&
      ManufacturingProcessId ();

      void
      ManufacturingProcessId (const ManufacturingProcessId_type& x);

      void
      ManufacturingProcessId (const ManufacturingProcessId_optional& x);

      void
      ManufacturingProcessId (::std::auto_ptr< ManufacturingProcessId_type > p);

      // LinearAbsoluteDifference
      //
      typedef ::xsd::qif2::ActualLinearValueType LinearAbsoluteDifference_type;
      typedef ::xsd::cxx::tree::optional< LinearAbsoluteDifference_type > LinearAbsoluteDifference_optional;
      typedef ::xsd::cxx::tree::traits< LinearAbsoluteDifference_type, char > LinearAbsoluteDifference_traits;

      const LinearAbsoluteDifference_optional&
      LinearAbsoluteDifference () const;

      LinearAbsoluteDifference_optional&
      LinearAbsoluteDifference ();

      void
      LinearAbsoluteDifference (const LinearAbsoluteDifference_type& x);

      void
      LinearAbsoluteDifference (const LinearAbsoluteDifference_optional& x);

      void
      LinearAbsoluteDifference (::std::auto_ptr< LinearAbsoluteDifference_type > p);

      // AngularAbsoluteDifference
      //
      typedef ::xsd::qif2::ActualAngularValueType AngularAbsoluteDifference_type;
      typedef ::xsd::cxx::tree::optional< AngularAbsoluteDifference_type > AngularAbsoluteDifference_optional;
      typedef ::xsd::cxx::tree::traits< AngularAbsoluteDifference_type, char > AngularAbsoluteDifference_traits;

      const AngularAbsoluteDifference_optional&
      AngularAbsoluteDifference () const;

      AngularAbsoluteDifference_optional&
      AngularAbsoluteDifference ();

      void
      AngularAbsoluteDifference (const AngularAbsoluteDifference_type& x);

      void
      AngularAbsoluteDifference (const AngularAbsoluteDifference_optional& x);

      void
      AngularAbsoluteDifference (::std::auto_ptr< AngularAbsoluteDifference_type > p);

      // AreaAbsoluteDifference
      //
      typedef ::xsd::qif2::ActualAreaValueType AreaAbsoluteDifference_type;
      typedef ::xsd::cxx::tree::optional< AreaAbsoluteDifference_type > AreaAbsoluteDifference_optional;
      typedef ::xsd::cxx::tree::traits< AreaAbsoluteDifference_type, char > AreaAbsoluteDifference_traits;

      const AreaAbsoluteDifference_optional&
      AreaAbsoluteDifference () const;

      AreaAbsoluteDifference_optional&
      AreaAbsoluteDifference ();

      void
      AreaAbsoluteDifference (const AreaAbsoluteDifference_type& x);

      void
      AreaAbsoluteDifference (const AreaAbsoluteDifference_optional& x);

      void
      AreaAbsoluteDifference (::std::auto_ptr< AreaAbsoluteDifference_type > p);

      // ForceAbsoluteDifference
      //
      typedef ::xsd::qif2::ActualForceValueType ForceAbsoluteDifference_type;
      typedef ::xsd::cxx::tree::optional< ForceAbsoluteDifference_type > ForceAbsoluteDifference_optional;
      typedef ::xsd::cxx::tree::traits< ForceAbsoluteDifference_type, char > ForceAbsoluteDifference_traits;

      const ForceAbsoluteDifference_optional&
      ForceAbsoluteDifference () const;

      ForceAbsoluteDifference_optional&
      ForceAbsoluteDifference ();

      void
      ForceAbsoluteDifference (const ForceAbsoluteDifference_type& x);

      void
      ForceAbsoluteDifference (const ForceAbsoluteDifference_optional& x);

      void
      ForceAbsoluteDifference (::std::auto_ptr< ForceAbsoluteDifference_type > p);

      // MassAbsoluteDifference
      //
      typedef ::xsd::qif2::ActualMassValueType MassAbsoluteDifference_type;
      typedef ::xsd::cxx::tree::optional< MassAbsoluteDifference_type > MassAbsoluteDifference_optional;
      typedef ::xsd::cxx::tree::traits< MassAbsoluteDifference_type, char > MassAbsoluteDifference_traits;

      const MassAbsoluteDifference_optional&
      MassAbsoluteDifference () const;

      MassAbsoluteDifference_optional&
      MassAbsoluteDifference ();

      void
      MassAbsoluteDifference (const MassAbsoluteDifference_type& x);

      void
      MassAbsoluteDifference (const MassAbsoluteDifference_optional& x);

      void
      MassAbsoluteDifference (::std::auto_ptr< MassAbsoluteDifference_type > p);

      // PressureAbsoluteDifference
      //
      typedef ::xsd::qif2::ActualPressureValueType PressureAbsoluteDifference_type;
      typedef ::xsd::cxx::tree::optional< PressureAbsoluteDifference_type > PressureAbsoluteDifference_optional;
      typedef ::xsd::cxx::tree::traits< PressureAbsoluteDifference_type, char > PressureAbsoluteDifference_traits;

      const PressureAbsoluteDifference_optional&
      PressureAbsoluteDifference () const;

      PressureAbsoluteDifference_optional&
      PressureAbsoluteDifference ();

      void
      PressureAbsoluteDifference (const PressureAbsoluteDifference_type& x);

      void
      PressureAbsoluteDifference (const PressureAbsoluteDifference_optional& x);

      void
      PressureAbsoluteDifference (::std::auto_ptr< PressureAbsoluteDifference_type > p);

      // SpeedAbsoluteDifference
      //
      typedef ::xsd::qif2::ActualSpeedValueType SpeedAbsoluteDifference_type;
      typedef ::xsd::cxx::tree::optional< SpeedAbsoluteDifference_type > SpeedAbsoluteDifference_optional;
      typedef ::xsd::cxx::tree::traits< SpeedAbsoluteDifference_type, char > SpeedAbsoluteDifference_traits;

      const SpeedAbsoluteDifference_optional&
      SpeedAbsoluteDifference () const;

      SpeedAbsoluteDifference_optional&
      SpeedAbsoluteDifference ();

      void
      SpeedAbsoluteDifference (const SpeedAbsoluteDifference_type& x);

      void
      SpeedAbsoluteDifference (const SpeedAbsoluteDifference_optional& x);

      void
      SpeedAbsoluteDifference (::std::auto_ptr< SpeedAbsoluteDifference_type > p);

      // TemperatureAbsoluteDifference
      //
      typedef ::xsd::qif2::ActualTemperatureValueType TemperatureAbsoluteDifference_type;
      typedef ::xsd::cxx::tree::optional< TemperatureAbsoluteDifference_type > TemperatureAbsoluteDifference_optional;
      typedef ::xsd::cxx::tree::traits< TemperatureAbsoluteDifference_type, char > TemperatureAbsoluteDifference_traits;

      const TemperatureAbsoluteDifference_optional&
      TemperatureAbsoluteDifference () const;

      TemperatureAbsoluteDifference_optional&
      TemperatureAbsoluteDifference ();

      void
      TemperatureAbsoluteDifference (const TemperatureAbsoluteDifference_type& x);

      void
      TemperatureAbsoluteDifference (const TemperatureAbsoluteDifference_optional& x);

      void
      TemperatureAbsoluteDifference (::std::auto_ptr< TemperatureAbsoluteDifference_type > p);

      // TimeAbsoluteDifference
      //
      typedef ::xsd::qif2::ActualTimeValueType TimeAbsoluteDifference_type;
      typedef ::xsd::cxx::tree::optional< TimeAbsoluteDifference_type > TimeAbsoluteDifference_optional;
      typedef ::xsd::cxx::tree::traits< TimeAbsoluteDifference_type, char > TimeAbsoluteDifference_traits;

      const TimeAbsoluteDifference_optional&
      TimeAbsoluteDifference () const;

      TimeAbsoluteDifference_optional&
      TimeAbsoluteDifference ();

      void
      TimeAbsoluteDifference (const TimeAbsoluteDifference_type& x);

      void
      TimeAbsoluteDifference (const TimeAbsoluteDifference_optional& x);

      void
      TimeAbsoluteDifference (::std::auto_ptr< TimeAbsoluteDifference_type > p);

      // UserDefinedUnitAbsoluteDifference
      //
      typedef ::xsd::qif2::ActualUserDefinedUnitValueType UserDefinedUnitAbsoluteDifference_type;
      typedef ::xsd::cxx::tree::sequence< UserDefinedUnitAbsoluteDifference_type > UserDefinedUnitAbsoluteDifference_sequence;
      typedef UserDefinedUnitAbsoluteDifference_sequence::iterator UserDefinedUnitAbsoluteDifference_iterator;
      typedef UserDefinedUnitAbsoluteDifference_sequence::const_iterator UserDefinedUnitAbsoluteDifference_const_iterator;
      typedef ::xsd::cxx::tree::traits< UserDefinedUnitAbsoluteDifference_type, char > UserDefinedUnitAbsoluteDifference_traits;

      const UserDefinedUnitAbsoluteDifference_sequence&
      UserDefinedUnitAbsoluteDifference () const;

      UserDefinedUnitAbsoluteDifference_sequence&
      UserDefinedUnitAbsoluteDifference ();

      void
      UserDefinedUnitAbsoluteDifference (const UserDefinedUnitAbsoluteDifference_sequence& s);

      // RelativeDifference
      //
      typedef ::xsd::qif2::ActualDecimalType RelativeDifference_type;
      typedef ::xsd::cxx::tree::optional< RelativeDifference_type > RelativeDifference_optional;
      typedef ::xsd::cxx::tree::traits< RelativeDifference_type, char > RelativeDifference_traits;

      const RelativeDifference_optional&
      RelativeDifference () const;

      RelativeDifference_optional&
      RelativeDifference ();

      void
      RelativeDifference (const RelativeDifference_type& x);

      void
      RelativeDifference (const RelativeDifference_optional& x);

      void
      RelativeDifference (::std::auto_ptr< RelativeDifference_type > p);

      // Constructors.
      //
      ProcessDifferenceStudyResultsType (const Status_type&,
                                         const id_type&,
                                         const NumberOfSamples_type&,
                                         const SubgroupSize_type&);

      ProcessDifferenceStudyResultsType (::std::auto_ptr< Status_type >,
                                         const id_type&,
                                         const NumberOfSamples_type&,
                                         const SubgroupSize_type&);

      ProcessDifferenceStudyResultsType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      ProcessDifferenceStudyResultsType (const ProcessDifferenceStudyResultsType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual ProcessDifferenceStudyResultsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ProcessDifferenceStudyResultsType&
      operator= (const ProcessDifferenceStudyResultsType& x);

      virtual 
      ~ProcessDifferenceStudyResultsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< NumberOfSamples_type > NumberOfSamples_;
      ::xsd::cxx::tree::one< SubgroupSize_type > SubgroupSize_;
      ManufacturingProcessId_optional ManufacturingProcessId_;
      LinearAbsoluteDifference_optional LinearAbsoluteDifference_;
      AngularAbsoluteDifference_optional AngularAbsoluteDifference_;
      AreaAbsoluteDifference_optional AreaAbsoluteDifference_;
      ForceAbsoluteDifference_optional ForceAbsoluteDifference_;
      MassAbsoluteDifference_optional MassAbsoluteDifference_;
      PressureAbsoluteDifference_optional PressureAbsoluteDifference_;
      SpeedAbsoluteDifference_optional SpeedAbsoluteDifference_;
      TemperatureAbsoluteDifference_optional TemperatureAbsoluteDifference_;
      TimeAbsoluteDifference_optional TimeAbsoluteDifference_;
      UserDefinedUnitAbsoluteDifference_sequence UserDefinedUnitAbsoluteDifference_;
      RelativeDifference_optional RelativeDifference_;
    };

    class MultipleProductInstanceStudyResultsBaseType: public ::xsd::qif2::StatisticalStudyResultsBaseType
    {
      public:
      // NumberOfSamples
      //
      typedef ::xml_schema::positive_integer NumberOfSamples_type;
      typedef ::xsd::cxx::tree::traits< NumberOfSamples_type, char > NumberOfSamples_traits;

      const NumberOfSamples_type&
      NumberOfSamples () const;

      NumberOfSamples_type&
      NumberOfSamples ();

      void
      NumberOfSamples (const NumberOfSamples_type& x);

      // SubgroupSize
      //
      typedef ::xml_schema::positive_integer SubgroupSize_type;
      typedef ::xsd::cxx::tree::optional< SubgroupSize_type > SubgroupSize_optional;
      typedef ::xsd::cxx::tree::traits< SubgroupSize_type, char > SubgroupSize_traits;

      const SubgroupSize_optional&
      SubgroupSize () const;

      SubgroupSize_optional&
      SubgroupSize ();

      void
      SubgroupSize (const SubgroupSize_type& x);

      void
      SubgroupSize (const SubgroupSize_optional& x);

      // Constructors.
      //
      MultipleProductInstanceStudyResultsBaseType (const Status_type&,
                                                   const id_type&,
                                                   const NumberOfSamples_type&);

      MultipleProductInstanceStudyResultsBaseType (::std::auto_ptr< Status_type >,
                                                   const id_type&,
                                                   const NumberOfSamples_type&);

      MultipleProductInstanceStudyResultsBaseType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      MultipleProductInstanceStudyResultsBaseType (const MultipleProductInstanceStudyResultsBaseType& x,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

      virtual MultipleProductInstanceStudyResultsBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      MultipleProductInstanceStudyResultsBaseType&
      operator= (const MultipleProductInstanceStudyResultsBaseType& x);

      virtual 
      ~MultipleProductInstanceStudyResultsBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< NumberOfSamples_type > NumberOfSamples_;
      SubgroupSize_optional SubgroupSize_;
    };

    class SimpleStudyResultsType: public ::xsd::qif2::MultipleProductInstanceStudyResultsBaseType
    {
      public:
      // Constructors.
      //
      SimpleStudyResultsType (const Status_type&,
                              const id_type&,
                              const NumberOfSamples_type&);

      SimpleStudyResultsType (::std::auto_ptr< Status_type >,
                              const id_type&,
                              const NumberOfSamples_type&);

      SimpleStudyResultsType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      SimpleStudyResultsType (const SimpleStudyResultsType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual SimpleStudyResultsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SimpleStudyResultsType ();
    };

    class CapabilityStudyResultsType: public ::xsd::qif2::MultipleProductInstanceStudyResultsBaseType
    {
      public:
      // Constructors.
      //
      CapabilityStudyResultsType (const Status_type&,
                                  const id_type&,
                                  const NumberOfSamples_type&);

      CapabilityStudyResultsType (::std::auto_ptr< Status_type >,
                                  const id_type&,
                                  const NumberOfSamples_type&);

      CapabilityStudyResultsType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      CapabilityStudyResultsType (const CapabilityStudyResultsType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual CapabilityStudyResultsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CapabilityStudyResultsType ();
    };

    class GageRandRStudyResultsType: public ::xsd::qif2::StatisticalStudyResultsBaseType
    {
      public:
      // MeasurementDeviceIds
      //
      typedef ::xsd::qif2::ArrayReferenceFullType MeasurementDeviceIds_type;
      typedef ::xsd::cxx::tree::optional< MeasurementDeviceIds_type > MeasurementDeviceIds_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementDeviceIds_type, char > MeasurementDeviceIds_traits;

      const MeasurementDeviceIds_optional&
      MeasurementDeviceIds () const;

      MeasurementDeviceIds_optional&
      MeasurementDeviceIds ();

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_type& x);

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_optional& x);

      void
      MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > p);

      // NumberOfAppraisers
      //
      typedef ::xml_schema::positive_integer NumberOfAppraisers_type;
      typedef ::xsd::cxx::tree::traits< NumberOfAppraisers_type, char > NumberOfAppraisers_traits;

      const NumberOfAppraisers_type&
      NumberOfAppraisers () const;

      NumberOfAppraisers_type&
      NumberOfAppraisers ();

      void
      NumberOfAppraisers (const NumberOfAppraisers_type& x);

      // NumberOfParts
      //
      typedef ::xml_schema::positive_integer NumberOfParts_type;
      typedef ::xsd::cxx::tree::traits< NumberOfParts_type, char > NumberOfParts_traits;

      const NumberOfParts_type&
      NumberOfParts () const;

      NumberOfParts_type&
      NumberOfParts ();

      void
      NumberOfParts (const NumberOfParts_type& x);

      // NumberOfTrials
      //
      typedef ::xml_schema::positive_integer NumberOfTrials_type;
      typedef ::xsd::cxx::tree::traits< NumberOfTrials_type, char > NumberOfTrials_traits;

      const NumberOfTrials_type&
      NumberOfTrials () const;

      NumberOfTrials_type&
      NumberOfTrials ();

      void
      NumberOfTrials (const NumberOfTrials_type& x);

      // Constructors.
      //
      GageRandRStudyResultsType (const Status_type&,
                                 const id_type&,
                                 const NumberOfAppraisers_type&,
                                 const NumberOfParts_type&,
                                 const NumberOfTrials_type&);

      GageRandRStudyResultsType (::std::auto_ptr< Status_type >,
                                 const id_type&,
                                 const NumberOfAppraisers_type&,
                                 const NumberOfParts_type&,
                                 const NumberOfTrials_type&);

      GageRandRStudyResultsType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      GageRandRStudyResultsType (const GageRandRStudyResultsType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual GageRandRStudyResultsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      GageRandRStudyResultsType&
      operator= (const GageRandRStudyResultsType& x);

      virtual 
      ~GageRandRStudyResultsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      MeasurementDeviceIds_optional MeasurementDeviceIds_;
      ::xsd::cxx::tree::one< NumberOfAppraisers_type > NumberOfAppraisers_;
      ::xsd::cxx::tree::one< NumberOfParts_type > NumberOfParts_;
      ::xsd::cxx::tree::one< NumberOfTrials_type > NumberOfTrials_;
    };

    class ProductionStudyResultsType: public ::xsd::qif2::MultipleProductInstanceStudyResultsBaseType
    {
      public:
      // ControlIssueDetails
      //
      typedef ::xsd::qif2::ControlIssueDetailsType ControlIssueDetails_type;
      typedef ::xsd::cxx::tree::sequence< ControlIssueDetails_type > ControlIssueDetails_sequence;
      typedef ControlIssueDetails_sequence::iterator ControlIssueDetails_iterator;
      typedef ControlIssueDetails_sequence::const_iterator ControlIssueDetails_const_iterator;
      typedef ::xsd::cxx::tree::traits< ControlIssueDetails_type, char > ControlIssueDetails_traits;

      const ControlIssueDetails_sequence&
      ControlIssueDetails () const;

      ControlIssueDetails_sequence&
      ControlIssueDetails ();

      void
      ControlIssueDetails (const ControlIssueDetails_sequence& s);

      // Constructors.
      //
      ProductionStudyResultsType (const Status_type&,
                                  const id_type&,
                                  const NumberOfSamples_type&);

      ProductionStudyResultsType (::std::auto_ptr< Status_type >,
                                  const id_type&,
                                  const NumberOfSamples_type&);

      ProductionStudyResultsType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      ProductionStudyResultsType (const ProductionStudyResultsType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual ProductionStudyResultsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ProductionStudyResultsType&
      operator= (const ProductionStudyResultsType& x);

      virtual 
      ~ProductionStudyResultsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ControlIssueDetails_sequence ControlIssueDetails_;
    };

    class StatisticalStudyPlansType: public ::xml_schema::type
    {
      public:
      // StatisticalStudyPlan
      //
      typedef ::xsd::qif2::StatisticalStudyPlanBaseType StatisticalStudyPlan_type;
      typedef ::xsd::cxx::tree::sequence< StatisticalStudyPlan_type > StatisticalStudyPlan_sequence;
      typedef StatisticalStudyPlan_sequence::iterator StatisticalStudyPlan_iterator;
      typedef StatisticalStudyPlan_sequence::const_iterator StatisticalStudyPlan_const_iterator;
      typedef ::xsd::cxx::tree::traits< StatisticalStudyPlan_type, char > StatisticalStudyPlan_traits;

      const StatisticalStudyPlan_sequence&
      StatisticalStudyPlan () const;

      StatisticalStudyPlan_sequence&
      StatisticalStudyPlan ();

      void
      StatisticalStudyPlan (const StatisticalStudyPlan_sequence& s);

      // Constructors.
      //
      StatisticalStudyPlansType ();

      StatisticalStudyPlansType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      StatisticalStudyPlansType (const StatisticalStudyPlansType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual StatisticalStudyPlansType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatisticalStudyPlansType&
      operator= (const StatisticalStudyPlansType& x);

      virtual 
      ~StatisticalStudyPlansType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      StatisticalStudyPlan_sequence StatisticalStudyPlan_;
    };

    class StatisticalStudiesResultsType: public ::xml_schema::type
    {
      public:
      // StatisticalStudyResults
      //
      typedef ::xsd::qif2::StatisticalStudyResultsBaseType StatisticalStudyResults_type;
      typedef ::xsd::cxx::tree::sequence< StatisticalStudyResults_type > StatisticalStudyResults_sequence;
      typedef StatisticalStudyResults_sequence::iterator StatisticalStudyResults_iterator;
      typedef StatisticalStudyResults_sequence::const_iterator StatisticalStudyResults_const_iterator;
      typedef ::xsd::cxx::tree::traits< StatisticalStudyResults_type, char > StatisticalStudyResults_traits;

      const StatisticalStudyResults_sequence&
      StatisticalStudyResults () const;

      StatisticalStudyResults_sequence&
      StatisticalStudyResults ();

      void
      StatisticalStudyResults (const StatisticalStudyResults_sequence& s);

      // Constructors.
      //
      StatisticalStudiesResultsType ();

      StatisticalStudiesResultsType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      StatisticalStudiesResultsType (const StatisticalStudiesResultsType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual StatisticalStudiesResultsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatisticalStudiesResultsType&
      operator= (const StatisticalStudiesResultsType& x);

      virtual 
      ~StatisticalStudiesResultsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      StatisticalStudyResults_sequence StatisticalStudyResults_;
    };

    class CorrectiveActionPlanType: public ::xml_schema::type
    {
      public:
      // AssignableCauses
      //
      typedef ::xsd::qif2::AssignableCausesType AssignableCauses_type;
      typedef ::xsd::cxx::tree::traits< AssignableCauses_type, char > AssignableCauses_traits;

      const AssignableCauses_type&
      AssignableCauses () const;

      AssignableCauses_type&
      AssignableCauses ();

      void
      AssignableCauses (const AssignableCauses_type& x);

      void
      AssignableCauses (::std::auto_ptr< AssignableCauses_type > p);

      // CorrectiveActions
      //
      typedef ::xsd::qif2::CorrectiveActionsType CorrectiveActions_type;
      typedef ::xsd::cxx::tree::traits< CorrectiveActions_type, char > CorrectiveActions_traits;

      const CorrectiveActions_type&
      CorrectiveActions () const;

      CorrectiveActions_type&
      CorrectiveActions ();

      void
      CorrectiveActions (const CorrectiveActions_type& x);

      void
      CorrectiveActions (::std::auto_ptr< CorrectiveActions_type > p);

      // id
      //
      typedef ::xsd::qif2::QIFIdType id_type;
      typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

      const id_type&
      id () const;

      id_type&
      id ();

      void
      id (const id_type& x);

      void
      id (::std::auto_ptr< id_type > p);

      // Constructors.
      //
      CorrectiveActionPlanType (const AssignableCauses_type&,
                                const CorrectiveActions_type&,
                                const id_type&);

      CorrectiveActionPlanType (::std::auto_ptr< AssignableCauses_type >,
                                ::std::auto_ptr< CorrectiveActions_type >,
                                const id_type&);

      CorrectiveActionPlanType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      CorrectiveActionPlanType (const CorrectiveActionPlanType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual CorrectiveActionPlanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CorrectiveActionPlanType&
      operator= (const CorrectiveActionPlanType& x);

      virtual 
      ~CorrectiveActionPlanType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< AssignableCauses_type > AssignableCauses_;
      ::xsd::cxx::tree::one< CorrectiveActions_type > CorrectiveActions_;
      ::xsd::cxx::tree::one< id_type > id_;
    };

    class CorrectiveActionPlansType: public ::xml_schema::type
    {
      public:
      // CorrectiveActionPlan
      //
      typedef ::xsd::qif2::CorrectiveActionPlanType CorrectiveActionPlan_type;
      typedef ::xsd::cxx::tree::sequence< CorrectiveActionPlan_type > CorrectiveActionPlan_sequence;
      typedef CorrectiveActionPlan_sequence::iterator CorrectiveActionPlan_iterator;
      typedef CorrectiveActionPlan_sequence::const_iterator CorrectiveActionPlan_const_iterator;
      typedef ::xsd::cxx::tree::traits< CorrectiveActionPlan_type, char > CorrectiveActionPlan_traits;

      const CorrectiveActionPlan_sequence&
      CorrectiveActionPlan () const;

      CorrectiveActionPlan_sequence&
      CorrectiveActionPlan ();

      void
      CorrectiveActionPlan (const CorrectiveActionPlan_sequence& s);

      // Constructors.
      //
      CorrectiveActionPlansType ();

      CorrectiveActionPlansType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      CorrectiveActionPlansType (const CorrectiveActionPlansType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual CorrectiveActionPlansType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CorrectiveActionPlansType&
      operator= (const CorrectiveActionPlansType& x);

      virtual 
      ~CorrectiveActionPlansType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      CorrectiveActionPlan_sequence CorrectiveActionPlan_;
    };

    class StatisticsType: public ::xml_schema::type
    {
      public:
      // Version
      //
      typedef ::xsd::qif2::VersionType Version_type;
      typedef ::xsd::cxx::tree::optional< Version_type > Version_optional;
      typedef ::xsd::cxx::tree::traits< Version_type, char > Version_traits;

      const Version_optional&
      Version () const;

      Version_optional&
      Version ();

      void
      Version (const Version_type& x);

      void
      Version (const Version_optional& x);

      void
      Version (::std::auto_ptr< Version_type > p);

      // StatisticalStudyPlans
      //
      typedef ::xsd::qif2::StatisticalStudyPlansType StatisticalStudyPlans_type;
      typedef ::xsd::cxx::tree::optional< StatisticalStudyPlans_type > StatisticalStudyPlans_optional;
      typedef ::xsd::cxx::tree::traits< StatisticalStudyPlans_type, char > StatisticalStudyPlans_traits;

      const StatisticalStudyPlans_optional&
      StatisticalStudyPlans () const;

      StatisticalStudyPlans_optional&
      StatisticalStudyPlans ();

      void
      StatisticalStudyPlans (const StatisticalStudyPlans_type& x);

      void
      StatisticalStudyPlans (const StatisticalStudyPlans_optional& x);

      void
      StatisticalStudyPlans (::std::auto_ptr< StatisticalStudyPlans_type > p);

      // StatisticalStudiesResults
      //
      typedef ::xsd::qif2::StatisticalStudiesResultsType StatisticalStudiesResults_type;
      typedef ::xsd::cxx::tree::optional< StatisticalStudiesResults_type > StatisticalStudiesResults_optional;
      typedef ::xsd::cxx::tree::traits< StatisticalStudiesResults_type, char > StatisticalStudiesResults_traits;

      const StatisticalStudiesResults_optional&
      StatisticalStudiesResults () const;

      StatisticalStudiesResults_optional&
      StatisticalStudiesResults ();

      void
      StatisticalStudiesResults (const StatisticalStudiesResults_type& x);

      void
      StatisticalStudiesResults (const StatisticalStudiesResults_optional& x);

      void
      StatisticalStudiesResults (::std::auto_ptr< StatisticalStudiesResults_type > p);

      // CorrectiveActionPlans
      //
      typedef ::xsd::qif2::CorrectiveActionPlansType CorrectiveActionPlans_type;
      typedef ::xsd::cxx::tree::optional< CorrectiveActionPlans_type > CorrectiveActionPlans_optional;
      typedef ::xsd::cxx::tree::traits< CorrectiveActionPlans_type, char > CorrectiveActionPlans_traits;

      const CorrectiveActionPlans_optional&
      CorrectiveActionPlans () const;

      CorrectiveActionPlans_optional&
      CorrectiveActionPlans ();

      void
      CorrectiveActionPlans (const CorrectiveActionPlans_type& x);

      void
      CorrectiveActionPlans (const CorrectiveActionPlans_optional& x);

      void
      CorrectiveActionPlans (::std::auto_ptr< CorrectiveActionPlans_type > p);

      // Constructors.
      //
      StatisticsType ();

      StatisticsType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      StatisticsType (const StatisticsType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual StatisticsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      StatisticsType&
      operator= (const StatisticsType& x);

      virtual 
      ~StatisticsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Version_optional Version_;
      StatisticalStudyPlans_optional StatisticalStudyPlans_;
      StatisticalStudiesResults_optional StatisticalStudiesResults_;
      CorrectiveActionPlans_optional CorrectiveActionPlans_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xsd
{
  namespace qif2
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (const ::std::string& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (const ::std::string& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (::xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (::xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (const ::std::string& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (const ::std::string& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (::xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (::xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xsd
{
  namespace qif2
  {
    void
    operator<< (::xercesc::DOMElement&, const StatisticalStudyPlanBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const LinearityStudyPlanType&);

    void
    operator<< (::xercesc::DOMElement&, const StabilityStudyPlanType&);

    void
    operator<< (::xercesc::DOMElement&, const MultipleProductInstanceStudyPlanBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const BiasStudyPlanType&);

    void
    operator<< (::xercesc::DOMElement&, const FirstArticleStudyPlanType&);

    void
    operator<< (::xercesc::DOMElement&, const ProcessDifferenceStudyPlanType&);

    void
    operator<< (::xercesc::DOMElement&, const SimpleStudyPlanType&);

    void
    operator<< (::xercesc::DOMElement&, const CapabilityStudyPlanType&);

    void
    operator<< (::xercesc::DOMElement&, const GageRandRStudyEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const GageRandRStudyEnumType&);

    void
    operator<< (::xml_schema::list_stream&,
                const GageRandRStudyEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const GageRandRStudyPlanType&);

    void
    operator<< (::xercesc::DOMElement&, const ControlMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const ProductionStudyPlanType&);

    // Serialize to std::ostream.
    //

    void
    StatisticalStudyPlan (::std::ostream& os,
                          const ::xsd::qif2::StatisticalStudyPlanBaseType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    StatisticalStudyPlan (::std::ostream& os,
                          const ::xsd::qif2::StatisticalStudyPlanBaseType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    StatisticalStudyPlan (::std::ostream& os,
                          const ::xsd::qif2::StatisticalStudyPlanBaseType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    StatisticalStudyPlan (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::StatisticalStudyPlanBaseType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    StatisticalStudyPlan (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::StatisticalStudyPlanBaseType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    void
    StatisticalStudyPlan (::xercesc::XMLFormatTarget& ft,
                          const ::xsd::qif2::StatisticalStudyPlanBaseType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    StatisticalStudyPlan (::xercesc::DOMDocument& d,
                          const ::xsd::qif2::StatisticalStudyPlanBaseType& x,
                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    StatisticalStudyPlan (const ::xsd::qif2::StatisticalStudyPlanBaseType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FirstArticleStudyPlan (::std::ostream& os,
                           const ::xsd::qif2::FirstArticleStudyPlanType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    FirstArticleStudyPlan (::std::ostream& os,
                           const ::xsd::qif2::FirstArticleStudyPlanType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    FirstArticleStudyPlan (::std::ostream& os,
                           const ::xsd::qif2::FirstArticleStudyPlanType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FirstArticleStudyPlan (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::FirstArticleStudyPlanType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    FirstArticleStudyPlan (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::FirstArticleStudyPlanType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    FirstArticleStudyPlan (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::FirstArticleStudyPlanType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FirstArticleStudyPlan (::xercesc::DOMDocument& d,
                           const ::xsd::qif2::FirstArticleStudyPlanType& x,
                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FirstArticleStudyPlan (const ::xsd::qif2::FirstArticleStudyPlanType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LinearityStudyPlan (::std::ostream& os,
                        const ::xsd::qif2::LinearityStudyPlanType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    LinearityStudyPlan (::std::ostream& os,
                        const ::xsd::qif2::LinearityStudyPlanType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    LinearityStudyPlan (::std::ostream& os,
                        const ::xsd::qif2::LinearityStudyPlanType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LinearityStudyPlan (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::LinearityStudyPlanType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    LinearityStudyPlan (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::LinearityStudyPlanType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    LinearityStudyPlan (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::LinearityStudyPlanType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LinearityStudyPlan (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::LinearityStudyPlanType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LinearityStudyPlan (const ::xsd::qif2::LinearityStudyPlanType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SimpleStudyPlan (::std::ostream& os,
                     const ::xsd::qif2::SimpleStudyPlanType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    SimpleStudyPlan (::std::ostream& os,
                     const ::xsd::qif2::SimpleStudyPlanType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    SimpleStudyPlan (::std::ostream& os,
                     const ::xsd::qif2::SimpleStudyPlanType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SimpleStudyPlan (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::SimpleStudyPlanType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    SimpleStudyPlan (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::SimpleStudyPlanType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    void
    SimpleStudyPlan (::xercesc::XMLFormatTarget& ft,
                     const ::xsd::qif2::SimpleStudyPlanType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SimpleStudyPlan (::xercesc::DOMDocument& d,
                     const ::xsd::qif2::SimpleStudyPlanType& x,
                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SimpleStudyPlan (const ::xsd::qif2::SimpleStudyPlanType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    BiasStudyPlan (::std::ostream& os,
                   const ::xsd::qif2::BiasStudyPlanType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    BiasStudyPlan (::std::ostream& os,
                   const ::xsd::qif2::BiasStudyPlanType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    BiasStudyPlan (::std::ostream& os,
                   const ::xsd::qif2::BiasStudyPlanType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    BiasStudyPlan (::xercesc::XMLFormatTarget& ft,
                   const ::xsd::qif2::BiasStudyPlanType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    BiasStudyPlan (::xercesc::XMLFormatTarget& ft,
                   const ::xsd::qif2::BiasStudyPlanType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    void
    BiasStudyPlan (::xercesc::XMLFormatTarget& ft,
                   const ::xsd::qif2::BiasStudyPlanType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    BiasStudyPlan (::xercesc::DOMDocument& d,
                   const ::xsd::qif2::BiasStudyPlanType& x,
                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    BiasStudyPlan (const ::xsd::qif2::BiasStudyPlanType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    StabilityStudyPlan (::std::ostream& os,
                        const ::xsd::qif2::StabilityStudyPlanType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    StabilityStudyPlan (::std::ostream& os,
                        const ::xsd::qif2::StabilityStudyPlanType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    StabilityStudyPlan (::std::ostream& os,
                        const ::xsd::qif2::StabilityStudyPlanType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    StabilityStudyPlan (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::StabilityStudyPlanType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    StabilityStudyPlan (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::StabilityStudyPlanType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    StabilityStudyPlan (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::StabilityStudyPlanType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    StabilityStudyPlan (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::StabilityStudyPlanType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    StabilityStudyPlan (const ::xsd::qif2::StabilityStudyPlanType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ProcessDifferenceStudyPlan (::std::ostream& os,
                                const ::xsd::qif2::ProcessDifferenceStudyPlanType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ProcessDifferenceStudyPlan (::std::ostream& os,
                                const ::xsd::qif2::ProcessDifferenceStudyPlanType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ProcessDifferenceStudyPlan (::std::ostream& os,
                                const ::xsd::qif2::ProcessDifferenceStudyPlanType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ProcessDifferenceStudyPlan (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::ProcessDifferenceStudyPlanType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ProcessDifferenceStudyPlan (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::ProcessDifferenceStudyPlanType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    void
    ProcessDifferenceStudyPlan (::xercesc::XMLFormatTarget& ft,
                                const ::xsd::qif2::ProcessDifferenceStudyPlanType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ProcessDifferenceStudyPlan (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::ProcessDifferenceStudyPlanType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ProcessDifferenceStudyPlan (const ::xsd::qif2::ProcessDifferenceStudyPlanType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CapabilityStudyPlan (::std::ostream& os,
                         const ::xsd::qif2::CapabilityStudyPlanType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CapabilityStudyPlan (::std::ostream& os,
                         const ::xsd::qif2::CapabilityStudyPlanType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CapabilityStudyPlan (::std::ostream& os,
                         const ::xsd::qif2::CapabilityStudyPlanType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CapabilityStudyPlan (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::CapabilityStudyPlanType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CapabilityStudyPlan (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::CapabilityStudyPlanType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    CapabilityStudyPlan (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::CapabilityStudyPlanType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CapabilityStudyPlan (::xercesc::DOMDocument& d,
                         const ::xsd::qif2::CapabilityStudyPlanType& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CapabilityStudyPlan (const ::xsd::qif2::CapabilityStudyPlanType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    GageRandRStudyPlan (::std::ostream& os,
                        const ::xsd::qif2::GageRandRStudyPlanType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    GageRandRStudyPlan (::std::ostream& os,
                        const ::xsd::qif2::GageRandRStudyPlanType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    GageRandRStudyPlan (::std::ostream& os,
                        const ::xsd::qif2::GageRandRStudyPlanType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    GageRandRStudyPlan (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::GageRandRStudyPlanType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    GageRandRStudyPlan (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::GageRandRStudyPlanType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    GageRandRStudyPlan (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::GageRandRStudyPlanType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    GageRandRStudyPlan (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::GageRandRStudyPlanType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    GageRandRStudyPlan (const ::xsd::qif2::GageRandRStudyPlanType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ProductionStudyPlan (::std::ostream& os,
                         const ::xsd::qif2::ProductionStudyPlanType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    ProductionStudyPlan (::std::ostream& os,
                         const ::xsd::qif2::ProductionStudyPlanType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    ProductionStudyPlan (::std::ostream& os,
                         const ::xsd::qif2::ProductionStudyPlanType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ProductionStudyPlan (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::ProductionStudyPlanType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    ProductionStudyPlan (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::ProductionStudyPlanType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    void
    ProductionStudyPlan (::xercesc::XMLFormatTarget& ft,
                         const ::xsd::qif2::ProductionStudyPlanType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ProductionStudyPlan (::xercesc::DOMDocument& d,
                         const ::xsd::qif2::ProductionStudyPlanType& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ProductionStudyPlan (const ::xsd::qif2::ProductionStudyPlanType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const StatisticalStudyResultsBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const LinearityStudyResultsType&);

    void
    operator<< (::xercesc::DOMElement&, const StabilityStudyResultsType&);

    void
    operator<< (::xercesc::DOMElement&, const BiasStudyResultsType&);

    void
    operator<< (::xercesc::DOMElement&, const FirstArticleStudyResultsType&);

    void
    operator<< (::xercesc::DOMElement&, const ProcessDifferenceStudyResultsType&);

    void
    operator<< (::xercesc::DOMElement&, const MultipleProductInstanceStudyResultsBaseType&);

    void
    operator<< (::xercesc::DOMElement&, const SimpleStudyResultsType&);

    void
    operator<< (::xercesc::DOMElement&, const CapabilityStudyResultsType&);

    void
    operator<< (::xercesc::DOMElement&, const GageRandRStudyResultsType&);

    void
    operator<< (::xercesc::DOMElement&, const ProductionStudyResultsType&);

    // Serialize to std::ostream.
    //

    void
    StatisticalStudyResults (::std::ostream& os,
                             const ::xsd::qif2::StatisticalStudyResultsBaseType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    StatisticalStudyResults (::std::ostream& os,
                             const ::xsd::qif2::StatisticalStudyResultsBaseType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    StatisticalStudyResults (::std::ostream& os,
                             const ::xsd::qif2::StatisticalStudyResultsBaseType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    StatisticalStudyResults (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::StatisticalStudyResultsBaseType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    StatisticalStudyResults (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::StatisticalStudyResultsBaseType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    void
    StatisticalStudyResults (::xercesc::XMLFormatTarget& ft,
                             const ::xsd::qif2::StatisticalStudyResultsBaseType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    StatisticalStudyResults (::xercesc::DOMDocument& d,
                             const ::xsd::qif2::StatisticalStudyResultsBaseType& x,
                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    StatisticalStudyResults (const ::xsd::qif2::StatisticalStudyResultsBaseType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FirstArticleStudyResults (::std::ostream& os,
                              const ::xsd::qif2::FirstArticleStudyResultsType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    FirstArticleStudyResults (::std::ostream& os,
                              const ::xsd::qif2::FirstArticleStudyResultsType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    FirstArticleStudyResults (::std::ostream& os,
                              const ::xsd::qif2::FirstArticleStudyResultsType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FirstArticleStudyResults (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::FirstArticleStudyResultsType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    FirstArticleStudyResults (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::FirstArticleStudyResultsType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    void
    FirstArticleStudyResults (::xercesc::XMLFormatTarget& ft,
                              const ::xsd::qif2::FirstArticleStudyResultsType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FirstArticleStudyResults (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::FirstArticleStudyResultsType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FirstArticleStudyResults (const ::xsd::qif2::FirstArticleStudyResultsType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LinearityStudyResults (::std::ostream& os,
                           const ::xsd::qif2::LinearityStudyResultsType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    LinearityStudyResults (::std::ostream& os,
                           const ::xsd::qif2::LinearityStudyResultsType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    LinearityStudyResults (::std::ostream& os,
                           const ::xsd::qif2::LinearityStudyResultsType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LinearityStudyResults (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::LinearityStudyResultsType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    LinearityStudyResults (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::LinearityStudyResultsType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    LinearityStudyResults (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::LinearityStudyResultsType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LinearityStudyResults (::xercesc::DOMDocument& d,
                           const ::xsd::qif2::LinearityStudyResultsType& x,
                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LinearityStudyResults (const ::xsd::qif2::LinearityStudyResultsType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SimpleStudyResults (::std::ostream& os,
                        const ::xsd::qif2::SimpleStudyResultsType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    SimpleStudyResults (::std::ostream& os,
                        const ::xsd::qif2::SimpleStudyResultsType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    SimpleStudyResults (::std::ostream& os,
                        const ::xsd::qif2::SimpleStudyResultsType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SimpleStudyResults (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::SimpleStudyResultsType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    SimpleStudyResults (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::SimpleStudyResultsType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    void
    SimpleStudyResults (::xercesc::XMLFormatTarget& ft,
                        const ::xsd::qif2::SimpleStudyResultsType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SimpleStudyResults (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::SimpleStudyResultsType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SimpleStudyResults (const ::xsd::qif2::SimpleStudyResultsType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    BiasStudyResults (::std::ostream& os,
                      const ::xsd::qif2::BiasStudyResultsType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    BiasStudyResults (::std::ostream& os,
                      const ::xsd::qif2::BiasStudyResultsType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    BiasStudyResults (::std::ostream& os,
                      const ::xsd::qif2::BiasStudyResultsType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    BiasStudyResults (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::BiasStudyResultsType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    BiasStudyResults (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::BiasStudyResultsType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    void
    BiasStudyResults (::xercesc::XMLFormatTarget& ft,
                      const ::xsd::qif2::BiasStudyResultsType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    BiasStudyResults (::xercesc::DOMDocument& d,
                      const ::xsd::qif2::BiasStudyResultsType& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    BiasStudyResults (const ::xsd::qif2::BiasStudyResultsType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    StabilityStudyResults (::std::ostream& os,
                           const ::xsd::qif2::StabilityStudyResultsType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    StabilityStudyResults (::std::ostream& os,
                           const ::xsd::qif2::StabilityStudyResultsType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    StabilityStudyResults (::std::ostream& os,
                           const ::xsd::qif2::StabilityStudyResultsType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    StabilityStudyResults (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::StabilityStudyResultsType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    StabilityStudyResults (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::StabilityStudyResultsType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    StabilityStudyResults (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::StabilityStudyResultsType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    StabilityStudyResults (::xercesc::DOMDocument& d,
                           const ::xsd::qif2::StabilityStudyResultsType& x,
                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    StabilityStudyResults (const ::xsd::qif2::StabilityStudyResultsType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    CapabilityStudyResults (::std::ostream& os,
                            const ::xsd::qif2::CapabilityStudyResultsType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    CapabilityStudyResults (::std::ostream& os,
                            const ::xsd::qif2::CapabilityStudyResultsType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    CapabilityStudyResults (::std::ostream& os,
                            const ::xsd::qif2::CapabilityStudyResultsType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CapabilityStudyResults (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::CapabilityStudyResultsType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    CapabilityStudyResults (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::CapabilityStudyResultsType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    CapabilityStudyResults (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::CapabilityStudyResultsType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CapabilityStudyResults (::xercesc::DOMDocument& d,
                            const ::xsd::qif2::CapabilityStudyResultsType& x,
                            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CapabilityStudyResults (const ::xsd::qif2::CapabilityStudyResultsType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ProcessDifferenceStudyResults (::std::ostream& os,
                                   const ::xsd::qif2::ProcessDifferenceStudyResultsType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ProcessDifferenceStudyResults (::std::ostream& os,
                                   const ::xsd::qif2::ProcessDifferenceStudyResultsType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ProcessDifferenceStudyResults (::std::ostream& os,
                                   const ::xsd::qif2::ProcessDifferenceStudyResultsType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ProcessDifferenceStudyResults (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::ProcessDifferenceStudyResultsType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ProcessDifferenceStudyResults (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::ProcessDifferenceStudyResultsType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ProcessDifferenceStudyResults (::xercesc::XMLFormatTarget& ft,
                                   const ::xsd::qif2::ProcessDifferenceStudyResultsType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ProcessDifferenceStudyResults (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::ProcessDifferenceStudyResultsType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ProcessDifferenceStudyResults (const ::xsd::qif2::ProcessDifferenceStudyResultsType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    GageRandRStudyResults (::std::ostream& os,
                           const ::xsd::qif2::GageRandRStudyResultsType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    GageRandRStudyResults (::std::ostream& os,
                           const ::xsd::qif2::GageRandRStudyResultsType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    GageRandRStudyResults (::std::ostream& os,
                           const ::xsd::qif2::GageRandRStudyResultsType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    GageRandRStudyResults (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::GageRandRStudyResultsType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    GageRandRStudyResults (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::GageRandRStudyResultsType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    void
    GageRandRStudyResults (::xercesc::XMLFormatTarget& ft,
                           const ::xsd::qif2::GageRandRStudyResultsType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    GageRandRStudyResults (::xercesc::DOMDocument& d,
                           const ::xsd::qif2::GageRandRStudyResultsType& x,
                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    GageRandRStudyResults (const ::xsd::qif2::GageRandRStudyResultsType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ProductionStudyResults (::std::ostream& os,
                            const ::xsd::qif2::ProductionStudyResultsType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    ProductionStudyResults (::std::ostream& os,
                            const ::xsd::qif2::ProductionStudyResultsType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    ProductionStudyResults (::std::ostream& os,
                            const ::xsd::qif2::ProductionStudyResultsType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ProductionStudyResults (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::ProductionStudyResultsType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    ProductionStudyResults (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::ProductionStudyResultsType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    void
    ProductionStudyResults (::xercesc::XMLFormatTarget& ft,
                            const ::xsd::qif2::ProductionStudyResultsType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ProductionStudyResults (::xercesc::DOMDocument& d,
                            const ::xsd::qif2::ProductionStudyResultsType& x,
                            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ProductionStudyResults (const ::xsd::qif2::ProductionStudyResultsType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const StatisticalStudyPlansType&);

    void
    operator<< (::xercesc::DOMElement&, const StatisticalStudiesResultsType&);

    void
    operator<< (::xercesc::DOMElement&, const CorrectiveActionPlanType&);

    void
    operator<< (::xercesc::DOMElement&, const CorrectiveActionPlansType&);

    void
    operator<< (::xercesc::DOMElement&, const StatisticsType&);

    // Serialize to std::ostream.
    //

    void
    Statistics (::std::ostream& os,
                const ::xsd::qif2::StatisticsType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

    void
    Statistics (::std::ostream& os,
                const ::xsd::qif2::StatisticsType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

    void
    Statistics (::std::ostream& os,
                const ::xsd::qif2::StatisticsType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Statistics (::xercesc::XMLFormatTarget& ft,
                const ::xsd::qif2::StatisticsType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

    void
    Statistics (::xercesc::XMLFormatTarget& ft,
                const ::xsd::qif2::StatisticsType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

    void
    Statistics (::xercesc::XMLFormatTarget& ft,
                const ::xsd::qif2::StatisticsType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Statistics (::xercesc::DOMDocument& d,
                const ::xsd::qif2::StatisticsType& x,
                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Statistics (const ::xsd::qif2::StatisticsType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // QIFSTATISTICS_HXX

// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "QIFStatistics.hxx"

namespace xsd
{
  namespace qif2
  {
    // StatisticalStudyPlanBaseType
    // 

    const StatisticalStudyPlanBaseType::Attributes_optional& StatisticalStudyPlanBaseType::
    Attributes () const
    {
      return this->Attributes_;
    }

    StatisticalStudyPlanBaseType::Attributes_optional& StatisticalStudyPlanBaseType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void StatisticalStudyPlanBaseType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void StatisticalStudyPlanBaseType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void StatisticalStudyPlanBaseType::
    Attributes (::std::auto_ptr< Attributes_type > x)
    {
      this->Attributes_.set (x);
    }

    const StatisticalStudyPlanBaseType::ThisStatisticalStudyPlanInstanceQPId_optional& StatisticalStudyPlanBaseType::
    ThisStatisticalStudyPlanInstanceQPId () const
    {
      return this->ThisStatisticalStudyPlanInstanceQPId_;
    }

    StatisticalStudyPlanBaseType::ThisStatisticalStudyPlanInstanceQPId_optional& StatisticalStudyPlanBaseType::
    ThisStatisticalStudyPlanInstanceQPId ()
    {
      return this->ThisStatisticalStudyPlanInstanceQPId_;
    }

    void StatisticalStudyPlanBaseType::
    ThisStatisticalStudyPlanInstanceQPId (const ThisStatisticalStudyPlanInstanceQPId_type& x)
    {
      this->ThisStatisticalStudyPlanInstanceQPId_.set (x);
    }

    void StatisticalStudyPlanBaseType::
    ThisStatisticalStudyPlanInstanceQPId (const ThisStatisticalStudyPlanInstanceQPId_optional& x)
    {
      this->ThisStatisticalStudyPlanInstanceQPId_ = x;
    }

    void StatisticalStudyPlanBaseType::
    ThisStatisticalStudyPlanInstanceQPId (::std::auto_ptr< ThisStatisticalStudyPlanInstanceQPId_type > x)
    {
      this->ThisStatisticalStudyPlanInstanceQPId_.set (x);
    }

    const StatisticalStudyPlanBaseType::FeatureItemIds_optional& StatisticalStudyPlanBaseType::
    FeatureItemIds () const
    {
      return this->FeatureItemIds_;
    }

    StatisticalStudyPlanBaseType::FeatureItemIds_optional& StatisticalStudyPlanBaseType::
    FeatureItemIds ()
    {
      return this->FeatureItemIds_;
    }

    void StatisticalStudyPlanBaseType::
    FeatureItemIds (const FeatureItemIds_type& x)
    {
      this->FeatureItemIds_.set (x);
    }

    void StatisticalStudyPlanBaseType::
    FeatureItemIds (const FeatureItemIds_optional& x)
    {
      this->FeatureItemIds_ = x;
    }

    void StatisticalStudyPlanBaseType::
    FeatureItemIds (::std::auto_ptr< FeatureItemIds_type > x)
    {
      this->FeatureItemIds_.set (x);
    }

    const StatisticalStudyPlanBaseType::CalculateAverageFeatures_optional& StatisticalStudyPlanBaseType::
    CalculateAverageFeatures () const
    {
      return this->CalculateAverageFeatures_;
    }

    StatisticalStudyPlanBaseType::CalculateAverageFeatures_optional& StatisticalStudyPlanBaseType::
    CalculateAverageFeatures ()
    {
      return this->CalculateAverageFeatures_;
    }

    void StatisticalStudyPlanBaseType::
    CalculateAverageFeatures (const CalculateAverageFeatures_type& x)
    {
      this->CalculateAverageFeatures_.set (x);
    }

    void StatisticalStudyPlanBaseType::
    CalculateAverageFeatures (const CalculateAverageFeatures_optional& x)
    {
      this->CalculateAverageFeatures_ = x;
    }

    const StatisticalStudyPlanBaseType::CharacteristicItemIds_optional& StatisticalStudyPlanBaseType::
    CharacteristicItemIds () const
    {
      return this->CharacteristicItemIds_;
    }

    StatisticalStudyPlanBaseType::CharacteristicItemIds_optional& StatisticalStudyPlanBaseType::
    CharacteristicItemIds ()
    {
      return this->CharacteristicItemIds_;
    }

    void StatisticalStudyPlanBaseType::
    CharacteristicItemIds (const CharacteristicItemIds_type& x)
    {
      this->CharacteristicItemIds_.set (x);
    }

    void StatisticalStudyPlanBaseType::
    CharacteristicItemIds (const CharacteristicItemIds_optional& x)
    {
      this->CharacteristicItemIds_ = x;
    }

    void StatisticalStudyPlanBaseType::
    CharacteristicItemIds (::std::auto_ptr< CharacteristicItemIds_type > x)
    {
      this->CharacteristicItemIds_.set (x);
    }

    const StatisticalStudyPlanBaseType::StatsValuesPerChar_optional& StatisticalStudyPlanBaseType::
    StatsValuesPerChar () const
    {
      return this->StatsValuesPerChar_;
    }

    StatisticalStudyPlanBaseType::StatsValuesPerChar_optional& StatisticalStudyPlanBaseType::
    StatsValuesPerChar ()
    {
      return this->StatsValuesPerChar_;
    }

    void StatisticalStudyPlanBaseType::
    StatsValuesPerChar (const StatsValuesPerChar_type& x)
    {
      this->StatsValuesPerChar_.set (x);
    }

    void StatisticalStudyPlanBaseType::
    StatsValuesPerChar (const StatsValuesPerChar_optional& x)
    {
      this->StatsValuesPerChar_ = x;
    }

    void StatisticalStudyPlanBaseType::
    StatsValuesPerChar (::std::auto_ptr< StatsValuesPerChar_type > x)
    {
      this->StatsValuesPerChar_.set (x);
    }

    const StatisticalStudyPlanBaseType::StatsValuesPerSubgroup_optional& StatisticalStudyPlanBaseType::
    StatsValuesPerSubgroup () const
    {
      return this->StatsValuesPerSubgroup_;
    }

    StatisticalStudyPlanBaseType::StatsValuesPerSubgroup_optional& StatisticalStudyPlanBaseType::
    StatsValuesPerSubgroup ()
    {
      return this->StatsValuesPerSubgroup_;
    }

    void StatisticalStudyPlanBaseType::
    StatsValuesPerSubgroup (const StatsValuesPerSubgroup_type& x)
    {
      this->StatsValuesPerSubgroup_.set (x);
    }

    void StatisticalStudyPlanBaseType::
    StatsValuesPerSubgroup (const StatsValuesPerSubgroup_optional& x)
    {
      this->StatsValuesPerSubgroup_ = x;
    }

    void StatisticalStudyPlanBaseType::
    StatsValuesPerSubgroup (::std::auto_ptr< StatsValuesPerSubgroup_type > x)
    {
      this->StatsValuesPerSubgroup_.set (x);
    }

    const StatisticalStudyPlanBaseType::StatsValuesSummary_sequence& StatisticalStudyPlanBaseType::
    StatsValuesSummary () const
    {
      return this->StatsValuesSummary_;
    }

    StatisticalStudyPlanBaseType::StatsValuesSummary_sequence& StatisticalStudyPlanBaseType::
    StatsValuesSummary ()
    {
      return this->StatsValuesSummary_;
    }

    void StatisticalStudyPlanBaseType::
    StatsValuesSummary (const StatsValuesSummary_sequence& s)
    {
      this->StatsValuesSummary_ = s;
    }

    const StatisticalStudyPlanBaseType::PreInspectionTraceability_optional& StatisticalStudyPlanBaseType::
    PreInspectionTraceability () const
    {
      return this->PreInspectionTraceability_;
    }

    StatisticalStudyPlanBaseType::PreInspectionTraceability_optional& StatisticalStudyPlanBaseType::
    PreInspectionTraceability ()
    {
      return this->PreInspectionTraceability_;
    }

    void StatisticalStudyPlanBaseType::
    PreInspectionTraceability (const PreInspectionTraceability_type& x)
    {
      this->PreInspectionTraceability_.set (x);
    }

    void StatisticalStudyPlanBaseType::
    PreInspectionTraceability (const PreInspectionTraceability_optional& x)
    {
      this->PreInspectionTraceability_ = x;
    }

    void StatisticalStudyPlanBaseType::
    PreInspectionTraceability (::std::auto_ptr< PreInspectionTraceability_type > x)
    {
      this->PreInspectionTraceability_.set (x);
    }

    const StatisticalStudyPlanBaseType::Name_optional& StatisticalStudyPlanBaseType::
    Name () const
    {
      return this->Name_;
    }

    StatisticalStudyPlanBaseType::Name_optional& StatisticalStudyPlanBaseType::
    Name ()
    {
      return this->Name_;
    }

    void StatisticalStudyPlanBaseType::
    Name (const Name_type& x)
    {
      this->Name_.set (x);
    }

    void StatisticalStudyPlanBaseType::
    Name (const Name_optional& x)
    {
      this->Name_ = x;
    }

    void StatisticalStudyPlanBaseType::
    Name (::std::auto_ptr< Name_type > x)
    {
      this->Name_.set (x);
    }

    const StatisticalStudyPlanBaseType::Description_optional& StatisticalStudyPlanBaseType::
    Description () const
    {
      return this->Description_;
    }

    StatisticalStudyPlanBaseType::Description_optional& StatisticalStudyPlanBaseType::
    Description ()
    {
      return this->Description_;
    }

    void StatisticalStudyPlanBaseType::
    Description (const Description_type& x)
    {
      this->Description_.set (x);
    }

    void StatisticalStudyPlanBaseType::
    Description (const Description_optional& x)
    {
      this->Description_ = x;
    }

    void StatisticalStudyPlanBaseType::
    Description (::std::auto_ptr< Description_type > x)
    {
      this->Description_.set (x);
    }

    const StatisticalStudyPlanBaseType::PlanId_optional& StatisticalStudyPlanBaseType::
    PlanId () const
    {
      return this->PlanId_;
    }

    StatisticalStudyPlanBaseType::PlanId_optional& StatisticalStudyPlanBaseType::
    PlanId ()
    {
      return this->PlanId_;
    }

    void StatisticalStudyPlanBaseType::
    PlanId (const PlanId_type& x)
    {
      this->PlanId_.set (x);
    }

    void StatisticalStudyPlanBaseType::
    PlanId (const PlanId_optional& x)
    {
      this->PlanId_ = x;
    }

    void StatisticalStudyPlanBaseType::
    PlanId (::std::auto_ptr< PlanId_type > x)
    {
      this->PlanId_.set (x);
    }

    const StatisticalStudyPlanBaseType::CorrectiveActionPlanId_optional& StatisticalStudyPlanBaseType::
    CorrectiveActionPlanId () const
    {
      return this->CorrectiveActionPlanId_;
    }

    StatisticalStudyPlanBaseType::CorrectiveActionPlanId_optional& StatisticalStudyPlanBaseType::
    CorrectiveActionPlanId ()
    {
      return this->CorrectiveActionPlanId_;
    }

    void StatisticalStudyPlanBaseType::
    CorrectiveActionPlanId (const CorrectiveActionPlanId_type& x)
    {
      this->CorrectiveActionPlanId_.set (x);
    }

    void StatisticalStudyPlanBaseType::
    CorrectiveActionPlanId (const CorrectiveActionPlanId_optional& x)
    {
      this->CorrectiveActionPlanId_ = x;
    }

    void StatisticalStudyPlanBaseType::
    CorrectiveActionPlanId (::std::auto_ptr< CorrectiveActionPlanId_type > x)
    {
      this->CorrectiveActionPlanId_.set (x);
    }

    const StatisticalStudyPlanBaseType::id_type& StatisticalStudyPlanBaseType::
    id () const
    {
      return this->id_.get ();
    }

    StatisticalStudyPlanBaseType::id_type& StatisticalStudyPlanBaseType::
    id ()
    {
      return this->id_.get ();
    }

    void StatisticalStudyPlanBaseType::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void StatisticalStudyPlanBaseType::
    id (::std::auto_ptr< id_type > x)
    {
      this->id_.set (x);
    }


    // LinearityStudyPlanType
    // 

    const LinearityStudyPlanType::MeasurementDeviceIds_optional& LinearityStudyPlanType::
    MeasurementDeviceIds () const
    {
      return this->MeasurementDeviceIds_;
    }

    LinearityStudyPlanType::MeasurementDeviceIds_optional& LinearityStudyPlanType::
    MeasurementDeviceIds ()
    {
      return this->MeasurementDeviceIds_;
    }

    void LinearityStudyPlanType::
    MeasurementDeviceIds (const MeasurementDeviceIds_type& x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    void LinearityStudyPlanType::
    MeasurementDeviceIds (const MeasurementDeviceIds_optional& x)
    {
      this->MeasurementDeviceIds_ = x;
    }

    void LinearityStudyPlanType::
    MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    const LinearityStudyPlanType::GoodnessOfFitThreshold_optional& LinearityStudyPlanType::
    GoodnessOfFitThreshold () const
    {
      return this->GoodnessOfFitThreshold_;
    }

    LinearityStudyPlanType::GoodnessOfFitThreshold_optional& LinearityStudyPlanType::
    GoodnessOfFitThreshold ()
    {
      return this->GoodnessOfFitThreshold_;
    }

    void LinearityStudyPlanType::
    GoodnessOfFitThreshold (const GoodnessOfFitThreshold_type& x)
    {
      this->GoodnessOfFitThreshold_.set (x);
    }

    void LinearityStudyPlanType::
    GoodnessOfFitThreshold (const GoodnessOfFitThreshold_optional& x)
    {
      this->GoodnessOfFitThreshold_ = x;
    }

    const LinearityStudyPlanType::LinearAbsoluteLinearityMinimum_optional& LinearityStudyPlanType::
    LinearAbsoluteLinearityMinimum () const
    {
      return this->LinearAbsoluteLinearityMinimum_;
    }

    LinearityStudyPlanType::LinearAbsoluteLinearityMinimum_optional& LinearityStudyPlanType::
    LinearAbsoluteLinearityMinimum ()
    {
      return this->LinearAbsoluteLinearityMinimum_;
    }

    void LinearityStudyPlanType::
    LinearAbsoluteLinearityMinimum (const LinearAbsoluteLinearityMinimum_type& x)
    {
      this->LinearAbsoluteLinearityMinimum_.set (x);
    }

    void LinearityStudyPlanType::
    LinearAbsoluteLinearityMinimum (const LinearAbsoluteLinearityMinimum_optional& x)
    {
      this->LinearAbsoluteLinearityMinimum_ = x;
    }

    void LinearityStudyPlanType::
    LinearAbsoluteLinearityMinimum (::std::auto_ptr< LinearAbsoluteLinearityMinimum_type > x)
    {
      this->LinearAbsoluteLinearityMinimum_.set (x);
    }

    const LinearityStudyPlanType::AngularAbsoluteLinearityMinimum_optional& LinearityStudyPlanType::
    AngularAbsoluteLinearityMinimum () const
    {
      return this->AngularAbsoluteLinearityMinimum_;
    }

    LinearityStudyPlanType::AngularAbsoluteLinearityMinimum_optional& LinearityStudyPlanType::
    AngularAbsoluteLinearityMinimum ()
    {
      return this->AngularAbsoluteLinearityMinimum_;
    }

    void LinearityStudyPlanType::
    AngularAbsoluteLinearityMinimum (const AngularAbsoluteLinearityMinimum_type& x)
    {
      this->AngularAbsoluteLinearityMinimum_.set (x);
    }

    void LinearityStudyPlanType::
    AngularAbsoluteLinearityMinimum (const AngularAbsoluteLinearityMinimum_optional& x)
    {
      this->AngularAbsoluteLinearityMinimum_ = x;
    }

    void LinearityStudyPlanType::
    AngularAbsoluteLinearityMinimum (::std::auto_ptr< AngularAbsoluteLinearityMinimum_type > x)
    {
      this->AngularAbsoluteLinearityMinimum_.set (x);
    }

    const LinearityStudyPlanType::AreaAbsoluteLinearityMinimum_optional& LinearityStudyPlanType::
    AreaAbsoluteLinearityMinimum () const
    {
      return this->AreaAbsoluteLinearityMinimum_;
    }

    LinearityStudyPlanType::AreaAbsoluteLinearityMinimum_optional& LinearityStudyPlanType::
    AreaAbsoluteLinearityMinimum ()
    {
      return this->AreaAbsoluteLinearityMinimum_;
    }

    void LinearityStudyPlanType::
    AreaAbsoluteLinearityMinimum (const AreaAbsoluteLinearityMinimum_type& x)
    {
      this->AreaAbsoluteLinearityMinimum_.set (x);
    }

    void LinearityStudyPlanType::
    AreaAbsoluteLinearityMinimum (const AreaAbsoluteLinearityMinimum_optional& x)
    {
      this->AreaAbsoluteLinearityMinimum_ = x;
    }

    void LinearityStudyPlanType::
    AreaAbsoluteLinearityMinimum (::std::auto_ptr< AreaAbsoluteLinearityMinimum_type > x)
    {
      this->AreaAbsoluteLinearityMinimum_.set (x);
    }

    const LinearityStudyPlanType::ForceAbsoluteLinearityMinimum_optional& LinearityStudyPlanType::
    ForceAbsoluteLinearityMinimum () const
    {
      return this->ForceAbsoluteLinearityMinimum_;
    }

    LinearityStudyPlanType::ForceAbsoluteLinearityMinimum_optional& LinearityStudyPlanType::
    ForceAbsoluteLinearityMinimum ()
    {
      return this->ForceAbsoluteLinearityMinimum_;
    }

    void LinearityStudyPlanType::
    ForceAbsoluteLinearityMinimum (const ForceAbsoluteLinearityMinimum_type& x)
    {
      this->ForceAbsoluteLinearityMinimum_.set (x);
    }

    void LinearityStudyPlanType::
    ForceAbsoluteLinearityMinimum (const ForceAbsoluteLinearityMinimum_optional& x)
    {
      this->ForceAbsoluteLinearityMinimum_ = x;
    }

    void LinearityStudyPlanType::
    ForceAbsoluteLinearityMinimum (::std::auto_ptr< ForceAbsoluteLinearityMinimum_type > x)
    {
      this->ForceAbsoluteLinearityMinimum_.set (x);
    }

    const LinearityStudyPlanType::MassAbsoluteLinearityMinimum_optional& LinearityStudyPlanType::
    MassAbsoluteLinearityMinimum () const
    {
      return this->MassAbsoluteLinearityMinimum_;
    }

    LinearityStudyPlanType::MassAbsoluteLinearityMinimum_optional& LinearityStudyPlanType::
    MassAbsoluteLinearityMinimum ()
    {
      return this->MassAbsoluteLinearityMinimum_;
    }

    void LinearityStudyPlanType::
    MassAbsoluteLinearityMinimum (const MassAbsoluteLinearityMinimum_type& x)
    {
      this->MassAbsoluteLinearityMinimum_.set (x);
    }

    void LinearityStudyPlanType::
    MassAbsoluteLinearityMinimum (const MassAbsoluteLinearityMinimum_optional& x)
    {
      this->MassAbsoluteLinearityMinimum_ = x;
    }

    void LinearityStudyPlanType::
    MassAbsoluteLinearityMinimum (::std::auto_ptr< MassAbsoluteLinearityMinimum_type > x)
    {
      this->MassAbsoluteLinearityMinimum_.set (x);
    }

    const LinearityStudyPlanType::PressureAbsoluteLinearityMinimum_optional& LinearityStudyPlanType::
    PressureAbsoluteLinearityMinimum () const
    {
      return this->PressureAbsoluteLinearityMinimum_;
    }

    LinearityStudyPlanType::PressureAbsoluteLinearityMinimum_optional& LinearityStudyPlanType::
    PressureAbsoluteLinearityMinimum ()
    {
      return this->PressureAbsoluteLinearityMinimum_;
    }

    void LinearityStudyPlanType::
    PressureAbsoluteLinearityMinimum (const PressureAbsoluteLinearityMinimum_type& x)
    {
      this->PressureAbsoluteLinearityMinimum_.set (x);
    }

    void LinearityStudyPlanType::
    PressureAbsoluteLinearityMinimum (const PressureAbsoluteLinearityMinimum_optional& x)
    {
      this->PressureAbsoluteLinearityMinimum_ = x;
    }

    void LinearityStudyPlanType::
    PressureAbsoluteLinearityMinimum (::std::auto_ptr< PressureAbsoluteLinearityMinimum_type > x)
    {
      this->PressureAbsoluteLinearityMinimum_.set (x);
    }

    const LinearityStudyPlanType::SpeedAbsoluteLinearityMinimum_optional& LinearityStudyPlanType::
    SpeedAbsoluteLinearityMinimum () const
    {
      return this->SpeedAbsoluteLinearityMinimum_;
    }

    LinearityStudyPlanType::SpeedAbsoluteLinearityMinimum_optional& LinearityStudyPlanType::
    SpeedAbsoluteLinearityMinimum ()
    {
      return this->SpeedAbsoluteLinearityMinimum_;
    }

    void LinearityStudyPlanType::
    SpeedAbsoluteLinearityMinimum (const SpeedAbsoluteLinearityMinimum_type& x)
    {
      this->SpeedAbsoluteLinearityMinimum_.set (x);
    }

    void LinearityStudyPlanType::
    SpeedAbsoluteLinearityMinimum (const SpeedAbsoluteLinearityMinimum_optional& x)
    {
      this->SpeedAbsoluteLinearityMinimum_ = x;
    }

    void LinearityStudyPlanType::
    SpeedAbsoluteLinearityMinimum (::std::auto_ptr< SpeedAbsoluteLinearityMinimum_type > x)
    {
      this->SpeedAbsoluteLinearityMinimum_.set (x);
    }

    const LinearityStudyPlanType::TemperatureAbsoluteLinearityMinimum_optional& LinearityStudyPlanType::
    TemperatureAbsoluteLinearityMinimum () const
    {
      return this->TemperatureAbsoluteLinearityMinimum_;
    }

    LinearityStudyPlanType::TemperatureAbsoluteLinearityMinimum_optional& LinearityStudyPlanType::
    TemperatureAbsoluteLinearityMinimum ()
    {
      return this->TemperatureAbsoluteLinearityMinimum_;
    }

    void LinearityStudyPlanType::
    TemperatureAbsoluteLinearityMinimum (const TemperatureAbsoluteLinearityMinimum_type& x)
    {
      this->TemperatureAbsoluteLinearityMinimum_.set (x);
    }

    void LinearityStudyPlanType::
    TemperatureAbsoluteLinearityMinimum (const TemperatureAbsoluteLinearityMinimum_optional& x)
    {
      this->TemperatureAbsoluteLinearityMinimum_ = x;
    }

    void LinearityStudyPlanType::
    TemperatureAbsoluteLinearityMinimum (::std::auto_ptr< TemperatureAbsoluteLinearityMinimum_type > x)
    {
      this->TemperatureAbsoluteLinearityMinimum_.set (x);
    }

    const LinearityStudyPlanType::TimeAbsoluteLinearityMinimum_optional& LinearityStudyPlanType::
    TimeAbsoluteLinearityMinimum () const
    {
      return this->TimeAbsoluteLinearityMinimum_;
    }

    LinearityStudyPlanType::TimeAbsoluteLinearityMinimum_optional& LinearityStudyPlanType::
    TimeAbsoluteLinearityMinimum ()
    {
      return this->TimeAbsoluteLinearityMinimum_;
    }

    void LinearityStudyPlanType::
    TimeAbsoluteLinearityMinimum (const TimeAbsoluteLinearityMinimum_type& x)
    {
      this->TimeAbsoluteLinearityMinimum_.set (x);
    }

    void LinearityStudyPlanType::
    TimeAbsoluteLinearityMinimum (const TimeAbsoluteLinearityMinimum_optional& x)
    {
      this->TimeAbsoluteLinearityMinimum_ = x;
    }

    void LinearityStudyPlanType::
    TimeAbsoluteLinearityMinimum (::std::auto_ptr< TimeAbsoluteLinearityMinimum_type > x)
    {
      this->TimeAbsoluteLinearityMinimum_.set (x);
    }

    const LinearityStudyPlanType::UserDefinedUnitAbsoluteLinearityMinimum_sequence& LinearityStudyPlanType::
    UserDefinedUnitAbsoluteLinearityMinimum () const
    {
      return this->UserDefinedUnitAbsoluteLinearityMinimum_;
    }

    LinearityStudyPlanType::UserDefinedUnitAbsoluteLinearityMinimum_sequence& LinearityStudyPlanType::
    UserDefinedUnitAbsoluteLinearityMinimum ()
    {
      return this->UserDefinedUnitAbsoluteLinearityMinimum_;
    }

    void LinearityStudyPlanType::
    UserDefinedUnitAbsoluteLinearityMinimum (const UserDefinedUnitAbsoluteLinearityMinimum_sequence& s)
    {
      this->UserDefinedUnitAbsoluteLinearityMinimum_ = s;
    }

    const LinearityStudyPlanType::RelativeLinearityMinimum_optional& LinearityStudyPlanType::
    RelativeLinearityMinimum () const
    {
      return this->RelativeLinearityMinimum_;
    }

    LinearityStudyPlanType::RelativeLinearityMinimum_optional& LinearityStudyPlanType::
    RelativeLinearityMinimum ()
    {
      return this->RelativeLinearityMinimum_;
    }

    void LinearityStudyPlanType::
    RelativeLinearityMinimum (const RelativeLinearityMinimum_type& x)
    {
      this->RelativeLinearityMinimum_.set (x);
    }

    void LinearityStudyPlanType::
    RelativeLinearityMinimum (const RelativeLinearityMinimum_optional& x)
    {
      this->RelativeLinearityMinimum_ = x;
    }


    // StabilityStudyPlanType
    // 

    const StabilityStudyPlanType::MeasurementDeviceIds_optional& StabilityStudyPlanType::
    MeasurementDeviceIds () const
    {
      return this->MeasurementDeviceIds_;
    }

    StabilityStudyPlanType::MeasurementDeviceIds_optional& StabilityStudyPlanType::
    MeasurementDeviceIds ()
    {
      return this->MeasurementDeviceIds_;
    }

    void StabilityStudyPlanType::
    MeasurementDeviceIds (const MeasurementDeviceIds_type& x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    void StabilityStudyPlanType::
    MeasurementDeviceIds (const MeasurementDeviceIds_optional& x)
    {
      this->MeasurementDeviceIds_ = x;
    }

    void StabilityStudyPlanType::
    MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    const StabilityStudyPlanType::SampleSize_type& StabilityStudyPlanType::
    SampleSize () const
    {
      return this->SampleSize_.get ();
    }

    StabilityStudyPlanType::SampleSize_type& StabilityStudyPlanType::
    SampleSize ()
    {
      return this->SampleSize_.get ();
    }

    void StabilityStudyPlanType::
    SampleSize (const SampleSize_type& x)
    {
      this->SampleSize_.set (x);
    }

    const StabilityStudyPlanType::SampleFrequency_type& StabilityStudyPlanType::
    SampleFrequency () const
    {
      return this->SampleFrequency_.get ();
    }

    StabilityStudyPlanType::SampleFrequency_type& StabilityStudyPlanType::
    SampleFrequency ()
    {
      return this->SampleFrequency_.get ();
    }

    void StabilityStudyPlanType::
    SampleFrequency (const SampleFrequency_type& x)
    {
      this->SampleFrequency_.set (x);
    }

    const StabilityStudyPlanType::SamplingInterval_type& StabilityStudyPlanType::
    SamplingInterval () const
    {
      return this->SamplingInterval_.get ();
    }

    StabilityStudyPlanType::SamplingInterval_type& StabilityStudyPlanType::
    SamplingInterval ()
    {
      return this->SamplingInterval_.get ();
    }

    void StabilityStudyPlanType::
    SamplingInterval (const SamplingInterval_type& x)
    {
      this->SamplingInterval_.set (x);
    }

    void StabilityStudyPlanType::
    SamplingInterval (::std::auto_ptr< SamplingInterval_type > x)
    {
      this->SamplingInterval_.set (x);
    }


    // MultipleProductInstanceStudyPlanBaseType
    // 

    const MultipleProductInstanceStudyPlanBaseType::NumberOfSamples_type& MultipleProductInstanceStudyPlanBaseType::
    NumberOfSamples () const
    {
      return this->NumberOfSamples_.get ();
    }

    MultipleProductInstanceStudyPlanBaseType::NumberOfSamples_type& MultipleProductInstanceStudyPlanBaseType::
    NumberOfSamples ()
    {
      return this->NumberOfSamples_.get ();
    }

    void MultipleProductInstanceStudyPlanBaseType::
    NumberOfSamples (const NumberOfSamples_type& x)
    {
      this->NumberOfSamples_.set (x);
    }

    const MultipleProductInstanceStudyPlanBaseType::SubgroupSize_optional& MultipleProductInstanceStudyPlanBaseType::
    SubgroupSize () const
    {
      return this->SubgroupSize_;
    }

    MultipleProductInstanceStudyPlanBaseType::SubgroupSize_optional& MultipleProductInstanceStudyPlanBaseType::
    SubgroupSize ()
    {
      return this->SubgroupSize_;
    }

    void MultipleProductInstanceStudyPlanBaseType::
    SubgroupSize (const SubgroupSize_type& x)
    {
      this->SubgroupSize_.set (x);
    }

    void MultipleProductInstanceStudyPlanBaseType::
    SubgroupSize (const SubgroupSize_optional& x)
    {
      this->SubgroupSize_ = x;
    }


    // BiasStudyPlanType
    // 

    const BiasStudyPlanType::MeasurementDeviceIds_optional& BiasStudyPlanType::
    MeasurementDeviceIds () const
    {
      return this->MeasurementDeviceIds_;
    }

    BiasStudyPlanType::MeasurementDeviceIds_optional& BiasStudyPlanType::
    MeasurementDeviceIds ()
    {
      return this->MeasurementDeviceIds_;
    }

    void BiasStudyPlanType::
    MeasurementDeviceIds (const MeasurementDeviceIds_type& x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    void BiasStudyPlanType::
    MeasurementDeviceIds (const MeasurementDeviceIds_optional& x)
    {
      this->MeasurementDeviceIds_ = x;
    }

    void BiasStudyPlanType::
    MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > x)
    {
      this->MeasurementDeviceIds_.set (x);
    }


    // FirstArticleStudyPlanType
    // 

    const FirstArticleStudyPlanType::InSpecRatio_type& FirstArticleStudyPlanType::
    InSpecRatio () const
    {
      return this->InSpecRatio_.get ();
    }

    FirstArticleStudyPlanType::InSpecRatio_type& FirstArticleStudyPlanType::
    InSpecRatio ()
    {
      return this->InSpecRatio_.get ();
    }

    void FirstArticleStudyPlanType::
    InSpecRatio (const InSpecRatio_type& x)
    {
      this->InSpecRatio_.set (x);
    }

    const FirstArticleStudyPlanType::LinearAbsoluteMaximum_optional& FirstArticleStudyPlanType::
    LinearAbsoluteMaximum () const
    {
      return this->LinearAbsoluteMaximum_;
    }

    FirstArticleStudyPlanType::LinearAbsoluteMaximum_optional& FirstArticleStudyPlanType::
    LinearAbsoluteMaximum ()
    {
      return this->LinearAbsoluteMaximum_;
    }

    void FirstArticleStudyPlanType::
    LinearAbsoluteMaximum (const LinearAbsoluteMaximum_type& x)
    {
      this->LinearAbsoluteMaximum_.set (x);
    }

    void FirstArticleStudyPlanType::
    LinearAbsoluteMaximum (const LinearAbsoluteMaximum_optional& x)
    {
      this->LinearAbsoluteMaximum_ = x;
    }

    void FirstArticleStudyPlanType::
    LinearAbsoluteMaximum (::std::auto_ptr< LinearAbsoluteMaximum_type > x)
    {
      this->LinearAbsoluteMaximum_.set (x);
    }

    const FirstArticleStudyPlanType::AngularAbsoluteMaximum_optional& FirstArticleStudyPlanType::
    AngularAbsoluteMaximum () const
    {
      return this->AngularAbsoluteMaximum_;
    }

    FirstArticleStudyPlanType::AngularAbsoluteMaximum_optional& FirstArticleStudyPlanType::
    AngularAbsoluteMaximum ()
    {
      return this->AngularAbsoluteMaximum_;
    }

    void FirstArticleStudyPlanType::
    AngularAbsoluteMaximum (const AngularAbsoluteMaximum_type& x)
    {
      this->AngularAbsoluteMaximum_.set (x);
    }

    void FirstArticleStudyPlanType::
    AngularAbsoluteMaximum (const AngularAbsoluteMaximum_optional& x)
    {
      this->AngularAbsoluteMaximum_ = x;
    }

    void FirstArticleStudyPlanType::
    AngularAbsoluteMaximum (::std::auto_ptr< AngularAbsoluteMaximum_type > x)
    {
      this->AngularAbsoluteMaximum_.set (x);
    }

    const FirstArticleStudyPlanType::AreaAbsoluteMaximum_optional& FirstArticleStudyPlanType::
    AreaAbsoluteMaximum () const
    {
      return this->AreaAbsoluteMaximum_;
    }

    FirstArticleStudyPlanType::AreaAbsoluteMaximum_optional& FirstArticleStudyPlanType::
    AreaAbsoluteMaximum ()
    {
      return this->AreaAbsoluteMaximum_;
    }

    void FirstArticleStudyPlanType::
    AreaAbsoluteMaximum (const AreaAbsoluteMaximum_type& x)
    {
      this->AreaAbsoluteMaximum_.set (x);
    }

    void FirstArticleStudyPlanType::
    AreaAbsoluteMaximum (const AreaAbsoluteMaximum_optional& x)
    {
      this->AreaAbsoluteMaximum_ = x;
    }

    void FirstArticleStudyPlanType::
    AreaAbsoluteMaximum (::std::auto_ptr< AreaAbsoluteMaximum_type > x)
    {
      this->AreaAbsoluteMaximum_.set (x);
    }

    const FirstArticleStudyPlanType::ForceAbsoluteMaximum_optional& FirstArticleStudyPlanType::
    ForceAbsoluteMaximum () const
    {
      return this->ForceAbsoluteMaximum_;
    }

    FirstArticleStudyPlanType::ForceAbsoluteMaximum_optional& FirstArticleStudyPlanType::
    ForceAbsoluteMaximum ()
    {
      return this->ForceAbsoluteMaximum_;
    }

    void FirstArticleStudyPlanType::
    ForceAbsoluteMaximum (const ForceAbsoluteMaximum_type& x)
    {
      this->ForceAbsoluteMaximum_.set (x);
    }

    void FirstArticleStudyPlanType::
    ForceAbsoluteMaximum (const ForceAbsoluteMaximum_optional& x)
    {
      this->ForceAbsoluteMaximum_ = x;
    }

    void FirstArticleStudyPlanType::
    ForceAbsoluteMaximum (::std::auto_ptr< ForceAbsoluteMaximum_type > x)
    {
      this->ForceAbsoluteMaximum_.set (x);
    }

    const FirstArticleStudyPlanType::MassAbsoluteMaximum_optional& FirstArticleStudyPlanType::
    MassAbsoluteMaximum () const
    {
      return this->MassAbsoluteMaximum_;
    }

    FirstArticleStudyPlanType::MassAbsoluteMaximum_optional& FirstArticleStudyPlanType::
    MassAbsoluteMaximum ()
    {
      return this->MassAbsoluteMaximum_;
    }

    void FirstArticleStudyPlanType::
    MassAbsoluteMaximum (const MassAbsoluteMaximum_type& x)
    {
      this->MassAbsoluteMaximum_.set (x);
    }

    void FirstArticleStudyPlanType::
    MassAbsoluteMaximum (const MassAbsoluteMaximum_optional& x)
    {
      this->MassAbsoluteMaximum_ = x;
    }

    void FirstArticleStudyPlanType::
    MassAbsoluteMaximum (::std::auto_ptr< MassAbsoluteMaximum_type > x)
    {
      this->MassAbsoluteMaximum_.set (x);
    }

    const FirstArticleStudyPlanType::PressureAbsoluteMaximum_optional& FirstArticleStudyPlanType::
    PressureAbsoluteMaximum () const
    {
      return this->PressureAbsoluteMaximum_;
    }

    FirstArticleStudyPlanType::PressureAbsoluteMaximum_optional& FirstArticleStudyPlanType::
    PressureAbsoluteMaximum ()
    {
      return this->PressureAbsoluteMaximum_;
    }

    void FirstArticleStudyPlanType::
    PressureAbsoluteMaximum (const PressureAbsoluteMaximum_type& x)
    {
      this->PressureAbsoluteMaximum_.set (x);
    }

    void FirstArticleStudyPlanType::
    PressureAbsoluteMaximum (const PressureAbsoluteMaximum_optional& x)
    {
      this->PressureAbsoluteMaximum_ = x;
    }

    void FirstArticleStudyPlanType::
    PressureAbsoluteMaximum (::std::auto_ptr< PressureAbsoluteMaximum_type > x)
    {
      this->PressureAbsoluteMaximum_.set (x);
    }

    const FirstArticleStudyPlanType::SpeedAbsoluteMaximum_optional& FirstArticleStudyPlanType::
    SpeedAbsoluteMaximum () const
    {
      return this->SpeedAbsoluteMaximum_;
    }

    FirstArticleStudyPlanType::SpeedAbsoluteMaximum_optional& FirstArticleStudyPlanType::
    SpeedAbsoluteMaximum ()
    {
      return this->SpeedAbsoluteMaximum_;
    }

    void FirstArticleStudyPlanType::
    SpeedAbsoluteMaximum (const SpeedAbsoluteMaximum_type& x)
    {
      this->SpeedAbsoluteMaximum_.set (x);
    }

    void FirstArticleStudyPlanType::
    SpeedAbsoluteMaximum (const SpeedAbsoluteMaximum_optional& x)
    {
      this->SpeedAbsoluteMaximum_ = x;
    }

    void FirstArticleStudyPlanType::
    SpeedAbsoluteMaximum (::std::auto_ptr< SpeedAbsoluteMaximum_type > x)
    {
      this->SpeedAbsoluteMaximum_.set (x);
    }

    const FirstArticleStudyPlanType::TemperatureAbsoluteMaximum_optional& FirstArticleStudyPlanType::
    TemperatureAbsoluteMaximum () const
    {
      return this->TemperatureAbsoluteMaximum_;
    }

    FirstArticleStudyPlanType::TemperatureAbsoluteMaximum_optional& FirstArticleStudyPlanType::
    TemperatureAbsoluteMaximum ()
    {
      return this->TemperatureAbsoluteMaximum_;
    }

    void FirstArticleStudyPlanType::
    TemperatureAbsoluteMaximum (const TemperatureAbsoluteMaximum_type& x)
    {
      this->TemperatureAbsoluteMaximum_.set (x);
    }

    void FirstArticleStudyPlanType::
    TemperatureAbsoluteMaximum (const TemperatureAbsoluteMaximum_optional& x)
    {
      this->TemperatureAbsoluteMaximum_ = x;
    }

    void FirstArticleStudyPlanType::
    TemperatureAbsoluteMaximum (::std::auto_ptr< TemperatureAbsoluteMaximum_type > x)
    {
      this->TemperatureAbsoluteMaximum_.set (x);
    }

    const FirstArticleStudyPlanType::TimeAbsoluteMaximum_optional& FirstArticleStudyPlanType::
    TimeAbsoluteMaximum () const
    {
      return this->TimeAbsoluteMaximum_;
    }

    FirstArticleStudyPlanType::TimeAbsoluteMaximum_optional& FirstArticleStudyPlanType::
    TimeAbsoluteMaximum ()
    {
      return this->TimeAbsoluteMaximum_;
    }

    void FirstArticleStudyPlanType::
    TimeAbsoluteMaximum (const TimeAbsoluteMaximum_type& x)
    {
      this->TimeAbsoluteMaximum_.set (x);
    }

    void FirstArticleStudyPlanType::
    TimeAbsoluteMaximum (const TimeAbsoluteMaximum_optional& x)
    {
      this->TimeAbsoluteMaximum_ = x;
    }

    void FirstArticleStudyPlanType::
    TimeAbsoluteMaximum (::std::auto_ptr< TimeAbsoluteMaximum_type > x)
    {
      this->TimeAbsoluteMaximum_.set (x);
    }

    const FirstArticleStudyPlanType::UserDefinedUnitAbsoluteMaximum_sequence& FirstArticleStudyPlanType::
    UserDefinedUnitAbsoluteMaximum () const
    {
      return this->UserDefinedUnitAbsoluteMaximum_;
    }

    FirstArticleStudyPlanType::UserDefinedUnitAbsoluteMaximum_sequence& FirstArticleStudyPlanType::
    UserDefinedUnitAbsoluteMaximum ()
    {
      return this->UserDefinedUnitAbsoluteMaximum_;
    }

    void FirstArticleStudyPlanType::
    UserDefinedUnitAbsoluteMaximum (const UserDefinedUnitAbsoluteMaximum_sequence& s)
    {
      this->UserDefinedUnitAbsoluteMaximum_ = s;
    }

    const FirstArticleStudyPlanType::RelativeMaximum_optional& FirstArticleStudyPlanType::
    RelativeMaximum () const
    {
      return this->RelativeMaximum_;
    }

    FirstArticleStudyPlanType::RelativeMaximum_optional& FirstArticleStudyPlanType::
    RelativeMaximum ()
    {
      return this->RelativeMaximum_;
    }

    void FirstArticleStudyPlanType::
    RelativeMaximum (const RelativeMaximum_type& x)
    {
      this->RelativeMaximum_.set (x);
    }

    void FirstArticleStudyPlanType::
    RelativeMaximum (const RelativeMaximum_optional& x)
    {
      this->RelativeMaximum_ = x;
    }


    // ProcessDifferenceStudyPlanType
    // 

    const ProcessDifferenceStudyPlanType::NumberOfSamples_type& ProcessDifferenceStudyPlanType::
    NumberOfSamples () const
    {
      return this->NumberOfSamples_.get ();
    }

    ProcessDifferenceStudyPlanType::NumberOfSamples_type& ProcessDifferenceStudyPlanType::
    NumberOfSamples ()
    {
      return this->NumberOfSamples_.get ();
    }

    void ProcessDifferenceStudyPlanType::
    NumberOfSamples (const NumberOfSamples_type& x)
    {
      this->NumberOfSamples_.set (x);
    }

    const ProcessDifferenceStudyPlanType::SubgroupSize_type& ProcessDifferenceStudyPlanType::
    SubgroupSize () const
    {
      return this->SubgroupSize_.get ();
    }

    ProcessDifferenceStudyPlanType::SubgroupSize_type& ProcessDifferenceStudyPlanType::
    SubgroupSize ()
    {
      return this->SubgroupSize_.get ();
    }

    void ProcessDifferenceStudyPlanType::
    SubgroupSize (const SubgroupSize_type& x)
    {
      this->SubgroupSize_.set (x);
    }

    ProcessDifferenceStudyPlanType::SubgroupSize_type ProcessDifferenceStudyPlanType::
    SubgroupSize_default_value ()
    {
      return SubgroupSize_type (2ULL);
    }

    const ProcessDifferenceStudyPlanType::ManufacturingProcessId_optional& ProcessDifferenceStudyPlanType::
    ManufacturingProcessId () const
    {
      return this->ManufacturingProcessId_;
    }

    ProcessDifferenceStudyPlanType::ManufacturingProcessId_optional& ProcessDifferenceStudyPlanType::
    ManufacturingProcessId ()
    {
      return this->ManufacturingProcessId_;
    }

    void ProcessDifferenceStudyPlanType::
    ManufacturingProcessId (const ManufacturingProcessId_type& x)
    {
      this->ManufacturingProcessId_.set (x);
    }

    void ProcessDifferenceStudyPlanType::
    ManufacturingProcessId (const ManufacturingProcessId_optional& x)
    {
      this->ManufacturingProcessId_ = x;
    }

    void ProcessDifferenceStudyPlanType::
    ManufacturingProcessId (::std::auto_ptr< ManufacturingProcessId_type > x)
    {
      this->ManufacturingProcessId_.set (x);
    }

    const ProcessDifferenceStudyPlanType::LinearAbsoluteDifference_optional& ProcessDifferenceStudyPlanType::
    LinearAbsoluteDifference () const
    {
      return this->LinearAbsoluteDifference_;
    }

    ProcessDifferenceStudyPlanType::LinearAbsoluteDifference_optional& ProcessDifferenceStudyPlanType::
    LinearAbsoluteDifference ()
    {
      return this->LinearAbsoluteDifference_;
    }

    void ProcessDifferenceStudyPlanType::
    LinearAbsoluteDifference (const LinearAbsoluteDifference_type& x)
    {
      this->LinearAbsoluteDifference_.set (x);
    }

    void ProcessDifferenceStudyPlanType::
    LinearAbsoluteDifference (const LinearAbsoluteDifference_optional& x)
    {
      this->LinearAbsoluteDifference_ = x;
    }

    void ProcessDifferenceStudyPlanType::
    LinearAbsoluteDifference (::std::auto_ptr< LinearAbsoluteDifference_type > x)
    {
      this->LinearAbsoluteDifference_.set (x);
    }

    const ProcessDifferenceStudyPlanType::AngularAbsoluteDifference_optional& ProcessDifferenceStudyPlanType::
    AngularAbsoluteDifference () const
    {
      return this->AngularAbsoluteDifference_;
    }

    ProcessDifferenceStudyPlanType::AngularAbsoluteDifference_optional& ProcessDifferenceStudyPlanType::
    AngularAbsoluteDifference ()
    {
      return this->AngularAbsoluteDifference_;
    }

    void ProcessDifferenceStudyPlanType::
    AngularAbsoluteDifference (const AngularAbsoluteDifference_type& x)
    {
      this->AngularAbsoluteDifference_.set (x);
    }

    void ProcessDifferenceStudyPlanType::
    AngularAbsoluteDifference (const AngularAbsoluteDifference_optional& x)
    {
      this->AngularAbsoluteDifference_ = x;
    }

    void ProcessDifferenceStudyPlanType::
    AngularAbsoluteDifference (::std::auto_ptr< AngularAbsoluteDifference_type > x)
    {
      this->AngularAbsoluteDifference_.set (x);
    }

    const ProcessDifferenceStudyPlanType::AreaAbsoluteDifference_optional& ProcessDifferenceStudyPlanType::
    AreaAbsoluteDifference () const
    {
      return this->AreaAbsoluteDifference_;
    }

    ProcessDifferenceStudyPlanType::AreaAbsoluteDifference_optional& ProcessDifferenceStudyPlanType::
    AreaAbsoluteDifference ()
    {
      return this->AreaAbsoluteDifference_;
    }

    void ProcessDifferenceStudyPlanType::
    AreaAbsoluteDifference (const AreaAbsoluteDifference_type& x)
    {
      this->AreaAbsoluteDifference_.set (x);
    }

    void ProcessDifferenceStudyPlanType::
    AreaAbsoluteDifference (const AreaAbsoluteDifference_optional& x)
    {
      this->AreaAbsoluteDifference_ = x;
    }

    void ProcessDifferenceStudyPlanType::
    AreaAbsoluteDifference (::std::auto_ptr< AreaAbsoluteDifference_type > x)
    {
      this->AreaAbsoluteDifference_.set (x);
    }

    const ProcessDifferenceStudyPlanType::ForceAbsoluteDifference_optional& ProcessDifferenceStudyPlanType::
    ForceAbsoluteDifference () const
    {
      return this->ForceAbsoluteDifference_;
    }

    ProcessDifferenceStudyPlanType::ForceAbsoluteDifference_optional& ProcessDifferenceStudyPlanType::
    ForceAbsoluteDifference ()
    {
      return this->ForceAbsoluteDifference_;
    }

    void ProcessDifferenceStudyPlanType::
    ForceAbsoluteDifference (const ForceAbsoluteDifference_type& x)
    {
      this->ForceAbsoluteDifference_.set (x);
    }

    void ProcessDifferenceStudyPlanType::
    ForceAbsoluteDifference (const ForceAbsoluteDifference_optional& x)
    {
      this->ForceAbsoluteDifference_ = x;
    }

    void ProcessDifferenceStudyPlanType::
    ForceAbsoluteDifference (::std::auto_ptr< ForceAbsoluteDifference_type > x)
    {
      this->ForceAbsoluteDifference_.set (x);
    }

    const ProcessDifferenceStudyPlanType::MassAbsoluteDifference_optional& ProcessDifferenceStudyPlanType::
    MassAbsoluteDifference () const
    {
      return this->MassAbsoluteDifference_;
    }

    ProcessDifferenceStudyPlanType::MassAbsoluteDifference_optional& ProcessDifferenceStudyPlanType::
    MassAbsoluteDifference ()
    {
      return this->MassAbsoluteDifference_;
    }

    void ProcessDifferenceStudyPlanType::
    MassAbsoluteDifference (const MassAbsoluteDifference_type& x)
    {
      this->MassAbsoluteDifference_.set (x);
    }

    void ProcessDifferenceStudyPlanType::
    MassAbsoluteDifference (const MassAbsoluteDifference_optional& x)
    {
      this->MassAbsoluteDifference_ = x;
    }

    void ProcessDifferenceStudyPlanType::
    MassAbsoluteDifference (::std::auto_ptr< MassAbsoluteDifference_type > x)
    {
      this->MassAbsoluteDifference_.set (x);
    }

    const ProcessDifferenceStudyPlanType::PressureAbsoluteDifference_optional& ProcessDifferenceStudyPlanType::
    PressureAbsoluteDifference () const
    {
      return this->PressureAbsoluteDifference_;
    }

    ProcessDifferenceStudyPlanType::PressureAbsoluteDifference_optional& ProcessDifferenceStudyPlanType::
    PressureAbsoluteDifference ()
    {
      return this->PressureAbsoluteDifference_;
    }

    void ProcessDifferenceStudyPlanType::
    PressureAbsoluteDifference (const PressureAbsoluteDifference_type& x)
    {
      this->PressureAbsoluteDifference_.set (x);
    }

    void ProcessDifferenceStudyPlanType::
    PressureAbsoluteDifference (const PressureAbsoluteDifference_optional& x)
    {
      this->PressureAbsoluteDifference_ = x;
    }

    void ProcessDifferenceStudyPlanType::
    PressureAbsoluteDifference (::std::auto_ptr< PressureAbsoluteDifference_type > x)
    {
      this->PressureAbsoluteDifference_.set (x);
    }

    const ProcessDifferenceStudyPlanType::SpeedAbsoluteDifference_optional& ProcessDifferenceStudyPlanType::
    SpeedAbsoluteDifference () const
    {
      return this->SpeedAbsoluteDifference_;
    }

    ProcessDifferenceStudyPlanType::SpeedAbsoluteDifference_optional& ProcessDifferenceStudyPlanType::
    SpeedAbsoluteDifference ()
    {
      return this->SpeedAbsoluteDifference_;
    }

    void ProcessDifferenceStudyPlanType::
    SpeedAbsoluteDifference (const SpeedAbsoluteDifference_type& x)
    {
      this->SpeedAbsoluteDifference_.set (x);
    }

    void ProcessDifferenceStudyPlanType::
    SpeedAbsoluteDifference (const SpeedAbsoluteDifference_optional& x)
    {
      this->SpeedAbsoluteDifference_ = x;
    }

    void ProcessDifferenceStudyPlanType::
    SpeedAbsoluteDifference (::std::auto_ptr< SpeedAbsoluteDifference_type > x)
    {
      this->SpeedAbsoluteDifference_.set (x);
    }

    const ProcessDifferenceStudyPlanType::TemperatureAbsoluteDifference_optional& ProcessDifferenceStudyPlanType::
    TemperatureAbsoluteDifference () const
    {
      return this->TemperatureAbsoluteDifference_;
    }

    ProcessDifferenceStudyPlanType::TemperatureAbsoluteDifference_optional& ProcessDifferenceStudyPlanType::
    TemperatureAbsoluteDifference ()
    {
      return this->TemperatureAbsoluteDifference_;
    }

    void ProcessDifferenceStudyPlanType::
    TemperatureAbsoluteDifference (const TemperatureAbsoluteDifference_type& x)
    {
      this->TemperatureAbsoluteDifference_.set (x);
    }

    void ProcessDifferenceStudyPlanType::
    TemperatureAbsoluteDifference (const TemperatureAbsoluteDifference_optional& x)
    {
      this->TemperatureAbsoluteDifference_ = x;
    }

    void ProcessDifferenceStudyPlanType::
    TemperatureAbsoluteDifference (::std::auto_ptr< TemperatureAbsoluteDifference_type > x)
    {
      this->TemperatureAbsoluteDifference_.set (x);
    }

    const ProcessDifferenceStudyPlanType::TimeAbsoluteDifference_optional& ProcessDifferenceStudyPlanType::
    TimeAbsoluteDifference () const
    {
      return this->TimeAbsoluteDifference_;
    }

    ProcessDifferenceStudyPlanType::TimeAbsoluteDifference_optional& ProcessDifferenceStudyPlanType::
    TimeAbsoluteDifference ()
    {
      return this->TimeAbsoluteDifference_;
    }

    void ProcessDifferenceStudyPlanType::
    TimeAbsoluteDifference (const TimeAbsoluteDifference_type& x)
    {
      this->TimeAbsoluteDifference_.set (x);
    }

    void ProcessDifferenceStudyPlanType::
    TimeAbsoluteDifference (const TimeAbsoluteDifference_optional& x)
    {
      this->TimeAbsoluteDifference_ = x;
    }

    void ProcessDifferenceStudyPlanType::
    TimeAbsoluteDifference (::std::auto_ptr< TimeAbsoluteDifference_type > x)
    {
      this->TimeAbsoluteDifference_.set (x);
    }

    const ProcessDifferenceStudyPlanType::UserDefinedUnitAbsoluteDifference_sequence& ProcessDifferenceStudyPlanType::
    UserDefinedUnitAbsoluteDifference () const
    {
      return this->UserDefinedUnitAbsoluteDifference_;
    }

    ProcessDifferenceStudyPlanType::UserDefinedUnitAbsoluteDifference_sequence& ProcessDifferenceStudyPlanType::
    UserDefinedUnitAbsoluteDifference ()
    {
      return this->UserDefinedUnitAbsoluteDifference_;
    }

    void ProcessDifferenceStudyPlanType::
    UserDefinedUnitAbsoluteDifference (const UserDefinedUnitAbsoluteDifference_sequence& s)
    {
      this->UserDefinedUnitAbsoluteDifference_ = s;
    }

    const ProcessDifferenceStudyPlanType::RelativeDifference_optional& ProcessDifferenceStudyPlanType::
    RelativeDifference () const
    {
      return this->RelativeDifference_;
    }

    ProcessDifferenceStudyPlanType::RelativeDifference_optional& ProcessDifferenceStudyPlanType::
    RelativeDifference ()
    {
      return this->RelativeDifference_;
    }

    void ProcessDifferenceStudyPlanType::
    RelativeDifference (const RelativeDifference_type& x)
    {
      this->RelativeDifference_.set (x);
    }

    void ProcessDifferenceStudyPlanType::
    RelativeDifference (const RelativeDifference_optional& x)
    {
      this->RelativeDifference_ = x;
    }


    // SimpleStudyPlanType
    // 


    // CapabilityStudyPlanType
    // 

    const CapabilityStudyPlanType::CpkThreshold_optional& CapabilityStudyPlanType::
    CpkThreshold () const
    {
      return this->CpkThreshold_;
    }

    CapabilityStudyPlanType::CpkThreshold_optional& CapabilityStudyPlanType::
    CpkThreshold ()
    {
      return this->CpkThreshold_;
    }

    void CapabilityStudyPlanType::
    CpkThreshold (const CpkThreshold_type& x)
    {
      this->CpkThreshold_.set (x);
    }

    void CapabilityStudyPlanType::
    CpkThreshold (const CpkThreshold_optional& x)
    {
      this->CpkThreshold_ = x;
    }

    void CapabilityStudyPlanType::
    CpkThreshold (::std::auto_ptr< CpkThreshold_type > x)
    {
      this->CpkThreshold_.set (x);
    }

    const CapabilityStudyPlanType::PpkThreshold_optional& CapabilityStudyPlanType::
    PpkThreshold () const
    {
      return this->PpkThreshold_;
    }

    CapabilityStudyPlanType::PpkThreshold_optional& CapabilityStudyPlanType::
    PpkThreshold ()
    {
      return this->PpkThreshold_;
    }

    void CapabilityStudyPlanType::
    PpkThreshold (const PpkThreshold_type& x)
    {
      this->PpkThreshold_.set (x);
    }

    void CapabilityStudyPlanType::
    PpkThreshold (const PpkThreshold_optional& x)
    {
      this->PpkThreshold_ = x;
    }

    void CapabilityStudyPlanType::
    PpkThreshold (::std::auto_ptr< PpkThreshold_type > x)
    {
      this->PpkThreshold_.set (x);
    }


    // GageRandRStudyEnumType
    // 

    GageRandRStudyEnumType::
    GageRandRStudyEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_GageRandRStudyEnumType_literals_[v])
    {
    }

    GageRandRStudyEnumType::
    GageRandRStudyEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    GageRandRStudyEnumType::
    GageRandRStudyEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    GageRandRStudyEnumType::
    GageRandRStudyEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    GageRandRStudyEnumType::
    GageRandRStudyEnumType (const GageRandRStudyEnumType& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    GageRandRStudyEnumType& GageRandRStudyEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_GageRandRStudyEnumType_literals_[v]);

      return *this;
    }


    // GageRandRStudyPlanType
    // 

    const GageRandRStudyPlanType::MeasurementDeviceIds_optional& GageRandRStudyPlanType::
    MeasurementDeviceIds () const
    {
      return this->MeasurementDeviceIds_;
    }

    GageRandRStudyPlanType::MeasurementDeviceIds_optional& GageRandRStudyPlanType::
    MeasurementDeviceIds ()
    {
      return this->MeasurementDeviceIds_;
    }

    void GageRandRStudyPlanType::
    MeasurementDeviceIds (const MeasurementDeviceIds_type& x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    void GageRandRStudyPlanType::
    MeasurementDeviceIds (const MeasurementDeviceIds_optional& x)
    {
      this->MeasurementDeviceIds_ = x;
    }

    void GageRandRStudyPlanType::
    MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    const GageRandRStudyPlanType::RandRStudyType_type& GageRandRStudyPlanType::
    RandRStudyType () const
    {
      return this->RandRStudyType_.get ();
    }

    GageRandRStudyPlanType::RandRStudyType_type& GageRandRStudyPlanType::
    RandRStudyType ()
    {
      return this->RandRStudyType_.get ();
    }

    void GageRandRStudyPlanType::
    RandRStudyType (const RandRStudyType_type& x)
    {
      this->RandRStudyType_.set (x);
    }

    void GageRandRStudyPlanType::
    RandRStudyType (::std::auto_ptr< RandRStudyType_type > x)
    {
      this->RandRStudyType_.set (x);
    }

    const GageRandRStudyPlanType::NumberOfAppraisers_type& GageRandRStudyPlanType::
    NumberOfAppraisers () const
    {
      return this->NumberOfAppraisers_.get ();
    }

    GageRandRStudyPlanType::NumberOfAppraisers_type& GageRandRStudyPlanType::
    NumberOfAppraisers ()
    {
      return this->NumberOfAppraisers_.get ();
    }

    void GageRandRStudyPlanType::
    NumberOfAppraisers (const NumberOfAppraisers_type& x)
    {
      this->NumberOfAppraisers_.set (x);
    }

    const GageRandRStudyPlanType::NumberOfParts_type& GageRandRStudyPlanType::
    NumberOfParts () const
    {
      return this->NumberOfParts_.get ();
    }

    GageRandRStudyPlanType::NumberOfParts_type& GageRandRStudyPlanType::
    NumberOfParts ()
    {
      return this->NumberOfParts_.get ();
    }

    void GageRandRStudyPlanType::
    NumberOfParts (const NumberOfParts_type& x)
    {
      this->NumberOfParts_.set (x);
    }

    const GageRandRStudyPlanType::NumberOfTrials_type& GageRandRStudyPlanType::
    NumberOfTrials () const
    {
      return this->NumberOfTrials_.get ();
    }

    GageRandRStudyPlanType::NumberOfTrials_type& GageRandRStudyPlanType::
    NumberOfTrials ()
    {
      return this->NumberOfTrials_.get ();
    }

    void GageRandRStudyPlanType::
    NumberOfTrials (const NumberOfTrials_type& x)
    {
      this->NumberOfTrials_.set (x);
    }

    const GageRandRStudyPlanType::MaximumRelativeAppraiserVariation_optional& GageRandRStudyPlanType::
    MaximumRelativeAppraiserVariation () const
    {
      return this->MaximumRelativeAppraiserVariation_;
    }

    GageRandRStudyPlanType::MaximumRelativeAppraiserVariation_optional& GageRandRStudyPlanType::
    MaximumRelativeAppraiserVariation ()
    {
      return this->MaximumRelativeAppraiserVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumRelativeAppraiserVariation (const MaximumRelativeAppraiserVariation_type& x)
    {
      this->MaximumRelativeAppraiserVariation_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumRelativeAppraiserVariation (const MaximumRelativeAppraiserVariation_optional& x)
    {
      this->MaximumRelativeAppraiserVariation_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumRelativeAppraiserVariation (::std::auto_ptr< MaximumRelativeAppraiserVariation_type > x)
    {
      this->MaximumRelativeAppraiserVariation_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteLinearAppraiserVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteLinearAppraiserVariation () const
    {
      return this->MaximumAbsoluteLinearAppraiserVariation_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteLinearAppraiserVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteLinearAppraiserVariation ()
    {
      return this->MaximumAbsoluteLinearAppraiserVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteLinearAppraiserVariation (const MaximumAbsoluteLinearAppraiserVariation_type& x)
    {
      this->MaximumAbsoluteLinearAppraiserVariation_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteLinearAppraiserVariation (const MaximumAbsoluteLinearAppraiserVariation_optional& x)
    {
      this->MaximumAbsoluteLinearAppraiserVariation_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteLinearAppraiserVariation (::std::auto_ptr< MaximumAbsoluteLinearAppraiserVariation_type > x)
    {
      this->MaximumAbsoluteLinearAppraiserVariation_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteAngularAppraiserVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteAngularAppraiserVariation () const
    {
      return this->MaximumAbsoluteAngularAppraiserVariation_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteAngularAppraiserVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteAngularAppraiserVariation ()
    {
      return this->MaximumAbsoluteAngularAppraiserVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteAngularAppraiserVariation (const MaximumAbsoluteAngularAppraiserVariation_type& x)
    {
      this->MaximumAbsoluteAngularAppraiserVariation_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteAngularAppraiserVariation (const MaximumAbsoluteAngularAppraiserVariation_optional& x)
    {
      this->MaximumAbsoluteAngularAppraiserVariation_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteAngularAppraiserVariation (::std::auto_ptr< MaximumAbsoluteAngularAppraiserVariation_type > x)
    {
      this->MaximumAbsoluteAngularAppraiserVariation_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteAreaAppraiserVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteAreaAppraiserVariation () const
    {
      return this->MaximumAbsoluteAreaAppraiserVariation_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteAreaAppraiserVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteAreaAppraiserVariation ()
    {
      return this->MaximumAbsoluteAreaAppraiserVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteAreaAppraiserVariation (const MaximumAbsoluteAreaAppraiserVariation_type& x)
    {
      this->MaximumAbsoluteAreaAppraiserVariation_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteAreaAppraiserVariation (const MaximumAbsoluteAreaAppraiserVariation_optional& x)
    {
      this->MaximumAbsoluteAreaAppraiserVariation_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteAreaAppraiserVariation (::std::auto_ptr< MaximumAbsoluteAreaAppraiserVariation_type > x)
    {
      this->MaximumAbsoluteAreaAppraiserVariation_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteForceAppraiserVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteForceAppraiserVariation () const
    {
      return this->MaximumAbsoluteForceAppraiserVariation_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteForceAppraiserVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteForceAppraiserVariation ()
    {
      return this->MaximumAbsoluteForceAppraiserVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteForceAppraiserVariation (const MaximumAbsoluteForceAppraiserVariation_type& x)
    {
      this->MaximumAbsoluteForceAppraiserVariation_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteForceAppraiserVariation (const MaximumAbsoluteForceAppraiserVariation_optional& x)
    {
      this->MaximumAbsoluteForceAppraiserVariation_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteForceAppraiserVariation (::std::auto_ptr< MaximumAbsoluteForceAppraiserVariation_type > x)
    {
      this->MaximumAbsoluteForceAppraiserVariation_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteMassAppraiserVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteMassAppraiserVariation () const
    {
      return this->MaximumAbsoluteMassAppraiserVariation_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteMassAppraiserVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteMassAppraiserVariation ()
    {
      return this->MaximumAbsoluteMassAppraiserVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteMassAppraiserVariation (const MaximumAbsoluteMassAppraiserVariation_type& x)
    {
      this->MaximumAbsoluteMassAppraiserVariation_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteMassAppraiserVariation (const MaximumAbsoluteMassAppraiserVariation_optional& x)
    {
      this->MaximumAbsoluteMassAppraiserVariation_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteMassAppraiserVariation (::std::auto_ptr< MaximumAbsoluteMassAppraiserVariation_type > x)
    {
      this->MaximumAbsoluteMassAppraiserVariation_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsolutePressureAppraiserVariation_optional& GageRandRStudyPlanType::
    MaximumAbsolutePressureAppraiserVariation () const
    {
      return this->MaximumAbsolutePressureAppraiserVariation_;
    }

    GageRandRStudyPlanType::MaximumAbsolutePressureAppraiserVariation_optional& GageRandRStudyPlanType::
    MaximumAbsolutePressureAppraiserVariation ()
    {
      return this->MaximumAbsolutePressureAppraiserVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsolutePressureAppraiserVariation (const MaximumAbsolutePressureAppraiserVariation_type& x)
    {
      this->MaximumAbsolutePressureAppraiserVariation_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsolutePressureAppraiserVariation (const MaximumAbsolutePressureAppraiserVariation_optional& x)
    {
      this->MaximumAbsolutePressureAppraiserVariation_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsolutePressureAppraiserVariation (::std::auto_ptr< MaximumAbsolutePressureAppraiserVariation_type > x)
    {
      this->MaximumAbsolutePressureAppraiserVariation_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteSpeedAppraiserVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteSpeedAppraiserVariation () const
    {
      return this->MaximumAbsoluteSpeedAppraiserVariation_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteSpeedAppraiserVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteSpeedAppraiserVariation ()
    {
      return this->MaximumAbsoluteSpeedAppraiserVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteSpeedAppraiserVariation (const MaximumAbsoluteSpeedAppraiserVariation_type& x)
    {
      this->MaximumAbsoluteSpeedAppraiserVariation_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteSpeedAppraiserVariation (const MaximumAbsoluteSpeedAppraiserVariation_optional& x)
    {
      this->MaximumAbsoluteSpeedAppraiserVariation_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteSpeedAppraiserVariation (::std::auto_ptr< MaximumAbsoluteSpeedAppraiserVariation_type > x)
    {
      this->MaximumAbsoluteSpeedAppraiserVariation_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteTemperatureAppraiserVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteTemperatureAppraiserVariation () const
    {
      return this->MaximumAbsoluteTemperatureAppraiserVariation_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteTemperatureAppraiserVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteTemperatureAppraiserVariation ()
    {
      return this->MaximumAbsoluteTemperatureAppraiserVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteTemperatureAppraiserVariation (const MaximumAbsoluteTemperatureAppraiserVariation_type& x)
    {
      this->MaximumAbsoluteTemperatureAppraiserVariation_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteTemperatureAppraiserVariation (const MaximumAbsoluteTemperatureAppraiserVariation_optional& x)
    {
      this->MaximumAbsoluteTemperatureAppraiserVariation_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteTemperatureAppraiserVariation (::std::auto_ptr< MaximumAbsoluteTemperatureAppraiserVariation_type > x)
    {
      this->MaximumAbsoluteTemperatureAppraiserVariation_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteTimeAppraiserVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteTimeAppraiserVariation () const
    {
      return this->MaximumAbsoluteTimeAppraiserVariation_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteTimeAppraiserVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteTimeAppraiserVariation ()
    {
      return this->MaximumAbsoluteTimeAppraiserVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteTimeAppraiserVariation (const MaximumAbsoluteTimeAppraiserVariation_type& x)
    {
      this->MaximumAbsoluteTimeAppraiserVariation_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteTimeAppraiserVariation (const MaximumAbsoluteTimeAppraiserVariation_optional& x)
    {
      this->MaximumAbsoluteTimeAppraiserVariation_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteTimeAppraiserVariation (::std::auto_ptr< MaximumAbsoluteTimeAppraiserVariation_type > x)
    {
      this->MaximumAbsoluteTimeAppraiserVariation_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteUserDefinedUnitAppraiserVariation_sequence& GageRandRStudyPlanType::
    MaximumAbsoluteUserDefinedUnitAppraiserVariation () const
    {
      return this->MaximumAbsoluteUserDefinedUnitAppraiserVariation_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteUserDefinedUnitAppraiserVariation_sequence& GageRandRStudyPlanType::
    MaximumAbsoluteUserDefinedUnitAppraiserVariation ()
    {
      return this->MaximumAbsoluteUserDefinedUnitAppraiserVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteUserDefinedUnitAppraiserVariation (const MaximumAbsoluteUserDefinedUnitAppraiserVariation_sequence& s)
    {
      this->MaximumAbsoluteUserDefinedUnitAppraiserVariation_ = s;
    }

    const GageRandRStudyPlanType::MaximumRelativeEquipmentVariation_optional& GageRandRStudyPlanType::
    MaximumRelativeEquipmentVariation () const
    {
      return this->MaximumRelativeEquipmentVariation_;
    }

    GageRandRStudyPlanType::MaximumRelativeEquipmentVariation_optional& GageRandRStudyPlanType::
    MaximumRelativeEquipmentVariation ()
    {
      return this->MaximumRelativeEquipmentVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumRelativeEquipmentVariation (const MaximumRelativeEquipmentVariation_type& x)
    {
      this->MaximumRelativeEquipmentVariation_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumRelativeEquipmentVariation (const MaximumRelativeEquipmentVariation_optional& x)
    {
      this->MaximumRelativeEquipmentVariation_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumRelativeEquipmentVariation (::std::auto_ptr< MaximumRelativeEquipmentVariation_type > x)
    {
      this->MaximumRelativeEquipmentVariation_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteLinearEquipmentVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteLinearEquipmentVariation () const
    {
      return this->MaximumAbsoluteLinearEquipmentVariation_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteLinearEquipmentVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteLinearEquipmentVariation ()
    {
      return this->MaximumAbsoluteLinearEquipmentVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteLinearEquipmentVariation (const MaximumAbsoluteLinearEquipmentVariation_type& x)
    {
      this->MaximumAbsoluteLinearEquipmentVariation_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteLinearEquipmentVariation (const MaximumAbsoluteLinearEquipmentVariation_optional& x)
    {
      this->MaximumAbsoluteLinearEquipmentVariation_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteLinearEquipmentVariation (::std::auto_ptr< MaximumAbsoluteLinearEquipmentVariation_type > x)
    {
      this->MaximumAbsoluteLinearEquipmentVariation_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteAngularEquipmentVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteAngularEquipmentVariation () const
    {
      return this->MaximumAbsoluteAngularEquipmentVariation_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteAngularEquipmentVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteAngularEquipmentVariation ()
    {
      return this->MaximumAbsoluteAngularEquipmentVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteAngularEquipmentVariation (const MaximumAbsoluteAngularEquipmentVariation_type& x)
    {
      this->MaximumAbsoluteAngularEquipmentVariation_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteAngularEquipmentVariation (const MaximumAbsoluteAngularEquipmentVariation_optional& x)
    {
      this->MaximumAbsoluteAngularEquipmentVariation_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteAngularEquipmentVariation (::std::auto_ptr< MaximumAbsoluteAngularEquipmentVariation_type > x)
    {
      this->MaximumAbsoluteAngularEquipmentVariation_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteAreaEquipmentVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteAreaEquipmentVariation () const
    {
      return this->MaximumAbsoluteAreaEquipmentVariation_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteAreaEquipmentVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteAreaEquipmentVariation ()
    {
      return this->MaximumAbsoluteAreaEquipmentVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteAreaEquipmentVariation (const MaximumAbsoluteAreaEquipmentVariation_type& x)
    {
      this->MaximumAbsoluteAreaEquipmentVariation_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteAreaEquipmentVariation (const MaximumAbsoluteAreaEquipmentVariation_optional& x)
    {
      this->MaximumAbsoluteAreaEquipmentVariation_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteAreaEquipmentVariation (::std::auto_ptr< MaximumAbsoluteAreaEquipmentVariation_type > x)
    {
      this->MaximumAbsoluteAreaEquipmentVariation_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteForceEquipmentVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteForceEquipmentVariation () const
    {
      return this->MaximumAbsoluteForceEquipmentVariation_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteForceEquipmentVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteForceEquipmentVariation ()
    {
      return this->MaximumAbsoluteForceEquipmentVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteForceEquipmentVariation (const MaximumAbsoluteForceEquipmentVariation_type& x)
    {
      this->MaximumAbsoluteForceEquipmentVariation_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteForceEquipmentVariation (const MaximumAbsoluteForceEquipmentVariation_optional& x)
    {
      this->MaximumAbsoluteForceEquipmentVariation_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteForceEquipmentVariation (::std::auto_ptr< MaximumAbsoluteForceEquipmentVariation_type > x)
    {
      this->MaximumAbsoluteForceEquipmentVariation_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteMassEquipmentVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteMassEquipmentVariation () const
    {
      return this->MaximumAbsoluteMassEquipmentVariation_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteMassEquipmentVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteMassEquipmentVariation ()
    {
      return this->MaximumAbsoluteMassEquipmentVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteMassEquipmentVariation (const MaximumAbsoluteMassEquipmentVariation_type& x)
    {
      this->MaximumAbsoluteMassEquipmentVariation_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteMassEquipmentVariation (const MaximumAbsoluteMassEquipmentVariation_optional& x)
    {
      this->MaximumAbsoluteMassEquipmentVariation_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteMassEquipmentVariation (::std::auto_ptr< MaximumAbsoluteMassEquipmentVariation_type > x)
    {
      this->MaximumAbsoluteMassEquipmentVariation_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsolutePressureEquipmentVariation_optional& GageRandRStudyPlanType::
    MaximumAbsolutePressureEquipmentVariation () const
    {
      return this->MaximumAbsolutePressureEquipmentVariation_;
    }

    GageRandRStudyPlanType::MaximumAbsolutePressureEquipmentVariation_optional& GageRandRStudyPlanType::
    MaximumAbsolutePressureEquipmentVariation ()
    {
      return this->MaximumAbsolutePressureEquipmentVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsolutePressureEquipmentVariation (const MaximumAbsolutePressureEquipmentVariation_type& x)
    {
      this->MaximumAbsolutePressureEquipmentVariation_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsolutePressureEquipmentVariation (const MaximumAbsolutePressureEquipmentVariation_optional& x)
    {
      this->MaximumAbsolutePressureEquipmentVariation_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsolutePressureEquipmentVariation (::std::auto_ptr< MaximumAbsolutePressureEquipmentVariation_type > x)
    {
      this->MaximumAbsolutePressureEquipmentVariation_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteSpeedEquipmentVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteSpeedEquipmentVariation () const
    {
      return this->MaximumAbsoluteSpeedEquipmentVariation_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteSpeedEquipmentVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteSpeedEquipmentVariation ()
    {
      return this->MaximumAbsoluteSpeedEquipmentVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteSpeedEquipmentVariation (const MaximumAbsoluteSpeedEquipmentVariation_type& x)
    {
      this->MaximumAbsoluteSpeedEquipmentVariation_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteSpeedEquipmentVariation (const MaximumAbsoluteSpeedEquipmentVariation_optional& x)
    {
      this->MaximumAbsoluteSpeedEquipmentVariation_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteSpeedEquipmentVariation (::std::auto_ptr< MaximumAbsoluteSpeedEquipmentVariation_type > x)
    {
      this->MaximumAbsoluteSpeedEquipmentVariation_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteTemperatureEquipmentVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteTemperatureEquipmentVariation () const
    {
      return this->MaximumAbsoluteTemperatureEquipmentVariation_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteTemperatureEquipmentVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteTemperatureEquipmentVariation ()
    {
      return this->MaximumAbsoluteTemperatureEquipmentVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteTemperatureEquipmentVariation (const MaximumAbsoluteTemperatureEquipmentVariation_type& x)
    {
      this->MaximumAbsoluteTemperatureEquipmentVariation_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteTemperatureEquipmentVariation (const MaximumAbsoluteTemperatureEquipmentVariation_optional& x)
    {
      this->MaximumAbsoluteTemperatureEquipmentVariation_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteTemperatureEquipmentVariation (::std::auto_ptr< MaximumAbsoluteTemperatureEquipmentVariation_type > x)
    {
      this->MaximumAbsoluteTemperatureEquipmentVariation_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteTimeEquipmentVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteTimeEquipmentVariation () const
    {
      return this->MaximumAbsoluteTimeEquipmentVariation_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteTimeEquipmentVariation_optional& GageRandRStudyPlanType::
    MaximumAbsoluteTimeEquipmentVariation ()
    {
      return this->MaximumAbsoluteTimeEquipmentVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteTimeEquipmentVariation (const MaximumAbsoluteTimeEquipmentVariation_type& x)
    {
      this->MaximumAbsoluteTimeEquipmentVariation_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteTimeEquipmentVariation (const MaximumAbsoluteTimeEquipmentVariation_optional& x)
    {
      this->MaximumAbsoluteTimeEquipmentVariation_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteTimeEquipmentVariation (::std::auto_ptr< MaximumAbsoluteTimeEquipmentVariation_type > x)
    {
      this->MaximumAbsoluteTimeEquipmentVariation_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteUserDefinedUnitEquipmentVariation_sequence& GageRandRStudyPlanType::
    MaximumAbsoluteUserDefinedUnitEquipmentVariation () const
    {
      return this->MaximumAbsoluteUserDefinedUnitEquipmentVariation_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteUserDefinedUnitEquipmentVariation_sequence& GageRandRStudyPlanType::
    MaximumAbsoluteUserDefinedUnitEquipmentVariation ()
    {
      return this->MaximumAbsoluteUserDefinedUnitEquipmentVariation_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteUserDefinedUnitEquipmentVariation (const MaximumAbsoluteUserDefinedUnitEquipmentVariation_sequence& s)
    {
      this->MaximumAbsoluteUserDefinedUnitEquipmentVariation_ = s;
    }

    const GageRandRStudyPlanType::MaximumRelativeTotalRandR_optional& GageRandRStudyPlanType::
    MaximumRelativeTotalRandR () const
    {
      return this->MaximumRelativeTotalRandR_;
    }

    GageRandRStudyPlanType::MaximumRelativeTotalRandR_optional& GageRandRStudyPlanType::
    MaximumRelativeTotalRandR ()
    {
      return this->MaximumRelativeTotalRandR_;
    }

    void GageRandRStudyPlanType::
    MaximumRelativeTotalRandR (const MaximumRelativeTotalRandR_type& x)
    {
      this->MaximumRelativeTotalRandR_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumRelativeTotalRandR (const MaximumRelativeTotalRandR_optional& x)
    {
      this->MaximumRelativeTotalRandR_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumRelativeTotalRandR (::std::auto_ptr< MaximumRelativeTotalRandR_type > x)
    {
      this->MaximumRelativeTotalRandR_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteLinearTotalRandR_optional& GageRandRStudyPlanType::
    MaximumAbsoluteLinearTotalRandR () const
    {
      return this->MaximumAbsoluteLinearTotalRandR_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteLinearTotalRandR_optional& GageRandRStudyPlanType::
    MaximumAbsoluteLinearTotalRandR ()
    {
      return this->MaximumAbsoluteLinearTotalRandR_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteLinearTotalRandR (const MaximumAbsoluteLinearTotalRandR_type& x)
    {
      this->MaximumAbsoluteLinearTotalRandR_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteLinearTotalRandR (const MaximumAbsoluteLinearTotalRandR_optional& x)
    {
      this->MaximumAbsoluteLinearTotalRandR_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteLinearTotalRandR (::std::auto_ptr< MaximumAbsoluteLinearTotalRandR_type > x)
    {
      this->MaximumAbsoluteLinearTotalRandR_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteAngularTotalRandR_optional& GageRandRStudyPlanType::
    MaximumAbsoluteAngularTotalRandR () const
    {
      return this->MaximumAbsoluteAngularTotalRandR_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteAngularTotalRandR_optional& GageRandRStudyPlanType::
    MaximumAbsoluteAngularTotalRandR ()
    {
      return this->MaximumAbsoluteAngularTotalRandR_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteAngularTotalRandR (const MaximumAbsoluteAngularTotalRandR_type& x)
    {
      this->MaximumAbsoluteAngularTotalRandR_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteAngularTotalRandR (const MaximumAbsoluteAngularTotalRandR_optional& x)
    {
      this->MaximumAbsoluteAngularTotalRandR_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteAngularTotalRandR (::std::auto_ptr< MaximumAbsoluteAngularTotalRandR_type > x)
    {
      this->MaximumAbsoluteAngularTotalRandR_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteAreaTotalRandR_optional& GageRandRStudyPlanType::
    MaximumAbsoluteAreaTotalRandR () const
    {
      return this->MaximumAbsoluteAreaTotalRandR_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteAreaTotalRandR_optional& GageRandRStudyPlanType::
    MaximumAbsoluteAreaTotalRandR ()
    {
      return this->MaximumAbsoluteAreaTotalRandR_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteAreaTotalRandR (const MaximumAbsoluteAreaTotalRandR_type& x)
    {
      this->MaximumAbsoluteAreaTotalRandR_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteAreaTotalRandR (const MaximumAbsoluteAreaTotalRandR_optional& x)
    {
      this->MaximumAbsoluteAreaTotalRandR_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteAreaTotalRandR (::std::auto_ptr< MaximumAbsoluteAreaTotalRandR_type > x)
    {
      this->MaximumAbsoluteAreaTotalRandR_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteForceTotalRandR_optional& GageRandRStudyPlanType::
    MaximumAbsoluteForceTotalRandR () const
    {
      return this->MaximumAbsoluteForceTotalRandR_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteForceTotalRandR_optional& GageRandRStudyPlanType::
    MaximumAbsoluteForceTotalRandR ()
    {
      return this->MaximumAbsoluteForceTotalRandR_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteForceTotalRandR (const MaximumAbsoluteForceTotalRandR_type& x)
    {
      this->MaximumAbsoluteForceTotalRandR_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteForceTotalRandR (const MaximumAbsoluteForceTotalRandR_optional& x)
    {
      this->MaximumAbsoluteForceTotalRandR_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteForceTotalRandR (::std::auto_ptr< MaximumAbsoluteForceTotalRandR_type > x)
    {
      this->MaximumAbsoluteForceTotalRandR_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteMassTotalRandR_optional& GageRandRStudyPlanType::
    MaximumAbsoluteMassTotalRandR () const
    {
      return this->MaximumAbsoluteMassTotalRandR_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteMassTotalRandR_optional& GageRandRStudyPlanType::
    MaximumAbsoluteMassTotalRandR ()
    {
      return this->MaximumAbsoluteMassTotalRandR_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteMassTotalRandR (const MaximumAbsoluteMassTotalRandR_type& x)
    {
      this->MaximumAbsoluteMassTotalRandR_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteMassTotalRandR (const MaximumAbsoluteMassTotalRandR_optional& x)
    {
      this->MaximumAbsoluteMassTotalRandR_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteMassTotalRandR (::std::auto_ptr< MaximumAbsoluteMassTotalRandR_type > x)
    {
      this->MaximumAbsoluteMassTotalRandR_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsolutePressureTotalRandR_optional& GageRandRStudyPlanType::
    MaximumAbsolutePressureTotalRandR () const
    {
      return this->MaximumAbsolutePressureTotalRandR_;
    }

    GageRandRStudyPlanType::MaximumAbsolutePressureTotalRandR_optional& GageRandRStudyPlanType::
    MaximumAbsolutePressureTotalRandR ()
    {
      return this->MaximumAbsolutePressureTotalRandR_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsolutePressureTotalRandR (const MaximumAbsolutePressureTotalRandR_type& x)
    {
      this->MaximumAbsolutePressureTotalRandR_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsolutePressureTotalRandR (const MaximumAbsolutePressureTotalRandR_optional& x)
    {
      this->MaximumAbsolutePressureTotalRandR_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsolutePressureTotalRandR (::std::auto_ptr< MaximumAbsolutePressureTotalRandR_type > x)
    {
      this->MaximumAbsolutePressureTotalRandR_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteSpeedTotalRandR_optional& GageRandRStudyPlanType::
    MaximumAbsoluteSpeedTotalRandR () const
    {
      return this->MaximumAbsoluteSpeedTotalRandR_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteSpeedTotalRandR_optional& GageRandRStudyPlanType::
    MaximumAbsoluteSpeedTotalRandR ()
    {
      return this->MaximumAbsoluteSpeedTotalRandR_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteSpeedTotalRandR (const MaximumAbsoluteSpeedTotalRandR_type& x)
    {
      this->MaximumAbsoluteSpeedTotalRandR_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteSpeedTotalRandR (const MaximumAbsoluteSpeedTotalRandR_optional& x)
    {
      this->MaximumAbsoluteSpeedTotalRandR_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteSpeedTotalRandR (::std::auto_ptr< MaximumAbsoluteSpeedTotalRandR_type > x)
    {
      this->MaximumAbsoluteSpeedTotalRandR_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteTemperatureTotalRandR_optional& GageRandRStudyPlanType::
    MaximumAbsoluteTemperatureTotalRandR () const
    {
      return this->MaximumAbsoluteTemperatureTotalRandR_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteTemperatureTotalRandR_optional& GageRandRStudyPlanType::
    MaximumAbsoluteTemperatureTotalRandR ()
    {
      return this->MaximumAbsoluteTemperatureTotalRandR_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteTemperatureTotalRandR (const MaximumAbsoluteTemperatureTotalRandR_type& x)
    {
      this->MaximumAbsoluteTemperatureTotalRandR_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteTemperatureTotalRandR (const MaximumAbsoluteTemperatureTotalRandR_optional& x)
    {
      this->MaximumAbsoluteTemperatureTotalRandR_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteTemperatureTotalRandR (::std::auto_ptr< MaximumAbsoluteTemperatureTotalRandR_type > x)
    {
      this->MaximumAbsoluteTemperatureTotalRandR_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteTimeTotalRandR_optional& GageRandRStudyPlanType::
    MaximumAbsoluteTimeTotalRandR () const
    {
      return this->MaximumAbsoluteTimeTotalRandR_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteTimeTotalRandR_optional& GageRandRStudyPlanType::
    MaximumAbsoluteTimeTotalRandR ()
    {
      return this->MaximumAbsoluteTimeTotalRandR_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteTimeTotalRandR (const MaximumAbsoluteTimeTotalRandR_type& x)
    {
      this->MaximumAbsoluteTimeTotalRandR_.set (x);
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteTimeTotalRandR (const MaximumAbsoluteTimeTotalRandR_optional& x)
    {
      this->MaximumAbsoluteTimeTotalRandR_ = x;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteTimeTotalRandR (::std::auto_ptr< MaximumAbsoluteTimeTotalRandR_type > x)
    {
      this->MaximumAbsoluteTimeTotalRandR_.set (x);
    }

    const GageRandRStudyPlanType::MaximumAbsoluteUserDefinedUnitTotalRandR_sequence& GageRandRStudyPlanType::
    MaximumAbsoluteUserDefinedUnitTotalRandR () const
    {
      return this->MaximumAbsoluteUserDefinedUnitTotalRandR_;
    }

    GageRandRStudyPlanType::MaximumAbsoluteUserDefinedUnitTotalRandR_sequence& GageRandRStudyPlanType::
    MaximumAbsoluteUserDefinedUnitTotalRandR ()
    {
      return this->MaximumAbsoluteUserDefinedUnitTotalRandR_;
    }

    void GageRandRStudyPlanType::
    MaximumAbsoluteUserDefinedUnitTotalRandR (const MaximumAbsoluteUserDefinedUnitTotalRandR_sequence& s)
    {
      this->MaximumAbsoluteUserDefinedUnitTotalRandR_ = s;
    }


    // ControlMethodType
    // 

    const ControlMethodType::AssignableCauseId_sequence& ControlMethodType::
    AssignableCauseId () const
    {
      return this->AssignableCauseId_;
    }

    ControlMethodType::AssignableCauseId_sequence& ControlMethodType::
    AssignableCauseId ()
    {
      return this->AssignableCauseId_;
    }

    void ControlMethodType::
    AssignableCauseId (const AssignableCauseId_sequence& s)
    {
      this->AssignableCauseId_ = s;
    }

    const ControlMethodType::NumOutOfTolerance_optional& ControlMethodType::
    NumOutOfTolerance () const
    {
      return this->NumOutOfTolerance_;
    }

    ControlMethodType::NumOutOfTolerance_optional& ControlMethodType::
    NumOutOfTolerance ()
    {
      return this->NumOutOfTolerance_;
    }

    void ControlMethodType::
    NumOutOfTolerance (const NumOutOfTolerance_type& x)
    {
      this->NumOutOfTolerance_.set (x);
    }

    void ControlMethodType::
    NumOutOfTolerance (const NumOutOfTolerance_optional& x)
    {
      this->NumOutOfTolerance_ = x;
    }

    void ControlMethodType::
    NumOutOfTolerance (::std::auto_ptr< NumOutOfTolerance_type > x)
    {
      this->NumOutOfTolerance_.set (x);
    }

    const ControlMethodType::CpThreshold_optional& ControlMethodType::
    CpThreshold () const
    {
      return this->CpThreshold_;
    }

    ControlMethodType::CpThreshold_optional& ControlMethodType::
    CpThreshold ()
    {
      return this->CpThreshold_;
    }

    void ControlMethodType::
    CpThreshold (const CpThreshold_type& x)
    {
      this->CpThreshold_.set (x);
    }

    void ControlMethodType::
    CpThreshold (const CpThreshold_optional& x)
    {
      this->CpThreshold_ = x;
    }

    void ControlMethodType::
    CpThreshold (::std::auto_ptr< CpThreshold_type > x)
    {
      this->CpThreshold_.set (x);
    }

    const ControlMethodType::CpkThreshold_optional& ControlMethodType::
    CpkThreshold () const
    {
      return this->CpkThreshold_;
    }

    ControlMethodType::CpkThreshold_optional& ControlMethodType::
    CpkThreshold ()
    {
      return this->CpkThreshold_;
    }

    void ControlMethodType::
    CpkThreshold (const CpkThreshold_type& x)
    {
      this->CpkThreshold_.set (x);
    }

    void ControlMethodType::
    CpkThreshold (const CpkThreshold_optional& x)
    {
      this->CpkThreshold_ = x;
    }

    void ControlMethodType::
    CpkThreshold (::std::auto_ptr< CpkThreshold_type > x)
    {
      this->CpkThreshold_.set (x);
    }

    const ControlMethodType::PpThreshold_optional& ControlMethodType::
    PpThreshold () const
    {
      return this->PpThreshold_;
    }

    ControlMethodType::PpThreshold_optional& ControlMethodType::
    PpThreshold ()
    {
      return this->PpThreshold_;
    }

    void ControlMethodType::
    PpThreshold (const PpThreshold_type& x)
    {
      this->PpThreshold_.set (x);
    }

    void ControlMethodType::
    PpThreshold (const PpThreshold_optional& x)
    {
      this->PpThreshold_ = x;
    }

    void ControlMethodType::
    PpThreshold (::std::auto_ptr< PpThreshold_type > x)
    {
      this->PpThreshold_.set (x);
    }

    const ControlMethodType::PpkThreshold_optional& ControlMethodType::
    PpkThreshold () const
    {
      return this->PpkThreshold_;
    }

    ControlMethodType::PpkThreshold_optional& ControlMethodType::
    PpkThreshold ()
    {
      return this->PpkThreshold_;
    }

    void ControlMethodType::
    PpkThreshold (const PpkThreshold_type& x)
    {
      this->PpkThreshold_.set (x);
    }

    void ControlMethodType::
    PpkThreshold (const PpkThreshold_optional& x)
    {
      this->PpkThreshold_ = x;
    }

    void ControlMethodType::
    PpkThreshold (::std::auto_ptr< PpkThreshold_type > x)
    {
      this->PpkThreshold_.set (x);
    }

    const ControlMethodType::NumOutOfControl_optional& ControlMethodType::
    NumOutOfControl () const
    {
      return this->NumOutOfControl_;
    }

    ControlMethodType::NumOutOfControl_optional& ControlMethodType::
    NumOutOfControl ()
    {
      return this->NumOutOfControl_;
    }

    void ControlMethodType::
    NumOutOfControl (const NumOutOfControl_type& x)
    {
      this->NumOutOfControl_.set (x);
    }

    void ControlMethodType::
    NumOutOfControl (const NumOutOfControl_optional& x)
    {
      this->NumOutOfControl_ = x;
    }

    void ControlMethodType::
    NumOutOfControl (::std::auto_ptr< NumOutOfControl_type > x)
    {
      this->NumOutOfControl_.set (x);
    }

    const ControlMethodType::TrendGrouping_optional& ControlMethodType::
    TrendGrouping () const
    {
      return this->TrendGrouping_;
    }

    ControlMethodType::TrendGrouping_optional& ControlMethodType::
    TrendGrouping ()
    {
      return this->TrendGrouping_;
    }

    void ControlMethodType::
    TrendGrouping (const TrendGrouping_type& x)
    {
      this->TrendGrouping_.set (x);
    }

    void ControlMethodType::
    TrendGrouping (const TrendGrouping_optional& x)
    {
      this->TrendGrouping_ = x;
    }

    void ControlMethodType::
    TrendGrouping (::std::auto_ptr< TrendGrouping_type > x)
    {
      this->TrendGrouping_.set (x);
    }

    const ControlMethodType::SkewGrouping_optional& ControlMethodType::
    SkewGrouping () const
    {
      return this->SkewGrouping_;
    }

    ControlMethodType::SkewGrouping_optional& ControlMethodType::
    SkewGrouping ()
    {
      return this->SkewGrouping_;
    }

    void ControlMethodType::
    SkewGrouping (const SkewGrouping_type& x)
    {
      this->SkewGrouping_.set (x);
    }

    void ControlMethodType::
    SkewGrouping (const SkewGrouping_optional& x)
    {
      this->SkewGrouping_ = x;
    }

    void ControlMethodType::
    SkewGrouping (::std::auto_ptr< SkewGrouping_type > x)
    {
      this->SkewGrouping_.set (x);
    }

    const ControlMethodType::OneThirdGrouping_optional& ControlMethodType::
    OneThirdGrouping () const
    {
      return this->OneThirdGrouping_;
    }

    ControlMethodType::OneThirdGrouping_optional& ControlMethodType::
    OneThirdGrouping ()
    {
      return this->OneThirdGrouping_;
    }

    void ControlMethodType::
    OneThirdGrouping (const OneThirdGrouping_type& x)
    {
      this->OneThirdGrouping_.set (x);
    }

    void ControlMethodType::
    OneThirdGrouping (const OneThirdGrouping_optional& x)
    {
      this->OneThirdGrouping_ = x;
    }

    void ControlMethodType::
    OneThirdGrouping (::std::auto_ptr< OneThirdGrouping_type > x)
    {
      this->OneThirdGrouping_.set (x);
    }

    const ControlMethodType::TwoThirdsGrouping_optional& ControlMethodType::
    TwoThirdsGrouping () const
    {
      return this->TwoThirdsGrouping_;
    }

    ControlMethodType::TwoThirdsGrouping_optional& ControlMethodType::
    TwoThirdsGrouping ()
    {
      return this->TwoThirdsGrouping_;
    }

    void ControlMethodType::
    TwoThirdsGrouping (const TwoThirdsGrouping_type& x)
    {
      this->TwoThirdsGrouping_.set (x);
    }

    void ControlMethodType::
    TwoThirdsGrouping (const TwoThirdsGrouping_optional& x)
    {
      this->TwoThirdsGrouping_ = x;
    }

    void ControlMethodType::
    TwoThirdsGrouping (::std::auto_ptr< TwoThirdsGrouping_type > x)
    {
      this->TwoThirdsGrouping_.set (x);
    }

    const ControlMethodType::Oscillation_optional& ControlMethodType::
    Oscillation () const
    {
      return this->Oscillation_;
    }

    ControlMethodType::Oscillation_optional& ControlMethodType::
    Oscillation ()
    {
      return this->Oscillation_;
    }

    void ControlMethodType::
    Oscillation (const Oscillation_type& x)
    {
      this->Oscillation_.set (x);
    }

    void ControlMethodType::
    Oscillation (const Oscillation_optional& x)
    {
      this->Oscillation_ = x;
    }

    void ControlMethodType::
    Oscillation (::std::auto_ptr< Oscillation_type > x)
    {
      this->Oscillation_.set (x);
    }

    const ControlMethodType::Stratification_optional& ControlMethodType::
    Stratification () const
    {
      return this->Stratification_;
    }

    ControlMethodType::Stratification_optional& ControlMethodType::
    Stratification ()
    {
      return this->Stratification_;
    }

    void ControlMethodType::
    Stratification (const Stratification_type& x)
    {
      this->Stratification_.set (x);
    }

    void ControlMethodType::
    Stratification (const Stratification_optional& x)
    {
      this->Stratification_ = x;
    }

    void ControlMethodType::
    Stratification (::std::auto_ptr< Stratification_type > x)
    {
      this->Stratification_.set (x);
    }

    const ControlMethodType::NumOutOfControlRng_optional& ControlMethodType::
    NumOutOfControlRng () const
    {
      return this->NumOutOfControlRng_;
    }

    ControlMethodType::NumOutOfControlRng_optional& ControlMethodType::
    NumOutOfControlRng ()
    {
      return this->NumOutOfControlRng_;
    }

    void ControlMethodType::
    NumOutOfControlRng (const NumOutOfControlRng_type& x)
    {
      this->NumOutOfControlRng_.set (x);
    }

    void ControlMethodType::
    NumOutOfControlRng (const NumOutOfControlRng_optional& x)
    {
      this->NumOutOfControlRng_ = x;
    }

    void ControlMethodType::
    NumOutOfControlRng (::std::auto_ptr< NumOutOfControlRng_type > x)
    {
      this->NumOutOfControlRng_.set (x);
    }

    const ControlMethodType::id_type& ControlMethodType::
    id () const
    {
      return this->id_.get ();
    }

    ControlMethodType::id_type& ControlMethodType::
    id ()
    {
      return this->id_.get ();
    }

    void ControlMethodType::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void ControlMethodType::
    id (::std::auto_ptr< id_type > x)
    {
      this->id_.set (x);
    }


    // ProductionStudyPlanType
    // 

    const ProductionStudyPlanType::SamplingMethod_type& ProductionStudyPlanType::
    SamplingMethod () const
    {
      return this->SamplingMethod_.get ();
    }

    ProductionStudyPlanType::SamplingMethod_type& ProductionStudyPlanType::
    SamplingMethod ()
    {
      return this->SamplingMethod_.get ();
    }

    void ProductionStudyPlanType::
    SamplingMethod (const SamplingMethod_type& x)
    {
      this->SamplingMethod_.set (x);
    }

    void ProductionStudyPlanType::
    SamplingMethod (::std::auto_ptr< SamplingMethod_type > x)
    {
      this->SamplingMethod_.set (x);
    }

    const ProductionStudyPlanType::ControlMethod_sequence& ProductionStudyPlanType::
    ControlMethod () const
    {
      return this->ControlMethod_;
    }

    ProductionStudyPlanType::ControlMethod_sequence& ProductionStudyPlanType::
    ControlMethod ()
    {
      return this->ControlMethod_;
    }

    void ProductionStudyPlanType::
    ControlMethod (const ControlMethod_sequence& s)
    {
      this->ControlMethod_ = s;
    }


    // StatisticalStudyResultsBaseType
    // 

    const StatisticalStudyResultsBaseType::Attributes_optional& StatisticalStudyResultsBaseType::
    Attributes () const
    {
      return this->Attributes_;
    }

    StatisticalStudyResultsBaseType::Attributes_optional& StatisticalStudyResultsBaseType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void StatisticalStudyResultsBaseType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void StatisticalStudyResultsBaseType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void StatisticalStudyResultsBaseType::
    Attributes (::std::auto_ptr< Attributes_type > x)
    {
      this->Attributes_.set (x);
    }

    const StatisticalStudyResultsBaseType::ThisStatisticalStudyResultsInstanceQPId_optional& StatisticalStudyResultsBaseType::
    ThisStatisticalStudyResultsInstanceQPId () const
    {
      return this->ThisStatisticalStudyResultsInstanceQPId_;
    }

    StatisticalStudyResultsBaseType::ThisStatisticalStudyResultsInstanceQPId_optional& StatisticalStudyResultsBaseType::
    ThisStatisticalStudyResultsInstanceQPId ()
    {
      return this->ThisStatisticalStudyResultsInstanceQPId_;
    }

    void StatisticalStudyResultsBaseType::
    ThisStatisticalStudyResultsInstanceQPId (const ThisStatisticalStudyResultsInstanceQPId_type& x)
    {
      this->ThisStatisticalStudyResultsInstanceQPId_.set (x);
    }

    void StatisticalStudyResultsBaseType::
    ThisStatisticalStudyResultsInstanceQPId (const ThisStatisticalStudyResultsInstanceQPId_optional& x)
    {
      this->ThisStatisticalStudyResultsInstanceQPId_ = x;
    }

    void StatisticalStudyResultsBaseType::
    ThisStatisticalStudyResultsInstanceQPId (::std::auto_ptr< ThisStatisticalStudyResultsInstanceQPId_type > x)
    {
      this->ThisStatisticalStudyResultsInstanceQPId_.set (x);
    }

    const StatisticalStudyResultsBaseType::Status_type& StatisticalStudyResultsBaseType::
    Status () const
    {
      return this->Status_.get ();
    }

    StatisticalStudyResultsBaseType::Status_type& StatisticalStudyResultsBaseType::
    Status ()
    {
      return this->Status_.get ();
    }

    void StatisticalStudyResultsBaseType::
    Status (const Status_type& x)
    {
      this->Status_.set (x);
    }

    void StatisticalStudyResultsBaseType::
    Status (::std::auto_ptr< Status_type > x)
    {
      this->Status_.set (x);
    }

    const StatisticalStudyResultsBaseType::StudyIssue_sequence& StatisticalStudyResultsBaseType::
    StudyIssue () const
    {
      return this->StudyIssue_;
    }

    StatisticalStudyResultsBaseType::StudyIssue_sequence& StatisticalStudyResultsBaseType::
    StudyIssue ()
    {
      return this->StudyIssue_;
    }

    void StatisticalStudyResultsBaseType::
    StudyIssue (const StudyIssue_sequence& s)
    {
      this->StudyIssue_ = s;
    }

    const StatisticalStudyResultsBaseType::InspectionTraceability_optional& StatisticalStudyResultsBaseType::
    InspectionTraceability () const
    {
      return this->InspectionTraceability_;
    }

    StatisticalStudyResultsBaseType::InspectionTraceability_optional& StatisticalStudyResultsBaseType::
    InspectionTraceability ()
    {
      return this->InspectionTraceability_;
    }

    void StatisticalStudyResultsBaseType::
    InspectionTraceability (const InspectionTraceability_type& x)
    {
      this->InspectionTraceability_.set (x);
    }

    void StatisticalStudyResultsBaseType::
    InspectionTraceability (const InspectionTraceability_optional& x)
    {
      this->InspectionTraceability_ = x;
    }

    void StatisticalStudyResultsBaseType::
    InspectionTraceability (::std::auto_ptr< InspectionTraceability_type > x)
    {
      this->InspectionTraceability_.set (x);
    }

    const StatisticalStudyResultsBaseType::Name_optional& StatisticalStudyResultsBaseType::
    Name () const
    {
      return this->Name_;
    }

    StatisticalStudyResultsBaseType::Name_optional& StatisticalStudyResultsBaseType::
    Name ()
    {
      return this->Name_;
    }

    void StatisticalStudyResultsBaseType::
    Name (const Name_type& x)
    {
      this->Name_.set (x);
    }

    void StatisticalStudyResultsBaseType::
    Name (const Name_optional& x)
    {
      this->Name_ = x;
    }

    void StatisticalStudyResultsBaseType::
    Name (::std::auto_ptr< Name_type > x)
    {
      this->Name_.set (x);
    }

    const StatisticalStudyResultsBaseType::Description_optional& StatisticalStudyResultsBaseType::
    Description () const
    {
      return this->Description_;
    }

    StatisticalStudyResultsBaseType::Description_optional& StatisticalStudyResultsBaseType::
    Description ()
    {
      return this->Description_;
    }

    void StatisticalStudyResultsBaseType::
    Description (const Description_type& x)
    {
      this->Description_.set (x);
    }

    void StatisticalStudyResultsBaseType::
    Description (const Description_optional& x)
    {
      this->Description_ = x;
    }

    void StatisticalStudyResultsBaseType::
    Description (::std::auto_ptr< Description_type > x)
    {
      this->Description_.set (x);
    }

    const StatisticalStudyResultsBaseType::StudyId_optional& StatisticalStudyResultsBaseType::
    StudyId () const
    {
      return this->StudyId_;
    }

    StatisticalStudyResultsBaseType::StudyId_optional& StatisticalStudyResultsBaseType::
    StudyId ()
    {
      return this->StudyId_;
    }

    void StatisticalStudyResultsBaseType::
    StudyId (const StudyId_type& x)
    {
      this->StudyId_.set (x);
    }

    void StatisticalStudyResultsBaseType::
    StudyId (const StudyId_optional& x)
    {
      this->StudyId_ = x;
    }

    void StatisticalStudyResultsBaseType::
    StudyId (::std::auto_ptr< StudyId_type > x)
    {
      this->StudyId_.set (x);
    }

    const StatisticalStudyResultsBaseType::ResultsId_sequence& StatisticalStudyResultsBaseType::
    ResultsId () const
    {
      return this->ResultsId_;
    }

    StatisticalStudyResultsBaseType::ResultsId_sequence& StatisticalStudyResultsBaseType::
    ResultsId ()
    {
      return this->ResultsId_;
    }

    void StatisticalStudyResultsBaseType::
    ResultsId (const ResultsId_sequence& s)
    {
      this->ResultsId_ = s;
    }

    const StatisticalStudyResultsBaseType::ResultsQPId_sequence& StatisticalStudyResultsBaseType::
    ResultsQPId () const
    {
      return this->ResultsQPId_;
    }

    StatisticalStudyResultsBaseType::ResultsQPId_sequence& StatisticalStudyResultsBaseType::
    ResultsQPId ()
    {
      return this->ResultsQPId_;
    }

    void StatisticalStudyResultsBaseType::
    ResultsQPId (const ResultsQPId_sequence& s)
    {
      this->ResultsQPId_ = s;
    }

    const StatisticalStudyResultsBaseType::ResultsFile_sequence& StatisticalStudyResultsBaseType::
    ResultsFile () const
    {
      return this->ResultsFile_;
    }

    StatisticalStudyResultsBaseType::ResultsFile_sequence& StatisticalStudyResultsBaseType::
    ResultsFile ()
    {
      return this->ResultsFile_;
    }

    void StatisticalStudyResultsBaseType::
    ResultsFile (const ResultsFile_sequence& s)
    {
      this->ResultsFile_ = s;
    }

    const StatisticalStudyResultsBaseType::AverageFeature_sequence& StatisticalStudyResultsBaseType::
    AverageFeature () const
    {
      return this->AverageFeature_;
    }

    StatisticalStudyResultsBaseType::AverageFeature_sequence& StatisticalStudyResultsBaseType::
    AverageFeature ()
    {
      return this->AverageFeature_;
    }

    void StatisticalStudyResultsBaseType::
    AverageFeature (const AverageFeature_sequence& s)
    {
      this->AverageFeature_ = s;
    }

    const StatisticalStudyResultsBaseType::CharacteristicsStats_sequence& StatisticalStudyResultsBaseType::
    CharacteristicsStats () const
    {
      return this->CharacteristicsStats_;
    }

    StatisticalStudyResultsBaseType::CharacteristicsStats_sequence& StatisticalStudyResultsBaseType::
    CharacteristicsStats ()
    {
      return this->CharacteristicsStats_;
    }

    void StatisticalStudyResultsBaseType::
    CharacteristicsStats (const CharacteristicsStats_sequence& s)
    {
      this->CharacteristicsStats_ = s;
    }

    const StatisticalStudyResultsBaseType::LinearStatsSummary_sequence& StatisticalStudyResultsBaseType::
    LinearStatsSummary () const
    {
      return this->LinearStatsSummary_;
    }

    StatisticalStudyResultsBaseType::LinearStatsSummary_sequence& StatisticalStudyResultsBaseType::
    LinearStatsSummary ()
    {
      return this->LinearStatsSummary_;
    }

    void StatisticalStudyResultsBaseType::
    LinearStatsSummary (const LinearStatsSummary_sequence& s)
    {
      this->LinearStatsSummary_ = s;
    }

    const StatisticalStudyResultsBaseType::AngularStatsSummary_sequence& StatisticalStudyResultsBaseType::
    AngularStatsSummary () const
    {
      return this->AngularStatsSummary_;
    }

    StatisticalStudyResultsBaseType::AngularStatsSummary_sequence& StatisticalStudyResultsBaseType::
    AngularStatsSummary ()
    {
      return this->AngularStatsSummary_;
    }

    void StatisticalStudyResultsBaseType::
    AngularStatsSummary (const AngularStatsSummary_sequence& s)
    {
      this->AngularStatsSummary_ = s;
    }

    const StatisticalStudyResultsBaseType::AreaStatsSummary_sequence& StatisticalStudyResultsBaseType::
    AreaStatsSummary () const
    {
      return this->AreaStatsSummary_;
    }

    StatisticalStudyResultsBaseType::AreaStatsSummary_sequence& StatisticalStudyResultsBaseType::
    AreaStatsSummary ()
    {
      return this->AreaStatsSummary_;
    }

    void StatisticalStudyResultsBaseType::
    AreaStatsSummary (const AreaStatsSummary_sequence& s)
    {
      this->AreaStatsSummary_ = s;
    }

    const StatisticalStudyResultsBaseType::ForceStatsSummary_sequence& StatisticalStudyResultsBaseType::
    ForceStatsSummary () const
    {
      return this->ForceStatsSummary_;
    }

    StatisticalStudyResultsBaseType::ForceStatsSummary_sequence& StatisticalStudyResultsBaseType::
    ForceStatsSummary ()
    {
      return this->ForceStatsSummary_;
    }

    void StatisticalStudyResultsBaseType::
    ForceStatsSummary (const ForceStatsSummary_sequence& s)
    {
      this->ForceStatsSummary_ = s;
    }

    const StatisticalStudyResultsBaseType::MassStatsSummary_sequence& StatisticalStudyResultsBaseType::
    MassStatsSummary () const
    {
      return this->MassStatsSummary_;
    }

    StatisticalStudyResultsBaseType::MassStatsSummary_sequence& StatisticalStudyResultsBaseType::
    MassStatsSummary ()
    {
      return this->MassStatsSummary_;
    }

    void StatisticalStudyResultsBaseType::
    MassStatsSummary (const MassStatsSummary_sequence& s)
    {
      this->MassStatsSummary_ = s;
    }

    const StatisticalStudyResultsBaseType::PressureStatsSummary_sequence& StatisticalStudyResultsBaseType::
    PressureStatsSummary () const
    {
      return this->PressureStatsSummary_;
    }

    StatisticalStudyResultsBaseType::PressureStatsSummary_sequence& StatisticalStudyResultsBaseType::
    PressureStatsSummary ()
    {
      return this->PressureStatsSummary_;
    }

    void StatisticalStudyResultsBaseType::
    PressureStatsSummary (const PressureStatsSummary_sequence& s)
    {
      this->PressureStatsSummary_ = s;
    }

    const StatisticalStudyResultsBaseType::SpeedStatsSummary_sequence& StatisticalStudyResultsBaseType::
    SpeedStatsSummary () const
    {
      return this->SpeedStatsSummary_;
    }

    StatisticalStudyResultsBaseType::SpeedStatsSummary_sequence& StatisticalStudyResultsBaseType::
    SpeedStatsSummary ()
    {
      return this->SpeedStatsSummary_;
    }

    void StatisticalStudyResultsBaseType::
    SpeedStatsSummary (const SpeedStatsSummary_sequence& s)
    {
      this->SpeedStatsSummary_ = s;
    }

    const StatisticalStudyResultsBaseType::TemperatureStatsSummary_sequence& StatisticalStudyResultsBaseType::
    TemperatureStatsSummary () const
    {
      return this->TemperatureStatsSummary_;
    }

    StatisticalStudyResultsBaseType::TemperatureStatsSummary_sequence& StatisticalStudyResultsBaseType::
    TemperatureStatsSummary ()
    {
      return this->TemperatureStatsSummary_;
    }

    void StatisticalStudyResultsBaseType::
    TemperatureStatsSummary (const TemperatureStatsSummary_sequence& s)
    {
      this->TemperatureStatsSummary_ = s;
    }

    const StatisticalStudyResultsBaseType::TimeStatsSummary_sequence& StatisticalStudyResultsBaseType::
    TimeStatsSummary () const
    {
      return this->TimeStatsSummary_;
    }

    StatisticalStudyResultsBaseType::TimeStatsSummary_sequence& StatisticalStudyResultsBaseType::
    TimeStatsSummary ()
    {
      return this->TimeStatsSummary_;
    }

    void StatisticalStudyResultsBaseType::
    TimeStatsSummary (const TimeStatsSummary_sequence& s)
    {
      this->TimeStatsSummary_ = s;
    }

    const StatisticalStudyResultsBaseType::UserDefinedUnitStatsSummary_sequence& StatisticalStudyResultsBaseType::
    UserDefinedUnitStatsSummary () const
    {
      return this->UserDefinedUnitStatsSummary_;
    }

    StatisticalStudyResultsBaseType::UserDefinedUnitStatsSummary_sequence& StatisticalStudyResultsBaseType::
    UserDefinedUnitStatsSummary ()
    {
      return this->UserDefinedUnitStatsSummary_;
    }

    void StatisticalStudyResultsBaseType::
    UserDefinedUnitStatsSummary (const UserDefinedUnitStatsSummary_sequence& s)
    {
      this->UserDefinedUnitStatsSummary_ = s;
    }

    const StatisticalStudyResultsBaseType::StatsSummary_sequence& StatisticalStudyResultsBaseType::
    StatsSummary () const
    {
      return this->StatsSummary_;
    }

    StatisticalStudyResultsBaseType::StatsSummary_sequence& StatisticalStudyResultsBaseType::
    StatsSummary ()
    {
      return this->StatsSummary_;
    }

    void StatisticalStudyResultsBaseType::
    StatsSummary (const StatsSummary_sequence& s)
    {
      this->StatsSummary_ = s;
    }

    const StatisticalStudyResultsBaseType::id_type& StatisticalStudyResultsBaseType::
    id () const
    {
      return this->id_.get ();
    }

    StatisticalStudyResultsBaseType::id_type& StatisticalStudyResultsBaseType::
    id ()
    {
      return this->id_.get ();
    }

    void StatisticalStudyResultsBaseType::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void StatisticalStudyResultsBaseType::
    id (::std::auto_ptr< id_type > x)
    {
      this->id_.set (x);
    }


    // LinearityStudyResultsType
    // 

    const LinearityStudyResultsType::SampleSize_type& LinearityStudyResultsType::
    SampleSize () const
    {
      return this->SampleSize_.get ();
    }

    LinearityStudyResultsType::SampleSize_type& LinearityStudyResultsType::
    SampleSize ()
    {
      return this->SampleSize_.get ();
    }

    void LinearityStudyResultsType::
    SampleSize (const SampleSize_type& x)
    {
      this->SampleSize_.set (x);
    }

    const LinearityStudyResultsType::MeasurementDeviceIds_optional& LinearityStudyResultsType::
    MeasurementDeviceIds () const
    {
      return this->MeasurementDeviceIds_;
    }

    LinearityStudyResultsType::MeasurementDeviceIds_optional& LinearityStudyResultsType::
    MeasurementDeviceIds ()
    {
      return this->MeasurementDeviceIds_;
    }

    void LinearityStudyResultsType::
    MeasurementDeviceIds (const MeasurementDeviceIds_type& x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    void LinearityStudyResultsType::
    MeasurementDeviceIds (const MeasurementDeviceIds_optional& x)
    {
      this->MeasurementDeviceIds_ = x;
    }

    void LinearityStudyResultsType::
    MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    const LinearityStudyResultsType::GoodnessOfFit_optional& LinearityStudyResultsType::
    GoodnessOfFit () const
    {
      return this->GoodnessOfFit_;
    }

    LinearityStudyResultsType::GoodnessOfFit_optional& LinearityStudyResultsType::
    GoodnessOfFit ()
    {
      return this->GoodnessOfFit_;
    }

    void LinearityStudyResultsType::
    GoodnessOfFit (const GoodnessOfFit_type& x)
    {
      this->GoodnessOfFit_.set (x);
    }

    void LinearityStudyResultsType::
    GoodnessOfFit (const GoodnessOfFit_optional& x)
    {
      this->GoodnessOfFit_ = x;
    }

    void LinearityStudyResultsType::
    GoodnessOfFit (::std::auto_ptr< GoodnessOfFit_type > x)
    {
      this->GoodnessOfFit_.set (x);
    }

    const LinearityStudyResultsType::LinearAbsoluteLinearity_optional& LinearityStudyResultsType::
    LinearAbsoluteLinearity () const
    {
      return this->LinearAbsoluteLinearity_;
    }

    LinearityStudyResultsType::LinearAbsoluteLinearity_optional& LinearityStudyResultsType::
    LinearAbsoluteLinearity ()
    {
      return this->LinearAbsoluteLinearity_;
    }

    void LinearityStudyResultsType::
    LinearAbsoluteLinearity (const LinearAbsoluteLinearity_type& x)
    {
      this->LinearAbsoluteLinearity_.set (x);
    }

    void LinearityStudyResultsType::
    LinearAbsoluteLinearity (const LinearAbsoluteLinearity_optional& x)
    {
      this->LinearAbsoluteLinearity_ = x;
    }

    void LinearityStudyResultsType::
    LinearAbsoluteLinearity (::std::auto_ptr< LinearAbsoluteLinearity_type > x)
    {
      this->LinearAbsoluteLinearity_.set (x);
    }

    const LinearityStudyResultsType::AngularAbsoluteLinearity_optional& LinearityStudyResultsType::
    AngularAbsoluteLinearity () const
    {
      return this->AngularAbsoluteLinearity_;
    }

    LinearityStudyResultsType::AngularAbsoluteLinearity_optional& LinearityStudyResultsType::
    AngularAbsoluteLinearity ()
    {
      return this->AngularAbsoluteLinearity_;
    }

    void LinearityStudyResultsType::
    AngularAbsoluteLinearity (const AngularAbsoluteLinearity_type& x)
    {
      this->AngularAbsoluteLinearity_.set (x);
    }

    void LinearityStudyResultsType::
    AngularAbsoluteLinearity (const AngularAbsoluteLinearity_optional& x)
    {
      this->AngularAbsoluteLinearity_ = x;
    }

    void LinearityStudyResultsType::
    AngularAbsoluteLinearity (::std::auto_ptr< AngularAbsoluteLinearity_type > x)
    {
      this->AngularAbsoluteLinearity_.set (x);
    }

    const LinearityStudyResultsType::AreaAbsoluteLinearity_optional& LinearityStudyResultsType::
    AreaAbsoluteLinearity () const
    {
      return this->AreaAbsoluteLinearity_;
    }

    LinearityStudyResultsType::AreaAbsoluteLinearity_optional& LinearityStudyResultsType::
    AreaAbsoluteLinearity ()
    {
      return this->AreaAbsoluteLinearity_;
    }

    void LinearityStudyResultsType::
    AreaAbsoluteLinearity (const AreaAbsoluteLinearity_type& x)
    {
      this->AreaAbsoluteLinearity_.set (x);
    }

    void LinearityStudyResultsType::
    AreaAbsoluteLinearity (const AreaAbsoluteLinearity_optional& x)
    {
      this->AreaAbsoluteLinearity_ = x;
    }

    void LinearityStudyResultsType::
    AreaAbsoluteLinearity (::std::auto_ptr< AreaAbsoluteLinearity_type > x)
    {
      this->AreaAbsoluteLinearity_.set (x);
    }

    const LinearityStudyResultsType::ForceAbsoluteLinearity_optional& LinearityStudyResultsType::
    ForceAbsoluteLinearity () const
    {
      return this->ForceAbsoluteLinearity_;
    }

    LinearityStudyResultsType::ForceAbsoluteLinearity_optional& LinearityStudyResultsType::
    ForceAbsoluteLinearity ()
    {
      return this->ForceAbsoluteLinearity_;
    }

    void LinearityStudyResultsType::
    ForceAbsoluteLinearity (const ForceAbsoluteLinearity_type& x)
    {
      this->ForceAbsoluteLinearity_.set (x);
    }

    void LinearityStudyResultsType::
    ForceAbsoluteLinearity (const ForceAbsoluteLinearity_optional& x)
    {
      this->ForceAbsoluteLinearity_ = x;
    }

    void LinearityStudyResultsType::
    ForceAbsoluteLinearity (::std::auto_ptr< ForceAbsoluteLinearity_type > x)
    {
      this->ForceAbsoluteLinearity_.set (x);
    }

    const LinearityStudyResultsType::MassAbsoluteLinearity_optional& LinearityStudyResultsType::
    MassAbsoluteLinearity () const
    {
      return this->MassAbsoluteLinearity_;
    }

    LinearityStudyResultsType::MassAbsoluteLinearity_optional& LinearityStudyResultsType::
    MassAbsoluteLinearity ()
    {
      return this->MassAbsoluteLinearity_;
    }

    void LinearityStudyResultsType::
    MassAbsoluteLinearity (const MassAbsoluteLinearity_type& x)
    {
      this->MassAbsoluteLinearity_.set (x);
    }

    void LinearityStudyResultsType::
    MassAbsoluteLinearity (const MassAbsoluteLinearity_optional& x)
    {
      this->MassAbsoluteLinearity_ = x;
    }

    void LinearityStudyResultsType::
    MassAbsoluteLinearity (::std::auto_ptr< MassAbsoluteLinearity_type > x)
    {
      this->MassAbsoluteLinearity_.set (x);
    }

    const LinearityStudyResultsType::PressureAbsoluteLinearity_optional& LinearityStudyResultsType::
    PressureAbsoluteLinearity () const
    {
      return this->PressureAbsoluteLinearity_;
    }

    LinearityStudyResultsType::PressureAbsoluteLinearity_optional& LinearityStudyResultsType::
    PressureAbsoluteLinearity ()
    {
      return this->PressureAbsoluteLinearity_;
    }

    void LinearityStudyResultsType::
    PressureAbsoluteLinearity (const PressureAbsoluteLinearity_type& x)
    {
      this->PressureAbsoluteLinearity_.set (x);
    }

    void LinearityStudyResultsType::
    PressureAbsoluteLinearity (const PressureAbsoluteLinearity_optional& x)
    {
      this->PressureAbsoluteLinearity_ = x;
    }

    void LinearityStudyResultsType::
    PressureAbsoluteLinearity (::std::auto_ptr< PressureAbsoluteLinearity_type > x)
    {
      this->PressureAbsoluteLinearity_.set (x);
    }

    const LinearityStudyResultsType::SpeedAbsoluteLinearity_optional& LinearityStudyResultsType::
    SpeedAbsoluteLinearity () const
    {
      return this->SpeedAbsoluteLinearity_;
    }

    LinearityStudyResultsType::SpeedAbsoluteLinearity_optional& LinearityStudyResultsType::
    SpeedAbsoluteLinearity ()
    {
      return this->SpeedAbsoluteLinearity_;
    }

    void LinearityStudyResultsType::
    SpeedAbsoluteLinearity (const SpeedAbsoluteLinearity_type& x)
    {
      this->SpeedAbsoluteLinearity_.set (x);
    }

    void LinearityStudyResultsType::
    SpeedAbsoluteLinearity (const SpeedAbsoluteLinearity_optional& x)
    {
      this->SpeedAbsoluteLinearity_ = x;
    }

    void LinearityStudyResultsType::
    SpeedAbsoluteLinearity (::std::auto_ptr< SpeedAbsoluteLinearity_type > x)
    {
      this->SpeedAbsoluteLinearity_.set (x);
    }

    const LinearityStudyResultsType::TemperatureAbsoluteLinearity_optional& LinearityStudyResultsType::
    TemperatureAbsoluteLinearity () const
    {
      return this->TemperatureAbsoluteLinearity_;
    }

    LinearityStudyResultsType::TemperatureAbsoluteLinearity_optional& LinearityStudyResultsType::
    TemperatureAbsoluteLinearity ()
    {
      return this->TemperatureAbsoluteLinearity_;
    }

    void LinearityStudyResultsType::
    TemperatureAbsoluteLinearity (const TemperatureAbsoluteLinearity_type& x)
    {
      this->TemperatureAbsoluteLinearity_.set (x);
    }

    void LinearityStudyResultsType::
    TemperatureAbsoluteLinearity (const TemperatureAbsoluteLinearity_optional& x)
    {
      this->TemperatureAbsoluteLinearity_ = x;
    }

    void LinearityStudyResultsType::
    TemperatureAbsoluteLinearity (::std::auto_ptr< TemperatureAbsoluteLinearity_type > x)
    {
      this->TemperatureAbsoluteLinearity_.set (x);
    }

    const LinearityStudyResultsType::TimeAbsoluteLinearity_optional& LinearityStudyResultsType::
    TimeAbsoluteLinearity () const
    {
      return this->TimeAbsoluteLinearity_;
    }

    LinearityStudyResultsType::TimeAbsoluteLinearity_optional& LinearityStudyResultsType::
    TimeAbsoluteLinearity ()
    {
      return this->TimeAbsoluteLinearity_;
    }

    void LinearityStudyResultsType::
    TimeAbsoluteLinearity (const TimeAbsoluteLinearity_type& x)
    {
      this->TimeAbsoluteLinearity_.set (x);
    }

    void LinearityStudyResultsType::
    TimeAbsoluteLinearity (const TimeAbsoluteLinearity_optional& x)
    {
      this->TimeAbsoluteLinearity_ = x;
    }

    void LinearityStudyResultsType::
    TimeAbsoluteLinearity (::std::auto_ptr< TimeAbsoluteLinearity_type > x)
    {
      this->TimeAbsoluteLinearity_.set (x);
    }

    const LinearityStudyResultsType::UserDefinedUnitAbsoluteLinearity_optional& LinearityStudyResultsType::
    UserDefinedUnitAbsoluteLinearity () const
    {
      return this->UserDefinedUnitAbsoluteLinearity_;
    }

    LinearityStudyResultsType::UserDefinedUnitAbsoluteLinearity_optional& LinearityStudyResultsType::
    UserDefinedUnitAbsoluteLinearity ()
    {
      return this->UserDefinedUnitAbsoluteLinearity_;
    }

    void LinearityStudyResultsType::
    UserDefinedUnitAbsoluteLinearity (const UserDefinedUnitAbsoluteLinearity_type& x)
    {
      this->UserDefinedUnitAbsoluteLinearity_.set (x);
    }

    void LinearityStudyResultsType::
    UserDefinedUnitAbsoluteLinearity (const UserDefinedUnitAbsoluteLinearity_optional& x)
    {
      this->UserDefinedUnitAbsoluteLinearity_ = x;
    }

    void LinearityStudyResultsType::
    UserDefinedUnitAbsoluteLinearity (::std::auto_ptr< UserDefinedUnitAbsoluteLinearity_type > x)
    {
      this->UserDefinedUnitAbsoluteLinearity_.set (x);
    }

    const LinearityStudyResultsType::RelativeLinearity_optional& LinearityStudyResultsType::
    RelativeLinearity () const
    {
      return this->RelativeLinearity_;
    }

    LinearityStudyResultsType::RelativeLinearity_optional& LinearityStudyResultsType::
    RelativeLinearity ()
    {
      return this->RelativeLinearity_;
    }

    void LinearityStudyResultsType::
    RelativeLinearity (const RelativeLinearity_type& x)
    {
      this->RelativeLinearity_.set (x);
    }

    void LinearityStudyResultsType::
    RelativeLinearity (const RelativeLinearity_optional& x)
    {
      this->RelativeLinearity_ = x;
    }

    void LinearityStudyResultsType::
    RelativeLinearity (::std::auto_ptr< RelativeLinearity_type > x)
    {
      this->RelativeLinearity_.set (x);
    }


    // StabilityStudyResultsType
    // 

    const StabilityStudyResultsType::SampleSize_type& StabilityStudyResultsType::
    SampleSize () const
    {
      return this->SampleSize_.get ();
    }

    StabilityStudyResultsType::SampleSize_type& StabilityStudyResultsType::
    SampleSize ()
    {
      return this->SampleSize_.get ();
    }

    void StabilityStudyResultsType::
    SampleSize (const SampleSize_type& x)
    {
      this->SampleSize_.set (x);
    }

    const StabilityStudyResultsType::MeasurementDeviceIds_optional& StabilityStudyResultsType::
    MeasurementDeviceIds () const
    {
      return this->MeasurementDeviceIds_;
    }

    StabilityStudyResultsType::MeasurementDeviceIds_optional& StabilityStudyResultsType::
    MeasurementDeviceIds ()
    {
      return this->MeasurementDeviceIds_;
    }

    void StabilityStudyResultsType::
    MeasurementDeviceIds (const MeasurementDeviceIds_type& x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    void StabilityStudyResultsType::
    MeasurementDeviceIds (const MeasurementDeviceIds_optional& x)
    {
      this->MeasurementDeviceIds_ = x;
    }

    void StabilityStudyResultsType::
    MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > x)
    {
      this->MeasurementDeviceIds_.set (x);
    }


    // BiasStudyResultsType
    // 

    const BiasStudyResultsType::SampleSize_type& BiasStudyResultsType::
    SampleSize () const
    {
      return this->SampleSize_.get ();
    }

    BiasStudyResultsType::SampleSize_type& BiasStudyResultsType::
    SampleSize ()
    {
      return this->SampleSize_.get ();
    }

    void BiasStudyResultsType::
    SampleSize (const SampleSize_type& x)
    {
      this->SampleSize_.set (x);
    }

    const BiasStudyResultsType::MeasurementDeviceIds_optional& BiasStudyResultsType::
    MeasurementDeviceIds () const
    {
      return this->MeasurementDeviceIds_;
    }

    BiasStudyResultsType::MeasurementDeviceIds_optional& BiasStudyResultsType::
    MeasurementDeviceIds ()
    {
      return this->MeasurementDeviceIds_;
    }

    void BiasStudyResultsType::
    MeasurementDeviceIds (const MeasurementDeviceIds_type& x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    void BiasStudyResultsType::
    MeasurementDeviceIds (const MeasurementDeviceIds_optional& x)
    {
      this->MeasurementDeviceIds_ = x;
    }

    void BiasStudyResultsType::
    MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > x)
    {
      this->MeasurementDeviceIds_.set (x);
    }


    // FirstArticleStudyResultsType
    // 

    const FirstArticleStudyResultsType::InSpecRatio_optional& FirstArticleStudyResultsType::
    InSpecRatio () const
    {
      return this->InSpecRatio_;
    }

    FirstArticleStudyResultsType::InSpecRatio_optional& FirstArticleStudyResultsType::
    InSpecRatio ()
    {
      return this->InSpecRatio_;
    }

    void FirstArticleStudyResultsType::
    InSpecRatio (const InSpecRatio_type& x)
    {
      this->InSpecRatio_.set (x);
    }

    void FirstArticleStudyResultsType::
    InSpecRatio (const InSpecRatio_optional& x)
    {
      this->InSpecRatio_ = x;
    }

    const FirstArticleStudyResultsType::LinearAbsoluteMaximum_optional& FirstArticleStudyResultsType::
    LinearAbsoluteMaximum () const
    {
      return this->LinearAbsoluteMaximum_;
    }

    FirstArticleStudyResultsType::LinearAbsoluteMaximum_optional& FirstArticleStudyResultsType::
    LinearAbsoluteMaximum ()
    {
      return this->LinearAbsoluteMaximum_;
    }

    void FirstArticleStudyResultsType::
    LinearAbsoluteMaximum (const LinearAbsoluteMaximum_type& x)
    {
      this->LinearAbsoluteMaximum_.set (x);
    }

    void FirstArticleStudyResultsType::
    LinearAbsoluteMaximum (const LinearAbsoluteMaximum_optional& x)
    {
      this->LinearAbsoluteMaximum_ = x;
    }

    void FirstArticleStudyResultsType::
    LinearAbsoluteMaximum (::std::auto_ptr< LinearAbsoluteMaximum_type > x)
    {
      this->LinearAbsoluteMaximum_.set (x);
    }

    const FirstArticleStudyResultsType::AngularAbsoluteMaximum_optional& FirstArticleStudyResultsType::
    AngularAbsoluteMaximum () const
    {
      return this->AngularAbsoluteMaximum_;
    }

    FirstArticleStudyResultsType::AngularAbsoluteMaximum_optional& FirstArticleStudyResultsType::
    AngularAbsoluteMaximum ()
    {
      return this->AngularAbsoluteMaximum_;
    }

    void FirstArticleStudyResultsType::
    AngularAbsoluteMaximum (const AngularAbsoluteMaximum_type& x)
    {
      this->AngularAbsoluteMaximum_.set (x);
    }

    void FirstArticleStudyResultsType::
    AngularAbsoluteMaximum (const AngularAbsoluteMaximum_optional& x)
    {
      this->AngularAbsoluteMaximum_ = x;
    }

    void FirstArticleStudyResultsType::
    AngularAbsoluteMaximum (::std::auto_ptr< AngularAbsoluteMaximum_type > x)
    {
      this->AngularAbsoluteMaximum_.set (x);
    }

    const FirstArticleStudyResultsType::AreaAbsoluteMaximum_optional& FirstArticleStudyResultsType::
    AreaAbsoluteMaximum () const
    {
      return this->AreaAbsoluteMaximum_;
    }

    FirstArticleStudyResultsType::AreaAbsoluteMaximum_optional& FirstArticleStudyResultsType::
    AreaAbsoluteMaximum ()
    {
      return this->AreaAbsoluteMaximum_;
    }

    void FirstArticleStudyResultsType::
    AreaAbsoluteMaximum (const AreaAbsoluteMaximum_type& x)
    {
      this->AreaAbsoluteMaximum_.set (x);
    }

    void FirstArticleStudyResultsType::
    AreaAbsoluteMaximum (const AreaAbsoluteMaximum_optional& x)
    {
      this->AreaAbsoluteMaximum_ = x;
    }

    void FirstArticleStudyResultsType::
    AreaAbsoluteMaximum (::std::auto_ptr< AreaAbsoluteMaximum_type > x)
    {
      this->AreaAbsoluteMaximum_.set (x);
    }

    const FirstArticleStudyResultsType::ForceAbsoluteMaximum_optional& FirstArticleStudyResultsType::
    ForceAbsoluteMaximum () const
    {
      return this->ForceAbsoluteMaximum_;
    }

    FirstArticleStudyResultsType::ForceAbsoluteMaximum_optional& FirstArticleStudyResultsType::
    ForceAbsoluteMaximum ()
    {
      return this->ForceAbsoluteMaximum_;
    }

    void FirstArticleStudyResultsType::
    ForceAbsoluteMaximum (const ForceAbsoluteMaximum_type& x)
    {
      this->ForceAbsoluteMaximum_.set (x);
    }

    void FirstArticleStudyResultsType::
    ForceAbsoluteMaximum (const ForceAbsoluteMaximum_optional& x)
    {
      this->ForceAbsoluteMaximum_ = x;
    }

    void FirstArticleStudyResultsType::
    ForceAbsoluteMaximum (::std::auto_ptr< ForceAbsoluteMaximum_type > x)
    {
      this->ForceAbsoluteMaximum_.set (x);
    }

    const FirstArticleStudyResultsType::MassAbsoluteMaximum_optional& FirstArticleStudyResultsType::
    MassAbsoluteMaximum () const
    {
      return this->MassAbsoluteMaximum_;
    }

    FirstArticleStudyResultsType::MassAbsoluteMaximum_optional& FirstArticleStudyResultsType::
    MassAbsoluteMaximum ()
    {
      return this->MassAbsoluteMaximum_;
    }

    void FirstArticleStudyResultsType::
    MassAbsoluteMaximum (const MassAbsoluteMaximum_type& x)
    {
      this->MassAbsoluteMaximum_.set (x);
    }

    void FirstArticleStudyResultsType::
    MassAbsoluteMaximum (const MassAbsoluteMaximum_optional& x)
    {
      this->MassAbsoluteMaximum_ = x;
    }

    void FirstArticleStudyResultsType::
    MassAbsoluteMaximum (::std::auto_ptr< MassAbsoluteMaximum_type > x)
    {
      this->MassAbsoluteMaximum_.set (x);
    }

    const FirstArticleStudyResultsType::PressureAbsoluteMaximum_optional& FirstArticleStudyResultsType::
    PressureAbsoluteMaximum () const
    {
      return this->PressureAbsoluteMaximum_;
    }

    FirstArticleStudyResultsType::PressureAbsoluteMaximum_optional& FirstArticleStudyResultsType::
    PressureAbsoluteMaximum ()
    {
      return this->PressureAbsoluteMaximum_;
    }

    void FirstArticleStudyResultsType::
    PressureAbsoluteMaximum (const PressureAbsoluteMaximum_type& x)
    {
      this->PressureAbsoluteMaximum_.set (x);
    }

    void FirstArticleStudyResultsType::
    PressureAbsoluteMaximum (const PressureAbsoluteMaximum_optional& x)
    {
      this->PressureAbsoluteMaximum_ = x;
    }

    void FirstArticleStudyResultsType::
    PressureAbsoluteMaximum (::std::auto_ptr< PressureAbsoluteMaximum_type > x)
    {
      this->PressureAbsoluteMaximum_.set (x);
    }

    const FirstArticleStudyResultsType::SpeedAbsoluteMaximum_optional& FirstArticleStudyResultsType::
    SpeedAbsoluteMaximum () const
    {
      return this->SpeedAbsoluteMaximum_;
    }

    FirstArticleStudyResultsType::SpeedAbsoluteMaximum_optional& FirstArticleStudyResultsType::
    SpeedAbsoluteMaximum ()
    {
      return this->SpeedAbsoluteMaximum_;
    }

    void FirstArticleStudyResultsType::
    SpeedAbsoluteMaximum (const SpeedAbsoluteMaximum_type& x)
    {
      this->SpeedAbsoluteMaximum_.set (x);
    }

    void FirstArticleStudyResultsType::
    SpeedAbsoluteMaximum (const SpeedAbsoluteMaximum_optional& x)
    {
      this->SpeedAbsoluteMaximum_ = x;
    }

    void FirstArticleStudyResultsType::
    SpeedAbsoluteMaximum (::std::auto_ptr< SpeedAbsoluteMaximum_type > x)
    {
      this->SpeedAbsoluteMaximum_.set (x);
    }

    const FirstArticleStudyResultsType::TemperatureAbsoluteMaximum_optional& FirstArticleStudyResultsType::
    TemperatureAbsoluteMaximum () const
    {
      return this->TemperatureAbsoluteMaximum_;
    }

    FirstArticleStudyResultsType::TemperatureAbsoluteMaximum_optional& FirstArticleStudyResultsType::
    TemperatureAbsoluteMaximum ()
    {
      return this->TemperatureAbsoluteMaximum_;
    }

    void FirstArticleStudyResultsType::
    TemperatureAbsoluteMaximum (const TemperatureAbsoluteMaximum_type& x)
    {
      this->TemperatureAbsoluteMaximum_.set (x);
    }

    void FirstArticleStudyResultsType::
    TemperatureAbsoluteMaximum (const TemperatureAbsoluteMaximum_optional& x)
    {
      this->TemperatureAbsoluteMaximum_ = x;
    }

    void FirstArticleStudyResultsType::
    TemperatureAbsoluteMaximum (::std::auto_ptr< TemperatureAbsoluteMaximum_type > x)
    {
      this->TemperatureAbsoluteMaximum_.set (x);
    }

    const FirstArticleStudyResultsType::TimeAbsoluteMaximum_optional& FirstArticleStudyResultsType::
    TimeAbsoluteMaximum () const
    {
      return this->TimeAbsoluteMaximum_;
    }

    FirstArticleStudyResultsType::TimeAbsoluteMaximum_optional& FirstArticleStudyResultsType::
    TimeAbsoluteMaximum ()
    {
      return this->TimeAbsoluteMaximum_;
    }

    void FirstArticleStudyResultsType::
    TimeAbsoluteMaximum (const TimeAbsoluteMaximum_type& x)
    {
      this->TimeAbsoluteMaximum_.set (x);
    }

    void FirstArticleStudyResultsType::
    TimeAbsoluteMaximum (const TimeAbsoluteMaximum_optional& x)
    {
      this->TimeAbsoluteMaximum_ = x;
    }

    void FirstArticleStudyResultsType::
    TimeAbsoluteMaximum (::std::auto_ptr< TimeAbsoluteMaximum_type > x)
    {
      this->TimeAbsoluteMaximum_.set (x);
    }

    const FirstArticleStudyResultsType::UserDefinedUnitAbsoluteMaximum_sequence& FirstArticleStudyResultsType::
    UserDefinedUnitAbsoluteMaximum () const
    {
      return this->UserDefinedUnitAbsoluteMaximum_;
    }

    FirstArticleStudyResultsType::UserDefinedUnitAbsoluteMaximum_sequence& FirstArticleStudyResultsType::
    UserDefinedUnitAbsoluteMaximum ()
    {
      return this->UserDefinedUnitAbsoluteMaximum_;
    }

    void FirstArticleStudyResultsType::
    UserDefinedUnitAbsoluteMaximum (const UserDefinedUnitAbsoluteMaximum_sequence& s)
    {
      this->UserDefinedUnitAbsoluteMaximum_ = s;
    }

    const FirstArticleStudyResultsType::RelativeMaximum_optional& FirstArticleStudyResultsType::
    RelativeMaximum () const
    {
      return this->RelativeMaximum_;
    }

    FirstArticleStudyResultsType::RelativeMaximum_optional& FirstArticleStudyResultsType::
    RelativeMaximum ()
    {
      return this->RelativeMaximum_;
    }

    void FirstArticleStudyResultsType::
    RelativeMaximum (const RelativeMaximum_type& x)
    {
      this->RelativeMaximum_.set (x);
    }

    void FirstArticleStudyResultsType::
    RelativeMaximum (const RelativeMaximum_optional& x)
    {
      this->RelativeMaximum_ = x;
    }

    void FirstArticleStudyResultsType::
    RelativeMaximum (::std::auto_ptr< RelativeMaximum_type > x)
    {
      this->RelativeMaximum_.set (x);
    }


    // ProcessDifferenceStudyResultsType
    // 

    const ProcessDifferenceStudyResultsType::NumberOfSamples_type& ProcessDifferenceStudyResultsType::
    NumberOfSamples () const
    {
      return this->NumberOfSamples_.get ();
    }

    ProcessDifferenceStudyResultsType::NumberOfSamples_type& ProcessDifferenceStudyResultsType::
    NumberOfSamples ()
    {
      return this->NumberOfSamples_.get ();
    }

    void ProcessDifferenceStudyResultsType::
    NumberOfSamples (const NumberOfSamples_type& x)
    {
      this->NumberOfSamples_.set (x);
    }

    const ProcessDifferenceStudyResultsType::SubgroupSize_type& ProcessDifferenceStudyResultsType::
    SubgroupSize () const
    {
      return this->SubgroupSize_.get ();
    }

    ProcessDifferenceStudyResultsType::SubgroupSize_type& ProcessDifferenceStudyResultsType::
    SubgroupSize ()
    {
      return this->SubgroupSize_.get ();
    }

    void ProcessDifferenceStudyResultsType::
    SubgroupSize (const SubgroupSize_type& x)
    {
      this->SubgroupSize_.set (x);
    }

    ProcessDifferenceStudyResultsType::SubgroupSize_type ProcessDifferenceStudyResultsType::
    SubgroupSize_default_value ()
    {
      return SubgroupSize_type (2ULL);
    }

    const ProcessDifferenceStudyResultsType::ManufacturingProcessId_optional& ProcessDifferenceStudyResultsType::
    ManufacturingProcessId () const
    {
      return this->ManufacturingProcessId_;
    }

    ProcessDifferenceStudyResultsType::ManufacturingProcessId_optional& ProcessDifferenceStudyResultsType::
    ManufacturingProcessId ()
    {
      return this->ManufacturingProcessId_;
    }

    void ProcessDifferenceStudyResultsType::
    ManufacturingProcessId (const ManufacturingProcessId_type& x)
    {
      this->ManufacturingProcessId_.set (x);
    }

    void ProcessDifferenceStudyResultsType::
    ManufacturingProcessId (const ManufacturingProcessId_optional& x)
    {
      this->ManufacturingProcessId_ = x;
    }

    void ProcessDifferenceStudyResultsType::
    ManufacturingProcessId (::std::auto_ptr< ManufacturingProcessId_type > x)
    {
      this->ManufacturingProcessId_.set (x);
    }

    const ProcessDifferenceStudyResultsType::LinearAbsoluteDifference_optional& ProcessDifferenceStudyResultsType::
    LinearAbsoluteDifference () const
    {
      return this->LinearAbsoluteDifference_;
    }

    ProcessDifferenceStudyResultsType::LinearAbsoluteDifference_optional& ProcessDifferenceStudyResultsType::
    LinearAbsoluteDifference ()
    {
      return this->LinearAbsoluteDifference_;
    }

    void ProcessDifferenceStudyResultsType::
    LinearAbsoluteDifference (const LinearAbsoluteDifference_type& x)
    {
      this->LinearAbsoluteDifference_.set (x);
    }

    void ProcessDifferenceStudyResultsType::
    LinearAbsoluteDifference (const LinearAbsoluteDifference_optional& x)
    {
      this->LinearAbsoluteDifference_ = x;
    }

    void ProcessDifferenceStudyResultsType::
    LinearAbsoluteDifference (::std::auto_ptr< LinearAbsoluteDifference_type > x)
    {
      this->LinearAbsoluteDifference_.set (x);
    }

    const ProcessDifferenceStudyResultsType::AngularAbsoluteDifference_optional& ProcessDifferenceStudyResultsType::
    AngularAbsoluteDifference () const
    {
      return this->AngularAbsoluteDifference_;
    }

    ProcessDifferenceStudyResultsType::AngularAbsoluteDifference_optional& ProcessDifferenceStudyResultsType::
    AngularAbsoluteDifference ()
    {
      return this->AngularAbsoluteDifference_;
    }

    void ProcessDifferenceStudyResultsType::
    AngularAbsoluteDifference (const AngularAbsoluteDifference_type& x)
    {
      this->AngularAbsoluteDifference_.set (x);
    }

    void ProcessDifferenceStudyResultsType::
    AngularAbsoluteDifference (const AngularAbsoluteDifference_optional& x)
    {
      this->AngularAbsoluteDifference_ = x;
    }

    void ProcessDifferenceStudyResultsType::
    AngularAbsoluteDifference (::std::auto_ptr< AngularAbsoluteDifference_type > x)
    {
      this->AngularAbsoluteDifference_.set (x);
    }

    const ProcessDifferenceStudyResultsType::AreaAbsoluteDifference_optional& ProcessDifferenceStudyResultsType::
    AreaAbsoluteDifference () const
    {
      return this->AreaAbsoluteDifference_;
    }

    ProcessDifferenceStudyResultsType::AreaAbsoluteDifference_optional& ProcessDifferenceStudyResultsType::
    AreaAbsoluteDifference ()
    {
      return this->AreaAbsoluteDifference_;
    }

    void ProcessDifferenceStudyResultsType::
    AreaAbsoluteDifference (const AreaAbsoluteDifference_type& x)
    {
      this->AreaAbsoluteDifference_.set (x);
    }

    void ProcessDifferenceStudyResultsType::
    AreaAbsoluteDifference (const AreaAbsoluteDifference_optional& x)
    {
      this->AreaAbsoluteDifference_ = x;
    }

    void ProcessDifferenceStudyResultsType::
    AreaAbsoluteDifference (::std::auto_ptr< AreaAbsoluteDifference_type > x)
    {
      this->AreaAbsoluteDifference_.set (x);
    }

    const ProcessDifferenceStudyResultsType::ForceAbsoluteDifference_optional& ProcessDifferenceStudyResultsType::
    ForceAbsoluteDifference () const
    {
      return this->ForceAbsoluteDifference_;
    }

    ProcessDifferenceStudyResultsType::ForceAbsoluteDifference_optional& ProcessDifferenceStudyResultsType::
    ForceAbsoluteDifference ()
    {
      return this->ForceAbsoluteDifference_;
    }

    void ProcessDifferenceStudyResultsType::
    ForceAbsoluteDifference (const ForceAbsoluteDifference_type& x)
    {
      this->ForceAbsoluteDifference_.set (x);
    }

    void ProcessDifferenceStudyResultsType::
    ForceAbsoluteDifference (const ForceAbsoluteDifference_optional& x)
    {
      this->ForceAbsoluteDifference_ = x;
    }

    void ProcessDifferenceStudyResultsType::
    ForceAbsoluteDifference (::std::auto_ptr< ForceAbsoluteDifference_type > x)
    {
      this->ForceAbsoluteDifference_.set (x);
    }

    const ProcessDifferenceStudyResultsType::MassAbsoluteDifference_optional& ProcessDifferenceStudyResultsType::
    MassAbsoluteDifference () const
    {
      return this->MassAbsoluteDifference_;
    }

    ProcessDifferenceStudyResultsType::MassAbsoluteDifference_optional& ProcessDifferenceStudyResultsType::
    MassAbsoluteDifference ()
    {
      return this->MassAbsoluteDifference_;
    }

    void ProcessDifferenceStudyResultsType::
    MassAbsoluteDifference (const MassAbsoluteDifference_type& x)
    {
      this->MassAbsoluteDifference_.set (x);
    }

    void ProcessDifferenceStudyResultsType::
    MassAbsoluteDifference (const MassAbsoluteDifference_optional& x)
    {
      this->MassAbsoluteDifference_ = x;
    }

    void ProcessDifferenceStudyResultsType::
    MassAbsoluteDifference (::std::auto_ptr< MassAbsoluteDifference_type > x)
    {
      this->MassAbsoluteDifference_.set (x);
    }

    const ProcessDifferenceStudyResultsType::PressureAbsoluteDifference_optional& ProcessDifferenceStudyResultsType::
    PressureAbsoluteDifference () const
    {
      return this->PressureAbsoluteDifference_;
    }

    ProcessDifferenceStudyResultsType::PressureAbsoluteDifference_optional& ProcessDifferenceStudyResultsType::
    PressureAbsoluteDifference ()
    {
      return this->PressureAbsoluteDifference_;
    }

    void ProcessDifferenceStudyResultsType::
    PressureAbsoluteDifference (const PressureAbsoluteDifference_type& x)
    {
      this->PressureAbsoluteDifference_.set (x);
    }

    void ProcessDifferenceStudyResultsType::
    PressureAbsoluteDifference (const PressureAbsoluteDifference_optional& x)
    {
      this->PressureAbsoluteDifference_ = x;
    }

    void ProcessDifferenceStudyResultsType::
    PressureAbsoluteDifference (::std::auto_ptr< PressureAbsoluteDifference_type > x)
    {
      this->PressureAbsoluteDifference_.set (x);
    }

    const ProcessDifferenceStudyResultsType::SpeedAbsoluteDifference_optional& ProcessDifferenceStudyResultsType::
    SpeedAbsoluteDifference () const
    {
      return this->SpeedAbsoluteDifference_;
    }

    ProcessDifferenceStudyResultsType::SpeedAbsoluteDifference_optional& ProcessDifferenceStudyResultsType::
    SpeedAbsoluteDifference ()
    {
      return this->SpeedAbsoluteDifference_;
    }

    void ProcessDifferenceStudyResultsType::
    SpeedAbsoluteDifference (const SpeedAbsoluteDifference_type& x)
    {
      this->SpeedAbsoluteDifference_.set (x);
    }

    void ProcessDifferenceStudyResultsType::
    SpeedAbsoluteDifference (const SpeedAbsoluteDifference_optional& x)
    {
      this->SpeedAbsoluteDifference_ = x;
    }

    void ProcessDifferenceStudyResultsType::
    SpeedAbsoluteDifference (::std::auto_ptr< SpeedAbsoluteDifference_type > x)
    {
      this->SpeedAbsoluteDifference_.set (x);
    }

    const ProcessDifferenceStudyResultsType::TemperatureAbsoluteDifference_optional& ProcessDifferenceStudyResultsType::
    TemperatureAbsoluteDifference () const
    {
      return this->TemperatureAbsoluteDifference_;
    }

    ProcessDifferenceStudyResultsType::TemperatureAbsoluteDifference_optional& ProcessDifferenceStudyResultsType::
    TemperatureAbsoluteDifference ()
    {
      return this->TemperatureAbsoluteDifference_;
    }

    void ProcessDifferenceStudyResultsType::
    TemperatureAbsoluteDifference (const TemperatureAbsoluteDifference_type& x)
    {
      this->TemperatureAbsoluteDifference_.set (x);
    }

    void ProcessDifferenceStudyResultsType::
    TemperatureAbsoluteDifference (const TemperatureAbsoluteDifference_optional& x)
    {
      this->TemperatureAbsoluteDifference_ = x;
    }

    void ProcessDifferenceStudyResultsType::
    TemperatureAbsoluteDifference (::std::auto_ptr< TemperatureAbsoluteDifference_type > x)
    {
      this->TemperatureAbsoluteDifference_.set (x);
    }

    const ProcessDifferenceStudyResultsType::TimeAbsoluteDifference_optional& ProcessDifferenceStudyResultsType::
    TimeAbsoluteDifference () const
    {
      return this->TimeAbsoluteDifference_;
    }

    ProcessDifferenceStudyResultsType::TimeAbsoluteDifference_optional& ProcessDifferenceStudyResultsType::
    TimeAbsoluteDifference ()
    {
      return this->TimeAbsoluteDifference_;
    }

    void ProcessDifferenceStudyResultsType::
    TimeAbsoluteDifference (const TimeAbsoluteDifference_type& x)
    {
      this->TimeAbsoluteDifference_.set (x);
    }

    void ProcessDifferenceStudyResultsType::
    TimeAbsoluteDifference (const TimeAbsoluteDifference_optional& x)
    {
      this->TimeAbsoluteDifference_ = x;
    }

    void ProcessDifferenceStudyResultsType::
    TimeAbsoluteDifference (::std::auto_ptr< TimeAbsoluteDifference_type > x)
    {
      this->TimeAbsoluteDifference_.set (x);
    }

    const ProcessDifferenceStudyResultsType::UserDefinedUnitAbsoluteDifference_sequence& ProcessDifferenceStudyResultsType::
    UserDefinedUnitAbsoluteDifference () const
    {
      return this->UserDefinedUnitAbsoluteDifference_;
    }

    ProcessDifferenceStudyResultsType::UserDefinedUnitAbsoluteDifference_sequence& ProcessDifferenceStudyResultsType::
    UserDefinedUnitAbsoluteDifference ()
    {
      return this->UserDefinedUnitAbsoluteDifference_;
    }

    void ProcessDifferenceStudyResultsType::
    UserDefinedUnitAbsoluteDifference (const UserDefinedUnitAbsoluteDifference_sequence& s)
    {
      this->UserDefinedUnitAbsoluteDifference_ = s;
    }

    const ProcessDifferenceStudyResultsType::RelativeDifference_optional& ProcessDifferenceStudyResultsType::
    RelativeDifference () const
    {
      return this->RelativeDifference_;
    }

    ProcessDifferenceStudyResultsType::RelativeDifference_optional& ProcessDifferenceStudyResultsType::
    RelativeDifference ()
    {
      return this->RelativeDifference_;
    }

    void ProcessDifferenceStudyResultsType::
    RelativeDifference (const RelativeDifference_type& x)
    {
      this->RelativeDifference_.set (x);
    }

    void ProcessDifferenceStudyResultsType::
    RelativeDifference (const RelativeDifference_optional& x)
    {
      this->RelativeDifference_ = x;
    }

    void ProcessDifferenceStudyResultsType::
    RelativeDifference (::std::auto_ptr< RelativeDifference_type > x)
    {
      this->RelativeDifference_.set (x);
    }


    // MultipleProductInstanceStudyResultsBaseType
    // 

    const MultipleProductInstanceStudyResultsBaseType::NumberOfSamples_type& MultipleProductInstanceStudyResultsBaseType::
    NumberOfSamples () const
    {
      return this->NumberOfSamples_.get ();
    }

    MultipleProductInstanceStudyResultsBaseType::NumberOfSamples_type& MultipleProductInstanceStudyResultsBaseType::
    NumberOfSamples ()
    {
      return this->NumberOfSamples_.get ();
    }

    void MultipleProductInstanceStudyResultsBaseType::
    NumberOfSamples (const NumberOfSamples_type& x)
    {
      this->NumberOfSamples_.set (x);
    }

    const MultipleProductInstanceStudyResultsBaseType::SubgroupSize_optional& MultipleProductInstanceStudyResultsBaseType::
    SubgroupSize () const
    {
      return this->SubgroupSize_;
    }

    MultipleProductInstanceStudyResultsBaseType::SubgroupSize_optional& MultipleProductInstanceStudyResultsBaseType::
    SubgroupSize ()
    {
      return this->SubgroupSize_;
    }

    void MultipleProductInstanceStudyResultsBaseType::
    SubgroupSize (const SubgroupSize_type& x)
    {
      this->SubgroupSize_.set (x);
    }

    void MultipleProductInstanceStudyResultsBaseType::
    SubgroupSize (const SubgroupSize_optional& x)
    {
      this->SubgroupSize_ = x;
    }


    // SimpleStudyResultsType
    // 


    // CapabilityStudyResultsType
    // 


    // GageRandRStudyResultsType
    // 

    const GageRandRStudyResultsType::MeasurementDeviceIds_optional& GageRandRStudyResultsType::
    MeasurementDeviceIds () const
    {
      return this->MeasurementDeviceIds_;
    }

    GageRandRStudyResultsType::MeasurementDeviceIds_optional& GageRandRStudyResultsType::
    MeasurementDeviceIds ()
    {
      return this->MeasurementDeviceIds_;
    }

    void GageRandRStudyResultsType::
    MeasurementDeviceIds (const MeasurementDeviceIds_type& x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    void GageRandRStudyResultsType::
    MeasurementDeviceIds (const MeasurementDeviceIds_optional& x)
    {
      this->MeasurementDeviceIds_ = x;
    }

    void GageRandRStudyResultsType::
    MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    const GageRandRStudyResultsType::NumberOfAppraisers_type& GageRandRStudyResultsType::
    NumberOfAppraisers () const
    {
      return this->NumberOfAppraisers_.get ();
    }

    GageRandRStudyResultsType::NumberOfAppraisers_type& GageRandRStudyResultsType::
    NumberOfAppraisers ()
    {
      return this->NumberOfAppraisers_.get ();
    }

    void GageRandRStudyResultsType::
    NumberOfAppraisers (const NumberOfAppraisers_type& x)
    {
      this->NumberOfAppraisers_.set (x);
    }

    const GageRandRStudyResultsType::NumberOfParts_type& GageRandRStudyResultsType::
    NumberOfParts () const
    {
      return this->NumberOfParts_.get ();
    }

    GageRandRStudyResultsType::NumberOfParts_type& GageRandRStudyResultsType::
    NumberOfParts ()
    {
      return this->NumberOfParts_.get ();
    }

    void GageRandRStudyResultsType::
    NumberOfParts (const NumberOfParts_type& x)
    {
      this->NumberOfParts_.set (x);
    }

    const GageRandRStudyResultsType::NumberOfTrials_type& GageRandRStudyResultsType::
    NumberOfTrials () const
    {
      return this->NumberOfTrials_.get ();
    }

    GageRandRStudyResultsType::NumberOfTrials_type& GageRandRStudyResultsType::
    NumberOfTrials ()
    {
      return this->NumberOfTrials_.get ();
    }

    void GageRandRStudyResultsType::
    NumberOfTrials (const NumberOfTrials_type& x)
    {
      this->NumberOfTrials_.set (x);
    }


    // ProductionStudyResultsType
    // 

    const ProductionStudyResultsType::ControlIssueDetails_sequence& ProductionStudyResultsType::
    ControlIssueDetails () const
    {
      return this->ControlIssueDetails_;
    }

    ProductionStudyResultsType::ControlIssueDetails_sequence& ProductionStudyResultsType::
    ControlIssueDetails ()
    {
      return this->ControlIssueDetails_;
    }

    void ProductionStudyResultsType::
    ControlIssueDetails (const ControlIssueDetails_sequence& s)
    {
      this->ControlIssueDetails_ = s;
    }


    // StatisticalStudyPlansType
    // 

    const StatisticalStudyPlansType::StatisticalStudyPlan_sequence& StatisticalStudyPlansType::
    StatisticalStudyPlan () const
    {
      return this->StatisticalStudyPlan_;
    }

    StatisticalStudyPlansType::StatisticalStudyPlan_sequence& StatisticalStudyPlansType::
    StatisticalStudyPlan ()
    {
      return this->StatisticalStudyPlan_;
    }

    void StatisticalStudyPlansType::
    StatisticalStudyPlan (const StatisticalStudyPlan_sequence& s)
    {
      this->StatisticalStudyPlan_ = s;
    }


    // StatisticalStudiesResultsType
    // 

    const StatisticalStudiesResultsType::StatisticalStudyResults_sequence& StatisticalStudiesResultsType::
    StatisticalStudyResults () const
    {
      return this->StatisticalStudyResults_;
    }

    StatisticalStudiesResultsType::StatisticalStudyResults_sequence& StatisticalStudiesResultsType::
    StatisticalStudyResults ()
    {
      return this->StatisticalStudyResults_;
    }

    void StatisticalStudiesResultsType::
    StatisticalStudyResults (const StatisticalStudyResults_sequence& s)
    {
      this->StatisticalStudyResults_ = s;
    }


    // CorrectiveActionPlanType
    // 

    const CorrectiveActionPlanType::AssignableCauses_type& CorrectiveActionPlanType::
    AssignableCauses () const
    {
      return this->AssignableCauses_.get ();
    }

    CorrectiveActionPlanType::AssignableCauses_type& CorrectiveActionPlanType::
    AssignableCauses ()
    {
      return this->AssignableCauses_.get ();
    }

    void CorrectiveActionPlanType::
    AssignableCauses (const AssignableCauses_type& x)
    {
      this->AssignableCauses_.set (x);
    }

    void CorrectiveActionPlanType::
    AssignableCauses (::std::auto_ptr< AssignableCauses_type > x)
    {
      this->AssignableCauses_.set (x);
    }

    const CorrectiveActionPlanType::CorrectiveActions_type& CorrectiveActionPlanType::
    CorrectiveActions () const
    {
      return this->CorrectiveActions_.get ();
    }

    CorrectiveActionPlanType::CorrectiveActions_type& CorrectiveActionPlanType::
    CorrectiveActions ()
    {
      return this->CorrectiveActions_.get ();
    }

    void CorrectiveActionPlanType::
    CorrectiveActions (const CorrectiveActions_type& x)
    {
      this->CorrectiveActions_.set (x);
    }

    void CorrectiveActionPlanType::
    CorrectiveActions (::std::auto_ptr< CorrectiveActions_type > x)
    {
      this->CorrectiveActions_.set (x);
    }

    const CorrectiveActionPlanType::id_type& CorrectiveActionPlanType::
    id () const
    {
      return this->id_.get ();
    }

    CorrectiveActionPlanType::id_type& CorrectiveActionPlanType::
    id ()
    {
      return this->id_.get ();
    }

    void CorrectiveActionPlanType::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void CorrectiveActionPlanType::
    id (::std::auto_ptr< id_type > x)
    {
      this->id_.set (x);
    }


    // CorrectiveActionPlansType
    // 

    const CorrectiveActionPlansType::CorrectiveActionPlan_sequence& CorrectiveActionPlansType::
    CorrectiveActionPlan () const
    {
      return this->CorrectiveActionPlan_;
    }

    CorrectiveActionPlansType::CorrectiveActionPlan_sequence& CorrectiveActionPlansType::
    CorrectiveActionPlan ()
    {
      return this->CorrectiveActionPlan_;
    }

    void CorrectiveActionPlansType::
    CorrectiveActionPlan (const CorrectiveActionPlan_sequence& s)
    {
      this->CorrectiveActionPlan_ = s;
    }


    // StatisticsType
    // 

    const StatisticsType::Version_optional& StatisticsType::
    Version () const
    {
      return this->Version_;
    }

    StatisticsType::Version_optional& StatisticsType::
    Version ()
    {
      return this->Version_;
    }

    void StatisticsType::
    Version (const Version_type& x)
    {
      this->Version_.set (x);
    }

    void StatisticsType::
    Version (const Version_optional& x)
    {
      this->Version_ = x;
    }

    void StatisticsType::
    Version (::std::auto_ptr< Version_type > x)
    {
      this->Version_.set (x);
    }

    const StatisticsType::StatisticalStudyPlans_optional& StatisticsType::
    StatisticalStudyPlans () const
    {
      return this->StatisticalStudyPlans_;
    }

    StatisticsType::StatisticalStudyPlans_optional& StatisticsType::
    StatisticalStudyPlans ()
    {
      return this->StatisticalStudyPlans_;
    }

    void StatisticsType::
    StatisticalStudyPlans (const StatisticalStudyPlans_type& x)
    {
      this->StatisticalStudyPlans_.set (x);
    }

    void StatisticsType::
    StatisticalStudyPlans (const StatisticalStudyPlans_optional& x)
    {
      this->StatisticalStudyPlans_ = x;
    }

    void StatisticsType::
    StatisticalStudyPlans (::std::auto_ptr< StatisticalStudyPlans_type > x)
    {
      this->StatisticalStudyPlans_.set (x);
    }

    const StatisticsType::StatisticalStudiesResults_optional& StatisticsType::
    StatisticalStudiesResults () const
    {
      return this->StatisticalStudiesResults_;
    }

    StatisticsType::StatisticalStudiesResults_optional& StatisticsType::
    StatisticalStudiesResults ()
    {
      return this->StatisticalStudiesResults_;
    }

    void StatisticsType::
    StatisticalStudiesResults (const StatisticalStudiesResults_type& x)
    {
      this->StatisticalStudiesResults_.set (x);
    }

    void StatisticsType::
    StatisticalStudiesResults (const StatisticalStudiesResults_optional& x)
    {
      this->StatisticalStudiesResults_ = x;
    }

    void StatisticsType::
    StatisticalStudiesResults (::std::auto_ptr< StatisticalStudiesResults_type > x)
    {
      this->StatisticalStudiesResults_.set (x);
    }

    const StatisticsType::CorrectiveActionPlans_optional& StatisticsType::
    CorrectiveActionPlans () const
    {
      return this->CorrectiveActionPlans_;
    }

    StatisticsType::CorrectiveActionPlans_optional& StatisticsType::
    CorrectiveActionPlans ()
    {
      return this->CorrectiveActionPlans_;
    }

    void StatisticsType::
    CorrectiveActionPlans (const CorrectiveActionPlans_type& x)
    {
      this->CorrectiveActionPlans_.set (x);
    }

    void StatisticsType::
    CorrectiveActionPlans (const CorrectiveActionPlans_optional& x)
    {
      this->CorrectiveActionPlans_ = x;
    }

    void StatisticsType::
    CorrectiveActionPlans (::std::auto_ptr< CorrectiveActionPlans_type > x)
    {
      this->CorrectiveActionPlans_.set (x);
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace xsd
{
  namespace qif2
  {
    // StatisticalStudyPlanBaseType
    //

    StatisticalStudyPlanBaseType::
    StatisticalStudyPlanBaseType (const id_type& id)
    : ::xml_schema::type (),
      Attributes_ (this),
      ThisStatisticalStudyPlanInstanceQPId_ (this),
      FeatureItemIds_ (this),
      CalculateAverageFeatures_ (this),
      CharacteristicItemIds_ (this),
      StatsValuesPerChar_ (this),
      StatsValuesPerSubgroup_ (this),
      StatsValuesSummary_ (this),
      PreInspectionTraceability_ (this),
      Name_ (this),
      Description_ (this),
      PlanId_ (this),
      CorrectiveActionPlanId_ (this),
      id_ (id, this)
    {
    }

    StatisticalStudyPlanBaseType::
    StatisticalStudyPlanBaseType (const StatisticalStudyPlanBaseType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Attributes_ (x.Attributes_, f, this),
      ThisStatisticalStudyPlanInstanceQPId_ (x.ThisStatisticalStudyPlanInstanceQPId_, f, this),
      FeatureItemIds_ (x.FeatureItemIds_, f, this),
      CalculateAverageFeatures_ (x.CalculateAverageFeatures_, f, this),
      CharacteristicItemIds_ (x.CharacteristicItemIds_, f, this),
      StatsValuesPerChar_ (x.StatsValuesPerChar_, f, this),
      StatsValuesPerSubgroup_ (x.StatsValuesPerSubgroup_, f, this),
      StatsValuesSummary_ (x.StatsValuesSummary_, f, this),
      PreInspectionTraceability_ (x.PreInspectionTraceability_, f, this),
      Name_ (x.Name_, f, this),
      Description_ (x.Description_, f, this),
      PlanId_ (x.PlanId_, f, this),
      CorrectiveActionPlanId_ (x.CorrectiveActionPlanId_, f, this),
      id_ (x.id_, f, this)
    {
    }

    StatisticalStudyPlanBaseType::
    StatisticalStudyPlanBaseType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Attributes_ (this),
      ThisStatisticalStudyPlanInstanceQPId_ (this),
      FeatureItemIds_ (this),
      CalculateAverageFeatures_ (this),
      CharacteristicItemIds_ (this),
      StatsValuesPerChar_ (this),
      StatsValuesPerSubgroup_ (this),
      StatsValuesSummary_ (this),
      PreInspectionTraceability_ (this),
      Name_ (this),
      Description_ (this),
      PlanId_ (this),
      CorrectiveActionPlanId_ (this),
      id_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void StatisticalStudyPlanBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Attributes
        //
        if (n.name () == "Attributes" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (r);
            continue;
          }
        }

        // ThisStatisticalStudyPlanInstanceQPId
        //
        if (n.name () == "ThisStatisticalStudyPlanInstanceQPId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ThisStatisticalStudyPlanInstanceQPId_type > r (
            ThisStatisticalStudyPlanInstanceQPId_traits::create (i, f, this));

          if (!this->ThisStatisticalStudyPlanInstanceQPId_)
          {
            this->ThisStatisticalStudyPlanInstanceQPId_.set (r);
            continue;
          }
        }

        // FeatureItemIds
        //
        if (n.name () == "FeatureItemIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FeatureItemIds_type > r (
            FeatureItemIds_traits::create (i, f, this));

          if (!this->FeatureItemIds_)
          {
            this->FeatureItemIds_.set (r);
            continue;
          }
        }

        // CalculateAverageFeatures
        //
        if (n.name () == "CalculateAverageFeatures" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->CalculateAverageFeatures_)
          {
            this->CalculateAverageFeatures_.set (CalculateAverageFeatures_traits::create (i, f, this));
            continue;
          }
        }

        // CharacteristicItemIds
        //
        if (n.name () == "CharacteristicItemIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicItemIds_type > r (
            CharacteristicItemIds_traits::create (i, f, this));

          if (!this->CharacteristicItemIds_)
          {
            this->CharacteristicItemIds_.set (r);
            continue;
          }
        }

        // StatsValuesPerChar
        //
        if (n.name () == "StatsValuesPerChar" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< StatsValuesPerChar_type > r (
            StatsValuesPerChar_traits::create (i, f, this));

          if (!this->StatsValuesPerChar_)
          {
            this->StatsValuesPerChar_.set (r);
            continue;
          }
        }

        // StatsValuesPerSubgroup
        //
        if (n.name () == "StatsValuesPerSubgroup" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< StatsValuesPerSubgroup_type > r (
            StatsValuesPerSubgroup_traits::create (i, f, this));

          if (!this->StatsValuesPerSubgroup_)
          {
            this->StatsValuesPerSubgroup_.set (r);
            continue;
          }
        }

        // StatsValuesSummary
        //
        if (n.name () == "StatsValuesSummary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< StatsValuesSummary_type > r (
            StatsValuesSummary_traits::create (i, f, this));

          this->StatsValuesSummary_.push_back (r);
          continue;
        }

        // PreInspectionTraceability
        //
        if (n.name () == "PreInspectionTraceability" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PreInspectionTraceability_type > r (
            PreInspectionTraceability_traits::create (i, f, this));

          if (!this->PreInspectionTraceability_)
          {
            this->PreInspectionTraceability_.set (r);
            continue;
          }
        }

        // Name
        //
        if (n.name () == "Name" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Name_type > r (
            Name_traits::create (i, f, this));

          if (!this->Name_)
          {
            this->Name_.set (r);
            continue;
          }
        }

        // Description
        //
        if (n.name () == "Description" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Description_type > r (
            Description_traits::create (i, f, this));

          if (!this->Description_)
          {
            this->Description_.set (r);
            continue;
          }
        }

        // PlanId
        //
        if (n.name () == "PlanId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PlanId_type > r (
            PlanId_traits::create (i, f, this));

          if (!this->PlanId_)
          {
            this->PlanId_.set (r);
            continue;
          }
        }

        // CorrectiveActionPlanId
        //
        if (n.name () == "CorrectiveActionPlanId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CorrectiveActionPlanId_type > r (
            CorrectiveActionPlanId_traits::create (i, f, this));

          if (!this->CorrectiveActionPlanId_)
          {
            this->CorrectiveActionPlanId_.set (r);
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          this->id_.set (id_traits::create (i, f, this));
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "id",
          "");
      }
    }

    StatisticalStudyPlanBaseType* StatisticalStudyPlanBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatisticalStudyPlanBaseType (*this, f, c);
    }

    StatisticalStudyPlanBaseType& StatisticalStudyPlanBaseType::
    operator= (const StatisticalStudyPlanBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Attributes_ = x.Attributes_;
        this->ThisStatisticalStudyPlanInstanceQPId_ = x.ThisStatisticalStudyPlanInstanceQPId_;
        this->FeatureItemIds_ = x.FeatureItemIds_;
        this->CalculateAverageFeatures_ = x.CalculateAverageFeatures_;
        this->CharacteristicItemIds_ = x.CharacteristicItemIds_;
        this->StatsValuesPerChar_ = x.StatsValuesPerChar_;
        this->StatsValuesPerSubgroup_ = x.StatsValuesPerSubgroup_;
        this->StatsValuesSummary_ = x.StatsValuesSummary_;
        this->PreInspectionTraceability_ = x.PreInspectionTraceability_;
        this->Name_ = x.Name_;
        this->Description_ = x.Description_;
        this->PlanId_ = x.PlanId_;
        this->CorrectiveActionPlanId_ = x.CorrectiveActionPlanId_;
        this->id_ = x.id_;
      }

      return *this;
    }

    StatisticalStudyPlanBaseType::
    ~StatisticalStudyPlanBaseType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, StatisticalStudyPlanBaseType >
    _xsd_StatisticalStudyPlanBaseType_type_factory_init (
      "StatisticalStudyPlanBaseType",
      "http://qifstandards.org/xsd/qif2");

    // LinearityStudyPlanType
    //

    LinearityStudyPlanType::
    LinearityStudyPlanType (const id_type& id)
    : ::xsd::qif2::StatisticalStudyPlanBaseType (id),
      MeasurementDeviceIds_ (this),
      GoodnessOfFitThreshold_ (this),
      LinearAbsoluteLinearityMinimum_ (this),
      AngularAbsoluteLinearityMinimum_ (this),
      AreaAbsoluteLinearityMinimum_ (this),
      ForceAbsoluteLinearityMinimum_ (this),
      MassAbsoluteLinearityMinimum_ (this),
      PressureAbsoluteLinearityMinimum_ (this),
      SpeedAbsoluteLinearityMinimum_ (this),
      TemperatureAbsoluteLinearityMinimum_ (this),
      TimeAbsoluteLinearityMinimum_ (this),
      UserDefinedUnitAbsoluteLinearityMinimum_ (this),
      RelativeLinearityMinimum_ (this)
    {
    }

    LinearityStudyPlanType::
    LinearityStudyPlanType (const LinearityStudyPlanType& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyPlanBaseType (x, f, c),
      MeasurementDeviceIds_ (x.MeasurementDeviceIds_, f, this),
      GoodnessOfFitThreshold_ (x.GoodnessOfFitThreshold_, f, this),
      LinearAbsoluteLinearityMinimum_ (x.LinearAbsoluteLinearityMinimum_, f, this),
      AngularAbsoluteLinearityMinimum_ (x.AngularAbsoluteLinearityMinimum_, f, this),
      AreaAbsoluteLinearityMinimum_ (x.AreaAbsoluteLinearityMinimum_, f, this),
      ForceAbsoluteLinearityMinimum_ (x.ForceAbsoluteLinearityMinimum_, f, this),
      MassAbsoluteLinearityMinimum_ (x.MassAbsoluteLinearityMinimum_, f, this),
      PressureAbsoluteLinearityMinimum_ (x.PressureAbsoluteLinearityMinimum_, f, this),
      SpeedAbsoluteLinearityMinimum_ (x.SpeedAbsoluteLinearityMinimum_, f, this),
      TemperatureAbsoluteLinearityMinimum_ (x.TemperatureAbsoluteLinearityMinimum_, f, this),
      TimeAbsoluteLinearityMinimum_ (x.TimeAbsoluteLinearityMinimum_, f, this),
      UserDefinedUnitAbsoluteLinearityMinimum_ (x.UserDefinedUnitAbsoluteLinearityMinimum_, f, this),
      RelativeLinearityMinimum_ (x.RelativeLinearityMinimum_, f, this)
    {
    }

    LinearityStudyPlanType::
    LinearityStudyPlanType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyPlanBaseType (e, f | ::xml_schema::flags::base, c),
      MeasurementDeviceIds_ (this),
      GoodnessOfFitThreshold_ (this),
      LinearAbsoluteLinearityMinimum_ (this),
      AngularAbsoluteLinearityMinimum_ (this),
      AreaAbsoluteLinearityMinimum_ (this),
      ForceAbsoluteLinearityMinimum_ (this),
      MassAbsoluteLinearityMinimum_ (this),
      PressureAbsoluteLinearityMinimum_ (this),
      SpeedAbsoluteLinearityMinimum_ (this),
      TemperatureAbsoluteLinearityMinimum_ (this),
      TimeAbsoluteLinearityMinimum_ (this),
      UserDefinedUnitAbsoluteLinearityMinimum_ (this),
      RelativeLinearityMinimum_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void LinearityStudyPlanType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatisticalStudyPlanBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MeasurementDeviceIds
        //
        if (n.name () == "MeasurementDeviceIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurementDeviceIds_type > r (
            MeasurementDeviceIds_traits::create (i, f, this));

          if (!this->MeasurementDeviceIds_)
          {
            this->MeasurementDeviceIds_.set (r);
            continue;
          }
        }

        // GoodnessOfFitThreshold
        //
        if (n.name () == "GoodnessOfFitThreshold" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->GoodnessOfFitThreshold_)
          {
            this->GoodnessOfFitThreshold_.set (GoodnessOfFitThreshold_traits::create (i, f, this));
            continue;
          }
        }

        // LinearAbsoluteLinearityMinimum
        //
        if (n.name () == "LinearAbsoluteLinearityMinimum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< LinearAbsoluteLinearityMinimum_type > r (
            LinearAbsoluteLinearityMinimum_traits::create (i, f, this));

          if (!this->LinearAbsoluteLinearityMinimum_)
          {
            this->LinearAbsoluteLinearityMinimum_.set (r);
            continue;
          }
        }

        // AngularAbsoluteLinearityMinimum
        //
        if (n.name () == "AngularAbsoluteLinearityMinimum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AngularAbsoluteLinearityMinimum_type > r (
            AngularAbsoluteLinearityMinimum_traits::create (i, f, this));

          if (!this->AngularAbsoluteLinearityMinimum_)
          {
            this->AngularAbsoluteLinearityMinimum_.set (r);
            continue;
          }
        }

        // AreaAbsoluteLinearityMinimum
        //
        if (n.name () == "AreaAbsoluteLinearityMinimum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AreaAbsoluteLinearityMinimum_type > r (
            AreaAbsoluteLinearityMinimum_traits::create (i, f, this));

          if (!this->AreaAbsoluteLinearityMinimum_)
          {
            this->AreaAbsoluteLinearityMinimum_.set (r);
            continue;
          }
        }

        // ForceAbsoluteLinearityMinimum
        //
        if (n.name () == "ForceAbsoluteLinearityMinimum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ForceAbsoluteLinearityMinimum_type > r (
            ForceAbsoluteLinearityMinimum_traits::create (i, f, this));

          if (!this->ForceAbsoluteLinearityMinimum_)
          {
            this->ForceAbsoluteLinearityMinimum_.set (r);
            continue;
          }
        }

        // MassAbsoluteLinearityMinimum
        //
        if (n.name () == "MassAbsoluteLinearityMinimum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MassAbsoluteLinearityMinimum_type > r (
            MassAbsoluteLinearityMinimum_traits::create (i, f, this));

          if (!this->MassAbsoluteLinearityMinimum_)
          {
            this->MassAbsoluteLinearityMinimum_.set (r);
            continue;
          }
        }

        // PressureAbsoluteLinearityMinimum
        //
        if (n.name () == "PressureAbsoluteLinearityMinimum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PressureAbsoluteLinearityMinimum_type > r (
            PressureAbsoluteLinearityMinimum_traits::create (i, f, this));

          if (!this->PressureAbsoluteLinearityMinimum_)
          {
            this->PressureAbsoluteLinearityMinimum_.set (r);
            continue;
          }
        }

        // SpeedAbsoluteLinearityMinimum
        //
        if (n.name () == "SpeedAbsoluteLinearityMinimum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SpeedAbsoluteLinearityMinimum_type > r (
            SpeedAbsoluteLinearityMinimum_traits::create (i, f, this));

          if (!this->SpeedAbsoluteLinearityMinimum_)
          {
            this->SpeedAbsoluteLinearityMinimum_.set (r);
            continue;
          }
        }

        // TemperatureAbsoluteLinearityMinimum
        //
        if (n.name () == "TemperatureAbsoluteLinearityMinimum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TemperatureAbsoluteLinearityMinimum_type > r (
            TemperatureAbsoluteLinearityMinimum_traits::create (i, f, this));

          if (!this->TemperatureAbsoluteLinearityMinimum_)
          {
            this->TemperatureAbsoluteLinearityMinimum_.set (r);
            continue;
          }
        }

        // TimeAbsoluteLinearityMinimum
        //
        if (n.name () == "TimeAbsoluteLinearityMinimum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TimeAbsoluteLinearityMinimum_type > r (
            TimeAbsoluteLinearityMinimum_traits::create (i, f, this));

          if (!this->TimeAbsoluteLinearityMinimum_)
          {
            this->TimeAbsoluteLinearityMinimum_.set (r);
            continue;
          }
        }

        // UserDefinedUnitAbsoluteLinearityMinimum
        //
        if (n.name () == "UserDefinedUnitAbsoluteLinearityMinimum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< UserDefinedUnitAbsoluteLinearityMinimum_type > r (
            UserDefinedUnitAbsoluteLinearityMinimum_traits::create (i, f, this));

          this->UserDefinedUnitAbsoluteLinearityMinimum_.push_back (r);
          continue;
        }

        // RelativeLinearityMinimum
        //
        if (n.name () == "RelativeLinearityMinimum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->RelativeLinearityMinimum_)
          {
            this->RelativeLinearityMinimum_.set (RelativeLinearityMinimum_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }
    }

    LinearityStudyPlanType* LinearityStudyPlanType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LinearityStudyPlanType (*this, f, c);
    }

    LinearityStudyPlanType& LinearityStudyPlanType::
    operator= (const LinearityStudyPlanType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::StatisticalStudyPlanBaseType& > (*this) = x;
        this->MeasurementDeviceIds_ = x.MeasurementDeviceIds_;
        this->GoodnessOfFitThreshold_ = x.GoodnessOfFitThreshold_;
        this->LinearAbsoluteLinearityMinimum_ = x.LinearAbsoluteLinearityMinimum_;
        this->AngularAbsoluteLinearityMinimum_ = x.AngularAbsoluteLinearityMinimum_;
        this->AreaAbsoluteLinearityMinimum_ = x.AreaAbsoluteLinearityMinimum_;
        this->ForceAbsoluteLinearityMinimum_ = x.ForceAbsoluteLinearityMinimum_;
        this->MassAbsoluteLinearityMinimum_ = x.MassAbsoluteLinearityMinimum_;
        this->PressureAbsoluteLinearityMinimum_ = x.PressureAbsoluteLinearityMinimum_;
        this->SpeedAbsoluteLinearityMinimum_ = x.SpeedAbsoluteLinearityMinimum_;
        this->TemperatureAbsoluteLinearityMinimum_ = x.TemperatureAbsoluteLinearityMinimum_;
        this->TimeAbsoluteLinearityMinimum_ = x.TimeAbsoluteLinearityMinimum_;
        this->UserDefinedUnitAbsoluteLinearityMinimum_ = x.UserDefinedUnitAbsoluteLinearityMinimum_;
        this->RelativeLinearityMinimum_ = x.RelativeLinearityMinimum_;
      }

      return *this;
    }

    LinearityStudyPlanType::
    ~LinearityStudyPlanType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, LinearityStudyPlanType >
    _xsd_LinearityStudyPlanType_type_factory_init (
      "LinearityStudyPlanType",
      "http://qifstandards.org/xsd/qif2");

    // StabilityStudyPlanType
    //

    StabilityStudyPlanType::
    StabilityStudyPlanType (const id_type& id,
                            const SampleSize_type& SampleSize,
                            const SampleFrequency_type& SampleFrequency,
                            const SamplingInterval_type& SamplingInterval)
    : ::xsd::qif2::StatisticalStudyPlanBaseType (id),
      MeasurementDeviceIds_ (this),
      SampleSize_ (SampleSize, this),
      SampleFrequency_ (SampleFrequency, this),
      SamplingInterval_ (SamplingInterval, this)
    {
    }

    StabilityStudyPlanType::
    StabilityStudyPlanType (const id_type& id,
                            const SampleSize_type& SampleSize,
                            const SampleFrequency_type& SampleFrequency,
                            ::std::auto_ptr< SamplingInterval_type > SamplingInterval)
    : ::xsd::qif2::StatisticalStudyPlanBaseType (id),
      MeasurementDeviceIds_ (this),
      SampleSize_ (SampleSize, this),
      SampleFrequency_ (SampleFrequency, this),
      SamplingInterval_ (SamplingInterval, this)
    {
    }

    StabilityStudyPlanType::
    StabilityStudyPlanType (const StabilityStudyPlanType& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyPlanBaseType (x, f, c),
      MeasurementDeviceIds_ (x.MeasurementDeviceIds_, f, this),
      SampleSize_ (x.SampleSize_, f, this),
      SampleFrequency_ (x.SampleFrequency_, f, this),
      SamplingInterval_ (x.SamplingInterval_, f, this)
    {
    }

    StabilityStudyPlanType::
    StabilityStudyPlanType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyPlanBaseType (e, f | ::xml_schema::flags::base, c),
      MeasurementDeviceIds_ (this),
      SampleSize_ (this),
      SampleFrequency_ (this),
      SamplingInterval_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void StabilityStudyPlanType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatisticalStudyPlanBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MeasurementDeviceIds
        //
        if (n.name () == "MeasurementDeviceIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurementDeviceIds_type > r (
            MeasurementDeviceIds_traits::create (i, f, this));

          if (!this->MeasurementDeviceIds_)
          {
            this->MeasurementDeviceIds_.set (r);
            continue;
          }
        }

        // SampleSize
        //
        if (n.name () == "SampleSize" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!SampleSize_.present ())
          {
            this->SampleSize_.set (SampleSize_traits::create (i, f, this));
            continue;
          }
        }

        // SampleFrequency
        //
        if (n.name () == "SampleFrequency" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!SampleFrequency_.present ())
          {
            this->SampleFrequency_.set (SampleFrequency_traits::create (i, f, this));
            continue;
          }
        }

        // SamplingInterval
        //
        if (n.name () == "SamplingInterval" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SamplingInterval_type > r (
            SamplingInterval_traits::create (i, f, this));

          if (!SamplingInterval_.present ())
          {
            this->SamplingInterval_.set (r);
            continue;
          }
        }

        break;
      }

      if (!SampleSize_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SampleSize",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!SampleFrequency_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SampleFrequency",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!SamplingInterval_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SamplingInterval",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    StabilityStudyPlanType* StabilityStudyPlanType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StabilityStudyPlanType (*this, f, c);
    }

    StabilityStudyPlanType& StabilityStudyPlanType::
    operator= (const StabilityStudyPlanType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::StatisticalStudyPlanBaseType& > (*this) = x;
        this->MeasurementDeviceIds_ = x.MeasurementDeviceIds_;
        this->SampleSize_ = x.SampleSize_;
        this->SampleFrequency_ = x.SampleFrequency_;
        this->SamplingInterval_ = x.SamplingInterval_;
      }

      return *this;
    }

    StabilityStudyPlanType::
    ~StabilityStudyPlanType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, StabilityStudyPlanType >
    _xsd_StabilityStudyPlanType_type_factory_init (
      "StabilityStudyPlanType",
      "http://qifstandards.org/xsd/qif2");

    // MultipleProductInstanceStudyPlanBaseType
    //

    MultipleProductInstanceStudyPlanBaseType::
    MultipleProductInstanceStudyPlanBaseType (const id_type& id,
                                              const NumberOfSamples_type& NumberOfSamples)
    : ::xsd::qif2::StatisticalStudyPlanBaseType (id),
      NumberOfSamples_ (NumberOfSamples, this),
      SubgroupSize_ (this)
    {
    }

    MultipleProductInstanceStudyPlanBaseType::
    MultipleProductInstanceStudyPlanBaseType (const MultipleProductInstanceStudyPlanBaseType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyPlanBaseType (x, f, c),
      NumberOfSamples_ (x.NumberOfSamples_, f, this),
      SubgroupSize_ (x.SubgroupSize_, f, this)
    {
    }

    MultipleProductInstanceStudyPlanBaseType::
    MultipleProductInstanceStudyPlanBaseType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyPlanBaseType (e, f | ::xml_schema::flags::base, c),
      NumberOfSamples_ (this),
      SubgroupSize_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void MultipleProductInstanceStudyPlanBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatisticalStudyPlanBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // NumberOfSamples
        //
        if (n.name () == "NumberOfSamples" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!NumberOfSamples_.present ())
          {
            this->NumberOfSamples_.set (NumberOfSamples_traits::create (i, f, this));
            continue;
          }
        }

        // SubgroupSize
        //
        if (n.name () == "SubgroupSize" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->SubgroupSize_)
          {
            this->SubgroupSize_.set (SubgroupSize_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!NumberOfSamples_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "NumberOfSamples",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    MultipleProductInstanceStudyPlanBaseType* MultipleProductInstanceStudyPlanBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class MultipleProductInstanceStudyPlanBaseType (*this, f, c);
    }

    MultipleProductInstanceStudyPlanBaseType& MultipleProductInstanceStudyPlanBaseType::
    operator= (const MultipleProductInstanceStudyPlanBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::StatisticalStudyPlanBaseType& > (*this) = x;
        this->NumberOfSamples_ = x.NumberOfSamples_;
        this->SubgroupSize_ = x.SubgroupSize_;
      }

      return *this;
    }

    MultipleProductInstanceStudyPlanBaseType::
    ~MultipleProductInstanceStudyPlanBaseType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, MultipleProductInstanceStudyPlanBaseType >
    _xsd_MultipleProductInstanceStudyPlanBaseType_type_factory_init (
      "MultipleProductInstanceStudyPlanBaseType",
      "http://qifstandards.org/xsd/qif2");

    // BiasStudyPlanType
    //

    BiasStudyPlanType::
    BiasStudyPlanType (const id_type& id,
                       const NumberOfSamples_type& NumberOfSamples)
    : ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType (id,
                                                             NumberOfSamples),
      MeasurementDeviceIds_ (this)
    {
    }

    BiasStudyPlanType::
    BiasStudyPlanType (const BiasStudyPlanType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType (x, f, c),
      MeasurementDeviceIds_ (x.MeasurementDeviceIds_, f, this)
    {
    }

    BiasStudyPlanType::
    BiasStudyPlanType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType (e, f | ::xml_schema::flags::base, c),
      MeasurementDeviceIds_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void BiasStudyPlanType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::MultipleProductInstanceStudyPlanBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MeasurementDeviceIds
        //
        if (n.name () == "MeasurementDeviceIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurementDeviceIds_type > r (
            MeasurementDeviceIds_traits::create (i, f, this));

          if (!this->MeasurementDeviceIds_)
          {
            this->MeasurementDeviceIds_.set (r);
            continue;
          }
        }

        break;
      }
    }

    BiasStudyPlanType* BiasStudyPlanType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class BiasStudyPlanType (*this, f, c);
    }

    BiasStudyPlanType& BiasStudyPlanType::
    operator= (const BiasStudyPlanType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType& > (*this) = x;
        this->MeasurementDeviceIds_ = x.MeasurementDeviceIds_;
      }

      return *this;
    }

    BiasStudyPlanType::
    ~BiasStudyPlanType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, BiasStudyPlanType >
    _xsd_BiasStudyPlanType_type_factory_init (
      "BiasStudyPlanType",
      "http://qifstandards.org/xsd/qif2");

    // FirstArticleStudyPlanType
    //

    FirstArticleStudyPlanType::
    FirstArticleStudyPlanType (const id_type& id,
                               const InSpecRatio_type& InSpecRatio)
    : ::xsd::qif2::StatisticalStudyPlanBaseType (id),
      InSpecRatio_ (InSpecRatio, this),
      LinearAbsoluteMaximum_ (this),
      AngularAbsoluteMaximum_ (this),
      AreaAbsoluteMaximum_ (this),
      ForceAbsoluteMaximum_ (this),
      MassAbsoluteMaximum_ (this),
      PressureAbsoluteMaximum_ (this),
      SpeedAbsoluteMaximum_ (this),
      TemperatureAbsoluteMaximum_ (this),
      TimeAbsoluteMaximum_ (this),
      UserDefinedUnitAbsoluteMaximum_ (this),
      RelativeMaximum_ (this)
    {
    }

    FirstArticleStudyPlanType::
    FirstArticleStudyPlanType (const FirstArticleStudyPlanType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyPlanBaseType (x, f, c),
      InSpecRatio_ (x.InSpecRatio_, f, this),
      LinearAbsoluteMaximum_ (x.LinearAbsoluteMaximum_, f, this),
      AngularAbsoluteMaximum_ (x.AngularAbsoluteMaximum_, f, this),
      AreaAbsoluteMaximum_ (x.AreaAbsoluteMaximum_, f, this),
      ForceAbsoluteMaximum_ (x.ForceAbsoluteMaximum_, f, this),
      MassAbsoluteMaximum_ (x.MassAbsoluteMaximum_, f, this),
      PressureAbsoluteMaximum_ (x.PressureAbsoluteMaximum_, f, this),
      SpeedAbsoluteMaximum_ (x.SpeedAbsoluteMaximum_, f, this),
      TemperatureAbsoluteMaximum_ (x.TemperatureAbsoluteMaximum_, f, this),
      TimeAbsoluteMaximum_ (x.TimeAbsoluteMaximum_, f, this),
      UserDefinedUnitAbsoluteMaximum_ (x.UserDefinedUnitAbsoluteMaximum_, f, this),
      RelativeMaximum_ (x.RelativeMaximum_, f, this)
    {
    }

    FirstArticleStudyPlanType::
    FirstArticleStudyPlanType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyPlanBaseType (e, f | ::xml_schema::flags::base, c),
      InSpecRatio_ (this),
      LinearAbsoluteMaximum_ (this),
      AngularAbsoluteMaximum_ (this),
      AreaAbsoluteMaximum_ (this),
      ForceAbsoluteMaximum_ (this),
      MassAbsoluteMaximum_ (this),
      PressureAbsoluteMaximum_ (this),
      SpeedAbsoluteMaximum_ (this),
      TemperatureAbsoluteMaximum_ (this),
      TimeAbsoluteMaximum_ (this),
      UserDefinedUnitAbsoluteMaximum_ (this),
      RelativeMaximum_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void FirstArticleStudyPlanType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatisticalStudyPlanBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // InSpecRatio
        //
        if (n.name () == "InSpecRatio" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!InSpecRatio_.present ())
          {
            this->InSpecRatio_.set (InSpecRatio_traits::create (i, f, this));
            continue;
          }
        }

        // LinearAbsoluteMaximum
        //
        if (n.name () == "LinearAbsoluteMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< LinearAbsoluteMaximum_type > r (
            LinearAbsoluteMaximum_traits::create (i, f, this));

          if (!this->LinearAbsoluteMaximum_)
          {
            this->LinearAbsoluteMaximum_.set (r);
            continue;
          }
        }

        // AngularAbsoluteMaximum
        //
        if (n.name () == "AngularAbsoluteMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AngularAbsoluteMaximum_type > r (
            AngularAbsoluteMaximum_traits::create (i, f, this));

          if (!this->AngularAbsoluteMaximum_)
          {
            this->AngularAbsoluteMaximum_.set (r);
            continue;
          }
        }

        // AreaAbsoluteMaximum
        //
        if (n.name () == "AreaAbsoluteMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AreaAbsoluteMaximum_type > r (
            AreaAbsoluteMaximum_traits::create (i, f, this));

          if (!this->AreaAbsoluteMaximum_)
          {
            this->AreaAbsoluteMaximum_.set (r);
            continue;
          }
        }

        // ForceAbsoluteMaximum
        //
        if (n.name () == "ForceAbsoluteMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ForceAbsoluteMaximum_type > r (
            ForceAbsoluteMaximum_traits::create (i, f, this));

          if (!this->ForceAbsoluteMaximum_)
          {
            this->ForceAbsoluteMaximum_.set (r);
            continue;
          }
        }

        // MassAbsoluteMaximum
        //
        if (n.name () == "MassAbsoluteMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MassAbsoluteMaximum_type > r (
            MassAbsoluteMaximum_traits::create (i, f, this));

          if (!this->MassAbsoluteMaximum_)
          {
            this->MassAbsoluteMaximum_.set (r);
            continue;
          }
        }

        // PressureAbsoluteMaximum
        //
        if (n.name () == "PressureAbsoluteMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PressureAbsoluteMaximum_type > r (
            PressureAbsoluteMaximum_traits::create (i, f, this));

          if (!this->PressureAbsoluteMaximum_)
          {
            this->PressureAbsoluteMaximum_.set (r);
            continue;
          }
        }

        // SpeedAbsoluteMaximum
        //
        if (n.name () == "SpeedAbsoluteMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SpeedAbsoluteMaximum_type > r (
            SpeedAbsoluteMaximum_traits::create (i, f, this));

          if (!this->SpeedAbsoluteMaximum_)
          {
            this->SpeedAbsoluteMaximum_.set (r);
            continue;
          }
        }

        // TemperatureAbsoluteMaximum
        //
        if (n.name () == "TemperatureAbsoluteMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TemperatureAbsoluteMaximum_type > r (
            TemperatureAbsoluteMaximum_traits::create (i, f, this));

          if (!this->TemperatureAbsoluteMaximum_)
          {
            this->TemperatureAbsoluteMaximum_.set (r);
            continue;
          }
        }

        // TimeAbsoluteMaximum
        //
        if (n.name () == "TimeAbsoluteMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TimeAbsoluteMaximum_type > r (
            TimeAbsoluteMaximum_traits::create (i, f, this));

          if (!this->TimeAbsoluteMaximum_)
          {
            this->TimeAbsoluteMaximum_.set (r);
            continue;
          }
        }

        // UserDefinedUnitAbsoluteMaximum
        //
        if (n.name () == "UserDefinedUnitAbsoluteMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< UserDefinedUnitAbsoluteMaximum_type > r (
            UserDefinedUnitAbsoluteMaximum_traits::create (i, f, this));

          this->UserDefinedUnitAbsoluteMaximum_.push_back (r);
          continue;
        }

        // RelativeMaximum
        //
        if (n.name () == "RelativeMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->RelativeMaximum_)
          {
            this->RelativeMaximum_.set (RelativeMaximum_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!InSpecRatio_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "InSpecRatio",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    FirstArticleStudyPlanType* FirstArticleStudyPlanType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FirstArticleStudyPlanType (*this, f, c);
    }

    FirstArticleStudyPlanType& FirstArticleStudyPlanType::
    operator= (const FirstArticleStudyPlanType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::StatisticalStudyPlanBaseType& > (*this) = x;
        this->InSpecRatio_ = x.InSpecRatio_;
        this->LinearAbsoluteMaximum_ = x.LinearAbsoluteMaximum_;
        this->AngularAbsoluteMaximum_ = x.AngularAbsoluteMaximum_;
        this->AreaAbsoluteMaximum_ = x.AreaAbsoluteMaximum_;
        this->ForceAbsoluteMaximum_ = x.ForceAbsoluteMaximum_;
        this->MassAbsoluteMaximum_ = x.MassAbsoluteMaximum_;
        this->PressureAbsoluteMaximum_ = x.PressureAbsoluteMaximum_;
        this->SpeedAbsoluteMaximum_ = x.SpeedAbsoluteMaximum_;
        this->TemperatureAbsoluteMaximum_ = x.TemperatureAbsoluteMaximum_;
        this->TimeAbsoluteMaximum_ = x.TimeAbsoluteMaximum_;
        this->UserDefinedUnitAbsoluteMaximum_ = x.UserDefinedUnitAbsoluteMaximum_;
        this->RelativeMaximum_ = x.RelativeMaximum_;
      }

      return *this;
    }

    FirstArticleStudyPlanType::
    ~FirstArticleStudyPlanType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, FirstArticleStudyPlanType >
    _xsd_FirstArticleStudyPlanType_type_factory_init (
      "FirstArticleStudyPlanType",
      "http://qifstandards.org/xsd/qif2");

    // ProcessDifferenceStudyPlanType
    //

    ProcessDifferenceStudyPlanType::
    ProcessDifferenceStudyPlanType (const id_type& id,
                                    const NumberOfSamples_type& NumberOfSamples,
                                    const SubgroupSize_type& SubgroupSize)
    : ::xsd::qif2::StatisticalStudyPlanBaseType (id),
      NumberOfSamples_ (NumberOfSamples, this),
      SubgroupSize_ (SubgroupSize, this),
      ManufacturingProcessId_ (this),
      LinearAbsoluteDifference_ (this),
      AngularAbsoluteDifference_ (this),
      AreaAbsoluteDifference_ (this),
      ForceAbsoluteDifference_ (this),
      MassAbsoluteDifference_ (this),
      PressureAbsoluteDifference_ (this),
      SpeedAbsoluteDifference_ (this),
      TemperatureAbsoluteDifference_ (this),
      TimeAbsoluteDifference_ (this),
      UserDefinedUnitAbsoluteDifference_ (this),
      RelativeDifference_ (this)
    {
    }

    ProcessDifferenceStudyPlanType::
    ProcessDifferenceStudyPlanType (const ProcessDifferenceStudyPlanType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyPlanBaseType (x, f, c),
      NumberOfSamples_ (x.NumberOfSamples_, f, this),
      SubgroupSize_ (x.SubgroupSize_, f, this),
      ManufacturingProcessId_ (x.ManufacturingProcessId_, f, this),
      LinearAbsoluteDifference_ (x.LinearAbsoluteDifference_, f, this),
      AngularAbsoluteDifference_ (x.AngularAbsoluteDifference_, f, this),
      AreaAbsoluteDifference_ (x.AreaAbsoluteDifference_, f, this),
      ForceAbsoluteDifference_ (x.ForceAbsoluteDifference_, f, this),
      MassAbsoluteDifference_ (x.MassAbsoluteDifference_, f, this),
      PressureAbsoluteDifference_ (x.PressureAbsoluteDifference_, f, this),
      SpeedAbsoluteDifference_ (x.SpeedAbsoluteDifference_, f, this),
      TemperatureAbsoluteDifference_ (x.TemperatureAbsoluteDifference_, f, this),
      TimeAbsoluteDifference_ (x.TimeAbsoluteDifference_, f, this),
      UserDefinedUnitAbsoluteDifference_ (x.UserDefinedUnitAbsoluteDifference_, f, this),
      RelativeDifference_ (x.RelativeDifference_, f, this)
    {
    }

    ProcessDifferenceStudyPlanType::
    ProcessDifferenceStudyPlanType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyPlanBaseType (e, f | ::xml_schema::flags::base, c),
      NumberOfSamples_ (this),
      SubgroupSize_ (this),
      ManufacturingProcessId_ (this),
      LinearAbsoluteDifference_ (this),
      AngularAbsoluteDifference_ (this),
      AreaAbsoluteDifference_ (this),
      ForceAbsoluteDifference_ (this),
      MassAbsoluteDifference_ (this),
      PressureAbsoluteDifference_ (this),
      SpeedAbsoluteDifference_ (this),
      TemperatureAbsoluteDifference_ (this),
      TimeAbsoluteDifference_ (this),
      UserDefinedUnitAbsoluteDifference_ (this),
      RelativeDifference_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ProcessDifferenceStudyPlanType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatisticalStudyPlanBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // NumberOfSamples
        //
        if (n.name () == "NumberOfSamples" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!NumberOfSamples_.present ())
          {
            this->NumberOfSamples_.set (NumberOfSamples_traits::create (i, f, this));
            continue;
          }
        }

        // SubgroupSize
        //
        if (n.name () == "SubgroupSize" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!SubgroupSize_.present ())
          {
            this->SubgroupSize_.set (SubgroupSize_traits::create (i, f, this));
            continue;
          }
        }

        // ManufacturingProcessId
        //
        if (n.name () == "ManufacturingProcessId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ManufacturingProcessId_type > r (
            ManufacturingProcessId_traits::create (i, f, this));

          if (!this->ManufacturingProcessId_)
          {
            this->ManufacturingProcessId_.set (r);
            continue;
          }
        }

        // LinearAbsoluteDifference
        //
        if (n.name () == "LinearAbsoluteDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< LinearAbsoluteDifference_type > r (
            LinearAbsoluteDifference_traits::create (i, f, this));

          if (!this->LinearAbsoluteDifference_)
          {
            this->LinearAbsoluteDifference_.set (r);
            continue;
          }
        }

        // AngularAbsoluteDifference
        //
        if (n.name () == "AngularAbsoluteDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AngularAbsoluteDifference_type > r (
            AngularAbsoluteDifference_traits::create (i, f, this));

          if (!this->AngularAbsoluteDifference_)
          {
            this->AngularAbsoluteDifference_.set (r);
            continue;
          }
        }

        // AreaAbsoluteDifference
        //
        if (n.name () == "AreaAbsoluteDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AreaAbsoluteDifference_type > r (
            AreaAbsoluteDifference_traits::create (i, f, this));

          if (!this->AreaAbsoluteDifference_)
          {
            this->AreaAbsoluteDifference_.set (r);
            continue;
          }
        }

        // ForceAbsoluteDifference
        //
        if (n.name () == "ForceAbsoluteDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ForceAbsoluteDifference_type > r (
            ForceAbsoluteDifference_traits::create (i, f, this));

          if (!this->ForceAbsoluteDifference_)
          {
            this->ForceAbsoluteDifference_.set (r);
            continue;
          }
        }

        // MassAbsoluteDifference
        //
        if (n.name () == "MassAbsoluteDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MassAbsoluteDifference_type > r (
            MassAbsoluteDifference_traits::create (i, f, this));

          if (!this->MassAbsoluteDifference_)
          {
            this->MassAbsoluteDifference_.set (r);
            continue;
          }
        }

        // PressureAbsoluteDifference
        //
        if (n.name () == "PressureAbsoluteDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PressureAbsoluteDifference_type > r (
            PressureAbsoluteDifference_traits::create (i, f, this));

          if (!this->PressureAbsoluteDifference_)
          {
            this->PressureAbsoluteDifference_.set (r);
            continue;
          }
        }

        // SpeedAbsoluteDifference
        //
        if (n.name () == "SpeedAbsoluteDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SpeedAbsoluteDifference_type > r (
            SpeedAbsoluteDifference_traits::create (i, f, this));

          if (!this->SpeedAbsoluteDifference_)
          {
            this->SpeedAbsoluteDifference_.set (r);
            continue;
          }
        }

        // TemperatureAbsoluteDifference
        //
        if (n.name () == "TemperatureAbsoluteDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TemperatureAbsoluteDifference_type > r (
            TemperatureAbsoluteDifference_traits::create (i, f, this));

          if (!this->TemperatureAbsoluteDifference_)
          {
            this->TemperatureAbsoluteDifference_.set (r);
            continue;
          }
        }

        // TimeAbsoluteDifference
        //
        if (n.name () == "TimeAbsoluteDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TimeAbsoluteDifference_type > r (
            TimeAbsoluteDifference_traits::create (i, f, this));

          if (!this->TimeAbsoluteDifference_)
          {
            this->TimeAbsoluteDifference_.set (r);
            continue;
          }
        }

        // UserDefinedUnitAbsoluteDifference
        //
        if (n.name () == "UserDefinedUnitAbsoluteDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< UserDefinedUnitAbsoluteDifference_type > r (
            UserDefinedUnitAbsoluteDifference_traits::create (i, f, this));

          this->UserDefinedUnitAbsoluteDifference_.push_back (r);
          continue;
        }

        // RelativeDifference
        //
        if (n.name () == "RelativeDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->RelativeDifference_)
          {
            this->RelativeDifference_.set (RelativeDifference_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!NumberOfSamples_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "NumberOfSamples",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!SubgroupSize_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SubgroupSize",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ProcessDifferenceStudyPlanType* ProcessDifferenceStudyPlanType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ProcessDifferenceStudyPlanType (*this, f, c);
    }

    ProcessDifferenceStudyPlanType& ProcessDifferenceStudyPlanType::
    operator= (const ProcessDifferenceStudyPlanType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::StatisticalStudyPlanBaseType& > (*this) = x;
        this->NumberOfSamples_ = x.NumberOfSamples_;
        this->SubgroupSize_ = x.SubgroupSize_;
        this->ManufacturingProcessId_ = x.ManufacturingProcessId_;
        this->LinearAbsoluteDifference_ = x.LinearAbsoluteDifference_;
        this->AngularAbsoluteDifference_ = x.AngularAbsoluteDifference_;
        this->AreaAbsoluteDifference_ = x.AreaAbsoluteDifference_;
        this->ForceAbsoluteDifference_ = x.ForceAbsoluteDifference_;
        this->MassAbsoluteDifference_ = x.MassAbsoluteDifference_;
        this->PressureAbsoluteDifference_ = x.PressureAbsoluteDifference_;
        this->SpeedAbsoluteDifference_ = x.SpeedAbsoluteDifference_;
        this->TemperatureAbsoluteDifference_ = x.TemperatureAbsoluteDifference_;
        this->TimeAbsoluteDifference_ = x.TimeAbsoluteDifference_;
        this->UserDefinedUnitAbsoluteDifference_ = x.UserDefinedUnitAbsoluteDifference_;
        this->RelativeDifference_ = x.RelativeDifference_;
      }

      return *this;
    }

    ProcessDifferenceStudyPlanType::
    ~ProcessDifferenceStudyPlanType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, ProcessDifferenceStudyPlanType >
    _xsd_ProcessDifferenceStudyPlanType_type_factory_init (
      "ProcessDifferenceStudyPlanType",
      "http://qifstandards.org/xsd/qif2");

    // SimpleStudyPlanType
    //

    SimpleStudyPlanType::
    SimpleStudyPlanType (const id_type& id,
                         const NumberOfSamples_type& NumberOfSamples)
    : ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType (id,
                                                             NumberOfSamples)
    {
    }

    SimpleStudyPlanType::
    SimpleStudyPlanType (const SimpleStudyPlanType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType (x, f, c)
    {
    }

    SimpleStudyPlanType::
    SimpleStudyPlanType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType (e, f, c)
    {
    }

    SimpleStudyPlanType* SimpleStudyPlanType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SimpleStudyPlanType (*this, f, c);
    }

    SimpleStudyPlanType::
    ~SimpleStudyPlanType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, SimpleStudyPlanType >
    _xsd_SimpleStudyPlanType_type_factory_init (
      "SimpleStudyPlanType",
      "http://qifstandards.org/xsd/qif2");

    // CapabilityStudyPlanType
    //

    CapabilityStudyPlanType::
    CapabilityStudyPlanType (const id_type& id,
                             const NumberOfSamples_type& NumberOfSamples)
    : ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType (id,
                                                             NumberOfSamples),
      CpkThreshold_ (this),
      PpkThreshold_ (this)
    {
    }

    CapabilityStudyPlanType::
    CapabilityStudyPlanType (const CapabilityStudyPlanType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType (x, f, c),
      CpkThreshold_ (x.CpkThreshold_, f, this),
      PpkThreshold_ (x.PpkThreshold_, f, this)
    {
    }

    CapabilityStudyPlanType::
    CapabilityStudyPlanType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType (e, f | ::xml_schema::flags::base, c),
      CpkThreshold_ (this),
      PpkThreshold_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CapabilityStudyPlanType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::MultipleProductInstanceStudyPlanBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CpkThreshold
        //
        if (n.name () == "CpkThreshold" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CpkThreshold_type > r (
            CpkThreshold_traits::create (i, f, this));

          if (!this->CpkThreshold_)
          {
            this->CpkThreshold_.set (r);
            continue;
          }
        }

        // PpkThreshold
        //
        if (n.name () == "PpkThreshold" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PpkThreshold_type > r (
            PpkThreshold_traits::create (i, f, this));

          if (!this->PpkThreshold_)
          {
            this->PpkThreshold_.set (r);
            continue;
          }
        }

        break;
      }
    }

    CapabilityStudyPlanType* CapabilityStudyPlanType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CapabilityStudyPlanType (*this, f, c);
    }

    CapabilityStudyPlanType& CapabilityStudyPlanType::
    operator= (const CapabilityStudyPlanType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType& > (*this) = x;
        this->CpkThreshold_ = x.CpkThreshold_;
        this->PpkThreshold_ = x.PpkThreshold_;
      }

      return *this;
    }

    CapabilityStudyPlanType::
    ~CapabilityStudyPlanType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, CapabilityStudyPlanType >
    _xsd_CapabilityStudyPlanType_type_factory_init (
      "CapabilityStudyPlanType",
      "http://qifstandards.org/xsd/qif2");

    // GageRandRStudyEnumType
    //

    GageRandRStudyEnumType::
    GageRandRStudyEnumType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_GageRandRStudyEnumType_convert ();
    }

    GageRandRStudyEnumType::
    GageRandRStudyEnumType (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_GageRandRStudyEnumType_convert ();
    }

    GageRandRStudyEnumType::
    GageRandRStudyEnumType (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_GageRandRStudyEnumType_convert ();
    }

    GageRandRStudyEnumType* GageRandRStudyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class GageRandRStudyEnumType (*this, f, c);
    }

    GageRandRStudyEnumType::value GageRandRStudyEnumType::
    _xsd_GageRandRStudyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_GageRandRStudyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_GageRandRStudyEnumType_indexes_,
                        _xsd_GageRandRStudyEnumType_indexes_ + 3,
                        *this,
                        c));

      if (i == _xsd_GageRandRStudyEnumType_indexes_ + 3 || _xsd_GageRandRStudyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const GageRandRStudyEnumType::
    _xsd_GageRandRStudyEnumType_literals_[3] =
    {
      "RANGE",
      "AVGANDRANGE",
      "ANOVA"
    };

    const GageRandRStudyEnumType::value GageRandRStudyEnumType::
    _xsd_GageRandRStudyEnumType_indexes_[3] =
    {
      ::xsd::qif2::GageRandRStudyEnumType::ANOVA,
      ::xsd::qif2::GageRandRStudyEnumType::AVGANDRANGE,
      ::xsd::qif2::GageRandRStudyEnumType::RANGE
    };

    // GageRandRStudyPlanType
    //

    GageRandRStudyPlanType::
    GageRandRStudyPlanType (const id_type& id,
                            const RandRStudyType_type& RandRStudyType,
                            const NumberOfAppraisers_type& NumberOfAppraisers,
                            const NumberOfParts_type& NumberOfParts,
                            const NumberOfTrials_type& NumberOfTrials)
    : ::xsd::qif2::StatisticalStudyPlanBaseType (id),
      MeasurementDeviceIds_ (this),
      RandRStudyType_ (RandRStudyType, this),
      NumberOfAppraisers_ (NumberOfAppraisers, this),
      NumberOfParts_ (NumberOfParts, this),
      NumberOfTrials_ (NumberOfTrials, this),
      MaximumRelativeAppraiserVariation_ (this),
      MaximumAbsoluteLinearAppraiserVariation_ (this),
      MaximumAbsoluteAngularAppraiserVariation_ (this),
      MaximumAbsoluteAreaAppraiserVariation_ (this),
      MaximumAbsoluteForceAppraiserVariation_ (this),
      MaximumAbsoluteMassAppraiserVariation_ (this),
      MaximumAbsolutePressureAppraiserVariation_ (this),
      MaximumAbsoluteSpeedAppraiserVariation_ (this),
      MaximumAbsoluteTemperatureAppraiserVariation_ (this),
      MaximumAbsoluteTimeAppraiserVariation_ (this),
      MaximumAbsoluteUserDefinedUnitAppraiserVariation_ (this),
      MaximumRelativeEquipmentVariation_ (this),
      MaximumAbsoluteLinearEquipmentVariation_ (this),
      MaximumAbsoluteAngularEquipmentVariation_ (this),
      MaximumAbsoluteAreaEquipmentVariation_ (this),
      MaximumAbsoluteForceEquipmentVariation_ (this),
      MaximumAbsoluteMassEquipmentVariation_ (this),
      MaximumAbsolutePressureEquipmentVariation_ (this),
      MaximumAbsoluteSpeedEquipmentVariation_ (this),
      MaximumAbsoluteTemperatureEquipmentVariation_ (this),
      MaximumAbsoluteTimeEquipmentVariation_ (this),
      MaximumAbsoluteUserDefinedUnitEquipmentVariation_ (this),
      MaximumRelativeTotalRandR_ (this),
      MaximumAbsoluteLinearTotalRandR_ (this),
      MaximumAbsoluteAngularTotalRandR_ (this),
      MaximumAbsoluteAreaTotalRandR_ (this),
      MaximumAbsoluteForceTotalRandR_ (this),
      MaximumAbsoluteMassTotalRandR_ (this),
      MaximumAbsolutePressureTotalRandR_ (this),
      MaximumAbsoluteSpeedTotalRandR_ (this),
      MaximumAbsoluteTemperatureTotalRandR_ (this),
      MaximumAbsoluteTimeTotalRandR_ (this),
      MaximumAbsoluteUserDefinedUnitTotalRandR_ (this)
    {
    }

    GageRandRStudyPlanType::
    GageRandRStudyPlanType (const GageRandRStudyPlanType& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyPlanBaseType (x, f, c),
      MeasurementDeviceIds_ (x.MeasurementDeviceIds_, f, this),
      RandRStudyType_ (x.RandRStudyType_, f, this),
      NumberOfAppraisers_ (x.NumberOfAppraisers_, f, this),
      NumberOfParts_ (x.NumberOfParts_, f, this),
      NumberOfTrials_ (x.NumberOfTrials_, f, this),
      MaximumRelativeAppraiserVariation_ (x.MaximumRelativeAppraiserVariation_, f, this),
      MaximumAbsoluteLinearAppraiserVariation_ (x.MaximumAbsoluteLinearAppraiserVariation_, f, this),
      MaximumAbsoluteAngularAppraiserVariation_ (x.MaximumAbsoluteAngularAppraiserVariation_, f, this),
      MaximumAbsoluteAreaAppraiserVariation_ (x.MaximumAbsoluteAreaAppraiserVariation_, f, this),
      MaximumAbsoluteForceAppraiserVariation_ (x.MaximumAbsoluteForceAppraiserVariation_, f, this),
      MaximumAbsoluteMassAppraiserVariation_ (x.MaximumAbsoluteMassAppraiserVariation_, f, this),
      MaximumAbsolutePressureAppraiserVariation_ (x.MaximumAbsolutePressureAppraiserVariation_, f, this),
      MaximumAbsoluteSpeedAppraiserVariation_ (x.MaximumAbsoluteSpeedAppraiserVariation_, f, this),
      MaximumAbsoluteTemperatureAppraiserVariation_ (x.MaximumAbsoluteTemperatureAppraiserVariation_, f, this),
      MaximumAbsoluteTimeAppraiserVariation_ (x.MaximumAbsoluteTimeAppraiserVariation_, f, this),
      MaximumAbsoluteUserDefinedUnitAppraiserVariation_ (x.MaximumAbsoluteUserDefinedUnitAppraiserVariation_, f, this),
      MaximumRelativeEquipmentVariation_ (x.MaximumRelativeEquipmentVariation_, f, this),
      MaximumAbsoluteLinearEquipmentVariation_ (x.MaximumAbsoluteLinearEquipmentVariation_, f, this),
      MaximumAbsoluteAngularEquipmentVariation_ (x.MaximumAbsoluteAngularEquipmentVariation_, f, this),
      MaximumAbsoluteAreaEquipmentVariation_ (x.MaximumAbsoluteAreaEquipmentVariation_, f, this),
      MaximumAbsoluteForceEquipmentVariation_ (x.MaximumAbsoluteForceEquipmentVariation_, f, this),
      MaximumAbsoluteMassEquipmentVariation_ (x.MaximumAbsoluteMassEquipmentVariation_, f, this),
      MaximumAbsolutePressureEquipmentVariation_ (x.MaximumAbsolutePressureEquipmentVariation_, f, this),
      MaximumAbsoluteSpeedEquipmentVariation_ (x.MaximumAbsoluteSpeedEquipmentVariation_, f, this),
      MaximumAbsoluteTemperatureEquipmentVariation_ (x.MaximumAbsoluteTemperatureEquipmentVariation_, f, this),
      MaximumAbsoluteTimeEquipmentVariation_ (x.MaximumAbsoluteTimeEquipmentVariation_, f, this),
      MaximumAbsoluteUserDefinedUnitEquipmentVariation_ (x.MaximumAbsoluteUserDefinedUnitEquipmentVariation_, f, this),
      MaximumRelativeTotalRandR_ (x.MaximumRelativeTotalRandR_, f, this),
      MaximumAbsoluteLinearTotalRandR_ (x.MaximumAbsoluteLinearTotalRandR_, f, this),
      MaximumAbsoluteAngularTotalRandR_ (x.MaximumAbsoluteAngularTotalRandR_, f, this),
      MaximumAbsoluteAreaTotalRandR_ (x.MaximumAbsoluteAreaTotalRandR_, f, this),
      MaximumAbsoluteForceTotalRandR_ (x.MaximumAbsoluteForceTotalRandR_, f, this),
      MaximumAbsoluteMassTotalRandR_ (x.MaximumAbsoluteMassTotalRandR_, f, this),
      MaximumAbsolutePressureTotalRandR_ (x.MaximumAbsolutePressureTotalRandR_, f, this),
      MaximumAbsoluteSpeedTotalRandR_ (x.MaximumAbsoluteSpeedTotalRandR_, f, this),
      MaximumAbsoluteTemperatureTotalRandR_ (x.MaximumAbsoluteTemperatureTotalRandR_, f, this),
      MaximumAbsoluteTimeTotalRandR_ (x.MaximumAbsoluteTimeTotalRandR_, f, this),
      MaximumAbsoluteUserDefinedUnitTotalRandR_ (x.MaximumAbsoluteUserDefinedUnitTotalRandR_, f, this)
    {
    }

    GageRandRStudyPlanType::
    GageRandRStudyPlanType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyPlanBaseType (e, f | ::xml_schema::flags::base, c),
      MeasurementDeviceIds_ (this),
      RandRStudyType_ (this),
      NumberOfAppraisers_ (this),
      NumberOfParts_ (this),
      NumberOfTrials_ (this),
      MaximumRelativeAppraiserVariation_ (this),
      MaximumAbsoluteLinearAppraiserVariation_ (this),
      MaximumAbsoluteAngularAppraiserVariation_ (this),
      MaximumAbsoluteAreaAppraiserVariation_ (this),
      MaximumAbsoluteForceAppraiserVariation_ (this),
      MaximumAbsoluteMassAppraiserVariation_ (this),
      MaximumAbsolutePressureAppraiserVariation_ (this),
      MaximumAbsoluteSpeedAppraiserVariation_ (this),
      MaximumAbsoluteTemperatureAppraiserVariation_ (this),
      MaximumAbsoluteTimeAppraiserVariation_ (this),
      MaximumAbsoluteUserDefinedUnitAppraiserVariation_ (this),
      MaximumRelativeEquipmentVariation_ (this),
      MaximumAbsoluteLinearEquipmentVariation_ (this),
      MaximumAbsoluteAngularEquipmentVariation_ (this),
      MaximumAbsoluteAreaEquipmentVariation_ (this),
      MaximumAbsoluteForceEquipmentVariation_ (this),
      MaximumAbsoluteMassEquipmentVariation_ (this),
      MaximumAbsolutePressureEquipmentVariation_ (this),
      MaximumAbsoluteSpeedEquipmentVariation_ (this),
      MaximumAbsoluteTemperatureEquipmentVariation_ (this),
      MaximumAbsoluteTimeEquipmentVariation_ (this),
      MaximumAbsoluteUserDefinedUnitEquipmentVariation_ (this),
      MaximumRelativeTotalRandR_ (this),
      MaximumAbsoluteLinearTotalRandR_ (this),
      MaximumAbsoluteAngularTotalRandR_ (this),
      MaximumAbsoluteAreaTotalRandR_ (this),
      MaximumAbsoluteForceTotalRandR_ (this),
      MaximumAbsoluteMassTotalRandR_ (this),
      MaximumAbsolutePressureTotalRandR_ (this),
      MaximumAbsoluteSpeedTotalRandR_ (this),
      MaximumAbsoluteTemperatureTotalRandR_ (this),
      MaximumAbsoluteTimeTotalRandR_ (this),
      MaximumAbsoluteUserDefinedUnitTotalRandR_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void GageRandRStudyPlanType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatisticalStudyPlanBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MeasurementDeviceIds
        //
        if (n.name () == "MeasurementDeviceIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurementDeviceIds_type > r (
            MeasurementDeviceIds_traits::create (i, f, this));

          if (!this->MeasurementDeviceIds_)
          {
            this->MeasurementDeviceIds_.set (r);
            continue;
          }
        }

        // RandRStudyType
        //
        if (n.name () == "RandRStudyType" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RandRStudyType_type > r (
            RandRStudyType_traits::create (i, f, this));

          if (!RandRStudyType_.present ())
          {
            this->RandRStudyType_.set (r);
            continue;
          }
        }

        // NumberOfAppraisers
        //
        if (n.name () == "NumberOfAppraisers" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!NumberOfAppraisers_.present ())
          {
            this->NumberOfAppraisers_.set (NumberOfAppraisers_traits::create (i, f, this));
            continue;
          }
        }

        // NumberOfParts
        //
        if (n.name () == "NumberOfParts" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!NumberOfParts_.present ())
          {
            this->NumberOfParts_.set (NumberOfParts_traits::create (i, f, this));
            continue;
          }
        }

        // NumberOfTrials
        //
        if (n.name () == "NumberOfTrials" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!NumberOfTrials_.present ())
          {
            this->NumberOfTrials_.set (NumberOfTrials_traits::create (i, f, this));
            continue;
          }
        }

        // MaximumRelativeAppraiserVariation
        //
        if (n.name () == "MaximumRelativeAppraiserVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumRelativeAppraiserVariation_type > r (
            MaximumRelativeAppraiserVariation_traits::create (i, f, this));

          if (!this->MaximumRelativeAppraiserVariation_)
          {
            this->MaximumRelativeAppraiserVariation_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteLinearAppraiserVariation
        //
        if (n.name () == "MaximumAbsoluteLinearAppraiserVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteLinearAppraiserVariation_type > r (
            MaximumAbsoluteLinearAppraiserVariation_traits::create (i, f, this));

          if (!this->MaximumAbsoluteLinearAppraiserVariation_)
          {
            this->MaximumAbsoluteLinearAppraiserVariation_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteAngularAppraiserVariation
        //
        if (n.name () == "MaximumAbsoluteAngularAppraiserVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteAngularAppraiserVariation_type > r (
            MaximumAbsoluteAngularAppraiserVariation_traits::create (i, f, this));

          if (!this->MaximumAbsoluteAngularAppraiserVariation_)
          {
            this->MaximumAbsoluteAngularAppraiserVariation_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteAreaAppraiserVariation
        //
        if (n.name () == "MaximumAbsoluteAreaAppraiserVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteAreaAppraiserVariation_type > r (
            MaximumAbsoluteAreaAppraiserVariation_traits::create (i, f, this));

          if (!this->MaximumAbsoluteAreaAppraiserVariation_)
          {
            this->MaximumAbsoluteAreaAppraiserVariation_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteForceAppraiserVariation
        //
        if (n.name () == "MaximumAbsoluteForceAppraiserVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteForceAppraiserVariation_type > r (
            MaximumAbsoluteForceAppraiserVariation_traits::create (i, f, this));

          if (!this->MaximumAbsoluteForceAppraiserVariation_)
          {
            this->MaximumAbsoluteForceAppraiserVariation_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteMassAppraiserVariation
        //
        if (n.name () == "MaximumAbsoluteMassAppraiserVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteMassAppraiserVariation_type > r (
            MaximumAbsoluteMassAppraiserVariation_traits::create (i, f, this));

          if (!this->MaximumAbsoluteMassAppraiserVariation_)
          {
            this->MaximumAbsoluteMassAppraiserVariation_.set (r);
            continue;
          }
        }

        // MaximumAbsolutePressureAppraiserVariation
        //
        if (n.name () == "MaximumAbsolutePressureAppraiserVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsolutePressureAppraiserVariation_type > r (
            MaximumAbsolutePressureAppraiserVariation_traits::create (i, f, this));

          if (!this->MaximumAbsolutePressureAppraiserVariation_)
          {
            this->MaximumAbsolutePressureAppraiserVariation_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteSpeedAppraiserVariation
        //
        if (n.name () == "MaximumAbsoluteSpeedAppraiserVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteSpeedAppraiserVariation_type > r (
            MaximumAbsoluteSpeedAppraiserVariation_traits::create (i, f, this));

          if (!this->MaximumAbsoluteSpeedAppraiserVariation_)
          {
            this->MaximumAbsoluteSpeedAppraiserVariation_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteTemperatureAppraiserVariation
        //
        if (n.name () == "MaximumAbsoluteTemperatureAppraiserVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteTemperatureAppraiserVariation_type > r (
            MaximumAbsoluteTemperatureAppraiserVariation_traits::create (i, f, this));

          if (!this->MaximumAbsoluteTemperatureAppraiserVariation_)
          {
            this->MaximumAbsoluteTemperatureAppraiserVariation_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteTimeAppraiserVariation
        //
        if (n.name () == "MaximumAbsoluteTimeAppraiserVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteTimeAppraiserVariation_type > r (
            MaximumAbsoluteTimeAppraiserVariation_traits::create (i, f, this));

          if (!this->MaximumAbsoluteTimeAppraiserVariation_)
          {
            this->MaximumAbsoluteTimeAppraiserVariation_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteUserDefinedUnitAppraiserVariation
        //
        if (n.name () == "MaximumAbsoluteUserDefinedUnitAppraiserVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteUserDefinedUnitAppraiserVariation_type > r (
            MaximumAbsoluteUserDefinedUnitAppraiserVariation_traits::create (i, f, this));

          this->MaximumAbsoluteUserDefinedUnitAppraiserVariation_.push_back (r);
          continue;
        }

        // MaximumRelativeEquipmentVariation
        //
        if (n.name () == "MaximumRelativeEquipmentVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumRelativeEquipmentVariation_type > r (
            MaximumRelativeEquipmentVariation_traits::create (i, f, this));

          if (!this->MaximumRelativeEquipmentVariation_)
          {
            this->MaximumRelativeEquipmentVariation_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteLinearEquipmentVariation
        //
        if (n.name () == "MaximumAbsoluteLinearEquipmentVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteLinearEquipmentVariation_type > r (
            MaximumAbsoluteLinearEquipmentVariation_traits::create (i, f, this));

          if (!this->MaximumAbsoluteLinearEquipmentVariation_)
          {
            this->MaximumAbsoluteLinearEquipmentVariation_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteAngularEquipmentVariation
        //
        if (n.name () == "MaximumAbsoluteAngularEquipmentVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteAngularEquipmentVariation_type > r (
            MaximumAbsoluteAngularEquipmentVariation_traits::create (i, f, this));

          if (!this->MaximumAbsoluteAngularEquipmentVariation_)
          {
            this->MaximumAbsoluteAngularEquipmentVariation_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteAreaEquipmentVariation
        //
        if (n.name () == "MaximumAbsoluteAreaEquipmentVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteAreaEquipmentVariation_type > r (
            MaximumAbsoluteAreaEquipmentVariation_traits::create (i, f, this));

          if (!this->MaximumAbsoluteAreaEquipmentVariation_)
          {
            this->MaximumAbsoluteAreaEquipmentVariation_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteForceEquipmentVariation
        //
        if (n.name () == "MaximumAbsoluteForceEquipmentVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteForceEquipmentVariation_type > r (
            MaximumAbsoluteForceEquipmentVariation_traits::create (i, f, this));

          if (!this->MaximumAbsoluteForceEquipmentVariation_)
          {
            this->MaximumAbsoluteForceEquipmentVariation_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteMassEquipmentVariation
        //
        if (n.name () == "MaximumAbsoluteMassEquipmentVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteMassEquipmentVariation_type > r (
            MaximumAbsoluteMassEquipmentVariation_traits::create (i, f, this));

          if (!this->MaximumAbsoluteMassEquipmentVariation_)
          {
            this->MaximumAbsoluteMassEquipmentVariation_.set (r);
            continue;
          }
        }

        // MaximumAbsolutePressureEquipmentVariation
        //
        if (n.name () == "MaximumAbsolutePressureEquipmentVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsolutePressureEquipmentVariation_type > r (
            MaximumAbsolutePressureEquipmentVariation_traits::create (i, f, this));

          if (!this->MaximumAbsolutePressureEquipmentVariation_)
          {
            this->MaximumAbsolutePressureEquipmentVariation_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteSpeedEquipmentVariation
        //
        if (n.name () == "MaximumAbsoluteSpeedEquipmentVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteSpeedEquipmentVariation_type > r (
            MaximumAbsoluteSpeedEquipmentVariation_traits::create (i, f, this));

          if (!this->MaximumAbsoluteSpeedEquipmentVariation_)
          {
            this->MaximumAbsoluteSpeedEquipmentVariation_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteTemperatureEquipmentVariation
        //
        if (n.name () == "MaximumAbsoluteTemperatureEquipmentVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteTemperatureEquipmentVariation_type > r (
            MaximumAbsoluteTemperatureEquipmentVariation_traits::create (i, f, this));

          if (!this->MaximumAbsoluteTemperatureEquipmentVariation_)
          {
            this->MaximumAbsoluteTemperatureEquipmentVariation_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteTimeEquipmentVariation
        //
        if (n.name () == "MaximumAbsoluteTimeEquipmentVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteTimeEquipmentVariation_type > r (
            MaximumAbsoluteTimeEquipmentVariation_traits::create (i, f, this));

          if (!this->MaximumAbsoluteTimeEquipmentVariation_)
          {
            this->MaximumAbsoluteTimeEquipmentVariation_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteUserDefinedUnitEquipmentVariation
        //
        if (n.name () == "MaximumAbsoluteUserDefinedUnitEquipmentVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteUserDefinedUnitEquipmentVariation_type > r (
            MaximumAbsoluteUserDefinedUnitEquipmentVariation_traits::create (i, f, this));

          this->MaximumAbsoluteUserDefinedUnitEquipmentVariation_.push_back (r);
          continue;
        }

        // MaximumRelativeTotalRandR
        //
        if (n.name () == "MaximumRelativeTotalRandR" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumRelativeTotalRandR_type > r (
            MaximumRelativeTotalRandR_traits::create (i, f, this));

          if (!this->MaximumRelativeTotalRandR_)
          {
            this->MaximumRelativeTotalRandR_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteLinearTotalRandR
        //
        if (n.name () == "MaximumAbsoluteLinearTotalRandR" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteLinearTotalRandR_type > r (
            MaximumAbsoluteLinearTotalRandR_traits::create (i, f, this));

          if (!this->MaximumAbsoluteLinearTotalRandR_)
          {
            this->MaximumAbsoluteLinearTotalRandR_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteAngularTotalRandR
        //
        if (n.name () == "MaximumAbsoluteAngularTotalRandR" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteAngularTotalRandR_type > r (
            MaximumAbsoluteAngularTotalRandR_traits::create (i, f, this));

          if (!this->MaximumAbsoluteAngularTotalRandR_)
          {
            this->MaximumAbsoluteAngularTotalRandR_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteAreaTotalRandR
        //
        if (n.name () == "MaximumAbsoluteAreaTotalRandR" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteAreaTotalRandR_type > r (
            MaximumAbsoluteAreaTotalRandR_traits::create (i, f, this));

          if (!this->MaximumAbsoluteAreaTotalRandR_)
          {
            this->MaximumAbsoluteAreaTotalRandR_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteForceTotalRandR
        //
        if (n.name () == "MaximumAbsoluteForceTotalRandR" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteForceTotalRandR_type > r (
            MaximumAbsoluteForceTotalRandR_traits::create (i, f, this));

          if (!this->MaximumAbsoluteForceTotalRandR_)
          {
            this->MaximumAbsoluteForceTotalRandR_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteMassTotalRandR
        //
        if (n.name () == "MaximumAbsoluteMassTotalRandR" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteMassTotalRandR_type > r (
            MaximumAbsoluteMassTotalRandR_traits::create (i, f, this));

          if (!this->MaximumAbsoluteMassTotalRandR_)
          {
            this->MaximumAbsoluteMassTotalRandR_.set (r);
            continue;
          }
        }

        // MaximumAbsolutePressureTotalRandR
        //
        if (n.name () == "MaximumAbsolutePressureTotalRandR" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsolutePressureTotalRandR_type > r (
            MaximumAbsolutePressureTotalRandR_traits::create (i, f, this));

          if (!this->MaximumAbsolutePressureTotalRandR_)
          {
            this->MaximumAbsolutePressureTotalRandR_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteSpeedTotalRandR
        //
        if (n.name () == "MaximumAbsoluteSpeedTotalRandR" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteSpeedTotalRandR_type > r (
            MaximumAbsoluteSpeedTotalRandR_traits::create (i, f, this));

          if (!this->MaximumAbsoluteSpeedTotalRandR_)
          {
            this->MaximumAbsoluteSpeedTotalRandR_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteTemperatureTotalRandR
        //
        if (n.name () == "MaximumAbsoluteTemperatureTotalRandR" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteTemperatureTotalRandR_type > r (
            MaximumAbsoluteTemperatureTotalRandR_traits::create (i, f, this));

          if (!this->MaximumAbsoluteTemperatureTotalRandR_)
          {
            this->MaximumAbsoluteTemperatureTotalRandR_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteTimeTotalRandR
        //
        if (n.name () == "MaximumAbsoluteTimeTotalRandR" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteTimeTotalRandR_type > r (
            MaximumAbsoluteTimeTotalRandR_traits::create (i, f, this));

          if (!this->MaximumAbsoluteTimeTotalRandR_)
          {
            this->MaximumAbsoluteTimeTotalRandR_.set (r);
            continue;
          }
        }

        // MaximumAbsoluteUserDefinedUnitTotalRandR
        //
        if (n.name () == "MaximumAbsoluteUserDefinedUnitTotalRandR" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumAbsoluteUserDefinedUnitTotalRandR_type > r (
            MaximumAbsoluteUserDefinedUnitTotalRandR_traits::create (i, f, this));

          this->MaximumAbsoluteUserDefinedUnitTotalRandR_.push_back (r);
          continue;
        }

        break;
      }

      if (!RandRStudyType_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "RandRStudyType",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!NumberOfAppraisers_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "NumberOfAppraisers",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!NumberOfParts_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "NumberOfParts",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!NumberOfTrials_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "NumberOfTrials",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    GageRandRStudyPlanType* GageRandRStudyPlanType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class GageRandRStudyPlanType (*this, f, c);
    }

    GageRandRStudyPlanType& GageRandRStudyPlanType::
    operator= (const GageRandRStudyPlanType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::StatisticalStudyPlanBaseType& > (*this) = x;
        this->MeasurementDeviceIds_ = x.MeasurementDeviceIds_;
        this->RandRStudyType_ = x.RandRStudyType_;
        this->NumberOfAppraisers_ = x.NumberOfAppraisers_;
        this->NumberOfParts_ = x.NumberOfParts_;
        this->NumberOfTrials_ = x.NumberOfTrials_;
        this->MaximumRelativeAppraiserVariation_ = x.MaximumRelativeAppraiserVariation_;
        this->MaximumAbsoluteLinearAppraiserVariation_ = x.MaximumAbsoluteLinearAppraiserVariation_;
        this->MaximumAbsoluteAngularAppraiserVariation_ = x.MaximumAbsoluteAngularAppraiserVariation_;
        this->MaximumAbsoluteAreaAppraiserVariation_ = x.MaximumAbsoluteAreaAppraiserVariation_;
        this->MaximumAbsoluteForceAppraiserVariation_ = x.MaximumAbsoluteForceAppraiserVariation_;
        this->MaximumAbsoluteMassAppraiserVariation_ = x.MaximumAbsoluteMassAppraiserVariation_;
        this->MaximumAbsolutePressureAppraiserVariation_ = x.MaximumAbsolutePressureAppraiserVariation_;
        this->MaximumAbsoluteSpeedAppraiserVariation_ = x.MaximumAbsoluteSpeedAppraiserVariation_;
        this->MaximumAbsoluteTemperatureAppraiserVariation_ = x.MaximumAbsoluteTemperatureAppraiserVariation_;
        this->MaximumAbsoluteTimeAppraiserVariation_ = x.MaximumAbsoluteTimeAppraiserVariation_;
        this->MaximumAbsoluteUserDefinedUnitAppraiserVariation_ = x.MaximumAbsoluteUserDefinedUnitAppraiserVariation_;
        this->MaximumRelativeEquipmentVariation_ = x.MaximumRelativeEquipmentVariation_;
        this->MaximumAbsoluteLinearEquipmentVariation_ = x.MaximumAbsoluteLinearEquipmentVariation_;
        this->MaximumAbsoluteAngularEquipmentVariation_ = x.MaximumAbsoluteAngularEquipmentVariation_;
        this->MaximumAbsoluteAreaEquipmentVariation_ = x.MaximumAbsoluteAreaEquipmentVariation_;
        this->MaximumAbsoluteForceEquipmentVariation_ = x.MaximumAbsoluteForceEquipmentVariation_;
        this->MaximumAbsoluteMassEquipmentVariation_ = x.MaximumAbsoluteMassEquipmentVariation_;
        this->MaximumAbsolutePressureEquipmentVariation_ = x.MaximumAbsolutePressureEquipmentVariation_;
        this->MaximumAbsoluteSpeedEquipmentVariation_ = x.MaximumAbsoluteSpeedEquipmentVariation_;
        this->MaximumAbsoluteTemperatureEquipmentVariation_ = x.MaximumAbsoluteTemperatureEquipmentVariation_;
        this->MaximumAbsoluteTimeEquipmentVariation_ = x.MaximumAbsoluteTimeEquipmentVariation_;
        this->MaximumAbsoluteUserDefinedUnitEquipmentVariation_ = x.MaximumAbsoluteUserDefinedUnitEquipmentVariation_;
        this->MaximumRelativeTotalRandR_ = x.MaximumRelativeTotalRandR_;
        this->MaximumAbsoluteLinearTotalRandR_ = x.MaximumAbsoluteLinearTotalRandR_;
        this->MaximumAbsoluteAngularTotalRandR_ = x.MaximumAbsoluteAngularTotalRandR_;
        this->MaximumAbsoluteAreaTotalRandR_ = x.MaximumAbsoluteAreaTotalRandR_;
        this->MaximumAbsoluteForceTotalRandR_ = x.MaximumAbsoluteForceTotalRandR_;
        this->MaximumAbsoluteMassTotalRandR_ = x.MaximumAbsoluteMassTotalRandR_;
        this->MaximumAbsolutePressureTotalRandR_ = x.MaximumAbsolutePressureTotalRandR_;
        this->MaximumAbsoluteSpeedTotalRandR_ = x.MaximumAbsoluteSpeedTotalRandR_;
        this->MaximumAbsoluteTemperatureTotalRandR_ = x.MaximumAbsoluteTemperatureTotalRandR_;
        this->MaximumAbsoluteTimeTotalRandR_ = x.MaximumAbsoluteTimeTotalRandR_;
        this->MaximumAbsoluteUserDefinedUnitTotalRandR_ = x.MaximumAbsoluteUserDefinedUnitTotalRandR_;
      }

      return *this;
    }

    GageRandRStudyPlanType::
    ~GageRandRStudyPlanType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, GageRandRStudyPlanType >
    _xsd_GageRandRStudyPlanType_type_factory_init (
      "GageRandRStudyPlanType",
      "http://qifstandards.org/xsd/qif2");

    // ControlMethodType
    //

    ControlMethodType::
    ControlMethodType (const id_type& id)
    : ::xml_schema::type (),
      AssignableCauseId_ (this),
      NumOutOfTolerance_ (this),
      CpThreshold_ (this),
      CpkThreshold_ (this),
      PpThreshold_ (this),
      PpkThreshold_ (this),
      NumOutOfControl_ (this),
      TrendGrouping_ (this),
      SkewGrouping_ (this),
      OneThirdGrouping_ (this),
      TwoThirdsGrouping_ (this),
      Oscillation_ (this),
      Stratification_ (this),
      NumOutOfControlRng_ (this),
      id_ (id, this)
    {
    }

    ControlMethodType::
    ControlMethodType (const ControlMethodType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      AssignableCauseId_ (x.AssignableCauseId_, f, this),
      NumOutOfTolerance_ (x.NumOutOfTolerance_, f, this),
      CpThreshold_ (x.CpThreshold_, f, this),
      CpkThreshold_ (x.CpkThreshold_, f, this),
      PpThreshold_ (x.PpThreshold_, f, this),
      PpkThreshold_ (x.PpkThreshold_, f, this),
      NumOutOfControl_ (x.NumOutOfControl_, f, this),
      TrendGrouping_ (x.TrendGrouping_, f, this),
      SkewGrouping_ (x.SkewGrouping_, f, this),
      OneThirdGrouping_ (x.OneThirdGrouping_, f, this),
      TwoThirdsGrouping_ (x.TwoThirdsGrouping_, f, this),
      Oscillation_ (x.Oscillation_, f, this),
      Stratification_ (x.Stratification_, f, this),
      NumOutOfControlRng_ (x.NumOutOfControlRng_, f, this),
      id_ (x.id_, f, this)
    {
    }

    ControlMethodType::
    ControlMethodType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      AssignableCauseId_ (this),
      NumOutOfTolerance_ (this),
      CpThreshold_ (this),
      CpkThreshold_ (this),
      PpThreshold_ (this),
      PpkThreshold_ (this),
      NumOutOfControl_ (this),
      TrendGrouping_ (this),
      SkewGrouping_ (this),
      OneThirdGrouping_ (this),
      TwoThirdsGrouping_ (this),
      Oscillation_ (this),
      Stratification_ (this),
      NumOutOfControlRng_ (this),
      id_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ControlMethodType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // AssignableCauseId
        //
        if (n.name () == "AssignableCauseId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AssignableCauseId_type > r (
            AssignableCauseId_traits::create (i, f, this));

          this->AssignableCauseId_.push_back (r);
          continue;
        }

        // NumOutOfTolerance
        //
        if (n.name () == "NumOutOfTolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NumOutOfTolerance_type > r (
            NumOutOfTolerance_traits::create (i, f, this));

          if (!this->NumOutOfTolerance_)
          {
            this->NumOutOfTolerance_.set (r);
            continue;
          }
        }

        // CpThreshold
        //
        if (n.name () == "CpThreshold" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CpThreshold_type > r (
            CpThreshold_traits::create (i, f, this));

          if (!this->CpThreshold_)
          {
            this->CpThreshold_.set (r);
            continue;
          }
        }

        // CpkThreshold
        //
        if (n.name () == "CpkThreshold" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CpkThreshold_type > r (
            CpkThreshold_traits::create (i, f, this));

          if (!this->CpkThreshold_)
          {
            this->CpkThreshold_.set (r);
            continue;
          }
        }

        // PpThreshold
        //
        if (n.name () == "PpThreshold" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PpThreshold_type > r (
            PpThreshold_traits::create (i, f, this));

          if (!this->PpThreshold_)
          {
            this->PpThreshold_.set (r);
            continue;
          }
        }

        // PpkThreshold
        //
        if (n.name () == "PpkThreshold" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PpkThreshold_type > r (
            PpkThreshold_traits::create (i, f, this));

          if (!this->PpkThreshold_)
          {
            this->PpkThreshold_.set (r);
            continue;
          }
        }

        // NumOutOfControl
        //
        if (n.name () == "NumOutOfControl" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NumOutOfControl_type > r (
            NumOutOfControl_traits::create (i, f, this));

          if (!this->NumOutOfControl_)
          {
            this->NumOutOfControl_.set (r);
            continue;
          }
        }

        // TrendGrouping
        //
        if (n.name () == "TrendGrouping" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TrendGrouping_type > r (
            TrendGrouping_traits::create (i, f, this));

          if (!this->TrendGrouping_)
          {
            this->TrendGrouping_.set (r);
            continue;
          }
        }

        // SkewGrouping
        //
        if (n.name () == "SkewGrouping" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SkewGrouping_type > r (
            SkewGrouping_traits::create (i, f, this));

          if (!this->SkewGrouping_)
          {
            this->SkewGrouping_.set (r);
            continue;
          }
        }

        // OneThirdGrouping
        //
        if (n.name () == "OneThirdGrouping" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OneThirdGrouping_type > r (
            OneThirdGrouping_traits::create (i, f, this));

          if (!this->OneThirdGrouping_)
          {
            this->OneThirdGrouping_.set (r);
            continue;
          }
        }

        // TwoThirdsGrouping
        //
        if (n.name () == "TwoThirdsGrouping" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TwoThirdsGrouping_type > r (
            TwoThirdsGrouping_traits::create (i, f, this));

          if (!this->TwoThirdsGrouping_)
          {
            this->TwoThirdsGrouping_.set (r);
            continue;
          }
        }

        // Oscillation
        //
        if (n.name () == "Oscillation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Oscillation_type > r (
            Oscillation_traits::create (i, f, this));

          if (!this->Oscillation_)
          {
            this->Oscillation_.set (r);
            continue;
          }
        }

        // Stratification
        //
        if (n.name () == "Stratification" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Stratification_type > r (
            Stratification_traits::create (i, f, this));

          if (!this->Stratification_)
          {
            this->Stratification_.set (r);
            continue;
          }
        }

        // NumOutOfControlRng
        //
        if (n.name () == "NumOutOfControlRng" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NumOutOfControlRng_type > r (
            NumOutOfControlRng_traits::create (i, f, this));

          if (!this->NumOutOfControlRng_)
          {
            this->NumOutOfControlRng_.set (r);
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          this->id_.set (id_traits::create (i, f, this));
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "id",
          "");
      }
    }

    ControlMethodType* ControlMethodType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ControlMethodType (*this, f, c);
    }

    ControlMethodType& ControlMethodType::
    operator= (const ControlMethodType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->AssignableCauseId_ = x.AssignableCauseId_;
        this->NumOutOfTolerance_ = x.NumOutOfTolerance_;
        this->CpThreshold_ = x.CpThreshold_;
        this->CpkThreshold_ = x.CpkThreshold_;
        this->PpThreshold_ = x.PpThreshold_;
        this->PpkThreshold_ = x.PpkThreshold_;
        this->NumOutOfControl_ = x.NumOutOfControl_;
        this->TrendGrouping_ = x.TrendGrouping_;
        this->SkewGrouping_ = x.SkewGrouping_;
        this->OneThirdGrouping_ = x.OneThirdGrouping_;
        this->TwoThirdsGrouping_ = x.TwoThirdsGrouping_;
        this->Oscillation_ = x.Oscillation_;
        this->Stratification_ = x.Stratification_;
        this->NumOutOfControlRng_ = x.NumOutOfControlRng_;
        this->id_ = x.id_;
      }

      return *this;
    }

    ControlMethodType::
    ~ControlMethodType ()
    {
    }

    // ProductionStudyPlanType
    //

    ProductionStudyPlanType::
    ProductionStudyPlanType (const id_type& id,
                             const NumberOfSamples_type& NumberOfSamples,
                             const SamplingMethod_type& SamplingMethod)
    : ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType (id,
                                                             NumberOfSamples),
      SamplingMethod_ (SamplingMethod, this),
      ControlMethod_ (this)
    {
    }

    ProductionStudyPlanType::
    ProductionStudyPlanType (const id_type& id,
                             const NumberOfSamples_type& NumberOfSamples,
                             ::std::auto_ptr< SamplingMethod_type > SamplingMethod)
    : ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType (id,
                                                             NumberOfSamples),
      SamplingMethod_ (SamplingMethod, this),
      ControlMethod_ (this)
    {
    }

    ProductionStudyPlanType::
    ProductionStudyPlanType (const ProductionStudyPlanType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType (x, f, c),
      SamplingMethod_ (x.SamplingMethod_, f, this),
      ControlMethod_ (x.ControlMethod_, f, this)
    {
    }

    ProductionStudyPlanType::
    ProductionStudyPlanType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType (e, f | ::xml_schema::flags::base, c),
      SamplingMethod_ (this),
      ControlMethod_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ProductionStudyPlanType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::MultipleProductInstanceStudyPlanBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SamplingMethod
        //
        if (n.name () == "SamplingMethod" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SamplingMethod_type > r (
            SamplingMethod_traits::create (i, f, this));

          if (!SamplingMethod_.present ())
          {
            this->SamplingMethod_.set (r);
            continue;
          }
        }

        // ControlMethod
        //
        if (n.name () == "ControlMethod" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ControlMethod_type > r (
            ControlMethod_traits::create (i, f, this));

          this->ControlMethod_.push_back (r);
          continue;
        }

        break;
      }

      if (!SamplingMethod_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SamplingMethod",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ProductionStudyPlanType* ProductionStudyPlanType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ProductionStudyPlanType (*this, f, c);
    }

    ProductionStudyPlanType& ProductionStudyPlanType::
    operator= (const ProductionStudyPlanType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType& > (*this) = x;
        this->SamplingMethod_ = x.SamplingMethod_;
        this->ControlMethod_ = x.ControlMethod_;
      }

      return *this;
    }

    ProductionStudyPlanType::
    ~ProductionStudyPlanType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, ProductionStudyPlanType >
    _xsd_ProductionStudyPlanType_type_factory_init (
      "ProductionStudyPlanType",
      "http://qifstandards.org/xsd/qif2");

    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::FirstArticleStudyPlanType >
    _xsd_FirstArticleStudyPlan_element_factory_init (
      "StatisticalStudyPlan",
      "http://qifstandards.org/xsd/qif2",
      "FirstArticleStudyPlan",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::LinearityStudyPlanType >
    _xsd_LinearityStudyPlan_element_factory_init (
      "StatisticalStudyPlan",
      "http://qifstandards.org/xsd/qif2",
      "LinearityStudyPlan",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::SimpleStudyPlanType >
    _xsd_SimpleStudyPlan_element_factory_init (
      "StatisticalStudyPlan",
      "http://qifstandards.org/xsd/qif2",
      "SimpleStudyPlan",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::BiasStudyPlanType >
    _xsd_BiasStudyPlan_element_factory_init (
      "StatisticalStudyPlan",
      "http://qifstandards.org/xsd/qif2",
      "BiasStudyPlan",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::StabilityStudyPlanType >
    _xsd_StabilityStudyPlan_element_factory_init (
      "StatisticalStudyPlan",
      "http://qifstandards.org/xsd/qif2",
      "StabilityStudyPlan",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::ProcessDifferenceStudyPlanType >
    _xsd_ProcessDifferenceStudyPlan_element_factory_init (
      "StatisticalStudyPlan",
      "http://qifstandards.org/xsd/qif2",
      "ProcessDifferenceStudyPlan",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::CapabilityStudyPlanType >
    _xsd_CapabilityStudyPlan_element_factory_init (
      "StatisticalStudyPlan",
      "http://qifstandards.org/xsd/qif2",
      "CapabilityStudyPlan",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::GageRandRStudyPlanType >
    _xsd_GageRandRStudyPlan_element_factory_init (
      "StatisticalStudyPlan",
      "http://qifstandards.org/xsd/qif2",
      "GageRandRStudyPlan",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::ProductionStudyPlanType >
    _xsd_ProductionStudyPlan_element_factory_init (
      "StatisticalStudyPlan",
      "http://qifstandards.org/xsd/qif2",
      "ProductionStudyPlan",
      "http://qifstandards.org/xsd/qif2");


    // StatisticalStudyResultsBaseType
    //

    StatisticalStudyResultsBaseType::
    StatisticalStudyResultsBaseType (const Status_type& Status,
                                     const id_type& id)
    : ::xml_schema::type (),
      Attributes_ (this),
      ThisStatisticalStudyResultsInstanceQPId_ (this),
      Status_ (Status, this),
      StudyIssue_ (this),
      InspectionTraceability_ (this),
      Name_ (this),
      Description_ (this),
      StudyId_ (this),
      ResultsId_ (this),
      ResultsQPId_ (this),
      ResultsFile_ (this),
      AverageFeature_ (this),
      CharacteristicsStats_ (this),
      LinearStatsSummary_ (this),
      AngularStatsSummary_ (this),
      AreaStatsSummary_ (this),
      ForceStatsSummary_ (this),
      MassStatsSummary_ (this),
      PressureStatsSummary_ (this),
      SpeedStatsSummary_ (this),
      TemperatureStatsSummary_ (this),
      TimeStatsSummary_ (this),
      UserDefinedUnitStatsSummary_ (this),
      StatsSummary_ (this),
      id_ (id, this)
    {
    }

    StatisticalStudyResultsBaseType::
    StatisticalStudyResultsBaseType (::std::auto_ptr< Status_type > Status,
                                     const id_type& id)
    : ::xml_schema::type (),
      Attributes_ (this),
      ThisStatisticalStudyResultsInstanceQPId_ (this),
      Status_ (Status, this),
      StudyIssue_ (this),
      InspectionTraceability_ (this),
      Name_ (this),
      Description_ (this),
      StudyId_ (this),
      ResultsId_ (this),
      ResultsQPId_ (this),
      ResultsFile_ (this),
      AverageFeature_ (this),
      CharacteristicsStats_ (this),
      LinearStatsSummary_ (this),
      AngularStatsSummary_ (this),
      AreaStatsSummary_ (this),
      ForceStatsSummary_ (this),
      MassStatsSummary_ (this),
      PressureStatsSummary_ (this),
      SpeedStatsSummary_ (this),
      TemperatureStatsSummary_ (this),
      TimeStatsSummary_ (this),
      UserDefinedUnitStatsSummary_ (this),
      StatsSummary_ (this),
      id_ (id, this)
    {
    }

    StatisticalStudyResultsBaseType::
    StatisticalStudyResultsBaseType (const StatisticalStudyResultsBaseType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Attributes_ (x.Attributes_, f, this),
      ThisStatisticalStudyResultsInstanceQPId_ (x.ThisStatisticalStudyResultsInstanceQPId_, f, this),
      Status_ (x.Status_, f, this),
      StudyIssue_ (x.StudyIssue_, f, this),
      InspectionTraceability_ (x.InspectionTraceability_, f, this),
      Name_ (x.Name_, f, this),
      Description_ (x.Description_, f, this),
      StudyId_ (x.StudyId_, f, this),
      ResultsId_ (x.ResultsId_, f, this),
      ResultsQPId_ (x.ResultsQPId_, f, this),
      ResultsFile_ (x.ResultsFile_, f, this),
      AverageFeature_ (x.AverageFeature_, f, this),
      CharacteristicsStats_ (x.CharacteristicsStats_, f, this),
      LinearStatsSummary_ (x.LinearStatsSummary_, f, this),
      AngularStatsSummary_ (x.AngularStatsSummary_, f, this),
      AreaStatsSummary_ (x.AreaStatsSummary_, f, this),
      ForceStatsSummary_ (x.ForceStatsSummary_, f, this),
      MassStatsSummary_ (x.MassStatsSummary_, f, this),
      PressureStatsSummary_ (x.PressureStatsSummary_, f, this),
      SpeedStatsSummary_ (x.SpeedStatsSummary_, f, this),
      TemperatureStatsSummary_ (x.TemperatureStatsSummary_, f, this),
      TimeStatsSummary_ (x.TimeStatsSummary_, f, this),
      UserDefinedUnitStatsSummary_ (x.UserDefinedUnitStatsSummary_, f, this),
      StatsSummary_ (x.StatsSummary_, f, this),
      id_ (x.id_, f, this)
    {
    }

    StatisticalStudyResultsBaseType::
    StatisticalStudyResultsBaseType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Attributes_ (this),
      ThisStatisticalStudyResultsInstanceQPId_ (this),
      Status_ (this),
      StudyIssue_ (this),
      InspectionTraceability_ (this),
      Name_ (this),
      Description_ (this),
      StudyId_ (this),
      ResultsId_ (this),
      ResultsQPId_ (this),
      ResultsFile_ (this),
      AverageFeature_ (this),
      CharacteristicsStats_ (this),
      LinearStatsSummary_ (this),
      AngularStatsSummary_ (this),
      AreaStatsSummary_ (this),
      ForceStatsSummary_ (this),
      MassStatsSummary_ (this),
      PressureStatsSummary_ (this),
      SpeedStatsSummary_ (this),
      TemperatureStatsSummary_ (this),
      TimeStatsSummary_ (this),
      UserDefinedUnitStatsSummary_ (this),
      StatsSummary_ (this),
      id_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void StatisticalStudyResultsBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Attributes
        //
        if (n.name () == "Attributes" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (r);
            continue;
          }
        }

        // ThisStatisticalStudyResultsInstanceQPId
        //
        if (n.name () == "ThisStatisticalStudyResultsInstanceQPId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ThisStatisticalStudyResultsInstanceQPId_type > r (
            ThisStatisticalStudyResultsInstanceQPId_traits::create (i, f, this));

          if (!this->ThisStatisticalStudyResultsInstanceQPId_)
          {
            this->ThisStatisticalStudyResultsInstanceQPId_.set (r);
            continue;
          }
        }

        // Status
        //
        if (n.name () == "Status" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Status_type > r (
            Status_traits::create (i, f, this));

          if (!Status_.present ())
          {
            this->Status_.set (r);
            continue;
          }
        }

        // StudyIssue
        //
        if (n.name () == "StudyIssue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< StudyIssue_type > r (
            StudyIssue_traits::create (i, f, this));

          this->StudyIssue_.push_back (r);
          continue;
        }

        // InspectionTraceability
        //
        if (n.name () == "InspectionTraceability" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< InspectionTraceability_type > r (
            InspectionTraceability_traits::create (i, f, this));

          if (!this->InspectionTraceability_)
          {
            this->InspectionTraceability_.set (r);
            continue;
          }
        }

        // Name
        //
        if (n.name () == "Name" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Name_type > r (
            Name_traits::create (i, f, this));

          if (!this->Name_)
          {
            this->Name_.set (r);
            continue;
          }
        }

        // Description
        //
        if (n.name () == "Description" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Description_type > r (
            Description_traits::create (i, f, this));

          if (!this->Description_)
          {
            this->Description_.set (r);
            continue;
          }
        }

        // StudyId
        //
        if (n.name () == "StudyId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< StudyId_type > r (
            StudyId_traits::create (i, f, this));

          if (!this->StudyId_)
          {
            this->StudyId_.set (r);
            continue;
          }
        }

        // ResultsId
        //
        if (n.name () == "ResultsId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ResultsId_type > r (
            ResultsId_traits::create (i, f, this));

          this->ResultsId_.push_back (r);
          continue;
        }

        // ResultsQPId
        //
        if (n.name () == "ResultsQPId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ResultsQPId_type > r (
            ResultsQPId_traits::create (i, f, this));

          this->ResultsQPId_.push_back (r);
          continue;
        }

        // ResultsFile
        //
        if (n.name () == "ResultsFile" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ResultsFile_type > r (
            ResultsFile_traits::create (i, f, this));

          this->ResultsFile_.push_back (r);
          continue;
        }

        // AverageFeature
        //
        if (n.name () == "AverageFeature" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AverageFeature_type > r (
            AverageFeature_traits::create (i, f, this));

          this->AverageFeature_.push_back (r);
          continue;
        }

        // CharacteristicsStats
        //
        if (n.name () == "CharacteristicsStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicsStats_type > r (
            CharacteristicsStats_traits::create (i, f, this));

          this->CharacteristicsStats_.push_back (r);
          continue;
        }

        // LinearStatsSummary
        //
        if (n.name () == "LinearStatsSummary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< LinearStatsSummary_type > r (
            LinearStatsSummary_traits::create (i, f, this));

          this->LinearStatsSummary_.push_back (r);
          continue;
        }

        // AngularStatsSummary
        //
        if (n.name () == "AngularStatsSummary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AngularStatsSummary_type > r (
            AngularStatsSummary_traits::create (i, f, this));

          this->AngularStatsSummary_.push_back (r);
          continue;
        }

        // AreaStatsSummary
        //
        if (n.name () == "AreaStatsSummary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AreaStatsSummary_type > r (
            AreaStatsSummary_traits::create (i, f, this));

          this->AreaStatsSummary_.push_back (r);
          continue;
        }

        // ForceStatsSummary
        //
        if (n.name () == "ForceStatsSummary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ForceStatsSummary_type > r (
            ForceStatsSummary_traits::create (i, f, this));

          this->ForceStatsSummary_.push_back (r);
          continue;
        }

        // MassStatsSummary
        //
        if (n.name () == "MassStatsSummary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MassStatsSummary_type > r (
            MassStatsSummary_traits::create (i, f, this));

          this->MassStatsSummary_.push_back (r);
          continue;
        }

        // PressureStatsSummary
        //
        if (n.name () == "PressureStatsSummary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PressureStatsSummary_type > r (
            PressureStatsSummary_traits::create (i, f, this));

          this->PressureStatsSummary_.push_back (r);
          continue;
        }

        // SpeedStatsSummary
        //
        if (n.name () == "SpeedStatsSummary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SpeedStatsSummary_type > r (
            SpeedStatsSummary_traits::create (i, f, this));

          this->SpeedStatsSummary_.push_back (r);
          continue;
        }

        // TemperatureStatsSummary
        //
        if (n.name () == "TemperatureStatsSummary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TemperatureStatsSummary_type > r (
            TemperatureStatsSummary_traits::create (i, f, this));

          this->TemperatureStatsSummary_.push_back (r);
          continue;
        }

        // TimeStatsSummary
        //
        if (n.name () == "TimeStatsSummary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TimeStatsSummary_type > r (
            TimeStatsSummary_traits::create (i, f, this));

          this->TimeStatsSummary_.push_back (r);
          continue;
        }

        // UserDefinedUnitStatsSummary
        //
        if (n.name () == "UserDefinedUnitStatsSummary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< UserDefinedUnitStatsSummary_type > r (
            UserDefinedUnitStatsSummary_traits::create (i, f, this));

          this->UserDefinedUnitStatsSummary_.push_back (r);
          continue;
        }

        // StatsSummary
        //
        if (n.name () == "StatsSummary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< StatsSummary_type > r (
            StatsSummary_traits::create (i, f, this));

          this->StatsSummary_.push_back (r);
          continue;
        }

        break;
      }

      if (!Status_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Status",
          "http://qifstandards.org/xsd/qif2");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          this->id_.set (id_traits::create (i, f, this));
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "id",
          "");
      }
    }

    StatisticalStudyResultsBaseType* StatisticalStudyResultsBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatisticalStudyResultsBaseType (*this, f, c);
    }

    StatisticalStudyResultsBaseType& StatisticalStudyResultsBaseType::
    operator= (const StatisticalStudyResultsBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Attributes_ = x.Attributes_;
        this->ThisStatisticalStudyResultsInstanceQPId_ = x.ThisStatisticalStudyResultsInstanceQPId_;
        this->Status_ = x.Status_;
        this->StudyIssue_ = x.StudyIssue_;
        this->InspectionTraceability_ = x.InspectionTraceability_;
        this->Name_ = x.Name_;
        this->Description_ = x.Description_;
        this->StudyId_ = x.StudyId_;
        this->ResultsId_ = x.ResultsId_;
        this->ResultsQPId_ = x.ResultsQPId_;
        this->ResultsFile_ = x.ResultsFile_;
        this->AverageFeature_ = x.AverageFeature_;
        this->CharacteristicsStats_ = x.CharacteristicsStats_;
        this->LinearStatsSummary_ = x.LinearStatsSummary_;
        this->AngularStatsSummary_ = x.AngularStatsSummary_;
        this->AreaStatsSummary_ = x.AreaStatsSummary_;
        this->ForceStatsSummary_ = x.ForceStatsSummary_;
        this->MassStatsSummary_ = x.MassStatsSummary_;
        this->PressureStatsSummary_ = x.PressureStatsSummary_;
        this->SpeedStatsSummary_ = x.SpeedStatsSummary_;
        this->TemperatureStatsSummary_ = x.TemperatureStatsSummary_;
        this->TimeStatsSummary_ = x.TimeStatsSummary_;
        this->UserDefinedUnitStatsSummary_ = x.UserDefinedUnitStatsSummary_;
        this->StatsSummary_ = x.StatsSummary_;
        this->id_ = x.id_;
      }

      return *this;
    }

    StatisticalStudyResultsBaseType::
    ~StatisticalStudyResultsBaseType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, StatisticalStudyResultsBaseType >
    _xsd_StatisticalStudyResultsBaseType_type_factory_init (
      "StatisticalStudyResultsBaseType",
      "http://qifstandards.org/xsd/qif2");

    // LinearityStudyResultsType
    //

    LinearityStudyResultsType::
    LinearityStudyResultsType (const Status_type& Status,
                               const id_type& id,
                               const SampleSize_type& SampleSize)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (Status,
                                                    id),
      SampleSize_ (SampleSize, this),
      MeasurementDeviceIds_ (this),
      GoodnessOfFit_ (this),
      LinearAbsoluteLinearity_ (this),
      AngularAbsoluteLinearity_ (this),
      AreaAbsoluteLinearity_ (this),
      ForceAbsoluteLinearity_ (this),
      MassAbsoluteLinearity_ (this),
      PressureAbsoluteLinearity_ (this),
      SpeedAbsoluteLinearity_ (this),
      TemperatureAbsoluteLinearity_ (this),
      TimeAbsoluteLinearity_ (this),
      UserDefinedUnitAbsoluteLinearity_ (this),
      RelativeLinearity_ (this)
    {
    }

    LinearityStudyResultsType::
    LinearityStudyResultsType (::std::auto_ptr< Status_type > Status,
                               const id_type& id,
                               const SampleSize_type& SampleSize)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (Status,
                                                    id),
      SampleSize_ (SampleSize, this),
      MeasurementDeviceIds_ (this),
      GoodnessOfFit_ (this),
      LinearAbsoluteLinearity_ (this),
      AngularAbsoluteLinearity_ (this),
      AreaAbsoluteLinearity_ (this),
      ForceAbsoluteLinearity_ (this),
      MassAbsoluteLinearity_ (this),
      PressureAbsoluteLinearity_ (this),
      SpeedAbsoluteLinearity_ (this),
      TemperatureAbsoluteLinearity_ (this),
      TimeAbsoluteLinearity_ (this),
      UserDefinedUnitAbsoluteLinearity_ (this),
      RelativeLinearity_ (this)
    {
    }

    LinearityStudyResultsType::
    LinearityStudyResultsType (const LinearityStudyResultsType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (x, f, c),
      SampleSize_ (x.SampleSize_, f, this),
      MeasurementDeviceIds_ (x.MeasurementDeviceIds_, f, this),
      GoodnessOfFit_ (x.GoodnessOfFit_, f, this),
      LinearAbsoluteLinearity_ (x.LinearAbsoluteLinearity_, f, this),
      AngularAbsoluteLinearity_ (x.AngularAbsoluteLinearity_, f, this),
      AreaAbsoluteLinearity_ (x.AreaAbsoluteLinearity_, f, this),
      ForceAbsoluteLinearity_ (x.ForceAbsoluteLinearity_, f, this),
      MassAbsoluteLinearity_ (x.MassAbsoluteLinearity_, f, this),
      PressureAbsoluteLinearity_ (x.PressureAbsoluteLinearity_, f, this),
      SpeedAbsoluteLinearity_ (x.SpeedAbsoluteLinearity_, f, this),
      TemperatureAbsoluteLinearity_ (x.TemperatureAbsoluteLinearity_, f, this),
      TimeAbsoluteLinearity_ (x.TimeAbsoluteLinearity_, f, this),
      UserDefinedUnitAbsoluteLinearity_ (x.UserDefinedUnitAbsoluteLinearity_, f, this),
      RelativeLinearity_ (x.RelativeLinearity_, f, this)
    {
    }

    LinearityStudyResultsType::
    LinearityStudyResultsType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (e, f | ::xml_schema::flags::base, c),
      SampleSize_ (this),
      MeasurementDeviceIds_ (this),
      GoodnessOfFit_ (this),
      LinearAbsoluteLinearity_ (this),
      AngularAbsoluteLinearity_ (this),
      AreaAbsoluteLinearity_ (this),
      ForceAbsoluteLinearity_ (this),
      MassAbsoluteLinearity_ (this),
      PressureAbsoluteLinearity_ (this),
      SpeedAbsoluteLinearity_ (this),
      TemperatureAbsoluteLinearity_ (this),
      TimeAbsoluteLinearity_ (this),
      UserDefinedUnitAbsoluteLinearity_ (this),
      RelativeLinearity_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void LinearityStudyResultsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatisticalStudyResultsBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SampleSize
        //
        if (n.name () == "SampleSize" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!SampleSize_.present ())
          {
            this->SampleSize_.set (SampleSize_traits::create (i, f, this));
            continue;
          }
        }

        // MeasurementDeviceIds
        //
        if (n.name () == "MeasurementDeviceIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurementDeviceIds_type > r (
            MeasurementDeviceIds_traits::create (i, f, this));

          if (!this->MeasurementDeviceIds_)
          {
            this->MeasurementDeviceIds_.set (r);
            continue;
          }
        }

        // GoodnessOfFit
        //
        if (n.name () == "GoodnessOfFit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< GoodnessOfFit_type > r (
            GoodnessOfFit_traits::create (i, f, this));

          if (!this->GoodnessOfFit_)
          {
            this->GoodnessOfFit_.set (r);
            continue;
          }
        }

        // LinearAbsoluteLinearity
        //
        if (n.name () == "LinearAbsoluteLinearity" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< LinearAbsoluteLinearity_type > r (
            LinearAbsoluteLinearity_traits::create (i, f, this));

          if (!this->LinearAbsoluteLinearity_)
          {
            this->LinearAbsoluteLinearity_.set (r);
            continue;
          }
        }

        // AngularAbsoluteLinearity
        //
        if (n.name () == "AngularAbsoluteLinearity" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AngularAbsoluteLinearity_type > r (
            AngularAbsoluteLinearity_traits::create (i, f, this));

          if (!this->AngularAbsoluteLinearity_)
          {
            this->AngularAbsoluteLinearity_.set (r);
            continue;
          }
        }

        // AreaAbsoluteLinearity
        //
        if (n.name () == "AreaAbsoluteLinearity" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AreaAbsoluteLinearity_type > r (
            AreaAbsoluteLinearity_traits::create (i, f, this));

          if (!this->AreaAbsoluteLinearity_)
          {
            this->AreaAbsoluteLinearity_.set (r);
            continue;
          }
        }

        // ForceAbsoluteLinearity
        //
        if (n.name () == "ForceAbsoluteLinearity" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ForceAbsoluteLinearity_type > r (
            ForceAbsoluteLinearity_traits::create (i, f, this));

          if (!this->ForceAbsoluteLinearity_)
          {
            this->ForceAbsoluteLinearity_.set (r);
            continue;
          }
        }

        // MassAbsoluteLinearity
        //
        if (n.name () == "MassAbsoluteLinearity" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MassAbsoluteLinearity_type > r (
            MassAbsoluteLinearity_traits::create (i, f, this));

          if (!this->MassAbsoluteLinearity_)
          {
            this->MassAbsoluteLinearity_.set (r);
            continue;
          }
        }

        // PressureAbsoluteLinearity
        //
        if (n.name () == "PressureAbsoluteLinearity" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PressureAbsoluteLinearity_type > r (
            PressureAbsoluteLinearity_traits::create (i, f, this));

          if (!this->PressureAbsoluteLinearity_)
          {
            this->PressureAbsoluteLinearity_.set (r);
            continue;
          }
        }

        // SpeedAbsoluteLinearity
        //
        if (n.name () == "SpeedAbsoluteLinearity" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SpeedAbsoluteLinearity_type > r (
            SpeedAbsoluteLinearity_traits::create (i, f, this));

          if (!this->SpeedAbsoluteLinearity_)
          {
            this->SpeedAbsoluteLinearity_.set (r);
            continue;
          }
        }

        // TemperatureAbsoluteLinearity
        //
        if (n.name () == "TemperatureAbsoluteLinearity" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TemperatureAbsoluteLinearity_type > r (
            TemperatureAbsoluteLinearity_traits::create (i, f, this));

          if (!this->TemperatureAbsoluteLinearity_)
          {
            this->TemperatureAbsoluteLinearity_.set (r);
            continue;
          }
        }

        // TimeAbsoluteLinearity
        //
        if (n.name () == "TimeAbsoluteLinearity" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TimeAbsoluteLinearity_type > r (
            TimeAbsoluteLinearity_traits::create (i, f, this));

          if (!this->TimeAbsoluteLinearity_)
          {
            this->TimeAbsoluteLinearity_.set (r);
            continue;
          }
        }

        // UserDefinedUnitAbsoluteLinearity
        //
        if (n.name () == "UserDefinedUnitAbsoluteLinearity" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< UserDefinedUnitAbsoluteLinearity_type > r (
            UserDefinedUnitAbsoluteLinearity_traits::create (i, f, this));

          if (!this->UserDefinedUnitAbsoluteLinearity_)
          {
            this->UserDefinedUnitAbsoluteLinearity_.set (r);
            continue;
          }
        }

        // RelativeLinearity
        //
        if (n.name () == "RelativeLinearity" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RelativeLinearity_type > r (
            RelativeLinearity_traits::create (i, f, this));

          if (!this->RelativeLinearity_)
          {
            this->RelativeLinearity_.set (r);
            continue;
          }
        }

        break;
      }

      if (!SampleSize_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SampleSize",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    LinearityStudyResultsType* LinearityStudyResultsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LinearityStudyResultsType (*this, f, c);
    }

    LinearityStudyResultsType& LinearityStudyResultsType::
    operator= (const LinearityStudyResultsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::StatisticalStudyResultsBaseType& > (*this) = x;
        this->SampleSize_ = x.SampleSize_;
        this->MeasurementDeviceIds_ = x.MeasurementDeviceIds_;
        this->GoodnessOfFit_ = x.GoodnessOfFit_;
        this->LinearAbsoluteLinearity_ = x.LinearAbsoluteLinearity_;
        this->AngularAbsoluteLinearity_ = x.AngularAbsoluteLinearity_;
        this->AreaAbsoluteLinearity_ = x.AreaAbsoluteLinearity_;
        this->ForceAbsoluteLinearity_ = x.ForceAbsoluteLinearity_;
        this->MassAbsoluteLinearity_ = x.MassAbsoluteLinearity_;
        this->PressureAbsoluteLinearity_ = x.PressureAbsoluteLinearity_;
        this->SpeedAbsoluteLinearity_ = x.SpeedAbsoluteLinearity_;
        this->TemperatureAbsoluteLinearity_ = x.TemperatureAbsoluteLinearity_;
        this->TimeAbsoluteLinearity_ = x.TimeAbsoluteLinearity_;
        this->UserDefinedUnitAbsoluteLinearity_ = x.UserDefinedUnitAbsoluteLinearity_;
        this->RelativeLinearity_ = x.RelativeLinearity_;
      }

      return *this;
    }

    LinearityStudyResultsType::
    ~LinearityStudyResultsType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, LinearityStudyResultsType >
    _xsd_LinearityStudyResultsType_type_factory_init (
      "LinearityStudyResultsType",
      "http://qifstandards.org/xsd/qif2");

    // StabilityStudyResultsType
    //

    StabilityStudyResultsType::
    StabilityStudyResultsType (const Status_type& Status,
                               const id_type& id,
                               const SampleSize_type& SampleSize)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (Status,
                                                    id),
      SampleSize_ (SampleSize, this),
      MeasurementDeviceIds_ (this)
    {
    }

    StabilityStudyResultsType::
    StabilityStudyResultsType (::std::auto_ptr< Status_type > Status,
                               const id_type& id,
                               const SampleSize_type& SampleSize)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (Status,
                                                    id),
      SampleSize_ (SampleSize, this),
      MeasurementDeviceIds_ (this)
    {
    }

    StabilityStudyResultsType::
    StabilityStudyResultsType (const StabilityStudyResultsType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (x, f, c),
      SampleSize_ (x.SampleSize_, f, this),
      MeasurementDeviceIds_ (x.MeasurementDeviceIds_, f, this)
    {
    }

    StabilityStudyResultsType::
    StabilityStudyResultsType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (e, f | ::xml_schema::flags::base, c),
      SampleSize_ (this),
      MeasurementDeviceIds_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void StabilityStudyResultsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatisticalStudyResultsBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SampleSize
        //
        if (n.name () == "SampleSize" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!SampleSize_.present ())
          {
            this->SampleSize_.set (SampleSize_traits::create (i, f, this));
            continue;
          }
        }

        // MeasurementDeviceIds
        //
        if (n.name () == "MeasurementDeviceIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurementDeviceIds_type > r (
            MeasurementDeviceIds_traits::create (i, f, this));

          if (!this->MeasurementDeviceIds_)
          {
            this->MeasurementDeviceIds_.set (r);
            continue;
          }
        }

        break;
      }

      if (!SampleSize_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SampleSize",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    StabilityStudyResultsType* StabilityStudyResultsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StabilityStudyResultsType (*this, f, c);
    }

    StabilityStudyResultsType& StabilityStudyResultsType::
    operator= (const StabilityStudyResultsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::StatisticalStudyResultsBaseType& > (*this) = x;
        this->SampleSize_ = x.SampleSize_;
        this->MeasurementDeviceIds_ = x.MeasurementDeviceIds_;
      }

      return *this;
    }

    StabilityStudyResultsType::
    ~StabilityStudyResultsType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, StabilityStudyResultsType >
    _xsd_StabilityStudyResultsType_type_factory_init (
      "StabilityStudyResultsType",
      "http://qifstandards.org/xsd/qif2");

    // BiasStudyResultsType
    //

    BiasStudyResultsType::
    BiasStudyResultsType (const Status_type& Status,
                          const id_type& id,
                          const SampleSize_type& SampleSize)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (Status,
                                                    id),
      SampleSize_ (SampleSize, this),
      MeasurementDeviceIds_ (this)
    {
    }

    BiasStudyResultsType::
    BiasStudyResultsType (::std::auto_ptr< Status_type > Status,
                          const id_type& id,
                          const SampleSize_type& SampleSize)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (Status,
                                                    id),
      SampleSize_ (SampleSize, this),
      MeasurementDeviceIds_ (this)
    {
    }

    BiasStudyResultsType::
    BiasStudyResultsType (const BiasStudyResultsType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (x, f, c),
      SampleSize_ (x.SampleSize_, f, this),
      MeasurementDeviceIds_ (x.MeasurementDeviceIds_, f, this)
    {
    }

    BiasStudyResultsType::
    BiasStudyResultsType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (e, f | ::xml_schema::flags::base, c),
      SampleSize_ (this),
      MeasurementDeviceIds_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void BiasStudyResultsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatisticalStudyResultsBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SampleSize
        //
        if (n.name () == "SampleSize" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!SampleSize_.present ())
          {
            this->SampleSize_.set (SampleSize_traits::create (i, f, this));
            continue;
          }
        }

        // MeasurementDeviceIds
        //
        if (n.name () == "MeasurementDeviceIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurementDeviceIds_type > r (
            MeasurementDeviceIds_traits::create (i, f, this));

          if (!this->MeasurementDeviceIds_)
          {
            this->MeasurementDeviceIds_.set (r);
            continue;
          }
        }

        break;
      }

      if (!SampleSize_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SampleSize",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    BiasStudyResultsType* BiasStudyResultsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class BiasStudyResultsType (*this, f, c);
    }

    BiasStudyResultsType& BiasStudyResultsType::
    operator= (const BiasStudyResultsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::StatisticalStudyResultsBaseType& > (*this) = x;
        this->SampleSize_ = x.SampleSize_;
        this->MeasurementDeviceIds_ = x.MeasurementDeviceIds_;
      }

      return *this;
    }

    BiasStudyResultsType::
    ~BiasStudyResultsType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, BiasStudyResultsType >
    _xsd_BiasStudyResultsType_type_factory_init (
      "BiasStudyResultsType",
      "http://qifstandards.org/xsd/qif2");

    // FirstArticleStudyResultsType
    //

    FirstArticleStudyResultsType::
    FirstArticleStudyResultsType (const Status_type& Status,
                                  const id_type& id)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (Status,
                                                    id),
      InSpecRatio_ (this),
      LinearAbsoluteMaximum_ (this),
      AngularAbsoluteMaximum_ (this),
      AreaAbsoluteMaximum_ (this),
      ForceAbsoluteMaximum_ (this),
      MassAbsoluteMaximum_ (this),
      PressureAbsoluteMaximum_ (this),
      SpeedAbsoluteMaximum_ (this),
      TemperatureAbsoluteMaximum_ (this),
      TimeAbsoluteMaximum_ (this),
      UserDefinedUnitAbsoluteMaximum_ (this),
      RelativeMaximum_ (this)
    {
    }

    FirstArticleStudyResultsType::
    FirstArticleStudyResultsType (::std::auto_ptr< Status_type > Status,
                                  const id_type& id)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (Status,
                                                    id),
      InSpecRatio_ (this),
      LinearAbsoluteMaximum_ (this),
      AngularAbsoluteMaximum_ (this),
      AreaAbsoluteMaximum_ (this),
      ForceAbsoluteMaximum_ (this),
      MassAbsoluteMaximum_ (this),
      PressureAbsoluteMaximum_ (this),
      SpeedAbsoluteMaximum_ (this),
      TemperatureAbsoluteMaximum_ (this),
      TimeAbsoluteMaximum_ (this),
      UserDefinedUnitAbsoluteMaximum_ (this),
      RelativeMaximum_ (this)
    {
    }

    FirstArticleStudyResultsType::
    FirstArticleStudyResultsType (const FirstArticleStudyResultsType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (x, f, c),
      InSpecRatio_ (x.InSpecRatio_, f, this),
      LinearAbsoluteMaximum_ (x.LinearAbsoluteMaximum_, f, this),
      AngularAbsoluteMaximum_ (x.AngularAbsoluteMaximum_, f, this),
      AreaAbsoluteMaximum_ (x.AreaAbsoluteMaximum_, f, this),
      ForceAbsoluteMaximum_ (x.ForceAbsoluteMaximum_, f, this),
      MassAbsoluteMaximum_ (x.MassAbsoluteMaximum_, f, this),
      PressureAbsoluteMaximum_ (x.PressureAbsoluteMaximum_, f, this),
      SpeedAbsoluteMaximum_ (x.SpeedAbsoluteMaximum_, f, this),
      TemperatureAbsoluteMaximum_ (x.TemperatureAbsoluteMaximum_, f, this),
      TimeAbsoluteMaximum_ (x.TimeAbsoluteMaximum_, f, this),
      UserDefinedUnitAbsoluteMaximum_ (x.UserDefinedUnitAbsoluteMaximum_, f, this),
      RelativeMaximum_ (x.RelativeMaximum_, f, this)
    {
    }

    FirstArticleStudyResultsType::
    FirstArticleStudyResultsType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (e, f | ::xml_schema::flags::base, c),
      InSpecRatio_ (this),
      LinearAbsoluteMaximum_ (this),
      AngularAbsoluteMaximum_ (this),
      AreaAbsoluteMaximum_ (this),
      ForceAbsoluteMaximum_ (this),
      MassAbsoluteMaximum_ (this),
      PressureAbsoluteMaximum_ (this),
      SpeedAbsoluteMaximum_ (this),
      TemperatureAbsoluteMaximum_ (this),
      TimeAbsoluteMaximum_ (this),
      UserDefinedUnitAbsoluteMaximum_ (this),
      RelativeMaximum_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void FirstArticleStudyResultsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatisticalStudyResultsBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // InSpecRatio
        //
        if (n.name () == "InSpecRatio" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->InSpecRatio_)
          {
            this->InSpecRatio_.set (InSpecRatio_traits::create (i, f, this));
            continue;
          }
        }

        // LinearAbsoluteMaximum
        //
        if (n.name () == "LinearAbsoluteMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< LinearAbsoluteMaximum_type > r (
            LinearAbsoluteMaximum_traits::create (i, f, this));

          if (!this->LinearAbsoluteMaximum_)
          {
            this->LinearAbsoluteMaximum_.set (r);
            continue;
          }
        }

        // AngularAbsoluteMaximum
        //
        if (n.name () == "AngularAbsoluteMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AngularAbsoluteMaximum_type > r (
            AngularAbsoluteMaximum_traits::create (i, f, this));

          if (!this->AngularAbsoluteMaximum_)
          {
            this->AngularAbsoluteMaximum_.set (r);
            continue;
          }
        }

        // AreaAbsoluteMaximum
        //
        if (n.name () == "AreaAbsoluteMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AreaAbsoluteMaximum_type > r (
            AreaAbsoluteMaximum_traits::create (i, f, this));

          if (!this->AreaAbsoluteMaximum_)
          {
            this->AreaAbsoluteMaximum_.set (r);
            continue;
          }
        }

        // ForceAbsoluteMaximum
        //
        if (n.name () == "ForceAbsoluteMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ForceAbsoluteMaximum_type > r (
            ForceAbsoluteMaximum_traits::create (i, f, this));

          if (!this->ForceAbsoluteMaximum_)
          {
            this->ForceAbsoluteMaximum_.set (r);
            continue;
          }
        }

        // MassAbsoluteMaximum
        //
        if (n.name () == "MassAbsoluteMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MassAbsoluteMaximum_type > r (
            MassAbsoluteMaximum_traits::create (i, f, this));

          if (!this->MassAbsoluteMaximum_)
          {
            this->MassAbsoluteMaximum_.set (r);
            continue;
          }
        }

        // PressureAbsoluteMaximum
        //
        if (n.name () == "PressureAbsoluteMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PressureAbsoluteMaximum_type > r (
            PressureAbsoluteMaximum_traits::create (i, f, this));

          if (!this->PressureAbsoluteMaximum_)
          {
            this->PressureAbsoluteMaximum_.set (r);
            continue;
          }
        }

        // SpeedAbsoluteMaximum
        //
        if (n.name () == "SpeedAbsoluteMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SpeedAbsoluteMaximum_type > r (
            SpeedAbsoluteMaximum_traits::create (i, f, this));

          if (!this->SpeedAbsoluteMaximum_)
          {
            this->SpeedAbsoluteMaximum_.set (r);
            continue;
          }
        }

        // TemperatureAbsoluteMaximum
        //
        if (n.name () == "TemperatureAbsoluteMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TemperatureAbsoluteMaximum_type > r (
            TemperatureAbsoluteMaximum_traits::create (i, f, this));

          if (!this->TemperatureAbsoluteMaximum_)
          {
            this->TemperatureAbsoluteMaximum_.set (r);
            continue;
          }
        }

        // TimeAbsoluteMaximum
        //
        if (n.name () == "TimeAbsoluteMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TimeAbsoluteMaximum_type > r (
            TimeAbsoluteMaximum_traits::create (i, f, this));

          if (!this->TimeAbsoluteMaximum_)
          {
            this->TimeAbsoluteMaximum_.set (r);
            continue;
          }
        }

        // UserDefinedUnitAbsoluteMaximum
        //
        if (n.name () == "UserDefinedUnitAbsoluteMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< UserDefinedUnitAbsoluteMaximum_type > r (
            UserDefinedUnitAbsoluteMaximum_traits::create (i, f, this));

          this->UserDefinedUnitAbsoluteMaximum_.push_back (r);
          continue;
        }

        // RelativeMaximum
        //
        if (n.name () == "RelativeMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RelativeMaximum_type > r (
            RelativeMaximum_traits::create (i, f, this));

          if (!this->RelativeMaximum_)
          {
            this->RelativeMaximum_.set (r);
            continue;
          }
        }

        break;
      }
    }

    FirstArticleStudyResultsType* FirstArticleStudyResultsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FirstArticleStudyResultsType (*this, f, c);
    }

    FirstArticleStudyResultsType& FirstArticleStudyResultsType::
    operator= (const FirstArticleStudyResultsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::StatisticalStudyResultsBaseType& > (*this) = x;
        this->InSpecRatio_ = x.InSpecRatio_;
        this->LinearAbsoluteMaximum_ = x.LinearAbsoluteMaximum_;
        this->AngularAbsoluteMaximum_ = x.AngularAbsoluteMaximum_;
        this->AreaAbsoluteMaximum_ = x.AreaAbsoluteMaximum_;
        this->ForceAbsoluteMaximum_ = x.ForceAbsoluteMaximum_;
        this->MassAbsoluteMaximum_ = x.MassAbsoluteMaximum_;
        this->PressureAbsoluteMaximum_ = x.PressureAbsoluteMaximum_;
        this->SpeedAbsoluteMaximum_ = x.SpeedAbsoluteMaximum_;
        this->TemperatureAbsoluteMaximum_ = x.TemperatureAbsoluteMaximum_;
        this->TimeAbsoluteMaximum_ = x.TimeAbsoluteMaximum_;
        this->UserDefinedUnitAbsoluteMaximum_ = x.UserDefinedUnitAbsoluteMaximum_;
        this->RelativeMaximum_ = x.RelativeMaximum_;
      }

      return *this;
    }

    FirstArticleStudyResultsType::
    ~FirstArticleStudyResultsType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, FirstArticleStudyResultsType >
    _xsd_FirstArticleStudyResultsType_type_factory_init (
      "FirstArticleStudyResultsType",
      "http://qifstandards.org/xsd/qif2");

    // ProcessDifferenceStudyResultsType
    //

    ProcessDifferenceStudyResultsType::
    ProcessDifferenceStudyResultsType (const Status_type& Status,
                                       const id_type& id,
                                       const NumberOfSamples_type& NumberOfSamples,
                                       const SubgroupSize_type& SubgroupSize)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (Status,
                                                    id),
      NumberOfSamples_ (NumberOfSamples, this),
      SubgroupSize_ (SubgroupSize, this),
      ManufacturingProcessId_ (this),
      LinearAbsoluteDifference_ (this),
      AngularAbsoluteDifference_ (this),
      AreaAbsoluteDifference_ (this),
      ForceAbsoluteDifference_ (this),
      MassAbsoluteDifference_ (this),
      PressureAbsoluteDifference_ (this),
      SpeedAbsoluteDifference_ (this),
      TemperatureAbsoluteDifference_ (this),
      TimeAbsoluteDifference_ (this),
      UserDefinedUnitAbsoluteDifference_ (this),
      RelativeDifference_ (this)
    {
    }

    ProcessDifferenceStudyResultsType::
    ProcessDifferenceStudyResultsType (::std::auto_ptr< Status_type > Status,
                                       const id_type& id,
                                       const NumberOfSamples_type& NumberOfSamples,
                                       const SubgroupSize_type& SubgroupSize)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (Status,
                                                    id),
      NumberOfSamples_ (NumberOfSamples, this),
      SubgroupSize_ (SubgroupSize, this),
      ManufacturingProcessId_ (this),
      LinearAbsoluteDifference_ (this),
      AngularAbsoluteDifference_ (this),
      AreaAbsoluteDifference_ (this),
      ForceAbsoluteDifference_ (this),
      MassAbsoluteDifference_ (this),
      PressureAbsoluteDifference_ (this),
      SpeedAbsoluteDifference_ (this),
      TemperatureAbsoluteDifference_ (this),
      TimeAbsoluteDifference_ (this),
      UserDefinedUnitAbsoluteDifference_ (this),
      RelativeDifference_ (this)
    {
    }

    ProcessDifferenceStudyResultsType::
    ProcessDifferenceStudyResultsType (const ProcessDifferenceStudyResultsType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (x, f, c),
      NumberOfSamples_ (x.NumberOfSamples_, f, this),
      SubgroupSize_ (x.SubgroupSize_, f, this),
      ManufacturingProcessId_ (x.ManufacturingProcessId_, f, this),
      LinearAbsoluteDifference_ (x.LinearAbsoluteDifference_, f, this),
      AngularAbsoluteDifference_ (x.AngularAbsoluteDifference_, f, this),
      AreaAbsoluteDifference_ (x.AreaAbsoluteDifference_, f, this),
      ForceAbsoluteDifference_ (x.ForceAbsoluteDifference_, f, this),
      MassAbsoluteDifference_ (x.MassAbsoluteDifference_, f, this),
      PressureAbsoluteDifference_ (x.PressureAbsoluteDifference_, f, this),
      SpeedAbsoluteDifference_ (x.SpeedAbsoluteDifference_, f, this),
      TemperatureAbsoluteDifference_ (x.TemperatureAbsoluteDifference_, f, this),
      TimeAbsoluteDifference_ (x.TimeAbsoluteDifference_, f, this),
      UserDefinedUnitAbsoluteDifference_ (x.UserDefinedUnitAbsoluteDifference_, f, this),
      RelativeDifference_ (x.RelativeDifference_, f, this)
    {
    }

    ProcessDifferenceStudyResultsType::
    ProcessDifferenceStudyResultsType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (e, f | ::xml_schema::flags::base, c),
      NumberOfSamples_ (this),
      SubgroupSize_ (this),
      ManufacturingProcessId_ (this),
      LinearAbsoluteDifference_ (this),
      AngularAbsoluteDifference_ (this),
      AreaAbsoluteDifference_ (this),
      ForceAbsoluteDifference_ (this),
      MassAbsoluteDifference_ (this),
      PressureAbsoluteDifference_ (this),
      SpeedAbsoluteDifference_ (this),
      TemperatureAbsoluteDifference_ (this),
      TimeAbsoluteDifference_ (this),
      UserDefinedUnitAbsoluteDifference_ (this),
      RelativeDifference_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ProcessDifferenceStudyResultsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatisticalStudyResultsBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // NumberOfSamples
        //
        if (n.name () == "NumberOfSamples" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!NumberOfSamples_.present ())
          {
            this->NumberOfSamples_.set (NumberOfSamples_traits::create (i, f, this));
            continue;
          }
        }

        // SubgroupSize
        //
        if (n.name () == "SubgroupSize" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!SubgroupSize_.present ())
          {
            this->SubgroupSize_.set (SubgroupSize_traits::create (i, f, this));
            continue;
          }
        }

        // ManufacturingProcessId
        //
        if (n.name () == "ManufacturingProcessId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ManufacturingProcessId_type > r (
            ManufacturingProcessId_traits::create (i, f, this));

          if (!this->ManufacturingProcessId_)
          {
            this->ManufacturingProcessId_.set (r);
            continue;
          }
        }

        // LinearAbsoluteDifference
        //
        if (n.name () == "LinearAbsoluteDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< LinearAbsoluteDifference_type > r (
            LinearAbsoluteDifference_traits::create (i, f, this));

          if (!this->LinearAbsoluteDifference_)
          {
            this->LinearAbsoluteDifference_.set (r);
            continue;
          }
        }

        // AngularAbsoluteDifference
        //
        if (n.name () == "AngularAbsoluteDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AngularAbsoluteDifference_type > r (
            AngularAbsoluteDifference_traits::create (i, f, this));

          if (!this->AngularAbsoluteDifference_)
          {
            this->AngularAbsoluteDifference_.set (r);
            continue;
          }
        }

        // AreaAbsoluteDifference
        //
        if (n.name () == "AreaAbsoluteDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AreaAbsoluteDifference_type > r (
            AreaAbsoluteDifference_traits::create (i, f, this));

          if (!this->AreaAbsoluteDifference_)
          {
            this->AreaAbsoluteDifference_.set (r);
            continue;
          }
        }

        // ForceAbsoluteDifference
        //
        if (n.name () == "ForceAbsoluteDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ForceAbsoluteDifference_type > r (
            ForceAbsoluteDifference_traits::create (i, f, this));

          if (!this->ForceAbsoluteDifference_)
          {
            this->ForceAbsoluteDifference_.set (r);
            continue;
          }
        }

        // MassAbsoluteDifference
        //
        if (n.name () == "MassAbsoluteDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MassAbsoluteDifference_type > r (
            MassAbsoluteDifference_traits::create (i, f, this));

          if (!this->MassAbsoluteDifference_)
          {
            this->MassAbsoluteDifference_.set (r);
            continue;
          }
        }

        // PressureAbsoluteDifference
        //
        if (n.name () == "PressureAbsoluteDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PressureAbsoluteDifference_type > r (
            PressureAbsoluteDifference_traits::create (i, f, this));

          if (!this->PressureAbsoluteDifference_)
          {
            this->PressureAbsoluteDifference_.set (r);
            continue;
          }
        }

        // SpeedAbsoluteDifference
        //
        if (n.name () == "SpeedAbsoluteDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SpeedAbsoluteDifference_type > r (
            SpeedAbsoluteDifference_traits::create (i, f, this));

          if (!this->SpeedAbsoluteDifference_)
          {
            this->SpeedAbsoluteDifference_.set (r);
            continue;
          }
        }

        // TemperatureAbsoluteDifference
        //
        if (n.name () == "TemperatureAbsoluteDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TemperatureAbsoluteDifference_type > r (
            TemperatureAbsoluteDifference_traits::create (i, f, this));

          if (!this->TemperatureAbsoluteDifference_)
          {
            this->TemperatureAbsoluteDifference_.set (r);
            continue;
          }
        }

        // TimeAbsoluteDifference
        //
        if (n.name () == "TimeAbsoluteDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TimeAbsoluteDifference_type > r (
            TimeAbsoluteDifference_traits::create (i, f, this));

          if (!this->TimeAbsoluteDifference_)
          {
            this->TimeAbsoluteDifference_.set (r);
            continue;
          }
        }

        // UserDefinedUnitAbsoluteDifference
        //
        if (n.name () == "UserDefinedUnitAbsoluteDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< UserDefinedUnitAbsoluteDifference_type > r (
            UserDefinedUnitAbsoluteDifference_traits::create (i, f, this));

          this->UserDefinedUnitAbsoluteDifference_.push_back (r);
          continue;
        }

        // RelativeDifference
        //
        if (n.name () == "RelativeDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RelativeDifference_type > r (
            RelativeDifference_traits::create (i, f, this));

          if (!this->RelativeDifference_)
          {
            this->RelativeDifference_.set (r);
            continue;
          }
        }

        break;
      }

      if (!NumberOfSamples_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "NumberOfSamples",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!SubgroupSize_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SubgroupSize",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ProcessDifferenceStudyResultsType* ProcessDifferenceStudyResultsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ProcessDifferenceStudyResultsType (*this, f, c);
    }

    ProcessDifferenceStudyResultsType& ProcessDifferenceStudyResultsType::
    operator= (const ProcessDifferenceStudyResultsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::StatisticalStudyResultsBaseType& > (*this) = x;
        this->NumberOfSamples_ = x.NumberOfSamples_;
        this->SubgroupSize_ = x.SubgroupSize_;
        this->ManufacturingProcessId_ = x.ManufacturingProcessId_;
        this->LinearAbsoluteDifference_ = x.LinearAbsoluteDifference_;
        this->AngularAbsoluteDifference_ = x.AngularAbsoluteDifference_;
        this->AreaAbsoluteDifference_ = x.AreaAbsoluteDifference_;
        this->ForceAbsoluteDifference_ = x.ForceAbsoluteDifference_;
        this->MassAbsoluteDifference_ = x.MassAbsoluteDifference_;
        this->PressureAbsoluteDifference_ = x.PressureAbsoluteDifference_;
        this->SpeedAbsoluteDifference_ = x.SpeedAbsoluteDifference_;
        this->TemperatureAbsoluteDifference_ = x.TemperatureAbsoluteDifference_;
        this->TimeAbsoluteDifference_ = x.TimeAbsoluteDifference_;
        this->UserDefinedUnitAbsoluteDifference_ = x.UserDefinedUnitAbsoluteDifference_;
        this->RelativeDifference_ = x.RelativeDifference_;
      }

      return *this;
    }

    ProcessDifferenceStudyResultsType::
    ~ProcessDifferenceStudyResultsType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, ProcessDifferenceStudyResultsType >
    _xsd_ProcessDifferenceStudyResultsType_type_factory_init (
      "ProcessDifferenceStudyResultsType",
      "http://qifstandards.org/xsd/qif2");

    // MultipleProductInstanceStudyResultsBaseType
    //

    MultipleProductInstanceStudyResultsBaseType::
    MultipleProductInstanceStudyResultsBaseType (const Status_type& Status,
                                                 const id_type& id,
                                                 const NumberOfSamples_type& NumberOfSamples)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (Status,
                                                    id),
      NumberOfSamples_ (NumberOfSamples, this),
      SubgroupSize_ (this)
    {
    }

    MultipleProductInstanceStudyResultsBaseType::
    MultipleProductInstanceStudyResultsBaseType (::std::auto_ptr< Status_type > Status,
                                                 const id_type& id,
                                                 const NumberOfSamples_type& NumberOfSamples)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (Status,
                                                    id),
      NumberOfSamples_ (NumberOfSamples, this),
      SubgroupSize_ (this)
    {
    }

    MultipleProductInstanceStudyResultsBaseType::
    MultipleProductInstanceStudyResultsBaseType (const MultipleProductInstanceStudyResultsBaseType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (x, f, c),
      NumberOfSamples_ (x.NumberOfSamples_, f, this),
      SubgroupSize_ (x.SubgroupSize_, f, this)
    {
    }

    MultipleProductInstanceStudyResultsBaseType::
    MultipleProductInstanceStudyResultsBaseType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (e, f | ::xml_schema::flags::base, c),
      NumberOfSamples_ (this),
      SubgroupSize_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void MultipleProductInstanceStudyResultsBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatisticalStudyResultsBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // NumberOfSamples
        //
        if (n.name () == "NumberOfSamples" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!NumberOfSamples_.present ())
          {
            this->NumberOfSamples_.set (NumberOfSamples_traits::create (i, f, this));
            continue;
          }
        }

        // SubgroupSize
        //
        if (n.name () == "SubgroupSize" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->SubgroupSize_)
          {
            this->SubgroupSize_.set (SubgroupSize_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!NumberOfSamples_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "NumberOfSamples",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    MultipleProductInstanceStudyResultsBaseType* MultipleProductInstanceStudyResultsBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class MultipleProductInstanceStudyResultsBaseType (*this, f, c);
    }

    MultipleProductInstanceStudyResultsBaseType& MultipleProductInstanceStudyResultsBaseType::
    operator= (const MultipleProductInstanceStudyResultsBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::StatisticalStudyResultsBaseType& > (*this) = x;
        this->NumberOfSamples_ = x.NumberOfSamples_;
        this->SubgroupSize_ = x.SubgroupSize_;
      }

      return *this;
    }

    MultipleProductInstanceStudyResultsBaseType::
    ~MultipleProductInstanceStudyResultsBaseType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, MultipleProductInstanceStudyResultsBaseType >
    _xsd_MultipleProductInstanceStudyResultsBaseType_type_factory_init (
      "MultipleProductInstanceStudyResultsBaseType",
      "http://qifstandards.org/xsd/qif2");

    // SimpleStudyResultsType
    //

    SimpleStudyResultsType::
    SimpleStudyResultsType (const Status_type& Status,
                            const id_type& id,
                            const NumberOfSamples_type& NumberOfSamples)
    : ::xsd::qif2::MultipleProductInstanceStudyResultsBaseType (Status,
                                                                id,
                                                                NumberOfSamples)
    {
    }

    SimpleStudyResultsType::
    SimpleStudyResultsType (::std::auto_ptr< Status_type > Status,
                            const id_type& id,
                            const NumberOfSamples_type& NumberOfSamples)
    : ::xsd::qif2::MultipleProductInstanceStudyResultsBaseType (Status,
                                                                id,
                                                                NumberOfSamples)
    {
    }

    SimpleStudyResultsType::
    SimpleStudyResultsType (const SimpleStudyResultsType& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xsd::qif2::MultipleProductInstanceStudyResultsBaseType (x, f, c)
    {
    }

    SimpleStudyResultsType::
    SimpleStudyResultsType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xsd::qif2::MultipleProductInstanceStudyResultsBaseType (e, f, c)
    {
    }

    SimpleStudyResultsType* SimpleStudyResultsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SimpleStudyResultsType (*this, f, c);
    }

    SimpleStudyResultsType::
    ~SimpleStudyResultsType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, SimpleStudyResultsType >
    _xsd_SimpleStudyResultsType_type_factory_init (
      "SimpleStudyResultsType",
      "http://qifstandards.org/xsd/qif2");

    // CapabilityStudyResultsType
    //

    CapabilityStudyResultsType::
    CapabilityStudyResultsType (const Status_type& Status,
                                const id_type& id,
                                const NumberOfSamples_type& NumberOfSamples)
    : ::xsd::qif2::MultipleProductInstanceStudyResultsBaseType (Status,
                                                                id,
                                                                NumberOfSamples)
    {
    }

    CapabilityStudyResultsType::
    CapabilityStudyResultsType (::std::auto_ptr< Status_type > Status,
                                const id_type& id,
                                const NumberOfSamples_type& NumberOfSamples)
    : ::xsd::qif2::MultipleProductInstanceStudyResultsBaseType (Status,
                                                                id,
                                                                NumberOfSamples)
    {
    }

    CapabilityStudyResultsType::
    CapabilityStudyResultsType (const CapabilityStudyResultsType& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xsd::qif2::MultipleProductInstanceStudyResultsBaseType (x, f, c)
    {
    }

    CapabilityStudyResultsType::
    CapabilityStudyResultsType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xsd::qif2::MultipleProductInstanceStudyResultsBaseType (e, f, c)
    {
    }

    CapabilityStudyResultsType* CapabilityStudyResultsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CapabilityStudyResultsType (*this, f, c);
    }

    CapabilityStudyResultsType::
    ~CapabilityStudyResultsType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, CapabilityStudyResultsType >
    _xsd_CapabilityStudyResultsType_type_factory_init (
      "CapabilityStudyResultsType",
      "http://qifstandards.org/xsd/qif2");

    // GageRandRStudyResultsType
    //

    GageRandRStudyResultsType::
    GageRandRStudyResultsType (const Status_type& Status,
                               const id_type& id,
                               const NumberOfAppraisers_type& NumberOfAppraisers,
                               const NumberOfParts_type& NumberOfParts,
                               const NumberOfTrials_type& NumberOfTrials)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (Status,
                                                    id),
      MeasurementDeviceIds_ (this),
      NumberOfAppraisers_ (NumberOfAppraisers, this),
      NumberOfParts_ (NumberOfParts, this),
      NumberOfTrials_ (NumberOfTrials, this)
    {
    }

    GageRandRStudyResultsType::
    GageRandRStudyResultsType (::std::auto_ptr< Status_type > Status,
                               const id_type& id,
                               const NumberOfAppraisers_type& NumberOfAppraisers,
                               const NumberOfParts_type& NumberOfParts,
                               const NumberOfTrials_type& NumberOfTrials)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (Status,
                                                    id),
      MeasurementDeviceIds_ (this),
      NumberOfAppraisers_ (NumberOfAppraisers, this),
      NumberOfParts_ (NumberOfParts, this),
      NumberOfTrials_ (NumberOfTrials, this)
    {
    }

    GageRandRStudyResultsType::
    GageRandRStudyResultsType (const GageRandRStudyResultsType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (x, f, c),
      MeasurementDeviceIds_ (x.MeasurementDeviceIds_, f, this),
      NumberOfAppraisers_ (x.NumberOfAppraisers_, f, this),
      NumberOfParts_ (x.NumberOfParts_, f, this),
      NumberOfTrials_ (x.NumberOfTrials_, f, this)
    {
    }

    GageRandRStudyResultsType::
    GageRandRStudyResultsType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xsd::qif2::StatisticalStudyResultsBaseType (e, f | ::xml_schema::flags::base, c),
      MeasurementDeviceIds_ (this),
      NumberOfAppraisers_ (this),
      NumberOfParts_ (this),
      NumberOfTrials_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void GageRandRStudyResultsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatisticalStudyResultsBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MeasurementDeviceIds
        //
        if (n.name () == "MeasurementDeviceIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurementDeviceIds_type > r (
            MeasurementDeviceIds_traits::create (i, f, this));

          if (!this->MeasurementDeviceIds_)
          {
            this->MeasurementDeviceIds_.set (r);
            continue;
          }
        }

        // NumberOfAppraisers
        //
        if (n.name () == "NumberOfAppraisers" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!NumberOfAppraisers_.present ())
          {
            this->NumberOfAppraisers_.set (NumberOfAppraisers_traits::create (i, f, this));
            continue;
          }
        }

        // NumberOfParts
        //
        if (n.name () == "NumberOfParts" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!NumberOfParts_.present ())
          {
            this->NumberOfParts_.set (NumberOfParts_traits::create (i, f, this));
            continue;
          }
        }

        // NumberOfTrials
        //
        if (n.name () == "NumberOfTrials" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!NumberOfTrials_.present ())
          {
            this->NumberOfTrials_.set (NumberOfTrials_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!NumberOfAppraisers_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "NumberOfAppraisers",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!NumberOfParts_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "NumberOfParts",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!NumberOfTrials_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "NumberOfTrials",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    GageRandRStudyResultsType* GageRandRStudyResultsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class GageRandRStudyResultsType (*this, f, c);
    }

    GageRandRStudyResultsType& GageRandRStudyResultsType::
    operator= (const GageRandRStudyResultsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::StatisticalStudyResultsBaseType& > (*this) = x;
        this->MeasurementDeviceIds_ = x.MeasurementDeviceIds_;
        this->NumberOfAppraisers_ = x.NumberOfAppraisers_;
        this->NumberOfParts_ = x.NumberOfParts_;
        this->NumberOfTrials_ = x.NumberOfTrials_;
      }

      return *this;
    }

    GageRandRStudyResultsType::
    ~GageRandRStudyResultsType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, GageRandRStudyResultsType >
    _xsd_GageRandRStudyResultsType_type_factory_init (
      "GageRandRStudyResultsType",
      "http://qifstandards.org/xsd/qif2");

    // ProductionStudyResultsType
    //

    ProductionStudyResultsType::
    ProductionStudyResultsType (const Status_type& Status,
                                const id_type& id,
                                const NumberOfSamples_type& NumberOfSamples)
    : ::xsd::qif2::MultipleProductInstanceStudyResultsBaseType (Status,
                                                                id,
                                                                NumberOfSamples),
      ControlIssueDetails_ (this)
    {
    }

    ProductionStudyResultsType::
    ProductionStudyResultsType (::std::auto_ptr< Status_type > Status,
                                const id_type& id,
                                const NumberOfSamples_type& NumberOfSamples)
    : ::xsd::qif2::MultipleProductInstanceStudyResultsBaseType (Status,
                                                                id,
                                                                NumberOfSamples),
      ControlIssueDetails_ (this)
    {
    }

    ProductionStudyResultsType::
    ProductionStudyResultsType (const ProductionStudyResultsType& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xsd::qif2::MultipleProductInstanceStudyResultsBaseType (x, f, c),
      ControlIssueDetails_ (x.ControlIssueDetails_, f, this)
    {
    }

    ProductionStudyResultsType::
    ProductionStudyResultsType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xsd::qif2::MultipleProductInstanceStudyResultsBaseType (e, f | ::xml_schema::flags::base, c),
      ControlIssueDetails_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ProductionStudyResultsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::MultipleProductInstanceStudyResultsBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ControlIssueDetails
        //
        if (n.name () == "ControlIssueDetails" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ControlIssueDetails_type > r (
            ControlIssueDetails_traits::create (i, f, this));

          this->ControlIssueDetails_.push_back (r);
          continue;
        }

        break;
      }
    }

    ProductionStudyResultsType* ProductionStudyResultsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ProductionStudyResultsType (*this, f, c);
    }

    ProductionStudyResultsType& ProductionStudyResultsType::
    operator= (const ProductionStudyResultsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::MultipleProductInstanceStudyResultsBaseType& > (*this) = x;
        this->ControlIssueDetails_ = x.ControlIssueDetails_;
      }

      return *this;
    }

    ProductionStudyResultsType::
    ~ProductionStudyResultsType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, ProductionStudyResultsType >
    _xsd_ProductionStudyResultsType_type_factory_init (
      "ProductionStudyResultsType",
      "http://qifstandards.org/xsd/qif2");

    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::FirstArticleStudyResultsType >
    _xsd_FirstArticleStudyResults_element_factory_init (
      "StatisticalStudyResults",
      "http://qifstandards.org/xsd/qif2",
      "FirstArticleStudyResults",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::LinearityStudyResultsType >
    _xsd_LinearityStudyResults_element_factory_init (
      "StatisticalStudyResults",
      "http://qifstandards.org/xsd/qif2",
      "LinearityStudyResults",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::SimpleStudyResultsType >
    _xsd_SimpleStudyResults_element_factory_init (
      "StatisticalStudyResults",
      "http://qifstandards.org/xsd/qif2",
      "SimpleStudyResults",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::BiasStudyResultsType >
    _xsd_BiasStudyResults_element_factory_init (
      "StatisticalStudyResults",
      "http://qifstandards.org/xsd/qif2",
      "BiasStudyResults",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::StabilityStudyResultsType >
    _xsd_StabilityStudyResults_element_factory_init (
      "StatisticalStudyResults",
      "http://qifstandards.org/xsd/qif2",
      "StabilityStudyResults",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::CapabilityStudyResultsType >
    _xsd_CapabilityStudyResults_element_factory_init (
      "StatisticalStudyResults",
      "http://qifstandards.org/xsd/qif2",
      "CapabilityStudyResults",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::ProcessDifferenceStudyResultsType >
    _xsd_ProcessDifferenceStudyResults_element_factory_init (
      "StatisticalStudyResults",
      "http://qifstandards.org/xsd/qif2",
      "ProcessDifferenceStudyResults",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::GageRandRStudyResultsType >
    _xsd_GageRandRStudyResults_element_factory_init (
      "StatisticalStudyResults",
      "http://qifstandards.org/xsd/qif2",
      "GageRandRStudyResults",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::ProductionStudyResultsType >
    _xsd_ProductionStudyResults_element_factory_init (
      "StatisticalStudyResults",
      "http://qifstandards.org/xsd/qif2",
      "ProductionStudyResults",
      "http://qifstandards.org/xsd/qif2");


    // StatisticalStudyPlansType
    //

    StatisticalStudyPlansType::
    StatisticalStudyPlansType ()
    : ::xml_schema::type (),
      StatisticalStudyPlan_ (this)
    {
    }

    StatisticalStudyPlansType::
    StatisticalStudyPlansType (const StatisticalStudyPlansType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      StatisticalStudyPlan_ (x.StatisticalStudyPlan_, f, this)
    {
    }

    StatisticalStudyPlansType::
    StatisticalStudyPlansType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      StatisticalStudyPlan_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void StatisticalStudyPlansType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // StatisticalStudyPlan
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "StatisticalStudyPlan",
              "http://qifstandards.org/xsd/qif2",
              &::xsd::cxx::tree::factory_impl< StatisticalStudyPlan_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< StatisticalStudyPlan_type > r (
              dynamic_cast< StatisticalStudyPlan_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->StatisticalStudyPlan_.push_back (r);
            continue;
          }
        }

        break;
      }
    }

    StatisticalStudyPlansType* StatisticalStudyPlansType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatisticalStudyPlansType (*this, f, c);
    }

    StatisticalStudyPlansType& StatisticalStudyPlansType::
    operator= (const StatisticalStudyPlansType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->StatisticalStudyPlan_ = x.StatisticalStudyPlan_;
      }

      return *this;
    }

    StatisticalStudyPlansType::
    ~StatisticalStudyPlansType ()
    {
    }

    // StatisticalStudiesResultsType
    //

    StatisticalStudiesResultsType::
    StatisticalStudiesResultsType ()
    : ::xml_schema::type (),
      StatisticalStudyResults_ (this)
    {
    }

    StatisticalStudiesResultsType::
    StatisticalStudiesResultsType (const StatisticalStudiesResultsType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      StatisticalStudyResults_ (x.StatisticalStudyResults_, f, this)
    {
    }

    StatisticalStudiesResultsType::
    StatisticalStudiesResultsType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      StatisticalStudyResults_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void StatisticalStudiesResultsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // StatisticalStudyResults
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "StatisticalStudyResults",
              "http://qifstandards.org/xsd/qif2",
              &::xsd::cxx::tree::factory_impl< StatisticalStudyResults_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< StatisticalStudyResults_type > r (
              dynamic_cast< StatisticalStudyResults_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->StatisticalStudyResults_.push_back (r);
            continue;
          }
        }

        break;
      }
    }

    StatisticalStudiesResultsType* StatisticalStudiesResultsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatisticalStudiesResultsType (*this, f, c);
    }

    StatisticalStudiesResultsType& StatisticalStudiesResultsType::
    operator= (const StatisticalStudiesResultsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->StatisticalStudyResults_ = x.StatisticalStudyResults_;
      }

      return *this;
    }

    StatisticalStudiesResultsType::
    ~StatisticalStudiesResultsType ()
    {
    }

    // CorrectiveActionPlanType
    //

    CorrectiveActionPlanType::
    CorrectiveActionPlanType (const AssignableCauses_type& AssignableCauses,
                              const CorrectiveActions_type& CorrectiveActions,
                              const id_type& id)
    : ::xml_schema::type (),
      AssignableCauses_ (AssignableCauses, this),
      CorrectiveActions_ (CorrectiveActions, this),
      id_ (id, this)
    {
    }

    CorrectiveActionPlanType::
    CorrectiveActionPlanType (::std::auto_ptr< AssignableCauses_type > AssignableCauses,
                              ::std::auto_ptr< CorrectiveActions_type > CorrectiveActions,
                              const id_type& id)
    : ::xml_schema::type (),
      AssignableCauses_ (AssignableCauses, this),
      CorrectiveActions_ (CorrectiveActions, this),
      id_ (id, this)
    {
    }

    CorrectiveActionPlanType::
    CorrectiveActionPlanType (const CorrectiveActionPlanType& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      AssignableCauses_ (x.AssignableCauses_, f, this),
      CorrectiveActions_ (x.CorrectiveActions_, f, this),
      id_ (x.id_, f, this)
    {
    }

    CorrectiveActionPlanType::
    CorrectiveActionPlanType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      AssignableCauses_ (this),
      CorrectiveActions_ (this),
      id_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CorrectiveActionPlanType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // AssignableCauses
        //
        if (n.name () == "AssignableCauses" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AssignableCauses_type > r (
            AssignableCauses_traits::create (i, f, this));

          if (!AssignableCauses_.present ())
          {
            this->AssignableCauses_.set (r);
            continue;
          }
        }

        // CorrectiveActions
        //
        if (n.name () == "CorrectiveActions" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CorrectiveActions_type > r (
            CorrectiveActions_traits::create (i, f, this));

          if (!CorrectiveActions_.present ())
          {
            this->CorrectiveActions_.set (r);
            continue;
          }
        }

        break;
      }

      if (!AssignableCauses_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "AssignableCauses",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!CorrectiveActions_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "CorrectiveActions",
          "http://qifstandards.org/xsd/qif2");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          this->id_.set (id_traits::create (i, f, this));
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "id",
          "");
      }
    }

    CorrectiveActionPlanType* CorrectiveActionPlanType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CorrectiveActionPlanType (*this, f, c);
    }

    CorrectiveActionPlanType& CorrectiveActionPlanType::
    operator= (const CorrectiveActionPlanType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->AssignableCauses_ = x.AssignableCauses_;
        this->CorrectiveActions_ = x.CorrectiveActions_;
        this->id_ = x.id_;
      }

      return *this;
    }

    CorrectiveActionPlanType::
    ~CorrectiveActionPlanType ()
    {
    }

    // CorrectiveActionPlansType
    //

    CorrectiveActionPlansType::
    CorrectiveActionPlansType ()
    : ::xml_schema::type (),
      CorrectiveActionPlan_ (this)
    {
    }

    CorrectiveActionPlansType::
    CorrectiveActionPlansType (const CorrectiveActionPlansType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CorrectiveActionPlan_ (x.CorrectiveActionPlan_, f, this)
    {
    }

    CorrectiveActionPlansType::
    CorrectiveActionPlansType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CorrectiveActionPlan_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void CorrectiveActionPlansType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CorrectiveActionPlan
        //
        if (n.name () == "CorrectiveActionPlan" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CorrectiveActionPlan_type > r (
            CorrectiveActionPlan_traits::create (i, f, this));

          this->CorrectiveActionPlan_.push_back (r);
          continue;
        }

        break;
      }
    }

    CorrectiveActionPlansType* CorrectiveActionPlansType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CorrectiveActionPlansType (*this, f, c);
    }

    CorrectiveActionPlansType& CorrectiveActionPlansType::
    operator= (const CorrectiveActionPlansType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->CorrectiveActionPlan_ = x.CorrectiveActionPlan_;
      }

      return *this;
    }

    CorrectiveActionPlansType::
    ~CorrectiveActionPlansType ()
    {
    }

    // StatisticsType
    //

    StatisticsType::
    StatisticsType ()
    : ::xml_schema::type (),
      Version_ (this),
      StatisticalStudyPlans_ (this),
      StatisticalStudiesResults_ (this),
      CorrectiveActionPlans_ (this)
    {
    }

    StatisticsType::
    StatisticsType (const StatisticsType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Version_ (x.Version_, f, this),
      StatisticalStudyPlans_ (x.StatisticalStudyPlans_, f, this),
      StatisticalStudiesResults_ (x.StatisticalStudiesResults_, f, this),
      CorrectiveActionPlans_ (x.CorrectiveActionPlans_, f, this)
    {
    }

    StatisticsType::
    StatisticsType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Version_ (this),
      StatisticalStudyPlans_ (this),
      StatisticalStudiesResults_ (this),
      CorrectiveActionPlans_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void StatisticsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Version
        //
        if (n.name () == "Version" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Version_type > r (
            Version_traits::create (i, f, this));

          if (!this->Version_)
          {
            this->Version_.set (r);
            continue;
          }
        }

        // StatisticalStudyPlans
        //
        if (n.name () == "StatisticalStudyPlans" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< StatisticalStudyPlans_type > r (
            StatisticalStudyPlans_traits::create (i, f, this));

          if (!this->StatisticalStudyPlans_)
          {
            this->StatisticalStudyPlans_.set (r);
            continue;
          }
        }

        // StatisticalStudiesResults
        //
        if (n.name () == "StatisticalStudiesResults" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< StatisticalStudiesResults_type > r (
            StatisticalStudiesResults_traits::create (i, f, this));

          if (!this->StatisticalStudiesResults_)
          {
            this->StatisticalStudiesResults_.set (r);
            continue;
          }
        }

        // CorrectiveActionPlans
        //
        if (n.name () == "CorrectiveActionPlans" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CorrectiveActionPlans_type > r (
            CorrectiveActionPlans_traits::create (i, f, this));

          if (!this->CorrectiveActionPlans_)
          {
            this->CorrectiveActionPlans_.set (r);
            continue;
          }
        }

        break;
      }
    }

    StatisticsType* StatisticsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatisticsType (*this, f, c);
    }

    StatisticsType& StatisticsType::
    operator= (const StatisticsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Version_ = x.Version_;
        this->StatisticalStudyPlans_ = x.StatisticalStudyPlans_;
        this->StatisticalStudiesResults_ = x.StatisticalStudiesResults_;
        this->CorrectiveActionPlans_ = x.CorrectiveActionPlans_;
      }

      return *this;
    }

    StatisticsType::
    ~StatisticsType ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xsd
{
  namespace qif2
  {
    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType > (
        ::xsd::qif2::StatisticalStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType > (
        ::xsd::qif2::StatisticalStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType > (
        ::xsd::qif2::StatisticalStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StatisticalStudyPlan (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StatisticalStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StatisticalStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StatisticalStudyPlan (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StatisticalStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StatisticalStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType > (
        ::xsd::qif2::StatisticalStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType > (
        ::xsd::qif2::StatisticalStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType > (
        ::xsd::qif2::StatisticalStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType > (
          ::xsd::qif2::StatisticalStudyPlan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "StatisticalStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::StatisticalStudyPlanBaseType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType > r (
          dynamic_cast< ::xsd::qif2::StatisticalStudyPlanBaseType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "StatisticalStudyPlan",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType >
    StatisticalStudyPlan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "StatisticalStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::StatisticalStudyPlanBaseType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::StatisticalStudyPlanBaseType > r (
          dynamic_cast< ::xsd::qif2::StatisticalStudyPlanBaseType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "StatisticalStudyPlan",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType > (
        ::xsd::qif2::FirstArticleStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType > (
        ::xsd::qif2::FirstArticleStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType > (
        ::xsd::qif2::FirstArticleStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FirstArticleStudyPlan (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FirstArticleStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FirstArticleStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FirstArticleStudyPlan (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FirstArticleStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FirstArticleStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType > (
        ::xsd::qif2::FirstArticleStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType > (
        ::xsd::qif2::FirstArticleStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType > (
        ::xsd::qif2::FirstArticleStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (const ::xercesc::DOMDocument& doc,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType > (
          ::xsd::qif2::FirstArticleStudyPlan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "FirstArticleStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::FirstArticleStudyPlanType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType > r (
          dynamic_cast< ::xsd::qif2::FirstArticleStudyPlanType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FirstArticleStudyPlan",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType >
    FirstArticleStudyPlan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "FirstArticleStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::FirstArticleStudyPlanType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyPlanType > r (
          dynamic_cast< ::xsd::qif2::FirstArticleStudyPlanType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FirstArticleStudyPlan",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType > (
        ::xsd::qif2::LinearityStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType > (
        ::xsd::qif2::LinearityStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType > (
        ::xsd::qif2::LinearityStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearityStudyPlan (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearityStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearityStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearityStudyPlan (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearityStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearityStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType > (
        ::xsd::qif2::LinearityStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType > (
        ::xsd::qif2::LinearityStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType > (
        ::xsd::qif2::LinearityStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType > (
          ::xsd::qif2::LinearityStudyPlan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "LinearityStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::LinearityStudyPlanType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType > r (
          dynamic_cast< ::xsd::qif2::LinearityStudyPlanType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LinearityStudyPlan",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType >
    LinearityStudyPlan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "LinearityStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::LinearityStudyPlanType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::LinearityStudyPlanType > r (
          dynamic_cast< ::xsd::qif2::LinearityStudyPlanType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LinearityStudyPlan",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType > (
        ::xsd::qif2::SimpleStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType > (
        ::xsd::qif2::SimpleStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType > (
        ::xsd::qif2::SimpleStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SimpleStudyPlan (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SimpleStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SimpleStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SimpleStudyPlan (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SimpleStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SimpleStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType > (
        ::xsd::qif2::SimpleStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType > (
        ::xsd::qif2::SimpleStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType > (
        ::xsd::qif2::SimpleStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType > (
          ::xsd::qif2::SimpleStudyPlan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "SimpleStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::SimpleStudyPlanType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType > r (
          dynamic_cast< ::xsd::qif2::SimpleStudyPlanType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SimpleStudyPlan",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType >
    SimpleStudyPlan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "SimpleStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::SimpleStudyPlanType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::SimpleStudyPlanType > r (
          dynamic_cast< ::xsd::qif2::SimpleStudyPlanType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SimpleStudyPlan",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType > (
        ::xsd::qif2::BiasStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType > (
        ::xsd::qif2::BiasStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType > (
        ::xsd::qif2::BiasStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::BiasStudyPlan (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::BiasStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::BiasStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::BiasStudyPlan (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::BiasStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::BiasStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType > (
        ::xsd::qif2::BiasStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType > (
        ::xsd::qif2::BiasStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType > (
        ::xsd::qif2::BiasStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType > (
          ::xsd::qif2::BiasStudyPlan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "BiasStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::BiasStudyPlanType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType > r (
          dynamic_cast< ::xsd::qif2::BiasStudyPlanType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "BiasStudyPlan",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType >
    BiasStudyPlan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "BiasStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::BiasStudyPlanType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::BiasStudyPlanType > r (
          dynamic_cast< ::xsd::qif2::BiasStudyPlanType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "BiasStudyPlan",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType > (
        ::xsd::qif2::StabilityStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType > (
        ::xsd::qif2::StabilityStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType > (
        ::xsd::qif2::StabilityStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StabilityStudyPlan (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StabilityStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StabilityStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StabilityStudyPlan (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StabilityStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StabilityStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType > (
        ::xsd::qif2::StabilityStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType > (
        ::xsd::qif2::StabilityStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType > (
        ::xsd::qif2::StabilityStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType > (
          ::xsd::qif2::StabilityStudyPlan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "StabilityStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::StabilityStudyPlanType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType > r (
          dynamic_cast< ::xsd::qif2::StabilityStudyPlanType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "StabilityStudyPlan",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType >
    StabilityStudyPlan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "StabilityStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::StabilityStudyPlanType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::StabilityStudyPlanType > r (
          dynamic_cast< ::xsd::qif2::StabilityStudyPlanType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "StabilityStudyPlan",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType > (
        ::xsd::qif2::ProcessDifferenceStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType > (
        ::xsd::qif2::ProcessDifferenceStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType > (
        ::xsd::qif2::ProcessDifferenceStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ProcessDifferenceStudyPlan (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ProcessDifferenceStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ProcessDifferenceStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ProcessDifferenceStudyPlan (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ProcessDifferenceStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ProcessDifferenceStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType > (
        ::xsd::qif2::ProcessDifferenceStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType > (
        ::xsd::qif2::ProcessDifferenceStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType > (
        ::xsd::qif2::ProcessDifferenceStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (const ::xercesc::DOMDocument& doc,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType > (
          ::xsd::qif2::ProcessDifferenceStudyPlan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "ProcessDifferenceStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::ProcessDifferenceStudyPlanType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType > r (
          dynamic_cast< ::xsd::qif2::ProcessDifferenceStudyPlanType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ProcessDifferenceStudyPlan",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType >
    ProcessDifferenceStudyPlan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "ProcessDifferenceStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::ProcessDifferenceStudyPlanType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyPlanType > r (
          dynamic_cast< ::xsd::qif2::ProcessDifferenceStudyPlanType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ProcessDifferenceStudyPlan",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType > (
        ::xsd::qif2::CapabilityStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType > (
        ::xsd::qif2::CapabilityStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType > (
        ::xsd::qif2::CapabilityStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CapabilityStudyPlan (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CapabilityStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CapabilityStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CapabilityStudyPlan (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CapabilityStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CapabilityStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType > (
        ::xsd::qif2::CapabilityStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType > (
        ::xsd::qif2::CapabilityStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType > (
        ::xsd::qif2::CapabilityStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType > (
          ::xsd::qif2::CapabilityStudyPlan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "CapabilityStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::CapabilityStudyPlanType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType > r (
          dynamic_cast< ::xsd::qif2::CapabilityStudyPlanType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CapabilityStudyPlan",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType >
    CapabilityStudyPlan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "CapabilityStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::CapabilityStudyPlanType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::CapabilityStudyPlanType > r (
          dynamic_cast< ::xsd::qif2::CapabilityStudyPlanType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CapabilityStudyPlan",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType > (
        ::xsd::qif2::GageRandRStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType > (
        ::xsd::qif2::GageRandRStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType > (
        ::xsd::qif2::GageRandRStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::GageRandRStudyPlan (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::GageRandRStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::GageRandRStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::GageRandRStudyPlan (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::GageRandRStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::GageRandRStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType > (
        ::xsd::qif2::GageRandRStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType > (
        ::xsd::qif2::GageRandRStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType > (
        ::xsd::qif2::GageRandRStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType > (
          ::xsd::qif2::GageRandRStudyPlan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "GageRandRStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::GageRandRStudyPlanType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType > r (
          dynamic_cast< ::xsd::qif2::GageRandRStudyPlanType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GageRandRStudyPlan",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType >
    GageRandRStudyPlan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "GageRandRStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::GageRandRStudyPlanType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::GageRandRStudyPlanType > r (
          dynamic_cast< ::xsd::qif2::GageRandRStudyPlanType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GageRandRStudyPlan",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType > (
        ::xsd::qif2::ProductionStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType > (
        ::xsd::qif2::ProductionStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType > (
        ::xsd::qif2::ProductionStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ProductionStudyPlan (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ProductionStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ProductionStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ProductionStudyPlan (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ProductionStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ProductionStudyPlan (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType > (
        ::xsd::qif2::ProductionStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType > (
        ::xsd::qif2::ProductionStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType > (
        ::xsd::qif2::ProductionStudyPlan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType > (
          ::xsd::qif2::ProductionStudyPlan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "ProductionStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::ProductionStudyPlanType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType > r (
          dynamic_cast< ::xsd::qif2::ProductionStudyPlanType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ProductionStudyPlan",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType >
    ProductionStudyPlan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "ProductionStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::ProductionStudyPlanType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::ProductionStudyPlanType > r (
          dynamic_cast< ::xsd::qif2::ProductionStudyPlanType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ProductionStudyPlan",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType > (
        ::xsd::qif2::StatisticalStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType > (
        ::xsd::qif2::StatisticalStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType > (
        ::xsd::qif2::StatisticalStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StatisticalStudyResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StatisticalStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StatisticalStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StatisticalStudyResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StatisticalStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StatisticalStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType > (
        ::xsd::qif2::StatisticalStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType > (
        ::xsd::qif2::StatisticalStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType > (
        ::xsd::qif2::StatisticalStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType > (
          ::xsd::qif2::StatisticalStudyResults (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "StatisticalStudyResults",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::StatisticalStudyResultsBaseType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType > r (
          dynamic_cast< ::xsd::qif2::StatisticalStudyResultsBaseType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "StatisticalStudyResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType >
    StatisticalStudyResults (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "StatisticalStudyResults",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::StatisticalStudyResultsBaseType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::StatisticalStudyResultsBaseType > r (
          dynamic_cast< ::xsd::qif2::StatisticalStudyResultsBaseType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "StatisticalStudyResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType > (
        ::xsd::qif2::FirstArticleStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType > (
        ::xsd::qif2::FirstArticleStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType > (
        ::xsd::qif2::FirstArticleStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FirstArticleStudyResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FirstArticleStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FirstArticleStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FirstArticleStudyResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FirstArticleStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FirstArticleStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType > (
        ::xsd::qif2::FirstArticleStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType > (
        ::xsd::qif2::FirstArticleStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType > (
        ::xsd::qif2::FirstArticleStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (const ::xercesc::DOMDocument& doc,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType > (
          ::xsd::qif2::FirstArticleStudyResults (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "FirstArticleStudyResults",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::FirstArticleStudyResultsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType > r (
          dynamic_cast< ::xsd::qif2::FirstArticleStudyResultsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FirstArticleStudyResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType >
    FirstArticleStudyResults (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "FirstArticleStudyResults",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::FirstArticleStudyResultsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::FirstArticleStudyResultsType > r (
          dynamic_cast< ::xsd::qif2::FirstArticleStudyResultsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FirstArticleStudyResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType > (
        ::xsd::qif2::LinearityStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType > (
        ::xsd::qif2::LinearityStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType > (
        ::xsd::qif2::LinearityStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearityStudyResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearityStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearityStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearityStudyResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearityStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearityStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType > (
        ::xsd::qif2::LinearityStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType > (
        ::xsd::qif2::LinearityStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType > (
        ::xsd::qif2::LinearityStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (const ::xercesc::DOMDocument& doc,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType > (
          ::xsd::qif2::LinearityStudyResults (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "LinearityStudyResults",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::LinearityStudyResultsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType > r (
          dynamic_cast< ::xsd::qif2::LinearityStudyResultsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LinearityStudyResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType >
    LinearityStudyResults (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "LinearityStudyResults",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::LinearityStudyResultsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::LinearityStudyResultsType > r (
          dynamic_cast< ::xsd::qif2::LinearityStudyResultsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LinearityStudyResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType > (
        ::xsd::qif2::SimpleStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType > (
        ::xsd::qif2::SimpleStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType > (
        ::xsd::qif2::SimpleStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SimpleStudyResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SimpleStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SimpleStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SimpleStudyResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SimpleStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SimpleStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType > (
        ::xsd::qif2::SimpleStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType > (
        ::xsd::qif2::SimpleStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType > (
        ::xsd::qif2::SimpleStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType > (
          ::xsd::qif2::SimpleStudyResults (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "SimpleStudyResults",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::SimpleStudyResultsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType > r (
          dynamic_cast< ::xsd::qif2::SimpleStudyResultsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SimpleStudyResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType >
    SimpleStudyResults (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "SimpleStudyResults",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::SimpleStudyResultsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::SimpleStudyResultsType > r (
          dynamic_cast< ::xsd::qif2::SimpleStudyResultsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SimpleStudyResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType > (
        ::xsd::qif2::BiasStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType > (
        ::xsd::qif2::BiasStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType > (
        ::xsd::qif2::BiasStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::BiasStudyResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::BiasStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::BiasStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::BiasStudyResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::BiasStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::BiasStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType > (
        ::xsd::qif2::BiasStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType > (
        ::xsd::qif2::BiasStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType > (
        ::xsd::qif2::BiasStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType > (
          ::xsd::qif2::BiasStudyResults (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "BiasStudyResults",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::BiasStudyResultsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType > r (
          dynamic_cast< ::xsd::qif2::BiasStudyResultsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "BiasStudyResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType >
    BiasStudyResults (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "BiasStudyResults",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::BiasStudyResultsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::BiasStudyResultsType > r (
          dynamic_cast< ::xsd::qif2::BiasStudyResultsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "BiasStudyResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType > (
        ::xsd::qif2::StabilityStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType > (
        ::xsd::qif2::StabilityStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType > (
        ::xsd::qif2::StabilityStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StabilityStudyResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StabilityStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StabilityStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StabilityStudyResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StabilityStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StabilityStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType > (
        ::xsd::qif2::StabilityStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType > (
        ::xsd::qif2::StabilityStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType > (
        ::xsd::qif2::StabilityStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (const ::xercesc::DOMDocument& doc,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType > (
          ::xsd::qif2::StabilityStudyResults (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "StabilityStudyResults",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::StabilityStudyResultsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType > r (
          dynamic_cast< ::xsd::qif2::StabilityStudyResultsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "StabilityStudyResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType >
    StabilityStudyResults (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "StabilityStudyResults",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::StabilityStudyResultsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::StabilityStudyResultsType > r (
          dynamic_cast< ::xsd::qif2::StabilityStudyResultsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "StabilityStudyResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType > (
        ::xsd::qif2::CapabilityStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType > (
        ::xsd::qif2::CapabilityStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType > (
        ::xsd::qif2::CapabilityStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CapabilityStudyResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CapabilityStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CapabilityStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CapabilityStudyResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CapabilityStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CapabilityStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType > (
        ::xsd::qif2::CapabilityStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType > (
        ::xsd::qif2::CapabilityStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType > (
        ::xsd::qif2::CapabilityStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType > (
          ::xsd::qif2::CapabilityStudyResults (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "CapabilityStudyResults",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::CapabilityStudyResultsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType > r (
          dynamic_cast< ::xsd::qif2::CapabilityStudyResultsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CapabilityStudyResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType >
    CapabilityStudyResults (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "CapabilityStudyResults",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::CapabilityStudyResultsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::CapabilityStudyResultsType > r (
          dynamic_cast< ::xsd::qif2::CapabilityStudyResultsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CapabilityStudyResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType > (
        ::xsd::qif2::ProcessDifferenceStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType > (
        ::xsd::qif2::ProcessDifferenceStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType > (
        ::xsd::qif2::ProcessDifferenceStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ProcessDifferenceStudyResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ProcessDifferenceStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ProcessDifferenceStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ProcessDifferenceStudyResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ProcessDifferenceStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ProcessDifferenceStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType > (
        ::xsd::qif2::ProcessDifferenceStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType > (
        ::xsd::qif2::ProcessDifferenceStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType > (
        ::xsd::qif2::ProcessDifferenceStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (const ::xercesc::DOMDocument& doc,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType > (
          ::xsd::qif2::ProcessDifferenceStudyResults (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "ProcessDifferenceStudyResults",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::ProcessDifferenceStudyResultsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType > r (
          dynamic_cast< ::xsd::qif2::ProcessDifferenceStudyResultsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ProcessDifferenceStudyResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType >
    ProcessDifferenceStudyResults (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "ProcessDifferenceStudyResults",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::ProcessDifferenceStudyResultsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::ProcessDifferenceStudyResultsType > r (
          dynamic_cast< ::xsd::qif2::ProcessDifferenceStudyResultsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ProcessDifferenceStudyResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType > (
        ::xsd::qif2::GageRandRStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType > (
        ::xsd::qif2::GageRandRStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType > (
        ::xsd::qif2::GageRandRStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::GageRandRStudyResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::GageRandRStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::GageRandRStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::GageRandRStudyResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::GageRandRStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::GageRandRStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType > (
        ::xsd::qif2::GageRandRStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType > (
        ::xsd::qif2::GageRandRStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType > (
        ::xsd::qif2::GageRandRStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (const ::xercesc::DOMDocument& doc,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType > (
          ::xsd::qif2::GageRandRStudyResults (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "GageRandRStudyResults",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::GageRandRStudyResultsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType > r (
          dynamic_cast< ::xsd::qif2::GageRandRStudyResultsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GageRandRStudyResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType >
    GageRandRStudyResults (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "GageRandRStudyResults",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::GageRandRStudyResultsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::GageRandRStudyResultsType > r (
          dynamic_cast< ::xsd::qif2::GageRandRStudyResultsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GageRandRStudyResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType > (
        ::xsd::qif2::ProductionStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType > (
        ::xsd::qif2::ProductionStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType > (
        ::xsd::qif2::ProductionStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ProductionStudyResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ProductionStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ProductionStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ProductionStudyResults (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ProductionStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ProductionStudyResults (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType > (
        ::xsd::qif2::ProductionStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType > (
        ::xsd::qif2::ProductionStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType > (
        ::xsd::qif2::ProductionStudyResults (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType > (
          ::xsd::qif2::ProductionStudyResults (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "ProductionStudyResults",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::ProductionStudyResultsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType > r (
          dynamic_cast< ::xsd::qif2::ProductionStudyResultsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ProductionStudyResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType >
    ProductionStudyResults (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "ProductionStudyResults",
          "http://qifstandards.org/xsd/qif2",
          &::xsd::cxx::tree::factory_impl< ::xsd::qif2::ProductionStudyResultsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xsd::qif2::ProductionStudyResultsType > r (
          dynamic_cast< ::xsd::qif2::ProductionStudyResultsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ProductionStudyResults",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::StatisticsType > (
        ::xsd::qif2::Statistics (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::StatisticsType > (
        ::xsd::qif2::Statistics (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::StatisticsType > (
        ::xsd::qif2::Statistics (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Statistics (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Statistics (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Statistics (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Statistics (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Statistics (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Statistics (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xsd::qif2::StatisticsType > (
        ::xsd::qif2::Statistics (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::StatisticsType > (
        ::xsd::qif2::Statistics (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xsd::qif2::StatisticsType > (
        ::xsd::qif2::Statistics (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xsd::qif2::StatisticsType > (
          ::xsd::qif2::Statistics (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Statistics" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::StatisticsType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::StatisticsType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Statistics",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::StatisticsType >
    Statistics (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Statistics" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::StatisticsType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::StatisticsType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Statistics",
        "http://qifstandards.org/xsd/qif2");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace xsd
{
  namespace qif2
  {
    void
    operator<< (::xercesc::DOMElement& e, const StatisticalStudyPlanBaseType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Attributes
      //
      if (i.Attributes ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Attributes",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Attributes ();
      }

      // ThisStatisticalStudyPlanInstanceQPId
      //
      if (i.ThisStatisticalStudyPlanInstanceQPId ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ThisStatisticalStudyPlanInstanceQPId",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ThisStatisticalStudyPlanInstanceQPId ();
      }

      // FeatureItemIds
      //
      if (i.FeatureItemIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "FeatureItemIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.FeatureItemIds ();
      }

      // CalculateAverageFeatures
      //
      if (i.CalculateAverageFeatures ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "CalculateAverageFeatures",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.CalculateAverageFeatures ();
      }

      // CharacteristicItemIds
      //
      if (i.CharacteristicItemIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "CharacteristicItemIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.CharacteristicItemIds ();
      }

      // StatsValuesPerChar
      //
      if (i.StatsValuesPerChar ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "StatsValuesPerChar",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.StatsValuesPerChar ();
      }

      // StatsValuesPerSubgroup
      //
      if (i.StatsValuesPerSubgroup ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "StatsValuesPerSubgroup",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.StatsValuesPerSubgroup ();
      }

      // StatsValuesSummary
      //
      for (StatisticalStudyPlanBaseType::StatsValuesSummary_const_iterator
           b (i.StatsValuesSummary ().begin ()), n (i.StatsValuesSummary ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "StatsValuesSummary",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // PreInspectionTraceability
      //
      if (i.PreInspectionTraceability ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PreInspectionTraceability",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.PreInspectionTraceability ();
      }

      // Name
      //
      if (i.Name ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Name",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Name ();
      }

      // Description
      //
      if (i.Description ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Description",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Description ();
      }

      // PlanId
      //
      if (i.PlanId ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PlanId",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.PlanId ();
      }

      // CorrectiveActionPlanId
      //
      if (i.CorrectiveActionPlanId ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "CorrectiveActionPlanId",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.CorrectiveActionPlanId ();
      }

      // id
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "id",
            e));

        a << i.id ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, StatisticalStudyPlanBaseType >
    _xsd_StatisticalStudyPlanBaseType_type_serializer_init (
      "StatisticalStudyPlanBaseType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const LinearityStudyPlanType& i)
    {
      e << static_cast< const ::xsd::qif2::StatisticalStudyPlanBaseType& > (i);

      // MeasurementDeviceIds
      //
      if (i.MeasurementDeviceIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MeasurementDeviceIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MeasurementDeviceIds ();
      }

      // GoodnessOfFitThreshold
      //
      if (i.GoodnessOfFitThreshold ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "GoodnessOfFitThreshold",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << ::xml_schema::as_decimal(*i.GoodnessOfFitThreshold ());
      }

      // LinearAbsoluteLinearityMinimum
      //
      if (i.LinearAbsoluteLinearityMinimum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "LinearAbsoluteLinearityMinimum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.LinearAbsoluteLinearityMinimum ();
      }

      // AngularAbsoluteLinearityMinimum
      //
      if (i.AngularAbsoluteLinearityMinimum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AngularAbsoluteLinearityMinimum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.AngularAbsoluteLinearityMinimum ();
      }

      // AreaAbsoluteLinearityMinimum
      //
      if (i.AreaAbsoluteLinearityMinimum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AreaAbsoluteLinearityMinimum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.AreaAbsoluteLinearityMinimum ();
      }

      // ForceAbsoluteLinearityMinimum
      //
      if (i.ForceAbsoluteLinearityMinimum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ForceAbsoluteLinearityMinimum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ForceAbsoluteLinearityMinimum ();
      }

      // MassAbsoluteLinearityMinimum
      //
      if (i.MassAbsoluteLinearityMinimum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MassAbsoluteLinearityMinimum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MassAbsoluteLinearityMinimum ();
      }

      // PressureAbsoluteLinearityMinimum
      //
      if (i.PressureAbsoluteLinearityMinimum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PressureAbsoluteLinearityMinimum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.PressureAbsoluteLinearityMinimum ();
      }

      // SpeedAbsoluteLinearityMinimum
      //
      if (i.SpeedAbsoluteLinearityMinimum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SpeedAbsoluteLinearityMinimum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.SpeedAbsoluteLinearityMinimum ();
      }

      // TemperatureAbsoluteLinearityMinimum
      //
      if (i.TemperatureAbsoluteLinearityMinimum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "TemperatureAbsoluteLinearityMinimum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.TemperatureAbsoluteLinearityMinimum ();
      }

      // TimeAbsoluteLinearityMinimum
      //
      if (i.TimeAbsoluteLinearityMinimum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "TimeAbsoluteLinearityMinimum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.TimeAbsoluteLinearityMinimum ();
      }

      // UserDefinedUnitAbsoluteLinearityMinimum
      //
      for (LinearityStudyPlanType::UserDefinedUnitAbsoluteLinearityMinimum_const_iterator
           b (i.UserDefinedUnitAbsoluteLinearityMinimum ().begin ()), n (i.UserDefinedUnitAbsoluteLinearityMinimum ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "UserDefinedUnitAbsoluteLinearityMinimum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // RelativeLinearityMinimum
      //
      if (i.RelativeLinearityMinimum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "RelativeLinearityMinimum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << ::xml_schema::as_decimal(*i.RelativeLinearityMinimum ());
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LinearityStudyPlanType >
    _xsd_LinearityStudyPlanType_type_serializer_init (
      "LinearityStudyPlanType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const StabilityStudyPlanType& i)
    {
      e << static_cast< const ::xsd::qif2::StatisticalStudyPlanBaseType& > (i);

      // MeasurementDeviceIds
      //
      if (i.MeasurementDeviceIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MeasurementDeviceIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MeasurementDeviceIds ();
      }

      // SampleSize
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SampleSize",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.SampleSize ();
      }

      // SampleFrequency
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SampleFrequency",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.SampleFrequency ();
      }

      // SamplingInterval
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SamplingInterval",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.SamplingInterval ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, StabilityStudyPlanType >
    _xsd_StabilityStudyPlanType_type_serializer_init (
      "StabilityStudyPlanType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const MultipleProductInstanceStudyPlanBaseType& i)
    {
      e << static_cast< const ::xsd::qif2::StatisticalStudyPlanBaseType& > (i);

      // NumberOfSamples
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "NumberOfSamples",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.NumberOfSamples ();
      }

      // SubgroupSize
      //
      if (i.SubgroupSize ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SubgroupSize",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.SubgroupSize ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MultipleProductInstanceStudyPlanBaseType >
    _xsd_MultipleProductInstanceStudyPlanBaseType_type_serializer_init (
      "MultipleProductInstanceStudyPlanBaseType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const BiasStudyPlanType& i)
    {
      e << static_cast< const ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType& > (i);

      // MeasurementDeviceIds
      //
      if (i.MeasurementDeviceIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MeasurementDeviceIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MeasurementDeviceIds ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BiasStudyPlanType >
    _xsd_BiasStudyPlanType_type_serializer_init (
      "BiasStudyPlanType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const FirstArticleStudyPlanType& i)
    {
      e << static_cast< const ::xsd::qif2::StatisticalStudyPlanBaseType& > (i);

      // InSpecRatio
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InSpecRatio",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << ::xml_schema::as_decimal(i.InSpecRatio ());
      }

      // LinearAbsoluteMaximum
      //
      if (i.LinearAbsoluteMaximum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "LinearAbsoluteMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.LinearAbsoluteMaximum ();
      }

      // AngularAbsoluteMaximum
      //
      if (i.AngularAbsoluteMaximum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AngularAbsoluteMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.AngularAbsoluteMaximum ();
      }

      // AreaAbsoluteMaximum
      //
      if (i.AreaAbsoluteMaximum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AreaAbsoluteMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.AreaAbsoluteMaximum ();
      }

      // ForceAbsoluteMaximum
      //
      if (i.ForceAbsoluteMaximum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ForceAbsoluteMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ForceAbsoluteMaximum ();
      }

      // MassAbsoluteMaximum
      //
      if (i.MassAbsoluteMaximum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MassAbsoluteMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MassAbsoluteMaximum ();
      }

      // PressureAbsoluteMaximum
      //
      if (i.PressureAbsoluteMaximum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PressureAbsoluteMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.PressureAbsoluteMaximum ();
      }

      // SpeedAbsoluteMaximum
      //
      if (i.SpeedAbsoluteMaximum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SpeedAbsoluteMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.SpeedAbsoluteMaximum ();
      }

      // TemperatureAbsoluteMaximum
      //
      if (i.TemperatureAbsoluteMaximum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "TemperatureAbsoluteMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.TemperatureAbsoluteMaximum ();
      }

      // TimeAbsoluteMaximum
      //
      if (i.TimeAbsoluteMaximum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "TimeAbsoluteMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.TimeAbsoluteMaximum ();
      }

      // UserDefinedUnitAbsoluteMaximum
      //
      for (FirstArticleStudyPlanType::UserDefinedUnitAbsoluteMaximum_const_iterator
           b (i.UserDefinedUnitAbsoluteMaximum ().begin ()), n (i.UserDefinedUnitAbsoluteMaximum ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "UserDefinedUnitAbsoluteMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // RelativeMaximum
      //
      if (i.RelativeMaximum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "RelativeMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << ::xml_schema::as_decimal(*i.RelativeMaximum ());
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FirstArticleStudyPlanType >
    _xsd_FirstArticleStudyPlanType_type_serializer_init (
      "FirstArticleStudyPlanType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const ProcessDifferenceStudyPlanType& i)
    {
      e << static_cast< const ::xsd::qif2::StatisticalStudyPlanBaseType& > (i);

      // NumberOfSamples
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "NumberOfSamples",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.NumberOfSamples ();
      }

      // SubgroupSize
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SubgroupSize",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.SubgroupSize ();
      }

      // ManufacturingProcessId
      //
      if (i.ManufacturingProcessId ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ManufacturingProcessId",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ManufacturingProcessId ();
      }

      // LinearAbsoluteDifference
      //
      if (i.LinearAbsoluteDifference ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "LinearAbsoluteDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.LinearAbsoluteDifference ();
      }

      // AngularAbsoluteDifference
      //
      if (i.AngularAbsoluteDifference ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AngularAbsoluteDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.AngularAbsoluteDifference ();
      }

      // AreaAbsoluteDifference
      //
      if (i.AreaAbsoluteDifference ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AreaAbsoluteDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.AreaAbsoluteDifference ();
      }

      // ForceAbsoluteDifference
      //
      if (i.ForceAbsoluteDifference ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ForceAbsoluteDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ForceAbsoluteDifference ();
      }

      // MassAbsoluteDifference
      //
      if (i.MassAbsoluteDifference ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MassAbsoluteDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MassAbsoluteDifference ();
      }

      // PressureAbsoluteDifference
      //
      if (i.PressureAbsoluteDifference ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PressureAbsoluteDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.PressureAbsoluteDifference ();
      }

      // SpeedAbsoluteDifference
      //
      if (i.SpeedAbsoluteDifference ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SpeedAbsoluteDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.SpeedAbsoluteDifference ();
      }

      // TemperatureAbsoluteDifference
      //
      if (i.TemperatureAbsoluteDifference ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "TemperatureAbsoluteDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.TemperatureAbsoluteDifference ();
      }

      // TimeAbsoluteDifference
      //
      if (i.TimeAbsoluteDifference ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "TimeAbsoluteDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.TimeAbsoluteDifference ();
      }

      // UserDefinedUnitAbsoluteDifference
      //
      for (ProcessDifferenceStudyPlanType::UserDefinedUnitAbsoluteDifference_const_iterator
           b (i.UserDefinedUnitAbsoluteDifference ().begin ()), n (i.UserDefinedUnitAbsoluteDifference ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "UserDefinedUnitAbsoluteDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // RelativeDifference
      //
      if (i.RelativeDifference ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "RelativeDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << ::xml_schema::as_decimal(*i.RelativeDifference ());
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ProcessDifferenceStudyPlanType >
    _xsd_ProcessDifferenceStudyPlanType_type_serializer_init (
      "ProcessDifferenceStudyPlanType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const SimpleStudyPlanType& i)
    {
      e << static_cast< const ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SimpleStudyPlanType >
    _xsd_SimpleStudyPlanType_type_serializer_init (
      "SimpleStudyPlanType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const CapabilityStudyPlanType& i)
    {
      e << static_cast< const ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType& > (i);

      // CpkThreshold
      //
      if (i.CpkThreshold ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "CpkThreshold",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.CpkThreshold ();
      }

      // PpkThreshold
      //
      if (i.PpkThreshold ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PpkThreshold",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.PpkThreshold ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CapabilityStudyPlanType >
    _xsd_CapabilityStudyPlanType_type_serializer_init (
      "CapabilityStudyPlanType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const GageRandRStudyEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const GageRandRStudyEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const GageRandRStudyEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const GageRandRStudyPlanType& i)
    {
      e << static_cast< const ::xsd::qif2::StatisticalStudyPlanBaseType& > (i);

      // MeasurementDeviceIds
      //
      if (i.MeasurementDeviceIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MeasurementDeviceIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MeasurementDeviceIds ();
      }

      // RandRStudyType
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "RandRStudyType",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.RandRStudyType ();
      }

      // NumberOfAppraisers
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "NumberOfAppraisers",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.NumberOfAppraisers ();
      }

      // NumberOfParts
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "NumberOfParts",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.NumberOfParts ();
      }

      // NumberOfTrials
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "NumberOfTrials",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.NumberOfTrials ();
      }

      // MaximumRelativeAppraiserVariation
      //
      if (i.MaximumRelativeAppraiserVariation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumRelativeAppraiserVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumRelativeAppraiserVariation ();
      }

      // MaximumAbsoluteLinearAppraiserVariation
      //
      if (i.MaximumAbsoluteLinearAppraiserVariation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteLinearAppraiserVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteLinearAppraiserVariation ();
      }

      // MaximumAbsoluteAngularAppraiserVariation
      //
      if (i.MaximumAbsoluteAngularAppraiserVariation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteAngularAppraiserVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteAngularAppraiserVariation ();
      }

      // MaximumAbsoluteAreaAppraiserVariation
      //
      if (i.MaximumAbsoluteAreaAppraiserVariation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteAreaAppraiserVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteAreaAppraiserVariation ();
      }

      // MaximumAbsoluteForceAppraiserVariation
      //
      if (i.MaximumAbsoluteForceAppraiserVariation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteForceAppraiserVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteForceAppraiserVariation ();
      }

      // MaximumAbsoluteMassAppraiserVariation
      //
      if (i.MaximumAbsoluteMassAppraiserVariation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteMassAppraiserVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteMassAppraiserVariation ();
      }

      // MaximumAbsolutePressureAppraiserVariation
      //
      if (i.MaximumAbsolutePressureAppraiserVariation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsolutePressureAppraiserVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsolutePressureAppraiserVariation ();
      }

      // MaximumAbsoluteSpeedAppraiserVariation
      //
      if (i.MaximumAbsoluteSpeedAppraiserVariation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteSpeedAppraiserVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteSpeedAppraiserVariation ();
      }

      // MaximumAbsoluteTemperatureAppraiserVariation
      //
      if (i.MaximumAbsoluteTemperatureAppraiserVariation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteTemperatureAppraiserVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteTemperatureAppraiserVariation ();
      }

      // MaximumAbsoluteTimeAppraiserVariation
      //
      if (i.MaximumAbsoluteTimeAppraiserVariation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteTimeAppraiserVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteTimeAppraiserVariation ();
      }

      // MaximumAbsoluteUserDefinedUnitAppraiserVariation
      //
      for (GageRandRStudyPlanType::MaximumAbsoluteUserDefinedUnitAppraiserVariation_const_iterator
           b (i.MaximumAbsoluteUserDefinedUnitAppraiserVariation ().begin ()), n (i.MaximumAbsoluteUserDefinedUnitAppraiserVariation ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteUserDefinedUnitAppraiserVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // MaximumRelativeEquipmentVariation
      //
      if (i.MaximumRelativeEquipmentVariation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumRelativeEquipmentVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumRelativeEquipmentVariation ();
      }

      // MaximumAbsoluteLinearEquipmentVariation
      //
      if (i.MaximumAbsoluteLinearEquipmentVariation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteLinearEquipmentVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteLinearEquipmentVariation ();
      }

      // MaximumAbsoluteAngularEquipmentVariation
      //
      if (i.MaximumAbsoluteAngularEquipmentVariation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteAngularEquipmentVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteAngularEquipmentVariation ();
      }

      // MaximumAbsoluteAreaEquipmentVariation
      //
      if (i.MaximumAbsoluteAreaEquipmentVariation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteAreaEquipmentVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteAreaEquipmentVariation ();
      }

      // MaximumAbsoluteForceEquipmentVariation
      //
      if (i.MaximumAbsoluteForceEquipmentVariation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteForceEquipmentVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteForceEquipmentVariation ();
      }

      // MaximumAbsoluteMassEquipmentVariation
      //
      if (i.MaximumAbsoluteMassEquipmentVariation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteMassEquipmentVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteMassEquipmentVariation ();
      }

      // MaximumAbsolutePressureEquipmentVariation
      //
      if (i.MaximumAbsolutePressureEquipmentVariation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsolutePressureEquipmentVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsolutePressureEquipmentVariation ();
      }

      // MaximumAbsoluteSpeedEquipmentVariation
      //
      if (i.MaximumAbsoluteSpeedEquipmentVariation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteSpeedEquipmentVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteSpeedEquipmentVariation ();
      }

      // MaximumAbsoluteTemperatureEquipmentVariation
      //
      if (i.MaximumAbsoluteTemperatureEquipmentVariation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteTemperatureEquipmentVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteTemperatureEquipmentVariation ();
      }

      // MaximumAbsoluteTimeEquipmentVariation
      //
      if (i.MaximumAbsoluteTimeEquipmentVariation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteTimeEquipmentVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteTimeEquipmentVariation ();
      }

      // MaximumAbsoluteUserDefinedUnitEquipmentVariation
      //
      for (GageRandRStudyPlanType::MaximumAbsoluteUserDefinedUnitEquipmentVariation_const_iterator
           b (i.MaximumAbsoluteUserDefinedUnitEquipmentVariation ().begin ()), n (i.MaximumAbsoluteUserDefinedUnitEquipmentVariation ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteUserDefinedUnitEquipmentVariation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // MaximumRelativeTotalRandR
      //
      if (i.MaximumRelativeTotalRandR ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumRelativeTotalRandR",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumRelativeTotalRandR ();
      }

      // MaximumAbsoluteLinearTotalRandR
      //
      if (i.MaximumAbsoluteLinearTotalRandR ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteLinearTotalRandR",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteLinearTotalRandR ();
      }

      // MaximumAbsoluteAngularTotalRandR
      //
      if (i.MaximumAbsoluteAngularTotalRandR ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteAngularTotalRandR",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteAngularTotalRandR ();
      }

      // MaximumAbsoluteAreaTotalRandR
      //
      if (i.MaximumAbsoluteAreaTotalRandR ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteAreaTotalRandR",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteAreaTotalRandR ();
      }

      // MaximumAbsoluteForceTotalRandR
      //
      if (i.MaximumAbsoluteForceTotalRandR ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteForceTotalRandR",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteForceTotalRandR ();
      }

      // MaximumAbsoluteMassTotalRandR
      //
      if (i.MaximumAbsoluteMassTotalRandR ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteMassTotalRandR",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteMassTotalRandR ();
      }

      // MaximumAbsolutePressureTotalRandR
      //
      if (i.MaximumAbsolutePressureTotalRandR ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsolutePressureTotalRandR",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsolutePressureTotalRandR ();
      }

      // MaximumAbsoluteSpeedTotalRandR
      //
      if (i.MaximumAbsoluteSpeedTotalRandR ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteSpeedTotalRandR",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteSpeedTotalRandR ();
      }

      // MaximumAbsoluteTemperatureTotalRandR
      //
      if (i.MaximumAbsoluteTemperatureTotalRandR ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteTemperatureTotalRandR",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteTemperatureTotalRandR ();
      }

      // MaximumAbsoluteTimeTotalRandR
      //
      if (i.MaximumAbsoluteTimeTotalRandR ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteTimeTotalRandR",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MaximumAbsoluteTimeTotalRandR ();
      }

      // MaximumAbsoluteUserDefinedUnitTotalRandR
      //
      for (GageRandRStudyPlanType::MaximumAbsoluteUserDefinedUnitTotalRandR_const_iterator
           b (i.MaximumAbsoluteUserDefinedUnitTotalRandR ().begin ()), n (i.MaximumAbsoluteUserDefinedUnitTotalRandR ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MaximumAbsoluteUserDefinedUnitTotalRandR",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GageRandRStudyPlanType >
    _xsd_GageRandRStudyPlanType_type_serializer_init (
      "GageRandRStudyPlanType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const ControlMethodType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // AssignableCauseId
      //
      for (ControlMethodType::AssignableCauseId_const_iterator
           b (i.AssignableCauseId ().begin ()), n (i.AssignableCauseId ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AssignableCauseId",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // NumOutOfTolerance
      //
      if (i.NumOutOfTolerance ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "NumOutOfTolerance",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.NumOutOfTolerance ();
      }

      // CpThreshold
      //
      if (i.CpThreshold ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "CpThreshold",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.CpThreshold ();
      }

      // CpkThreshold
      //
      if (i.CpkThreshold ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "CpkThreshold",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.CpkThreshold ();
      }

      // PpThreshold
      //
      if (i.PpThreshold ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PpThreshold",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.PpThreshold ();
      }

      // PpkThreshold
      //
      if (i.PpkThreshold ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PpkThreshold",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.PpkThreshold ();
      }

      // NumOutOfControl
      //
      if (i.NumOutOfControl ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "NumOutOfControl",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.NumOutOfControl ();
      }

      // TrendGrouping
      //
      if (i.TrendGrouping ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "TrendGrouping",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.TrendGrouping ();
      }

      // SkewGrouping
      //
      if (i.SkewGrouping ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SkewGrouping",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.SkewGrouping ();
      }

      // OneThirdGrouping
      //
      if (i.OneThirdGrouping ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "OneThirdGrouping",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.OneThirdGrouping ();
      }

      // TwoThirdsGrouping
      //
      if (i.TwoThirdsGrouping ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "TwoThirdsGrouping",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.TwoThirdsGrouping ();
      }

      // Oscillation
      //
      if (i.Oscillation ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Oscillation",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Oscillation ();
      }

      // Stratification
      //
      if (i.Stratification ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Stratification",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Stratification ();
      }

      // NumOutOfControlRng
      //
      if (i.NumOutOfControlRng ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "NumOutOfControlRng",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.NumOutOfControlRng ();
      }

      // id
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "id",
            e));

        a << i.id ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const ProductionStudyPlanType& i)
    {
      e << static_cast< const ::xsd::qif2::MultipleProductInstanceStudyPlanBaseType& > (i);

      // SamplingMethod
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SamplingMethod",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.SamplingMethod ();
      }

      // ControlMethod
      //
      for (ProductionStudyPlanType::ControlMethod_const_iterator
           b (i.ControlMethod ().begin ()), n (i.ControlMethod ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ControlMethod",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ProductionStudyPlanType >
    _xsd_ProductionStudyPlanType_type_serializer_init (
      "ProductionStudyPlanType",
      "http://qifstandards.org/xsd/qif2");


    void
    StatisticalStudyPlan (::std::ostream& o,
                          const ::xsd::qif2::StatisticalStudyPlanBaseType& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StatisticalStudyPlan (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    StatisticalStudyPlan (::std::ostream& o,
                          const ::xsd::qif2::StatisticalStudyPlanBaseType& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StatisticalStudyPlan (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    StatisticalStudyPlan (::std::ostream& o,
                          const ::xsd::qif2::StatisticalStudyPlanBaseType& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StatisticalStudyPlan (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    StatisticalStudyPlan (::xercesc::XMLFormatTarget& t,
                          const ::xsd::qif2::StatisticalStudyPlanBaseType& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StatisticalStudyPlan (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    StatisticalStudyPlan (::xercesc::XMLFormatTarget& t,
                          const ::xsd::qif2::StatisticalStudyPlanBaseType& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StatisticalStudyPlan (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    StatisticalStudyPlan (::xercesc::XMLFormatTarget& t,
                          const ::xsd::qif2::StatisticalStudyPlanBaseType& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StatisticalStudyPlan (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    StatisticalStudyPlan (::xercesc::DOMDocument& d,
                          const ::xsd::qif2::StatisticalStudyPlanBaseType& s,
                          ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::StatisticalStudyPlanBaseType) == typeid (s))
      {
        if (n.name () == "StatisticalStudyPlan" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "StatisticalStudyPlan",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "StatisticalStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    StatisticalStudyPlan (const ::xsd::qif2::StatisticalStudyPlanBaseType& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::StatisticalStudyPlanBaseType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "StatisticalStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "StatisticalStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::StatisticalStudyPlan (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::FirstArticleStudyPlanType >
    _xsd_FirstArticleStudyPlan_element_serializer_init (
      "StatisticalStudyPlan",
      "http://qifstandards.org/xsd/qif2",
      "FirstArticleStudyPlan",
      "http://qifstandards.org/xsd/qif2");


    void
    FirstArticleStudyPlan (::std::ostream& o,
                           const ::xsd::qif2::FirstArticleStudyPlanType& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FirstArticleStudyPlan (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    FirstArticleStudyPlan (::std::ostream& o,
                           const ::xsd::qif2::FirstArticleStudyPlanType& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FirstArticleStudyPlan (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FirstArticleStudyPlan (::std::ostream& o,
                           const ::xsd::qif2::FirstArticleStudyPlanType& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FirstArticleStudyPlan (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FirstArticleStudyPlan (::xercesc::XMLFormatTarget& t,
                           const ::xsd::qif2::FirstArticleStudyPlanType& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FirstArticleStudyPlan (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    FirstArticleStudyPlan (::xercesc::XMLFormatTarget& t,
                           const ::xsd::qif2::FirstArticleStudyPlanType& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FirstArticleStudyPlan (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FirstArticleStudyPlan (::xercesc::XMLFormatTarget& t,
                           const ::xsd::qif2::FirstArticleStudyPlanType& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FirstArticleStudyPlan (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FirstArticleStudyPlan (::xercesc::DOMDocument& d,
                           const ::xsd::qif2::FirstArticleStudyPlanType& s,
                           ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::FirstArticleStudyPlanType) == typeid (s))
      {
        if (n.name () == "FirstArticleStudyPlan" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "FirstArticleStudyPlan",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "FirstArticleStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FirstArticleStudyPlan (const ::xsd::qif2::FirstArticleStudyPlanType& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::FirstArticleStudyPlanType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "FirstArticleStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "FirstArticleStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::FirstArticleStudyPlan (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::LinearityStudyPlanType >
    _xsd_LinearityStudyPlan_element_serializer_init (
      "StatisticalStudyPlan",
      "http://qifstandards.org/xsd/qif2",
      "LinearityStudyPlan",
      "http://qifstandards.org/xsd/qif2");


    void
    LinearityStudyPlan (::std::ostream& o,
                        const ::xsd::qif2::LinearityStudyPlanType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LinearityStudyPlan (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    LinearityStudyPlan (::std::ostream& o,
                        const ::xsd::qif2::LinearityStudyPlanType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LinearityStudyPlan (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LinearityStudyPlan (::std::ostream& o,
                        const ::xsd::qif2::LinearityStudyPlanType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LinearityStudyPlan (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LinearityStudyPlan (::xercesc::XMLFormatTarget& t,
                        const ::xsd::qif2::LinearityStudyPlanType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LinearityStudyPlan (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    LinearityStudyPlan (::xercesc::XMLFormatTarget& t,
                        const ::xsd::qif2::LinearityStudyPlanType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LinearityStudyPlan (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LinearityStudyPlan (::xercesc::XMLFormatTarget& t,
                        const ::xsd::qif2::LinearityStudyPlanType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LinearityStudyPlan (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LinearityStudyPlan (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::LinearityStudyPlanType& s,
                        ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::LinearityStudyPlanType) == typeid (s))
      {
        if (n.name () == "LinearityStudyPlan" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "LinearityStudyPlan",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "LinearityStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LinearityStudyPlan (const ::xsd::qif2::LinearityStudyPlanType& s,
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::LinearityStudyPlanType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "LinearityStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "LinearityStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::LinearityStudyPlan (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::SimpleStudyPlanType >
    _xsd_SimpleStudyPlan_element_serializer_init (
      "StatisticalStudyPlan",
      "http://qifstandards.org/xsd/qif2",
      "SimpleStudyPlan",
      "http://qifstandards.org/xsd/qif2");


    void
    SimpleStudyPlan (::std::ostream& o,
                     const ::xsd::qif2::SimpleStudyPlanType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::SimpleStudyPlan (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    SimpleStudyPlan (::std::ostream& o,
                     const ::xsd::qif2::SimpleStudyPlanType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::SimpleStudyPlan (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    SimpleStudyPlan (::std::ostream& o,
                     const ::xsd::qif2::SimpleStudyPlanType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::SimpleStudyPlan (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    SimpleStudyPlan (::xercesc::XMLFormatTarget& t,
                     const ::xsd::qif2::SimpleStudyPlanType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::SimpleStudyPlan (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    SimpleStudyPlan (::xercesc::XMLFormatTarget& t,
                     const ::xsd::qif2::SimpleStudyPlanType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::SimpleStudyPlan (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    SimpleStudyPlan (::xercesc::XMLFormatTarget& t,
                     const ::xsd::qif2::SimpleStudyPlanType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::SimpleStudyPlan (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    SimpleStudyPlan (::xercesc::DOMDocument& d,
                     const ::xsd::qif2::SimpleStudyPlanType& s,
                     ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::SimpleStudyPlanType) == typeid (s))
      {
        if (n.name () == "SimpleStudyPlan" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SimpleStudyPlan",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "SimpleStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SimpleStudyPlan (const ::xsd::qif2::SimpleStudyPlanType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::SimpleStudyPlanType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "SimpleStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "SimpleStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::SimpleStudyPlan (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::BiasStudyPlanType >
    _xsd_BiasStudyPlan_element_serializer_init (
      "StatisticalStudyPlan",
      "http://qifstandards.org/xsd/qif2",
      "BiasStudyPlan",
      "http://qifstandards.org/xsd/qif2");


    void
    BiasStudyPlan (::std::ostream& o,
                   const ::xsd::qif2::BiasStudyPlanType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::BiasStudyPlan (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    BiasStudyPlan (::std::ostream& o,
                   const ::xsd::qif2::BiasStudyPlanType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::BiasStudyPlan (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    BiasStudyPlan (::std::ostream& o,
                   const ::xsd::qif2::BiasStudyPlanType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::BiasStudyPlan (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    BiasStudyPlan (::xercesc::XMLFormatTarget& t,
                   const ::xsd::qif2::BiasStudyPlanType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::BiasStudyPlan (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    BiasStudyPlan (::xercesc::XMLFormatTarget& t,
                   const ::xsd::qif2::BiasStudyPlanType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::BiasStudyPlan (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    BiasStudyPlan (::xercesc::XMLFormatTarget& t,
                   const ::xsd::qif2::BiasStudyPlanType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::BiasStudyPlan (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    BiasStudyPlan (::xercesc::DOMDocument& d,
                   const ::xsd::qif2::BiasStudyPlanType& s,
                   ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::BiasStudyPlanType) == typeid (s))
      {
        if (n.name () == "BiasStudyPlan" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "BiasStudyPlan",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "BiasStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    BiasStudyPlan (const ::xsd::qif2::BiasStudyPlanType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::BiasStudyPlanType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "BiasStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "BiasStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::BiasStudyPlan (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::StabilityStudyPlanType >
    _xsd_StabilityStudyPlan_element_serializer_init (
      "StatisticalStudyPlan",
      "http://qifstandards.org/xsd/qif2",
      "StabilityStudyPlan",
      "http://qifstandards.org/xsd/qif2");


    void
    StabilityStudyPlan (::std::ostream& o,
                        const ::xsd::qif2::StabilityStudyPlanType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StabilityStudyPlan (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    StabilityStudyPlan (::std::ostream& o,
                        const ::xsd::qif2::StabilityStudyPlanType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StabilityStudyPlan (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    StabilityStudyPlan (::std::ostream& o,
                        const ::xsd::qif2::StabilityStudyPlanType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StabilityStudyPlan (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    StabilityStudyPlan (::xercesc::XMLFormatTarget& t,
                        const ::xsd::qif2::StabilityStudyPlanType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StabilityStudyPlan (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    StabilityStudyPlan (::xercesc::XMLFormatTarget& t,
                        const ::xsd::qif2::StabilityStudyPlanType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StabilityStudyPlan (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    StabilityStudyPlan (::xercesc::XMLFormatTarget& t,
                        const ::xsd::qif2::StabilityStudyPlanType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StabilityStudyPlan (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    StabilityStudyPlan (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::StabilityStudyPlanType& s,
                        ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::StabilityStudyPlanType) == typeid (s))
      {
        if (n.name () == "StabilityStudyPlan" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "StabilityStudyPlan",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "StabilityStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    StabilityStudyPlan (const ::xsd::qif2::StabilityStudyPlanType& s,
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::StabilityStudyPlanType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "StabilityStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "StabilityStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::StabilityStudyPlan (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::ProcessDifferenceStudyPlanType >
    _xsd_ProcessDifferenceStudyPlan_element_serializer_init (
      "StatisticalStudyPlan",
      "http://qifstandards.org/xsd/qif2",
      "ProcessDifferenceStudyPlan",
      "http://qifstandards.org/xsd/qif2");


    void
    ProcessDifferenceStudyPlan (::std::ostream& o,
                                const ::xsd::qif2::ProcessDifferenceStudyPlanType& s,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::string& e,
                                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProcessDifferenceStudyPlan (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ProcessDifferenceStudyPlan (::std::ostream& o,
                                const ::xsd::qif2::ProcessDifferenceStudyPlanType& s,
                                ::xml_schema::error_handler& h,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::string& e,
                                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProcessDifferenceStudyPlan (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ProcessDifferenceStudyPlan (::std::ostream& o,
                                const ::xsd::qif2::ProcessDifferenceStudyPlanType& s,
                                ::xercesc::DOMErrorHandler& h,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::string& e,
                                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProcessDifferenceStudyPlan (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ProcessDifferenceStudyPlan (::xercesc::XMLFormatTarget& t,
                                const ::xsd::qif2::ProcessDifferenceStudyPlanType& s,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::string& e,
                                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProcessDifferenceStudyPlan (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ProcessDifferenceStudyPlan (::xercesc::XMLFormatTarget& t,
                                const ::xsd::qif2::ProcessDifferenceStudyPlanType& s,
                                ::xml_schema::error_handler& h,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::string& e,
                                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProcessDifferenceStudyPlan (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ProcessDifferenceStudyPlan (::xercesc::XMLFormatTarget& t,
                                const ::xsd::qif2::ProcessDifferenceStudyPlanType& s,
                                ::xercesc::DOMErrorHandler& h,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::string& e,
                                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProcessDifferenceStudyPlan (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ProcessDifferenceStudyPlan (::xercesc::DOMDocument& d,
                                const ::xsd::qif2::ProcessDifferenceStudyPlanType& s,
                                ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::ProcessDifferenceStudyPlanType) == typeid (s))
      {
        if (n.name () == "ProcessDifferenceStudyPlan" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ProcessDifferenceStudyPlan",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "ProcessDifferenceStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ProcessDifferenceStudyPlan (const ::xsd::qif2::ProcessDifferenceStudyPlanType& s,
                                const ::xml_schema::namespace_infomap& m,
                                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::ProcessDifferenceStudyPlanType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "ProcessDifferenceStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "ProcessDifferenceStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::ProcessDifferenceStudyPlan (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::CapabilityStudyPlanType >
    _xsd_CapabilityStudyPlan_element_serializer_init (
      "StatisticalStudyPlan",
      "http://qifstandards.org/xsd/qif2",
      "CapabilityStudyPlan",
      "http://qifstandards.org/xsd/qif2");


    void
    CapabilityStudyPlan (::std::ostream& o,
                         const ::xsd::qif2::CapabilityStudyPlanType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::CapabilityStudyPlan (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    CapabilityStudyPlan (::std::ostream& o,
                         const ::xsd::qif2::CapabilityStudyPlanType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::CapabilityStudyPlan (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    CapabilityStudyPlan (::std::ostream& o,
                         const ::xsd::qif2::CapabilityStudyPlanType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::CapabilityStudyPlan (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    CapabilityStudyPlan (::xercesc::XMLFormatTarget& t,
                         const ::xsd::qif2::CapabilityStudyPlanType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::CapabilityStudyPlan (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    CapabilityStudyPlan (::xercesc::XMLFormatTarget& t,
                         const ::xsd::qif2::CapabilityStudyPlanType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::CapabilityStudyPlan (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    CapabilityStudyPlan (::xercesc::XMLFormatTarget& t,
                         const ::xsd::qif2::CapabilityStudyPlanType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::CapabilityStudyPlan (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    CapabilityStudyPlan (::xercesc::DOMDocument& d,
                         const ::xsd::qif2::CapabilityStudyPlanType& s,
                         ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::CapabilityStudyPlanType) == typeid (s))
      {
        if (n.name () == "CapabilityStudyPlan" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "CapabilityStudyPlan",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "CapabilityStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CapabilityStudyPlan (const ::xsd::qif2::CapabilityStudyPlanType& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::CapabilityStudyPlanType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "CapabilityStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "CapabilityStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::CapabilityStudyPlan (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::GageRandRStudyPlanType >
    _xsd_GageRandRStudyPlan_element_serializer_init (
      "StatisticalStudyPlan",
      "http://qifstandards.org/xsd/qif2",
      "GageRandRStudyPlan",
      "http://qifstandards.org/xsd/qif2");


    void
    GageRandRStudyPlan (::std::ostream& o,
                        const ::xsd::qif2::GageRandRStudyPlanType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::GageRandRStudyPlan (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    GageRandRStudyPlan (::std::ostream& o,
                        const ::xsd::qif2::GageRandRStudyPlanType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::GageRandRStudyPlan (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    GageRandRStudyPlan (::std::ostream& o,
                        const ::xsd::qif2::GageRandRStudyPlanType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::GageRandRStudyPlan (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    GageRandRStudyPlan (::xercesc::XMLFormatTarget& t,
                        const ::xsd::qif2::GageRandRStudyPlanType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::GageRandRStudyPlan (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    GageRandRStudyPlan (::xercesc::XMLFormatTarget& t,
                        const ::xsd::qif2::GageRandRStudyPlanType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::GageRandRStudyPlan (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    GageRandRStudyPlan (::xercesc::XMLFormatTarget& t,
                        const ::xsd::qif2::GageRandRStudyPlanType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::GageRandRStudyPlan (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    GageRandRStudyPlan (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::GageRandRStudyPlanType& s,
                        ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::GageRandRStudyPlanType) == typeid (s))
      {
        if (n.name () == "GageRandRStudyPlan" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "GageRandRStudyPlan",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "GageRandRStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    GageRandRStudyPlan (const ::xsd::qif2::GageRandRStudyPlanType& s,
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::GageRandRStudyPlanType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "GageRandRStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "GageRandRStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::GageRandRStudyPlan (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::ProductionStudyPlanType >
    _xsd_ProductionStudyPlan_element_serializer_init (
      "StatisticalStudyPlan",
      "http://qifstandards.org/xsd/qif2",
      "ProductionStudyPlan",
      "http://qifstandards.org/xsd/qif2");


    void
    ProductionStudyPlan (::std::ostream& o,
                         const ::xsd::qif2::ProductionStudyPlanType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProductionStudyPlan (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ProductionStudyPlan (::std::ostream& o,
                         const ::xsd::qif2::ProductionStudyPlanType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProductionStudyPlan (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ProductionStudyPlan (::std::ostream& o,
                         const ::xsd::qif2::ProductionStudyPlanType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProductionStudyPlan (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ProductionStudyPlan (::xercesc::XMLFormatTarget& t,
                         const ::xsd::qif2::ProductionStudyPlanType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProductionStudyPlan (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ProductionStudyPlan (::xercesc::XMLFormatTarget& t,
                         const ::xsd::qif2::ProductionStudyPlanType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProductionStudyPlan (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ProductionStudyPlan (::xercesc::XMLFormatTarget& t,
                         const ::xsd::qif2::ProductionStudyPlanType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProductionStudyPlan (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ProductionStudyPlan (::xercesc::DOMDocument& d,
                         const ::xsd::qif2::ProductionStudyPlanType& s,
                         ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::ProductionStudyPlanType) == typeid (s))
      {
        if (n.name () == "ProductionStudyPlan" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ProductionStudyPlan",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "ProductionStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ProductionStudyPlan (const ::xsd::qif2::ProductionStudyPlanType& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::ProductionStudyPlanType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "ProductionStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "ProductionStudyPlan",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::ProductionStudyPlan (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const StatisticalStudyResultsBaseType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Attributes
      //
      if (i.Attributes ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Attributes",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Attributes ();
      }

      // ThisStatisticalStudyResultsInstanceQPId
      //
      if (i.ThisStatisticalStudyResultsInstanceQPId ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ThisStatisticalStudyResultsInstanceQPId",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ThisStatisticalStudyResultsInstanceQPId ();
      }

      // Status
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Status",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.Status ();
      }

      // StudyIssue
      //
      for (StatisticalStudyResultsBaseType::StudyIssue_const_iterator
           b (i.StudyIssue ().begin ()), n (i.StudyIssue ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "StudyIssue",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // InspectionTraceability
      //
      if (i.InspectionTraceability ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InspectionTraceability",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.InspectionTraceability ();
      }

      // Name
      //
      if (i.Name ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Name",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Name ();
      }

      // Description
      //
      if (i.Description ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Description",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Description ();
      }

      // StudyId
      //
      if (i.StudyId ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "StudyId",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.StudyId ();
      }

      // ResultsId
      //
      for (StatisticalStudyResultsBaseType::ResultsId_const_iterator
           b (i.ResultsId ().begin ()), n (i.ResultsId ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ResultsId",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // ResultsQPId
      //
      for (StatisticalStudyResultsBaseType::ResultsQPId_const_iterator
           b (i.ResultsQPId ().begin ()), n (i.ResultsQPId ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ResultsQPId",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // ResultsFile
      //
      for (StatisticalStudyResultsBaseType::ResultsFile_const_iterator
           b (i.ResultsFile ().begin ()), n (i.ResultsFile ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ResultsFile",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // AverageFeature
      //
      for (StatisticalStudyResultsBaseType::AverageFeature_const_iterator
           b (i.AverageFeature ().begin ()), n (i.AverageFeature ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AverageFeature",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // CharacteristicsStats
      //
      for (StatisticalStudyResultsBaseType::CharacteristicsStats_const_iterator
           b (i.CharacteristicsStats ().begin ()), n (i.CharacteristicsStats ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "CharacteristicsStats",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // LinearStatsSummary
      //
      for (StatisticalStudyResultsBaseType::LinearStatsSummary_const_iterator
           b (i.LinearStatsSummary ().begin ()), n (i.LinearStatsSummary ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "LinearStatsSummary",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // AngularStatsSummary
      //
      for (StatisticalStudyResultsBaseType::AngularStatsSummary_const_iterator
           b (i.AngularStatsSummary ().begin ()), n (i.AngularStatsSummary ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AngularStatsSummary",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // AreaStatsSummary
      //
      for (StatisticalStudyResultsBaseType::AreaStatsSummary_const_iterator
           b (i.AreaStatsSummary ().begin ()), n (i.AreaStatsSummary ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AreaStatsSummary",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // ForceStatsSummary
      //
      for (StatisticalStudyResultsBaseType::ForceStatsSummary_const_iterator
           b (i.ForceStatsSummary ().begin ()), n (i.ForceStatsSummary ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ForceStatsSummary",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // MassStatsSummary
      //
      for (StatisticalStudyResultsBaseType::MassStatsSummary_const_iterator
           b (i.MassStatsSummary ().begin ()), n (i.MassStatsSummary ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MassStatsSummary",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // PressureStatsSummary
      //
      for (StatisticalStudyResultsBaseType::PressureStatsSummary_const_iterator
           b (i.PressureStatsSummary ().begin ()), n (i.PressureStatsSummary ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PressureStatsSummary",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // SpeedStatsSummary
      //
      for (StatisticalStudyResultsBaseType::SpeedStatsSummary_const_iterator
           b (i.SpeedStatsSummary ().begin ()), n (i.SpeedStatsSummary ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SpeedStatsSummary",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // TemperatureStatsSummary
      //
      for (StatisticalStudyResultsBaseType::TemperatureStatsSummary_const_iterator
           b (i.TemperatureStatsSummary ().begin ()), n (i.TemperatureStatsSummary ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "TemperatureStatsSummary",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // TimeStatsSummary
      //
      for (StatisticalStudyResultsBaseType::TimeStatsSummary_const_iterator
           b (i.TimeStatsSummary ().begin ()), n (i.TimeStatsSummary ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "TimeStatsSummary",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // UserDefinedUnitStatsSummary
      //
      for (StatisticalStudyResultsBaseType::UserDefinedUnitStatsSummary_const_iterator
           b (i.UserDefinedUnitStatsSummary ().begin ()), n (i.UserDefinedUnitStatsSummary ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "UserDefinedUnitStatsSummary",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // StatsSummary
      //
      for (StatisticalStudyResultsBaseType::StatsSummary_const_iterator
           b (i.StatsSummary ().begin ()), n (i.StatsSummary ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "StatsSummary",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // id
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "id",
            e));

        a << i.id ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, StatisticalStudyResultsBaseType >
    _xsd_StatisticalStudyResultsBaseType_type_serializer_init (
      "StatisticalStudyResultsBaseType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const LinearityStudyResultsType& i)
    {
      e << static_cast< const ::xsd::qif2::StatisticalStudyResultsBaseType& > (i);

      // SampleSize
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SampleSize",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.SampleSize ();
      }

      // MeasurementDeviceIds
      //
      if (i.MeasurementDeviceIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MeasurementDeviceIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MeasurementDeviceIds ();
      }

      // GoodnessOfFit
      //
      if (i.GoodnessOfFit ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "GoodnessOfFit",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.GoodnessOfFit ();
      }

      // LinearAbsoluteLinearity
      //
      if (i.LinearAbsoluteLinearity ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "LinearAbsoluteLinearity",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.LinearAbsoluteLinearity ();
      }

      // AngularAbsoluteLinearity
      //
      if (i.AngularAbsoluteLinearity ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AngularAbsoluteLinearity",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.AngularAbsoluteLinearity ();
      }

      // AreaAbsoluteLinearity
      //
      if (i.AreaAbsoluteLinearity ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AreaAbsoluteLinearity",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.AreaAbsoluteLinearity ();
      }

      // ForceAbsoluteLinearity
      //
      if (i.ForceAbsoluteLinearity ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ForceAbsoluteLinearity",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ForceAbsoluteLinearity ();
      }

      // MassAbsoluteLinearity
      //
      if (i.MassAbsoluteLinearity ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MassAbsoluteLinearity",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MassAbsoluteLinearity ();
      }

      // PressureAbsoluteLinearity
      //
      if (i.PressureAbsoluteLinearity ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PressureAbsoluteLinearity",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.PressureAbsoluteLinearity ();
      }

      // SpeedAbsoluteLinearity
      //
      if (i.SpeedAbsoluteLinearity ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SpeedAbsoluteLinearity",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.SpeedAbsoluteLinearity ();
      }

      // TemperatureAbsoluteLinearity
      //
      if (i.TemperatureAbsoluteLinearity ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "TemperatureAbsoluteLinearity",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.TemperatureAbsoluteLinearity ();
      }

      // TimeAbsoluteLinearity
      //
      if (i.TimeAbsoluteLinearity ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "TimeAbsoluteLinearity",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.TimeAbsoluteLinearity ();
      }

      // UserDefinedUnitAbsoluteLinearity
      //
      if (i.UserDefinedUnitAbsoluteLinearity ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "UserDefinedUnitAbsoluteLinearity",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.UserDefinedUnitAbsoluteLinearity ();
      }

      // RelativeLinearity
      //
      if (i.RelativeLinearity ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "RelativeLinearity",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.RelativeLinearity ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LinearityStudyResultsType >
    _xsd_LinearityStudyResultsType_type_serializer_init (
      "LinearityStudyResultsType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const StabilityStudyResultsType& i)
    {
      e << static_cast< const ::xsd::qif2::StatisticalStudyResultsBaseType& > (i);

      // SampleSize
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SampleSize",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.SampleSize ();
      }

      // MeasurementDeviceIds
      //
      if (i.MeasurementDeviceIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MeasurementDeviceIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MeasurementDeviceIds ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, StabilityStudyResultsType >
    _xsd_StabilityStudyResultsType_type_serializer_init (
      "StabilityStudyResultsType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const BiasStudyResultsType& i)
    {
      e << static_cast< const ::xsd::qif2::StatisticalStudyResultsBaseType& > (i);

      // SampleSize
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SampleSize",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.SampleSize ();
      }

      // MeasurementDeviceIds
      //
      if (i.MeasurementDeviceIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MeasurementDeviceIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MeasurementDeviceIds ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BiasStudyResultsType >
    _xsd_BiasStudyResultsType_type_serializer_init (
      "BiasStudyResultsType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const FirstArticleStudyResultsType& i)
    {
      e << static_cast< const ::xsd::qif2::StatisticalStudyResultsBaseType& > (i);

      // InSpecRatio
      //
      if (i.InSpecRatio ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InSpecRatio",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << ::xml_schema::as_decimal(*i.InSpecRatio ());
      }

      // LinearAbsoluteMaximum
      //
      if (i.LinearAbsoluteMaximum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "LinearAbsoluteMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.LinearAbsoluteMaximum ();
      }

      // AngularAbsoluteMaximum
      //
      if (i.AngularAbsoluteMaximum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AngularAbsoluteMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.AngularAbsoluteMaximum ();
      }

      // AreaAbsoluteMaximum
      //
      if (i.AreaAbsoluteMaximum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AreaAbsoluteMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.AreaAbsoluteMaximum ();
      }

      // ForceAbsoluteMaximum
      //
      if (i.ForceAbsoluteMaximum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ForceAbsoluteMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ForceAbsoluteMaximum ();
      }

      // MassAbsoluteMaximum
      //
      if (i.MassAbsoluteMaximum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MassAbsoluteMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MassAbsoluteMaximum ();
      }

      // PressureAbsoluteMaximum
      //
      if (i.PressureAbsoluteMaximum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PressureAbsoluteMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.PressureAbsoluteMaximum ();
      }

      // SpeedAbsoluteMaximum
      //
      if (i.SpeedAbsoluteMaximum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SpeedAbsoluteMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.SpeedAbsoluteMaximum ();
      }

      // TemperatureAbsoluteMaximum
      //
      if (i.TemperatureAbsoluteMaximum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "TemperatureAbsoluteMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.TemperatureAbsoluteMaximum ();
      }

      // TimeAbsoluteMaximum
      //
      if (i.TimeAbsoluteMaximum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "TimeAbsoluteMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.TimeAbsoluteMaximum ();
      }

      // UserDefinedUnitAbsoluteMaximum
      //
      for (FirstArticleStudyResultsType::UserDefinedUnitAbsoluteMaximum_const_iterator
           b (i.UserDefinedUnitAbsoluteMaximum ().begin ()), n (i.UserDefinedUnitAbsoluteMaximum ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "UserDefinedUnitAbsoluteMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // RelativeMaximum
      //
      if (i.RelativeMaximum ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "RelativeMaximum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.RelativeMaximum ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FirstArticleStudyResultsType >
    _xsd_FirstArticleStudyResultsType_type_serializer_init (
      "FirstArticleStudyResultsType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const ProcessDifferenceStudyResultsType& i)
    {
      e << static_cast< const ::xsd::qif2::StatisticalStudyResultsBaseType& > (i);

      // NumberOfSamples
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "NumberOfSamples",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.NumberOfSamples ();
      }

      // SubgroupSize
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SubgroupSize",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.SubgroupSize ();
      }

      // ManufacturingProcessId
      //
      if (i.ManufacturingProcessId ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ManufacturingProcessId",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ManufacturingProcessId ();
      }

      // LinearAbsoluteDifference
      //
      if (i.LinearAbsoluteDifference ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "LinearAbsoluteDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.LinearAbsoluteDifference ();
      }

      // AngularAbsoluteDifference
      //
      if (i.AngularAbsoluteDifference ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AngularAbsoluteDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.AngularAbsoluteDifference ();
      }

      // AreaAbsoluteDifference
      //
      if (i.AreaAbsoluteDifference ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AreaAbsoluteDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.AreaAbsoluteDifference ();
      }

      // ForceAbsoluteDifference
      //
      if (i.ForceAbsoluteDifference ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ForceAbsoluteDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.ForceAbsoluteDifference ();
      }

      // MassAbsoluteDifference
      //
      if (i.MassAbsoluteDifference ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MassAbsoluteDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MassAbsoluteDifference ();
      }

      // PressureAbsoluteDifference
      //
      if (i.PressureAbsoluteDifference ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PressureAbsoluteDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.PressureAbsoluteDifference ();
      }

      // SpeedAbsoluteDifference
      //
      if (i.SpeedAbsoluteDifference ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SpeedAbsoluteDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.SpeedAbsoluteDifference ();
      }

      // TemperatureAbsoluteDifference
      //
      if (i.TemperatureAbsoluteDifference ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "TemperatureAbsoluteDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.TemperatureAbsoluteDifference ();
      }

      // TimeAbsoluteDifference
      //
      if (i.TimeAbsoluteDifference ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "TimeAbsoluteDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.TimeAbsoluteDifference ();
      }

      // UserDefinedUnitAbsoluteDifference
      //
      for (ProcessDifferenceStudyResultsType::UserDefinedUnitAbsoluteDifference_const_iterator
           b (i.UserDefinedUnitAbsoluteDifference ().begin ()), n (i.UserDefinedUnitAbsoluteDifference ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "UserDefinedUnitAbsoluteDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // RelativeDifference
      //
      if (i.RelativeDifference ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "RelativeDifference",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.RelativeDifference ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ProcessDifferenceStudyResultsType >
    _xsd_ProcessDifferenceStudyResultsType_type_serializer_init (
      "ProcessDifferenceStudyResultsType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const MultipleProductInstanceStudyResultsBaseType& i)
    {
      e << static_cast< const ::xsd::qif2::StatisticalStudyResultsBaseType& > (i);

      // NumberOfSamples
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "NumberOfSamples",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.NumberOfSamples ();
      }

      // SubgroupSize
      //
      if (i.SubgroupSize ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SubgroupSize",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.SubgroupSize ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MultipleProductInstanceStudyResultsBaseType >
    _xsd_MultipleProductInstanceStudyResultsBaseType_type_serializer_init (
      "MultipleProductInstanceStudyResultsBaseType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const SimpleStudyResultsType& i)
    {
      e << static_cast< const ::xsd::qif2::MultipleProductInstanceStudyResultsBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SimpleStudyResultsType >
    _xsd_SimpleStudyResultsType_type_serializer_init (
      "SimpleStudyResultsType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const CapabilityStudyResultsType& i)
    {
      e << static_cast< const ::xsd::qif2::MultipleProductInstanceStudyResultsBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CapabilityStudyResultsType >
    _xsd_CapabilityStudyResultsType_type_serializer_init (
      "CapabilityStudyResultsType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const GageRandRStudyResultsType& i)
    {
      e << static_cast< const ::xsd::qif2::StatisticalStudyResultsBaseType& > (i);

      // MeasurementDeviceIds
      //
      if (i.MeasurementDeviceIds ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MeasurementDeviceIds",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.MeasurementDeviceIds ();
      }

      // NumberOfAppraisers
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "NumberOfAppraisers",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.NumberOfAppraisers ();
      }

      // NumberOfParts
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "NumberOfParts",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.NumberOfParts ();
      }

      // NumberOfTrials
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "NumberOfTrials",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.NumberOfTrials ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GageRandRStudyResultsType >
    _xsd_GageRandRStudyResultsType_type_serializer_init (
      "GageRandRStudyResultsType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const ProductionStudyResultsType& i)
    {
      e << static_cast< const ::xsd::qif2::MultipleProductInstanceStudyResultsBaseType& > (i);

      // ControlIssueDetails
      //
      for (ProductionStudyResultsType::ControlIssueDetails_const_iterator
           b (i.ControlIssueDetails ().begin ()), n (i.ControlIssueDetails ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ControlIssueDetails",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ProductionStudyResultsType >
    _xsd_ProductionStudyResultsType_type_serializer_init (
      "ProductionStudyResultsType",
      "http://qifstandards.org/xsd/qif2");


    void
    StatisticalStudyResults (::std::ostream& o,
                             const ::xsd::qif2::StatisticalStudyResultsBaseType& s,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StatisticalStudyResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    StatisticalStudyResults (::std::ostream& o,
                             const ::xsd::qif2::StatisticalStudyResultsBaseType& s,
                             ::xml_schema::error_handler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StatisticalStudyResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    StatisticalStudyResults (::std::ostream& o,
                             const ::xsd::qif2::StatisticalStudyResultsBaseType& s,
                             ::xercesc::DOMErrorHandler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StatisticalStudyResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    StatisticalStudyResults (::xercesc::XMLFormatTarget& t,
                             const ::xsd::qif2::StatisticalStudyResultsBaseType& s,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StatisticalStudyResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    StatisticalStudyResults (::xercesc::XMLFormatTarget& t,
                             const ::xsd::qif2::StatisticalStudyResultsBaseType& s,
                             ::xml_schema::error_handler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StatisticalStudyResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    StatisticalStudyResults (::xercesc::XMLFormatTarget& t,
                             const ::xsd::qif2::StatisticalStudyResultsBaseType& s,
                             ::xercesc::DOMErrorHandler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StatisticalStudyResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    StatisticalStudyResults (::xercesc::DOMDocument& d,
                             const ::xsd::qif2::StatisticalStudyResultsBaseType& s,
                             ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::StatisticalStudyResultsBaseType) == typeid (s))
      {
        if (n.name () == "StatisticalStudyResults" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "StatisticalStudyResults",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "StatisticalStudyResults",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    StatisticalStudyResults (const ::xsd::qif2::StatisticalStudyResultsBaseType& s,
                             const ::xml_schema::namespace_infomap& m,
                             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::StatisticalStudyResultsBaseType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "StatisticalStudyResults",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "StatisticalStudyResults",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::StatisticalStudyResults (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::FirstArticleStudyResultsType >
    _xsd_FirstArticleStudyResults_element_serializer_init (
      "StatisticalStudyResults",
      "http://qifstandards.org/xsd/qif2",
      "FirstArticleStudyResults",
      "http://qifstandards.org/xsd/qif2");


    void
    FirstArticleStudyResults (::std::ostream& o,
                              const ::xsd::qif2::FirstArticleStudyResultsType& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FirstArticleStudyResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    FirstArticleStudyResults (::std::ostream& o,
                              const ::xsd::qif2::FirstArticleStudyResultsType& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FirstArticleStudyResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FirstArticleStudyResults (::std::ostream& o,
                              const ::xsd::qif2::FirstArticleStudyResultsType& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FirstArticleStudyResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FirstArticleStudyResults (::xercesc::XMLFormatTarget& t,
                              const ::xsd::qif2::FirstArticleStudyResultsType& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FirstArticleStudyResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    FirstArticleStudyResults (::xercesc::XMLFormatTarget& t,
                              const ::xsd::qif2::FirstArticleStudyResultsType& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FirstArticleStudyResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FirstArticleStudyResults (::xercesc::XMLFormatTarget& t,
                              const ::xsd::qif2::FirstArticleStudyResultsType& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::FirstArticleStudyResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    FirstArticleStudyResults (::xercesc::DOMDocument& d,
                              const ::xsd::qif2::FirstArticleStudyResultsType& s,
                              ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::FirstArticleStudyResultsType) == typeid (s))
      {
        if (n.name () == "FirstArticleStudyResults" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "FirstArticleStudyResults",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "FirstArticleStudyResults",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    FirstArticleStudyResults (const ::xsd::qif2::FirstArticleStudyResultsType& s,
                              const ::xml_schema::namespace_infomap& m,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::FirstArticleStudyResultsType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "FirstArticleStudyResults",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "FirstArticleStudyResults",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::FirstArticleStudyResults (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::LinearityStudyResultsType >
    _xsd_LinearityStudyResults_element_serializer_init (
      "StatisticalStudyResults",
      "http://qifstandards.org/xsd/qif2",
      "LinearityStudyResults",
      "http://qifstandards.org/xsd/qif2");


    void
    LinearityStudyResults (::std::ostream& o,
                           const ::xsd::qif2::LinearityStudyResultsType& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LinearityStudyResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    LinearityStudyResults (::std::ostream& o,
                           const ::xsd::qif2::LinearityStudyResultsType& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LinearityStudyResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LinearityStudyResults (::std::ostream& o,
                           const ::xsd::qif2::LinearityStudyResultsType& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LinearityStudyResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LinearityStudyResults (::xercesc::XMLFormatTarget& t,
                           const ::xsd::qif2::LinearityStudyResultsType& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LinearityStudyResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    LinearityStudyResults (::xercesc::XMLFormatTarget& t,
                           const ::xsd::qif2::LinearityStudyResultsType& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LinearityStudyResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LinearityStudyResults (::xercesc::XMLFormatTarget& t,
                           const ::xsd::qif2::LinearityStudyResultsType& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::LinearityStudyResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    LinearityStudyResults (::xercesc::DOMDocument& d,
                           const ::xsd::qif2::LinearityStudyResultsType& s,
                           ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::LinearityStudyResultsType) == typeid (s))
      {
        if (n.name () == "LinearityStudyResults" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "LinearityStudyResults",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "LinearityStudyResults",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LinearityStudyResults (const ::xsd::qif2::LinearityStudyResultsType& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::LinearityStudyResultsType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "LinearityStudyResults",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "LinearityStudyResults",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::LinearityStudyResults (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::SimpleStudyResultsType >
    _xsd_SimpleStudyResults_element_serializer_init (
      "StatisticalStudyResults",
      "http://qifstandards.org/xsd/qif2",
      "SimpleStudyResults",
      "http://qifstandards.org/xsd/qif2");


    void
    SimpleStudyResults (::std::ostream& o,
                        const ::xsd::qif2::SimpleStudyResultsType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::SimpleStudyResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    SimpleStudyResults (::std::ostream& o,
                        const ::xsd::qif2::SimpleStudyResultsType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::SimpleStudyResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    SimpleStudyResults (::std::ostream& o,
                        const ::xsd::qif2::SimpleStudyResultsType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::SimpleStudyResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    SimpleStudyResults (::xercesc::XMLFormatTarget& t,
                        const ::xsd::qif2::SimpleStudyResultsType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::SimpleStudyResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    SimpleStudyResults (::xercesc::XMLFormatTarget& t,
                        const ::xsd::qif2::SimpleStudyResultsType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::SimpleStudyResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    SimpleStudyResults (::xercesc::XMLFormatTarget& t,
                        const ::xsd::qif2::SimpleStudyResultsType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::SimpleStudyResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    SimpleStudyResults (::xercesc::DOMDocument& d,
                        const ::xsd::qif2::SimpleStudyResultsType& s,
                        ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::SimpleStudyResultsType) == typeid (s))
      {
        if (n.name () == "SimpleStudyResults" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SimpleStudyResults",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "SimpleStudyResults",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SimpleStudyResults (const ::xsd::qif2::SimpleStudyResultsType& s,
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::SimpleStudyResultsType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "SimpleStudyResults",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "SimpleStudyResults",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::SimpleStudyResults (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::BiasStudyResultsType >
    _xsd_BiasStudyResults_element_serializer_init (
      "StatisticalStudyResults",
      "http://qifstandards.org/xsd/qif2",
      "BiasStudyResults",
      "http://qifstandards.org/xsd/qif2");


    void
    BiasStudyResults (::std::ostream& o,
                      const ::xsd::qif2::BiasStudyResultsType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::BiasStudyResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    BiasStudyResults (::std::ostream& o,
                      const ::xsd::qif2::BiasStudyResultsType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::BiasStudyResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    BiasStudyResults (::std::ostream& o,
                      const ::xsd::qif2::BiasStudyResultsType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::BiasStudyResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    BiasStudyResults (::xercesc::XMLFormatTarget& t,
                      const ::xsd::qif2::BiasStudyResultsType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::BiasStudyResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    BiasStudyResults (::xercesc::XMLFormatTarget& t,
                      const ::xsd::qif2::BiasStudyResultsType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::BiasStudyResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    BiasStudyResults (::xercesc::XMLFormatTarget& t,
                      const ::xsd::qif2::BiasStudyResultsType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::BiasStudyResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    BiasStudyResults (::xercesc::DOMDocument& d,
                      const ::xsd::qif2::BiasStudyResultsType& s,
                      ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::BiasStudyResultsType) == typeid (s))
      {
        if (n.name () == "BiasStudyResults" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "BiasStudyResults",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "BiasStudyResults",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    BiasStudyResults (const ::xsd::qif2::BiasStudyResultsType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::BiasStudyResultsType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "BiasStudyResults",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "BiasStudyResults",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::BiasStudyResults (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::StabilityStudyResultsType >
    _xsd_StabilityStudyResults_element_serializer_init (
      "StatisticalStudyResults",
      "http://qifstandards.org/xsd/qif2",
      "StabilityStudyResults",
      "http://qifstandards.org/xsd/qif2");


    void
    StabilityStudyResults (::std::ostream& o,
                           const ::xsd::qif2::StabilityStudyResultsType& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StabilityStudyResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    StabilityStudyResults (::std::ostream& o,
                           const ::xsd::qif2::StabilityStudyResultsType& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StabilityStudyResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    StabilityStudyResults (::std::ostream& o,
                           const ::xsd::qif2::StabilityStudyResultsType& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StabilityStudyResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    StabilityStudyResults (::xercesc::XMLFormatTarget& t,
                           const ::xsd::qif2::StabilityStudyResultsType& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StabilityStudyResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    StabilityStudyResults (::xercesc::XMLFormatTarget& t,
                           const ::xsd::qif2::StabilityStudyResultsType& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StabilityStudyResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    StabilityStudyResults (::xercesc::XMLFormatTarget& t,
                           const ::xsd::qif2::StabilityStudyResultsType& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::StabilityStudyResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    StabilityStudyResults (::xercesc::DOMDocument& d,
                           const ::xsd::qif2::StabilityStudyResultsType& s,
                           ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::StabilityStudyResultsType) == typeid (s))
      {
        if (n.name () == "StabilityStudyResults" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "StabilityStudyResults",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "StabilityStudyResults",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    StabilityStudyResults (const ::xsd::qif2::StabilityStudyResultsType& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::StabilityStudyResultsType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "StabilityStudyResults",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "StabilityStudyResults",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::StabilityStudyResults (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::CapabilityStudyResultsType >
    _xsd_CapabilityStudyResults_element_serializer_init (
      "StatisticalStudyResults",
      "http://qifstandards.org/xsd/qif2",
      "CapabilityStudyResults",
      "http://qifstandards.org/xsd/qif2");


    void
    CapabilityStudyResults (::std::ostream& o,
                            const ::xsd::qif2::CapabilityStudyResultsType& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::CapabilityStudyResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    CapabilityStudyResults (::std::ostream& o,
                            const ::xsd::qif2::CapabilityStudyResultsType& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::CapabilityStudyResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    CapabilityStudyResults (::std::ostream& o,
                            const ::xsd::qif2::CapabilityStudyResultsType& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::CapabilityStudyResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    CapabilityStudyResults (::xercesc::XMLFormatTarget& t,
                            const ::xsd::qif2::CapabilityStudyResultsType& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::CapabilityStudyResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    CapabilityStudyResults (::xercesc::XMLFormatTarget& t,
                            const ::xsd::qif2::CapabilityStudyResultsType& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::CapabilityStudyResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    CapabilityStudyResults (::xercesc::XMLFormatTarget& t,
                            const ::xsd::qif2::CapabilityStudyResultsType& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::CapabilityStudyResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    CapabilityStudyResults (::xercesc::DOMDocument& d,
                            const ::xsd::qif2::CapabilityStudyResultsType& s,
                            ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::CapabilityStudyResultsType) == typeid (s))
      {
        if (n.name () == "CapabilityStudyResults" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "CapabilityStudyResults",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "CapabilityStudyResults",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CapabilityStudyResults (const ::xsd::qif2::CapabilityStudyResultsType& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::CapabilityStudyResultsType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "CapabilityStudyResults",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "CapabilityStudyResults",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::CapabilityStudyResults (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::ProcessDifferenceStudyResultsType >
    _xsd_ProcessDifferenceStudyResults_element_serializer_init (
      "StatisticalStudyResults",
      "http://qifstandards.org/xsd/qif2",
      "ProcessDifferenceStudyResults",
      "http://qifstandards.org/xsd/qif2");


    void
    ProcessDifferenceStudyResults (::std::ostream& o,
                                   const ::xsd::qif2::ProcessDifferenceStudyResultsType& s,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::string& e,
                                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProcessDifferenceStudyResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ProcessDifferenceStudyResults (::std::ostream& o,
                                   const ::xsd::qif2::ProcessDifferenceStudyResultsType& s,
                                   ::xml_schema::error_handler& h,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::string& e,
                                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProcessDifferenceStudyResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ProcessDifferenceStudyResults (::std::ostream& o,
                                   const ::xsd::qif2::ProcessDifferenceStudyResultsType& s,
                                   ::xercesc::DOMErrorHandler& h,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::string& e,
                                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProcessDifferenceStudyResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ProcessDifferenceStudyResults (::xercesc::XMLFormatTarget& t,
                                   const ::xsd::qif2::ProcessDifferenceStudyResultsType& s,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::string& e,
                                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProcessDifferenceStudyResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ProcessDifferenceStudyResults (::xercesc::XMLFormatTarget& t,
                                   const ::xsd::qif2::ProcessDifferenceStudyResultsType& s,
                                   ::xml_schema::error_handler& h,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::string& e,
                                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProcessDifferenceStudyResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ProcessDifferenceStudyResults (::xercesc::XMLFormatTarget& t,
                                   const ::xsd::qif2::ProcessDifferenceStudyResultsType& s,
                                   ::xercesc::DOMErrorHandler& h,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::string& e,
                                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProcessDifferenceStudyResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ProcessDifferenceStudyResults (::xercesc::DOMDocument& d,
                                   const ::xsd::qif2::ProcessDifferenceStudyResultsType& s,
                                   ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::ProcessDifferenceStudyResultsType) == typeid (s))
      {
        if (n.name () == "ProcessDifferenceStudyResults" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ProcessDifferenceStudyResults",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "ProcessDifferenceStudyResults",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ProcessDifferenceStudyResults (const ::xsd::qif2::ProcessDifferenceStudyResultsType& s,
                                   const ::xml_schema::namespace_infomap& m,
                                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::ProcessDifferenceStudyResultsType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "ProcessDifferenceStudyResults",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "ProcessDifferenceStudyResults",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::ProcessDifferenceStudyResults (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::GageRandRStudyResultsType >
    _xsd_GageRandRStudyResults_element_serializer_init (
      "StatisticalStudyResults",
      "http://qifstandards.org/xsd/qif2",
      "GageRandRStudyResults",
      "http://qifstandards.org/xsd/qif2");


    void
    GageRandRStudyResults (::std::ostream& o,
                           const ::xsd::qif2::GageRandRStudyResultsType& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::GageRandRStudyResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    GageRandRStudyResults (::std::ostream& o,
                           const ::xsd::qif2::GageRandRStudyResultsType& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::GageRandRStudyResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    GageRandRStudyResults (::std::ostream& o,
                           const ::xsd::qif2::GageRandRStudyResultsType& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::GageRandRStudyResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    GageRandRStudyResults (::xercesc::XMLFormatTarget& t,
                           const ::xsd::qif2::GageRandRStudyResultsType& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::GageRandRStudyResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    GageRandRStudyResults (::xercesc::XMLFormatTarget& t,
                           const ::xsd::qif2::GageRandRStudyResultsType& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::GageRandRStudyResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    GageRandRStudyResults (::xercesc::XMLFormatTarget& t,
                           const ::xsd::qif2::GageRandRStudyResultsType& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::GageRandRStudyResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    GageRandRStudyResults (::xercesc::DOMDocument& d,
                           const ::xsd::qif2::GageRandRStudyResultsType& s,
                           ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::GageRandRStudyResultsType) == typeid (s))
      {
        if (n.name () == "GageRandRStudyResults" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "GageRandRStudyResults",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "GageRandRStudyResults",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    GageRandRStudyResults (const ::xsd::qif2::GageRandRStudyResultsType& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::GageRandRStudyResultsType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "GageRandRStudyResults",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "GageRandRStudyResults",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::GageRandRStudyResults (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::ProductionStudyResultsType >
    _xsd_ProductionStudyResults_element_serializer_init (
      "StatisticalStudyResults",
      "http://qifstandards.org/xsd/qif2",
      "ProductionStudyResults",
      "http://qifstandards.org/xsd/qif2");


    void
    ProductionStudyResults (::std::ostream& o,
                            const ::xsd::qif2::ProductionStudyResultsType& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProductionStudyResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ProductionStudyResults (::std::ostream& o,
                            const ::xsd::qif2::ProductionStudyResultsType& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProductionStudyResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ProductionStudyResults (::std::ostream& o,
                            const ::xsd::qif2::ProductionStudyResultsType& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProductionStudyResults (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ProductionStudyResults (::xercesc::XMLFormatTarget& t,
                            const ::xsd::qif2::ProductionStudyResultsType& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProductionStudyResults (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ProductionStudyResults (::xercesc::XMLFormatTarget& t,
                            const ::xsd::qif2::ProductionStudyResultsType& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProductionStudyResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ProductionStudyResults (::xercesc::XMLFormatTarget& t,
                            const ::xsd::qif2::ProductionStudyResultsType& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::ProductionStudyResults (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ProductionStudyResults (::xercesc::DOMDocument& d,
                            const ::xsd::qif2::ProductionStudyResultsType& s,
                            ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xsd::qif2::ProductionStudyResultsType) == typeid (s))
      {
        if (n.name () == "ProductionStudyResults" &&
            n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ProductionStudyResults",
            "http://qifstandards.org/xsd/qif2");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "ProductionStudyResults",
          "http://qifstandards.org/xsd/qif2",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ProductionStudyResults (const ::xsd::qif2::ProductionStudyResultsType& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xsd::qif2::ProductionStudyResultsType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "ProductionStudyResults",
          "http://qifstandards.org/xsd/qif2",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "ProductionStudyResults",
          "http://qifstandards.org/xsd/qif2",
          m, s, f);
      }

      ::xsd::qif2::ProductionStudyResults (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const StatisticalStudyPlansType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // StatisticalStudyPlan
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (StatisticalStudyPlansType::StatisticalStudyPlan_const_iterator
             b (i.StatisticalStudyPlan ().begin ()), n (i.StatisticalStudyPlan ().end ());
             b != n; ++b)
        {
          if (typeid (StatisticalStudyPlansType::StatisticalStudyPlan_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "StatisticalStudyPlan",
                "http://qifstandards.org/xsd/qif2",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "StatisticalStudyPlan",
              "http://qifstandards.org/xsd/qif2",
              true, true, e, *b);
        }
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const StatisticalStudiesResultsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // StatisticalStudyResults
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (StatisticalStudiesResultsType::StatisticalStudyResults_const_iterator
             b (i.StatisticalStudyResults ().begin ()), n (i.StatisticalStudyResults ().end ());
             b != n; ++b)
        {
          if (typeid (StatisticalStudiesResultsType::StatisticalStudyResults_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "StatisticalStudyResults",
                "http://qifstandards.org/xsd/qif2",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "StatisticalStudyResults",
              "http://qifstandards.org/xsd/qif2",
              true, true, e, *b);
        }
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const CorrectiveActionPlanType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // AssignableCauses
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AssignableCauses",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.AssignableCauses ();
      }

      // CorrectiveActions
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "CorrectiveActions",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.CorrectiveActions ();
      }

      // id
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "id",
            e));

        a << i.id ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const CorrectiveActionPlansType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // CorrectiveActionPlan
      //
      for (CorrectiveActionPlansType::CorrectiveActionPlan_const_iterator
           b (i.CorrectiveActionPlan ().begin ()), n (i.CorrectiveActionPlan ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "CorrectiveActionPlan",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const StatisticsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Version
      //
      if (i.Version ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Version",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.Version ();
      }

      // StatisticalStudyPlans
      //
      if (i.StatisticalStudyPlans ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "StatisticalStudyPlans",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.StatisticalStudyPlans ();
      }

      // StatisticalStudiesResults
      //
      if (i.StatisticalStudiesResults ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "StatisticalStudiesResults",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.StatisticalStudiesResults ();
      }

      // CorrectiveActionPlans
      //
      if (i.CorrectiveActionPlans ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "CorrectiveActionPlans",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *i.CorrectiveActionPlans ();
      }
    }

    void
    Statistics (::std::ostream& o,
                const ::xsd::qif2::StatisticsType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Statistics (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    Statistics (::std::ostream& o,
                const ::xsd::qif2::StatisticsType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Statistics (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Statistics (::std::ostream& o,
                const ::xsd::qif2::StatisticsType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Statistics (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Statistics (::xercesc::XMLFormatTarget& t,
                const ::xsd::qif2::StatisticsType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Statistics (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    Statistics (::xercesc::XMLFormatTarget& t,
                const ::xsd::qif2::StatisticsType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Statistics (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Statistics (::xercesc::XMLFormatTarget& t,
                const ::xsd::qif2::StatisticsType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::qif2::Statistics (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Statistics (::xercesc::DOMDocument& d,
                const ::xsd::qif2::StatisticsType& s,
                ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Statistics" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Statistics",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Statistics (const ::xsd::qif2::StatisticsType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Statistics",
          "http://qifstandards.org/xsd/qif2",
          m, f));

      ::xsd::qif2::Statistics (*d, s, f);
      return d;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


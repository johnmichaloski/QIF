// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef QIFDOCUMENT_HXX
#define QIFDOCUMENT_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xsd
{
  namespace qif2
  {
    class QIFDocumentType;
    class QIFDocumentHeaderType;
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "qifplan.hxx"

#include "qifresults.hxx"

#include "qifstatistics.hxx"

#include "qifrules.hxx"

#include "qifproduct.hxx"

#include "qifmeasurementresources.hxx"

namespace xsd
{
  namespace qif2
  {
    class QIFDocumentType: public ::xml_schema::type
    {
      public:
      // Attributes
      //
      typedef ::xsd::qif2::AttributesType Attributes_type;
      typedef ::xsd::cxx::tree::optional< Attributes_type > Attributes_optional;
      typedef ::xsd::cxx::tree::traits< Attributes_type, char > Attributes_traits;

      const Attributes_optional&
      Attributes () const;

      Attributes_optional&
      Attributes ();

      void
      Attributes (const Attributes_type& x);

      void
      Attributes (const Attributes_optional& x);

      void
      Attributes (::std::auto_ptr< Attributes_type > p);

      // VersionHistory
      //
      typedef ::xsd::qif2::VersionHistoryType VersionHistory_type;
      typedef ::xsd::cxx::tree::optional< VersionHistory_type > VersionHistory_optional;
      typedef ::xsd::cxx::tree::traits< VersionHistory_type, char > VersionHistory_traits;

      const VersionHistory_optional&
      VersionHistory () const;

      VersionHistory_optional&
      VersionHistory ();

      void
      VersionHistory (const VersionHistory_type& x);

      void
      VersionHistory (const VersionHistory_optional& x);

      void
      VersionHistory (::std::auto_ptr< VersionHistory_type > p);

      // Version
      //
      typedef ::xsd::qif2::VersionType Version_type;
      typedef ::xsd::cxx::tree::optional< Version_type > Version_optional;
      typedef ::xsd::cxx::tree::traits< Version_type, char > Version_traits;

      const Version_optional&
      Version () const;

      Version_optional&
      Version ();

      void
      Version (const Version_type& x);

      void
      Version (const Version_optional& x);

      void
      Version (::std::auto_ptr< Version_type > p);

      // Header
      //
      typedef ::xsd::qif2::QIFDocumentHeaderType Header_type;
      typedef ::xsd::cxx::tree::optional< Header_type > Header_optional;
      typedef ::xsd::cxx::tree::traits< Header_type, char > Header_traits;

      const Header_optional&
      Header () const;

      Header_optional&
      Header ();

      void
      Header (const Header_type& x);

      void
      Header (const Header_optional& x);

      void
      Header (::std::auto_ptr< Header_type > p);

      // PreInspectionTraceability
      //
      typedef ::xsd::qif2::PreInspectionTraceabilityType PreInspectionTraceability_type;
      typedef ::xsd::cxx::tree::optional< PreInspectionTraceability_type > PreInspectionTraceability_optional;
      typedef ::xsd::cxx::tree::traits< PreInspectionTraceability_type, char > PreInspectionTraceability_traits;

      const PreInspectionTraceability_optional&
      PreInspectionTraceability () const;

      PreInspectionTraceability_optional&
      PreInspectionTraceability ();

      void
      PreInspectionTraceability (const PreInspectionTraceability_type& x);

      void
      PreInspectionTraceability (const PreInspectionTraceability_optional& x);

      void
      PreInspectionTraceability (::std::auto_ptr< PreInspectionTraceability_type > p);

      // FileUnits
      //
      typedef ::xsd::qif2::FileUnitsType FileUnits_type;
      typedef ::xsd::cxx::tree::optional< FileUnits_type > FileUnits_optional;
      typedef ::xsd::cxx::tree::traits< FileUnits_type, char > FileUnits_traits;

      const FileUnits_optional&
      FileUnits () const;

      FileUnits_optional&
      FileUnits ();

      void
      FileUnits (const FileUnits_type& x);

      void
      FileUnits (const FileUnits_optional& x);

      void
      FileUnits (::std::auto_ptr< FileUnits_type > p);

      // DatumDefinitions
      //
      typedef ::xsd::qif2::DatumDefinitionsType DatumDefinitions_type;
      typedef ::xsd::cxx::tree::optional< DatumDefinitions_type > DatumDefinitions_optional;
      typedef ::xsd::cxx::tree::traits< DatumDefinitions_type, char > DatumDefinitions_traits;

      const DatumDefinitions_optional&
      DatumDefinitions () const;

      DatumDefinitions_optional&
      DatumDefinitions ();

      void
      DatumDefinitions (const DatumDefinitions_type& x);

      void
      DatumDefinitions (const DatumDefinitions_optional& x);

      void
      DatumDefinitions (::std::auto_ptr< DatumDefinitions_type > p);

      // DatumTargetDefinitions
      //
      typedef ::xsd::qif2::DatumTargetDefinitionsType DatumTargetDefinitions_type;
      typedef ::xsd::cxx::tree::optional< DatumTargetDefinitions_type > DatumTargetDefinitions_optional;
      typedef ::xsd::cxx::tree::traits< DatumTargetDefinitions_type, char > DatumTargetDefinitions_traits;

      const DatumTargetDefinitions_optional&
      DatumTargetDefinitions () const;

      DatumTargetDefinitions_optional&
      DatumTargetDefinitions ();

      void
      DatumTargetDefinitions (const DatumTargetDefinitions_type& x);

      void
      DatumTargetDefinitions (const DatumTargetDefinitions_optional& x);

      void
      DatumTargetDefinitions (::std::auto_ptr< DatumTargetDefinitions_type > p);

      // Transforms
      //
      typedef ::xsd::qif2::TransformListType Transforms_type;
      typedef ::xsd::cxx::tree::optional< Transforms_type > Transforms_optional;
      typedef ::xsd::cxx::tree::traits< Transforms_type, char > Transforms_traits;

      const Transforms_optional&
      Transforms () const;

      Transforms_optional&
      Transforms ();

      void
      Transforms (const Transforms_type& x);

      void
      Transforms (const Transforms_optional& x);

      void
      Transforms (::std::auto_ptr< Transforms_type > p);

      // CoordinateSystems
      //
      typedef ::xsd::qif2::CoordinateSystemListType CoordinateSystems_type;
      typedef ::xsd::cxx::tree::optional< CoordinateSystems_type > CoordinateSystems_optional;
      typedef ::xsd::cxx::tree::traits< CoordinateSystems_type, char > CoordinateSystems_traits;

      const CoordinateSystems_optional&
      CoordinateSystems () const;

      CoordinateSystems_optional&
      CoordinateSystems ();

      void
      CoordinateSystems (const CoordinateSystems_type& x);

      void
      CoordinateSystems (const CoordinateSystems_optional& x);

      void
      CoordinateSystems (::std::auto_ptr< CoordinateSystems_type > p);

      // DatumReferenceFrames
      //
      typedef ::xsd::qif2::DatumReferenceFramesType DatumReferenceFrames_type;
      typedef ::xsd::cxx::tree::optional< DatumReferenceFrames_type > DatumReferenceFrames_optional;
      typedef ::xsd::cxx::tree::traits< DatumReferenceFrames_type, char > DatumReferenceFrames_traits;

      const DatumReferenceFrames_optional&
      DatumReferenceFrames () const;

      DatumReferenceFrames_optional&
      DatumReferenceFrames ();

      void
      DatumReferenceFrames (const DatumReferenceFrames_type& x);

      void
      DatumReferenceFrames (const DatumReferenceFrames_optional& x);

      void
      DatumReferenceFrames (::std::auto_ptr< DatumReferenceFrames_type > p);

      // MeasurementResources
      //
      typedef ::xsd::qif2::MeasurementResourcesType MeasurementResources_type;
      typedef ::xsd::cxx::tree::optional< MeasurementResources_type > MeasurementResources_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementResources_type, char > MeasurementResources_traits;

      const MeasurementResources_optional&
      MeasurementResources () const;

      MeasurementResources_optional&
      MeasurementResources ();

      void
      MeasurementResources (const MeasurementResources_type& x);

      void
      MeasurementResources (const MeasurementResources_optional& x);

      void
      MeasurementResources (::std::auto_ptr< MeasurementResources_type > p);

      // ThreadSpecifications
      //
      typedef ::xsd::qif2::ThreadSpecificationsType ThreadSpecifications_type;
      typedef ::xsd::cxx::tree::optional< ThreadSpecifications_type > ThreadSpecifications_optional;
      typedef ::xsd::cxx::tree::traits< ThreadSpecifications_type, char > ThreadSpecifications_traits;

      const ThreadSpecifications_optional&
      ThreadSpecifications () const;

      ThreadSpecifications_optional&
      ThreadSpecifications ();

      void
      ThreadSpecifications (const ThreadSpecifications_type& x);

      void
      ThreadSpecifications (const ThreadSpecifications_optional& x);

      void
      ThreadSpecifications (::std::auto_ptr< ThreadSpecifications_type > p);

      // Product
      //
      typedef ::xsd::qif2::ProductType Product_type;
      typedef ::xsd::cxx::tree::optional< Product_type > Product_optional;
      typedef ::xsd::cxx::tree::traits< Product_type, char > Product_traits;

      const Product_optional&
      Product () const;

      Product_optional&
      Product ();

      void
      Product (const Product_type& x);

      void
      Product (const Product_optional& x);

      void
      Product (::std::auto_ptr< Product_type > p);

      // Features
      //
      typedef ::xsd::qif2::FeatureAspectsListsType Features_type;
      typedef ::xsd::cxx::tree::optional< Features_type > Features_optional;
      typedef ::xsd::cxx::tree::traits< Features_type, char > Features_traits;

      const Features_optional&
      Features () const;

      Features_optional&
      Features ();

      void
      Features (const Features_type& x);

      void
      Features (const Features_optional& x);

      void
      Features (::std::auto_ptr< Features_type > p);

      // Characteristics
      //
      typedef ::xsd::qif2::CharacteristicAspectsListsType Characteristics_type;
      typedef ::xsd::cxx::tree::optional< Characteristics_type > Characteristics_optional;
      typedef ::xsd::cxx::tree::traits< Characteristics_type, char > Characteristics_traits;

      const Characteristics_optional&
      Characteristics () const;

      Characteristics_optional&
      Characteristics ();

      void
      Characteristics (const Characteristics_type& x);

      void
      Characteristics (const Characteristics_optional& x);

      void
      Characteristics (::std::auto_ptr< Characteristics_type > p);

      // MeasurementPlan
      //
      typedef ::xsd::qif2::MeasurementPlanType MeasurementPlan_type;
      typedef ::xsd::cxx::tree::optional< MeasurementPlan_type > MeasurementPlan_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementPlan_type, char > MeasurementPlan_traits;

      const MeasurementPlan_optional&
      MeasurementPlan () const;

      MeasurementPlan_optional&
      MeasurementPlan ();

      void
      MeasurementPlan (const MeasurementPlan_type& x);

      void
      MeasurementPlan (const MeasurementPlan_optional& x);

      void
      MeasurementPlan (::std::auto_ptr< MeasurementPlan_type > p);

      // MeasurementsResults
      //
      typedef ::xsd::qif2::MeasurementsResultsType MeasurementsResults_type;
      typedef ::xsd::cxx::tree::optional< MeasurementsResults_type > MeasurementsResults_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementsResults_type, char > MeasurementsResults_traits;

      const MeasurementsResults_optional&
      MeasurementsResults () const;

      MeasurementsResults_optional&
      MeasurementsResults ();

      void
      MeasurementsResults (const MeasurementsResults_type& x);

      void
      MeasurementsResults (const MeasurementsResults_optional& x);

      void
      MeasurementsResults (::std::auto_ptr< MeasurementsResults_type > p);

      // Statistics
      //
      typedef ::xsd::qif2::StatisticsType Statistics_type;
      typedef ::xsd::cxx::tree::optional< Statistics_type > Statistics_optional;
      typedef ::xsd::cxx::tree::traits< Statistics_type, char > Statistics_traits;

      const Statistics_optional&
      Statistics () const;

      Statistics_optional&
      Statistics ();

      void
      Statistics (const Statistics_type& x);

      void
      Statistics (const Statistics_optional& x);

      void
      Statistics (::std::auto_ptr< Statistics_type > p);

      // ManufacturingProcessTraceabilities
      //
      typedef ::xsd::qif2::ManufacturingProcessTraceabilitiesType ManufacturingProcessTraceabilities_type;
      typedef ::xsd::cxx::tree::optional< ManufacturingProcessTraceabilities_type > ManufacturingProcessTraceabilities_optional;
      typedef ::xsd::cxx::tree::traits< ManufacturingProcessTraceabilities_type, char > ManufacturingProcessTraceabilities_traits;

      const ManufacturingProcessTraceabilities_optional&
      ManufacturingProcessTraceabilities () const;

      ManufacturingProcessTraceabilities_optional&
      ManufacturingProcessTraceabilities ();

      void
      ManufacturingProcessTraceabilities (const ManufacturingProcessTraceabilities_type& x);

      void
      ManufacturingProcessTraceabilities (const ManufacturingProcessTraceabilities_optional& x);

      void
      ManufacturingProcessTraceabilities (::std::auto_ptr< ManufacturingProcessTraceabilities_type > p);

      // Rules
      //
      typedef ::xsd::qif2::QIFRulesType Rules_type;
      typedef ::xsd::cxx::tree::optional< Rules_type > Rules_optional;
      typedef ::xsd::cxx::tree::traits< Rules_type, char > Rules_traits;

      const Rules_optional&
      Rules () const;

      Rules_optional&
      Rules ();

      void
      Rules (const Rules_type& x);

      void
      Rules (const Rules_optional& x);

      void
      Rules (::std::auto_ptr< Rules_type > p);

      // UserDataXML
      //
      typedef ::xsd::qif2::UserDataXMLType UserDataXML_type;
      typedef ::xsd::cxx::tree::optional< UserDataXML_type > UserDataXML_optional;
      typedef ::xsd::cxx::tree::traits< UserDataXML_type, char > UserDataXML_traits;

      const UserDataXML_optional&
      UserDataXML () const;

      UserDataXML_optional&
      UserDataXML ();

      void
      UserDataXML (const UserDataXML_type& x);

      void
      UserDataXML (const UserDataXML_optional& x);

      void
      UserDataXML (::std::auto_ptr< UserDataXML_type > p);

      // versionQIF
      //
      typedef ::xml_schema::nmtoken versionQIF_type;
      typedef ::xsd::cxx::tree::traits< versionQIF_type, char > versionQIF_traits;

      const versionQIF_type&
      versionQIF () const;

      static const versionQIF_type&
      versionQIF_default_value ();

      // idMax
      //
      typedef ::xml_schema::unsigned_int idMax_type;
      typedef ::xsd::cxx::tree::optional< idMax_type > idMax_optional;
      typedef ::xsd::cxx::tree::traits< idMax_type, char > idMax_traits;

      const idMax_optional&
      idMax () const;

      idMax_optional&
      idMax ();

      void
      idMax (const idMax_type& x);

      void
      idMax (const idMax_optional& x);

      // Constructors.
      //
      QIFDocumentType ();

      QIFDocumentType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      QIFDocumentType (const QIFDocumentType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual QIFDocumentType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      QIFDocumentType&
      operator= (const QIFDocumentType& x);

      virtual 
      ~QIFDocumentType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Attributes_optional Attributes_;
      VersionHistory_optional VersionHistory_;
      Version_optional Version_;
      Header_optional Header_;
      PreInspectionTraceability_optional PreInspectionTraceability_;
      FileUnits_optional FileUnits_;
      DatumDefinitions_optional DatumDefinitions_;
      DatumTargetDefinitions_optional DatumTargetDefinitions_;
      Transforms_optional Transforms_;
      CoordinateSystems_optional CoordinateSystems_;
      DatumReferenceFrames_optional DatumReferenceFrames_;
      MeasurementResources_optional MeasurementResources_;
      ThreadSpecifications_optional ThreadSpecifications_;
      Product_optional Product_;
      Features_optional Features_;
      Characteristics_optional Characteristics_;
      MeasurementPlan_optional MeasurementPlan_;
      MeasurementsResults_optional MeasurementsResults_;
      Statistics_optional Statistics_;
      ManufacturingProcessTraceabilities_optional ManufacturingProcessTraceabilities_;
      Rules_optional Rules_;
      UserDataXML_optional UserDataXML_;
      ::xsd::cxx::tree::one< versionQIF_type > versionQIF_;
      static const versionQIF_type versionQIF_default_value_;
      idMax_optional idMax_;
    };

    class QIFDocumentHeaderType: public ::xml_schema::type
    {
      public:
      // Application
      //
      typedef ::xsd::qif2::ApplicationType Application_type;
      typedef ::xsd::cxx::tree::optional< Application_type > Application_optional;
      typedef ::xsd::cxx::tree::traits< Application_type, char > Application_traits;

      const Application_optional&
      Application () const;

      Application_optional&
      Application ();

      void
      Application (const Application_type& x);

      void
      Application (const Application_optional& x);

      void
      Application (::std::auto_ptr< Application_type > p);

      // Author
      //
      typedef ::xsd::qif2::AuthorType Author_type;
      typedef ::xsd::cxx::tree::optional< Author_type > Author_optional;
      typedef ::xsd::cxx::tree::traits< Author_type, char > Author_traits;

      const Author_optional&
      Author () const;

      Author_optional&
      Author ();

      void
      Author (const Author_type& x);

      void
      Author (const Author_optional& x);

      void
      Author (::std::auto_ptr< Author_type > p);

      // ApplicationSource
      //
      typedef ::xsd::qif2::ApplicationType ApplicationSource_type;
      typedef ::xsd::cxx::tree::optional< ApplicationSource_type > ApplicationSource_optional;
      typedef ::xsd::cxx::tree::traits< ApplicationSource_type, char > ApplicationSource_traits;

      const ApplicationSource_optional&
      ApplicationSource () const;

      ApplicationSource_optional&
      ApplicationSource ();

      void
      ApplicationSource (const ApplicationSource_type& x);

      void
      ApplicationSource (const ApplicationSource_optional& x);

      void
      ApplicationSource (::std::auto_ptr< ApplicationSource_type > p);

      // Description
      //
      typedef ::xml_schema::string Description_type;
      typedef ::xsd::cxx::tree::optional< Description_type > Description_optional;
      typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

      const Description_optional&
      Description () const;

      Description_optional&
      Description ();

      void
      Description (const Description_type& x);

      void
      Description (const Description_optional& x);

      void
      Description (::std::auto_ptr< Description_type > p);

      // Scope
      //
      typedef ::xml_schema::string Scope_type;
      typedef ::xsd::cxx::tree::optional< Scope_type > Scope_optional;
      typedef ::xsd::cxx::tree::traits< Scope_type, char > Scope_traits;

      const Scope_optional&
      Scope () const;

      Scope_optional&
      Scope ();

      void
      Scope (const Scope_type& x);

      void
      Scope (const Scope_optional& x);

      void
      Scope (::std::auto_ptr< Scope_type > p);

      // Constructors.
      //
      QIFDocumentHeaderType ();

      QIFDocumentHeaderType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      QIFDocumentHeaderType (const QIFDocumentHeaderType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual QIFDocumentHeaderType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      QIFDocumentHeaderType&
      operator= (const QIFDocumentHeaderType& x);

      virtual 
      ~QIFDocumentHeaderType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      Application_optional Application_;
      Author_optional Author_;
      ApplicationSource_optional ApplicationSource_;
      Description_optional Description_;
      Scope_optional Scope_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xsd
{
  namespace qif2
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xsd
{
  namespace qif2
  {
    // Serialize to std::ostream.
    //

    void
    QIFDocument (::std::ostream& os,
                 const ::xsd::qif2::QIFDocumentType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    void
    QIFDocument (::std::ostream& os,
                 const ::xsd::qif2::QIFDocumentType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    void
    QIFDocument (::std::ostream& os,
                 const ::xsd::qif2::QIFDocumentType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    QIFDocument (::xercesc::XMLFormatTarget& ft,
                 const ::xsd::qif2::QIFDocumentType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    void
    QIFDocument (::xercesc::XMLFormatTarget& ft,
                 const ::xsd::qif2::QIFDocumentType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    void
    QIFDocument (::xercesc::XMLFormatTarget& ft,
                 const ::xsd::qif2::QIFDocumentType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    QIFDocument (::xercesc::DOMDocument& d,
                 const ::xsd::qif2::QIFDocumentType& x,
                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    QIFDocument (const ::xsd::qif2::QIFDocumentType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const QIFDocumentType&);

    void
    operator<< (::xercesc::DOMElement&, const QIFDocumentHeaderType&);

    // Serialize to std::ostream.
    //

    void
    Header (::std::ostream& os,
            const ::xsd::qif2::QIFDocumentHeaderType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    void
    Header (::std::ostream& os,
            const ::xsd::qif2::QIFDocumentHeaderType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    void
    Header (::std::ostream& os,
            const ::xsd::qif2::QIFDocumentHeaderType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Header (::xercesc::XMLFormatTarget& ft,
            const ::xsd::qif2::QIFDocumentHeaderType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    void
    Header (::xercesc::XMLFormatTarget& ft,
            const ::xsd::qif2::QIFDocumentHeaderType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    void
    Header (::xercesc::XMLFormatTarget& ft,
            const ::xsd::qif2::QIFDocumentHeaderType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Header (::xercesc::DOMDocument& d,
            const ::xsd::qif2::QIFDocumentHeaderType& x,
            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Header (const ::xsd::qif2::QIFDocumentHeaderType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // QIFDOCUMENT_HXX
